<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2023-05-19T12:47:04.154+02:00" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>FUNCTION Statement</title>
  <keywords>
    <keyword>Compiledeclaration</keyword>
    <keyword>Declaration statements</keyword>
    <keyword>Entity declaration</keyword>
    <keyword>FUNCTION</keyword>
    <keyword>FUNCTION statement</keyword>
    <keyword>Statements</keyword>
    <keyword>STATIC FUNCTION statement</keyword>
    <keyword>Strong typing<keyword>defined</keyword></keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">FUNCTION Statement</para>
    </header>
    <para styleclass="Heading1">Purpose</para>
    <para styleclass="Normal">Declare a function name and an optional list of local variable names to the compiler. When used inside a FoxPro DEFINE CLASS .. ENDDEFINE this declares a method.</para>
    <para styleclass="Heading1">Syntax</para>
    <para styleclass="Normal"><tab />[Attributes] [Modifiers] <text style="font-weight:bold;">FUNCTION</text> &lt;<text styleclass="Italic">idFunction</text>&gt; </para>
    <para styleclass="Normal"><tab />[Typeparameters]</para>
    <para styleclass="Normal"><tab />[([&lt;<text styleclass="Italic">idParam</text>&gt; [AS | REF|OUT|IN &lt;<text styleclass="Italic">idType</text>&gt;] [, ...])] </para>
    <para styleclass="Normal"><tab />[AS &lt;<text styleclass="Italic">idType</text>&gt;]</para>
    <para styleclass="Normal"><tab />[TypeparameterConstraints]</para>
    <para styleclass="Normal"><tab />[&lt;<text styleclass="Italic">idConvention</text>&gt;]</para>
    <para styleclass="Normal"><tab />[EXPORT LOCAL] </para>
    <para styleclass="Normal"><tab />[DLLEXPORT STRING_CONST]</para>
    <para styleclass="Normal"><tab />[=&gt; &lt;expression&gt;]</para>
    <para styleclass="Normal"><tab /><text style="font-weight:bold;">CRLF</text></para>
    <para styleclass="Normal"><tab />[&lt;<text styleclass="Italic">Body</text>&gt;]</para>
    <para styleclass="Normal"><tab />[ENDFUNC | END FUNCTION]</para>
    <para styleclass="Heading1">Arguments</para>
    <para styleclass="Heading1"><snippet src="__IncludeAttributes" inline="false"/></para>
    <para styleclass="List"><snippet src="__IncludeFuncProcModifiers" inline="false"/></para>
    <para styleclass="List"><tab />Please note that functions and procedures used as class members in FoxPro compatible classes can have more modifiers.</para>
    <para styleclass="List"></para>
    <para styleclass="List">&lt;idFunction&gt;<tab />A valid identifier name for the function. &#160;A function is an entity and, as such, shares the same name space as other entities. &#160;This means that it is not possible to have a function and a class, for example, with the same name.</para>
    <para styleclass="List"><snippet src="__IncludeFunctionParameters" inline="false"/></para>
    <para styleclass="List"><snippet src="__IncludeExpressionBody" inline="false"/></para>
    <para styleclass="List"><snippet src="__IncludeBody" inline="false"/></para>
    <para styleclass="List"></para>
    <para styleclass="List">ENDFUNC | END FUNCTION<tab />These (optional)keywords indicate the logical end of the function.</para>
    <para styleclass="Heading1">Description</para>
    <para styleclass="Normal">A function is a subprogram comprised of a set of declarations and statements to be executed whenever you refer to &lt;<text styleclass="Italic">idFunction</text>&gt; followed by a pair of parentheses (see Notes section, below).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Functions and procedures (see the PROCEDURE statement in this guide) are the basic procedural programming units. &#160;You will use them in your applications to organize computational blocks of code.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">STATIC FUNCTION allows you to limit the visibility of a function name to the current module, thereby restricting access to the function. &#160;This feature is useful when designing a module that will contain some public routines (i.e., with application-wide visibility) and others that are strictly support routines (i.e., only needed by other routines in the same module).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Simply declare all support functions using STATIC FUNCTION. &#160;Doing this gives you two immediate advantages. &#160;First, no other module in the application will inadvertently call one of your support routines. &#160;Second, since static references are resolved at compile time and public references are resolved at link time, there is no possibility of a name conflict. &#160;For example, if you have a static Service() function declared in module X and a public Service() function declared in module Y, all references to Service() in X execute the static version and all other references to Service() in the application execute the public version.</para>
    <para styleclass="Heading1">Notes</para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">The Start() function: &#160;</text>All applications must either have one function or procedure named Start() or be linked with the GUI Classes library and have a method Start() of CLASS App. &#160;Start() serves as the startup routine when the application is executed. &#160;Start() cannot declare any parameters and, under normal circumstances, should not return a value. &#160;If you want to use <link displaytype="text" defaultstyle="true" type="topiclink" href="Strong-Typing">strong typing</link> in the declaration statement, you must specify AS USUAL PASCAL.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">Exporting locals through code blocks: &#160;</text>When you create a code block, you can access local variables defined in the creating entity within the code block definition without having to pass them as parameters (i.e., local variables are visible to the code block). &#160;Using this fact along with the fact that you can pass a code block as a parameter, you can export local variables. &#160;For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> One</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">EXPORT</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nVar </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">10</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> cbAdd </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cbAdd </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">{</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">|</text><text style="font-weight:bold; font-style:normal; color:#000000;">nValue</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">|</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nValue </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">+</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nVar</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">}</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> NextFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cbAdd</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Result: &#160;210</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> NextFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cbAddEmUp</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">EVAL</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cbAddEmUp</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">200))</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">When the code block is evaluated in NextFunc(), <text styleclass="Italic">nVar</text>, which is local to function One(), becomes visible even though it is not passed directly as a parameter.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">Calling a function: &#160;</text>The syntax to call a function is as follows:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">&lt;idFunction&gt;([&lt;uArgList&gt;])</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">where &lt;<text styleclass="Italic">uArgList</text>&gt; is an optional comma-separated list of arguments to pass to the named function. &#160;The function receives the arguments in the order passed using the parameter variables specified as part of the function declaration.</para>
    <para styleclass="Normal">Note that although the parentheses are not required in the FUNCTION statement if the function has no parameters, they are always required in the invocation.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You can call a function within an expression or as a program statement. &#160;If called as a program statement, the return value is ignored.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You can also call a function as an aliased expression, as in:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">&lt;idAlias&gt;-&gt;&lt;idFunction&gt;([&lt;uArgList&gt;])</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">When you do this, the work area associated with &lt;<text styleclass="Italic">idAlias</text>&gt; is selected, the function is executed, and the original work area is reselected. &#160;You can specify an aliased expression as a program statement, as you would any other expression.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">A function can call itself recursively. &#160;This means you can refer to a function in its own &lt;<text styleclass="Italic">FunctionBody</text>&gt;.</para>
    <para styleclass="Normal">The specific manner in which you call a function depends on the calling convention (&lt;<text styleclass="Italic">idConvention</text>&gt;) that you specify (either explicitly or implicitly) when you declare the function.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">CLIPPER calling convention: &#160;</text>If you declare the function without any data types in the parameter list, the function uses the CLIPPER calling convention by default. &#160;You can also specify the CLIPPER calling convention in the FUNCTION declaration statement, providing that you do not use strong typing in the parameter list.</para>
    <para styleclass="Normal">Although it does not allow strongly typed parameters, the CLIPPER calling convention supports strong typing of the function return value.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">With the CLIPPER calling convention, the number of parameters declared for the function does not have to match the number of arguments passed when you call the function. &#160;You can skip any argument by leaving it out of the list (specifying two consecutive commas) or by omitting it from the end of the list. &#160;For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Start</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">MyFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(1,,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">3)</text><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Skip second argument</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">MyFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(1,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">2)</text><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Skip final argument</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> MyFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">x</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> y</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> z</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text></para>
    <para styleclass="Normal"><tab /><text styleclass="Code Example">...</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">A parameter not receiving a value is automatically initialized to NIL by the function so that you can check for skipped arguments. &#160;You can use PCount() to help determine the number of arguments passed — this function returns the position of the last argument passed.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Any parameter specified in a CLIPPER function can receive arguments passed by value or reference — the semantics are determined when the function is called rather than when it is declared. &#160;The default method for expressions and variables is by value. &#160;All variables except field variables, when prefaced with the reference operator (@), are passed by reference. &#160;Field variables cannot be passed by reference and are always passed by value.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">STRICT calling convention: &#160;</text>If you declare the function with any data types in the parameter list, the function uses the STRICT calling convention by default. &#160;You can also specify the STRICT calling convention in the FUNCTION declaration statement.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Using the STRICT calling convention, you give up many of the features allowed with the CLIPPER calling convention, but you gain in compilation speed, application integrity, and execution speed by strongly typing the parameters and return value and declaring the passing semantics of the function.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">STRICT functions do not support a variable number of arguments, PCount(), or the ability to be used in macro expressions.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Like CLIPPER functions, STRICT functions allow the calling semantics to be determined when the function is called, but only for polymorphic parameters (i.e., those not strongly typed). &#160;When a parameter is typed, the calling semantics are also declared depending on whether you use the AS or the REF keyword. &#160;AS means that the parameter must be passed by value and REF means that it must be passed by reference (with the reference operator (@)).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">PASCAL calling convention: &#160;</text>To specify this calling convention, use PASCAL as the last keyword in the FUNCTION declaration statement. &#160;Syntactically, the PASCAL calling convention is identical to STRICT and the usage restrictions are the same, but internally it is handled differently. &#160;It is identical to the Microsoft Pascal calling convention, and its primary use is for low-level interfacing with Windows.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">CALLBACK calling convention: &#160;</text>To specify this calling convention, use CALLBACK as the last keyword in the FUNCTION declaration statement. &#160;This is a special PASCAL calling convention with Windows prologue and epilogue. &#160;It is used for low-level interfacing with Windows.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">Parameters: &#160;</text>As an alternative to specifying parameters in the FUNCTION declaration statement, you can use a PARAMETERS statement to specify them. &#160;This practice, however, is not recommended because it is less efficient and provides no compile-time integrity validation. &#160;See the PARAMETERS statement in this guide for more information.</para>
    <para styleclass="Heading1">Examples</para>
    <para styleclass="Normal">This example demonstrates a function that formats numeric values as currency:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Start</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Currency</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(1000)</text><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Result: &#160;$1,000.00</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Currency</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">nNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> cNum</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nNum &lt; </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">0</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cNum </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Transform</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(-1</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">*</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">;</text><br/><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">&quot;999,999,999,999.99&quot;)</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cNum </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> PadL</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(&quot;($&quot;</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">+</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LTRIM</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)+</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">&quot;)&quot;,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">;</text><br/><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LEN</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">))</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">ELSE</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cNum </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Transform</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">nNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">;</text><br/><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">&quot;999,999,999,999.99&quot;)</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cNum </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> PadL</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(&quot;$&quot;</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">+</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LTRIM</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">),</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">;</text><br/><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LEN</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cNum</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">))</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:bold; font-style:normal; color:#000000;"> cNum</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The next example demonstrates a function that takes a string formatted as a comma-separated list and returns an array with one element per item:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">aList </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> ListAsArray</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(&quot;One, Two&quot;)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Result: &#160;{&quot;One&quot;, &quot;Two&quot;}</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> ListAsArray</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nPos</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> aList </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">{}</text><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Define an empty array</text><br/><tab /><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">DO</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">WHILE</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">nPos </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AT</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(&quot;,&quot;,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> cList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">))</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">!=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">0</text><br/><tab /><tab /><tab /><tab /><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Add a new element</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">AADD</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">aList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SUBSTR</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">1,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nPos </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">-</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">1))</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">cList </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SUBSTR</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">cList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> nPos </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">+</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">1)</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">ENDDO</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">AADD</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">aList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;"> cList</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><br/><tab /><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:bold; font-style:normal; color:#000000;"> aList</text><tab /><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Return the array</text></para>
    <para styleclass="Normal">This example checks for a skipped argument by comparing the parameter to NIL:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> MyFunc</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">param1</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">param2</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">,</text><text style="font-weight:bold; font-style:normal; color:#000000;">param3</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text style="font-weight:bold; font-style:normal; color:#000000;"> param2 </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">NIL</text><br/><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">param2 </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">&quot;default value&quot;</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><tab />...</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Here the Currency() function (defined above) is used as an aliased expression:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">USE invoices NEW</text><br/><text style="font-weight:bold; font-style:normal; color:#000000;">USE customer NEW</text><br/><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Invoices</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">-&gt;</text><text style="font-weight:bold; font-style:normal; color:#000000;">Currency</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">(</text><text style="font-weight:bold; font-style:normal; color:#000000;">Amount</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">)</text></para>
    <para styleclass="Heading1">See Also</para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_FIELD">FIELD</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_LOCAL">LOCAL</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_MEMVAR">MEMVAR</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_METHOD">METHOD</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_PROCEDURE">PROCEDURE</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_RETURN">RETURN</link></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:16px; margin-bottom:0px; margin-left:12px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:144px left ;"></para>
  </body>
</topic>
