<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>XS4014</title>
  <keywords>
    <keyword>XS4014</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">Warning XS4014</para>
    </header>
    <para styleclass="Normal">Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the &apos;await&apos; operator to the result of the call.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn’t apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn&apos;t what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from the method that contains the call.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">An equally important issue is what happens to exceptions that are raised in the called async method. An exception that&apos;s raised in a method that returns a Task or Task&lt;TResult&gt; is stored in the returned task. If you don&apos;t await the task or explicitly check for exceptions, the exception is lost. If you await the task, its exception is rethrown.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">As a best practice, you should always await the call.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You should consider suppressing the warning only if you&apos;re sure that you don&apos;t want to wait for the asynchronous call to complete and that the called method won&apos;t raise any exceptions. In that case, you can suppress the warning by assigning the task result of the call to a variable.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The following example shows how to cause the warning, how to suppress it, and how to await the call.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"> </para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In the example, if you choose Call #1 or Call #2, the unawaited async method (<text styleclass="Code Example">CalledMethodAsync</text>) finishes after both its caller (<text styleclass="Code Example">CallingMethodAsync</text>) and the caller&apos;s caller (<text styleclass="Code Example">startButton_Click</text>) are complete. The last line in the following output shows you when the called method finishes. Entry to and exit from the event handler that calls <text styleclass="Code Example">CallingMethodAsync</text> in the full example are marked in the output.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">  </para>
    <para styleclass="Code with box"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You</para>
    <para styleclass="Normal"> can also suppress compiler warnings by using #pragma warning directives.</para>
    <para styleclass="Heading2">Example</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The following Windows Presentation Foundation (WPF) application contains the methods from the previous example. The following steps set up the application.</para>
    <para styleclass="Normal"></para>
    <list id="1" type="ol" listtype="decimal" formatstring="%0:s." format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Arial; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;">Create a WPF application, and name it AsyncWarning.</li>
      <li styleclass="Normal" style="margin-left:13px;">In the Visual Studio Code Editor, choose the MainWindow.xaml tab.</li>
    </list>
    <para styleclass="Normal" style="margin-left:13px;">     If the tab isn&apos;t visible, open the shortcut menu for MainWindow.xaml in Solution Explorer, and then choose View Code.</para>
    <list id="1" type="ol" listtype="decimal" formatstring="%0:s." format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Arial; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;">Replace the code in the XAML view of MainWindow.xaml with the following code.</li>
    </list>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Code with box"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">A simple window that contains a button and a text box appears in the Design view of MainWindow.xaml.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">For more information about the XAML Designer, see Creating a UI by using XAML Designer. For information about how to build your own simple UI, see the &quot;To create a WPF application&quot; and &quot;To design a simple WPF MainWindow&quot; sections of Walkthrough: Accessing the Web by Using Async and Await.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal" style="margin-left:13px;">4.   Replace the code in MainWindow.xaml.prg with the following code.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal" style="margin-left:13px;">5.  Choose the F5 key to run the program, and then choose the Start button.</para>
    <para styleclass="Normal" style="margin-left:13px;"></para>
    <para styleclass="Normal" style="margin-left:13px;">     The expected output appears at the end of the code.</para>
  </body>
</topic>
