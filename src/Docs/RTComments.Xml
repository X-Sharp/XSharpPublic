<?xml version="1.0" encoding="utf-8" ?>
<Comments>
  <CollationTable>
    <span>
      <summary>
        A localized collation table of type System.Byte[].
      </summary>
    </span>
  </CollationTable>
  <FileAtrChanged>
    <span>
      Compared to earlier Xbase versions the return value of Directory() has changed: <br />
      each subarray returned from Directory() now contains some extra values, such as creation date and
      last access date. The normal F_DATE and F_TIME elements represent the last written date and time.
    </span>
  </FileAtrChanged>
  
  <FileAttributes>
    <span>
      <include file="RTComments.xml" path="Comments/FileAtrChanged/*"  />
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>F_ATTR</term>
          <description>File attributes (as a string)</description>
        </item>
        <item>
          <term>F_DATE</term>
          <description>Date of last update (as a date)</description>
        </item>
        <item>
          <term>F_NAME</term>
          <description>Name of file (as a string)</description>
        </item>
        <item>
          <term>F_SIZE</term>
          <description>Size of file (as a numeric)</description>
        </item>
        <item>
          <term>F_TIME</term>
          <description>Time of last update (as a string)</description>
        </item>
        <item>
          <term>F_WRITE_DATE</term>
          <description>Time of last file write date (as a date)</description>
        </item>
        <item>
          <term>F_WRITE_TIME</term>
          <description>Time of last file write time (as a string)</description>
        </item>
        <item>
          <term>F_CREATION_DATE</term>
          <description>Time of file creation date (as a date)</description>
        </item>
        <item>
          <term>F_CREATION_TIME</term>
          <description>Time of file creation time (as a string)</description>
        </item>
        <item>
          <term>F_ACCESS_DATE</term>
          <description>Time of last access date (as a date)</description>
        </item>
        <item>
          <term>F_ACCESS_TIME</term>
          <description>Time of last access time (as a string)</description>
        </item>
        <item>
          <term>F_EA_SIZE</term>
          <description>.Net File attributes for the file</description>
        </item>
      </list>
    </span>
  </FileAttributes>
  <DbStruct_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Description</description>
        </listheader>
   <item>
     <term>DBS_NAME</term>
     <description>Returns the name of the field.</description>
   </item>
   <item>
     <term>DBS_TYPE</term>
     <description>Returns the data type of the field.</description>
   </item>
   <item>
     <term>DBS_LEN</term>
     <description>Returns the length of the field.</description>
   </item>
   <item>
     <term>DBS_DEC</term>
     <description>Returns the number of decimal places for the field.</description>
   </item>
        <item>
          <term>DBS_ALIAS</term>
          <description>cAlias</description>
        </item>
 </list>      
    </span>
  </DbStruct_Constants>
  <DBS_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constants</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>DBS_ALIAS</term>
          <description>
            Returns and optionally changes an alternate name (or alias) by which a field can be referenced 
            (by default, same as DBS_NAME). Using the <paramref name="uNewSetting" /> argument, you can 
            specify a string that you can subsequently use to access the indicated field.
          </description>
        </item>
        <item>
          <term>DBS_BLOB_DIRECT_LEN</term>
          <description>
            Returns the length of data in a BLOB as an unsigned long integer, without referencing a particular memo field.
            For strings, the return value is the length of the string in bytes;
            for arrays, it is the number of elements in the first dimension; for all other data types, it returns -1.
            With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(), or
            FieldInfo(DBS_BLOB_POINTER, .../>).
          </description>
        </item>
        <item>
          <term>DBS_BLOB_DIRECT_TYPE</term>
          <description>
            To determine the data type of BLOB data, without reference to a particular memo field, use DBS_BLOB_DIRECT_TYPE.
            With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), 
            BLOBDirectImport(), or FieldInfo(DBS_BLOB_POINTER, ...).
          </description>
        </item>
        <item>
          <term></term>
          <description>See DBS_BLOB_TYPE for a table of possible return values.</description>
        </item>
        <item>
          <term>DBS_BLOB_LEN</term>
          <description>
            Returns the length of the BLOB data in a memo field as an unsigned long integer. For strings, the return value is the length of the string in bytes; for arrays, it is the number of elements in the first dimension; for all other data types, it returns -1.
            <note type="tip">Using DBS_BLOB_LEN has a performance advantage over retrieving the value and using the Len() function.</note>
          </description>
        </item>
        <item>
          <term>DBS_BLOB_POINTER</term>
          <description>Returns a numeric pointer to the BLOB data associated with a memo field.</description>
        </item>
        <item>
          <term>DBS_BLOB_TYPE</term>
          <description>
            Unlike memo fields maintained in .DBT files, BLOB files allow you to store many different types of data in memo fields. 
            However, the standard functions for determining data types, such as ValType(), simply treat BLOB fields as regular memo 
            fields. To determine the actual type of BLOB data stored in a memo field, use DBS_BLOB_TYPE.<br/>
            The data type of the return value is string and can be interpreted using this table:
          <list type="table">
            <listheader>
              <term>Returns</term>
              <description>Meaning</description>
            </listheader>
            <item>
              <term>?</term>
              <description>Blank (empty/uninitialized field)</description>
            </item>
            <item>
              <term>A</term>
              <description>Array</description>
            </item>
            <item>
              <term>C</term>
              <description>String</description>
            </item>
            <item>
              <term>D</term>
              <description>Date</description>
            </item>
            <item>
              <term>E</term>
              <description>Error</description>
            </item>
            <item>
              <term>L</term>
              <description>Logical</description>
            </item>
            <item>
              <term>N</term>
              <description>Numeric</description>
            </item>
            <item>
              <term>U</term>
              <description>Undefined (NIL was stored)</description>
            </item>
          </list>
          </description>
        </item>
        <item>
          <term>DBS_DEC</term>
          <description>Returns the number of decimal places for the field.</description>
        </item>
        <item>
          <term>DBS_LEN</term>
          <description>Returns the length of the field.</description>
        </item>
        <item>
          <term>DBS_NAME</term>
          <description>Returns the name of the field.</description>
        </item>
        <item>
          <term>DBS_PROPERTIES</term>
          <description>Returns the number of properties defined for a field.</description>
        </item>
        <item>
          <term>DBS_TYPE</term>
          <description>Returns the data type of the field.</description>
        </item>
        <item>
          <term>DBS_USER</term>
          <description>Start of user defined values.</description>
        </item>
      </list>
      <note type="tip">
        DBS_USER is a constant that returns the minimum value that third-party RDD developers can use for customizations.
        Values less than DBS_USER are reserved for X# development.
      </note>
    </span>
  </DBS_Constants>
  <DBI_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>DBI_ALIAS</term>
          <description>Returns the alias name of the work area as a string.</description>
        </item>
        <item>
          <term>DBI_BLOB_HANDLE</term>
          <description>
            Returns an IntPtr representing the file handle for a BLOB file.
            The constant is most often used in conjunction with FieldInfo(DBS_BLOB_LEN, ...) and
            FieldInfo(DBS_BLOB_POINTER, ...) to directly access BLOB fields using low-level functions, such as FRead().</description>
        </item>
        <item>
          <term>DBI_BLOB_INTEGRITY</term>
          <description>Tests a BLOB file for the integrity of its internal tables and returns a logical value indicating the success (TRUE) or failure (FALSE) of the integrity check. This should not generally be necessary, but it is handy if the file's integrity is in question for any reason. 
          This does not test the integrity between the .DBF and the BLOB file.</description>
        </item>
        <item>
          <term></term>
          <description>If the integrity check fails, you can run Info(DBI_BLOB_RECOVER), which will automatically correct the 
          BLOB file's tables, however, it will abandon some space within the file that would otherwise be reused.</description>
        </item>
        <item>
          <term></term>
          <description>
            <br />Important! DBServer:Info(DBI_BLOB_INTEGRITY) is a disk intensive operation and may slow down processing of the data server significantly, especially on a busy network.
          </description>
        </item>
        <item>
          <term>DBI_BLOB_RECOVER</term>
          <description>Recovers a damaged BLOB file by correcting its internal tables and returns NIL. You should run this only if DBServer:Info(DBI_BLOB_INTEGRITY) returns FALSE. Note that after running DBServer:Info(DBI_BLOB_RECOVER), the BLOB file loses some size efficiency.</description>
        </item>
        <item>
          <term>DBI_BOF</term>
          <description>Returns a logical value indicating the data server's beginning-of-file status (see DBServer:BOF).</description>
        </item>
        <item>
          <term>DBI_CANPUTREC</term>
          <description>Returns a logical value indicating whether the data server supports putting records.</description>
        </item>
        <item>
          <term>DBI_CHILDCOUNT</term>
          <description>Returns the number of relations set from this data server.</description>
        </item>
        <item>
          <term>DBI_DB_VERSION</term>
          <description>Returns the version number of the host RDD (CAVORDDB.DLL or CAVORDD.DLL).</description>
        </item>
        <item>
          <term>DBI_DBFILTER</term>
          <description>Returns the filter expression as a string (see DBServer:Filter).</description>
        </item>
        <item>
          <term>DBI_EOF</term>
          <description>Returns a logical value indicating the data server's end-of-file status (see DBServer:EOF).</description>
        </item>
        <item>
          <term>DBI_FCOUNT</term>
          <description>Returns the number of fields (see DBServer:FCount).</description>
        </item>
        <item>
          <term>DBI_FILEHANDLE</term>
          <description>Returns an IntPtr representing the file handle for this database file.</description>
        </item>
        <item>
          <term>DBI_FILESTREAM</term>
          <description>Returns a stream object representing the file stream for this database file.</description>
        </item>
        <item>
          <term>DBI_FOUND</term>
          <description>Returns a logical value indicating the success or filure of the last seek operation for this data server (see DBServer:Found).</description>
        </item>
        <item>
          <term>DBI_FULLPATH</term>
          <description>Returns the full path name of opened database file.</description>
        </item>
        <item>
          <term>DBI_GETDELIMITER</term>
          <description>Returns the default delimiter.</description>
        </item>
        <item>
          <term>DBI_GETHEADERSIZE</term>
          <description>Returns the header size of the file (see DBServer:Header).</description>
        </item>
        <item>
          <term>DBI_GETLOCKARRAY</term>
          <description>Returns the array of locked records.</description>
        </item>
        <item>
          <term>DBI_GETRECSIZE</term>
          <description>Returns the record size of the file (see DBServer:RecSize).</description>
        </item>
        <item>
          <term>DBI_GETSCOPE</term>
          <description>Returns the locate condition as a code block.</description>
        </item>
        <item>
          <term>DBI_ISANSI</term>
          <description>Returns the ANSI flag of the database file (TRUE for ANSI and FALSE for OEM).</description>
        </item>
        <item>
          <term>DBI_ISDBF</term>
          <description>Returns a logical value indicating whether the RDD provides support for the .DBF file format.</description>
        </item>
        <item>
          <term>DBI_ISFLOCK</term>
          <description>Returns the file lock status.</description>
        </item>
        <item>
          <term>DBI_LASTUPDATE</term>
          <description>Returns the last date on which the file was updated (see DBServer:LUpdate).</description>
        </item>
        <item>
          <term>DBI_LOCKCOUNT</term>
          <description>Returns the number of locked records.</description>
        </item>
        <item>
          <term>DBI_LOCKOFFSET</term>
          <description>Returns the current locking offset as a numeric value.</description>
        </item>
        <item>
          <term>DBI_MEMOBLOCKSIZE</term>
          <description>Returns the block size for the memo file associated with this database.</description>
        </item>
        <item>
          <term>DBI_MEMOEXT</term>
          <description>Returns the default extension for the memo file associated with this database.</description>
        </item>
        <item>
          <term>DBI_MEMOHANDLE</term>
          <description>Returns an intptr representing the DOS file handle for the memo file associated with this database file.</description>
        </item>
        <item>
          <term>DBI_MEMOSTREAM</term>
          <description>Returns a stream object representing the file stream for the memo file associated with this database file.</description>
        </item>
        <item>
          <term>DBI_MEMOPATH</term>
          <description>Returns the full path name of opened memo file.</description>
        </item>
        <item>
          <term>DBI_RDD_VERSION</term>
          <description>Returns the version number of the RDD for this database.</description>
        </item>
        <item>
          <term>DBI_SETDELIMITER</term>
          <description>Sets the default delimiter.</description>
        </item>
        <item>
          <term>DBI_SHARED</term>
          <description>Returns the shared flag value.</description>
        </item>
        <item>
          <term>DBI_TABLEEXT</term>
          <description>Returns the database file extension.</description>
        </item>
        <item>
          <term>DBI_VALIDBUFFER</term>
          <description>Returns a logical value indicating whether the current buffer is valid.</description>
        </item>
        <item>
          <term>DBI_USER</term>
          <description>Start of user defined values.</description>
        </item>
        <note type="tip">
          DBI_USER is a constant that returns the minimum value that third-party RDD developers can use for customizations.
          Values less than DBI_USER are reserved for X# development.
        </note>
      </list>
    </span>
  </DBI_Constants>
  <DBOI_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>DBOI_CONDITION</term>
          <description>Returns the for condition of the specified order as a string.</description>
        </item>
        <item>
          <term>DBOI_CUSTOM</term>
          <description>
            Returns and optionally sets the logical flag indicating whether the specified order is custom built (for RDDs that support custom built orders). Note that although you can turn the custom built flag on for a standard order by specifying TRUE for the <paramref name="uNewSetting" /> argument, you cannot turn a custom built order into a standard order. Specifying FALSE for <paramref name="uNewSetting" /> is the same as not specifying the argument at all—both return the current setting.
          </description>
        </item>
        <item>
          <term>DBOI_EXPRESSION</term>
          <description>Returns the order key expression of the specified order as a string.</description>
        </item>
        <item>
          <term>DBOI_FILEHANDLE</term>
          <description>Returns the handle of the specified index file as an IntPtr.</description>
        </item>
        <item>
          <term>DBOI_FILESTREAM</term>
          <description>Returns the filestream of the specified index file.</description>
        </item>
        <item>
          <term>DBOI_FULLPATH</term>
          <description>Returns the full path of the specified index file as a string.</description>
        </item>
        <item>
          <term>DBOI_HPLOCKING</term>
          <description>Returns a logical flag indicating whether the specified index file uses the high performance index locking schema (see IndexHPLock() function).</description>
        </item>
        <item>
          <term>DBOI_INDEXEXT</term>
          <description>Returns the default index file extension as a string.</description>
        </item>
        <item>
          <term>DBOI_INDEXNAME</term>
          <description>Returns the name of the specified index file as a string.</description>
        </item>
        <item>
          <term>DBOI_ISCOND</term>
          <description>Returns a logical flag that determines whether the specified order was defined using a for condition.</description>
        </item>
        <item>
          <term>DBOI_ISDESC</term>
          <description>Returns the logical flag that determines if the specified order is descending. For drivers that support dynamically setting the descending flag at runtime, specify the new value as a logical, using DBServer:OrderInfo(DBOI_ISDESC, [&lt;oFSIndexFile&gt; | &lt;cIndexFile&gt;], [&lt;cOrder&gt; | &lt;nPosition&gt;], &lt;lNewSetting&gt;). The current setting is returned before it is changed.</description>
        </item>
        <item>
          <term>DBOI_KEYCOUNT</term>
          <description>Returns the number of keys in the specified order.</description>
        </item>
        <item>
          <term>DBOI_KEYDEC</term>
          <description>Returns the number of decimals in the key of the specified order.</description>
        </item>
        <item>
          <term>DBOI_KEYSINCLUDED</term>
          <description>Returns the number of keys included in the specified order so far. This is primarily useful for conditional orders. It can be used during the status display process (with the EVAL clause of the INDEX command). </description>
        </item>
        <item>
          <term>DBOI_KEYSIZE</term>
          <description>Returns the size of the key in the specified order as a number.</description>
        </item>
        <item>
          <term>DBOI_KEYTYPE</term>
          <description>Returns the data type of the key in the specified order as a string.</description>
        </item>
        <item>
          <term>DBOI_KEYVAL</term>
          <description>Returns the key value of the current record in the specified order.</description>
        </item>
        <item>
          <term>DBOI_LOCKOFFSET</term>
          <description>Returns the locking offset (see NewIndexLock() function) for the specified index file as a numeric value.</description>
        </item>
        <item>
          <term>DBOI_NAME</term>
          <description>Returns the name of the specified order as a string.</description>
        </item>
        <item>
          <term>DBOI_NUMBER</term>
          <description>Returns the numeric position of the specified order in the order list.</description>
        </item>
        <item>
          <term>DBOI_ORDERCOUNT</term>
          <description>Returns the number of orders defined in the specified index file.</description>
        </item>
        <item>
          <term>DBOI_POSITION</term>
          <description>Returns the logical record number of the current record within the specified order.</description>
        </item>
        <item>
          <term>DBOI_RECNO</term>
          <description>Returns the physical record number of the current record within the specified order.</description>
        </item>
        <item>
          <term>DBOI_SCOPEBOTTOMs</term>
          <description>Returns the bottom boundary of the scope for the specified order.</description>
        </item>
        <item>
          <term>DBOI_SCOPETOP</term>
          <description>Returns the top boundary of the scope for the specified order.</description>
        </item>
        <item>
          <term>DBOI_SETCODEBLOCK</term>
          <description>Returns the key for the specified order as a code block.</description>
        </item>
        <item>
          <term>DBOI_UNIQUE</term>
          <description>Returns a logical flag indicating whether the specified order has the unique attribute set.</description>
        </item>
        <item>
          <term>DBOI_USER</term>
          <description>For customizations.</description>
        </item>
      </list>
      <note type="tip">
        DBOI_USER is a constant that returns the minimum value that third-party RDD developers can use can use for customizations.
        Values less than DBOI_USER are reserved for X# development.
      </note>
    </span>
  </DBOI_Constants>
  <DBRI_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Returned Value</description>
        </listheader>

        <item>
          <term>
            DBRI_BUFFPTR
          </term>
          <description>Pointer to current record buffer</description>
        </item>
        <item>
          <term>
            DBRI_DELETED
          </term>
          <description>Is record deleted?</description>
        </item>
        <item>
          <term>DBRI_DELETED</term>
          <description>Is record deleted?</description>
        </item>
        <item>
          <term>
            DBRI_RECSIZE
          </term>
          <description>
            Record length.
          </description>
        </item>
        <item>
          <term>DBRI_LOCKED</term>
          <description>
            Is record locked?
          </description>
        </item>
        <item>
          <term>DBRI_RECNO</term>
          <description>Record position (like the RecNo access).</description>
        </item>
      </list>
      <note type="tip">
        DBRI_USER is a constant that returns the minimum value that third-party RDD developers can use for customizations.
        Values less than DBRI_USER are reserved for X# development.
      </note>
    </span>
  </DBRI_Constants>
  <Scope_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>DBSCOPEALL</term>
          <description>
            The scope is all the records in the table. This is the <b>default</b>, although if a WHILE condition is specified, the scope becomes DBSCOPEREST.
          </description>
        </item>
        <item>
          <term>DBSCOPEREST</term>
          <description>The scope is the remaining records in the table from the current position.</description>
        </item>
      </list>
    </span>
  </Scope_Constants>

  <OrderScope_Constants>
    <span>
      <list type="table">
        <listheader>
          <term>Constant</term>
          <description>Returned Value</description>
        </listheader>
        <item>
          <term>SCOPE_TOP</term>
          <description>The top scope.</description>
        </item>
        <item>
          <term>SCOPE_BOTTOM</term>
          <description>The bottom scope.</description>
        </item>
        <item>
          <term>SCOPE_BOTH</term>
          <description>
            The top and also the bottom scope. This is the <em>default</em>.
          </description>
        </item>
      </list>
    </span>
  </OrderScope_Constants>
  <StaticMemory>
    <remarks>
      <note type="tip">
        The Static Memory Functions (MemAlloc, MemSet etc) are included for compatibility only.
        In most cases the static memory blocks can (and should) be replaced with arrays of bytes.<br/>
        Many of the functions in the runtime that take memory blocks as parameter,
        such as the low level IO functions, now have overloads that take arrays of bytes as parameter.<br/>
        We recommend that you use these overloads, because their performance is somewhat better.
      </note>
    </remarks>
  </StaticMemory>
  <PSZ>
    <remarks>
      <note type="tip">
        The PSZ type is included in the X# language and runtime for compatibility only.
        In most cases the type can and should be replaced with normal strings. <br/>
        If you need to interface with Win32 API functions that expect an ansi string, there is often also
        an alternative with a unicode string. We recommend to use that alternative when possible.
      </note>
    </remarks>
  </PSZ>
  <Symbol>
    <remarks>
      <note type="tip">
        The SYMBOL type is included in the X# language and runtime for compatibility only.
        In most cases the type can and should be replaced with normal strings.
      </note>
    </remarks>
  </Symbol>
  <Memvar>
    <remarks>
      <note type="tip">
        Dynamic memory variables (PUBLIC, PRIVATE, PARAMETERS) are supported in the X# language and runtime for compatibility only.<br/>
        In most cases the type can and should be replaced with lexically scoped variables, such as LOCALs and GLOBALs.
      </note>
    </remarks>
  </Memvar>
  <Operator>
    <summary>This operator is used in code generated by the compiler when needed.</summary>
  </Operator>
  <UsualCompare>
    <param name="lhs">Left side of the comparison</param>
    <param name="rhs">Right side of the comparison</param>
    <remarks>
      When comparing 2 usuals from different types, then the type of the Left Hand Side is taken as 'leading'.
      For example when comparing a usual of a LHS of type DATE with a RHS of type DateTime
      then the DateTime from the RHS is converted to a DATE first (the time is stripped off) becore comparing. <br/>
      Comparison with .NULL.  (DBNull.Value) always returns FALSE. In FoxPro this returns .NULL. but that is not supported by .Net.

    </remarks>
    <returns>A Logicical value</returns>
  </UsualCompare>
  <UsualBinary>
    <param name="lhs">Left side of the binary operation</param>
    <param name="rhs">Right side of the binary operation</param>
    <returns>A usual value of a type that matches the binary operator. For example when the operation involves an integer and a float then the result will be a float</returns>
    <remarks>
      When performing binary operations on usual types where the Left and Right types are different then the runtime follows "special"
      rules to handle these. <br/>
      For example when adding an integral number to a fractional number(float, decimal or currency), then the result is always a
      fractional number of the fractional type.<br/>
      Binary operations where one or both sides are .NULL. (DBNull.Value) always returns .NULL.

    </remarks>
  </UsualBinary>
  <Converter>
    <summary>This converter is used in code generated by the compiler when needed.</summary>
  </Converter>
  <Constructor>
    <summary>This constructor is used in code generated by the compiler when needed.</summary>
  </Constructor>
  <FileCompat>
    <remarks>
      <note type="tip">
        This function is included for compatibility. We do not recomment using static memory for file i/o operations.
        We recommend that you use the function overload that takes a byte array parameter in stead.
      </note>
    </remarks>
  </FileCompat>
  <ZeroBasedIndex>
    <remarks>
      The indexer in this type is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      When the compiler detects an index operation to a class that implements this interface then the compiler will automatically
      adjust the indices (by subtracting one) unless the /az compiler option is enabled.
    </remarks>
  </ZeroBasedIndex>
  <ZeroBasedIndexParam>
    <span>
      This indexer is <em>ZERO</em> based, however in your PRG code you can use <em>ONE</em> based array indices.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </span>
  </ZeroBasedIndexParam>
  <NameBasedIndexParam>
    <span>
      Name of the property from the element stored in the location index. If the element implements IIndexedProperties,
      then the indexer with a string parameter on this element will be called. Otherwise the runtime will use reflection to find
      the field or property on the element and return its value
    </span>
  </NameBasedIndexParam>
  <ZeroBasedIndexProperty>
    <summary>
      Get/Set array elements with a <em>ZERO</em> based array index.
    </summary>
    <remarks>
      In your PRG code you can assess the elements with a <em>ONE</em> based index.
      The compiler will recognize that this property is part of a type that implements a special interface
      and will subtract one from the indexes, unless the /az compiler option is enabled.
    </remarks>
  </ZeroBasedIndexProperty>
  <ScopeParams>
    <span>
      The range of records to process, providing the same functionality as the ALL,
      REST and NEXT clauses of record processing commands.
      
    </span>
  </ScopeParams>
  <OrderScopeParams>
    <span>
      The range of records to process, providing the same functionality as the ALL,
      REST and NEXT clauses of record processing commands.
      <include file="RTComments.xml" path="Comments/OrderScope_Constants/*"  />
    </span>
  </OrderScopeParams>
  <ScopeReturn>
    <span>
      The return value depends on the parameter that is passed in:<br/>
      <list type="table">
        <listheader>
          <term>Parameter</term>
          <description>Return value</description>
        </listheader>
        <item>
          <term>no parameter</term>
          <description>Returns .T. (true) if a scope is defined, and .F. when no scope is defined.</description>
        </item>
        <item>
          <term>SCOPE_TOP</term>
          <description>Returns the top scope value, or NIL if no top scope is set.</description>
        </item>
        <item>
          <term>SCOPE_BOTTOM</term>
          <description>Returns the bottom scope value, or NIL if no bottom scope is set.</description>
        </item>
        <item>
          <term>SCOPE_BOTH</term>
          <description>
            Returns an array with 2 elements with the Top scope in element 1 and the Bottom scope in element 2.
            When a scope is not set then the value NIL is stored in the array
          </description>
        </item>

      </list>
    </span>
  </ScopeReturn>
  <SerializeConstructor>
    <summary>Construct a value from serialized data</summary>
    <param name="info">A SerializationInfo object containing information required to construct value.</param>
    <param name="context">A StreamingContext object containing the source and destination of the serialized stream 
    associated with the value.</param>
  </SerializeConstructor>
  <RddInfoParam>
    <span>
      The constants are described in the Constants section below. <br />
      The initial default of a setting depends on the RDD.<br/>
      The constants are described in the Constants section below.  Note, however, that not all constants are supported for all RDDs.<br/>
      Important!  _SET_USER is a constant that returns the minimum value that third-party RDD developers
      can use for defining new parameters.
      Values less than _SET_USER are reserved for X# development.
    </span>
  </RddInfoParam>

  <RddInfoRemarks>
    <list type="table">
      <listheader>
        <term>Constant</term>
        <description>Description</description>
      </listheader>
      <item>
        <term>_SET_AUTOOPEN</term>
        <description>Returns and optionally changes the logical flag that determines whether the RDD will open production indexes automatically when a database file is opened. A TRUE setting indicates that the production index is opened automatically.</description>
      </item>
      <item>
        <term>_SET_AUTOORDER</term>
        <description>Returns and optionally changes the numeric setting that determines whether the production index will set a controlling order. A setting of 1 indicates that the first order in the production index will be the controlling order. A setting of 0 indicates that database files will be processed in natural order when the production index is initially opened.</description>
      </item>
      <item>
        <term>_SET_AUTOSHARE</term>
        <description>
          Returns and optionally changes the numeric setting that determines the automatic sharing mode. <br/>
          A setting of 0 completely disables automatic sharing control. This is primarily useful when developing network applications in a stand-alone environment. <br/>
          A setting of 1 causes the RDD to determine at runtime whether the application is running in a network environment. If not, the RDD automatically opens all files in exclusive mode. This allows you to write code that is network-aware, while still getting optimal performance when you application is running in single-user mode. <br/>
          A setting of 2 opens all files in exclusive mode, regardless of the current environment. Using this mode, you can easily convert an application designed for a network environment to work as a single-user application. This is useful if you prefer to deliver separate stand-alone and LAN versions of the application.
        </description>
      </item>
      <item>
        <term>_SET_BLOB_CIRCULAR_ARRAY_REF</term>
        <description>
          Returns and optionally sets the logical flag indicating whether to check for circular array references when storing and retrieving arrays to and from BLOB fields. A FALSE setting indicates that the RDD will not check for circular references. <br/>
          The algorithm for storing/retrieving arrays uses a recursive process which will call itself indefinitely if the array has a circular reference, quickly exhausting the program's stack. You can set DBServer:RDDInfo(_SET_BLOB_CIRCULAR_ARRAY_REF, TRUE) to cause the algorithm to check for and correctly process circular references. Note, however, that the checking takes extra time and is unnecessary unless there are circular references.
        </description>
      </item>
      <item>
        <term>_SET_DEFAULTRDD</term>
        <description>Returns the name of the default RDD, specified as a string.</description>
      </item>
      <item>
        <term>_SET_HPLOCKING</term>
        <description>Returns and optionally changes the logical flag that determines whether to use the High Performance (HP) locking schema for newly created index files. A FALSE setting indicates that the HP locking schema is not used.</description>
      </item>
      <item>
        <term>_SET_MEMOBLOCKSIZE</term>
        <description>Returns and optionally changes the numeric value specifying block size (in bytes) for memo files.</description>
      </item>
      <item>
        <term>_SET_MEMOEXT</term>
        <description>Returns and optionally changes the string value indicating the default memo file extension.</description>
      </item>
      <item>
        <term>_SET_NEWINDEXLOCK</term>
        <description>Returns and optionally changes the logical flag that determines the locking offset flag for newly created index files. A FALSE setting indicates a locking offset that is compatible with Xbase applications but more restrictive than the offset that will be used if this flag is set to TRUE.</description>
      </item>
      <item>
        <term>_SET_OPTIMIZE</term>
        <description>Returns and optionally changes the logical flag that determines whether optimization will be used when filtering records in the database files. A TRUE setting indicates that the RDD will use the available orders to make processing a filtered database as efficient as possible.</description>
      </item>
      <item>
        <term>_SET_STRICTREAD</term>
        <description>
          Returns and optionally changes the logical flag that determines whether the RDD will read records directly from disk when creating orders. <br/>
          A FALSE setting indicates that the RDD will read records directly from disk when creating orders, which is the most efficient setting. <br/>
          However, if you are using a DBF RDD layer that encrypts the database file, this setting will give incorrect results because the RDD will see the encrypted value rather than the actual value of the records. <br/>
          In order to use the RDD with encryption packages, use DBServer:RDDInfo(_SET_STRICTREAD, TRUE). <br/>
          This setting lets the DBF RDD layer read the records when creating an order.
        </description>
      </item>
    </list>
  </RddInfoRemarks>
</Comments>