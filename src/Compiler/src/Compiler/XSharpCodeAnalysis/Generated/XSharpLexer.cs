//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\XSharp\Dev30\src\Compiler\src\Compiler\XSharpCodeAnalysis\Parser\XSharpLexer.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpLexer : Lexer {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, TUPLE=111, UNTIL=112, VALUE=113, VIRTUAL=114, VOSTRUCT=115, ADD=116, 
		ARGLIST=117, ASCENDING=118, ASYNC=119, ASTYPE=120, AWAIT=121, BY=122, 
		CHECKED=123, DESCENDING=124, EQUALS=125, EXTERN=126, FIXED=127, FROM=128, 
		GROUP=129, INIT=130, INTO=131, JOIN=132, LET=133, NOP=134, OF=135, ON=136, 
		ORDERBY=137, OVERRIDE=138, PARAMS=139, REMOVE=140, SELECT=141, STACKALLOC=142, 
		SWITCH=143, UNCHECKED=144, UNSAFE=145, VAR=146, VOLATILE=147, WHEN=148, 
		WHERE=149, YIELD=150, WITH=151, RECORD=152, LAST_POSITIONAL_KEYWORD=153, 
		FIRST_TYPE=154, ARRAY=155, BYTE=156, CODEBLOCK=157, DATE=158, DWORD=159, 
		FLOAT=160, INT=161, LOGIC=162, LONGINT=163, OBJECT=164, PSZ=165, PTR=166, 
		REAL4=167, REAL8=168, REF=169, SHORTINT=170, STRING=171, SYMBOL=172, USUAL=173, 
		VOID=174, WORD=175, CHAR=176, INT64=177, UINT64=178, DYNAMIC=179, DECIMAL=180, 
		DATETIME=181, CURRENCY=182, BINARY=183, NINT=184, NUINT=185, LAST_TYPE=186, 
		UDC_KEYWORD=187, SCRIPT_REF=188, SCRIPT_LOAD=189, ASSIGNMENT=190, DEFERRED=191, 
		ENDCLASS=192, ENDSEQUENCE=193, EXPORTED=194, FREEZE=195, FINAL=196, INLINE=197, 
		INTRODUCE=198, NOSAVE=199, READONLY=200, SHARING=201, SHARED=202, SYNC=203, 
		ENDDEFINE=204, LPARAMETERS=205, OLEPUBLIC=206, EXCLUDE=207, THISACCESS=208, 
		HELPSTRING=209, DIMENSION=210, NOINIT=211, THEN=212, FOX_M=213, SCAN=214, 
		ENDSCAN=215, ENDFOR=216, ENDFUNC=217, ENDPROC=218, ENDTRY=219, ENDWITH=220, 
		EACH=221, THISFORM=222, LAST_KEYWORD=223, FIRST_NULL=224, NIL=225, NULL=226, 
		NULL_ARRAY=227, NULL_CODEBLOCK=228, NULL_DATE=229, NULL_OBJECT=230, NULL_PSZ=231, 
		NULL_PTR=232, NULL_STRING=233, NULL_SYMBOL=234, NULL_FOX=235, LAST_NULL=236, 
		FIRST_OPERATOR=237, LT=238, LTE=239, GT=240, GTE=241, EQ=242, EEQ=243, 
		SUBSTR=244, NEQ=245, NEQ2=246, INC=247, DEC=248, PLUS=249, MINUS=250, 
		DIV=251, MOD=252, EXP=253, LSHIFT=254, RSHIFT=255, TILDE=256, MULT=257, 
		QQMARK=258, QMARK=259, AND=260, OR=261, NOT=262, BIT_NOT=263, BIT_AND=264, 
		BIT_OR=265, BIT_XOR=266, ASSIGN_OP=267, ASSIGN_ADD=268, ASSIGN_SUB=269, 
		ASSIGN_EXP=270, ASSIGN_MUL=271, ASSIGN_DIV=272, ASSIGN_MOD=273, ASSIGN_BITAND=274, 
		ASSIGN_BITOR=275, ASSIGN_LSHIFT=276, ASSIGN_RSHIFT=277, ASSIGN_XOR=278, 
		ASSIGN_QQMARK=279, LOGIC_AND=280, LOGIC_OR=281, LOGIC_NOT=282, LOGIC_XOR=283, 
		FOX_AND=284, FOX_OR=285, FOX_NOT=286, FOX_XOR=287, LPAREN=288, RPAREN=289, 
		LCURLY=290, RCURLY=291, LBRKT=292, RBRKT=293, COLON=294, COMMA=295, PIPE=296, 
		AMP=297, ADDROF=298, ALIAS=299, DOT=300, COLONCOLON=301, BACKSLASH=302, 
		ELLIPSIS=303, BACKBACKSLASH=304, DOTDOT=305, LAST_OPERATOR=306, FIRST_CONSTANT=307, 
		FALSE_CONST=308, TRUE_CONST=309, HEX_CONST=310, BIN_CONST=311, INT_CONST=312, 
		DATE_CONST=313, DATETIME_CONST=314, REAL_CONST=315, INVALID_NUMBER=316, 
		SYMBOL_CONST=317, CHAR_CONST=318, STRING_CONST=319, ESCAPED_STRING_CONST=320, 
		INTERPOLATED_STRING_CONST=321, INCOMPLETE_STRING_CONST=322, TEXT_STRING_CONST=323, 
		BRACKETED_STRING_CONST=324, BINARY_CONST=325, LAST_CONSTANT=326, PP_FIRST=327, 
		PP_COMMAND=328, PP_DEFINE=329, PP_ELSE=330, PP_ENDIF=331, PP_ENDREGION=332, 
		PP_ERROR=333, PP_IF=334, PP_IFDEF=335, PP_IFNDEF=336, PP_INCLUDE=337, 
		PP_LINE=338, PP_REGION=339, PP_STDOUT=340, PP_TRANSLATE=341, PP_UNDEF=342, 
		PP_WARNING=343, PP_PRAGMA=344, PP_TEXT=345, PP_ENDTEXT=346, PP_NULLABLE=347, 
		PP_LAST=348, MACRO=349, UDCSEP=350, ID=351, DOC_COMMENT=352, SL_COMMENT=353, 
		ML_COMMENT=354, LINE_CONT=355, LINE_CONT_OLD=356, SEMI=357, WS=358, NL=359, 
		EOS=360, UNRECOGNIZED=361, LAST=362;
	public const int
		XMLDOCCHANNEL=2, DEFOUTCHANNEL=3, PREPROCESSORCHANNEL=4;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UNRECOGNIZED"
	};


	public XSharpLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "TUPLE", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", 
		"ADD", "ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", 
		"DESCENDING", "EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", 
		"JOIN", "LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", 
		"SELECT", "STACKALLOC", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", 
		"WHEN", "WHERE", "YIELD", "WITH", "RECORD", "LAST_POSITIONAL_KEYWORD", 
		"FIRST_TYPE", "ARRAY", "BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", 
		"INT", "LOGIC", "LONGINT", "OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", 
		"SHORTINT", "STRING", "SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", 
		"UINT64", "DYNAMIC", "DECIMAL", "DATETIME", "CURRENCY", "BINARY", "NINT", 
		"NUINT", "LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", "SCRIPT_LOAD", "ASSIGNMENT", 
		"DEFERRED", "ENDCLASS", "ENDSEQUENCE", "EXPORTED", "FREEZE", "FINAL", 
		"INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", "SYNC", 
		"ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", "EXCLUDE", "THISACCESS", "HELPSTRING", 
		"DIMENSION", "NOINIT", "THEN", "FOX_M", "SCAN", "ENDSCAN", "ENDFOR", "ENDFUNC", 
		"ENDPROC", "ENDTRY", "ENDWITH", "EACH", "THISFORM", "LAST_KEYWORD", "FIRST_NULL", 
		"NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", "NULL_DATE", "NULL_OBJECT", 
		"NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", "NULL_FOX", "LAST_NULL", 
		"FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", 
		"NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", 
		"RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
		"ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", 
		"ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", 
		"FOX_NOT", "FOX_XOR", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRKT", 
		"RBRKT", "COLON", "COMMA", "PIPE", "AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", 
		"BACKSLASH", "ELLIPSIS", "BACKBACKSLASH", "DOTDOT", "LAST_OPERATOR", "FIRST_CONSTANT", 
		"FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", 
		"DATETIME_CONST", "REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IF", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_STDOUT", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_PRAGMA", 
		"PP_TEXT", "PP_ENDTEXT", "PP_NULLABLE", "PP_LAST", "MACRO", "UDCSEP", 
		"ID", "DOC_COMMENT", "SL_COMMENT", "ML_COMMENT", "LINE_CONT", "LINE_CONT_OLD", 
		"SEMI", "WS", "NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharpLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2\x16C\a\b\x1\x4"+
		"\x2\t\x2\x3\x2\x3\x2\x2\x2\x2\x3\x3\x2\x16B\x3\x2\x2\x6\x2\x3\x3\x2\x2"+
		"\x2\x3\x5\x3\x2\x2\x2\x5\x6\v\x2\x2\x2\x6\x4\x3\x2\x2\x2\x3\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
