<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Dialect</title>
  <keywords>
    <keyword>-fox1</keyword>
    <keyword>-fox2</keyword>
    <keyword>-vo1</keyword>
    <keyword>-vo10</keyword>
    <keyword>-vo11</keyword>
    <keyword>-vo12</keyword>
    <keyword>-vo13</keyword>
    <keyword>-vo14</keyword>
    <keyword>-vo15</keyword>
    <keyword>-vo16</keyword>
    <keyword>-vo2</keyword>
    <keyword>-vo3</keyword>
    <keyword>-vo4</keyword>
    <keyword>-vo5</keyword>
    <keyword>-vo6</keyword>
    <keyword>-vo7</keyword>
    <keyword>-vo8</keyword>
    <keyword>-vo9</keyword>
    <keyword>-xpp1</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">Dialect</para>
    </header>
    <para styleclass="Body Text">The Dialect page contains some additional language settings. Some of these settings apply to all dialects. Others only apply to the given dialect and will only be enabled when the appropriate dialect is chosen.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Normal"><image src="ProjectPropertiesDialect.png" scale="100.00%" styleclass="Image Caption"></image></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="21" colcount="3">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Item</para>
        </td>
        <td>
          <para styleclass="Normal">Description</para>
        </td>
        <td>
          <para styleclass="Normal">Command item</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="height:15px;">
          <para styleclass="Normal">All instance methods virtual</para>
        </td>
        <td style="height:15px;">
          <para styleclass="Normal">Add the virtual modifier to all methods by default (which is the normal Visual Objects behavior).</para>
        </td>
        <td style="height:15px;">
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo3">-vo3</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Allow Init() and Axit() as aliases for Constructor/Destructor</para>
        </td>
        <td>
          <para styleclass="Normal">Allow Init() and Axit() as aliases for Constructor/Destructor.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo1">-vo1</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible IIF Behavior</para>
        </td>
        <td>
          <para styleclass="Normal">Compatible IIF Behavior, allow different types of return values in TRUE and FALSE expression.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo10">-vo10</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible preprocessor</para>
        </td>
        <td>
          <para styleclass="Normal">Makes the preprocessor case insensitive and also controls how #ifdef inspects #defines.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo8">-vo8</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Handle problems with incorrect or missing return statements</para>
        </td>
        <td>
          <para styleclass="Normal">Allow missing return statements or allow return statements with incorrect return values.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo9">-vo9</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Implicit numeric conversions</para>
        </td>
        <td>
          <para styleclass="Normal">Implicit numeric integer conversions</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo4">-vo4</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Initialize strings</para>
        </td>
        <td>
          <para styleclass="Normal">Initialize strings to empty string (String.Empty). </para>
          <para styleclass="Normal">Please note that in .NET a NULL_STRING is not the same as a string with length 0. When enabled this will initialize local string variables regardless of the setting of &apos;initialize locals&apos; setting from the Language page.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo2">-vo2</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Clipper Compatible intiger divisions</para>
        </td>
        <td>
          <para styleclass="Normal">Compatible integer divisions, integer divisions may return a float.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo12">-vo12</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible numeric conversions</para>
        </td>
        <td>
          <para styleclass="Normal">Compatible arithmetic conversions.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo11">-vo11</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible string comparisons</para>
        </td>
        <td>
          <para styleclass="Normal">Compatible string comparisons, respects SetExact and collation table.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo13">-vo13</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Generate Clipper constructors</para>
        </td>
        <td>
          <para styleclass="Normal">Automatically create clipper calling convention constructors for classes without constructor where the parent class has a Clipper Calling convention constructor.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo16">-vo16</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Implicit casts and conversions</para>
        </td>
        <td>
          <para styleclass="Normal">Compatible implicit casts and Conversions.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo7">-vo7</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Implicit Clipper calling convention</para>
        </td>
        <td>
          <para styleclass="Normal">Methods without parameters and calling convention are compiled as Clipper calling convention. </para>
          <para styleclass="Normal">Please note that without this switch all methods without parameters will be seen as STRICT. Methods with untyped parameters are always seen as CLIPPER calling convention.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo5">-vo5</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Implicit pointer conversions</para>
        </td>
        <td>
          <para styleclass="Normal">Implicit conversions between typed function PTR and PTR.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo6">-vo6</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Treat missing types as USUAL</para>
        </td>
        <td>
          <para styleclass="Normal">Missing type clauses for locals, instance variables and parameters are treated as USUAL (VO and Vulcan dialect). The default = TRUE for the VO dialect and FALSE for the other dialects. We strongly recommend to set this to FALSE because this will help you to find problems in your code and non optimal code. If you have to use the USUAL type we recommend to explicitly declare variables and parameters as USUAL.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo15">-vo15</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Use FLOAT literals</para>
        </td>
        <td>
          <para styleclass="Normal">Store floating point literals as FLOAT and not as System.Double (REAL8).</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo14">-vo14</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible BEGIN SEQUENCE .. END</para>
        </td>
        <td>
          <para styleclass="Normal">Generate code to fully implement the VO compatible BEGIN SEQUENCE .. END SEQUENCE. The compiler generates calls to the runtime functions _SequenceError and _SequenceRecover that you may override in your own code.</para>
        </td>
        <td>
          <para styleclass="Normal">-vo17</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Inherit from Custom class</para>
        </td>
        <td>
          <para styleclass="Normal">All classes are assumed to inherit from the Custom class. This also affects the way in which properties are processed by the compiler.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-fox1">-fox1</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Compatible Array Handling</para>
        </td>
        <td>
          <para styleclass="Body Text">FoxPro compatible array handling (Allows parenthesized arrays and assigning a single value to an array to fill all elements). <br/>WARNING Allowing parenthesized arrays may slow down the execution of your program !(/fox2)</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-fox2">-fox2</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Inherit from Abstract class</para>
        </td>
        <td>
          <para styleclass="Normal">All classes without parent class inherit from the XPP Abstract class.</para>
        </td>
        <td>
          <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-xpp1">-xpp1</link></para>
        </td>
      </tr>
    </table></para>
  </body>
</topic>
