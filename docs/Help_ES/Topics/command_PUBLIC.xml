<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>PUBLIC Statement</title>
  <keywords>
    <keyword>Arrays<keyword>creating</keyword></keyword>
    <keyword>Creating</keyword>
    <keyword>Creating<keyword>arrays</keyword><keyword>variables</keyword></keyword>
    <keyword>Declaration statements</keyword>
    <keyword>Memory variable</keyword>
    <keyword>PUBLIC statement</keyword>
    <keyword>Runtime declaration</keyword>
    <keyword>Statements</keyword>
    <keyword>Variables<keyword>creating</keyword></keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">PUBLIC Statement</para>
    </header>
    <para styleclass="NotesBox"><snippet src="__NotInCoreVulcan" inline="false"/><text styleclass="Heading1">Purpose</text></para>
    <para styleclass="Normal">Creates variables and arrays visible to all routines in an application.</para>
    <para styleclass="Heading1">Syntax</para>
    <para styleclass="Code with box">PUBLIC &lt;memVarList&gt;<br/>PUBLIC &lt;idVar&gt; [:= &lt;uValue&gt;] | &lt;ArraySpec&gt; [, ...]<br/>PUBLIC &lt;idVar&gt; [:= &lt;uValue&gt;] [AS &lt;Type&gt; [OF &lt;ClassLibrary&gt;] ] &#160;<tab /><tab /><tab /><tab /><tab /><tab /> // FoxPro dialect only<br/>PUBLIC ARRAY &lt;arrayName&gt; <text style="font-weight:bold;">(</text> &lt;nRows&gt; [, &lt;nColumns&gt;] <text style="font-weight:bold;">)</text> [, &lt;arrayName&gt; ( &lt;nRows&gt; [, &lt;nColumns&gt;] ) ] &#160; &#160; // FoxPro dialect only<br/>PUBLIC ARRAY &lt;arrayName&gt; <text style="font-weight:bold;">[</text> &lt;nRows&gt; [, &lt;nColumns&gt;] <text style="font-weight:bold;">]</text> [, &lt;arrayName&gt; <text style="font-weight:bold;">[</text> &lt;nRows&gt; [, &lt;nColumns&gt;] <text style="font-weight:bold;">]</text> ] &#160; &#160; // FoxPro dialect only</para>
    <para styleclass="Heading1">Arguments</para>
    <para styleclass="List">&lt;<text styleclass="Code with box">memVarList</text>&gt;<tab /><text styleclass="Body Text">One or more variable names separated by commas. </text></para>
    <para styleclass="List">&lt;idVar&gt;<tab />A valid identifier name for the public variable to create.<br/>The idVar may be prefixed with an ampersand (such as PUBLIC &amp;name). In that case the compiler the idVar should contain a string with the name of the variable that is declared and initialized.</para>
    <para styleclass="List"></para>
    <para styleclass="List">&lt;uValue&gt;<tab />The initial value to assign to the variable. &#160;This can be any valid expression. &#160;If &lt;uValue&gt; is not specified, the variable is initialized to FALSE. There are exceptions:<br/>In the FoxPro dialect the PUBLIC FOX and FOXPRO are initialized with TRUE.<br/>In the other dialects the PUBLIC CLIPPER is initialized with TRUE.</para>
    <para styleclass="List"></para>
    <para styleclass="List">&lt;ArraySpec&gt;<tab />The specification for a dynamic array to create. &#160;&lt;ArraySpec&gt; is one of the following:</para>
    <para styleclass="List"><tab />&lt;idArray&gt;[&lt;nElements&gt;, &lt;nElements&gt;, &lt;nElements&gt;]</para>
    <para styleclass="List"><tab />&lt;idArray&gt;[&lt;nElements&gt;][&lt;nElements&gt;][&lt;nElements&gt;]</para>
    <para styleclass="List"><tab />All dimensions except the first are optional.</para>
    <para styleclass="List"><tab />&lt;idArray&gt; is a valid identifier name for the array to create. &#160;Array elements are initialized to NIL.</para>
    <para styleclass="List"><tab />&lt;nElements&gt; defines the number of elements in a particular dimension of an array. &#160;The number of dimensions is determined by how many &lt;nElements&gt; arguments you specify.</para>
    <para styleclass="List"><snippet src="__TypeAndCLass" inline="false"/></para>
    <para styleclass="List"><tab /><text styleclass="Normal">The &lt;Type&gt; &#160;and &lt;ClassLibrary&gt; clauses are ignored because dynamic memory variables are always of type USUAL</text></para>
    <para styleclass="List">&lt;arrayName&gt;<tab />Variable name of array . The array will have the dimensions as declared with &lt;nRows&gt; and &lt;nColumns&gt;. The array may be declared with parentheses as delimiters but also with square brackets. <br/>&lt;nColumns&gt; is optional<br/>We recommend the use of square brackets.</para>
    <para styleclass="Heading1">Description</para>
    <para styleclass="Normal">PUBLIC is an executable statement which means you must specify it after any variable declaration statements (i.e., FIELD, LOCAL, and MEMVAR) in the routine that you are defining.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">Warning! &#160;</text><text styleclass="Italic">Any reference to a variable created with this statement will produce a compiler error unless the Undeclared Variables compiler option is checked.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Any declared variables, such as LOCALs, with the same names as existing public or private variables temporarily hide the public or private variables until the overriding variables are released or are no longer visible.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">An attempt to create a public variable with the same name as an existing and visible private variable is simply ignored; however the assignment portion of the PUBLIC statement is not ignored. &#160;For example, the following lines of code change the value of the variable <text styleclass="Italic">x</text> but do not change its scope from private to public:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PRIVATE x := 1000<br/>...<br/>PUBLIC x := &quot;New value for x&quot;<br/>? x<tab /><tab /><tab /><tab /><tab />// Result: &#160;&quot;New value for x&quot;</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The explanation for this behavior is that, internally, the PUBLIC statement and the assignment are treated as separate statements. &#160;Thus, this code would be treated as follows:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PRIVATE x := 1000<br/>...<br/>PUBLIC x<br/>x := &quot;New value for x&quot;<br/>? x<tab /><tab /><tab /><tab /><tab />// Result: &#160;&quot;New value for x&quot;</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The PUBLIC statement is ignored, but the assignment statement is executed, changing the value of the private variable <text styleclass="Italic">x</text>.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">This behavior has an interesting repercussion when you declare a public array using a variable name that already exists as private. &#160;For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PRIVATE x := 1000<br/>...<br/>PUBLIC x[10]<br/>? x[1]<tab /><tab /><tab /><tab />// Result: &#160;NIL</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In this case, the PUBLIC statement is also treated as two separate statements:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PRIVATE x := 1000<br/>...<br/>PUBLIC x<br/>x := ArrayNew(10)<br/>? x[1]<tab /><tab /><tab /><tab />// Result: &#160;NIL</para>
    <para styleclass="Normal">Again, the PUBLIC statement is ignored, and the assignment changes <text styleclass="Italic">x </text>from a private numeric variable to a private reference to a ten element array.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Attempting to specify a public variable that conflicts with a visible declared variable (for example, LOCAL, GLOBAL, or DEFINE) of the same name is not recognized by the compiler as an error because PUBLIC is not a compiler declaration statement. &#160;Instead, the declared variable will hide the public variable at runtime. &#160;This means that you will not be able to access the public variable at all until the declared variable is released.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In class methods, instance variables (with the exception of access/assign variables) are always more visible than public variables of the same name. &#160;Use the _MEMVAR-&gt; alias to access a public variable within a method if there is a name conflict. &#160;For access/assign variables, use the SELF: &#160;prefix to override a name conflict with a public variable.</para>
    <para styleclass="Normal">Public variables are dynamically scoped. &#160;They exist for the duration of the application or until explicitly released with CLEAR ALL or CLEAR MEMORY. &#160;</para>
    <para styleclass="Heading1">Notes</para>
    <para styleclass="Normal"><text styleclass="BoldItalic" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-decoration:none; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">PUBLIC Clipper: &#160;</text>To include &lt;%APP%&gt; extensions in an application and still allow the application to run under dBASE III PLUS, the special public variable, Clipper, is initialized to TRUE when created with PUBLIC.</para>
    <para styleclass="Heading1">Examples</para>
    <para styleclass="Normal">This example creates two PUBLIC arrays and one PUBLIC variable:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PUBLIC aArray1[10, 10], var2<br/>PUBLIC aArray2[20][10]</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The following PUBLIC statements create variables and initialize them with values:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example">PUBLIC cString := Space(10), cColor := SetColor()<br/>PUBLIC aArray := {1, 2, 3}, ;<br/><tab />aArray2 := ArrayNew(12, 24)</para>
    <para styleclass="Heading1">See Also</para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_GLOBAL">GLOBAL</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_MEMVAR">MEMVAR</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_PARAMETERS">PARAMETERS</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">, </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_PRIVATE">PRIVATE</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_DECLARE">DIMENSION</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_DECLARE">DECLARE</link></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
