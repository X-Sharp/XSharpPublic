<?xml version="1.0" encoding="utf-8"?>
<topic id="77b4131b-7ffd-4fad-ae60-b9ca0ec84fc7" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>TODO: Move introduction text here</para>
    </introduction>




     
     <para><legacyBold>Navigation:</legacyBold>&#160;
     
     <!-- TODO: Unknown topic link: xsharp.html -->X# Documentation &gt; <!-- TODO: Unknown topic link: chapter-2.html -->X# Language Reference &gt; <!-- TODO: Unknown topic link: commands-by-category.html -->Commands and Statements &gt; <!-- TODO: Unknown topic link: cmd_cat_entdecl.html -->Entity Declaration &gt; <!-- TODO: Unknown topic link: class-members2.html -->CLASS Members&#160;&gt;</para>

     
     <!-- TODO: Add named anchor: prev --><mediaLink><image xlink:href="btn_prev_n" /></mediaLink><!-- TODO: Add named anchor: main --><mediaLink><image xlink:href="btn_home_n" /></mediaLink><!-- TODO: Add named anchor: next --><mediaLink><image xlink:href="btn_next_n" /></mediaLink>
    
    <h1 class="p_Heading1" style="page-break-after: avoid;">METHOD Statement</h1>

  
  <!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  
  



     <!--ZOOMRESTART-->
     <h1 class="p_Heading1" style="page-break-after: avoid;">Purpose</h1>
<para>Declare a method name and an optional list of local variable names.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Syntax</h1>
<para>&#160;[Attributes] [Modifiers]  METHOD &lt;idMethod&gt; </para>
<para>&#160;[Typeparameters]</para>
<para>&#160;[([&lt;idParam&gt; [AS | REF|OUT|IN &lt;idType&gt;] [, ...])] </para>
<para>&#160;[AS &lt;idType&gt;]</para>
<para>&#160;[TypeparameterConstraints]</para>
<para>&#160;[&lt;idConvention&gt;]<para/>
&#160;[CLASS &lt;idClass&gt;]</para>
<para>&#160;[=&gt; &lt;expression&gt;] <para/>
&#160;CRLF</para>
<para>&#160;[&lt;Body&gt;]</para>
<para>&#160;[END METHOD]</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Arguments</h1>
<table><row><entry>Attributes</entry><entry>An optional list of one or more attributes that describe meta information for am entity, such as for example the [TestMethod] attribute on a method/function containing tests in a MsTest class library. Please note that Attributes must be on the same line or suffixed with a semi colon when they are written on the line above that keyword.</entry></row></table><para>&#160;</para>
<table><row><entry>Modifiers</entry><entry>An optional list of modifiers that specify the visibility or scope of the entity, such as PUBLIC, PROTECTED, HIDDEN, INTERNAL, SEALED, ABSTRACT or STATIC.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idMethod&gt;</entry><entry>A valid identifier name for the method. &#160;Method names must be unique within a class, but can share the same name as other entities (including access and assign methods) in your application.</entry></row></table><para>&#160;</para>
<table><row><entry>TypeParameters</entry><entry>This is supported for methods with generic type arguments. This something like &lt;T&gt; for a method with one type parameter named T. Usually one of the parameters in the parameter list is then also of type T.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idParam&gt;</entry><entry>A &#160;parameter variable. &#160;A variable specified in this manner is automatically declared local. &#160;These variables, also called formal parameters, are used to receive arguments that you pass when you call the entity.</entry></row></table><para>&#160;</para>
<table><row><entry>AS | REF|OUT|IN &lt;idType&gt;</entry><entry>Specifies the data type of the parameter variable (called strong typing). &#160;AS indicates that the parameter must be passed by value, and REF indicates that it must be passed by reference with the @ operator. OUT is a special kind of REF parameter that does not have to be assigned before the call and must be assigned inside the body of the entity. IN parameters are passed as READONLY references.<para/>
The last parameter in the list can also be declared as PARAMS &lt;idType&gt;[] which will tell the compiler that the function/method may receive zero or more optional parameters.<para/>
Functions or Methods of the CLIPPER calling convention are compiled to a function with a single parameter that this declared as Args PARAMS USUAL[]<para/>
&#160;</entry></row></table><para>&#160;</para>
<table><row><entry>AS &lt;idType&gt;</entry><entry>Specifies the data type. &#160;If omitted, then depending on the compiler options the type will be either USUAL or determined by the compiler.</entry></row></table><para>&#160;</para>
<table><row><entry>TypeParameterConstraints</entry><entry>Here you can specify constraints for the Type parameters, such as WHERE T IS SomeName or WHERE T IS New</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idConvention&gt;</entry><entry>Specifies the calling convention for this entity. &#160;&lt;idConvention&gt; must be one of the following:</entry></row></table><para>&#111; &#160; &#160; &#160; &#160;CLIPPER</para><para>&#111; &#160; &#160; &#160; &#160;STRICT</para><para>&#111; &#160; &#160; &#160; &#160;PASCAL</para><para>&#111; &#160; &#160; &#160; &#160;CALLBACK</para><para>&#111; &#160; &#160; &#160; &#160;THISCALL</para><table><row><entry></entry><entry>Most calling conventions are for backward compatibility only. <para/>
There are 2 exceptions:<para/>
CLIPPER declares that a method has untyped parameters. This is usually only needed for methods without any declared parameters. Otherwise the compiler will assume CLIPPER calling convention when it detects untyped parameters. <para/>
Methods and Functions in external DLL may have STRICT, PASCAL, CALLBACK</entry></row></table><para>&#160;</para>
<table><row><entry>CLASS &lt;idClass&gt;</entry><entry>The class to which this method belongs. This clause is mandatory for entities declared outside of a CLASS .. END CLASS construct</entry></row></table><table><row><entry>=&gt; &lt;Expression&gt;</entry><entry>Single expression that replaces the multiline body for the entity. CANNOT be compiled with a body</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;Body&gt;</entry><entry>Program statements that form the code of this entity.<para/>
The &lt;Body&gt; can contain one or more RETURN statements to return control to the calling routine and to serve as the function return value. &#160;If no return statement is specified, control passes back to the calling routine when the function definition ends, and the function will return a default value depending on the return value data type specified (NIL if the return value is not strongly typed).<para/>
CANNOT be combined with an Expression Body</entry></row></table><para>&#160;</para>
<table><row><entry>END METHOD</entry><entry>Optional end clause to indicate the end of the inline METHOD entity</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Description</h1>
<para>A method is a subprogram comprised of a set of declarations and statements to be executed whenever you refer to the method using the message send operator, as in:</para>
<para>&#160;</para>
<para>&lt;idObject&gt;:&lt;idMethod&gt;([&lt;uArgList&gt;])</para>
<para>&#160;</para>
<para>Or:</para>
<para>&#160;</para>
<para>SELF:&lt;idMethod&gt;([&lt;uArgList&gt;])</para>
<para>&#160;</para>
<para>Classes, instance variables (see the CLASS statement in this guide), and methods are the basic object-oriented programming units. &#160;You will use methods in your applications to organize computational blocks of code for a specific class of objects.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Notes</h1>
<para>The Start() method:  All applications must either have one function or procedure named Start(). &#160;<para/>
Start() serves as the startup routine when the application is executed. &#160;Start() must be declared without parameters or with an string array parameter and must either have an Int return value or of type Void</para>
<para>&#160;</para>
<para>VO Compatibility:</para>
<para>&#160;</para>
<para>VO has 2 special method names for constructing and destructing class objects: Init() and Axit().<para/>
In X# These methods should be named <link xlink:href="2e3ce02f-e582-464b-b3d8-3ebe56eba8a2">CONSTRUCTOR</link> and <link xlink:href="1517da49-281d-4c1b-9337-5d60d2bd1f95">DESTRUCTOR</link>.</para>
<para>If you compile with compiler option <!-- TODO: Unknown topic link: opt-vo1.html -->/vo1 then you can still use the &#39;old&#39; names. The compiler will then automatically map the Init() method to constructor and the Axit() method to destructor. This is NOT recommended.</para>
<para>&#160;</para>
<para>The Init() method:  If you define a method named Init(), it is called automatically when you create an instance of the class to which the method belongs. &#160;Arguments listed within the instantiation operators ({}) are passed as parameters to the Init() method. &#160;Common uses for the Init() method are to initialize instance variables, allocate memory needed by the object, register the object, create subsidiary objects, and set up relationships between objects.</para>
<para>&#160;</para>
<para>The Axit() method:  You do not need to deallocate memory used by objects because the garbage collector takes care of this for you automatically. &#160;However, in some cases an object can manage other resources that do need proper disposition. &#160;For example, if an object opens a database only for its own use, it should close it when it is finished and make the work area available for other uses.</para>
<para>&#160;</para>
<para>If you register an object with the RegisterAxit() function, for example in the Init() method, and provide a method named Axit(), this Axit() method will automatically be called by the garbage collector just before the object is destroyed. &#160;Thus, in the Axit() method you can close databases, deallocate memory, or close communications links.</para>
<para>&#160;</para>
<para>NoIVarGet()/NoIVarPut() methods:  If you define methods named NoIVarGet() and NoIVarPut(), they will automatically be invoked if an instance variable that does not exist is referenced. &#160;They are called with the instance variable name as a parameter, in the form of a symbol and, in the case of NoIVarPut(), with the assigned value. &#160;This feature is useful in detecting and preventing a runtime error and for creating virtual variables dynamically at runtime. &#160;For example, the DBServer class uses this technique to make the database fields appear to be exported instance variables of a database object:</para>
<para>&#160;</para>
<para>METHOD NoIVarGet(symFieldName) CLASS DBServer<para/>
 &#160; BEGIN SEQUENCE<para/>
 &#160; &#160;  RETURN FieldGetAlias(symAlias, symFieldName)<para/>
 &#160; RECOVER<para/>
 &#160; &#160;  // Pass it up if it was not a field name<para/>
 &#160; &#160;  SUPER:NoIVarGet(symFieldName)<para/>
 &#160; END SEQUENCE<para/>
&#160;<para/>
METHOD NoIVarPut(symFieldName, uValue) ;<para/>
 &#160; CLASS DBServer<para/>
 &#160; BEGIN SEQUENCE<para/>
 &#160; &#160;  RETURN FieldGetAlias(symAlias, ;<para/>
 &#160; &#160; &#160; &#160; symFieldName, uValue)<para/>
 &#160; RECOVER<para/>
 &#160; &#160;  // Pass it up if it was not a field name<para/>
 &#160; &#160;  SUPER:NoIVarPut(symFieldName, uValue)<para/>
 &#160; END SEQUENCE<para/>
&#160;<para/>
FUNCTION DatabaseTest()<para/>
 &#160; LOCAL oDBServer AS DBServer<para/>
 &#160; oDBServer := DBServer{&quot;customer&quot;}<para/>
 &#160; ? oDBCustomer:CustName<para/>
 &#160; oDBCustomer:ZipCode := &quot;12345&quot;</para>
<para>&#160;</para>
<para>The NoMethod() method:  If you define a method named NoMethod(), it will automatically be invoked if a method name that you invoke within the same class cannot be found. &#160;The arguments passed will be the same as the original method. &#160;This feature is useful in detecting and preventing a runtime error when a method cannot be found. &#160;Use the NoMethod() function to find out the name of the method that could not be found.</para>
<para>&#160;</para>
<para>Exporting locals through code blocks:  When you create a code block, you can access local variables defined in the creating entity within the code block definition without having to pass them as parameters (i.e., local variables are visible to the code block). &#160;Using this fact along with the fact that you can pass a code block as a parameter, you can export local variables. &#160;For example:</para>
<para>&#160;</para>
<para>METHOD One() CLASS MyClass EXPORT LOCAL<para/>
&#160;LOCAL nVar := 10 AS INT, cbAdd AS CODEBLOCK<para/>
&#160;cbAdd := {|nValue| nValue + nVar}<para/>
&#160;<para/>
&#160;? SELF:Two(cbAdd) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;210<para/>
&#160;<para/>
METHOD Two(cbAddEmUp) CLASS MyClass<para/>
&#160;RETURN EVAL(cbAddEmUp,200)</para>
<para>When the code block is evaluated in Two(), nVar, which is local to method One(), becomes visible even though it is not passed directly as a parameter.</para>
<para>&#160;</para>
<para>Invoking methods:  The syntax to invoke a method of an object is as follows:</para>
<para>&lt;idObject&gt;:&lt;idMethod&gt;([&lt;uArgList&gt;])</para>
<para>where &lt;uArgList&gt; is an optional comma-separated list of arguments to pass to the named method. &#160;&lt;idObject&gt; identifies the object to whom the method invocation is to be sent; to refer to the same object within a method you use SELF: &#160;or SUPER: &#160;(see note below) instead of &lt;idObject&gt;:.</para>
<para>&#160;</para>
<para>You can invoke a method within an expression or as a program statement. &#160;If called as a program statement, the return value is ignored.</para>
<para>&#160;</para>
<para>You can also use a method invocation as an aliased expression by prefacing it with an alias and enclosing it in parentheses:</para>
<para>&#160;</para>
<para>&lt;idAlias&gt;-&gt;(&lt;idObject&gt;:&lt;idMethod&gt;([&lt;uArgList&gt;]))</para>
<para>&#160;</para>
<para>When you do this, the work area associated with &lt;idAlias&gt; is selected, the method is executed, and the original work area is reselected. &#160;You can specify an aliased expression as a program statement, as you would any other expression.</para>
<para>A method can call itself recursively. &#160;This means you can refer to a method in its own &lt;MethodBody&gt;.</para>
<para>&#160;</para>
<para>&#160;</para>
<para>The visibility of typed methods can also be influenced by using the HIDDEN and PROTECT modifiers as in their use with instance variables. &#160;SUPER calls of HIDDEN methods in parent classes cannot be done by methods of the sub-classes.</para>
<para>&#160;</para>
<para>Calling convention:  Methods use the CLIPPER calling convention, unless they are strongly typed. &#160;See the FUNCTION statement in this guide for more information.</para>
<para>&#160;</para>
<para>SELF and SUPER:  SELF is a special variable that contains a reference to the object that is the receiver of a message (a message is sent to an object each time you use the send operator to invoke a method or access an instance variable). &#160;Whenever a message is sent to an object, a reference to the object is placed in SELF before the corresponding method is invoked. &#160;Within methods of the class, you must use SELF with the message send operator (:) to send messages to the current object. &#160;Using SELF: &#160;to access instance variables is optional; see the ACCESS and ASSIGN entries in this guide for details on when it is required (it is always allowed).</para>
<para>&#160;</para>
<para>SUPER is another special variable that contains a reference to the class that is the nearest ancestor of the method lookup. &#160;It passes a message up the inheritance tree to the appropriate superclass and is meaningful only if the current object&#39;s class inherits from another class. &#160;You can use SUPER with the message send operator (:) to refer directly to a method defined in a superclass. &#160;If you redefine a method in a subclass (by creating a method with the same name as one in a superclass), SUPER is the only way you can override the redefined method with the superclass version.</para>
<para>SUPER: &#160;is useful when defining a subclass which adds some unique behavior, but nonetheless inherits standard behavior from its superclass. &#160;For example:</para>
<para>&#160;</para>
<para>CLASS Person<para/>
&#160;PROTECT cName AS STRING, symName AS SYMBOL<para/>
&#160;<para/>
METHOD Init(cFirstName, cLastName) CLASS Person<para/>
&#160;cName := cFirstName + &quot; &quot; + cLastName<para/>
&#160;symName := String2Symbol(cName)<para/>
&#160;<para/>
CLASS Customer INHERIT Person<para/>
&#160;PROTECT wCustNo AS DWORD<para/>
&#160;<para/>
METHOD Init(cFirstName, cLastName, nCustNo) ;<para/>
&#160; &#160; &#160; &#160; &#160;CLASS Customer<para/>
&#160;SUPER:Init(cFirstName, cLastName)<para/>
&#160;wCustNo := nCustNo</para>
<para>&#160;</para>
<para>The SELF and SUPER variables are allowed only in method definitions. &#160;SELF is the default return value for all methods.</para>
<para>&#160;</para>
<para>Parameters:  As an alternative to specifying method parameters in the METHOD declaration statement, you can use a PARAMETERS statement to specify them. &#160;This practice, however, is not recommended because it is less efficient and provides no compile-time integrity validation. &#160;See the PARAMETERS statement in this guide for more information.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Strongly &#160;typed Methods</h1>
<para>&#160;</para>
<para>In addition to XSharp untyped method implementation, strong typing of method parameters and return values is now supported, providing you with a mechanism through which highly stable code can be obtained. &#160;The type information supplied enables the compiler to perform the necessary type checking and, thus, guarantee a much higher stable code quality.</para>
<para>&#160;</para>
<para>A further benefit obtained by utilizing strongly typed methods is that of performance. &#160;The implementation of typed methods presumes that when the programmer employs strongly typed messages, the compiler can effectively perform an early binding for the respective methods invocation. &#160;As a result of this implementation, typed methods invocations are somewhat faster than the respective untyped counterparts. &#160;These advantages are, however, attained at the price of losing the flexibility which untyped methods offer.</para>
<para>&#160;</para>
<para>It is, therefore, important to remember that interchangeably using both the typed and the untyped versions of a particular methods in an inheritance chain is neither permissible nor possible.</para>
<para>&#160;</para>
<para>XSharp allows strong typing of METHODs, ACCESSes and ASSIGNs. &#160;The programmer accomplishes the specification of the strongly typed methods with XSharp in two steps:</para>
<para>&#160;</para>
<table><row><entry>1.</entry><entry>A mandatory declaration of the typed method is given in its respective class.</entry></row></table><table><row><entry></entry><entry>This declaration is reponsible for declaring the order of the methods in the so-called virtual table which XSharp employs for the invocation of typed methods. &#160;A re-declaration of a method in a subclass is NOT permissible, since it would cause abiguity for the compiler.</entry></row></table><table><row><entry>2.</entry><entry>Define the strongly typed method. &#160;</entry></row></table><table><row><entry></entry><entry>Unlike strongly typed functions, method typing requires strongly typing of the method arguments, the method return value AND speficying a valid calling convention. &#160;<para/>
The following calling conventions are valid for typed methods: STRICT, PASCAL or CALLBACK.</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Examples</h1>
<para>This example creates a class of two-dimensional coordinates with methods to initialize the coordinates, draw a grid, and plot the point:</para>
<para>&#160;</para>
<para>FUNCTION Start()<para/>
&#160;LOCAL oPointSet AS Point2D<para/>
&#160;oPointSet := Point2D{2, 3}<para/>
&#160;oPointSet:ShowGrid()<para/>
&#160;oPointSet:Plot()<para/>
&#160;<para/>
CLASS Point2D &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Define Point2D class<para/>
&#160;INSTANCE x, y AS INT<para/>
&#160;<para/>
METHOD Init(iRow, iCol) CLASS Point2D<para/>
&#160;x := iRow<para/>
&#160;y := iCol<para/>
&#160;RETURN SELF<para/>
&#160;<para/>
METHOD Plot() CLASS Point2D<para/>
&#160;@ x + 11, y + 36 SAY CHR(249)<para/>
&#160;<para/>
METHOD ShowGrid() CLASS Point2D<para/>
&#160;LOCAL iCounter AS INT<para/>
&#160;CLS<para/>
&#160;FOR iCounter := 1 TO 21<para/>
&#160; &#160; &#160; &#160; &#160;IF iCounter = 11<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;@ iCounter, 1 SAY REPLICATE(CHR(196), 71)<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;@ iCounter, 36 SAY CHR(197)<para/>
&#160; &#160; &#160; &#160; &#160;ELSE<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;@ iCounter, 36 SAY CHR(179)<para/>
&#160; &#160; &#160; &#160; &#160;ENDIF<para/>
&#160;NEXT</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">See Also</h1>
<para><link xlink:href="2a5aba7a-b709-40e1-9bd0-f31d73c511b7">ACCESS</link>, <link xlink:href="91993c4b-eb98-471f-a272-3feaddceb3d0">ASSIGN</link>, <link xlink:href="e8707520-821f-41bc-857b-31cdf44b7886">CLASS</link>, <link xlink:href="14cdd669-1822-49e7-b700-7abebe59013c">FUNCTION</link>, <!-- TODO: Unknown topic link: function_registeraxit.html -->RegisterAxit(), <link xlink:href="ef62a4ba-0422-4701-9e88-9cc105d382be">PROPERTY</link>, <link xlink:href="4d6279cb-f438-4885-9c02-e61120f22548">OPERATOR</link>, <link xlink:href="2e3ce02f-e582-464b-b3d8-3ebe56eba8a2">CONSTRUCTOR</link>, <link xlink:href="1517da49-281d-4c1b-9337-5d60d2bd1f95">DESTRUCTOR</link>, <link xlink:href="e3b838c9-f90d-4c04-a519-0d3c6533d416">EVENT</link></para>
<para>&#160;</para>

     <!--ZOOMSTOP-->

<!-- TODO: Review markup -->
<markup>
<script>
           var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
           if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
	   $(document).ready(function(){
		   $(window).bind('resize', function() {
				var y = $('#header').height();
				$('#content').css('margin-top', y);
				$('.hmanchor').css('margin-top', -y-20);
				$('.hmanchor').css('padding-top', y+20);
			});
		   $(window).triggerHandler('resize');	
		   $(window).triggerHandler('resize');	
                   
		});
</script>
</markup>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
