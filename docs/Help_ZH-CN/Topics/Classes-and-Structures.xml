<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-06-09T23:19:38.859+08:00" lasteditedby="Design" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>类和结构</title>
  <body>
    <header>
      <para styleclass="Heading1">类和结构</para>
    </header>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">在 .Net 中，有两种类型可以保存数据，即引用类型(或类)和值类型(或结构)。这两种类型的使用方式语义不同，但都可以包含其他引用和/或值类型。</para>
    <para styleclass="Heading2">类</para>
    <para styleclass="Normal">类(或<text style="font-weight:bold;">引用类型</text>)是最常见的数据存储方式。其名称来源于这样一个事实，即引用类型的变量(通常称为该类型的实例)并不直接包含数据，而是指向(引用)存储实际数据的内存位置。X# 中的类是通过 <link displaytype="text" defaultstyle="true" type="topiclink" href="command_CLASS">CLASS...END CLASS 语句</link>&#32;定义的，可以从另一个引用类型继承，实现一个或多个 <link displaytype="text" defaultstyle="true" type="topiclink" href="command_INTERFACE">INTERFACES</link>，并可能包含字段、属性、构造函数、方法、事件和其他项目：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Customer</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> name </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// exported (public) 字段</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">PROTECT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> age </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// protected 字段, 类外的代码看不到</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text></para>
    <para styleclass="Normal">通常情况下，类及其所有成员都定义在一个代码文件中。如果需要在多个文件中定义类成员(例如，当类成员数量非常多时)，则必须在每个文件中将类定义为 PARTIAL：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">PARTIAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Customer</text><br/><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 类成员</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text></para>
    <para styleclass="Normal">由于类的实例只存储一个指向数据的指针，因此一个或多个变量可以指向内存中完全相同的对象。将一个引用类型的变量分配给另一个相同类型的变量，会导致两者代表相同的数据。使用一个引用更新数据时，也会自动更新另一个引用：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> one, two </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Customer</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; one := Customer{}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; two := one </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 现在两个变量都指向内存中的同一个对象</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; two:name := &quot;Robert&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? one:name </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 也是 &quot;Robert&quot;</text></para>
    <para styleclass="Heading2">嵌套类</para>
    <para styleclass="Normal">一个类甚至可以包含其他类型(类或结构)。在这种情况下，主类型内部的类型称为<text style="font-weight:bold;">嵌套类型</text>。使用嵌套类型时，可以使用容器类的名称和自己的名称，中间用点连接：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Customer</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> NestedClass</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> FieldInNestedClass </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oNested </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Customer.NestedClass</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oNested := Customer.NestedClass{}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oNested:FieldInNestedClass := 100</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? oNested:FieldInNestedClass</text></para>
    <para styleclass="Normal">嵌套类尤其适用于定义辅助类，即只在父类的上下文中使用的类，用于保存只与该类相关的信息。为这些数据创建嵌套类，而不是使用普通类，可以使代码结构更加合理。</para>
    <para styleclass="Heading2">结构</para>
    <para styleclass="Normal">与引用类型相比，结构(或<text style="font-weight:bold;">值类型</text>)直接存储数据。它与 Visual Objects 的 STRUCTURE 功能(在 X# 中更名为 <link displaytype="text" defaultstyle="true" type="topiclink" href="command_VOSTRUCT">VOSTRUCT</link>)有一些相似之处，但它比 VO 功能强大得多，因为它可以包含大多数引用类型也有的项目，如属性、构造函数、方法等。与引用类型不同的是，值类型不能从其他类型继承或实现接口。不过它们可以包含嵌套类或结构。值类型可以用 <link displaytype="text" defaultstyle="true" type="topiclink" href="command_STRUCTURE">STRUCTURE 语句</link>&#32;定义：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Vector2D</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Invert() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:x := - </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:x</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:y := - </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:y</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text></para>
    <para styleclass="Normal">由于结构直接保存数据，因此除了数据本身所需的内存(引用类型的数据和数据指针都需要内存)或垃圾收集器活动外，实例化结构不会涉及任何额外的内存消耗。它们大多适合作为轻量级数据容器，通常只容纳少量字段，一般为 2-4 个，但也可以只容纳一个元素，如 System.Int32 (INT) 或 System.Boolean (LOGIC) 数据类型，它们只是定义了 INT 和 LOGIC 数据类型，包括几种操作其数据的方法。其他非常常用的系统定义结构包括 System.Drawing.Point(点)、System.Drawing.Rectangle(矩形)等，它们都包含少量数据字段。</para>
    <para styleclass="Heading2">结构语义</para>
    <para styleclass="Normal">与普通类相比，结构在使用时也有不同的语义。因为声明一个值类型的 var 会直接分配其数据，所以不需要实例化这样的变量来使用它：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> vector </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Vector2D</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vector:x := 10</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vector:y := 20</text></para>
    <para styleclass="Normal">不过，为了方便起见，也可以在值类型中定义构造函数，并像普通类一样将它们实例化：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Vector2D</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CONSTRUCTOR</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">(vec_x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, vec_y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:x := vec_x</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:y := vec_y</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> vector </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Vector2D</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vector := Vector2D{10,20}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? vector:x </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 10</text></para>
    <para styleclass="Normal">与引用类型不同的是，两个变量的数据存储在不同的内存位置，对其中一个变量的任何更改都不会影响另一个变量：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> vec_1,vec_2 </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Vector2D</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vec_1:x := 10 ; vec_1:y := 20</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vec_2 := vec_1</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? vec_2:x </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 10, 值从第一个 Vector 中复制</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; vec_2:x := 40 </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 将新值加入第二个 &#160;Vector</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? vec_1:x </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 10 again, 第一个 &#160;Vector 值仍保留其原始值</text></para>
    <para styleclass="Normal">因此，结构不适合用于非常大的对象，因为将一个对象赋值给另一个对象或将一个对象作为参数传递给方法时，需要将所有数据从源对象复制到目的对象。另一方面，对于普通类，只需将数据指针作为参数传递给方法即可。</para>
    <para styleclass="Heading2">等号运算符</para>
    <para styleclass="Normal">引用类型和值类型的另一个重要区别是等号运算符 (==) 的行为。对于引用类型，两个变量之间的等号运算符只比较指针本身，而不比较对象的数据。因此，只有当两个变量指向同一个对象时，它才会返回 TRUE，而在所有其他情况下，即使两个对象包含的数据相同，它也会返回 FALSE：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ReferenceType</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> data </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRING</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CLASS</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> o1,o2 </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ReferenceType</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o1 := ReferenceType{}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o1:data := &quot;test&quot;</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o2 := ReferenceType{}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o2:data := &quot;test&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? o1 == o2 </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// FALSE, 因为 o1 和 o2 指向不同的内存位置</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o2 := o1</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? o1 == o2 </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// TRUE</text></para>
    <para styleclass="Normal">另一方面，默认情况下 == 操作符不能在结构上使用，如果尝试使用，编译器会报错。不过，通过在结构中定义一个 <link displaytype="text" defaultstyle="true" type="topiclink" href="command_OPERATOR">OPERATOR</link> 方法来实现与 == 运算符的比较，还是可以使用 == 运算符的。在下面的示例中，实现 == 操作符的目的是比较两个被比较结构所持有的实际数据，因此当数据相等时，操作符将返回 TRUE：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ValueType</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXPORT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> data </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRING</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">OPERATOR</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> == (a </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ValueType, b </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ValueType) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOGIC</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> a:data == b:data </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// 当两个参数的数据相同时，让 equals == 运算符返回 true</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRUCTURE</text></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> o1,o2 </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> ValueType</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o1:data := &quot;test&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o2:data := &quot;nothing&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? o1 == o2 </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// FALSE</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; o2:data := &quot;test&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? o1 == o2 </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// TRUE</text></para>
    <para styleclass="Normal">请注意，可以比较 System.Int32、System.Boolean、System.Double 等大多数常见系统定义结构的值，因为它们也有定义的等号操作符方法，如上面代码中的方法。</para>
    <para styleclass="Heading2">使用哪种</para>
    <para styleclass="Normal">使用类还是结构来保存数据取决于与特定数据相关的具体需求。对于保存大量信息的数据(例如客户对象)，通常会使用引用类型，因为这类对象通常不会经常被实例化，而是会在程序的持续时间内长期 “存活”。而对于在变量间创建、操作和复制次数较多，特别是在紧密循环中的较小对象(例如表示复数的对象，由实部和虚部组成，可用于大量计算)，则更适合使用结构，因为这通常会加快执行速度，减少内存消耗和垃圾回收器活动。无论如何，在使用值类型和引用类型时，仔细考虑它们在语义上的差异是非常重要的。</para>
    <para styleclass="Normal"></para>
  </body>
</topic>
