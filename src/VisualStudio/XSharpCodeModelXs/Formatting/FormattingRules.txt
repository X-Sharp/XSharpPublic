//
// Copyright (c) XSharp B.V.  All Rights Reserved.
// Licensed under the Apache License, Version 2.0.
// See License.txt in the project root for license information.
//
//------------------------------------------------------------------------------
/*
Formattingrules.txt
Each line consists of one or more begin token(s) followed by a comma and the matching end token(s)
Tokens that are followed by a question mark are optional. Per Token there can only be one questionmark
After the end token there may be another comma and a list of "options"
These options can be:
- OPTIONAL (end token is optional)
- MIDDLE   (marks the block where the end keyword is actually a middle token, such as CASE).
- JUMP     (exit, loop, no indenting required)
- CASE     (for special indenting rules for CASE blocks)
- SINGLELINE (for rules that may be single line such as property)
Section delimiters indicate the type of the tokens
NAMESPACE
TYPE
MEMBER
ACCESSOR
STATEMENT
PREPROCESSOR

The MIDDLE keywords are mostly used for generating blocks in the editor

*/



[NAMESPACE]
BEGIN NAMESPACE,END NAMESPACE

[TYPE]
CLASS,END CLASS,NESTED
STRUCTURE,END STRUCTURE,NESTED
INTERFACE,END INTERFACE,NESTED
ENUM,END ENUM,NESTED
VOSTRUCT,END VOSTRUCT,OPTIONAL
UNION,END UNION,OPTIONAL
// XPP Class
CLASS,ENDCLASS
// VFP Class
DEFINE CLASS,ENDDEFINE


// Members with mandatory end
[MEMBER]
LOCAL FUNCTION,END FUNCTION
LOCAL FUNCTION,ENDFUNC
LOCAL PROCEDURE,END PROCEDURE
LOCAL PROCEDURE,ENDPROC

// Members with optional end
// Note that when GET or SET are at the start of the line
// then they are not single line !
FUNCTION,END FUNCTION,OPTIONAL
FUNCTION,ENDFUNC,OPTIONAL
PROCEDURE,END PROCEDURE,OPTIONAL
PROCEDURE,ENDPROC,OPTIONAL
ACCESS,END ACCESS,OPTIONAL
ASSIGN,END ASSIGN,OPTIONAL
METHOD,END METHOD,OPTIONAL
CONSTRUCTOR,END CONSTRUCTOR,OPTIONAL
DESTRUCTOR,END DESTRUCTOR,OPTIONAL
OPERATOR,END OPERATOR,OPTIONAL
EXPORT,EXPORT,SINGLELINE
PUBLIC,PUBLIC,SINGLELINE
PROTECTED INTERNAL?,PROTECTED INTERNAL?,SINGLELINE
HIDDEN,HIDDEN,SINGLELINE
PRIVATE,PRIVATE,SINGLELINE
PROPERTY,END PROPERTY,SINGLELINE
EVENT,END EVENT,SINGLELINE
GET,END GET,ACCESSOR
SET,END SET,ACCESSOR
INIT,END INIT,ACCESSOR
ADD,END ADD,ACCESSOR
REMOVE,END REMOVE,ACCESSOR
GLOBAL,GLOBAL,SINGLELINE
DEFINE,DEFINE,SINGLELINE

// Conditional Statements
[STATEMENT]
DO CASE,CASE,CASE MIDDLE
DO CASE,OTHERWISE,CASE MIDDLE
DO CASE,ENDCASE,CASE
DO CASE,END CASE?,CASE

BEGIN? SWITCH,CASE,CASE MIDDLE
BEGIN? SWITCH,OTHERWISE,CASE MIDDLE
BEGIN? SWITCH,END SWITCH?,CASE
// No need for DO? SWITCH. The single SWITCH keyword is already covered above
DO SWITCH,CASE,MIDDLE CASE
DO SWITCH,OTHERWISE,MIDDLE CASE
DO SWITCH,END SWITCH?,CASE


IF,ELSEIF,MIDDLE
IF,ELSE,MIDDLE
IF,ENDIF
IF,END IF?


// Loops
FOR,NEXT
// Xpp and Vfp allow ENDFOR
FOR,ENDFOR
FOR,EXIT,JUMP
FOR,LOOP,JUMP
FOREACH,NEXT
// Xpp and Vfp allow ENDFOR
FOREACH,ENDFOR
FOREACH,EXIT,JUMP
FOREACH,LOOP,JUMP

// FoxPro allows FOR EACH
FOR EACH,NEXT
FOR EACH,ENDFOR
FOR EACH,EXIT,JUMP
FOR EACH,LOOP,JUMP

DO WHILE,ENDDO
DO WHILE,END DO?
DO WHILE,END WHILE
DO WHILE,EXIT,JUMP
DO WHILE,LOOP,JUMP

WHILE,ENDDO
WHILE,END DO?
WHILE,END WHILE
WHILE,EXIT,JUMP
WHILE,LOOP,JUMP

REPEAT,UNTIL
REPEAT,EXIT,JUMP
REPEAT,LOOP,JUMP

// Error blocks
TRY,CATCH,MIDDLE
TRY,FINALLY,MIDDLE
TRY,END TRY?
// FoxPro has ENDTRY
TRY,ENDTRY

BEGIN SEQUENCE,RECOVER,MIDDLE
BEGIN SEQUENCE,FINALLY,MIDDLE
BEGIN SEQUENCE,END SEQUENCE?
// Xpp allows ENDSEQUENCE
BEGIN SEQUENCE,ENDSEQUENCE

// Blocks
BEGIN CHECKED,END CHECKED?
BEGIN FIXED,END FIXED?
BEGIN LOCK,END LOCK?
BEGIN UNSAFE,END UNSAFE?
BEGIN SCOPE,END SCOPE?
BEGIN UNCHECKED,END UNCHECKED?
BEGIN USING,END USING?
WITH,END WITH
// FoxPro has ENDWITH
WITH,ENDWITH
// FoxPro Scan .. END SCAN
SCAN,END SCAN
SCAN,ENDSCAN

// Preprocessor
[PREPROCESSOR]
#REGION,#ENDREGION
#IF,#ELSE,MIDDLE
#IF,#ENDIF
#IFDEF,#ENDIF
#IFNDEF,#ENDIF
#TEXT,#ENDTEXT

