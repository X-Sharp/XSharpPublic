<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-07-26T12:07:29.511+08:00" lasteditedby="niuji" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>-refout</title>
  <keywords>
    <keyword>-refout</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">-refout</para>
    </header>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">-refout 选项指定了输出引用程序集的文件路径。这相当于 Emit API 中的 metadataPeStream。</para>
    <para styleclass="Heading2">语法</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">-refout:</text>filepath</para>
    <para styleclass="Heading2">参数</para>
    <para styleclass="List"><text styleclass="Code Example">filepath</text><tab/>编译器创建的输出文件的名称和路径。</para>
    <para styleclass="Heading2">备注</para>
    <para styleclass="Normal" style="margin-top:19px; margin-bottom:14px; line-height:1.00; tabstops:none;"><text styleclass="List">文件名一般应与主程序集的文件名一致。推荐的惯例(MSBuild 使用)是将引用程序集放置在相对于主程序集的 &quot;ref/&quot;子文件夹中。</text></para>
    <para styleclass="Body Text">仅包含元数据的程序集将其方法体替换为单个`throw null`body，但包括除匿名类型之外的所有成员。使用`throw null`body(而不是 no body)的原因是为了让PEVerify能够运行并通过(从而验证元数据的完整性)。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">引用程序集包括一个程序集级别的`ReferenceAssembly`属性。此属性可以在源中指定(那么编译器就不需要合成它)。由于这个属性，运行时将拒绝加载引用程序集以进行执行(但仍可以以仅反射模式加载)。对程序集进行反射的工具需要确保它们将引用程序集作为仅反射加载，否则将从运行时接收到类型加载错误。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">引用程序集会进一步移除只包含元数据的程序集中的元数据(私有成员)：</para>
    <list id="0" type="ul" listtype="bullet" formatstring="·" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">引用程序集只对其在 API 表面所需的内容进行引用。真实程序集可能有与特定实现相关的其他引用。</li>
    </list>
    <list id="1" type="ul" listtype="bullet" formatstring="·" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">如果删除私有函数成员(方法、属性和事件)不会对编译产生明显影响，则会将其删除。如果没有 InternalsVisibleTo 属性，则对内部函数成员采取同样的做法。</li>
      <li styleclass="Body Text">但所有类型(包括私有或嵌套类型)都保留在引用程序集中。所有属性都会被保留(即使是内部属性)。</li>
      <li styleclass="Body Text">保留所有虚方法。保留接口的明确实现。明确实现的属性和事件会被保留，因为它们的访问器是虚拟的(因此会被保留)。</li>
      <li styleclass="Body Text">保留结构体的所有字段。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">refout 和 <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-refonly">-refonly</link> 选项是互斥的。</para>
  </body>
</topic>
