<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-11-28T12:54:21.255+01:00" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>__InterpolatedStrings</title>
  <body>
    <header>
      <para styleclass="Heading1">__InterpolatedStrings</para>
    </header>
    <para styleclass="Normal">Interpolated strings is a feature that allows you to embed local variables, instance variables or other expressions inside literal strings. X# supports two kinds of interpolated strings:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2"><text style="font-weight:bold;">1.</text><tab /><text style="font-weight:bold;">Normal Interpolated strings: i&quot;....&quot;</text></para>
    <para styleclass="Normal"><tab /></para>
    <para styleclass="Normal">This works like a normal X# string but with an embedded expression:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><tab /><text style="font-weight:bold; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Who </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Who := </text><text style="font-weight:bold; font-style:normal; color:#993366;">&quot;World&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Writeline( i</text><text style="font-weight:bold; font-style:normal; color:#993366;">&quot;Hello {Who}&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Read()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">RETURN</text></para>
    <para styleclass="Heading2">2.<tab />Extended Interpolated strings: ie&quot;...&quot; and ei&quot;....&quot;</para>
    <para styleclass="Normal">This is a combination of an interpolated string and an extended string. In the example below the \t will be replaced with a tab character:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Who </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Who := </text><text style="font-weight:bold; font-style:normal; color:#993366;">&quot;World&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Writeline( ie</text><text style="font-weight:bold; font-style:normal; color:#993366;">&quot;Hello\t{Who}&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Read()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">RETURN</text></para>
    <para styleclass="Heading2">Notes</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:10pt; color:#000000;">Expression inside Interpolated strings inside X# have the form of</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#3366ff;">{&lt;interpolationExpression&gt;[,&lt;alignment&gt;][::&lt;formatString&gt;]}</text></para>
    <para styleclass="Body Text">In C# the formatString is prefixed with a single colon. Please note that because in X# the colon (<text styleclass="Code Example" style="font-size:12pt;">:</text>) operator is the default member access operator for instance fields, properties and methods, it is not always possible to use that operator to separate expressions and format string. We have therefore changed that operator to the double colon (<text styleclass="Code Example" style="font-size:12pt;">::</text>). I &#160;you compile with /allowdot+ then you can also use the single colon for the format separator.</para>
    <para styleclass="Body Text">To represent a literal &apos;{&apos; or &apos;}&apos; character you will have to duplicate them inside the string. The expressions inside the string are in italics in this example.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">An example of this could be</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">local</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> X := 2 </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">local</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Y := 3 </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">var</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> pointMessage := i</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#3366ff;">&quot;The point {{{</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#3366ff;">X</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#3366ff;">}, {</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#3366ff;">Y</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#3366ff;">}}} is {</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#3366ff;">Math.Sqrt(X * X + Y * Y)</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#3366ff;">::F3} from the origin&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Console</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">.WriteLine(pointMessage)</text><br/><tab /><text style="font-style:italic; text-decoration:none; color:#339966;">// Output is:</text><br/><tab /><text style="font-style:italic; text-decoration:none; color:#339966;">// The point {2, 3} is 3.606 from the origin</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Normal">The expression elements inside the string can use formatting notation just like the String.Format() notation. For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><tab /><text style="font-weight:bold; font-style:normal; color:#3366ff;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#3366ff;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> INT</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;i := 42</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Writeline( i</text><text style="font-weight:bold; font-style:normal; color:#993366;">&quot;Hello {i:x}&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;">) &#160; </text><text style="font-weight:normal; font-style:italic; color:#339966;">// i is printed in hex notation, so Hello 2a</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;Console.Read()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; </text><text style="font-weight:bold; font-style:normal; color:#3366ff;">RETURN</text></para>
  </body>
</topic>
