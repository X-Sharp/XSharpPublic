//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Projects\Xsharp-CS12\src\Compiler\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, TUPLE=111, UNTIL=112, VALUE=113, VIRTUAL=114, VOSTRUCT=115, ADD=116, 
		ARGLIST=117, ASCENDING=118, ASYNC=119, ASTYPE=120, AWAIT=121, BY=122, 
		CHECKED=123, DESCENDING=124, EQUALS=125, EXTERN=126, FIXED=127, FROM=128, 
		GROUP=129, INIT=130, INTO=131, JOIN=132, LET=133, NOP=134, OF=135, ON=136, 
		ORDERBY=137, OVERRIDE=138, PARAMS=139, REMOVE=140, SELECT=141, STACKALLOC=142, 
		SWITCH=143, UNCHECKED=144, UNSAFE=145, VAR=146, VOLATILE=147, WHEN=148, 
		WHERE=149, YIELD=150, WITH=151, LAST_POSITIONAL_KEYWORD=152, FIRST_TYPE=153, 
		ARRAY=154, BYTE=155, CODEBLOCK=156, DATE=157, DWORD=158, FLOAT=159, INT=160, 
		LOGIC=161, LONGINT=162, OBJECT=163, PSZ=164, PTR=165, REAL4=166, REAL8=167, 
		REF=168, SHORTINT=169, STRING=170, SYMBOL=171, USUAL=172, VOID=173, WORD=174, 
		CHAR=175, INT64=176, UINT64=177, DYNAMIC=178, DECIMAL=179, DATETIME=180, 
		CURRENCY=181, BINARY=182, NINT=183, NUINT=184, LAST_TYPE=185, UDC_KEYWORD=186, 
		SCRIPT_REF=187, SCRIPT_LOAD=188, ASSIGNMENT=189, DEFERRED=190, ENDCLASS=191, 
		ENDSEQUENCE=192, EXPORTED=193, FREEZE=194, FINAL=195, INLINE=196, INTRODUCE=197, 
		NOSAVE=198, READONLY=199, SHARING=200, SHARED=201, SYNC=202, ENDDEFINE=203, 
		LPARAMETERS=204, OLEPUBLIC=205, EXCLUDE=206, THISACCESS=207, HELPSTRING=208, 
		DIMENSION=209, NOINIT=210, THEN=211, FOX_M=212, SCAN=213, ENDSCAN=214, 
		ENDFOR=215, ENDFUNC=216, ENDPROC=217, ENDTRY=218, ENDWITH=219, EACH=220, 
		LAST_KEYWORD=221, FIRST_NULL=222, NIL=223, NULL=224, NULL_ARRAY=225, NULL_CODEBLOCK=226, 
		NULL_DATE=227, NULL_OBJECT=228, NULL_PSZ=229, NULL_PTR=230, NULL_STRING=231, 
		NULL_SYMBOL=232, NULL_FOX=233, LAST_NULL=234, FIRST_OPERATOR=235, LT=236, 
		LTE=237, GT=238, GTE=239, EQ=240, EEQ=241, SUBSTR=242, NEQ=243, NEQ2=244, 
		INC=245, DEC=246, PLUS=247, MINUS=248, DIV=249, MOD=250, EXP=251, LSHIFT=252, 
		RSHIFT=253, TILDE=254, MULT=255, QQMARK=256, QMARK=257, AND=258, OR=259, 
		NOT=260, BIT_NOT=261, BIT_AND=262, BIT_OR=263, BIT_XOR=264, ASSIGN_OP=265, 
		ASSIGN_ADD=266, ASSIGN_SUB=267, ASSIGN_EXP=268, ASSIGN_MUL=269, ASSIGN_DIV=270, 
		ASSIGN_MOD=271, ASSIGN_BITAND=272, ASSIGN_BITOR=273, ASSIGN_LSHIFT=274, 
		ASSIGN_RSHIFT=275, ASSIGN_XOR=276, ASSIGN_QQMARK=277, LOGIC_AND=278, LOGIC_OR=279, 
		LOGIC_NOT=280, LOGIC_XOR=281, FOX_AND=282, FOX_OR=283, FOX_NOT=284, FOX_XOR=285, 
		LPAREN=286, RPAREN=287, LCURLY=288, RCURLY=289, LBRKT=290, RBRKT=291, 
		COLON=292, COMMA=293, PIPE=294, AMP=295, ADDROF=296, ALIAS=297, DOT=298, 
		COLONCOLON=299, BACKSLASH=300, ELLIPSIS=301, BACKBACKSLASH=302, DOTDOT=303, 
		LAST_OPERATOR=304, FIRST_CONSTANT=305, FALSE_CONST=306, TRUE_CONST=307, 
		HEX_CONST=308, BIN_CONST=309, INT_CONST=310, DATE_CONST=311, DATETIME_CONST=312, 
		REAL_CONST=313, INVALID_NUMBER=314, SYMBOL_CONST=315, CHAR_CONST=316, 
		STRING_CONST=317, ESCAPED_STRING_CONST=318, INTERPOLATED_STRING_CONST=319, 
		INCOMPLETE_STRING_CONST=320, TEXT_STRING_CONST=321, BRACKETED_STRING_CONST=322, 
		BINARY_CONST=323, LAST_CONSTANT=324, PP_FIRST=325, PP_COMMAND=326, PP_DEFINE=327, 
		PP_ELSE=328, PP_ENDIF=329, PP_ENDREGION=330, PP_ERROR=331, PP_IF=332, 
		PP_IFDEF=333, PP_IFNDEF=334, PP_INCLUDE=335, PP_LINE=336, PP_REGION=337, 
		PP_STDOUT=338, PP_TRANSLATE=339, PP_UNDEF=340, PP_WARNING=341, PP_PRAGMA=342, 
		PP_TEXT=343, PP_ENDTEXT=344, PP_LAST=345, MACRO=346, UDCSEP=347, ID=348, 
		DOC_COMMENT=349, SL_COMMENT=350, ML_COMMENT=351, LINE_CONT=352, LINE_CONT_OLD=353, 
		SEMI=354, WS=355, NL=356, EOS=357, UNRECOGNIZED=358, LAST=359;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_foxsource = 4, RULE_entity = 5, RULE_eos = 6, RULE_funcproc = 7, 
		RULE_funcproctype = 8, RULE_signature = 9, RULE_vodummyclauses = 10, RULE_callingconvention = 11, 
		RULE_vodll = 12, RULE_dllcallconv = 13, RULE_foxdll = 14, RULE_foxdllparam = 15, 
		RULE_vodllmethod = 16, RULE_parameterList = 17, RULE_parameter = 18, RULE_parameterDeclMods = 19, 
		RULE_statementBlock = 20, RULE_funcprocModifiers = 21, RULE_using_ = 22, 
		RULE_voglobal = 23, RULE_method = 24, RULE_methodtype = 25, RULE_vodefine = 26, 
		RULE_vostruct = 27, RULE_vostructmember = 28, RULE_vounion = 29, RULE_votypeModifiers = 30, 
		RULE_namespace_ = 31, RULE_interface_ = 32, RULE_class_ = 33, RULE_classModifiers = 34, 
		RULE_typeparameters = 35, RULE_typeparameter = 36, RULE_typeparameterconstraintsclause = 37, 
		RULE_typeparameterconstraint = 38, RULE_structure_ = 39, RULE_delegate_ = 40, 
		RULE_enum_ = 41, RULE_enummember = 42, RULE_event_ = 43, RULE_eventLineAccessor = 44, 
		RULE_eventAccessor = 45, RULE_classvars = 46, RULE_classvarModifiers = 47, 
		RULE_classvar = 48, RULE_arraysub = 49, RULE_property = 50, RULE_propertyParameterList = 51, 
		RULE_propertyAutoAccessor = 52, RULE_propertyLineAccessor = 53, RULE_accessorModifiers = 54, 
		RULE_expressionList = 55, RULE_propertyAccessor = 56, RULE_classmember = 57, 
		RULE_constructor = 58, RULE_constructorchain = 59, RULE_constructorModifiers = 60, 
		RULE_vodeclare = 61, RULE_destructor = 62, RULE_destructorModifiers = 63, 
		RULE_overloadedOps = 64, RULE_conversionOps = 65, RULE_operator_ = 66, 
		RULE_operatorModifiers = 67, RULE_memberModifiers = 68, RULE_attributes = 69, 
		RULE_attributeBlock = 70, RULE_attributeTarget = 71, RULE_attribute = 72, 
		RULE_attributeParam = 73, RULE_globalAttributes = 74, RULE_globalAttributeTarget = 75, 
		RULE_filewidevar = 76, RULE_statement = 77, RULE_blockTokens = 78, RULE_condBlock = 79, 
		RULE_switchBlock = 80, RULE_catchBlock = 81, RULE_recoverBlock = 82, RULE_variableDeclaration = 83, 
		RULE_variableDeclarator = 84, RULE_localdecl = 85, RULE_localvar = 86, 
		RULE_impliedvar = 87, RULE_fielddecl = 88, RULE_memvardecl = 89, RULE_memvar = 90, 
		RULE_foxmemvardecl = 91, RULE_foxdimvardecl = 92, RULE_foxlparameters = 93, 
		RULE_foxdimvar = 94, RULE_foxclasslib = 95, RULE_foxlparameter = 96, RULE_foxtypedecl = 97, 
		RULE_foxmemvar = 98, RULE_localfuncproc = 99, RULE_localfuncprocModifiers = 100, 
		RULE_assignoperator = 101, RULE_expression = 102, RULE_primary = 103, 
		RULE_boundExpression = 104, RULE_aliasExpression = 105, RULE_objectOrCollectioninitializer = 106, 
		RULE_objectinitializer = 107, RULE_memberinitializer = 108, RULE_initializervalue = 109, 
		RULE_complexInitExpr = 110, RULE_initializerMember = 111, RULE_collectioninitializer = 112, 
		RULE_bracketedArgumentList = 113, RULE_unnamedArgument = 114, RULE_argumentList = 115, 
		RULE_namedArgument = 116, RULE_iif = 117, RULE_nameDot = 118, RULE_name = 119, 
		RULE_aliasedName = 120, RULE_simpleName = 121, RULE_genericArgumentList = 122, 
		RULE_identifierName = 123, RULE_varidentifier = 124, RULE_varidentifierName = 125, 
		RULE_datatype = 126, RULE_arrayRank = 127, RULE_typeName = 128, RULE_usualTypeName = 129, 
		RULE_literalArray = 130, RULE_arrayElement = 131, RULE_anonType = 132, 
		RULE_anonMember = 133, RULE_tupleType = 134, RULE_tupleTypeElement = 135, 
		RULE_tupleExpr = 136, RULE_tupleExprArgument = 137, RULE_designationExpr = 138, 
		RULE_designationTypeExpr = 139, RULE_localDesignation = 140, RULE_codeblock = 141, 
		RULE_codeblockCode = 142, RULE_lambdaParameterList = 143, RULE_codeblockParamList = 144, 
		RULE_codeblockExprList = 145, RULE_anonymousMethodExpression = 146, RULE_explicitAnonymousFunctionParamList = 147, 
		RULE_explicitAnonymousFunctionParameter = 148, RULE_linqQuery = 149, RULE_fromClause = 150, 
		RULE_queryBody = 151, RULE_queryBodyClause = 152, RULE_joinIntoClause = 153, 
		RULE_ordering = 154, RULE_selectOrGroupclause = 155, RULE_queryContinuation = 156, 
		RULE_identifier = 157, RULE_identifierString = 158, RULE_xbaseFunc = 159, 
		RULE_xbaseType = 160, RULE_nativeType = 161, RULE_literalValue = 162, 
		RULE_parserLiteralValue = 163, RULE_keywordvo = 164, RULE_keywordxs = 165, 
		RULE_keywordxpp = 166, RULE_xppclass = 167, RULE_xppclassModifiers = 168, 
		RULE_xppclassMember = 169, RULE_xppmethodvis = 170, RULE_xppvisibility = 171, 
		RULE_xppdeclareMethod = 172, RULE_xppdeclmethodparams = 173, RULE_xppisin = 174, 
		RULE_xppmemberModifiers = 175, RULE_xppclassvars = 176, RULE_xppvarassignment = 177, 
		RULE_xppdeclareproperty = 178, RULE_xppaccessors = 179, RULE_xppmethod = 180, 
		RULE_xppinlineMethod = 181, RULE_keywordfox = 182, RULE_foxclass = 183, 
		RULE_foxclassmember = 184, RULE_foxmethod = 185, RULE_foxclassvars = 186, 
		RULE_foxfield = 187, RULE_foxfieldinitializer = 188, RULE_foximplementsclause = 189, 
		RULE_foxaddobjectclause = 190, RULE_foxpemcomattrib = 191;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "foxsource", "entity", 
		"eos", "funcproc", "funcproctype", "signature", "vodummyclauses", "callingconvention", 
		"vodll", "dllcallconv", "foxdll", "foxdllparam", "vodllmethod", "parameterList", 
		"parameter", "parameterDeclMods", "statementBlock", "funcprocModifiers", 
		"using_", "voglobal", "method", "methodtype", "vodefine", "vostruct", 
		"vostructmember", "vounion", "votypeModifiers", "namespace_", "interface_", 
		"class_", "classModifiers", "typeparameters", "typeparameter", "typeparameterconstraintsclause", 
		"typeparameterconstraint", "structure_", "delegate_", "enum_", "enummember", 
		"event_", "eventLineAccessor", "eventAccessor", "classvars", "classvarModifiers", 
		"classvar", "arraysub", "property", "propertyParameterList", "propertyAutoAccessor", 
		"propertyLineAccessor", "accessorModifiers", "expressionList", "propertyAccessor", 
		"classmember", "constructor", "constructorchain", "constructorModifiers", 
		"vodeclare", "destructor", "destructorModifiers", "overloadedOps", "conversionOps", 
		"operator_", "operatorModifiers", "memberModifiers", "attributes", "attributeBlock", 
		"attributeTarget", "attribute", "attributeParam", "globalAttributes", 
		"globalAttributeTarget", "filewidevar", "statement", "blockTokens", "condBlock", 
		"switchBlock", "catchBlock", "recoverBlock", "variableDeclaration", "variableDeclarator", 
		"localdecl", "localvar", "impliedvar", "fielddecl", "memvardecl", "memvar", 
		"foxmemvardecl", "foxdimvardecl", "foxlparameters", "foxdimvar", "foxclasslib", 
		"foxlparameter", "foxtypedecl", "foxmemvar", "localfuncproc", "localfuncprocModifiers", 
		"assignoperator", "expression", "primary", "boundExpression", "aliasExpression", 
		"objectOrCollectioninitializer", "objectinitializer", "memberinitializer", 
		"initializervalue", "complexInitExpr", "initializerMember", "collectioninitializer", 
		"bracketedArgumentList", "unnamedArgument", "argumentList", "namedArgument", 
		"iif", "nameDot", "name", "aliasedName", "simpleName", "genericArgumentList", 
		"identifierName", "varidentifier", "varidentifierName", "datatype", "arrayRank", 
		"typeName", "usualTypeName", "literalArray", "arrayElement", "anonType", 
		"anonMember", "tupleType", "tupleTypeElement", "tupleExpr", "tupleExprArgument", 
		"designationExpr", "designationTypeExpr", "localDesignation", "codeblock", 
		"codeblockCode", "lambdaParameterList", "codeblockParamList", "codeblockExprList", 
		"anonymousMethodExpression", "explicitAnonymousFunctionParamList", "explicitAnonymousFunctionParameter", 
		"linqQuery", "fromClause", "queryBody", "queryBodyClause", "joinIntoClause", 
		"ordering", "selectOrGroupclause", "queryContinuation", "identifier", 
		"identifierString", "xbaseFunc", "xbaseType", "nativeType", "literalValue", 
		"parserLiteralValue", "keywordvo", "keywordxs", "keywordxpp", "xppclass", 
		"xppclassModifiers", "xppclassMember", "xppmethodvis", "xppvisibility", 
		"xppdeclareMethod", "xppdeclmethodparams", "xppisin", "xppmemberModifiers", 
		"xppclassvars", "xppvarassignment", "xppdeclareproperty", "xppaccessors", 
		"xppmethod", "xppinlineMethod", "keywordfox", "foxclass", "foxclassmember", 
		"foxmethod", "foxclassvars", "foxfield", "foxfieldinitializer", "foximplementsclause", 
		"foxaddobjectclause", "foxpemcomattrib"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "TUPLE", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", 
		"ADD", "ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", 
		"DESCENDING", "EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", 
		"JOIN", "LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", 
		"SELECT", "STACKALLOC", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", 
		"WHEN", "WHERE", "YIELD", "WITH", "LAST_POSITIONAL_KEYWORD", "FIRST_TYPE", 
		"ARRAY", "BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", "INT", "LOGIC", 
		"LONGINT", "OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", "SHORTINT", 
		"STRING", "SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", "UINT64", 
		"DYNAMIC", "DECIMAL", "DATETIME", "CURRENCY", "BINARY", "NINT", "NUINT", 
		"LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", "SCRIPT_LOAD", "ASSIGNMENT", 
		"DEFERRED", "ENDCLASS", "ENDSEQUENCE", "EXPORTED", "FREEZE", "FINAL", 
		"INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", "SYNC", 
		"ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", "EXCLUDE", "THISACCESS", "HELPSTRING", 
		"DIMENSION", "NOINIT", "THEN", "FOX_M", "SCAN", "ENDSCAN", "ENDFOR", "ENDFUNC", 
		"ENDPROC", "ENDTRY", "ENDWITH", "EACH", "LAST_KEYWORD", "FIRST_NULL", 
		"NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", "NULL_DATE", "NULL_OBJECT", 
		"NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", "NULL_FOX", "LAST_NULL", 
		"FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", 
		"NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", 
		"RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
		"ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", 
		"ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", 
		"FOX_NOT", "FOX_XOR", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRKT", 
		"RBRKT", "COLON", "COMMA", "PIPE", "AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", 
		"BACKSLASH", "ELLIPSIS", "BACKBACKSLASH", "DOTDOT", "LAST_OPERATOR", "FIRST_CONSTANT", 
		"FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", 
		"DATETIME_CONST", "REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IF", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_STDOUT", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_PRAGMA", 
		"PP_TEXT", "PP_ENDTEXT", "PP_LAST", "MACRO", "UDCSEP", "ID", "DOC_COMMENT", 
		"SL_COMMENT", "ML_COMMENT", "LINE_CONT", "LINE_CONT_OLD", "SEMI", "WS", 
		"NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 390;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 384; Match(SCRIPT_LOAD);
						State = 385; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 386; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 387; Match(SCRIPT_REF);
						State = 388; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 389; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 394;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 398;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 395; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 400;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 401; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 408; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 409; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 412; Match(EOS);
			State = 413; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 415; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 421; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxsourceContext : XSharpParserRuleContext {
		public FilewidevarContext _filewidevar;
		public IList<FilewidevarContext> _Vars = new List<FilewidevarContext>();
		public StatementBlockContext StmtBlk;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FilewidevarContext[] filewidevar() {
			return GetRuleContexts<FilewidevarContext>();
		}
		public FilewidevarContext filewidevar(int i) {
			return GetRuleContext<FilewidevarContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public FoxsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxsource(this);
		}
	}

	[RuleVersion(0)]
	public FoxsourceContext foxsource() {
		FoxsourceContext _localctx = new FoxsourceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_foxsource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 423; _localctx._filewidevar = filewidevar();
					_localctx._Vars.Add(_localctx._filewidevar);
					}
					} 
				}
				State = 428;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 429; _localctx.StmtBlk = statementBlock();
			State = 433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 430; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 436; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public FoxclassContext foxclass() {
			return GetRuleContext<FoxclassContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public FuncprocContext funcproc() {
			return GetRuleContext<FuncprocContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FilewidevarContext filewidevar() {
			return GetRuleContext<FilewidevarContext>(0);
		}
		public FoxdllContext foxdll() {
			return GetRuleContext<FoxdllContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_entity);
		try {
			State = 469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 441; foxclass();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 442;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 443; xppclass();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 444; structure_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 445; interface_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 446; delegate_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 447; event_();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 448; enum_();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 449; globalAttributes();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 450;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 451; vostruct();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 452;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 453; vounion();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 454; funcproc();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 455; using_();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 456; vodefine();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 457; voglobal();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 458; vodll();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 459;
				if (!(!IsXPP)) throw new FailedPredicateException(this, "!IsXPP");
				State = 460; method();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 461;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 462; xppmethod();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 463; constructor();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 464; destructor();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 465; filewidevar();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 466;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 467; foxdll();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 468; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 471; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 474;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken InitExit;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode[] EXIT() { return GetTokens(XSharpParser.EXIT); }
		public ITerminalNode EXIT(int i) {
			return GetToken(XSharpParser.EXIT, i);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproc(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocContext funcproc() {
		FuncprocContext _localctx = new FuncprocContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funcproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 476; _localctx.Attributes = attributes();
				}
			}

			State = 480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 479; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXIT || _la==INIT) {
				{
				State = 482;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EXIT || _la==INIT) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 485; _localctx.T = funcproctype();
			State = 486; _localctx.Sig = signature();
			State = 488;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
				{
				State = 487;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 490; vodummyclauses();
			State = 491; _localctx.end = eos();
			State = 492; _localctx.StmtBlk = statementBlock();
			State = 499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 496;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 493;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 494; Match(END);
					State = 495; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 498; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncproctypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public FuncproctypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproctype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproctype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproctype(this);
		}
	}

	[RuleVersion(0)]
	public FuncproctypeContext funcproctype() {
		FuncproctypeContext _localctx = new FuncproctypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_funcproctype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public ExpressionContext ExpressionBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; _localctx.Id = identifier();
			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 504; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 507; _localctx.ParamList = parameterList();
				}
			}

			State = 512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 510; Match(AS);
				State = 511; _localctx.Type = datatype();
				}
			}

			State = 517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 514; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 519;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 520; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 523; Match(UDCSEP);
				State = 524; _localctx.ExpressionBody = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodummyclausesContext : XSharpParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public VodummyclausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodummyclauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodummyclauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodummyclauses(this);
		}
	}

	[RuleVersion(0)]
	public VodummyclausesContext vodummyclauses() {
		VodummyclausesContext _localctx = new VodummyclausesContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_vodummyclauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 527; Match(EXPORT);
				State = 528; Match(LOCAL);
				}
			}

			State = 533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 531; Match(DLLEXPORT);
				State = 532; Match(STRING_CONST);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public FuncproctypeContext T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public FuncproctypeContext funcproctype() {
			return GetRuleContext<FuncproctypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 537; _localctx.Attributes = attributes();
				}
			}

			State = 541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 540; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 543; _localctx.D = Match(DLL);
			State = 544; _localctx.T = funcproctype();
			State = 545; _localctx.Id = identifier();
			State = 547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 546; _localctx.ParamList = parameterList();
				}
			}

			State = 551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 549; Match(AS);
				State = 550; _localctx.Type = datatype();
				}
			}

			State = 554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 553; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 556; Match(COLON);
			State = 557; _localctx.Dll = identifierString();
			State = 560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 558; Match(DOT);
				State = 559; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 575;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 562; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 563; Match(DOT);
				State = 564; _localctx.Entrypoint = identifierString();
				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 565; _localctx.Address = Match(ADDROF);
					}
				}

				State = 569;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 568; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 573;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 571; Match(NEQ2);
					State = 572; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 578;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTO || _la==ID) {
				{
				State = 577;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==ID) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 580; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public DatatypeContext Type;
		public IdentifierContext Id;
		public IdentifierContext Dll;
		public IdentifierStringContext Extension;
		public IdentifierContext Alias;
		public FoxdllparamContext _foxdllparam;
		public IList<FoxdllparamContext> _Params = new List<FoxdllparamContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierStringContext identifierString() {
			return GetRuleContext<IdentifierStringContext>(0);
		}
		public FoxdllparamContext[] foxdllparam() {
			return GetRuleContexts<FoxdllparamContext>();
		}
		public FoxdllparamContext foxdllparam(int i) {
			return GetRuleContext<FoxdllparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdll(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllContext foxdll() {
		FoxdllContext _localctx = new FoxdllContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_foxdll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 584; _localctx.Attributes = attributes();
				}
			}

			State = 588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 587; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 590; Match(DECLARE);
			State = 592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 591; _localctx.Type = datatype();
				}
				break;
			}
			State = 594; _localctx.Id = identifier();
			State = 595; Match(IN);
			State = 596; _localctx.Dll = identifier();
			State = 599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 597; Match(DOT);
				State = 598; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 603;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 601; Match(AS);
				State = 602; _localctx.Alias = identifier();
				}
				break;
			}
			State = 613;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 605; _localctx._foxdllparam = foxdllparam();
				_localctx._Params.Add(_localctx._foxdllparam);
				State = 610;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 606; Match(COMMA);
					State = 607; _localctx._foxdllparam = foxdllparam();
					_localctx._Params.Add(_localctx._foxdllparam);
					}
					}
					State = 612;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 615; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllparamContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DatatypeContext Type;
		public IToken Address;
		public IdentifierContext Name;
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxdllparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdllparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdllparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdllparam(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllparamContext foxdllparam() {
		FoxdllparamContext _localctx = new FoxdllparamContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_foxdllparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 617; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 620; _localctx.Type = datatype();
			State = 622;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 621; _localctx.Address = Match(ADDROF);
				}
				break;
			}
			State = 625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 624; _localctx.Name = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllmethodContext : XSharpParserRuleContext {
		public IToken D;
		public IToken T;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public VodllmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodllmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public VodllmethodContext vodllmethod() {
		VodllmethodContext _localctx = new VodllmethodContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_vodllmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; _localctx.D = Match(DLL);
			State = 628;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0) || _la==CONSTRUCTOR || _la==DESTRUCTOR) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 630;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0)) {
				{
				State = 629;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 632; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(LPAREN);
			State = 643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 635; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 640;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 636; Match(COMMA);
					State = 637; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 642;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 645; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			State = 665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 647; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 650; _localctx.Self = Match(SELF);
					}
					break;
				}
				State = 653; _localctx.Id = identifier();
				State = 657;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 654; _localctx.Op = assignoperator();
					State = 655; _localctx.Default = expression(0);
					}
				}

				State = 662;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 659; _localctx.Modifiers = parameterDeclMods();
					State = 660; _localctx.Type = datatype();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _IN;
		public IToken _tset983;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			_localctx._tset983 = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset983 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset983);
			State = 669;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 668; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 671; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 676;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _ASYNC;
		public IToken _tset1035;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 677;
				_localctx._tset1035 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1035 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1035);
				}
				}
				State = 680;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Global;
		public IToken Static;
		public IdentifierNameContext Alias;
		public AssignoperatorContext Op;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_using_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GLOBAL) {
				{
				State = 682; _localctx.Global = Match(GLOBAL);
				}
			}

			State = 685; Match(USING);
			State = 687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 686; _localctx.Static = Match(STATIC);
				}
				break;
			}
			State = 692;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 689; _localctx.Alias = identifierName();
				State = 690; _localctx.Op = assignoperator();
				}
				break;
			}
			State = 694; _localctx.Name = name(0);
			State = 695; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Global;
		public IToken Const;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public IToken end;
		public IToken Static;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_voglobal);
		int _la;
		try {
			State = 734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,66,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 697; _localctx.Attributes = attributes();
					}
				}

				State = 701;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 700; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 703; _localctx.Global = Match(GLOBAL);
				State = 705;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,61,_ctx) ) {
				case 1:
					{
					State = 704; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 707; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 712;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 708; Match(COMMA);
					State = 709; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 714;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 715; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 717; _localctx.Attributes = attributes();
					}
				}

				State = 720; _localctx.Static = Match(STATIC);
				State = 722;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,64,_ctx) ) {
				case 1:
					{
					State = 721; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 724; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 729;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 725; Match(COMMA);
					State = 726; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 731;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 732; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public SignatureContext Sig;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext T2;
		public IToken End;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public MethodtypeContext[] methodtype() {
			return GetRuleContexts<MethodtypeContext>();
		}
		public MethodtypeContext methodtype(int i) {
			return GetRuleContext<MethodtypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 736; _localctx.Attributes = attributes();
				}
			}

			State = 740;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 739; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 742; _localctx.T = methodtype();
			State = 744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,69,_ctx) ) {
			case 1:
				{
				State = 743; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 746; _localctx.Sig = signature();
			State = 749;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 747; Match(CLASS);
				State = 748; _localctx.ClassId = identifier();
				}
			}

			State = 751; vodummyclauses();
			State = 752; _localctx.end = eos();
			State = 753; _localctx.StmtBlk = statementBlock();
			State = 758;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,71,_ctx) ) {
			case 1:
				{
				State = 754; Match(END);
				State = 755; _localctx.T2 = methodtype();
				State = 756; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext DataType;
		public IToken end;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 762; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 765; _localctx.D = Match(DEFINE);
			State = 766; _localctx.Id = identifier();
			State = 767; _localctx.Op = assignoperator();
			State = 768; _localctx.Expr = expression(0);
			State = 771;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 769; Match(AS);
				State = 770; _localctx.DataType = datatype();
				}
			}

			State = 773; _localctx.end = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken V;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] VOSTRUCT() { return GetTokens(XSharpParser.VOSTRUCT); }
		public ITerminalNode VOSTRUCT(int i) {
			return GetToken(XSharpParser.VOSTRUCT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 775; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 778; _localctx.V = Match(VOSTRUCT);
			State = 780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,75,_ctx) ) {
			case 1:
				{
				State = 779; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 782; _localctx.Id = identifier();
			State = 785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 783; Match(ALIGN);
				State = 784; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 787; _localctx.e = eos();
			State = 789;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 788; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,77,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 796;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				State = 793; Match(END);
				State = 794; Match(VOSTRUCT);
				State = 795; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_vostructmember);
		int _la;
		try {
			State = 818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,81,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798; Match(MEMBER);
				State = 799; _localctx.Dim = Match(DIM);
				State = 800; _localctx.Id = identifier();
				State = 801; Match(LBRKT);
				State = 802; _localctx.ArraySub = arraysub();
				State = 803; Match(RBRKT);
				State = 806;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 804;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 805; _localctx.DataType = datatype();
					}
				}

				State = 808; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810; Match(MEMBER);
				State = 811; _localctx.Id = identifier();
				State = 814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 812;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 813; _localctx.DataType = datatype();
					}
				}

				State = 816; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken U;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] UNION() { return GetTokens(XSharpParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(XSharpParser.UNION, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 820; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 823; _localctx.U = Match(UNION);
			State = 825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,83,_ctx) ) {
			case 1:
				{
				State = 824; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 827; _localctx.Id = identifier();
			State = 828; _localctx.e = eos();
			State = 830;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 829; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 832;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,84,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,85,_ctx) ) {
			case 1:
				{
				State = 834; Match(END);
				State = 835; Match(UNION);
				State = 836; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1518;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 839;
				_localctx._tset1518 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1518 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1518);
				}
				}
				State = 842;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public IToken End;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_namespace_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 844; Match(BEGIN);
			State = 845; Match(NAMESPACE);
			State = 846; _localctx.Name = name(0);
			State = 847; _localctx.e = eos();
			State = 851;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,87,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 848; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 853;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,87,_ctx);
			}
			State = 857;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				State = 854; Match(END);
				State = 855; Match(NAMESPACE);
				State = 856; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken I;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_interface_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 860;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 859; _localctx.Attributes = attributes();
				}
			}

			State = 863;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 862; _localctx.Modifiers = classModifiers();
				}
			}

			State = 865; _localctx.I = Match(INTERFACE);
			State = 867;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,91,_ctx) ) {
			case 1:
				{
				State = 866; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 869; _localctx.Id = identifier();
			State = 871;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 870; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 875;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 873;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 874; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 881;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 877; Match(COMMA);
				State = 878; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 883;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 887;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 884; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 889;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 890; _localctx.e = eos();
			State = 894;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,96,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 891; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 896;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,96,_ctx);
			}
			State = 897; Match(END);
			State = 898; Match(INTERFACE);
			State = 899; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_class_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 902;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 901; _localctx.Attributes = attributes();
				}
			}

			State = 905;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 904; _localctx.Modifiers = classModifiers();
				}
			}

			State = 907; _localctx.C = Match(CLASS);
			State = 909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,99,_ctx) ) {
			case 1:
				{
				State = 908; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 911; _localctx.Id = identifier();
			State = 913;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 912; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 917;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 915; Match(INHERIT);
				State = 916; _localctx.BaseType = datatype();
				}
			}

			State = 928;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 919; Match(IMPLEMENTS);
				State = 920; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 925;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 921; Match(COMMA);
					State = 922; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 927;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 933;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 930; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 935;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 936; _localctx.e = eos();
			State = 940;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 937; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 942;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,105,_ctx);
			}
			State = 943; Match(END);
			State = 944; Match(CLASS);
			State = 945; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1787;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 948;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 947;
				_localctx._tset1787 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1787 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1787);
				}
				}
				State = 950;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 952; Match(LT);
			State = 953; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 961;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 954; Match(COMMA);
				State = 956;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,107,_ctx) ) {
				case 1:
					{
					State = 955; attributes();
					}
					break;
				}
				State = 958; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 963;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 964; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 967;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 966; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 970;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
			case 1:
				{
				State = 969;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 972; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 974; Match(WHERE);
			State = 975; _localctx.Name = identifierName();
			State = 976; Match(IS);
			State = 977; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 982;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 978; Match(COMMA);
				State = 979; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 984;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 990;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 985;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 986; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 987; Match(NEW);
				State = 988; Match(LPAREN);
				State = 989; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 78, RULE_structure_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 993;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 992; _localctx.Attributes = attributes();
				}
			}

			State = 996;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 995; _localctx.Modifiers = classModifiers();
				}
			}

			State = 998; _localctx.S = Match(STRUCTURE);
			State = 1000;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				{
				State = 999; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1002; _localctx.Id = identifier();
			State = 1004;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1003; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1015;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1006; Match(IMPLEMENTS);
				State = 1007; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 1012;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1008; Match(COMMA);
					State = 1009; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 1014;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1020;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1017; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1022;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1023; _localctx.e = eos();
			State = 1027;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1024; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 1029;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,120,_ctx);
			}
			State = 1030; Match(END);
			State = 1031; Match(STRUCTURE);
			State = 1032; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken D;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public IToken e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1035;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1034; _localctx.Attributes = attributes();
				}
			}

			State = 1038;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1037; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1040; _localctx.D = Match(DELEGATE);
			State = 1042;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,123,_ctx) ) {
			case 1:
				{
				State = 1041; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1044; _localctx.Id = identifier();
			State = 1046;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1045; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1049;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1048; _localctx.ParamList = parameterList();
				}
			}

			State = 1053;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1051; Match(AS);
				State = 1052; _localctx.Type = datatype();
				}
			}

			State = 1058;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1055; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1060;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1062;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1061; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1064; _localctx.e = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken E;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_enum_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1067;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1066; _localctx.Attributes = attributes();
				}
			}

			State = 1070;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1069; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1072; _localctx.E = Match(ENUM);
			State = 1074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,131,_ctx) ) {
			case 1:
				{
				State = 1073; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1076; _localctx.Id = identifier();
			State = 1079;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 1077;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1078; _localctx.Type = datatype();
				}
			}

			State = 1081; _localctx.e = eos();
			State = 1083;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1082; _localctx._enummember = enummember();
					_localctx._Members.Add(_localctx._enummember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1085;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1087; Match(END);
			State = 1089;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENUM) {
				{
				State = 1088; Match(ENUM);
				}
			}

			State = 1091; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1094;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1093; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1097;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1096; Match(MEMBER);
				}
				break;
			}
			State = 1099; _localctx.Id = identifier();
			State = 1103;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1100; _localctx.Op = assignoperator();
				State = 1101; _localctx.Expr = expression(0);
				}
			}

			State = 1105; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken E;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 86, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1107; _localctx.Attributes = attributes();
				}
			}

			State = 1111;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1110; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1113; _localctx.E = Match(EVENT);
			State = 1115;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1114; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1117; _localctx.Id = identifier();
			State = 1120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,141,_ctx) ) {
			case 1:
				{
				State = 1118; Match(AS);
				State = 1119; _localctx.Type = datatype();
				}
				break;
			}
			State = 1142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1122; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1124;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1123; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1126;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,142,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1128; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1130; _localctx.Multi = eos();
				State = 1132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1131; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1134;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ADD - 97)) | (1L << (REMOVE - 97)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1136; Match(END);
				State = 1138;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EVENT) {
					{
					State = 1137; Match(EVENT);
					}
				}

				State = 1140; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1144; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1148;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
			case 1:
				{
				State = 1147; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1161;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,150,_ctx) ) {
			case 1:
				{
				State = 1150;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1151; _localctx.Key = Match(ADD);
				State = 1153;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					State = 1152; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1155;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1156; _localctx.Key = Match(REMOVE);
				State = 1158;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
				case 1:
					{
					State = 1157; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1160;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1163; _localctx.Attributes = attributes();
				}
			}

			State = 1167;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1166; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,155,_ctx) ) {
			case 1:
				{
				State = 1169; _localctx.Key = Match(ADD);
				State = 1170; _localctx.end = eos();
				State = 1171; _localctx.StmtBlk = statementBlock();
				State = 1172; Match(END);
				State = 1174;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1173; Match(ADD);
					}
				}

				}
				break;

			case 2:
				{
				State = 1176; _localctx.Key = Match(ADD);
				State = 1177; Match(UDCSEP);
				State = 1178; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1179; _localctx.Key = Match(REMOVE);
				State = 1180; _localctx.end = eos();
				State = 1181; _localctx.StmtBlk = statementBlock();
				State = 1182; Match(END);
				State = 1184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1183; Match(REMOVE);
					}
				}

				}
				break;

			case 4:
				{
				State = 1186; _localctx.Key = Match(REMOVE);
				State = 1187; Match(UDCSEP);
				State = 1188; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1191; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1193; _localctx.Attributes = attributes();
				}
			}

			State = 1196; _localctx.Modifiers = classvarModifiers();
			State = 1197; _localctx._classvar = classvar();
			_localctx._Vars.Add(_localctx._classvar);
			State = 1202;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1198; Match(COMMA);
				State = 1199; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				}
				}
				State = 1204;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1205; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _NEW;
		public IToken _tset2499;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1208;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1207;
					_localctx._tset2499 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (INSTANCE - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (CONST - 28)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (INITONLY - 95)) | (1L << (INTERNAL - 95)) | (1L << (NEW - 95)) | (1L << (FIXED - 95)) | (1L << (UNSAFE - 95)) | (1L << (VOLATILE - 95)))) != 0)) ) {
						_localctx._tset2499 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2499);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1210;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,158,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1213;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1212; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1215; _localctx.Id = identifier();
			State = 1220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1216; Match(LBRKT);
				State = 1217; _localctx.ArraySub = arraysub();
				State = 1218; Match(RBRKT);
				}
			}

			State = 1225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1222; _localctx.Op = assignoperator();
				State = 1223; _localctx.Initializer = expression(0);
				}
			}

			State = 1229;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1227;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1228; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1247;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,165,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1231; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1235;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1232; Match(RBRKT);
						State = 1233; Match(LBRKT);
						State = 1234; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1237;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,163,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1239; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1242;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1240; Match(COMMA);
					State = 1241; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1244;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1246; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken P;
		public NameDotContext ExplicitIface;
		public IToken Self;
		public IdentifierContext Id;
		public PropertyParameterListContext ParamList;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyParameterListContext propertyParameterList() {
			return GetRuleContext<PropertyParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1249; _localctx.Attributes = attributes();
				}
			}

			State = 1253;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1252; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1255; _localctx.P = Match(PROPERTY);
			State = 1257;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1256; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1261;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1259; _localctx.Self = Match(SELF);
				}
				break;

			case 2:
				{
				State = 1260; _localctx.Id = identifier();
				}
				break;
			}
			State = 1264;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1263; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1268;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,171,_ctx) ) {
			case 1:
				{
				State = 1266; Match(AS);
				State = 1267; _localctx.Type = datatype();
				}
				break;
			}
			State = 1302;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,177,_ctx) ) {
			case 1:
				{
				State = 1270; _localctx.Auto = Match(AUTO);
				State = 1274;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					{
					State = 1271; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1276;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1280;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 1277; _localctx.Op = assignoperator();
					State = 1278; _localctx.Initializer = expression(0);
					}
				}

				State = 1282; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1284;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1283; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1286;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,174,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1288; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1290; _localctx.Multi = eos();
				State = 1292;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1291; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1294;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1296; Match(END);
				State = 1298;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROPERTY) {
					{
					State = 1297; Match(PROPERTY);
					}
				}

				State = 1300; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public IToken L;
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public IToken R;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_propertyParameterList);
		int _la;
		try {
			State = 1328;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1304; _localctx.L = Match(LBRKT);
				State = 1313;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,179,_ctx) ) {
				case 1:
					{
					State = 1305; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1310;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1306; Match(COMMA);
						State = 1307; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1312;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1315; _localctx.R = Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1316; _localctx.L = Match(LPAREN);
				State = 1325;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
				case 1:
					{
					State = 1317; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1322;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1318; Match(COMMA);
						State = 1319; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1324;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1327; _localctx.R = Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1331;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1330; _localctx.Attributes = attributes();
				}
			}

			State = 1334;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1333; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1336;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1339;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1338; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1342;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
			case 1:
				{
				State = 1341; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1355;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,189,_ctx) ) {
			case 1:
				{
				State = 1344;
				if (!(InputStream.La(2) != SET && InputStream.La(2) != INIT)) throw new FailedPredicateException(this, "InputStream.La(2) != SET && InputStream.La(2) != INIT");
				State = 1345;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==UDCSEP) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1347;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					State = 1346; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1349;
				if (!(InputStream.La(2) != GET && InputStream.La(2) != UDCSEP)) throw new FailedPredicateException(this, "InputStream.La(2) != GET && InputStream.La(2) != UDCSEP");
				State = 1350;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1352;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
				case 1:
					{
					State = 1351; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1354;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset2951;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1358;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1357;
					_localctx._tset2951 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset2951 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2951);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1360;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,190,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1362; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1367;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1363; Match(COMMA);
					State = 1364; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1369;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,191,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken Key2;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(XSharpParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(XSharpParser.INIT, i);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1370; _localctx.Attributes = attributes();
				}
			}

			State = 1374;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1373; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1396;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				State = 1376; _localctx.Key = Match(GET);
				State = 1377; _localctx.end = eos();
				State = 1378; _localctx.StmtBlk = statementBlock();
				State = 1379; Match(END);
				State = 1381;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1380; _localctx.Key2 = Match(GET);
					}
				}

				}
				break;

			case 2:
				{
				State = 1383; _localctx.Key = Match(GET);
				State = 1384; Match(UDCSEP);
				State = 1385; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1386;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1387; _localctx.end = eos();
				State = 1388; _localctx.StmtBlk = statementBlock();
				State = 1389; Match(END);
				State = 1391;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==INIT) {
					{
					State = 1390;
					_localctx.Key2 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==SET || _la==INIT) ) {
						_localctx.Key2 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;

			case 4:
				{
				State = 1393;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1394; Match(UDCSEP);
				State = 1395; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1398; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClseosContext : ClassmemberContext {
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClseosContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClseos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClseos(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public VodeclareContext decl;
		public VodeclareContext vodeclare() {
			return GetRuleContext<VodeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}
	public partial class ClsvodllmethodContext : ClassmemberContext {
		public VodllmethodContext Member;
		public VodllmethodContext vodllmethod() {
			return GetRuleContext<VodllmethodContext>(0);
		}
		public ClsvodllmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_classmember);
		try {
			State = 1416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,197,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1400; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1401; ((ClsdeclareContext)_localctx).decl = vodeclare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1402; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1403; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1404; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1405; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1406; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1407; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1408; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1409; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1410; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1411; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1412; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsvodllmethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1413;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 1414; ((ClsvodllmethodContext)_localctx).Member = vodllmethod();
				}
				break;

			case 15:
				_localctx = new ClseosContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1415; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public IToken c1;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public ConstructorchainContext Chain;
		public StatementBlockContext StmtBlk;
		public IToken c2;
		public IToken End;
		public ITerminalNode[] CONSTRUCTOR() { return GetTokens(XSharpParser.CONSTRUCTOR); }
		public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(XSharpParser.CONSTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstructorchainContext constructorchain() {
			return GetRuleContext<ConstructorchainContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1418; _localctx.Attributes = attributes();
				}
			}

			State = 1422;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1421; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1424; _localctx.c1 = Match(CONSTRUCTOR);
			State = 1426;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1425; _localctx.ParamList = parameterList();
				}
			}

			State = 1430;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1428; Match(AS);
				State = 1429; Match(VOID);
				}
			}

			State = 1433;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1432; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1437;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1435; Match(CLASS);
				State = 1436; _localctx.ClassId = identifier();
				}
			}

			State = 1441;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1439; Match(UDCSEP);
				State = 1440; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1443; _localctx.end = eos();
			State = 1445;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1444; _localctx.Chain = constructorchain();
				}
				break;
			}
			State = 1447; _localctx.StmtBlk = statementBlock();
			State = 1451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,206,_ctx) ) {
			case 1:
				{
				State = 1448; Match(END);
				State = 1449; _localctx.c2 = Match(CONSTRUCTOR);
				State = 1450; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorchainContext : XSharpParserRuleContext {
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorchainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorchain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorchain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorchain(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorchainContext constructorchain() {
		ConstructorchainContext _localctx = new ConstructorchainContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructorchain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1453;
			_la = _input.La(1);
			if ( !(_la==SELF || _la==SUPER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1454; Match(LPAREN);
			State = 1455; _localctx.ArgList = argumentList();
			State = 1456; Match(RPAREN);
			State = 1457; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3378;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1460;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1459;
				_localctx._tset3378 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3378 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3378);
				}
				}
				State = 1462;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodeclareContext : XSharpParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public VodeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodeclare(this);
		}
	}

	[RuleVersion(0)]
	public VodeclareContext vodeclare() {
		VodeclareContext _localctx = new VodeclareContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_vodeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1464; Match(DECLARE);
			State = 1465;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1467;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1466;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 1469;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0) );
			State = 1471; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public IToken d1;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken d2;
		public IToken End;
		public ITerminalNode[] DESTRUCTOR() { return GetTokens(XSharpParser.DESTRUCTOR); }
		public ITerminalNode DESTRUCTOR(int i) {
			return GetToken(XSharpParser.DESTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1473; _localctx.Attributes = attributes();
				}
			}

			State = 1477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1476; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1479; _localctx.d1 = Match(DESTRUCTOR);
			State = 1482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1480; Match(LPAREN);
				State = 1481; Match(RPAREN);
				}
			}

			State = 1486;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1484; Match(CLASS);
				State = 1485; _localctx.ClassId = identifier();
				}
			}

			State = 1490;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1488; Match(UDCSEP);
				State = 1489; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1492; _localctx.end = eos();
			State = 1493; _localctx.StmtBlk = statementBlock();
			State = 1497;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,214,_ctx) ) {
			case 1:
				{
				State = 1494; Match(END);
				State = 1495; _localctx.d2 = Match(DESTRUCTOR);
				State = 1496; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1499; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1502;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LT - 236)) | (1L << (LTE - 236)) | (1L << (GT - 236)) | (1L << (GTE - 236)) | (1L << (EEQ - 236)) | (1L << (NEQ - 236)) | (1L << (NEQ2 - 236)) | (1L << (INC - 236)) | (1L << (DEC - 236)) | (1L << (PLUS - 236)) | (1L << (MINUS - 236)) | (1L << (DIV - 236)) | (1L << (MOD - 236)) | (1L << (LSHIFT - 236)) | (1L << (RSHIFT - 236)) | (1L << (TILDE - 236)) | (1L << (MULT - 236)) | (1L << (AND - 236)) | (1L << (OR - 236)) | (1L << (NOT - 236)) | (1L << (PIPE - 236)) | (1L << (AMP - 236)))) != 0) || _la==FALSE_CONST || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public IToken o1;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken End;
		public ITerminalNode[] OPERATOR() { return GetTokens(XSharpParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(XSharpParser.OPERATOR, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 132, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1508; _localctx.Attributes = attributes();
				}
			}

			State = 1512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1511; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1514; _localctx.o1 = Match(OPERATOR);
			State = 1517;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1515; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1516; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1520;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1519; _localctx.Gt = Match(GT);
				}
			}

			State = 1522; _localctx.ParamList = parameterList();
			State = 1525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1523; Match(AS);
				State = 1524; _localctx.Type = datatype();
				}
			}

			State = 1529;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1527; Match(UDCSEP);
				State = 1528; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1531; _localctx.end = eos();
			State = 1532; _localctx.StmtBlk = statementBlock();
			State = 1536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,222,_ctx) ) {
			case 1:
				{
				State = 1533; Match(END);
				State = 1534; _localctx.o1 = Match(OPERATOR);
				State = 1535; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3755;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1539;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1538;
				_localctx._tset3755 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3755 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3755);
				}
				}
				State = 1541;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3782;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1543;
				_localctx._tset3782 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset3782 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3782);
				}
				}
				State = 1546;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1549;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1548; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1551;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,225,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributeBlock);
		int _la;
		try {
			State = 1568;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1553; Match(LBRKT);
				State = 1555;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					State = 1554; _localctx.Target = attributeTarget();
					}
					break;
				}
				State = 1557; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				State = 1562;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1558; Match(COMMA);
					State = 1559; _localctx._attribute = attribute();
					_localctx._Attributes.Add(_localctx._attribute);
					}
					}
					State = 1564;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1565; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1567; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << FIELD) | (1L << METHOD) | (1L << RETURN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (CONSTRUCTOR - 82)) | (1L << (DELEGATE - 82)) | (1L << (ENUM - 82)) | (1L << (EVENT - 82)) | (1L << (INTERFACE - 82)) | (1L << (PROPERTY - 82)) | (1L << (STRUCTURE - 82)))) != 0) || _la==ID) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1571; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1573; _localctx.Name = name(0);
			State = 1586;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1574; Match(LPAREN);
				State = 1583;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,230,_ctx) ) {
				case 1:
					{
					State = 1575; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1580;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1576; Match(COMMA);
						State = 1577; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1582;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1585; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_attributeParam);
		try {
			State = 1593;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,232,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1588; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1589; ((PropertyAttributeParamContext)_localctx).Op = assignoperator();
				State = 1590; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1592; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(LBRKT);
			State = 1596; _localctx.Target = globalAttributeTarget();
			State = 1597; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1602;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1598; Match(COMMA);
				State = 1599; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1604;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1605; Match(RBRKT);
			State = 1606; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_globalAttributeTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1608; _localctx.Token = Match(ID);
			State = 1609; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilewidevarContext : XSharpParserRuleContext {
		public IToken Token;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public EosContext end;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public MemvarContext _memvar;
		public IList<MemvarContext> _XVars = new List<MemvarContext>();
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public FilewidevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filewidevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFilewidevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFilewidevar(this);
		}
	}

	[RuleVersion(0)]
	public FilewidevarContext filewidevar() {
		FilewidevarContext _localctx = new FilewidevarContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_filewidevar);
		int _la;
		try {
			State = 1661;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1611; _localctx.Token = Match(MEMVAR);
				State = 1612; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				State = 1617;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1613; Match(COMMA);
					State = 1614; _localctx._identifierName = identifierName();
					_localctx._Vars.Add(_localctx._identifierName);
					}
					}
					State = 1619;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1620; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1622; _localctx.Token = Match(FIELD);
				State = 1623; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				State = 1628;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1624; Match(COMMA);
					State = 1625; _localctx._identifierName = identifierName();
					_localctx._Fields.Add(_localctx._identifierName);
					}
					}
					State = 1630;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1633;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN) {
					{
					State = 1631; Match(IN);
					State = 1632; _localctx.Alias = identifierName();
					}
				}

				State = 1635; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1637;
				if (!(!IsFox )) throw new FailedPredicateException(this, "!IsFox ");
				State = 1638; _localctx.Token = Match(PUBLIC);
				State = 1639; _localctx._memvar = memvar(_localctx.Token);
				_localctx._XVars.Add(_localctx._memvar);
				State = 1644;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1640; Match(COMMA);
					State = 1641; _localctx._memvar = memvar(_localctx.Token);
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 1646;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1647; _localctx.end = eos();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1649;
				if (!(IsFox  )) throw new FailedPredicateException(this, "IsFox  ");
				State = 1650; _localctx.Token = Match(PUBLIC);
				State = 1651; _localctx._foxmemvar = foxmemvar(_localctx.Token);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 1656;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1652; Match(COMMA);
					State = 1653; _localctx._foxmemvar = foxmemvar(_localctx.Token);
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 1658;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1659; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoxmemvardeclStmtContext : StatementContext {
		public FoxmemvardeclContext Decl;
		public FoxmemvardeclContext foxmemvardecl() {
			return GetRuleContext<FoxmemvardeclContext>(0);
		}
		public FoxmemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardeclStmt(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public IToken T;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDTRY() { return GetToken(XSharpParser.ENDTRY, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public IToken Y;
		public IToken R;
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class MemvardeclStmtContext : StatementContext {
		public MemvardeclContext Decl;
		public MemvardeclContext memvardecl() {
			return GetRuleContext<MemvardeclContext>(0);
		}
		public MemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardeclStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class LocalFunctionStmtContext : StatementContext {
		public LocalfuncprocContext Decl;
		public LocalfuncprocContext localfuncproc() {
			return GetRuleContext<LocalfuncprocContext>(0);
		}
		public LocalFunctionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalFunctionStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public IToken S;
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class FoxtextoutStmtContext : StatementContext {
		public IToken B;
		public IToken String;
		public IToken end;
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(XSharpParser.BACKSLASH, 0); }
		public ITerminalNode BACKBACKSLASH() { return GetToken(XSharpParser.BACKBACKSLASH, 0); }
		public FoxtextoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextoutStmt(this);
		}
	}
	public partial class FoxdimvardeclStmtContext : StatementContext {
		public FoxdimvardeclContext Decl;
		public FoxdimvardeclContext foxdimvardecl() {
			return GetRuleContext<FoxdimvardeclContext>(0);
		}
		public FoxdimvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardeclStmt(this);
		}
	}
	public partial class DoStmtContext : StatementContext {
		public IToken D;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArgumentListContext ArgList;
		public EosContext end;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DoStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDoStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public IToken c;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _CaseBlocks = new List<CondBlockContext>();
		public IToken oth;
		public StatementBlockContext OtherwiseStmtBlk;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public IToken r;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}
	public partial class FoxlparametersStmtContext : StatementContext {
		public FoxlparametersContext Decl;
		public FoxlparametersContext foxlparameters() {
			return GetRuleContext<FoxlparametersContext>(0);
		}
		public FoxlparametersStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparametersStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparametersStmt(this);
		}
	}
	public partial class FoxexpressionStmtContext : StatementContext {
		public IToken Eq;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FoxexpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxexpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxexpressionStmt(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public IToken f;
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode ENDSEQUENCE() { return GetToken(XSharpParser.ENDSEQUENCE, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public IToken w;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IToken f;
		public IToken a;
		public IToken V;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken R;
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class WithBlockContext : StatementContext {
		public ExpressionContext Expr;
		public IToken As;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WITH() { return GetTokens(XSharpParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(XSharpParser.WITH, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDWITH() { return GetToken(XSharpParser.ENDWITH, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public WithBlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWithBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWithBlock(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IToken i;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _IfBlocks = new List<CondBlockContext>();
		public IToken e;
		public IToken el;
		public StatementBlockContext ElseStmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode[] ELSEIF() { return GetTokens(XSharpParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(XSharpParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public VariableDeclarationContext VarDecl;
		public BlockTokensContext Key1;
		public BlockTokensContext Key2;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockTokensContext[] blockTokens() {
			return GetRuleContexts<BlockTokensContext>();
		}
		public BlockTokensContext blockTokens(int i) {
			return GetRuleContext<BlockTokensContext>(i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_statement);
		int _la;
		try {
			State = 2021;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,293,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1663; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new FoxlparametersStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1664; ((FoxlparametersStmtContext)_localctx).Decl = foxlparameters();
				}
				break;

			case 3:
				_localctx = new LocalFunctionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1665; ((LocalFunctionStmtContext)_localctx).Decl = localfuncproc();
				}
				break;

			case 4:
				_localctx = new MemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1666;
				if (!(!IsFox && HasMemVars)) throw new FailedPredicateException(this, "!IsFox && HasMemVars");
				State = 1667; ((MemvardeclStmtContext)_localctx).Decl = memvardecl();
				}
				break;

			case 5:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1668; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 6:
				_localctx = new FoxmemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1669;
				if (!(IsFox && HasMemVars)) throw new FailedPredicateException(this, "IsFox && HasMemVars");
				State = 1670; ((FoxmemvardeclStmtContext)_localctx).Decl = foxmemvardecl();
				}
				break;

			case 7:
				_localctx = new FoxdimvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1671;
				if (!(IsFox )) throw new FailedPredicateException(this, "IsFox ");
				State = 1672; ((FoxdimvardeclStmtContext)_localctx).Decl = foxdimvardecl();
				}
				break;

			case 8:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1674;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1673; Match(DO);
					}
				}

				State = 1676; ((WhileStmtContext)_localctx).w = Match(WHILE);
				State = 1677; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1678; ((WhileStmtContext)_localctx).end = eos();
				State = 1679; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1685;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1680; ((WhileStmtContext)_localctx).e = Match(END);
					State = 1682;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==DO || _la==WHILE) {
						{
						State = 1681;
						_la = _input.La(1);
						if ( !(_la==DO || _la==WHILE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				case ENDDO:
					{
					State = 1684; ((WhileStmtContext)_localctx).e = Match(ENDDO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1687; eos();
				}
				break;

			case 9:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1689; Match(NOP);
				State = 1692;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1690; Match(LPAREN);
					State = 1691; Match(RPAREN);
					}
				}

				State = 1694; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1695; ((ForStmtContext)_localctx).f = Match(FOR);
				State = 1716;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					State = 1696; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1702;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1698;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1697; Match(LOCAL);
							}
						}

						State = 1700; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1701; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1704; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1705; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1706; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1708; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1709; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1710; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1711; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1714;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1712; Match(AS);
						State = 1713; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1718;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1719; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1722;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1720; Match(STEP);
					State = 1721; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1724; ((ForStmtContext)_localctx).end = eos();
				State = 1725; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1728;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1726; ((ForStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1727; ((ForStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1730; eos();
				}
				break;

			case 11:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1732; ((IfStmtContext)_localctx).i = Match(IF);
				State = 1733; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).i);
				((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
				State = 1738;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1734; ((IfStmtContext)_localctx).e = Match(ELSEIF);
					State = 1735; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).e);
					((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
					}
					}
					State = 1740;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1745;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1741; ((IfStmtContext)_localctx).el = Match(ELSE);
					State = 1742; eos();
					State = 1743; ((IfStmtContext)_localctx).ElseStmtBlk = statementBlock();
					}
				}

				State = 1752;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1747; ((IfStmtContext)_localctx).e = Match(END);
					State = 1749;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==IF) {
						{
						State = 1748; Match(IF);
						}
					}

					}
					break;
				case ENDIF:
					{
					State = 1751; ((IfStmtContext)_localctx).e = Match(ENDIF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1754; eos();
				}
				break;

			case 12:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1756; Match(DO);
				State = 1757; Match(CASE);
				State = 1758; ((CaseStmtContext)_localctx).end = eos();
				State = 1763;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE) {
					{
					{
					State = 1759; ((CaseStmtContext)_localctx).c = Match(CASE);
					State = 1760; ((CaseStmtContext)_localctx)._condBlock = condBlock(((CaseStmtContext)_localctx).c);
					((CaseStmtContext)_localctx)._CaseBlocks.Add(((CaseStmtContext)_localctx)._condBlock);
					}
					}
					State = 1765;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1770;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OTHERWISE) {
					{
					State = 1766; ((CaseStmtContext)_localctx).oth = Match(OTHERWISE);
					State = 1767; ((CaseStmtContext)_localctx).end = eos();
					State = 1768; ((CaseStmtContext)_localctx).OtherwiseStmtBlk = statementBlock();
					}
				}

				State = 1777;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1772; ((CaseStmtContext)_localctx).e = Match(END);
					State = 1774;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CASE) {
						{
						State = 1773; Match(CASE);
						}
					}

					}
					break;
				case ENDCASE:
					{
					State = 1776; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1779; eos();
				}
				break;

			case 13:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1781; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1782; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1783; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1784; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 15:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1785; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1787;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 1786; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1789; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 16:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1790; ((ReturnStmtContext)_localctx).R = Match(RETURN);
				State = 1793;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,259,_ctx) ) {
				case 1:
					{
					State = 1791; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1792; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1795; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 17:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1796;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1805;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,261,_ctx) ) {
				case 1:
					{
					State = 1797; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1802;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1798; Match(COMMA);
						State = 1799; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1804;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1807; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 18:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1808; Match(BEGIN);
				State = 1809; Match(SEQUENCE);
				State = 1810; ((SeqStmtContext)_localctx).end = eos();
				State = 1811; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RECOVER) {
					{
					State = 1812; Match(RECOVER);
					State = 1813; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
				}

				State = 1820;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1816; ((SeqStmtContext)_localctx).F = Match(FINALLY);
					State = 1817; eos();
					State = 1818; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1827;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					{
					State = 1822; ((SeqStmtContext)_localctx).e = Match(END);
					State = 1824;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEQUENCE) {
						{
						State = 1823; Match(SEQUENCE);
						}
					}

					}
					}
					break;
				case ENDSEQUENCE:
					{
					State = 1826; ((SeqStmtContext)_localctx).e = Match(ENDSEQUENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1829; eos();
				}
				break;

			case 19:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1831; ((RepeatStmtContext)_localctx).r = Match(REPEAT);
				State = 1832; ((RepeatStmtContext)_localctx).end = eos();
				State = 1833; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1834; Match(UNTIL);
				State = 1835; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1836; eos();
				}
				break;

			case 20:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1841;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOREACH:
					{
					State = 1838; ((ForeachStmtContext)_localctx).f = Match(FOREACH);
					}
					break;
				case FOR:
					{
					State = 1839; ((ForeachStmtContext)_localctx).f = Match(FOR);
					State = 1840; Match(EACH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1844;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					State = 1843; ((ForeachStmtContext)_localctx).a = Match(AWAIT);
					}
					break;
				}
				State = 1855;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,269,_ctx) ) {
				case 1:
					{
					State = 1846; ((ForeachStmtContext)_localctx).V = Match(IMPLIED);
					State = 1847; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;

				case 2:
					{
					State = 1848; ((ForeachStmtContext)_localctx).Id = varidentifier();
					State = 1851;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1849; Match(AS);
						State = 1850; ((ForeachStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;

				case 3:
					{
					State = 1853; ((ForeachStmtContext)_localctx).V = Match(VAR);
					State = 1854; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;
				}
				State = 1857; Match(IN);
				State = 1858; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1859; ((ForeachStmtContext)_localctx).end = eos();
				State = 1860; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1863;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1861; ((ForeachStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1862; ((ForeachStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1865; eos();
				}
				break;

			case 21:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1867; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1869;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					State = 1868; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1871; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 22:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1872; ((TryStmtContext)_localctx).T = Match(TRY);
				State = 1873; ((TryStmtContext)_localctx).end = eos();
				State = 1874; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1881;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CATCH) {
					{
					{
					State = 1875; Match(CATCH);
					State = 1877;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						State = 1876; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
						((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
						}
						break;
					}
					}
					}
					State = 1883;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1888;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1884; ((TryStmtContext)_localctx).F = Match(FINALLY);
					State = 1885; eos();
					State = 1886; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1895;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1890; ((TryStmtContext)_localctx).e = Match(END);
					State = 1892;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TRY) {
						{
						State = 1891; Match(TRY);
						}
					}

					}
					break;
				case ENDTRY:
					{
					State = 1894; ((TryStmtContext)_localctx).e = Match(ENDTRY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1897; eos();
				}
				break;

			case 23:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1899; Match(BEGIN);
				State = 1900; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1901; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1902; ((BlockStmtContext)_localctx).end = eos();
				State = 1903; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1904; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1906;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCK) {
					{
					State = 1905; Match(LOCK);
					}
				}

				State = 1908; eos();
				}
				break;

			case 24:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1910; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1911; ((YieldStmtContext)_localctx).R = Match(RETURN);
				State = 1914;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					State = 1912; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1913; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1916; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 25:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1917; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1918;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1919; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 26:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1921;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1920;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1923; ((SwitchStmtContext)_localctx).S = Match(SWITCH);
				State = 1924; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1925; ((SwitchStmtContext)_localctx).end = eos();
				State = 1927;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1926; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
					((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
					}
					}
					State = 1929;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==CASE || _la==OTHERWISE );
				State = 1931; ((SwitchStmtContext)_localctx).e = Match(END);
				State = 1933;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SWITCH) {
					{
					State = 1932; Match(SWITCH);
					}
				}

				State = 1935; eos();
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1937; Match(BEGIN);
				State = 1938; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 1941;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 1939; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 1940; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 1943; ((BlockStmtContext)_localctx).end = eos();
				State = 1944; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1945; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1947;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 1946; Match(USING);
					}
				}

				State = 1949; eos();
				}
				break;

			case 28:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1951; Match(BEGIN);
				State = 1952; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 1953; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 1954; ((BlockStmtContext)_localctx).end = eos();
				State = 1955; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1956; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1958;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FIXED) {
					{
					State = 1957; Match(FIXED);
					}
				}

				State = 1960; eos();
				}
				break;

			case 29:
				_localctx = new WithBlockContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1962; Match(WITH);
				State = 1963; ((WithBlockContext)_localctx).Expr = expression(0);
				State = 1969;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 1964; ((WithBlockContext)_localctx).As = Match(AS);
					State = 1965; ((WithBlockContext)_localctx).DataType = datatype();
					State = 1967;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 1966; foxclasslib();
						}
					}

					}
				}

				State = 1971; ((WithBlockContext)_localctx).end = eos();
				State = 1972; ((WithBlockContext)_localctx).StmtBlk = statementBlock();
				State = 1978;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1973; ((WithBlockContext)_localctx).e = Match(END);
					State = 1975;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WITH) {
						{
						State = 1974; Match(WITH);
						}
					}

					}
					break;
				case ENDWITH:
					{
					State = 1977; ((WithBlockContext)_localctx).e = Match(ENDWITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1980; eos();
				}
				break;

			case 30:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1982; Match(BEGIN);
				State = 1983; ((BlockStmtContext)_localctx).Key1 = blockTokens();
				State = 1984; ((BlockStmtContext)_localctx).end = eos();
				State = 1985; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1986; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1988;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) {
					{
					State = 1987; ((BlockStmtContext)_localctx).Key2 = blockTokens();
					}
				}

				State = 1990; eos();
				}
				break;

			case 31:
				_localctx = new FoxexpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1992; ((FoxexpressionStmtContext)_localctx).Eq = Match(EQ);
				State = 1993; ((FoxexpressionStmtContext)_localctx)._expression = expression(0);
				((FoxexpressionStmtContext)_localctx)._Exprs.Add(((FoxexpressionStmtContext)_localctx)._expression);
				State = 1994; ((FoxexpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 32:
				_localctx = new FoxtextoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1996;
				((FoxtextoutStmtContext)_localctx).B = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BACKSLASH || _la==BACKBACKSLASH) ) {
					((FoxtextoutStmtContext)_localctx).B = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1997; ((FoxtextoutStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 1998; ((FoxtextoutStmtContext)_localctx).end = Match(EOS);
				}
				break;

			case 33:
				_localctx = new DoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1999; ((DoStmtContext)_localctx).D = Match(DO);
				State = 2001;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					State = 2000; ((DoStmtContext)_localctx).Amp = Match(AMP);
					}
					break;
				}
				State = 2003; ((DoStmtContext)_localctx).Id = varidentifierName();
				State = 2006;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 2004; Match(WITH);
					State = 2005; ((DoStmtContext)_localctx).ArgList = argumentList();
					}
				}

				State = 2008; ((DoStmtContext)_localctx).end = eos();
				}
				break;

			case 34:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2010;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 2011; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 2016;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2012; Match(COMMA);
					State = 2013; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 2018;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2019; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTokensContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public BlockTokensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTokens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockTokens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockTokens(this);
		}
	}

	[RuleVersion(0)]
	public BlockTokensContext blockTokens() {
		BlockTokensContext _localctx = new BlockTokensContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_blockTokens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondBlockContext : XSharpParserRuleContext {
		public IToken st;
		public ExpressionContext Cond;
		public IToken Then;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public CondBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CondBlockContext(ParserRuleContext parent, int invokingState, IToken st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_condBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondBlock(this);
		}
	}

	[RuleVersion(0)]
	public CondBlockContext condBlock(IToken st) {
		CondBlockContext _localctx = new CondBlockContext(_ctx, State, st);
		EnterRule(_localctx, 158, RULE_condBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2025; _localctx.Cond = expression(0);
			State = 2027;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THEN) {
				{
				State = 2026; _localctx.Then = Match(THEN);
				}
			}

			State = 2029; _localctx.end = eos();
			State = 2030; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public IToken W;
		public ExpressionContext whenexpr;
		public VaridentifierContext Id;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2047;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 2032; _localctx.Key = Match(CASE);
				State = 2033; _localctx.Const = expression(0);
				State = 2036;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2034; _localctx.W = Match(WHEN);
					State = 2035; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 2:
				{
				State = 2038; _localctx.Key = Match(CASE);
				State = 2039; _localctx.Id = varidentifier();
				State = 2040; Match(AS);
				State = 2041; _localctx.DataType = datatype();
				State = 2044;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2042; _localctx.W = Match(WHEN);
					State = 2043; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 3:
				{
				State = 2046; _localctx.Key = Match(OTHERWISE);
				}
				break;
			}
			State = 2049; _localctx.end = eos();
			State = 2050; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken W;
		public ExpressionContext whenexpr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 2052; Match(TO);
				}
				break;
			}
			State = 2056;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,299,_ctx) ) {
			case 1:
				{
				State = 2055; _localctx.Id = varidentifier();
				}
				break;
			}
			State = 2060;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2058; Match(AS);
				State = 2059; _localctx.Type = datatype();
				}
			}

			State = 2064;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 2062; _localctx.W = Match(WHEN);
				State = 2063; _localctx.whenexpr = expression(0);
				}
			}

			State = 2066; _localctx.end = eos();
			State = 2067; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2071;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2069; Match(USING);
				State = 2070; _localctx.Id = varidentifier();
				}
			}

			State = 2073; _localctx.end = eos();
			State = 2074; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_variableDeclaration);
		int _la;
		try {
			State = 2104;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2081;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 2077;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2076; Match(LOCAL);
						}
					}

					State = 2079; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 2080; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2083; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2088;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2084; Match(COMMA);
					State = 2085; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2090;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2091; Match(LOCAL);
				State = 2092; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2097;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2093; Match(COMMA);
					State = 2094; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2099;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2102;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2100; Match(AS);
					State = 2101; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2106; _localctx.Id = varidentifier();
			State = 2107; _localctx.Op = assignoperator();
			State = 2108; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDesignationContext : LocaldeclContext {
		public DesignationExprContext Designation;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public DesignationExprContext designationExpr() {
			return GetRuleContext<DesignationExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public VarLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDesignation(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public IToken Using;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}
	public partial class TypeLocalDesignationContext : LocaldeclContext {
		public DesignationTypeExprContext DesignationType;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public DesignationTypeExprContext designationTypeExpr() {
			return GetRuleContext<DesignationTypeExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public TypeLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_localdecl);
		int _la;
		try {
			State = 2243;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2110; Match(LOCAL);
				State = 2112;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,309,_ctx) ) {
				case 1:
					{
					State = 2111; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
					break;
				}
				State = 2114; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2119;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2115; Match(COMMA);
					State = 2116; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2121;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2122; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2124; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2125; Match(LOCAL);
				State = 2126; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2131;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2127; Match(COMMA);
					State = 2128; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2133;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2134; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2136;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 2137; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2138; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2143;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2139; Match(COMMA);
					State = 2140; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2145;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2146; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2149;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2148; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2151; Match(VAR);
				State = 2152; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2153; Match(COMMA);
					State = 2154; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2159;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2160; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2162; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2164;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2163; Match(LOCAL);
					}
				}

				State = 2166; Match(IMPLIED);
				State = 2167; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2168; Match(COMMA);
					State = 2169; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2174;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2175; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2177; Match(LOCAL);
				State = 2179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2178; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2181; Match(IMPLIED);
				State = 2182; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2187;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2183; Match(COMMA);
					State = 2184; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2189;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2190; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 7:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2192; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2194;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2193; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2196; Match(VAR);
				State = 2197; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2202;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2198; Match(COMMA);
					State = 2199; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2204;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2205; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2207; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2209;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2208; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2212;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2211; Match(LOCAL);
					}
				}

				State = 2214; Match(IMPLIED);
				State = 2215; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2220;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2216; Match(COMMA);
					State = 2217; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2222;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2223; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 9:
				_localctx = new VarLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2230;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case VAR:
					{
					State = 2225; Match(VAR);
					}
					break;
				case LOCAL:
				case IMPLIED:
					{
					State = 2227;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2226; Match(LOCAL);
						}
					}

					State = 2229; Match(IMPLIED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2232; ((VarLocalDesignationContext)_localctx).Designation = designationExpr();
				State = 2233; ((VarLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2234; ((VarLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2235; ((VarLocalDesignationContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new TypeLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2237; Match(LOCAL);
				State = 2238; ((TypeLocalDesignationContext)_localctx).DesignationType = designationTypeExpr();
				State = 2239; ((TypeLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2240; ((TypeLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2241; ((TypeLocalDesignationContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public VaridentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_localvar);
		int _la;
		try {
			State = 2287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2246;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					State = 2245; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 2249;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,328,_ctx) ) {
				case 1:
					{
					State = 2248; _localctx.Dim = Match(DIM);
					}
					break;
				}
				State = 2251; _localctx.Id = varidentifier();
				State = 2256;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 2252; Match(LBRKT);
					State = 2253; _localctx.ArraySub = arraysub();
					State = 2254; Match(RBRKT);
					}
				}

				State = 2261;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2258; _localctx.Op = assignoperator();
					State = 2259; _localctx.Expression = expression(0);
					}
				}

				State = 2268;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2263;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2264; _localctx.DataType = datatype();
					State = 2266;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2265; foxclasslib();
						}
					}

					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2270;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 2271; _localctx.Id = varidentifier();
				State = 2272; Match(LPAREN);
				State = 2273; _localctx.ArraySub = arraysub();
				State = 2274; Match(RPAREN);
				State = 2278;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2275; _localctx.Op = assignoperator();
					State = 2276; _localctx.Expression = expression(0);
					}
				}

				State = 2285;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2280;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2281; _localctx.DataType = datatype();
					State = 2283;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2282; foxclasslib();
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_impliedvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2290;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,337,_ctx) ) {
			case 1:
				{
				State = 2289; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2292; _localctx.Id = varidentifier();
			State = 2293; _localctx.Op = assignoperator();
			State = 2294; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2296; Match(FIELD);
			State = 2297; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2302;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2298; Match(COMMA);
				State = 2299; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2304;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2307;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2305; Match(IN);
				State = 2306; _localctx.Alias = identifierName();
				}
			}

			State = 2309; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public MemvarContext _memvar;
		public IList<MemvarContext> _Vars = new List<MemvarContext>();
		public EosContext end;
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public MemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public MemvardeclContext memvardecl() {
		MemvardeclContext _localctx = new MemvardeclContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_memvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2311;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2312; _localctx._memvar = memvar(_localctx.T);
			_localctx._Vars.Add(_localctx._memvar);
			State = 2317;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2313; Match(COMMA);
				State = 2314; _localctx._memvar = memvar(_localctx.T);
				_localctx._Vars.Add(_localctx._memvar);
				}
				}
				State = 2319;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2320; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_memvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvar(this);
		}
	}

	[RuleVersion(0)]
	public MemvarContext memvar(IToken T) {
		MemvarContext _localctx = new MemvarContext(_ctx, State, T);
		EnterRule(_localctx, 180, RULE_memvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2323;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
			case 1:
				{
				State = 2322; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2325; _localctx.Id = varidentifierName();
			State = 2330;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2326; Match(LBRKT);
				State = 2327; _localctx.ArraySub = arraysub();
				State = 2328; Match(RBRKT);
				}
			}

			State = 2335;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2332; _localctx.Op = assignoperator();
				State = 2333; _localctx.Expression = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public EosContext end;
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxmemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmemvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvardeclContext foxmemvardecl() {
		FoxmemvardeclContext _localctx = new FoxmemvardeclContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_foxmemvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2337;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2338; _localctx._foxmemvar = foxmemvar(_localctx.T);
			_localctx._FoxVars.Add(_localctx._foxmemvar);
			State = 2343;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2339; Match(COMMA);
				State = 2340; _localctx._foxmemvar = foxmemvar(_localctx.T);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				}
				}
				State = 2345;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2346; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxdimvarContext _foxdimvar;
		public IList<FoxdimvarContext> _DimVars = new List<FoxdimvarContext>();
		public EosContext end;
		public FoxdimvarContext[] foxdimvar() {
			return GetRuleContexts<FoxdimvarContext>();
		}
		public FoxdimvarContext foxdimvar(int i) {
			return GetRuleContext<FoxdimvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public FoxdimvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdimvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvardeclContext foxdimvardecl() {
		FoxdimvardeclContext _localctx = new FoxdimvardeclContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_foxdimvardecl);
		int _la;
		try {
			State = 2385;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECLARE:
			case DIMENSION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2348;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECLARE || _la==DIMENSION) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2349; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2354;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2350; Match(COMMA);
					State = 2351; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2356;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2357; _localctx.end = eos();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2359; _localctx.T = Match(PUBLIC);
				State = 2361;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					State = 2360; Match(ARRAY);
					}
					break;
				}
				State = 2363; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2368;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2364; Match(COMMA);
					State = 2365; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2370;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2371; _localctx.end = eos();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2373; _localctx.T = Match(LOCAL);
				State = 2374; Match(ARRAY);
				State = 2375; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2380;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2376; Match(COMMA);
					State = 2377; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2382;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2383; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparametersContext : XSharpParserRuleContext {
		public IToken T;
		public FoxlparameterContext _foxlparameter;
		public IList<FoxlparameterContext> _LParameters = new List<FoxlparameterContext>();
		public EosContext end;
		public ITerminalNode LPARAMETERS() { return GetToken(XSharpParser.LPARAMETERS, 0); }
		public FoxlparameterContext[] foxlparameter() {
			return GetRuleContexts<FoxlparameterContext>();
		}
		public FoxlparameterContext foxlparameter(int i) {
			return GetRuleContext<FoxlparameterContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxlparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxlparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameters(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparametersContext foxlparameters() {
		FoxlparametersContext _localctx = new FoxlparametersContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_foxlparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387; _localctx.T = Match(LPARAMETERS);
			State = 2388; _localctx._foxlparameter = foxlparameter(_localctx.T);
			_localctx._LParameters.Add(_localctx._foxlparameter);
			State = 2393;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2389; Match(COMMA);
				State = 2390; _localctx._foxlparameter = foxlparameter(_localctx.T);
				_localctx._LParameters.Add(_localctx._foxlparameter);
				}
				}
				State = 2395;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2396; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Dims = new List<ExpressionContext>();
		public FoxtypedeclContext XT;
		public ExpressionContext Expr;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdimvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxdimvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxdimvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvarContext foxdimvar(IToken T) {
		FoxdimvarContext _localctx = new FoxdimvarContext(_ctx, State, T);
		EnterRule(_localctx, 188, RULE_foxdimvar);
		int _la;
		try {
			State = 2457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2399;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					State = 2398; _localctx.Amp = Match(AMP);
					}
					break;
				}
				State = 2401; _localctx.Id = varidentifierName();
				State = 2424;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2402; Match(LBRKT);
					State = 2403; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2408;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2404; Match(COMMA);
						State = 2405; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2410;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2411; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2413; Match(LPAREN);
					State = 2414; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2419;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2415; Match(COMMA);
						State = 2416; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2421;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2422; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2427;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2426; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2429; _localctx.Expr = expression(0);
				State = 2452;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2430; Match(LBRKT);
					State = 2431; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2436;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2432; Match(COMMA);
						State = 2433; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2438;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2439; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2441; Match(LPAREN);
					State = 2442; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2447;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2443; Match(COMMA);
						State = 2444; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2449;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2450; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2455;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2454; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclasslibContext : XSharpParserRuleContext {
		public IToken Of;
		public IdentifierNameContext ClassLib;
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FoxclasslibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclasslib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclasslib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclasslib(this);
		}
	}

	[RuleVersion(0)]
	public FoxclasslibContext foxclasslib() {
		FoxclasslibContext _localctx = new FoxclasslibContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_foxclasslib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2459; _localctx.Of = Match(OF);
			State = 2460; _localctx.ClassLib = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparameterContext : XSharpParserRuleContext {
		public IToken T;
		public VaridentifierNameContext Name;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxlparameterContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxlparameterContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxlparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameter(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparameterContext foxlparameter(IToken T) {
		FoxlparameterContext _localctx = new FoxlparameterContext(_ctx, State, T);
		EnterRule(_localctx, 192, RULE_foxlparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2462; _localctx.Name = varidentifierName();
			State = 2464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2463; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxtypedeclContext : XSharpParserRuleContext {
		public IToken As;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public FoxtypedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxtypedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtypedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtypedecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxtypedeclContext foxtypedecl() {
		FoxtypedeclContext _localctx = new FoxtypedeclContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_foxtypedecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2466; _localctx.As = Match(AS);
			State = 2467; _localctx.Type = datatype();
			State = 2469;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 2468; foxclasslib();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxmemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxmemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxmemvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvarContext foxmemvar(IToken T) {
		FoxmemvarContext _localctx = new FoxmemvarContext(_ctx, State, T);
		EnterRule(_localctx, 196, RULE_foxmemvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2472;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,363,_ctx) ) {
			case 1:
				{
				State = 2471; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2474; _localctx.Id = varidentifierName();
			State = 2478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2475; _localctx.Op = assignoperator();
				State = 2476; _localctx.Expression = expression(0);
				}
			}

			State = 2481;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2480; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocContext : XSharpParserRuleContext {
		public LocalfuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LocalfuncprocModifiersContext localfuncprocModifiers() {
			return GetRuleContext<LocalfuncprocModifiersContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public LocalfuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncproc(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocContext localfuncproc() {
		LocalfuncprocContext _localctx = new LocalfuncprocContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_localfuncproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC || _la==UNSAFE) {
				{
				State = 2483; _localctx.Modifiers = localfuncprocModifiers();
				}
			}

			State = 2486; Match(LOCAL);
			State = 2487; _localctx.T = funcproctype();
			State = 2488; _localctx.Sig = signature();
			State = 2489; _localctx.end = eos();
			State = 2490; _localctx.StmtBlk = statementBlock();
			State = 2494;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDFUNC:
			case ENDPROC:
				{
				State = 2491;
				_localctx.T1 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
					_localctx.T1 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case END:
				{
				{
				State = 2492; Match(END);
				State = 2493; _localctx.T2 = funcproctype();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2496; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _UNSAFE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASYNC;
		public IToken _tset6647;
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public LocalfuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocModifiersContext localfuncprocModifiers() {
		LocalfuncprocModifiersContext _localctx = new LocalfuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_localfuncprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2499;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2498;
				_localctx._tset6647 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
					_localctx._tset6647 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset6647);
				}
				}
				State = 2501;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASYNC || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignoperatorContext : XSharpParserRuleContext {
		public IToken Op;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public AssignoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignoperatorContext assignoperator() {
		AssignoperatorContext _localctx = new AssignoperatorContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_assignoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2503;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class AccessMemberWithContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberWithContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberWith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberWith(this);
		}
	}
	public partial class XFunctionExpressionContext : ExpressionContext {
		public XbaseFuncContext XFunc;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public XbaseFuncContext xbaseFunc() {
			return GetRuleContext<XbaseFuncContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public XFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXFunctionExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_QQMARK() { return GetToken(XSharpParser.ASSIGN_QQMARK, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class StackAllocExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StackAllocExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStackAllocExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStackAllocExpression(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ITerminalNode DOTDOT() { return GetToken(XSharpParser.DOTDOT, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public IToken Not;
		public IToken Null;
		public DatatypeContext Type;
		public VaridentifierContext Id;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2542;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2506;
				((AccessMemberContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLON - 292)) | (1L << (DOT - 292)) | (1L << (COLONCOLON - 292)))) != 0)) ) {
					((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2507; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new AccessMemberLateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2508;
				((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLON - 292)) | (1L << (DOT - 292)) | (1L << (COLONCOLON - 292)))) != 0)) ) {
					((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2509; Match(AMP);
				State = 2515;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					State = 2510; ((AccessMemberLateContext)_localctx).Name = identifierName();
					}
					break;

				case 2:
					{
					State = 2511; Match(LPAREN);
					State = 2512; ((AccessMemberLateContext)_localctx).Right = expression(0);
					State = 2513; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2517; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2518; Match(LPAREN);
				State = 2519; ((XFunctionExpressionContext)_localctx).ArgList = argumentList();
				State = 2520; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2522;
				if (!(IsTypeCastAllowed() )) throw new FailedPredicateException(this, "IsTypeCastAllowed() ");
				State = 2523; Match(LPAREN);
				State = 2524; ((TypeCastContext)_localctx).Type = datatype();
				State = 2525; Match(RPAREN);
				State = 2526; ((TypeCastContext)_localctx).Expr = expression(26);
				}
				break;

			case 5:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2528; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2529; ((AwaitExpressionContext)_localctx).Expr = expression(24);
				}
				break;

			case 6:
				{
				_localctx = new StackAllocExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2530;
				if (!(InputStream.La(2) != LPAREN )) throw new FailedPredicateException(this, "InputStream.La(2) != LPAREN ");
				State = 2531; ((StackAllocExpressionContext)_localctx).Op = Match(STACKALLOC);
				State = 2532; ((StackAllocExpressionContext)_localctx).Expr = expression(23);
				}
				break;

			case 7:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2533;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (INC - 245)) | (1L << (DEC - 245)) | (1L << (PLUS - 245)) | (1L << (MINUS - 245)) | (1L << (EXP - 245)) | (1L << (TILDE - 245)) | (1L << (ADDROF - 245)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2534; ((PrefixExpressionContext)_localctx).Expr = expression(22);
				}
				break;

			case 8:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2535;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (NOT - 260)) | (1L << (LOGIC_NOT - 260)) | (1L << (FOX_NOT - 260)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2536; ((PrefixExpressionContext)_localctx).Expr = expression(9);
				}
				break;

			case 9:
				{
				_localctx = new BinaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2537; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
				State = 2539;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
				case 1:
					{
					State = 2538; ((BinaryExpressionContext)_localctx).Right = expression(0);
					}
					break;
				}
				}
				break;

			case 10:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2541; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2647;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2645;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2544;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2545; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2546; ((BinaryExpressionContext)_localctx).Right = expression(19);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2547;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2548;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (DIV - 249)) | (1L << (MOD - 249)) | (1L << (MULT - 249)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2549; ((BinaryExpressionContext)_localctx).Right = expression(18);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2550;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2551;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2552; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2553;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2554; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2555; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2556;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2557; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2558; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2559; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2560;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2561;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LT - 236)) | (1L << (LTE - 236)) | (1L << (GT - 236)) | (1L << (GTE - 236)) | (1L << (EQ - 236)) | (1L << (EEQ - 236)) | (1L << (SUBSTR - 236)) | (1L << (NEQ - 236)) | (1L << (NEQ2 - 236)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2562; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2563;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2564; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2565; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2566;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2567; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2568; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2569;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2570; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2571; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2572;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2573;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (AND - 258)) | (1L << (LOGIC_AND - 258)) | (1L << (FOX_AND - 258)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2574; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2575;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2576;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LOGIC_XOR || _la==FOX_XOR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2577; ((BinaryExpressionContext)_localctx).Right = expression(8);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2578;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2579;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (OR - 259)) | (1L << (LOGIC_OR - 259)) | (1L << (FOX_OR - 259)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2580; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2581;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2582;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DEFAULT || _la==QQMARK) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2583; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2584;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2585;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (ASSIGN_OP - 265)) | (1L << (ASSIGN_ADD - 265)) | (1L << (ASSIGN_SUB - 265)) | (1L << (ASSIGN_EXP - 265)) | (1L << (ASSIGN_MUL - 265)) | (1L << (ASSIGN_DIV - 265)) | (1L << (ASSIGN_MOD - 265)) | (1L << (ASSIGN_BITAND - 265)) | (1L << (ASSIGN_BITOR - 265)) | (1L << (ASSIGN_LSHIFT - 265)) | (1L << (ASSIGN_RSHIFT - 265)) | (1L << (ASSIGN_XOR - 265)) | (1L << (ASSIGN_QQMARK - 265)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2586; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2587;
						if (!(Precpred(_ctx, 35))) throw new FailedPredicateException(this, "Precpred(_ctx, 35)");
						State = 2588;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2589; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberWithContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberWithContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2590;
						if (!(Precpred(_ctx, 33))) throw new FailedPredicateException(this, "Precpred(_ctx, 33)");
						State = 2591;
						((AccessMemberWithContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberWithContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2592; Match(LPAREN);
						State = 2593; ((AccessMemberWithContext)_localctx).Right = expression(0);
						State = 2594; Match(RPAREN);
						}
						break;

					case 17:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2596;
						if (!(Precpred(_ctx, 32))) throw new FailedPredicateException(this, "Precpred(_ctx, 32)");
						State = 2597;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2598; Match(AMP);
						State = 2604;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,372,_ctx) ) {
						case 1:
							{
							State = 2599; ((AccessMemberLateContext)_localctx).Name = identifierName();
							}
							break;

						case 2:
							{
							State = 2600; Match(LPAREN);
							State = 2601; ((AccessMemberLateContext)_localctx).Right = expression(0);
							State = 2602; Match(RPAREN);
							}
							break;
						}
						}
						break;

					case 18:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2606;
						if (!(Precpred(_ctx, 30))) throw new FailedPredicateException(this, "Precpred(_ctx, 30)");
						State = 2607; Match(LPAREN);
						State = 2608; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2609; Match(RPAREN);
						}
						break;

					case 19:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2611;
						if (!(Precpred(_ctx, 28))) throw new FailedPredicateException(this, "Precpred(_ctx, 28)");
						State = 2612; Match(LBRKT);
						State = 2613; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2614; Match(RBRKT);
						}
						break;

					case 20:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2616;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2617; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2618; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 21:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2619;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 2620;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 22:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2621;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2622; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2624;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==FOX_NOT) {
							{
							State = 2623; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
						}

						State = 2626; ((TypeCheckExpressionContext)_localctx).Null = Match(NULL);
						}
						break;

					case 23:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2627;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2628; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2630;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
						case 1:
							{
							State = 2629; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
							break;
						}
						State = 2632; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						State = 2635;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
						case 1:
							{
							State = 2633; Match(VAR);
							State = 2634; ((TypeCheckExpressionContext)_localctx).Id = varidentifier();
							}
							break;
						}
						}
						break;

					case 24:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2637;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2638; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2639; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;

					case 25:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2640;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2641; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
						State = 2643;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
						case 1:
							{
							State = 2642; ((BinaryExpressionContext)_localctx).Right = expression(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2649;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,378,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class TupleExpressionContext : PrimaryContext {
		public TupleExprContext TupleExpr;
		public TupleExprContext tupleExpr() {
			return GetRuleContext<TupleExprContext>(0);
		}
		public TupleExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedExpressionContext : PrimaryContext {
		public AliasExpressionContext Expr;
		public AliasExpressionContext aliasExpression() {
			return GetRuleContext<AliasExpressionContext>(0);
		}
		public AliasedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpression(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ArgumentListContext ArgList;
		public ObjectOrCollectioninitializerContext Init;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public IToken Key;
		public DatatypeContext Type;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class ParserLiteralExpressionContext : PrimaryContext {
		public ParserLiteralValueContext Literal;
		public ParserLiteralValueContext parserLiteralValue() {
			return GetRuleContext<ParserLiteralValueContext>(0);
		}
		public ParserLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_primary);
		int _la;
		try {
			State = 2792;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2650; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2651; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2652; ((DefaultExpressionContext)_localctx).Key = Match(NULL);
				State = 2653; Match(LPAREN);
				State = 2655;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 2654; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2657; Match(RPAREN);
				}
				break;

			case 4:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2658; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 5:
				_localctx = new ParserLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2659; ((ParserLiteralExpressionContext)_localctx).Literal = parserLiteralValue();
				}
				break;

			case 6:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2660; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 7:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2661; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 8:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2662; ((TupleExpressionContext)_localctx).TupleExpr = tupleExpr();
				}
				break;

			case 9:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2663; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 10:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2664; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 11:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2665; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 12:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2666;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2667; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2668; Match(LCURLY);
				State = 2669; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2670; Match(COMMA);
				State = 2671; Match(ADDROF);
				State = 2672; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2673; Match(LPAREN);
				State = 2674; Match(RPAREN);
				State = 2675; Match(RCURLY);
				}
				break;

			case 13:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2677;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2678; ((CtorCallContext)_localctx).Type = datatype();
				State = 2679; Match(LCURLY);
				State = 2680; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2681; Match(RCURLY);
				State = 2683;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 2682; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2685;
				((CheckedExpressionContext)_localctx).ch = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CHECKED || _la==UNCHECKED) ) {
					((CheckedExpressionContext)_localctx).ch = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2686; Match(LPAREN);
				State = 2687; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				State = 2688; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2690; Match(TYPEOF);
				State = 2691; Match(LPAREN);
				State = 2692; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2693; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2695; Match(SIZEOF);
				State = 2696; Match(LPAREN);
				State = 2697; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2698; Match(RPAREN);
				}
				break;

			case 17:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2700; ((DefaultExpressionContext)_localctx).Key = Match(DEFAULT);
				State = 2701; Match(LPAREN);
				State = 2703;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,381,_ctx) ) {
				case 1:
					{
					State = 2702; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2705; Match(RPAREN);
				}
				break;

			case 18:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2706; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 19:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2707;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2708; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2709; Match(LPAREN);
				State = 2710; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2711; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2713;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2714; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2715; Match(LPAREN);
				State = 2716; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2717; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2719;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2720; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2721; Match(LPAREN);
				State = 2722; Match(CAST);
				State = 2723; Match(COMMA);
				State = 2724; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2725; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2727;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2728; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2729; Match(LPAREN);
				State = 2730; Match(CAST);
				State = 2731; Match(COMMA);
				State = 2732; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2733; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2735; Match(CASTCLASS);
				State = 2736; Match(LPAREN);
				State = 2737; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2738; Match(COMMA);
				State = 2739; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2740; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2742; Match(CASTCLASS);
				State = 2743; Match(LPAREN);
				State = 2744; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2745; Match(COMMA);
				State = 2746; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2747; Match(RPAREN);
				}
				break;

			case 25:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2749; Match(PTR);
				State = 2750; Match(LPAREN);
				State = 2751; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2752; Match(COMMA);
				State = 2753; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2754; Match(RPAREN);
				}
				break;

			case 26:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2756; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 27:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2757; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 28:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2758; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 29:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2759;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (BIT_NOT - 261)) | (1L << (BIT_AND - 261)) | (1L << (BIT_OR - 261)) | (1L << (BIT_XOR - 261)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2760; Match(LPAREN);
				State = 2761; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2766;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2762; Match(COMMA);
					State = 2763; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2768;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2769; Match(RPAREN);
				}
				break;

			case 30:
				_localctx = new AliasedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2771;
				if (!(ExpectToken(ALIAS))) throw new FailedPredicateException(this, "ExpectToken(ALIAS)");
				State = 2772; ((AliasedExpressionContext)_localctx).Expr = aliasExpression();
				}
				break;

			case 31:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2773; Match(AMP);
				State = 2774; Match(LPAREN);
				State = 2775; ((MacroContext)_localctx).Expr = expression(0);
				State = 2776; Match(RPAREN);
				}
				break;

			case 32:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2778; Match(AMP);
				State = 2779; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 33:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2780; Match(LPAREN);
				State = 2781; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2786;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2782; Match(COMMA);
					State = 2783; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2788;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2789; Match(RPAREN);
				}
				break;

			case 34:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2791; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 208;
		EnterRecursionRule(_localctx, 208, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2795;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2796; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2797; Match(LBRKT);
				State = 2798; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2799; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2821;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,387,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2819;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2803;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2804; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2805; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2806;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2807;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2808; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2809;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2810; Match(LPAREN);
						State = 2811; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2812; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2814;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2815; Match(LBRKT);
						State = 2816; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2817; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2823;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,387,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasExpressionContext : XSharpParserRuleContext {
		public AliasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExpression; } }
	 
		public AliasExpressionContext() { }
		public virtual void CopyFrom(AliasExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AliasedMemvarContext : AliasExpressionContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class AliasedFieldLateContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public ExpressionContext Field;
		public IdentifierContext Area;
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldLateContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class AliasedExprContext : AliasExpressionContext {
		public IdentifierContext Id;
		public ExpressionContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(XSharpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(XSharpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(XSharpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(XSharpParser.RPAREN, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AliasedExprContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class AliasedFieldContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public IdentifierContext Area;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpressionContext aliasExpression() {
		AliasExpressionContext _localctx = new AliasExpressionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_aliasExpression);
		try {
			State = 2884;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2824;
				if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
				State = 2825; Match(MEMVAR);
				State = 2826; Match(ALIAS);
				State = 2827; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 2:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2828; Match(FIELD);
				State = 2829; Match(ALIAS);
				State = 2833;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					State = 2830; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2831; Match(ALIAS);
					}
					break;
				}
				State = 2835; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 3:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2836;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2837; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2838; Match(ALIAS);
				State = 2839; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 4:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2841;
				if (!(InputStream.La(6) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(6) != LPAREN");
				State = 2842; Match(LPAREN);
				State = 2843; ((AliasedFieldContext)_localctx).Area = identifier();
				State = 2844; Match(RPAREN);
				State = 2845; Match(ALIAS);
				State = 2846; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 5:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2848; ((AliasedFieldLateContext)_localctx).Alias = identifier();
				State = 2849; Match(ALIAS);
				State = 2850; Match(AMP);
				State = 2851; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 6:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2853; Match(FIELD);
				State = 2854; Match(ALIAS);
				State = 2858;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					State = 2855; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2856; Match(ALIAS);
					}
					break;
				}
				State = 2860; Match(AMP);
				State = 2861; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 7:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2862; Match(LPAREN);
				State = 2863; ((AliasedFieldLateContext)_localctx).Area = identifier();
				State = 2864; Match(RPAREN);
				State = 2865; Match(ALIAS);
				State = 2866; Match(AMP);
				State = 2867; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 8:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2874;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					State = 2869; ((AliasedExprContext)_localctx).Id = identifier();
					}
					break;

				case 2:
					{
					State = 2870; Match(LPAREN);
					State = 2871; ((AliasedExprContext)_localctx).Alias = expression(0);
					State = 2872; Match(RPAREN);
					}
					break;
				}
				State = 2876; Match(ALIAS);
				State = 2882;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
				case 1:
					{
					{
					State = 2877; Match(LPAREN);
					State = 2878; ((AliasedExprContext)_localctx).Expr = expression(0);
					State = 2879; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					State = 2881; ((AliasedExprContext)_localctx).Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_objectOrCollectioninitializer);
		try {
			State = 2888;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2886; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2887; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2890; Match(LCURLY);
			State = 2899;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				{
				State = 2891; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2896;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2892; Match(COMMA);
					State = 2893; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2898;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 2901; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public InitializervalueContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2903; _localctx.Name = identifierName();
			State = 2904; _localctx.Op = assignoperator();
			State = 2905; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_initializervalue);
		try {
			State = 2909;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,396,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2907; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2908; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexInitExprContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ComplexInitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexInitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterComplexInitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitComplexInitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComplexInitExprContext complexInitExpr() {
		ComplexInitExprContext _localctx = new ComplexInitExprContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_complexInitExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911; Match(LCURLY);
			State = 2912; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2917;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2913; Match(COMMA);
				State = 2914; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2919;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2920; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerMemberContext : XSharpParserRuleContext {
		public ComplexInitExprContext Init;
		public ExpressionContext Expr;
		public ComplexInitExprContext complexInitExpr() {
			return GetRuleContext<ComplexInitExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializerMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializerMember(this);
		}
	}

	[RuleVersion(0)]
	public InitializerMemberContext initializerMember() {
		InitializerMemberContext _localctx = new InitializerMemberContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_initializerMember);
		try {
			State = 2924;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2922; _localctx.Init = complexInitExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2923; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2926; Match(LCURLY);
			State = 2927; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2932;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2928; Match(COMMA);
				State = 2929; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2934;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2935; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2937; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 2942;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2938; Match(COMMA);
				State = 2939; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 2944;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2947; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 2952;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2948; Match(COMMA);
				State = 2949; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 2954;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public IToken Op;
		public IToken RefOut;
		public ExpressionContext Expr;
		public IToken Var;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken Null;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_namedArgument);
		int _la;
		try {
			State = 2979;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2955;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 2956; _localctx.Name = identifierName();
				State = 2957; _localctx.Op = Match(ASSIGN_OP);
				State = 2959;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 2958;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2961; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2963; _localctx.RefOut = Match(OUT);
				State = 2964; _localctx.Var = Match(VAR);
				State = 2965; _localctx.Id = varidentifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2966; _localctx.RefOut = Match(OUT);
				State = 2967; _localctx.Id = varidentifier();
				State = 2968; Match(AS);
				State = 2969; _localctx.Type = datatype();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2971; _localctx.RefOut = Match(OUT);
				State = 2972; _localctx.Null = Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 2973;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2977;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					State = 2976; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2981;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2982; Match(LPAREN);
			State = 2983; _localctx.Cond = expression(0);
			State = 2984; Match(COMMA);
			State = 2986;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2985; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 2988; Match(COMMA);
			State = 2990;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				{
				State = 2989; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 2992; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2995; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 2996; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 3004;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 2998;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2999; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 3000; Match(DOT);
					}
					} 
				}
				State = 3006;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 238;
		EnterRecursionRule(_localctx, 238, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 3008; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 3015;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,409,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 3010;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 3011; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 3012; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 3017;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,409,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_aliasedName);
		try {
			State = 3026;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3018; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 3019; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3020; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3021; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 3022; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3023; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3025; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028; _localctx.Id = identifier();
			State = 3030;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,411,_ctx) ) {
			case 1:
				{
				State = 3029; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3032; Match(LT);
			State = 3033; _localctx._datatype = datatype();
			_localctx._GenericArgs.Add(_localctx._datatype);
			State = 3038;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3034; Match(COMMA);
				State = 3035; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				}
				}
				State = 3040;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3041; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3043; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifier(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierContext varidentifier() {
		VaridentifierContext _localctx = new VaridentifierContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_varidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				State = 3045; Match(FOX_M);
				State = 3046; Match(DOT);
				}
				break;
			}
			State = 3049; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierNameContext : XSharpParserRuleContext {
		public IdentifierNameContext Id;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifierName(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierNameContext varidentifierName() {
		VaridentifierNameContext _localctx = new VaridentifierNameContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_varidentifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,414,_ctx) ) {
			case 1:
				{
				State = 3051; Match(FOX_M);
				State = 3052; Match(DOT);
				}
				break;
			}
			State = 3055; _localctx.Id = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class TupleDatatypeContext : DatatypeContext {
		public TupleTypeContext TupleType;
		public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public TupleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_datatype);
		try {
			int _alt;
			State = 3074;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3057; Match(ARRAY);
				State = 3058; Match(OF);
				State = 3059; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3060; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 3061; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3063; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 3065;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3064; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3067;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,415,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3069; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3070; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 3071; Match(QMARK);
				}
				break;

			case 6:
				_localctx = new TupleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3073; ((TupleDatatypeContext)_localctx).TupleType = tupleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_arrayRank);
		int _la;
		try {
			State = 3085;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3076; Match(LBRKT);
				State = 3080;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3077; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 3082;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3083; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3084; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_typeName);
		try {
			State = 3090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3087; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3088; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3089; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_usualTypeName);
		try {
			State = 3094;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3092; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
			case CURRENCY:
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3093; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_literalArray);
		int _la;
		try {
			State = 3121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3096; Match(LT);
					State = 3097; _localctx.Type = datatype();
					State = 3098; Match(GT);
					}
				}

				State = 3102; Match(LCURLY);
				State = 3103; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3104; Match(LT);
					State = 3105; _localctx.Type = datatype();
					State = 3106; Match(GT);
					}
				}

				State = 3110; Match(LCURLY);
				State = 3111; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 3116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3112; Match(COMMA);
					State = 3113; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 3118;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3119; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3124;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				State = 3123; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3126; Match(CLASS);
			State = 3127; Match(LCURLY);
			State = 3136;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				{
				State = 3128; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 3133;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3129; Match(COMMA);
					State = 3130; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 3135;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3138; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_anonMember);
		try {
			State = 3145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3140; _localctx.Name = identifierName();
				State = 3141; _localctx.Op = assignoperator();
				State = 3142; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3144; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : XSharpParserRuleContext {
		public TupleTypeElementContext _tupleTypeElement;
		public IList<TupleTypeElementContext> _Elements = new List<TupleTypeElementContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public TupleTypeElementContext[] tupleTypeElement() {
			return GetRuleContexts<TupleTypeElementContext>();
		}
		public TupleTypeElementContext tupleTypeElement(int i) {
			return GetRuleContext<TupleTypeElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3148;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TUPLE) {
				{
				State = 3147; Match(TUPLE);
				}
			}

			State = 3150; Match(LPAREN);
			State = 3159;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 3151; _localctx._tupleTypeElement = tupleTypeElement();
				_localctx._Elements.Add(_localctx._tupleTypeElement);
				State = 3156;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3152; Match(COMMA);
					State = 3153; _localctx._tupleTypeElement = tupleTypeElement();
					_localctx._Elements.Add(_localctx._tupleTypeElement);
					}
					}
					State = 3158;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3161; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeElementContext : XSharpParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TupleTypeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleTypeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleTypeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleTypeElement(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeElementContext tupleTypeElement() {
		TupleTypeElementContext _localctx = new TupleTypeElementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_tupleTypeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3166;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				State = 3163; identifierName();
				State = 3164; Match(AS);
				}
				break;
			}
			State = 3168; datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprContext : XSharpParserRuleContext {
		public TupleExprArgumentContext _tupleExprArgument;
		public IList<TupleExprArgumentContext> _Args = new List<TupleExprArgumentContext>();
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public TupleExprArgumentContext[] tupleExprArgument() {
			return GetRuleContexts<TupleExprArgumentContext>();
		}
		public TupleExprArgumentContext tupleExprArgument(int i) {
			return GetRuleContext<TupleExprArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprContext tupleExpr() {
		TupleExprContext _localctx = new TupleExprContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_tupleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3170; Match(TUPLE);
			State = 3171; Match(LCURLY);
			State = 3180;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
			case 1:
				{
				State = 3172; _localctx._tupleExprArgument = tupleExprArgument();
				_localctx._Args.Add(_localctx._tupleExprArgument);
				State = 3177;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3173; Match(COMMA);
					State = 3174; _localctx._tupleExprArgument = tupleExprArgument();
					_localctx._Args.Add(_localctx._tupleExprArgument);
					}
					}
					State = 3179;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3182; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleExprArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExprArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExprArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExprArgument(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprArgumentContext tupleExprArgument() {
		TupleExprArgumentContext _localctx = new TupleExprArgumentContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_tupleExprArgument);
		try {
			State = 3189;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3184; _localctx.Name = identifierName();
				State = 3185; _localctx.Op = assignoperator();
				State = 3186; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3188; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationExprContext : XSharpParserRuleContext {
		public VaridentifierContext _varidentifier;
		public IList<VaridentifierContext> _Ids = new List<VaridentifierContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public VaridentifierContext[] varidentifier() {
			return GetRuleContexts<VaridentifierContext>();
		}
		public VaridentifierContext varidentifier(int i) {
			return GetRuleContext<VaridentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationExprContext designationExpr() {
		DesignationExprContext _localctx = new DesignationExprContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_designationExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3191; Match(LPAREN);
			State = 3192; _localctx._varidentifier = varidentifier();
			_localctx._Ids.Add(_localctx._varidentifier);
			State = 3197;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3193; Match(COMMA);
				State = 3194; _localctx._varidentifier = varidentifier();
				_localctx._Ids.Add(_localctx._varidentifier);
				}
				}
				State = 3199;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3200; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationTypeExprContext : XSharpParserRuleContext {
		public LocalDesignationContext _localDesignation;
		public IList<LocalDesignationContext> _Locals = new List<LocalDesignationContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalDesignationContext[] localDesignation() {
			return GetRuleContexts<LocalDesignationContext>();
		}
		public LocalDesignationContext localDesignation(int i) {
			return GetRuleContext<LocalDesignationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationTypeExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationTypeExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationTypeExprContext designationTypeExpr() {
		DesignationTypeExprContext _localctx = new DesignationTypeExprContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_designationTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3202; Match(LPAREN);
			State = 3203; _localctx._localDesignation = localDesignation();
			_localctx._Locals.Add(_localctx._localDesignation);
			State = 3208;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3204; Match(COMMA);
				State = 3205; _localctx._localDesignation = localDesignation();
				_localctx._Locals.Add(_localctx._localDesignation);
				}
				}
				State = 3210;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3211; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDesignationContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public LocalDesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDesignation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocalDesignationContext localDesignation() {
		LocalDesignationContext _localctx = new LocalDesignationContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_localDesignation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3213; _localctx.Id = varidentifier();
			State = 3214; Match(AS);
			State = 3215; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken lambda;
		public CodeblockCodeContext Code;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_codeblock);
		try {
			State = 3245;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3217; Match(LCURLY);
				State = 3218; _localctx.Or = Match(OR);
				State = 3220;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 3219; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3222; _localctx.Code = codeblockCode();
				State = 3223; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3225; Match(LCURLY);
				State = 3226; _localctx.P1 = Match(PIPE);
				State = 3228;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					State = 3227; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3230; _localctx.P2 = Match(PIPE);
				State = 3232;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					State = 3231; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3234; _localctx.Code = codeblockCode();
				State = 3235; Match(RCURLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3237; Match(LCURLY);
				State = 3239;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
				case 1:
					{
					State = 3238; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3241; _localctx.lambda = Match(UDCSEP);
				State = 3242; _localctx.Code = codeblockCode();
				State = 3243; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_codeblockCode);
		try {
			State = 3254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3248;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					State = 3247; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3250; eos();
				State = 3251; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3253; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_lambdaParameterList);
		try {
			State = 3258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,445,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3256; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3257; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3260; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 3265;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3261; Match(COMMA);
				State = 3262; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 3267;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3272;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3269;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
					case 1:
						{
						State = 3268; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 3271; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3274;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,448,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3276; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3279;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 3278; _localctx.Async = Match(ASYNC);
				}
			}

			State = 3281; _localctx.Delegate = Match(DELEGATE);
			State = 3287;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3282; Match(LPAREN);
				State = 3284;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
				case 1:
					{
					State = 3283; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
					break;
				}
				State = 3286; Match(RPAREN);
				}
			}

			State = 3289; Match(LCURLY);
			State = 3290; _localctx.Code = codeblockCode();
			State = 3291; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 3298;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3294; Match(COMMA);
				State = 3295; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 3300;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ParameterDeclModsContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3301; _localctx.Id = identifier();
			State = 3302; _localctx.Mod = parameterDeclMods();
			State = 3303; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3305; _localctx.From = fromClause();
			State = 3306; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3308; Match(FROM);
			State = 3309; _localctx.Id = identifier();
			State = 3312;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3310; Match(AS);
				State = 3311; _localctx.Type = typeName();
				}
			}

			State = 3314; Match(IN);
			State = 3315; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3320;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (ORDERBY - 128)) | (1L << (WHERE - 128)))) != 0)) {
				{
				{
				State = 3317; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 3322;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3323; _localctx.SorG = selectOrGroupclause();
			State = 3325;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
			case 1:
				{
				State = 3324; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public IToken W;
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IToken L;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public IToken O;
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IToken J;
		public IdentifierContext Id;
		public TypeNameContext Type;
		public IToken I;
		public ExpressionContext Expr;
		public IToken O;
		public ExpressionContext OnExpr;
		public IToken E;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_queryBodyClause);
		int _la;
		try {
			State = 3359;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3327; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3328; ((LetClauseContext)_localctx).L = Match(LET);
				State = 3329; ((LetClauseContext)_localctx).Id = identifier();
				State = 3330; ((LetClauseContext)_localctx).Op = assignoperator();
				State = 3331; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3333; ((WhereClauseContext)_localctx).W = Match(WHERE);
				State = 3334; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3335; ((JoinClauseContext)_localctx).J = Match(JOIN);
				State = 3336; ((JoinClauseContext)_localctx).Id = identifier();
				State = 3339;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3337; Match(AS);
					State = 3338; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 3341; ((JoinClauseContext)_localctx).I = Match(IN);
				State = 3342; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 3343; ((JoinClauseContext)_localctx).O = Match(ON);
				State = 3344; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 3345; ((JoinClauseContext)_localctx).E = Match(EQUALS);
				State = 3346; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 3348;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 3347; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3350; ((OrderbyClauseContext)_localctx).O = Match(ORDERBY);
				State = 3351; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 3356;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3352; Match(COMMA);
					State = 3353; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 3358;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3361; _localctx.I = Match(INTO);
			State = 3362; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3364; _localctx.Expr = expression(0);
			State = 3366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 3365;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public IToken G;
		public ExpressionContext Expr;
		public IToken B;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public IToken S;
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_selectOrGroupclause);
		try {
			State = 3375;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3368; ((SelectClauseContext)_localctx).S = Match(SELECT);
				State = 3369; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3370; ((GroupClauseContext)_localctx).G = Match(GROUP);
				State = 3371; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 3372; ((GroupClauseContext)_localctx).B = Match(BY);
				State = 3373; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377; _localctx.I = Match(INTO);
			State = 3378; _localctx.Id = identifier();
			State = 3379; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_identifier);
		try {
			State = 3389;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3381; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3382; keywordxs();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3383; keywordxpp();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3384; keywordfox();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3385;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3386; xbaseType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3387;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3388; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_identifierString);
		try {
			State = 3398;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3391; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3392; Match(STRING_CONST);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3393; keywordxs();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3394; keywordxpp();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3395; keywordfox();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3396; xbaseType();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3397; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseFuncContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public XbaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseFunc(this);
		}
	}

	[RuleVersion(0)]
	public XbaseFuncContext xbaseFunc() {
		XbaseFuncContext _localctx = new XbaseFuncContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_xbaseFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3400;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (ARRAY - 154)) | (1L << (DATE - 154)) | (1L << (DATETIME - 154)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3402;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (ARRAY - 154)) | (1L << (CODEBLOCK - 154)) | (1L << (DATE - 154)) | (1L << (FLOAT - 154)) | (1L << (PSZ - 154)) | (1L << (SYMBOL - 154)) | (1L << (USUAL - 154)) | (1L << (CURRENCY - 154)) | (1L << (BINARY - 154)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3404;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (BYTE - 155)) | (1L << (DWORD - 155)) | (1L << (INT - 155)) | (1L << (LOGIC - 155)) | (1L << (LONGINT - 155)) | (1L << (OBJECT - 155)) | (1L << (PTR - 155)) | (1L << (REAL4 - 155)) | (1L << (REAL8 - 155)) | (1L << (SHORTINT - 155)) | (1L << (STRING - 155)) | (1L << (VOID - 155)) | (1L << (WORD - 155)) | (1L << (CHAR - 155)) | (1L << (INT64 - 155)) | (1L << (UINT64 - 155)) | (1L << (DYNAMIC - 155)) | (1L << (DECIMAL - 155)) | (1L << (DATETIME - 155)) | (1L << (NINT - 155)) | (1L << (NUINT - 155)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode BINARY_CONST() { return GetToken(XSharpParser.BINARY_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode INVALID_NUMBER() { return GetToken(XSharpParser.INVALID_NUMBER, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode DATETIME_CONST() { return GetToken(XSharpParser.DATETIME_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL_FOX() { return GetToken(XSharpParser.NULL_FOX, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3406;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (NIL - 223)) | (1L << (NULL - 223)) | (1L << (NULL_ARRAY - 223)) | (1L << (NULL_CODEBLOCK - 223)) | (1L << (NULL_DATE - 223)) | (1L << (NULL_OBJECT - 223)) | (1L << (NULL_PSZ - 223)) | (1L << (NULL_PTR - 223)) | (1L << (NULL_STRING - 223)) | (1L << (NULL_SYMBOL - 223)) | (1L << (NULL_FOX - 223)))) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (FALSE_CONST - 306)) | (1L << (TRUE_CONST - 306)) | (1L << (HEX_CONST - 306)) | (1L << (BIN_CONST - 306)) | (1L << (INT_CONST - 306)) | (1L << (DATE_CONST - 306)) | (1L << (DATETIME_CONST - 306)) | (1L << (REAL_CONST - 306)) | (1L << (INVALID_NUMBER - 306)) | (1L << (SYMBOL_CONST - 306)) | (1L << (CHAR_CONST - 306)) | (1L << (STRING_CONST - 306)) | (1L << (ESCAPED_STRING_CONST - 306)) | (1L << (INTERPOLATED_STRING_CONST - 306)) | (1L << (INCOMPLETE_STRING_CONST - 306)) | (1L << (BRACKETED_STRING_CONST - 306)) | (1L << (BINARY_CONST - 306)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserLiteralValueContext : XSharpParserRuleContext {
		public IToken Year;
		public IToken Month;
		public IToken Day;
		public IToken Hours;
		public IToken Minutes;
		public IToken Seconds;
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(XSharpParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(XSharpParser.MINUS, i);
		}
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(XSharpParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(XSharpParser.COLON, i);
		}
		public ParserLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserLiteralValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public ParserLiteralValueContext parserLiteralValue() {
		ParserLiteralValueContext _localctx = new ParserLiteralValueContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_parserLiteralValue);
		try {
			int _alt;
			State = 3438;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3408; _localctx.Year = Match(INT_CONST);
				State = 3409; Match(DOT);
				State = 3410; _localctx.Month = Match(INT_CONST);
				State = 3411; Match(DOT);
				State = 3412; _localctx.Day = Match(INT_CONST);
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3413; Match(LCURLY);
				State = 3414; Match(EXP);
				State = 3415; _localctx.Year = Match(INT_CONST);
				State = 3416; Match(MINUS);
				State = 3417; _localctx.Month = Match(INT_CONST);
				State = 3418; Match(MINUS);
				State = 3419; _localctx.Day = Match(INT_CONST);
				State = 3429;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					State = 3420; _localctx.Hours = Match(INT_CONST);
					State = 3427;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,465,_ctx) ) {
					case 1:
						{
						State = 3421; Match(COLON);
						State = 3422; _localctx.Minutes = Match(INT_CONST);
						State = 3425;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
						case 1:
							{
							State = 3423; Match(COLON);
							State = 3424; _localctx.Seconds = Match(INT_CONST);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 3434;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,467,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 3431;
						MatchWildcard();
						}
						} 
					}
					State = 3436;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,467,_ctx);
				}
				State = 3437; Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvoContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode WHILE() { return GetToken(XSharpParser.WHILE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode CATCH() { return GetToken(XSharpParser.CATCH, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public KeywordvoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvo(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvoContext keywordvo() {
		KeywordvoContext _localctx = new KeywordvoContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_keywordvo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3440;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << AS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << DLL) | (1L << DO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FOR) | (1L << FUNCTION) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << IS) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << METHOD) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (SUPER - 66)) | (1L << (TYPEOF - 66)) | (1L << (WHILE - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (DESTRUCTOR - 66)) | (1L << (REPEAT - 66)) | (1L << (TRY - 66)))) != 0) || _la==PTR || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (BIT_NOT - 261)) | (1L << (BIT_AND - 261)) | (1L << (BIT_OR - 261)) | (1L << (BIT_XOR - 261)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public KeywordxsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxs(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxsContext keywordxs() {
		KeywordxsContext _localctx = new KeywordxsContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_keywordxs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3442;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxppContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public KeywordxppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxpp(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxppContext keywordxpp() {
		KeywordxppContext _localctx = new KeywordxppContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_keywordxpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (ASSIGNMENT - 189)) | (1L << (EXPORTED - 189)) | (1L << (NOSAVE - 189)) | (1L << (READONLY - 189)) | (1L << (SHARING - 189)) | (1L << (SHARED - 189)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3447;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3446; _localctx.Attributes = attributes();
				}
			}

			State = 3450;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) {
				{
				State = 3449; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 3452; _localctx.C = Match(CLASS);
			State = 3454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				State = 3453; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3456; _localctx.Id = identifier();
			State = 3458;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3457; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3469;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 3460;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3461; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 3466;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3462; Match(COMMA);
					State = 3463; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 3468;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 3471; Match(IMPLEMENTS);
				State = 3472; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 3477;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3473; Match(COMMA);
					State = 3474; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 3479;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3485;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3482; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3487;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3488; _localctx.e = eos();
			State = 3492;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (VAR - 145)) | (1L << (DEFERRED - 145)) | (1L << (EXPORTED - 145)) | (1L << (FINAL - 145)) | (1L << (INLINE - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				{
				State = 3489; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 3494;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3495; Match(ENDCLASS);
			State = 3496; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _tset11271;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3499;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3498;
				_localctx._tset11271 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset11271 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11271);
				}
				}
				State = 3501;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XppdeclarepropertyContext Member;
		public XppdeclarepropertyContext xppdeclareproperty() {
			return GetRuleContext<XppdeclarepropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_xppclassMember);
		try {
			State = 3508;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3503; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3504; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3505; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3506; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3507; ((XppclspropertyContext)_localctx).Member = xppdeclareproperty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3510; _localctx.Vis = xppvisibility();
			State = 3511; Match(COLON);
			State = 3512; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3514;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (HIDDEN - 34)) | (1L << (PRIVATE - 34)) | (1L << (PROTECTED - 34)) | (1L << (PUBLIC - 34)) | (1L << (INTERNAL - 34)))) != 0) || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public XppisinContext Is;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppdeclmethodparamsContext[] xppdeclmethodparams() {
			return GetRuleContexts<XppdeclmethodparamsContext>();
		}
		public XppdeclmethodparamsContext xppdeclmethodparams(int i) {
			return GetRuleContext<XppdeclmethodparamsContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3516; _localctx.Attributes = attributes();
				}
			}

			State = 3520;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3519; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3522; Match(METHOD);
			State = 3523; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 3525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3524; xppdeclmethodparams();
				}
			}

			State = 3538;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,486,_ctx) ) {
			case 1:
				{
				State = 3527; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				State = 3535;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3528; Match(COMMA);
					State = 3529; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					State = 3531;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LPAREN) {
						{
						State = 3530; xppdeclmethodparams();
						}
					}

					}
					}
					State = 3537;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3540; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclmethodparamsContext : XSharpParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclmethodparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclmethodparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclmethodparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclmethodparams(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclmethodparamsContext xppdeclmethodparams() {
		XppdeclmethodparamsContext _localctx = new XppdeclmethodparamsContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_xppdeclmethodparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3542; Match(LPAREN);
			State = 3551;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,488,_ctx) ) {
			case 1:
				{
				State = 3543; identifier();
				State = 3548;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3544; Match(COMMA);
					State = 3545; identifier();
					}
					}
					State = 3550;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3553; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_xppisin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IS) {
				{
				State = 3555; Match(IS);
				State = 3556; identifier();
				}
			}

			State = 3561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3559; Match(IN);
				State = 3560; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _STATIC;
		public IToken _ABSTRACT;
		public IToken _NEW;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _VIRTUAL;
		public IToken _tset11509;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3564;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3563;
				_localctx._tset11509 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) ) {
					_localctx._tset11509 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11509);
				}
				}
				State = 3566;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3568; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3571; Match(VAR);
			State = 3572; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3585;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				State = 3573; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				{
				State = 3578;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3574; Match(COMMA);
					State = 3575; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 3580;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3583;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3581; Match(AS);
					State = 3582; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			}
			State = 3588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 3587; _localctx.Shared = Match(SHARED);
				}
			}

			State = 3591;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 3590; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 3594;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3593; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 3597;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 3596; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 3599; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3601; Match(ASSIGNMENT);
			State = 3602; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclarepropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public EosContext end;
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppdeclarepropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareproperty(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclarepropertyContext xppdeclareproperty() {
		XppdeclarepropertyContext _localctx = new XppdeclarepropertyContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_xppdeclareproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3605;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3604; _localctx.Attributes = attributes();
				}
			}

			State = 3607; _localctx.Accessors = xppaccessors();
			State = 3609;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3608; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3611; _localctx.M = Match(METHOD);
			State = 3612; _localctx.Id = identifier();
			State = 3615;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3613; Match(VAR);
				State = 3614; _localctx.VarName = identifier();
				}
			}

			State = 3619;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3617; Match(AS);
				State = 3618; _localctx.Type = datatype();
				}
			}

			State = 3621; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppaccessorsContext : XSharpParserRuleContext {
		public IToken _ACCESS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASSIGN;
		public IToken _tset11743;
		public ITerminalNode[] ACCESS() { return GetTokens(XSharpParser.ACCESS); }
		public ITerminalNode ACCESS(int i) {
			return GetToken(XSharpParser.ACCESS, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(XSharpParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(XSharpParser.ASSIGN, i);
		}
		public XppaccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppaccessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppaccessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppaccessors(this);
		}
	}

	[RuleVersion(0)]
	public XppaccessorsContext xppaccessors() {
		XppaccessorsContext _localctx = new XppaccessorsContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_xppaccessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3624;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3623;
				_localctx._tset11743 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx._tset11743 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11743);
				}
				}
				State = 3626;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ACCESS || _la==ASSIGN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext ClassId;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3629;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3628; _localctx.Attributes = attributes();
				}
			}

			State = 3632;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3631; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3635;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3634; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3637; _localctx.M = Match(METHOD);
			State = 3641;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				State = 3638; _localctx.ClassId = identifier();
				State = 3639; Match(COLON);
				}
				break;
			}
			State = 3643; _localctx.Sig = signature();
			State = 3644; _localctx.end = eos();
			State = 3645; _localctx.StmtBlk = statementBlock();
			State = 3649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,509,_ctx) ) {
			case 1:
				{
				State = 3646; Match(END);
				State = 3647; Match(METHOD);
				State = 3648; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken I;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3651; _localctx.Attributes = attributes();
				}
			}

			State = 3654; _localctx.I = Match(INLINE);
			State = 3656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3655; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3659;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3658; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3661; Match(METHOD);
			State = 3662; _localctx.Sig = signature();
			State = 3663; _localctx.end = eos();
			State = 3664; _localctx.StmtBlk = statementBlock();
			State = 3668;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 3665; Match(END);
				State = 3666; Match(METHOD);
				State = 3667; eos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordfoxContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public KeywordfoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordfox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordfox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordfox(this);
		}
	}

	[RuleVersion(0)]
	public KeywordfoxContext keywordfox() {
		KeywordfoxContext _localctx = new KeywordfoxContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_keywordfox);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3670;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (OLEPUBLIC - 205)) | (1L << (EXCLUDE - 205)) | (1L << (THISACCESS - 205)) | (1L << (HELPSTRING - 205)) | (1L << (NOINIT - 205)) | (1L << (THEN - 205)) | (1L << (FOX_M - 205)) | (1L << (EACH - 205)))) != 0) || ((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (FOX_AND - 282)) | (1L << (FOX_OR - 282)) | (1L << (FOX_NOT - 282)) | (1L << (FOX_XOR - 282)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken D;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public FoxclassmemberContext _foxclassmember;
		public IList<FoxclassmemberContext> _Members = new List<FoxclassmemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] DEFINE() { return GetTokens(XSharpParser.DEFINE); }
		public ITerminalNode DEFINE(int i) {
			return GetToken(XSharpParser.DEFINE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDDEFINE() { return GetToken(XSharpParser.ENDDEFINE, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public FoxclassmemberContext[] foxclassmember() {
			return GetRuleContexts<FoxclassmemberContext>();
		}
		public FoxclassmemberContext foxclassmember(int i) {
			return GetRuleContext<FoxclassmemberContext>(i);
		}
		public FoxclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclass(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassContext foxclass() {
		FoxclassContext _localctx = new FoxclassContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_foxclass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3673;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3672; _localctx.Attributes = attributes();
				}
			}

			State = 3675; _localctx.D = Match(DEFINE);
			State = 3677;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3676; _localctx.Modifiers = classModifiers();
				}
			}

			State = 3679; Match(CLASS);
			State = 3681;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,516,_ctx) ) {
			case 1:
				{
				State = 3680; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3683; _localctx.Id = identifier();
			State = 3685;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3684; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3689;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3687; Match(AS);
				State = 3688; _localctx.BaseType = datatype();
				}
			}

			State = 3692;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 3691; foxclasslib();
				}
			}

			State = 3697;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3694; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3699;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3701;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OLEPUBLIC) {
				{
				State = 3700; Match(OLEPUBLIC);
				}
			}

			State = 3703; _localctx.e = eos();
			State = 3707;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,522,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3704; _localctx._foxclassmember = foxclassmember();
					_localctx._Members.Add(_localctx._foxclassmember);
					}
					} 
				}
				State = 3709;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,522,_ctx);
			}
			State = 3713;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDDEFINE:
				{
				State = 3710; Match(ENDDEFINE);
				}
				break;
			case END:
				{
				State = 3711; Match(END);
				State = 3712; Match(DEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3715; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassmemberContext : XSharpParserRuleContext {
		public FoxclassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassmember; } }
	 
		public FoxclassmemberContext() { }
		public virtual void CopyFrom(FoxclassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoximplementsContext : FoxclassmemberContext {
		public FoximplementsclauseContext Member;
		public FoximplementsclauseContext foximplementsclause() {
			return GetRuleContext<FoximplementsclauseContext>(0);
		}
		public FoximplementsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplements(this);
		}
	}
	public partial class FoxaddobjectContext : FoxclassmemberContext {
		public FoxaddobjectclauseContext Member;
		public FoxaddobjectclauseContext foxaddobjectclause() {
			return GetRuleContext<FoxaddobjectclauseContext>(0);
		}
		public FoxaddobjectContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobject(this);
		}
	}
	public partial class FoxclsvarinitContext : FoxclassmemberContext {
		public FoxfieldContext Member;
		public FoxfieldContext foxfield() {
			return GetRuleContext<FoxfieldContext>(0);
		}
		public FoxclsvarinitContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvarinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvarinit(this);
		}
	}
	public partial class FoxclsmethodContext : FoxclassmemberContext {
		public FoxmethodContext Member;
		public FoxmethodContext foxmethod() {
			return GetRuleContext<FoxmethodContext>(0);
		}
		public FoxclsmethodContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsmethod(this);
		}
	}
	public partial class FoxclsdtorContext : FoxclassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FoxclsdtorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsdtor(this);
		}
	}
	public partial class FoxclsvarsContext : FoxclassmemberContext {
		public FoxclassvarsContext Member;
		public FoxclassvarsContext foxclassvars() {
			return GetRuleContext<FoxclassvarsContext>(0);
		}
		public FoxclsvarsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvars(this);
		}
	}
	public partial class FoxpemcomContext : FoxclassmemberContext {
		public FoxpemcomattribContext Member;
		public FoxpemcomattribContext foxpemcomattrib() {
			return GetRuleContext<FoxpemcomattribContext>(0);
		}
		public FoxpemcomContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcom(this);
		}
	}
	public partial class FoxclsctorContext : FoxclassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FoxclsctorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsctor(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassmemberContext foxclassmember() {
		FoxclassmemberContext _localctx = new FoxclassmemberContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_foxclassmember);
		try {
			State = 3725;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
			case 1:
				_localctx = new FoxclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3717; ((FoxclsvarsContext)_localctx).Member = foxclassvars();
				}
				break;

			case 2:
				_localctx = new FoxclsvarinitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3718; ((FoxclsvarinitContext)_localctx).Member = foxfield();
				}
				break;

			case 3:
				_localctx = new FoxclsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3719; ((FoxclsmethodContext)_localctx).Member = foxmethod();
				}
				break;

			case 4:
				_localctx = new FoximplementsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3720; ((FoximplementsContext)_localctx).Member = foximplementsclause();
				}
				break;

			case 5:
				_localctx = new FoxaddobjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3721; ((FoxaddobjectContext)_localctx).Member = foxaddobjectclause();
				}
				break;

			case 6:
				_localctx = new FoxpemcomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3722; ((FoxpemcomContext)_localctx).Member = foxpemcomattrib();
				}
				break;

			case 7:
				_localctx = new FoxclsctorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3723; ((FoxclsctorContext)_localctx).Member = constructor();
				}
				break;

			case 8:
				_localctx = new FoxclsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3724; ((FoxclsdtorContext)_localctx).Member = destructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken HelpString;
		public ExpressionContext HelpText;
		public IToken ThisAccess;
		public IdentifierContext MemberId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FoxmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmethod(this);
		}
	}

	[RuleVersion(0)]
	public FoxmethodContext foxmethod() {
		FoxmethodContext _localctx = new FoxmethodContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_foxmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3727; _localctx.Attributes = attributes();
				}
			}

			State = 3731;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3730; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 3733; _localctx.T = funcproctype();
			State = 3734; _localctx.Sig = signature();
			State = 3737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==HELPSTRING) {
				{
				State = 3735; _localctx.HelpString = Match(HELPSTRING);
				State = 3736; _localctx.HelpText = expression(0);
				}
			}

			State = 3744;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THISACCESS) {
				{
				State = 3739; _localctx.ThisAccess = Match(THISACCESS);
				State = 3740; Match(LPAREN);
				State = 3741; _localctx.MemberId = identifier();
				State = 3742; Match(RPAREN);
				}
			}

			State = 3746; _localctx.end = eos();
			State = 3747; _localctx.StmtBlk = statementBlock();
			State = 3754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				State = 3751;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 3748;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 3749; Match(END);
					State = 3750; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3753; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public DatatypeContext DataType;
		public EosContext end;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclassvars(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassvarsContext foxclassvars() {
		FoxclassvarsContext _localctx = new FoxclassvarsContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_foxclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				State = 3756; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 3760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				State = 3759; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3763;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,533,_ctx) ) {
			case 1:
				{
				State = 3762; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3765; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3770;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3766; Match(COMMA);
				State = 3767; _localctx._identifier = identifier();
				_localctx._Vars.Add(_localctx._identifier);
				}
				}
				State = 3772;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3775;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3773; Match(AS);
				State = 3774; _localctx.DataType = datatype();
				}
			}

			State = 3777; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldContext : XSharpParserRuleContext {
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public FoxfieldinitializerContext F;
		public EosContext end;
		public FoxfieldinitializerContext foxfieldinitializer() {
			return GetRuleContext<FoxfieldinitializerContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public FoxfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfield(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldContext foxfield() {
		FoxfieldContext _localctx = new FoxfieldContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_foxfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				State = 3779; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3783;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,537,_ctx) ) {
			case 1:
				{
				State = 3782; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3785; _localctx.F = foxfieldinitializer();
			State = 3786; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldinitializerContext : XSharpParserRuleContext {
		public NameContext Name;
		public ExpressionContext Expr;
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxfieldinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfieldinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfieldinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfieldinitializer(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldinitializerContext foxfieldinitializer() {
		FoxfieldinitializerContext _localctx = new FoxfieldinitializerContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_foxfieldinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3788; _localctx.Name = name(0);
			State = 3789; assignoperator();
			State = 3790; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoximplementsclauseContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IToken Excl;
		public ExpressionContext Library;
		public EosContext end;
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoximplementsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foximplementsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplementsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplementsclause(this);
		}
	}

	[RuleVersion(0)]
	public FoximplementsclauseContext foximplementsclause() {
		FoximplementsclauseContext _localctx = new FoximplementsclauseContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_foximplementsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3792; Match(IMPLEMENTS);
			State = 3793; _localctx.Type = datatype();
			State = 3795;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXCLUDE) {
				{
				State = 3794; _localctx.Excl = Match(EXCLUDE);
				}
			}

			State = 3799;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3797; Match(IN);
				State = 3798; _localctx.Library = expression(0);
				}
			}

			State = 3801; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxaddobjectclauseContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken NoInit;
		public FoxfieldinitializerContext _foxfieldinitializer;
		public IList<FoxfieldinitializerContext> _FieldsInits = new List<FoxfieldinitializerContext>();
		public EosContext end;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public FoxfieldinitializerContext[] foxfieldinitializer() {
			return GetRuleContexts<FoxfieldinitializerContext>();
		}
		public FoxfieldinitializerContext foxfieldinitializer(int i) {
			return GetRuleContext<FoxfieldinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxaddobjectclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxaddobjectclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobjectclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobjectclause(this);
		}
	}

	[RuleVersion(0)]
	public FoxaddobjectclauseContext foxaddobjectclause() {
		FoxaddobjectclauseContext _localctx = new FoxaddobjectclauseContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_foxaddobjectclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3804;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3803; _localctx.Attributes = attributes();
				}
			}

			State = 3806; Match(ADD);
			State = 3807; Match(OBJECT);
			State = 3809;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,541,_ctx) ) {
			case 1:
				{
				State = 3808; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3811; _localctx.Id = identifier();
			State = 3812; Match(AS);
			State = 3813; _localctx.Type = datatype();
			State = 3815;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOINIT) {
				{
				State = 3814; _localctx.NoInit = Match(NOINIT);
				}
			}

			State = 3826;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 3817; Match(WITH);
				State = 3818; _localctx._foxfieldinitializer = foxfieldinitializer();
				_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
				State = 3823;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3819; Match(COMMA);
					State = 3820; _localctx._foxfieldinitializer = foxfieldinitializer();
					_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
					}
					}
					State = 3825;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3828; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxpemcomattribContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public FoxpemcomattribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxpemcomattrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcomattrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcomattrib(this);
		}
	}

	[RuleVersion(0)]
	public FoxpemcomattribContext foxpemcomattrib() {
		FoxpemcomattribContext _localctx = new FoxpemcomattribContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_foxpemcomattrib);
		int _la;
		try {
			State = 3860;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3830; Match(DIMENSION);
				State = 3831; _localctx.Id = identifier();
				State = 3832; Match(LBRKT);
				State = 3833; expression(0);
				State = 3836;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3834; Match(COMMA);
					State = 3835; expression(0);
					}
				}

				State = 3838; Match(RBRKT);
				State = 3839; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3841; Match(DIMENSION);
				State = 3842; _localctx.Id = identifier();
				State = 3843; Match(LPAREN);
				State = 3844; expression(0);
				State = 3847;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3845; Match(COMMA);
					State = 3846; expression(0);
					}
				}

				State = 3849; Match(RPAREN);
				State = 3850; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3852; _localctx.Id = identifier();
				State = 3853; Match(LBRKT);
				State = 3854; expression(0);
				State = 3855; Match(RBRKT);
				State = 3856; assignoperator();
				State = 3857; expression(0);
				State = 3858; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return entity_sempred((EntityContext)_localctx, predIndex);

		case 44: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 53: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 57: return classmember_sempred((ClassmemberContext)_localctx, predIndex);

		case 76: return filewidevar_sempred((FilewidevarContext)_localctx, predIndex);

		case 77: return statement_sempred((StatementContext)_localctx, predIndex);

		case 85: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 86: return localvar_sempred((LocalvarContext)_localctx, predIndex);

		case 102: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 103: return primary_sempred((PrimaryContext)_localctx, predIndex);

		case 104: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 105: return aliasExpression_sempred((AliasExpressionContext)_localctx, predIndex);

		case 116: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 118: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 119: return name_sempred((NameContext)_localctx, predIndex);

		case 157: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsFox;

		case 1: return IsXPP;

		case 2: return IsVO;

		case 3: return IsVO;

		case 4: return !IsXPP;

		case 5: return IsXPP;

		case 6: return IsFox;
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return InputStream.La(2) != REMOVE;

		case 8: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return InputStream.La(2) != SET && InputStream.La(2) != INIT;

		case 10: return InputStream.La(2) != GET && InputStream.La(2) != UDCSEP;
		}
		return true;
	}
	private bool classmember_sempred(ClassmemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return IsVO;
		}
		return true;
	}
	private bool filewidevar_sempred(FilewidevarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return !IsFox ;

		case 13: return IsFox  ;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return !IsFox && HasMemVars;

		case 15: return IsFox && HasMemVars;

		case 16: return IsFox ;

		case 17: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool localvar_sempred(LocalvarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return IsFox;
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return IsTypeCastAllowed() ;

		case 21: return InputStream.La(2) != LPAREN ;

		case 22: return Precpred(_ctx, 18);

		case 23: return Precpred(_ctx, 17);

		case 24: return Precpred(_ctx, 16);

		case 25: return Precpred(_ctx, 15);

		case 26: return Precpred(_ctx, 14);

		case 27: return Precpred(_ctx, 13);

		case 28: return Precpred(_ctx, 12);

		case 29: return Precpred(_ctx, 11);

		case 30: return Precpred(_ctx, 10);

		case 31: return Precpred(_ctx, 8);

		case 32: return Precpred(_ctx, 7);

		case 33: return Precpred(_ctx, 6);

		case 34: return Precpred(_ctx, 5);

		case 35: return Precpred(_ctx, 2);

		case 36: return Precpred(_ctx, 35);

		case 37: return Precpred(_ctx, 33);

		case 38: return Precpred(_ctx, 32);

		case 39: return Precpred(_ctx, 30);

		case 40: return Precpred(_ctx, 28);

		case 41: return Precpred(_ctx, 27);

		case 42: return Precpred(_ctx, 25);

		case 43: return Precpred(_ctx, 21);

		case 44: return Precpred(_ctx, 20);

		case 45: return Precpred(_ctx, 19);

		case 46: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return ExpectToken(LCURLY);

		case 48: return ExpectToken(LCURLY);

		case 49: return ExpectToken(LPAREN);

		case 50: return ExpectToken(LPAREN);

		case 51: return ExpectToken(LPAREN);

		case 52: return ExpectToken(LPAREN);

		case 53: return ExpectToken(ALIAS);
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(_ctx, 3);

		case 55: return Precpred(_ctx, 6);

		case 56: return Precpred(_ctx, 5);

		case 57: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool aliasExpression_sempred(AliasExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return HasMemVars;

		case 59: return InputStream.La(4) != LPAREN;

		case 60: return InputStream.La(6) != LPAREN;
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return !IsCoreVO;

		case 65: return !IsCoreVO;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x169\xF19\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\a\x2\x189\n\x2\f\x2\xE\x2\x18C\v\x2\x3\x2\a\x2\x18F\n\x2\f\x2\xE"+
		"\x2\x192\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x199\n\x3\x3\x4\x3\x4"+
		"\x5\x4\x19D\n\x4\x3\x4\x3\x4\x3\x4\x3\x5\a\x5\x1A3\n\x5\f\x5\xE\x5\x1A6"+
		"\v\x5\x3\x5\x3\x5\x3\x6\a\x6\x1AB\n\x6\f\x6\xE\x6\x1AE\v\x6\x3\x6\x3\x6"+
		"\a\x6\x1B2\n\x6\f\x6\xE\x6\x1B5\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1D8"+
		"\n\a\x3\b\x6\b\x1DB\n\b\r\b\xE\b\x1DC\x3\t\x5\t\x1E0\n\t\x3\t\x5\t\x1E3"+
		"\n\t\x3\t\x5\t\x1E6\n\t\x3\t\x3\t\x3\t\x5\t\x1EB\n\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x5\t\x1F3\n\t\x3\t\x5\t\x1F6\n\t\x3\n\x3\n\x3\v\x3\v\x5\v"+
		"\x1FC\n\v\x3\v\x5\v\x1FF\n\v\x3\v\x3\v\x5\v\x203\n\v\x3\v\a\v\x206\n\v"+
		"\f\v\xE\v\x209\v\v\x3\v\x5\v\x20C\n\v\x3\v\x3\v\x5\v\x210\n\v\x3\f\x3"+
		"\f\x5\f\x214\n\f\x3\f\x3\f\x5\f\x218\n\f\x3\r\x3\r\x3\xE\x5\xE\x21D\n"+
		"\xE\x3\xE\x5\xE\x220\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x226\n\xE\x3\xE"+
		"\x3\xE\x5\xE\x22A\n\xE\x3\xE\x5\xE\x22D\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x233\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x239\n\xE\x3\xE\x5\xE\x23C"+
		"\n\xE\x3\xE\x3\xE\x5\xE\x240\n\xE\x5\xE\x242\n\xE\x3\xE\x5\xE\x245\n\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x5\x10\x24C\n\x10\x3\x10\x5\x10\x24F\n"+
		"\x10\x3\x10\x3\x10\x5\x10\x253\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\x25A\n\x10\x3\x10\x3\x10\x5\x10\x25E\n\x10\x3\x10\x3\x10\x3\x10"+
		"\a\x10\x263\n\x10\f\x10\xE\x10\x266\v\x10\x5\x10\x268\n\x10\x3\x10\x3"+
		"\x10\x3\x11\x5\x11\x26D\n\x11\x3\x11\x3\x11\x5\x11\x271\n\x11\x3\x11\x5"+
		"\x11\x274\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\x279\n\x12\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\a\x13\x281\n\x13\f\x13\xE\x13\x284\v\x13\x5"+
		"\x13\x286\n\x13\x3\x13\x3\x13\x3\x14\x5\x14\x28B\n\x14\x3\x14\x5\x14\x28E"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x294\n\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x299\n\x14\x3\x14\x5\x14\x29C\n\x14\x3\x15\x3\x15\x5\x15\x2A0"+
		"\n\x15\x3\x16\a\x16\x2A3\n\x16\f\x16\xE\x16\x2A6\v\x16\x3\x17\x6\x17\x2A9"+
		"\n\x17\r\x17\xE\x17\x2AA\x3\x18\x5\x18\x2AE\n\x18\x3\x18\x3\x18\x5\x18"+
		"\x2B2\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2B7\n\x18\x3\x18\x3\x18\x3\x18"+
		"\x3\x19\x5\x19\x2BD\n\x19\x3\x19\x5\x19\x2C0\n\x19\x3\x19\x3\x19\x5\x19"+
		"\x2C4\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2C9\n\x19\f\x19\xE\x19\x2CC\v"+
		"\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2D1\n\x19\x3\x19\x3\x19\x5\x19\x2D5"+
		"\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2DA\n\x19\f\x19\xE\x19\x2DD\v\x19\x3"+
		"\x19\x3\x19\x5\x19\x2E1\n\x19\x3\x1A\x5\x1A\x2E4\n\x1A\x3\x1A\x5\x1A\x2E7"+
		"\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2EB\n\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F0"+
		"\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F9\n"+
		"\x1A\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x2FE\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\x306\n\x1C\x3\x1C\x3\x1C\x3\x1D\x5\x1D\x30B\n\x1D"+
		"\x3\x1D\x3\x1D\x5\x1D\x30F\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x314\n\x1D"+
		"\x3\x1D\x3\x1D\x6\x1D\x318\n\x1D\r\x1D\xE\x1D\x319\x3\x1D\x3\x1D\x3\x1D"+
		"\x5\x1D\x31F\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x5\x1E\x329\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E"+
		"\x331\n\x1E\x3\x1E\x3\x1E\x5\x1E\x335\n\x1E\x3\x1F\x5\x1F\x338\n\x1F\x3"+
		"\x1F\x3\x1F\x5\x1F\x33C\n\x1F\x3\x1F\x3\x1F\x3\x1F\x6\x1F\x341\n\x1F\r"+
		"\x1F\xE\x1F\x342\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x348\n\x1F\x3 \x6 \x34B\n"+
		" \r \xE \x34C\x3!\x3!\x3!\x3!\x3!\a!\x354\n!\f!\xE!\x357\v!\x3!\x3!\x3"+
		"!\x5!\x35C\n!\x3\"\x5\"\x35F\n\"\x3\"\x5\"\x362\n\"\x3\"\x3\"\x5\"\x366"+
		"\n\"\x3\"\x3\"\x5\"\x36A\n\"\x3\"\x3\"\x5\"\x36E\n\"\x3\"\x3\"\a\"\x372"+
		"\n\"\f\"\xE\"\x375\v\"\x3\"\a\"\x378\n\"\f\"\xE\"\x37B\v\"\x3\"\x3\"\a"+
		"\"\x37F\n\"\f\"\xE\"\x382\v\"\x3\"\x3\"\x3\"\x3\"\x3#\x5#\x389\n#\x3#"+
		"\x5#\x38C\n#\x3#\x3#\x5#\x390\n#\x3#\x3#\x5#\x394\n#\x3#\x3#\x5#\x398"+
		"\n#\x3#\x3#\x3#\x3#\a#\x39E\n#\f#\xE#\x3A1\v#\x5#\x3A3\n#\x3#\a#\x3A6"+
		"\n#\f#\xE#\x3A9\v#\x3#\x3#\a#\x3AD\n#\f#\xE#\x3B0\v#\x3#\x3#\x3#\x3#\x3"+
		"$\x6$\x3B7\n$\r$\xE$\x3B8\x3%\x3%\x3%\x3%\x5%\x3BF\n%\x3%\a%\x3C2\n%\f"+
		"%\xE%\x3C5\v%\x3%\x3%\x3&\x5&\x3CA\n&\x3&\x5&\x3CD\n&\x3&\x3&\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\a\'\x3D7\n\'\f\'\xE\'\x3DA\v\'\x3(\x3(\x3(\x3("+
		"\x3(\x5(\x3E1\n(\x3)\x5)\x3E4\n)\x3)\x5)\x3E7\n)\x3)\x3)\x5)\x3EB\n)\x3"+
		")\x3)\x5)\x3EF\n)\x3)\x3)\x3)\x3)\a)\x3F5\n)\f)\xE)\x3F8\v)\x5)\x3FA\n"+
		")\x3)\a)\x3FD\n)\f)\xE)\x400\v)\x3)\x3)\a)\x404\n)\f)\xE)\x407\v)\x3)"+
		"\x3)\x3)\x3)\x3*\x5*\x40E\n*\x3*\x5*\x411\n*\x3*\x3*\x5*\x415\n*\x3*\x3"+
		"*\x5*\x419\n*\x3*\x5*\x41C\n*\x3*\x3*\x5*\x420\n*\x3*\a*\x423\n*\f*\xE"+
		"*\x426\v*\x3*\x5*\x429\n*\x3*\x3*\x3+\x5+\x42E\n+\x3+\x5+\x431\n+\x3+"+
		"\x3+\x5+\x435\n+\x3+\x3+\x3+\x5+\x43A\n+\x3+\x3+\x6+\x43E\n+\r+\xE+\x43F"+
		"\x3+\x3+\x5+\x444\n+\x3+\x3+\x3,\x5,\x449\n,\x3,\x5,\x44C\n,\x3,\x3,\x3"+
		",\x3,\x5,\x452\n,\x3,\x3,\x3-\x5-\x457\n-\x3-\x5-\x45A\n-\x3-\x3-\x5-"+
		"\x45E\n-\x3-\x3-\x3-\x5-\x463\n-\x3-\x3-\x6-\x467\n-\r-\xE-\x468\x3-\x3"+
		"-\x3-\x3-\x6-\x46F\n-\r-\xE-\x470\x3-\x3-\x5-\x475\n-\x3-\x3-\x5-\x479"+
		"\n-\x3.\x5.\x47C\n.\x3.\x5.\x47F\n.\x3.\x3.\x3.\x5.\x484\n.\x3.\x3.\x3"+
		".\x5.\x489\n.\x3.\x5.\x48C\n.\x3/\x5/\x48F\n/\x3/\x5/\x492\n/\x3/\x3/"+
		"\x3/\x3/\x3/\x5/\x499\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x4A3\n/\x3"+
		"/\x3/\x3/\x5/\x4A8\n/\x3/\x3/\x3\x30\x5\x30\x4AD\n\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\a\x30\x4B3\n\x30\f\x30\xE\x30\x4B6\v\x30\x3\x30\x3\x30\x3"+
		"\x31\x6\x31\x4BB\n\x31\r\x31\xE\x31\x4BC\x3\x32\x5\x32\x4C0\n\x32\x3\x32"+
		"\x3\x32\x3\x32\x3\x32\x3\x32\x5\x32\x4C7\n\x32\x3\x32\x3\x32\x3\x32\x5"+
		"\x32\x4CC\n\x32\x3\x32\x3\x32\x5\x32\x4D0\n\x32\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x6\x33\x4D6\n\x33\r\x33\xE\x33\x4D7\x3\x33\x3\x33\x3\x33\x6\x33\x4DD"+
		"\n\x33\r\x33\xE\x33\x4DE\x3\x33\x5\x33\x4E2\n\x33\x3\x34\x5\x34\x4E5\n"+
		"\x34\x3\x34\x5\x34\x4E8\n\x34\x3\x34\x3\x34\x5\x34\x4EC\n\x34\x3\x34\x3"+
		"\x34\x5\x34\x4F0\n\x34\x3\x34\x5\x34\x4F3\n\x34\x3\x34\x3\x34\x5\x34\x4F7"+
		"\n\x34\x3\x34\x3\x34\a\x34\x4FB\n\x34\f\x34\xE\x34\x4FE\v\x34\x3\x34\x3"+
		"\x34\x3\x34\x5\x34\x503\n\x34\x3\x34\x3\x34\x6\x34\x507\n\x34\r\x34\xE"+
		"\x34\x508\x3\x34\x3\x34\x3\x34\x3\x34\x6\x34\x50F\n\x34\r\x34\xE\x34\x510"+
		"\x3\x34\x3\x34\x5\x34\x515\n\x34\x3\x34\x3\x34\x5\x34\x519\n\x34\x3\x35"+
		"\x3\x35\x3\x35\x3\x35\a\x35\x51F\n\x35\f\x35\xE\x35\x522\v\x35\x5\x35"+
		"\x524\n\x35\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x52B\n\x35\f\x35"+
		"\xE\x35\x52E\v\x35\x5\x35\x530\n\x35\x3\x35\x5\x35\x533\n\x35\x3\x36\x5"+
		"\x36\x536\n\x36\x3\x36\x5\x36\x539\n\x36\x3\x36\x3\x36\x3\x37\x5\x37\x53E"+
		"\n\x37\x3\x37\x5\x37\x541\n\x37\x3\x37\x3\x37\x3\x37\x5\x37\x546\n\x37"+
		"\x3\x37\x3\x37\x3\x37\x5\x37\x54B\n\x37\x3\x37\x5\x37\x54E\n\x37\x3\x38"+
		"\x6\x38\x551\n\x38\r\x38\xE\x38\x552\x3\x39\x3\x39\x3\x39\a\x39\x558\n"+
		"\x39\f\x39\xE\x39\x55B\v\x39\x3:\x5:\x55E\n:\x3:\x5:\x561\n:\x3:\x3:\x3"+
		":\x3:\x3:\x5:\x568\n:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x572\n:\x3:"+
		"\x3:\x3:\x5:\x577\n:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x5;\x58B\n;\x3<\x5<\x58E\n<\x3<\x5<\x591\n<\x3<"+
		"\x3<\x5<\x595\n<\x3<\x3<\x5<\x599\n<\x3<\x5<\x59C\n<\x3<\x3<\x5<\x5A0"+
		"\n<\x3<\x3<\x5<\x5A4\n<\x3<\x3<\x5<\x5A8\n<\x3<\x3<\x3<\x3<\x5<\x5AE\n"+
		"<\x3=\x3=\x3=\x3=\x3=\x3=\x3>\x6>\x5B7\n>\r>\xE>\x5B8\x3?\x3?\x3?\x6?"+
		"\x5BE\n?\r?\xE?\x5BF\x3?\x3?\x3@\x5@\x5C5\n@\x3@\x5@\x5C8\n@\x3@\x3@\x3"+
		"@\x5@\x5CD\n@\x3@\x3@\x5@\x5D1\n@\x3@\x3@\x5@\x5D5\n@\x3@\x3@\x3@\x3@"+
		"\x3@\x5@\x5DC\n@\x3\x41\x6\x41\x5DF\n\x41\r\x41\xE\x41\x5E0\x3\x42\x3"+
		"\x42\x3\x43\x3\x43\x3\x44\x5\x44\x5E8\n\x44\x3\x44\x5\x44\x5EB\n\x44\x3"+
		"\x44\x3\x44\x3\x44\x5\x44\x5F0\n\x44\x3\x44\x5\x44\x5F3\n\x44\x3\x44\x3"+
		"\x44\x3\x44\x5\x44\x5F8\n\x44\x3\x44\x3\x44\x5\x44\x5FC\n\x44\x3\x44\x3"+
		"\x44\x3\x44\x3\x44\x3\x44\x5\x44\x603\n\x44\x3\x45\x6\x45\x606\n\x45\r"+
		"\x45\xE\x45\x607\x3\x46\x6\x46\x60B\n\x46\r\x46\xE\x46\x60C\x3G\x6G\x610"+
		"\nG\rG\xEG\x611\x3H\x3H\x5H\x616\nH\x3H\x3H\x3H\aH\x61B\nH\fH\xEH\x61E"+
		"\vH\x3H\x3H\x3H\x5H\x623\nH\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x3J\aJ\x62D\n"+
		"J\fJ\xEJ\x630\vJ\x5J\x632\nJ\x3J\x5J\x635\nJ\x3K\x3K\x3K\x3K\x3K\x5K\x63C"+
		"\nK\x3L\x3L\x3L\x3L\x3L\aL\x643\nL\fL\xEL\x646\vL\x3L\x3L\x3L\x3M\x3M"+
		"\x3M\x3N\x3N\x3N\x3N\aN\x652\nN\fN\xEN\x655\vN\x3N\x3N\x3N\x3N\x3N\x3"+
		"N\aN\x65D\nN\fN\xEN\x660\vN\x3N\x3N\x5N\x664\nN\x3N\x3N\x3N\x3N\x3N\x3"+
		"N\x3N\aN\x66D\nN\fN\xEN\x670\vN\x3N\x3N\x3N\x3N\x3N\x3N\x3N\aN\x679\n"+
		"N\fN\xEN\x67C\vN\x3N\x3N\x5N\x680\nN\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x5O\x68D\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x695\nO\x3O\x5O\x698"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x5O\x69F\nO\x3O\x3O\x3O\x3O\x5O\x6A5\nO\x3O\x3"+
		"O\x5O\x6A9\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x6B5\nO\x5O"+
		"\x6B7\nO\x3O\x3O\x3O\x3O\x5O\x6BD\nO\x3O\x3O\x3O\x3O\x5O\x6C3\nO\x3O\x3"+
		"O\x3O\x3O\x3O\x3O\aO\x6CB\nO\fO\xEO\x6CE\vO\x3O\x3O\x3O\x3O\x5O\x6D4\n"+
		"O\x3O\x3O\x5O\x6D8\nO\x3O\x5O\x6DB\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\aO\x6E4"+
		"\nO\fO\xEO\x6E7\vO\x3O\x3O\x3O\x3O\x5O\x6ED\nO\x3O\x3O\x5O\x6F1\nO\x3"+
		"O\x5O\x6F4\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x6FE\nO\x3O\x3O\x3O"+
		"\x3O\x5O\x704\nO\x3O\x3O\x3O\x3O\x3O\aO\x70B\nO\fO\xEO\x70E\vO\x5O\x710"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x719\nO\x3O\x3O\x3O\x3O\x5O\x71F\n"+
		"O\x3O\x3O\x5O\x723\nO\x3O\x5O\x726\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\x3O\x3O\x5O\x734\nO\x3O\x5O\x737\nO\x3O\x3O\x3O\x3O\x3O\x5O\x73E"+
		"\nO\x3O\x3O\x5O\x742\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x74A\nO\x3O\x3O\x3"+
		"O\x3O\x5O\x750\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x758\nO\aO\x75A\nO\fO\xE"+
		"O\x75D\vO\x3O\x3O\x3O\x3O\x5O\x763\nO\x3O\x3O\x5O\x767\nO\x3O\x5O\x76A"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x775\nO\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x5O\x77D\nO\x3O\x3O\x3O\x3O\x3O\x5O\x784\nO\x3O\x3O\x3O\x3O\x6O"+
		"\x78A\nO\rO\xEO\x78B\x3O\x3O\x5O\x790\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x798"+
		"\nO\x3O\x3O\x3O\x3O\x5O\x79E\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5"+
		"O\x7A9\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7B2\nO\x5O\x7B4\nO\x3O\x3O"+
		"\x3O\x3O\x5O\x7BA\nO\x3O\x5O\x7BD\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5"+
		"O\x7C7\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7D4\nO\x3O"+
		"\x3O\x3O\x5O\x7D9\nO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x7E1\nO\fO\xEO\x7E4\v"+
		"O\x3O\x3O\x5O\x7E8\nO\x3P\x3P\x3Q\x3Q\x5Q\x7EE\nQ\x3Q\x3Q\x3Q\x3R\x3R"+
		"\x3R\x3R\x5R\x7F7\nR\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7FF\nR\x3R\x5R\x802"+
		"\nR\x3R\x3R\x3R\x3S\x5S\x808\nS\x3S\x5S\x80B\nS\x3S\x3S\x5S\x80F\nS\x3"+
		"S\x3S\x5S\x813\nS\x3S\x3S\x3S\x3T\x3T\x5T\x81A\nT\x3T\x3T\x3T\x3U\x5U"+
		"\x820\nU\x3U\x3U\x5U\x824\nU\x3U\x3U\x3U\aU\x829\nU\fU\xEU\x82C\vU\x3"+
		"U\x3U\x3U\x3U\aU\x832\nU\fU\xEU\x835\vU\x3U\x3U\x5U\x839\nU\x5U\x83B\n"+
		"U\x3V\x3V\x3V\x3V\x3W\x3W\x5W\x843\nW\x3W\x3W\x3W\aW\x848\nW\fW\xEW\x84B"+
		"\vW\x3W\x3W\x3W\x3W\x3W\x3W\x3W\aW\x854\nW\fW\xEW\x857\vW\x3W\x3W\x3W"+
		"\x3W\x3W\x3W\x3W\aW\x860\nW\fW\xEW\x863\vW\x3W\x3W\x3W\x5W\x868\nW\x3"+
		"W\x3W\x3W\x3W\aW\x86E\nW\fW\xEW\x871\vW\x3W\x3W\x3W\x3W\x5W\x877\nW\x3"+
		"W\x3W\x3W\x3W\aW\x87D\nW\fW\xEW\x880\vW\x3W\x3W\x3W\x3W\x5W\x886\nW\x3"+
		"W\x3W\x3W\x3W\aW\x88C\nW\fW\xEW\x88F\vW\x3W\x3W\x3W\x3W\x5W\x895\nW\x3"+
		"W\x3W\x3W\x3W\aW\x89B\nW\fW\xEW\x89E\vW\x3W\x3W\x3W\x3W\x5W\x8A4\nW\x3"+
		"W\x5W\x8A7\nW\x3W\x3W\x3W\x3W\aW\x8AD\nW\fW\xEW\x8B0\vW\x3W\x3W\x3W\x3"+
		"W\x5W\x8B6\nW\x3W\x5W\x8B9\nW\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W"+
		"\x3W\x5W\x8C6\nW\x3X\x5X\x8C9\nX\x3X\x5X\x8CC\nX\x3X\x3X\x3X\x3X\x3X\x5"+
		"X\x8D3\nX\x3X\x3X\x3X\x5X\x8D8\nX\x3X\x3X\x3X\x5X\x8DD\nX\x5X\x8DF\nX"+
		"\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x8E9\nX\x3X\x3X\x3X\x5X\x8EE\nX\x5"+
		"X\x8F0\nX\x5X\x8F2\nX\x3Y\x5Y\x8F5\nY\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z"+
		"\aZ\x8FF\nZ\fZ\xEZ\x902\vZ\x3Z\x3Z\x5Z\x906\nZ\x3Z\x3Z\x3[\x3[\x3[\x3"+
		"[\a[\x90E\n[\f[\xE[\x911\v[\x3[\x3[\x3\\\x5\\\x916\n\\\x3\\\x3\\\x3\\"+
		"\x3\\\x3\\\x5\\\x91D\n\\\x3\\\x3\\\x3\\\x5\\\x922\n\\\x3]\x3]\x3]\x3]"+
		"\a]\x928\n]\f]\xE]\x92B\v]\x3]\x3]\x3^\x3^\x3^\x3^\a^\x933\n^\f^\xE^\x936"+
		"\v^\x3^\x3^\x3^\x3^\x5^\x93C\n^\x3^\x3^\x3^\a^\x941\n^\f^\xE^\x944\v^"+
		"\x3^\x3^\x3^\x3^\x3^\x3^\x3^\a^\x94D\n^\f^\xE^\x950\v^\x3^\x3^\x5^\x954"+
		"\n^\x3_\x3_\x3_\x3_\a_\x95A\n_\f_\xE_\x95D\v_\x3_\x3_\x3`\x5`\x962\n`"+
		"\x3`\x3`\x3`\x3`\x3`\a`\x969\n`\f`\xE`\x96C\v`\x3`\x3`\x3`\x3`\x3`\x3"+
		"`\a`\x974\n`\f`\xE`\x977\v`\x3`\x3`\x5`\x97B\n`\x3`\x5`\x97E\n`\x3`\x3"+
		"`\x3`\x3`\x3`\a`\x985\n`\f`\xE`\x988\v`\x3`\x3`\x3`\x3`\x3`\x3`\a`\x990"+
		"\n`\f`\xE`\x993\v`\x3`\x3`\x5`\x997\n`\x3`\x5`\x99A\n`\x5`\x99C\n`\x3"+
		"\x61\x3\x61\x3\x61\x3\x62\x3\x62\x5\x62\x9A3\n\x62\x3\x63\x3\x63\x3\x63"+
		"\x5\x63\x9A8\n\x63\x3\x64\x5\x64\x9AB\n\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x5\x64\x9B1\n\x64\x3\x64\x5\x64\x9B4\n\x64\x3\x65\x5\x65\x9B7\n\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x9C1\n\x65"+
		"\x3\x65\x3\x65\x3\x66\x6\x66\x9C6\n\x66\r\x66\xE\x66\x9C7\x3g\x3g\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x9D6\nh\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h"+
		"\x9EE\nh\x3h\x5h\x9F1\nh\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xA2F\nh\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5"+
		"h\xA43\nh\x3h\x3h\x3h\x3h\x5h\xA49\nh\x3h\x3h\x3h\x5h\xA4E\nh\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x5h\xA56\nh\ah\xA58\nh\fh\xEh\xA5B\vh\x3i\x3i\x3i\x3"+
		"i\x3i\x5i\xA62\ni\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA7E\ni\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i"+
		"\xA92\ni\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\ai\xACF\ni\fi\xEi\xAD2\vi\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\ai\xAE3\ni\fi\xEi\xAE6"+
		"\vi\x3i\x3i\x3i\x5i\xAEB\ni\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xAF4\nj\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\aj\xB06"+
		"\nj\fj\xEj\xB09\vj\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xB14\nk\x3"+
		"k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k"+
		"\x3k\x3k\x3k\x3k\x3k\x5k\xB2D\nk\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3"+
		"k\x3k\x3k\x3k\x3k\x5k\xB3D\nk\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xB45\nk\x5k"+
		"\xB47\nk\x3l\x3l\x5l\xB4B\nl\x3m\x3m\x3m\x3m\am\xB51\nm\fm\xEm\xB54\v"+
		"m\x5m\xB56\nm\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x5o\xB60\no\x3p\x3p\x3p"+
		"\x3p\ap\xB66\np\fp\xEp\xB69\vp\x3p\x3p\x3q\x3q\x5q\xB6F\nq\x3r\x3r\x3"+
		"r\x3r\ar\xB75\nr\fr\xEr\xB78\vr\x3r\x3r\x3s\x3s\x3s\as\xB7F\ns\fs\xEs"+
		"\xB82\vs\x3t\x3t\x3u\x3u\x3u\au\xB89\nu\fu\xEu\xB8C\vu\x3v\x3v\x3v\x3"+
		"v\x5v\xB92\nv\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x5v"+
		"\xBA1\nv\x3v\x5v\xBA4\nv\x5v\xBA6\nv\x3w\x3w\x3w\x3w\x3w\x5w\xBAD\nw\x3"+
		"w\x3w\x5w\xBB1\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\ax\xBBD\nx\f"+
		"x\xEx\xBC0\vx\x3y\x3y\x3y\x3y\x3y\x3y\ay\xBC8\ny\fy\xEy\xBCB\vy\x3z\x3"+
		"z\x3z\x3z\x3z\x3z\x3z\x3z\x5z\xBD5\nz\x3{\x3{\x5{\xBD9\n{\x3|\x3|\x3|"+
		"\x3|\a|\xBDF\n|\f|\xE|\xBE2\v|\x3|\x3|\x3}\x3}\x3~\x3~\x5~\xBEA\n~\x3"+
		"~\x3~\x3\x7F\x3\x7F\x5\x7F\xBF0\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80"+
		"\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x6\x80\xBFC\n\x80\r\x80\xE\x80\xBFD"+
		"\x3\x80\x3\x80\x3\x80\x3\x80\x3\x80\x5\x80\xC05\n\x80\x3\x81\x3\x81\a"+
		"\x81\xC09\n\x81\f\x81\xE\x81\xC0C\v\x81\x3\x81\x3\x81\x5\x81\xC10\n\x81"+
		"\x3\x82\x3\x82\x3\x82\x5\x82\xC15\n\x82\x3\x83\x3\x83\x5\x83\xC19\n\x83"+
		"\x3\x84\x3\x84\x3\x84\x3\x84\x5\x84\xC1F\n\x84\x3\x84\x3\x84\x3\x84\x3"+
		"\x84\x3\x84\x3\x84\x5\x84\xC27\n\x84\x3\x84\x3\x84\x3\x84\x3\x84\a\x84"+
		"\xC2D\n\x84\f\x84\xE\x84\xC30\v\x84\x3\x84\x3\x84\x5\x84\xC34\n\x84\x3"+
		"\x85\x5\x85\xC37\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\a\x86\xC3E\n"+
		"\x86\f\x86\xE\x86\xC41\v\x86\x5\x86\xC43\n\x86\x3\x86\x3\x86\x3\x87\x3"+
		"\x87\x3\x87\x3\x87\x3\x87\x5\x87\xC4C\n\x87\x3\x88\x5\x88\xC4F\n\x88\x3"+
		"\x88\x3\x88\x3\x88\x3\x88\a\x88\xC55\n\x88\f\x88\xE\x88\xC58\v\x88\x5"+
		"\x88\xC5A\n\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x5\x89\xC61\n\x89\x3"+
		"\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\a\x8A\xC6A\n\x8A\f\x8A"+
		"\xE\x8A\xC6D\v\x8A\x5\x8A\xC6F\n\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B"+
		"\x3\x8B\x3\x8B\x5\x8B\xC78\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\a\x8C\xC7E"+
		"\n\x8C\f\x8C\xE\x8C\xC81\v\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D"+
		"\a\x8D\xC89\n\x8D\f\x8D\xE\x8D\xC8C\v\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xC97\n\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xC9F\n\x8F\x3\x8F\x3\x8F\x5\x8F\xCA3"+
		"\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xCAA\n\x8F\x3\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x5\x8F\xCB0\n\x8F\x3\x90\x5\x90\xCB3\n\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x5\x90\xCB9\n\x90\x3\x91\x3\x91\x5\x91\xCBD\n\x91\x3"+
		"\x92\x3\x92\x3\x92\a\x92\xCC2\n\x92\f\x92\xE\x92\xCC5\v\x92\x3\x93\x5"+
		"\x93\xCC8\n\x93\x3\x93\x6\x93\xCCB\n\x93\r\x93\xE\x93\xCCC\x3\x93\x3\x93"+
		"\x3\x94\x5\x94\xCD2\n\x94\x3\x94\x3\x94\x3\x94\x5\x94\xCD7\n\x94\x3\x94"+
		"\x5\x94\xCDA\n\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\a"+
		"\x95\xCE3\n\x95\f\x95\xE\x95\xCE6\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3"+
		"\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xCF3\n\x98\x3\x98"+
		"\x3\x98\x3\x98\x3\x99\a\x99\xCF9\n\x99\f\x99\xE\x99\xCFC\v\x99\x3\x99"+
		"\x3\x99\x5\x99\xD00\n\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD0E\n\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD17\n\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\a\x9A\xD1D\n\x9A\f\x9A\xE\x9A\xD20\v\x9A\x5\x9A\xD22\n\x9A"+
		"\x3\x9B\x3\x9B\x3\x9B\x3\x9C\x3\x9C\x5\x9C\xD29\n\x9C\x3\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x5\x9D\xD32\n\x9D\x3\x9E\x3\x9E\x3\x9E"+
		"\x3\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F"+
		"\xD40\n\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xD49"+
		"\n\xA0\x3\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA5"+
		"\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\xD64\n\xA5\x5\xA5\xD66"+
		"\n\xA5\x5\xA5\xD68\n\xA5\x3\xA5\a\xA5\xD6B\n\xA5\f\xA5\xE\xA5\xD6E\v\xA5"+
		"\x3\xA5\x5\xA5\xD71\n\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3"+
		"\xA9\x5\xA9\xD7A\n\xA9\x3\xA9\x5\xA9\xD7D\n\xA9\x3\xA9\x3\xA9\x5\xA9\xD81"+
		"\n\xA9\x3\xA9\x3\xA9\x5\xA9\xD85\n\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\a\xA9"+
		"\xD8B\n\xA9\f\xA9\xE\xA9\xD8E\v\xA9\x5\xA9\xD90\n\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\x3\xA9\a\xA9\xD96\n\xA9\f\xA9\xE\xA9\xD99\v\xA9\x5\xA9\xD9B\n\xA9"+
		"\x3\xA9\a\xA9\xD9E\n\xA9\f\xA9\xE\xA9\xDA1\v\xA9\x3\xA9\x3\xA9\a\xA9\xDA5"+
		"\n\xA9\f\xA9\xE\xA9\xDA8\v\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x6\xAA\xDAE"+
		"\n\xAA\r\xAA\xE\xAA\xDAF\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\xDB7"+
		"\n\xAB\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAE\x5\xAE\xDC0\n"+
		"\xAE\x3\xAE\x5\xAE\xDC3\n\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDC8\n\xAE\x3"+
		"\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDCE\n\xAE\a\xAE\xDD0\n\xAE\f\xAE\xE"+
		"\xAE\xDD3\v\xAE\x5\xAE\xDD5\n\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3"+
		"\xAF\a\xAF\xDDD\n\xAF\f\xAF\xE\xAF\xDE0\v\xAF\x5\xAF\xDE2\n\xAF\x3\xAF"+
		"\x3\xAF\x3\xB0\x3\xB0\x5\xB0\xDE8\n\xB0\x3\xB0\x3\xB0\x5\xB0\xDEC\n\xB0"+
		"\x3\xB1\x6\xB1\xDEF\n\xB1\r\xB1\xE\xB1\xDF0\x3\xB2\x5\xB2\xDF4\n\xB2\x3"+
		"\xB2\x3\xB2\x3\xB2\x3\xB2\x3\xB2\a\xB2\xDFB\n\xB2\f\xB2\xE\xB2\xDFE\v"+
		"\xB2\x3\xB2\x3\xB2\x5\xB2\xE02\n\xB2\x5\xB2\xE04\n\xB2\x3\xB2\x5\xB2\xE07"+
		"\n\xB2\x3\xB2\x5\xB2\xE0A\n\xB2\x3\xB2\x5\xB2\xE0D\n\xB2\x3\xB2\x5\xB2"+
		"\xE10\n\xB2\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x5\xB4\xE18\n\xB4"+
		"\x3\xB4\x3\xB4\x5\xB4\xE1C\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\xE22"+
		"\n\xB4\x3\xB4\x3\xB4\x5\xB4\xE26\n\xB4\x3\xB4\x3\xB4\x3\xB5\x6\xB5\xE2B"+
		"\n\xB5\r\xB5\xE\xB5\xE2C\x3\xB6\x5\xB6\xE30\n\xB6\x3\xB6\x5\xB6\xE33\n"+
		"\xB6\x3\xB6\x5\xB6\xE36\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\xE3C"+
		"\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\xE44\n\xB6\x3"+
		"\xB7\x5\xB7\xE47\n\xB7\x3\xB7\x3\xB7\x5\xB7\xE4B\n\xB7\x3\xB7\x5\xB7\xE4E"+
		"\n\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\xE57\n"+
		"\xB7\x3\xB8\x3\xB8\x3\xB9\x5\xB9\xE5C\n\xB9\x3\xB9\x3\xB9\x5\xB9\xE60"+
		"\n\xB9\x3\xB9\x3\xB9\x5\xB9\xE64\n\xB9\x3\xB9\x3\xB9\x5\xB9\xE68\n\xB9"+
		"\x3\xB9\x3\xB9\x5\xB9\xE6C\n\xB9\x3\xB9\x5\xB9\xE6F\n\xB9\x3\xB9\a\xB9"+
		"\xE72\n\xB9\f\xB9\xE\xB9\xE75\v\xB9\x3\xB9\x5\xB9\xE78\n\xB9\x3\xB9\x3"+
		"\xB9\a\xB9\xE7C\n\xB9\f\xB9\xE\xB9\xE7F\v\xB9\x3\xB9\x3\xB9\x3\xB9\x5"+
		"\xB9\xE84\n\xB9\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA"+
		"\x3\xBA\x3\xBA\x5\xBA\xE90\n\xBA\x3\xBB\x5\xBB\xE93\n\xBB\x3\xBB\x5\xBB"+
		"\xE96\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\xE9C\n\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\x3\xBB\x3\xBB\x5\xBB\xEA3\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3"+
		"\xBB\x5\xBB\xEAA\n\xBB\x3\xBB\x5\xBB\xEAD\n\xBB\x3\xBC\x5\xBC\xEB0\n\xBC"+
		"\x3\xBC\x5\xBC\xEB3\n\xBC\x3\xBC\x5\xBC\xEB6\n\xBC\x3\xBC\x3\xBC\x3\xBC"+
		"\a\xBC\xEBB\n\xBC\f\xBC\xE\xBC\xEBE\v\xBC\x3\xBC\x3\xBC\x5\xBC\xEC2\n"+
		"\xBC\x3\xBC\x3\xBC\x3\xBD\x5\xBD\xEC7\n\xBD\x3\xBD\x5\xBD\xECA\n\xBD\x3"+
		"\xBD\x3\xBD\x3\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xBF\x5"+
		"\xBF\xED6\n\xBF\x3\xBF\x3\xBF\x5\xBF\xEDA\n\xBF\x3\xBF\x3\xBF\x3\xC0\x5"+
		"\xC0\xEDF\n\xC0\x3\xC0\x3\xC0\x3\xC0\x5\xC0\xEE4\n\xC0\x3\xC0\x3\xC0\x3"+
		"\xC0\x3\xC0\x5\xC0\xEEA\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\a\xC0\xEF0\n"+
		"\xC0\f\xC0\xE\xC0\xEF3\v\xC0\x5\xC0\xEF5\n\xC0\x3\xC0\x3\xC0\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\xEFF\n\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\xF0A\n\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5"+
		"\xC1\xF17\n\xC1\x3\xC1\x3\xD6C\x2\x6\xCE\xD2\xEE\xF0\xC2\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2"+
		"\x38\x2:\x2<\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T"+
		"\x2V\x2X\x2Z\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2"+
		"r\x2t\x2v\x2x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2"+
		"\x8C\x2\x8E\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2"+
		"\xA0\x2\xA2\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2"+
		"\xB4\x2\xB6\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2"+
		"\xC8\x2\xCA\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2"+
		"\xDC\x2\xDE\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2"+
		"\xF0\x2\xF2\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102"+
		"\x2\x104\x2\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114"+
		"\x2\x116\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126"+
		"\x2\x128\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138"+
		"\x2\x13A\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A"+
		"\x2\x14C\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C"+
		"\x2\x15E\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E"+
		"\x2\x170\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180"+
		"\x2\x2K\x4\x2\x1D\x1D\x84\x84\x4\x2\x1D\x1D(*\x3\x2\xDA\xDB\x4\x2\"\""+
		"\x39\x39\n\x2\a\a\v\v\xF\xF\x1F\x1F\x37\x37\x43\x43\x45\x45LL\x4\x2RR"+
		"\x15E\x15E\a\x2\x4\x4\b\b\x32\x32TTXX\x3\x2\x167\x167\a\x2\x6\x6,-hh\x8D"+
		"\x8D\xAA\xAA\b\x2\x1E\x1E;;\x41\x41\x63\x63yy\x93\x93\x5\x2\x4\x4\b\b"+
		"\x32\x32\x4\x2\x6\x6,,\a\x2\x1E\x1E;;\x41\x41\x63\x63\x93\x93\x4\x2\'"+
		"\'\x126\x126\r\x2\x1E\x1E$$\x38\x38:;\x41\x41QQ\x63\x63\x66\x66iimm\x93"+
		"\x93\x4\x2--hh\x4\x2\xE\xEoo\x4\x2\x6\x6\'\'\x4\x2vv\x8E\x8E\xF\x2\x1E"+
		"\x1E$$++\x38\x38:;\x41\x41UU\x61\x61\x63\x63\x66\x66\x81\x81\x93\x93\x95"+
		"\x95\x5\x2]]nn\x84\x84\x4\x2]]\x15D\x15D\x4\x2nn\x84\x84\a\x2\x1E\x1E"+
		"$$\x38\x38:;\x63\x63\x4\x2>>\x44\x44\t\x2\x1E\x1E$$\x38\x38:;\x41\x41"+
		"\x63\x63\x80\x80\t\x2\xEE\xF1\xF3\xF3\xF5\xFC\xFE\x101\x104\x106\x128"+
		"\x129\x134\x135\x4\x2[[__\x5\x2;;\x41\x41\x80\x80\x10\x2\x1E\x1E$$\x38"+
		"\x38:;\x41\x41QQ\x63\x63\x66\x66mmttyy\x80\x80\x8C\x8C\x93\x93\r\x2\xE"+
		"\xE  \x32\x32==TTWWYZ\x62\x62jjoo\x15E\x15E\x4\x2\x15\x15KK\x5\x2\x16"+
		"\x16\x46\x46II\x3\x2\x102\x103\x4\x2\n\n\x1D\x1D\x4\x2\t\t\x15\x15\x4"+
		"\x2\x12E\x12E\x130\x130\x5\x2ll}}\x92\x93\x6\x2\x31\x31\x36\x36\x38\x38"+
		";;\x4\x2\x10\x10\xD3\xD3\x4\x2yy\x93\x93\x4\x2\xF2\xF2\x10B\x10B\x4\x2"+
		"\x126\x126\x12C\x12D\x6\x2\xF7\xFA\xFD\xFD\x100\x100\x12A\x12A\x5\x2\x106"+
		"\x106\x11A\x11A\x11E\x11E\x4\x2\xFB\xFC\x101\x101\x3\x2\xF9\xFA\x3\x2"+
		"\xEE\xF6\x5\x2\x104\x104\x118\x118\x11C\x11C\x4\x2\x11B\x11B\x11F\x11F"+
		"\x5\x2\x105\x105\x119\x119\x11D\x11D\x4\x2VV\x102\x102\x3\x2\x10B\x117"+
		"\x4\x2\x126\x126\x12C\x12C\x3\x2\xF7\xF8\x4\x2}}\x92\x92\x3\x2\x107\x10A"+
		"\x4\x2hh\xAA\xAA\x3\x2%&\x4\x2xx~~\x5\x2\x9C\x9C\x9F\x9F\xB6\xB6\b\x2"+
		"\x9C\x9C\x9E\x9F\xA1\xA1\xA6\xA6\xAD\xAE\xB7\xB8\t\x2\x9D\x9D\xA0\xA0"+
		"\xA2\xA5\xA7\xA9\xAB\xAC\xAF\xB6\xB9\xBA\x5\x2\xE1\xEB\x134\x142\x144"+
		"\x145\x1B\x2\x4\x4\x6\x6\b\n\f\xE\x13\x13\x15\x15\x17\x1E!\"$&,,.\x30"+
		"\x32\x32\x34\x35\x38>@@\x44\x44GGKKMNTTXXkkpp\xA7\xA7\x107\x10A\x1A\x2"+
		"\x5\x5\v\v\xF\x12\x14\x14\x16\x16\x1F ##\'+--\x31\x31\x33\x33\x36\x37"+
		"??\x42\x43\x45\x46HJLLQRUWYjl\x99\xAA\xAA\xB1\xB1\xB4\xBA\x5\x2\xBF\xBF"+
		"\xC3\xC3\xC8\xCB\x4\x2\x82\x82\xCA\xCA\x6\x2\x41\x41QQmm\xC4\xC5\a\x2"+
		"$$\x38\x38:;\x63\x63\xC3\xC3\xF\x2\xE\xE\x41\x41QQ\x66\x66ttyy\x80\x80"+
		"\x8C\x8C\x93\x93\xC0\xC0\xC5\xC5\xC7\xC7\xCC\xCC\x4\x2\x4\x4\b\b\x6\x2"+
		"\xCF\xD2\xD4\xD6\xDE\xDE\x11C\x11F\x1142\x2\x18A\x3\x2\x2\x2\x4\x198\x3"+
		"\x2\x2\x2\x6\x19C\x3\x2\x2\x2\b\x1A4\x3\x2\x2\x2\n\x1AC\x3\x2\x2\x2\f"+
		"\x1D7\x3\x2\x2\x2\xE\x1DA\x3\x2\x2\x2\x10\x1DF\x3\x2\x2\x2\x12\x1F7\x3"+
		"\x2\x2\x2\x14\x1F9\x3\x2\x2\x2\x16\x213\x3\x2\x2\x2\x18\x219\x3\x2\x2"+
		"\x2\x1A\x21C\x3\x2\x2\x2\x1C\x248\x3\x2\x2\x2\x1E\x24B\x3\x2\x2\x2 \x26C"+
		"\x3\x2\x2\x2\"\x275\x3\x2\x2\x2$\x27C\x3\x2\x2\x2&\x29B\x3\x2\x2\x2(\x29D"+
		"\x3\x2\x2\x2*\x2A4\x3\x2\x2\x2,\x2A8\x3\x2\x2\x2.\x2AD\x3\x2\x2\x2\x30"+
		"\x2E0\x3\x2\x2\x2\x32\x2E3\x3\x2\x2\x2\x34\x2FA\x3\x2\x2\x2\x36\x2FD\x3"+
		"\x2\x2\x2\x38\x30A\x3\x2\x2\x2:\x334\x3\x2\x2\x2<\x337\x3\x2\x2\x2>\x34A"+
		"\x3\x2\x2\x2@\x34E\x3\x2\x2\x2\x42\x35E\x3\x2\x2\x2\x44\x388\x3\x2\x2"+
		"\x2\x46\x3B6\x3\x2\x2\x2H\x3BA\x3\x2\x2\x2J\x3C9\x3\x2\x2\x2L\x3D0\x3"+
		"\x2\x2\x2N\x3E0\x3\x2\x2\x2P\x3E3\x3\x2\x2\x2R\x40D\x3\x2\x2\x2T\x42D"+
		"\x3\x2\x2\x2V\x448\x3\x2\x2\x2X\x456\x3\x2\x2\x2Z\x47B\x3\x2\x2\x2\\\x48E"+
		"\x3\x2\x2\x2^\x4AC\x3\x2\x2\x2`\x4BA\x3\x2\x2\x2\x62\x4BF\x3\x2\x2\x2"+
		"\x64\x4E1\x3\x2\x2\x2\x66\x4E4\x3\x2\x2\x2h\x532\x3\x2\x2\x2j\x535\x3"+
		"\x2\x2\x2l\x53D\x3\x2\x2\x2n\x550\x3\x2\x2\x2p\x554\x3\x2\x2\x2r\x55D"+
		"\x3\x2\x2\x2t\x58A\x3\x2\x2\x2v\x58D\x3\x2\x2\x2x\x5AF\x3\x2\x2\x2z\x5B6"+
		"\x3\x2\x2\x2|\x5BA\x3\x2\x2\x2~\x5C4\x3\x2\x2\x2\x80\x5DE\x3\x2\x2\x2"+
		"\x82\x5E2\x3\x2\x2\x2\x84\x5E4\x3\x2\x2\x2\x86\x5E7\x3\x2\x2\x2\x88\x605"+
		"\x3\x2\x2\x2\x8A\x60A\x3\x2\x2\x2\x8C\x60F\x3\x2\x2\x2\x8E\x622\x3\x2"+
		"\x2\x2\x90\x624\x3\x2\x2\x2\x92\x627\x3\x2\x2\x2\x94\x63B\x3\x2\x2\x2"+
		"\x96\x63D\x3\x2\x2\x2\x98\x64A\x3\x2\x2\x2\x9A\x67F\x3\x2\x2\x2\x9C\x7E7"+
		"\x3\x2\x2\x2\x9E\x7E9\x3\x2\x2\x2\xA0\x7EB\x3\x2\x2\x2\xA2\x801\x3\x2"+
		"\x2\x2\xA4\x807\x3\x2\x2\x2\xA6\x819\x3\x2\x2\x2\xA8\x83A\x3\x2\x2\x2"+
		"\xAA\x83C\x3\x2\x2\x2\xAC\x8C5\x3\x2\x2\x2\xAE\x8F1\x3\x2\x2\x2\xB0\x8F4"+
		"\x3\x2\x2\x2\xB2\x8FA\x3\x2\x2\x2\xB4\x909\x3\x2\x2\x2\xB6\x915\x3\x2"+
		"\x2\x2\xB8\x923\x3\x2\x2\x2\xBA\x953\x3\x2\x2\x2\xBC\x955\x3\x2\x2\x2"+
		"\xBE\x99B\x3\x2\x2\x2\xC0\x99D\x3\x2\x2\x2\xC2\x9A0\x3\x2\x2\x2\xC4\x9A4"+
		"\x3\x2\x2\x2\xC6\x9AA\x3\x2\x2\x2\xC8\x9B6\x3\x2\x2\x2\xCA\x9C5\x3\x2"+
		"\x2\x2\xCC\x9C9\x3\x2\x2\x2\xCE\x9F0\x3\x2\x2\x2\xD0\xAEA\x3\x2\x2\x2"+
		"\xD2\xAF3\x3\x2\x2\x2\xD4\xB46\x3\x2\x2\x2\xD6\xB4A\x3\x2\x2\x2\xD8\xB4C"+
		"\x3\x2\x2\x2\xDA\xB59\x3\x2\x2\x2\xDC\xB5F\x3\x2\x2\x2\xDE\xB61\x3\x2"+
		"\x2\x2\xE0\xB6E\x3\x2\x2\x2\xE2\xB70\x3\x2\x2\x2\xE4\xB7B\x3\x2\x2\x2"+
		"\xE6\xB83\x3\x2\x2\x2\xE8\xB85\x3\x2\x2\x2\xEA\xBA5\x3\x2\x2\x2\xEC\xBA7"+
		"\x3\x2\x2\x2\xEE\xBB4\x3\x2\x2\x2\xF0\xBC1\x3\x2\x2\x2\xF2\xBD4\x3\x2"+
		"\x2\x2\xF4\xBD6\x3\x2\x2\x2\xF6\xBDA\x3\x2\x2\x2\xF8\xBE5\x3\x2\x2\x2"+
		"\xFA\xBE9\x3\x2\x2\x2\xFC\xBEF\x3\x2\x2\x2\xFE\xC04\x3\x2\x2\x2\x100\xC0F"+
		"\x3\x2\x2\x2\x102\xC14\x3\x2\x2\x2\x104\xC18\x3\x2\x2\x2\x106\xC33\x3"+
		"\x2\x2\x2\x108\xC36\x3\x2\x2\x2\x10A\xC38\x3\x2\x2\x2\x10C\xC4B\x3\x2"+
		"\x2\x2\x10E\xC4E\x3\x2\x2\x2\x110\xC60\x3\x2\x2\x2\x112\xC64\x3\x2\x2"+
		"\x2\x114\xC77\x3\x2\x2\x2\x116\xC79\x3\x2\x2\x2\x118\xC84\x3\x2\x2\x2"+
		"\x11A\xC8F\x3\x2\x2\x2\x11C\xCAF\x3\x2\x2\x2\x11E\xCB8\x3\x2\x2\x2\x120"+
		"\xCBC\x3\x2\x2\x2\x122\xCBE\x3\x2\x2\x2\x124\xCCA\x3\x2\x2\x2\x126\xCD1"+
		"\x3\x2\x2\x2\x128\xCDF\x3\x2\x2\x2\x12A\xCE7\x3\x2\x2\x2\x12C\xCEB\x3"+
		"\x2\x2\x2\x12E\xCEE\x3\x2\x2\x2\x130\xCFA\x3\x2\x2\x2\x132\xD21\x3\x2"+
		"\x2\x2\x134\xD23\x3\x2\x2\x2\x136\xD26\x3\x2\x2\x2\x138\xD31\x3\x2\x2"+
		"\x2\x13A\xD33\x3\x2\x2\x2\x13C\xD3F\x3\x2\x2\x2\x13E\xD48\x3\x2\x2\x2"+
		"\x140\xD4A\x3\x2\x2\x2\x142\xD4C\x3\x2\x2\x2\x144\xD4E\x3\x2\x2\x2\x146"+
		"\xD50\x3\x2\x2\x2\x148\xD70\x3\x2\x2\x2\x14A\xD72\x3\x2\x2\x2\x14C\xD74"+
		"\x3\x2\x2\x2\x14E\xD76\x3\x2\x2\x2\x150\xD79\x3\x2\x2\x2\x152\xDAD\x3"+
		"\x2\x2\x2\x154\xDB6\x3\x2\x2\x2\x156\xDB8\x3\x2\x2\x2\x158\xDBC\x3\x2"+
		"\x2\x2\x15A\xDBF\x3\x2\x2\x2\x15C\xDD8\x3\x2\x2\x2\x15E\xDE7\x3\x2\x2"+
		"\x2\x160\xDEE\x3\x2\x2\x2\x162\xDF3\x3\x2\x2\x2\x164\xE13\x3\x2\x2\x2"+
		"\x166\xE17\x3\x2\x2\x2\x168\xE2A\x3\x2\x2\x2\x16A\xE2F\x3\x2\x2\x2\x16C"+
		"\xE46\x3\x2\x2\x2\x16E\xE58\x3\x2\x2\x2\x170\xE5B\x3\x2\x2\x2\x172\xE8F"+
		"\x3\x2\x2\x2\x174\xE92\x3\x2\x2\x2\x176\xEAF\x3\x2\x2\x2\x178\xEC6\x3"+
		"\x2\x2\x2\x17A\xECE\x3\x2\x2\x2\x17C\xED2\x3\x2\x2\x2\x17E\xEDE\x3\x2"+
		"\x2\x2\x180\xF16\x3\x2\x2\x2\x182\x183\a\xBE\x2\x2\x183\x184\a\x13F\x2"+
		"\x2\x184\x189\a\x167\x2\x2\x185\x186\a\xBD\x2\x2\x186\x187\a\x13F\x2\x2"+
		"\x187\x189\a\x167\x2\x2\x188\x182\x3\x2\x2\x2\x188\x185\x3\x2\x2\x2\x189"+
		"\x18C\x3\x2\x2\x2\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x190"+
		"\x3\x2\x2\x2\x18C\x18A\x3\x2\x2\x2\x18D\x18F\x5\x4\x3\x2\x18E\x18D\x3"+
		"\x2\x2\x2\x18F\x192\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2"+
		"\x2\x2\x191\x193\x3\x2\x2\x2\x192\x190\x3\x2\x2\x2\x193\x194\a\x2\x2\x3"+
		"\x194\x3\x3\x2\x2\x2\x195\x199\x5\x9CO\x2\x196\x199\x5\f\a\x2\x197\x199"+
		"\x5\xCEh\x2\x198\x195\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x198\x197\x3\x2"+
		"\x2\x2\x199\x5\x3\x2\x2\x2\x19A\x19D\x5\x11C\x8F\x2\x19B\x19D\x5\x11E"+
		"\x90\x2\x19C\x19A\x3\x2\x2\x2\x19C\x19B\x3\x2\x2\x2\x19D\x19E\x3\x2\x2"+
		"\x2\x19E\x19F\a\x167\x2\x2\x19F\x1A0\a\x2\x2\x3\x1A0\a\x3\x2\x2\x2\x1A1"+
		"\x1A3\x5\f\a\x2\x1A2\x1A1\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2"+
		"\x3\x2\x2\x2\x1A4\x1A5\x3\x2\x2\x2\x1A5\x1A7\x3\x2\x2\x2\x1A6\x1A4\x3"+
		"\x2\x2\x2\x1A7\x1A8\a\x2\x2\x3\x1A8\t\x3\x2\x2\x2\x1A9\x1AB\x5\x9AN\x2"+
		"\x1AA\x1A9\x3\x2\x2\x2\x1AB\x1AE\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AC"+
		"\x1AD\x3\x2\x2\x2\x1AD\x1AF\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AF\x1B3"+
		"\x5*\x16\x2\x1B0\x1B2\x5\f\a\x2\x1B1\x1B0\x3\x2\x2\x2\x1B2\x1B5\x3\x2"+
		"\x2\x2\x1B3\x1B1\x3\x2\x2\x2\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B6\x3\x2\x2"+
		"\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6\x1B7\a\x2\x2\x3\x1B7\v\x3\x2\x2\x2\x1B8"+
		"\x1D8\x5@!\x2\x1B9\x1D8\x5\x44#\x2\x1BA\x1BB\x6\a\x2\x2\x1BB\x1D8\x5\x170"+
		"\xB9\x2\x1BC\x1BD\x6\a\x3\x2\x1BD\x1D8\x5\x150\xA9\x2\x1BE\x1D8\x5P)\x2"+
		"\x1BF\x1D8\x5\x42\"\x2\x1C0\x1D8\x5R*\x2\x1C1\x1D8\x5X-\x2\x1C2\x1D8\x5"+
		"T+\x2\x1C3\x1D8\x5\x96L\x2\x1C4\x1C5\x6\a\x4\x2\x1C5\x1D8\x5\x38\x1D\x2"+
		"\x1C6\x1C7\x6\a\x5\x2\x1C7\x1D8\x5<\x1F\x2\x1C8\x1D8\x5\x10\t\x2\x1C9"+
		"\x1D8\x5.\x18\x2\x1CA\x1D8\x5\x36\x1C\x2\x1CB\x1D8\x5\x30\x19\x2\x1CC"+
		"\x1D8\x5\x1A\xE\x2\x1CD\x1CE\x6\a\x6\x2\x1CE\x1D8\x5\x32\x1A\x2\x1CF\x1D0"+
		"\x6\a\a\x2\x1D0\x1D8\x5\x16A\xB6\x2\x1D1\x1D8\x5v<\x2\x1D2\x1D8\x5~@\x2"+
		"\x1D3\x1D8\x5\x9AN\x2\x1D4\x1D5\x6\a\b\x2\x1D5\x1D8\x5\x1E\x10\x2\x1D6"+
		"\x1D8\x5\xE\b\x2\x1D7\x1B8\x3\x2\x2\x2\x1D7\x1B9\x3\x2\x2\x2\x1D7\x1BA"+
		"\x3\x2\x2\x2\x1D7\x1BC\x3\x2\x2\x2\x1D7\x1BE\x3\x2\x2\x2\x1D7\x1BF\x3"+
		"\x2\x2\x2\x1D7\x1C0\x3\x2\x2\x2\x1D7\x1C1\x3\x2\x2\x2\x1D7\x1C2\x3\x2"+
		"\x2\x2\x1D7\x1C3\x3\x2\x2\x2\x1D7\x1C4\x3\x2\x2\x2\x1D7\x1C6\x3\x2\x2"+
		"\x2\x1D7\x1C8\x3\x2\x2\x2\x1D7\x1C9\x3\x2\x2\x2\x1D7\x1CA\x3\x2\x2\x2"+
		"\x1D7\x1CB\x3\x2\x2\x2\x1D7\x1CC\x3\x2\x2\x2\x1D7\x1CD\x3\x2\x2\x2\x1D7"+
		"\x1CF\x3\x2\x2\x2\x1D7\x1D1\x3\x2\x2\x2\x1D7\x1D2\x3\x2\x2\x2\x1D7\x1D3"+
		"\x3\x2\x2\x2\x1D7\x1D4\x3\x2\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\r\x3\x2"+
		"\x2\x2\x1D9\x1DB\a\x167\x2\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2"+
		"\x2\x1DC\x1DA\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2\x1DD\xF\x3\x2\x2\x2\x1DE"+
		"\x1E0\x5\x8CG\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E2"+
		"\x3\x2\x2\x2\x1E1\x1E3\x5,\x17\x2\x1E2\x1E1\x3\x2\x2\x2\x1E2\x1E3\x3\x2"+
		"\x2\x2\x1E3\x1E5\x3\x2\x2\x2\x1E4\x1E6\t\x2\x2\x2\x1E5\x1E4\x3\x2\x2\x2"+
		"\x1E5\x1E6\x3\x2\x2\x2\x1E6\x1E7\x3\x2\x2\x2\x1E7\x1E8\x5\x12\n\x2\x1E8"+
		"\x1EA\x5\x14\v\x2\x1E9\x1EB\t\x3\x2\x2\x1EA\x1E9\x3\x2\x2\x2\x1EA\x1EB"+
		"\x3\x2\x2\x2\x1EB\x1EC\x3\x2\x2\x2\x1EC\x1ED\x5\x16\f\x2\x1ED\x1EE\x5"+
		"\xE\b\x2\x1EE\x1F5\x5*\x16\x2\x1EF\x1F3\t\x4\x2\x2\x1F0\x1F1\a\x19\x2"+
		"\x2\x1F1\x1F3\x5\x12\n\x2\x1F2\x1EF\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2"+
		"\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F6\a\x167\x2\x2\x1F5\x1F2\x3\x2\x2\x2\x1F5"+
		"\x1F6\x3\x2\x2\x2\x1F6\x11\x3\x2\x2\x2\x1F7\x1F8\t\x5\x2\x2\x1F8\x13\x3"+
		"\x2\x2\x2\x1F9\x1FB\x5\x13C\x9F\x2\x1FA\x1FC\x5H%\x2\x1FB\x1FA\x3\x2\x2"+
		"\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FF\x5$\x13\x2\x1FE"+
		"\x1FD\x3\x2\x2\x2\x1FE\x1FF\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200\x201"+
		"\a\x6\x2\x2\x201\x203\x5\xFE\x80\x2\x202\x200\x3\x2\x2\x2\x202\x203\x3"+
		"\x2\x2\x2\x203\x207\x3\x2\x2\x2\x204\x206\x5L\'\x2\x205\x204\x3\x2\x2"+
		"\x2\x206\x209\x3\x2\x2\x2\x207\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2"+
		"\x208\x20B\x3\x2\x2\x2\x209\x207\x3\x2\x2\x2\x20A\x20C\x5\x18\r\x2\x20B"+
		"\x20A\x3\x2\x2\x2\x20B\x20C\x3\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20E"+
		"\a\x15D\x2\x2\x20E\x210\x5\xCEh\x2\x20F\x20D\x3\x2\x2\x2\x20F\x210\x3"+
		"\x2\x2\x2\x210\x15\x3\x2\x2\x2\x211\x212\a\x1E\x2\x2\x212\x214\a.\x2\x2"+
		"\x213\x211\x3\x2\x2\x2\x213\x214\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215"+
		"\x216\a\x14\x2\x2\x216\x218\a\x13F\x2\x2\x217\x215\x3\x2\x2\x2\x217\x218"+
		"\x3\x2\x2\x2\x218\x17\x3\x2\x2\x2\x219\x21A\t\x6\x2\x2\x21A\x19\x3\x2"+
		"\x2\x2\x21B\x21D\x5\x8CG\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2"+
		"\x21D\x21F\x3\x2\x2\x2\x21E\x220\x5,\x17\x2\x21F\x21E\x3\x2\x2\x2\x21F"+
		"\x220\x3\x2\x2\x2\x220\x221\x3\x2\x2\x2\x221\x222\a\x13\x2\x2\x222\x223"+
		"\x5\x12\n\x2\x223\x225\x5\x13C\x9F\x2\x224\x226\x5$\x13\x2\x225\x224\x3"+
		"\x2\x2\x2\x225\x226\x3\x2\x2\x2\x226\x229\x3\x2\x2\x2\x227\x228\a\x6\x2"+
		"\x2\x228\x22A\x5\xFE\x80\x2\x229\x227\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2"+
		"\x22A\x22C\x3\x2\x2\x2\x22B\x22D\x5\x1C\xF\x2\x22C\x22B\x3\x2\x2\x2\x22C"+
		"\x22D\x3\x2\x2\x2\x22D\x22E\x3\x2\x2\x2\x22E\x22F\a\x126\x2\x2\x22F\x232"+
		"\x5\x13E\xA0\x2\x230\x231\a\x12C\x2\x2\x231\x233\x5\x13E\xA0\x2\x232\x230"+
		"\x3\x2\x2\x2\x232\x233\x3\x2\x2\x2\x233\x241\x3\x2\x2\x2\x234\x242\a\x13B"+
		"\x2\x2\x235\x236\a\x12C\x2\x2\x236\x238\x5\x13E\xA0\x2\x237\x239\a\x12A"+
		"\x2\x2\x238\x237\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23B\x3\x2\x2"+
		"\x2\x23A\x23C\a\x138\x2\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2"+
		"\x23C\x23F\x3\x2\x2\x2\x23D\x23E\a\xF6\x2\x2\x23E\x240\a\x138\x2\x2\x23F"+
		"\x23D\x3\x2\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x242\x3\x2\x2\x2\x241\x234"+
		"\x3\x2\x2\x2\x241\x235\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x245\t\a"+
		"\x2\x2\x244\x243\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x246\x3\x2\x2"+
		"\x2\x246\x247\a\x167\x2\x2\x247\x1B\x3\x2\x2\x2\x248\x249\t\x6\x2\x2\x249"+
		"\x1D\x3\x2\x2\x2\x24A\x24C\x5\x8CG\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C"+
		"\x3\x2\x2\x2\x24C\x24E\x3\x2\x2\x2\x24D\x24F\x5,\x17\x2\x24E\x24D\x3\x2"+
		"\x2\x2\x24E\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\a\x10\x2"+
		"\x2\x251\x253\x5\xFE\x80\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2"+
		"\x253\x254\x3\x2\x2\x2\x254\x255\x5\x13C\x9F\x2\x255\x256\a-\x2\x2\x256"+
		"\x259\x5\x13C\x9F\x2\x257\x258\a\x12C\x2\x2\x258\x25A\x5\x13E\xA0\x2\x259"+
		"\x257\x3\x2\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25D\x3\x2\x2\x2\x25B\x25C"+
		"\a\x6\x2\x2\x25C\x25E\x5\x13C\x9F\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E\x3"+
		"\x2\x2\x2\x25E\x267\x3\x2\x2\x2\x25F\x264\x5 \x11\x2\x260\x261\a\x127"+
		"\x2\x2\x261\x263\x5 \x11\x2\x262\x260\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2"+
		"\x264\x262\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x268\x3\x2\x2\x2\x266"+
		"\x264\x3\x2\x2\x2\x267\x25F\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269"+
		"\x3\x2\x2\x2\x269\x26A\a\x167\x2\x2\x26A\x1F\x3\x2\x2\x2\x26B\x26D\x5"+
		"\x8CG\x2\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26E\x3\x2\x2"+
		"\x2\x26E\x270\x5\xFE\x80\x2\x26F\x271\a\x12A\x2\x2\x270\x26F\x3\x2\x2"+
		"\x2\x270\x271\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x274\x5\x13C\x9F"+
		"\x2\x273\x272\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274!\x3\x2\x2\x2\x275"+
		"\x276\a\x13\x2\x2\x276\x278\t\b\x2\x2\x277\x279\n\t\x2\x2\x278\x277\x3"+
		"\x2\x2\x2\x278\x279\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\a\x167"+
		"\x2\x2\x27B#\x3\x2\x2\x2\x27C\x285\a\x120\x2\x2\x27D\x282\x5&\x14\x2\x27E"+
		"\x27F\a\x127\x2\x2\x27F\x281\x5&\x14\x2\x280\x27E\x3\x2\x2\x2\x281\x284"+
		"\x3\x2\x2\x2\x282\x280\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x286\x3"+
		"\x2\x2\x2\x284\x282\x3\x2\x2\x2\x285\x27D\x3\x2\x2\x2\x285\x286\x3\x2"+
		"\x2\x2\x286\x287\x3\x2\x2\x2\x287\x288\a\x121\x2\x2\x288%\x3\x2\x2\x2"+
		"\x289\x28B\x5\x8CG\x2\x28A\x289\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B"+
		"\x28D\x3\x2\x2\x2\x28C\x28E\a>\x2\x2\x28D\x28C\x3\x2\x2\x2\x28D\x28E\x3"+
		"\x2\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x293\x5\x13C\x9F\x2\x290\x291\x5"+
		"\xCCg\x2\x291\x292\x5\xCEh\x2\x292\x294\x3\x2\x2\x2\x293\x290\x3\x2\x2"+
		"\x2\x293\x294\x3\x2\x2\x2\x294\x298\x3\x2\x2\x2\x295\x296\x5(\x15\x2\x296"+
		"\x297\x5\xFE\x80\x2\x297\x299\x3\x2\x2\x2\x298\x295\x3\x2\x2\x2\x298\x299"+
		"\x3\x2\x2\x2\x299\x29C\x3\x2\x2\x2\x29A\x29C\a\x12F\x2\x2\x29B\x28A\x3"+
		"\x2\x2\x2\x29B\x29A\x3\x2\x2\x2\x29C\'\x3\x2\x2\x2\x29D\x29F\t\n\x2\x2"+
		"\x29E\x2A0\aU\x2\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0)"+
		"\x3\x2\x2\x2\x2A1\x2A3\x5\x9CO\x2\x2A2\x2A1\x3\x2\x2\x2\x2A3\x2A6\x3\x2"+
		"\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5+\x3\x2\x2\x2\x2A6"+
		"\x2A4\x3\x2\x2\x2\x2A7\x2A9\t\v\x2\x2\x2A8\x2A7\x3\x2\x2\x2\x2A9\x2AA"+
		"\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB-\x3\x2\x2"+
		"\x2\x2AC\x2AE\a#\x2\x2\x2AD\x2AC\x3\x2\x2\x2\x2AD\x2AE\x3\x2\x2\x2\x2AE"+
		"\x2AF\x3\x2\x2\x2\x2AF\x2B1\aJ\x2\x2\x2B0\x2B2\a\x41\x2\x2\x2B1\x2B0\x3"+
		"\x2\x2\x2\x2B1\x2B2\x3\x2\x2\x2\x2B2\x2B6\x3\x2\x2\x2\x2B3\x2B4\x5\xF8"+
		"}\x2\x2B4\x2B5\x5\xCCg\x2\x2B5\x2B7\x3\x2\x2\x2\x2B6\x2B3\x3\x2\x2\x2"+
		"\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8\x3\x2\x2\x2\x2B8\x2B9\x5\xF0y\x2\x2B9"+
		"\x2BA\a\x167\x2\x2\x2BA/\x3\x2\x2\x2\x2BB\x2BD\x5\x8CG\x2\x2BC\x2BB\x3"+
		"\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BF\x3\x2\x2\x2\x2BE\x2C0\x5,\x17"+
		"\x2\x2BF\x2BE\x3\x2\x2\x2\x2BF\x2C0\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2"+
		"\x2C1\x2C3\a#\x2\x2\x2C2\x2C4\aU\x2\x2\x2C3\x2C2\x3\x2\x2\x2\x2C3\x2C4"+
		"\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2\x2C5\x2CA\x5\x62\x32\x2\x2C6\x2C7\a"+
		"\x127\x2\x2\x2C7\x2C9\x5\x62\x32\x2\x2C8\x2C6\x3\x2\x2\x2\x2C9\x2CC\x3"+
		"\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CA\x2CB\x3\x2\x2\x2\x2CB\x2CD\x3\x2"+
		"\x2\x2\x2CC\x2CA\x3\x2\x2\x2\x2CD\x2CE\a\x167\x2\x2\x2CE\x2E1\x3\x2\x2"+
		"\x2\x2CF\x2D1\x5\x8CG\x2\x2D0\x2CF\x3\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1"+
		"\x2D2\x3\x2\x2\x2\x2D2\x2D4\a\x41\x2\x2\x2D3\x2D5\aU\x2\x2\x2D4\x2D3\x3"+
		"\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2DB\x5\x62"+
		"\x32\x2\x2D7\x2D8\a\x127\x2\x2\x2D8\x2DA\x5\x62\x32\x2\x2D9\x2D7\x3\x2"+
		"\x2\x2\x2DA\x2DD\x3\x2\x2\x2\x2DB\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2"+
		"\x2\x2DC\x2DE\x3\x2\x2\x2\x2DD\x2DB\x3\x2\x2\x2\x2DE\x2DF\a\x167\x2\x2"+
		"\x2DF\x2E1\x3\x2\x2\x2\x2E0\x2BC\x3\x2\x2\x2\x2E0\x2D0\x3\x2\x2\x2\x2E1"+
		"\x31\x3\x2\x2\x2\x2E2\x2E4\x5\x8CG\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3\x2E4"+
		"\x3\x2\x2\x2\x2E4\x2E6\x3\x2\x2\x2\x2E5\x2E7\x5\x8A\x46\x2\x2E6\x2E5\x3"+
		"\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\x34"+
		"\x1B\x2\x2E9\x2EB\x5\xEEx\x2\x2EA\x2E9\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2"+
		"\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EF\x5\x14\v\x2\x2ED\x2EE\a\xE\x2\x2\x2EE"+
		"\x2F0\x5\x13C\x9F\x2\x2EF\x2ED\x3\x2\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0"+
		"\x2F1\x3\x2\x2\x2\x2F1\x2F2\x5\x16\f\x2\x2F2\x2F3\x5\xE\b\x2\x2F3\x2F8"+
		"\x5*\x16\x2\x2F4\x2F5\a\x19\x2\x2\x2F5\x2F6\x5\x34\x1B\x2\x2F6\x2F7\a"+
		"\x167\x2\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8\x2F4\x3\x2\x2\x2\x2F8\x2F9\x3\x2"+
		"\x2\x2\x2F9\x33\x3\x2\x2\x2\x2FA\x2FB\t\f\x2\x2\x2FB\x35\x3\x2\x2\x2\x2FC"+
		"\x2FE\x5,\x17\x2\x2FD\x2FC\x3\x2\x2\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF"+
		"\x3\x2\x2\x2\x2FF\x300\a\x11\x2\x2\x300\x301\x5\x13C\x9F\x2\x301\x302"+
		"\x5\xCCg\x2\x302\x305\x5\xCEh\x2\x303\x304\a\x6\x2\x2\x304\x306\x5\xFE"+
		"\x80\x2\x305\x303\x3\x2\x2\x2\x305\x306\x3\x2\x2\x2\x306\x307\x3\x2\x2"+
		"\x2\x307\x308\a\x167\x2\x2\x308\x37\x3\x2\x2\x2\x309\x30B\x5> \x2\x30A"+
		"\x309\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30E"+
		"\au\x2\x2\x30D\x30F\x5\xEEx\x2\x30E\x30D\x3\x2\x2\x2\x30E\x30F\x3\x2\x2"+
		"\x2\x30F\x310\x3\x2\x2\x2\x310\x313\x5\x13C\x9F\x2\x311\x312\a\x5\x2\x2"+
		"\x312\x314\a\x138\x2\x2\x313\x311\x3\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314"+
		"\x315\x3\x2\x2\x2\x315\x317\x5\xE\b\x2\x316\x318\x5:\x1E\x2\x317\x316"+
		"\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2\x319\x317\x3\x2\x2\x2\x319\x31A\x3"+
		"\x2\x2\x2\x31A\x31E\x3\x2\x2\x2\x31B\x31C\a\x19\x2\x2\x31C\x31D\au\x2"+
		"\x2\x31D\x31F\a\x167\x2\x2\x31E\x31B\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2"+
		"\x31F\x39\x3\x2\x2\x2\x320\x321\a\x30\x2\x2\x321\x322\a\x12\x2\x2\x322"+
		"\x323\x5\x13C\x9F\x2\x323\x324\a\x124\x2\x2\x324\x325\x5\x64\x33\x2\x325"+
		"\x328\a\x125\x2\x2\x326\x327\t\r\x2\x2\x327\x329\x5\xFE\x80\x2\x328\x326"+
		"\x3\x2\x2\x2\x328\x329\x3\x2\x2\x2\x329\x32A\x3\x2\x2\x2\x32A\x32B\x5"+
		"\xE\b\x2\x32B\x335\x3\x2\x2\x2\x32C\x32D\a\x30\x2\x2\x32D\x330\x5\x13C"+
		"\x9F\x2\x32E\x32F\t\r\x2\x2\x32F\x331\x5\xFE\x80\x2\x330\x32E\x3\x2\x2"+
		"\x2\x330\x331\x3\x2\x2\x2\x331\x332\x3\x2\x2\x2\x332\x333\x5\xE\b\x2\x333"+
		"\x335\x3\x2\x2\x2\x334\x320\x3\x2\x2\x2\x334\x32C\x3\x2\x2\x2\x335;\x3"+
		"\x2\x2\x2\x336\x338\x5> \x2\x337\x336\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2"+
		"\x338\x339\x3\x2\x2\x2\x339\x33B\aH\x2\x2\x33A\x33C\x5\xEEx\x2\x33B\x33A"+
		"\x3\x2\x2\x2\x33B\x33C\x3\x2\x2\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x5"+
		"\x13C\x9F\x2\x33E\x340\x5\xE\b\x2\x33F\x341\x5:\x1E\x2\x340\x33F\x3\x2"+
		"\x2\x2\x341\x342\x3\x2\x2\x2\x342\x340\x3\x2\x2\x2\x342\x343\x3\x2\x2"+
		"\x2\x343\x347\x3\x2\x2\x2\x344\x345\a\x19\x2\x2\x345\x346\aH\x2\x2\x346"+
		"\x348\a\x167\x2\x2\x347\x344\x3\x2\x2\x2\x347\x348\x3\x2\x2\x2\x348=\x3"+
		"\x2\x2\x2\x349\x34B\t\xE\x2\x2\x34A\x349\x3\x2\x2\x2\x34B\x34C\x3\x2\x2"+
		"\x2\x34C\x34A\x3\x2\x2\x2\x34C\x34D\x3\x2\x2\x2\x34D?\x3\x2\x2\x2\x34E"+
		"\x34F\a\t\x2\x2\x34F\x350\a\x65\x2\x2\x350\x351\x5\xF0y\x2\x351\x355\x5"+
		"\xE\b\x2\x352\x354\x5\f\a\x2\x353\x352\x3\x2\x2\x2\x354\x357\x3\x2\x2"+
		"\x2\x355\x353\x3\x2\x2\x2\x355\x356\x3\x2\x2\x2\x356\x35B\x3\x2\x2\x2"+
		"\x357\x355\x3\x2\x2\x2\x358\x359\a\x19\x2\x2\x359\x35A\a\x65\x2\x2\x35A"+
		"\x35C\a\x167\x2\x2\x35B\x358\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C\x41"+
		"\x3\x2\x2\x2\x35D\x35F\x5\x8CG\x2\x35E\x35D\x3\x2\x2\x2\x35E\x35F\x3\x2"+
		"\x2\x2\x35F\x361\x3\x2\x2\x2\x360\x362\x5\x46$\x2\x361\x360\x3\x2\x2\x2"+
		"\x361\x362\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x365\a\x62\x2\x2\x364"+
		"\x366\x5\xEEx\x2\x365\x364\x3\x2\x2\x2\x365\x366\x3\x2\x2\x2\x366\x367"+
		"\x3\x2\x2\x2\x367\x369\x5\x13C\x9F\x2\x368\x36A\x5H%\x2\x369\x368\x3\x2"+
		"\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36D\x3\x2\x2\x2\x36B\x36C\t\xF\x2\x2"+
		"\x36C\x36E\x5\xFE\x80\x2\x36D\x36B\x3\x2\x2\x2\x36D\x36E\x3\x2\x2\x2\x36E"+
		"\x373\x3\x2\x2\x2\x36F\x370\a\x127\x2\x2\x370\x372\x5\xFE\x80\x2\x371"+
		"\x36F\x3\x2\x2\x2\x372\x375\x3\x2\x2\x2\x373\x371\x3\x2\x2\x2\x373\x374"+
		"\x3\x2\x2\x2\x374\x379\x3\x2\x2\x2\x375\x373\x3\x2\x2\x2\x376\x378\x5"+
		"L\'\x2\x377\x376\x3\x2\x2\x2\x378\x37B\x3\x2\x2\x2\x379\x377\x3\x2\x2"+
		"\x2\x379\x37A\x3\x2\x2\x2\x37A\x37C\x3\x2\x2\x2\x37B\x379\x3\x2\x2\x2"+
		"\x37C\x380\x5\xE\b\x2\x37D\x37F\x5t;\x2\x37E\x37D\x3\x2\x2\x2\x37F\x382"+
		"\x3\x2\x2\x2\x380\x37E\x3\x2\x2\x2\x380\x381\x3\x2\x2\x2\x381\x383\x3"+
		"\x2\x2\x2\x382\x380\x3\x2\x2\x2\x383\x384\a\x19\x2\x2\x384\x385\a\x62"+
		"\x2\x2\x385\x386\a\x167\x2\x2\x386\x43\x3\x2\x2\x2\x387\x389\x5\x8CG\x2"+
		"\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38B\x3\x2\x2\x2\x38A"+
		"\x38C\x5\x46$\x2\x38B\x38A\x3\x2\x2\x2\x38B\x38C\x3\x2\x2\x2\x38C\x38D"+
		"\x3\x2\x2\x2\x38D\x38F\a\xE\x2\x2\x38E\x390\x5\xEEx\x2\x38F\x38E\x3\x2"+
		"\x2\x2\x38F\x390\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x393\x5\x13C\x9F"+
		"\x2\x392\x394\x5H%\x2\x393\x392\x3\x2\x2\x2\x393\x394\x3\x2\x2\x2\x394"+
		"\x397\x3\x2\x2\x2\x395\x396\a\'\x2\x2\x396\x398\x5\xFE\x80\x2\x397\x395"+
		"\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398\x3A2\x3\x2\x2\x2\x399\x39A\a^"+
		"\x2\x2\x39A\x39F\x5\xFE\x80\x2\x39B\x39C\a\x127\x2\x2\x39C\x39E\x5\xFE"+
		"\x80\x2\x39D\x39B\x3\x2\x2\x2\x39E\x3A1\x3\x2\x2\x2\x39F\x39D\x3\x2\x2"+
		"\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A3\x3\x2\x2\x2\x3A1\x39F\x3\x2\x2\x2"+
		"\x3A2\x399\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2\x3A3\x3A7\x3\x2\x2\x2\x3A4"+
		"\x3A6\x5L\'\x2\x3A5\x3A4\x3\x2\x2\x2\x3A6\x3A9\x3\x2\x2\x2\x3A7\x3A5\x3"+
		"\x2\x2\x2\x3A7\x3A8\x3\x2\x2\x2\x3A8\x3AA\x3\x2\x2\x2\x3A9\x3A7\x3\x2"+
		"\x2\x2\x3AA\x3AE\x5\xE\b\x2\x3AB\x3AD\x5t;\x2\x3AC\x3AB\x3\x2\x2\x2\x3AD"+
		"\x3B0\x3\x2\x2\x2\x3AE\x3AC\x3\x2\x2\x2\x3AE\x3AF\x3\x2\x2\x2\x3AF\x3B1"+
		"\x3\x2\x2\x2\x3B0\x3AE\x3\x2\x2\x2\x3B1\x3B2\a\x19\x2\x2\x3B2\x3B3\a\xE"+
		"\x2\x2\x3B3\x3B4\a\x167\x2\x2\x3B4\x45\x3\x2\x2\x2\x3B5\x3B7\t\x10\x2"+
		"\x2\x3B6\x3B5\x3\x2\x2\x2\x3B7\x3B8\x3\x2\x2\x2\x3B8\x3B6\x3\x2\x2\x2"+
		"\x3B8\x3B9\x3\x2\x2\x2\x3B9G\x3\x2\x2\x2\x3BA\x3BB\a\xEE\x2\x2\x3BB\x3C3"+
		"\x5J&\x2\x3BC\x3BE\a\x127\x2\x2\x3BD\x3BF\x5\x8CG\x2\x3BE\x3BD\x3\x2\x2"+
		"\x2\x3BE\x3BF\x3\x2\x2\x2\x3BF\x3C0\x3\x2\x2\x2\x3C0\x3C2\x5J&\x2\x3C1"+
		"\x3BC\x3\x2\x2\x2\x3C2\x3C5\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C4"+
		"\x3\x2\x2\x2\x3C4\x3C6\x3\x2\x2\x2\x3C5\x3C3\x3\x2\x2\x2\x3C6\x3C7\a\xF0"+
		"\x2\x2\x3C7I\x3\x2\x2\x2\x3C8\x3CA\x5\x8CG\x2\x3C9\x3C8\x3\x2\x2\x2\x3C9"+
		"\x3CA\x3\x2\x2\x2\x3CA\x3CC\x3\x2\x2\x2\x3CB\x3CD\t\x11\x2\x2\x3CC\x3CB"+
		"\x3\x2\x2\x2\x3CC\x3CD\x3\x2\x2\x2\x3CD\x3CE\x3\x2\x2\x2\x3CE\x3CF\x5"+
		"\x13C\x9F\x2\x3CFK\x3\x2\x2\x2\x3D0\x3D1\a\x97\x2\x2\x3D1\x3D2\x5\xF8"+
		"}\x2\x3D2\x3D3\a,\x2\x2\x3D3\x3D8\x5N(\x2\x3D4\x3D5\a\x127\x2\x2\x3D5"+
		"\x3D7\x5N(\x2\x3D6\x3D4\x3\x2\x2\x2\x3D7\x3DA\x3\x2\x2\x2\x3D8\x3D6\x3"+
		"\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9M\x3\x2\x2\x2\x3DA\x3D8\x3\x2\x2\x2"+
		"\x3DB\x3E1\t\x12\x2\x2\x3DC\x3E1\x5\x102\x82\x2\x3DD\x3DE\a\x66\x2\x2"+
		"\x3DE\x3DF\a\x120\x2\x2\x3DF\x3E1\a\x121\x2\x2\x3E0\x3DB\x3\x2\x2\x2\x3E0"+
		"\x3DC\x3\x2\x2\x2\x3E0\x3DD\x3\x2\x2\x2\x3E1O\x3\x2\x2\x2\x3E2\x3E4\x5"+
		"\x8CG\x2\x3E3\x3E2\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4\x3E6\x3\x2\x2"+
		"\x2\x3E5\x3E7\x5\x46$\x2\x3E6\x3E5\x3\x2\x2\x2\x3E6\x3E7\x3\x2\x2\x2\x3E7"+
		"\x3E8\x3\x2\x2\x2\x3E8\x3EA\ao\x2\x2\x3E9\x3EB\x5\xEEx\x2\x3EA\x3E9\x3"+
		"\x2\x2\x2\x3EA\x3EB\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2\x3EC\x3EE\x5\x13C"+
		"\x9F\x2\x3ED\x3EF\x5H%\x2\x3EE\x3ED\x3\x2\x2\x2\x3EE\x3EF\x3\x2\x2\x2"+
		"\x3EF\x3F9\x3\x2\x2\x2\x3F0\x3F1\a^\x2\x2\x3F1\x3F6\x5\xFE\x80\x2\x3F2"+
		"\x3F3\a\x127\x2\x2\x3F3\x3F5\x5\xFE\x80\x2\x3F4\x3F2\x3\x2\x2\x2\x3F5"+
		"\x3F8\x3\x2\x2\x2\x3F6\x3F4\x3\x2\x2\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3FA"+
		"\x3\x2\x2\x2\x3F8\x3F6\x3\x2\x2\x2\x3F9\x3F0\x3\x2\x2\x2\x3F9\x3FA\x3"+
		"\x2\x2\x2\x3FA\x3FE\x3\x2\x2\x2\x3FB\x3FD\x5L\'\x2\x3FC\x3FB\x3\x2\x2"+
		"\x2\x3FD\x400\x3\x2\x2\x2\x3FE\x3FC\x3\x2\x2\x2\x3FE\x3FF\x3\x2\x2\x2"+
		"\x3FF\x401\x3\x2\x2\x2\x400\x3FE\x3\x2\x2\x2\x401\x405\x5\xE\b\x2\x402"+
		"\x404\x5t;\x2\x403\x402\x3\x2\x2\x2\x404\x407\x3\x2\x2\x2\x405\x403\x3"+
		"\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x408\x3\x2\x2\x2\x407\x405\x3\x2"+
		"\x2\x2\x408\x409\a\x19\x2\x2\x409\x40A\ao\x2\x2\x40A\x40B\a\x167\x2\x2"+
		"\x40BQ\x3\x2\x2\x2\x40C\x40E\x5\x8CG\x2\x40D\x40C\x3\x2\x2\x2\x40D\x40E"+
		"\x3\x2\x2\x2\x40E\x410\x3\x2\x2\x2\x40F\x411\x5\x46$\x2\x410\x40F\x3\x2"+
		"\x2\x2\x410\x411\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412\x414\aW\x2\x2"+
		"\x413\x415\x5\xEEx\x2\x414\x413\x3\x2\x2\x2\x414\x415\x3\x2\x2\x2\x415"+
		"\x416\x3\x2\x2\x2\x416\x418\x5\x13C\x9F\x2\x417\x419\x5H%\x2\x418\x417"+
		"\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x41B\x3\x2\x2\x2\x41A\x41C\x5"+
		"$\x13\x2\x41B\x41A\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C\x41F\x3\x2\x2"+
		"\x2\x41D\x41E\a\x6\x2\x2\x41E\x420\x5\xFE\x80\x2\x41F\x41D\x3\x2\x2\x2"+
		"\x41F\x420\x3\x2\x2\x2\x420\x424\x3\x2\x2\x2\x421\x423\x5L\'\x2\x422\x421"+
		"\x3\x2\x2\x2\x423\x426\x3\x2\x2\x2\x424\x422\x3\x2\x2\x2\x424\x425\x3"+
		"\x2\x2\x2\x425\x428\x3\x2\x2\x2\x426\x424\x3\x2\x2\x2\x427\x429\x5\x18"+
		"\r\x2\x428\x427\x3\x2\x2\x2\x428\x429\x3\x2\x2\x2\x429\x42A\x3\x2\x2\x2"+
		"\x42A\x42B\a\x167\x2\x2\x42BS\x3\x2\x2\x2\x42C\x42E\x5\x8CG\x2\x42D\x42C"+
		"\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x430\x3\x2\x2\x2\x42F\x431\x5"+
		"\x46$\x2\x430\x42F\x3\x2\x2\x2\x430\x431\x3\x2\x2\x2\x431\x432\x3\x2\x2"+
		"\x2\x432\x434\aY\x2\x2\x433\x435\x5\xEEx\x2\x434\x433\x3\x2\x2\x2\x434"+
		"\x435\x3\x2\x2\x2\x435\x436\x3\x2\x2\x2\x436\x439\x5\x13C\x9F\x2\x437"+
		"\x438\t\x13\x2\x2\x438\x43A\x5\xFE\x80\x2\x439\x437\x3\x2\x2\x2\x439\x43A"+
		"\x3\x2\x2\x2\x43A\x43B\x3\x2\x2\x2\x43B\x43D\x5\xE\b\x2\x43C\x43E\x5V"+
		",\x2\x43D\x43C\x3\x2\x2\x2\x43E\x43F\x3\x2\x2\x2\x43F\x43D\x3\x2\x2\x2"+
		"\x43F\x440\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x443\a\x19\x2\x2\x442"+
		"\x444\aY\x2\x2\x443\x442\x3\x2\x2\x2\x443\x444\x3\x2\x2\x2\x444\x445\x3"+
		"\x2\x2\x2\x445\x446\a\x167\x2\x2\x446U\x3\x2\x2\x2\x447\x449\x5\x8CG\x2"+
		"\x448\x447\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44B\x3\x2\x2\x2\x44A"+
		"\x44C\a\x30\x2\x2\x44B\x44A\x3\x2\x2\x2\x44B\x44C\x3\x2\x2\x2\x44C\x44D"+
		"\x3\x2\x2\x2\x44D\x451\x5\x13C\x9F\x2\x44E\x44F\x5\xCCg\x2\x44F\x450\x5"+
		"\xCEh\x2\x450\x452\x3\x2\x2\x2\x451\x44E\x3\x2\x2\x2\x451\x452\x3\x2\x2"+
		"\x2\x452\x453\x3\x2\x2\x2\x453\x454\x5\xE\b\x2\x454W\x3\x2\x2\x2\x455"+
		"\x457\x5\x8CG\x2\x456\x455\x3\x2\x2\x2\x456\x457\x3\x2\x2\x2\x457\x459"+
		"\x3\x2\x2\x2\x458\x45A\x5\x8A\x46\x2\x459\x458\x3\x2\x2\x2\x459\x45A\x3"+
		"\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45D\aZ\x2\x2\x45C\x45E\x5\xEEx\x2"+
		"\x45D\x45C\x3\x2\x2\x2\x45D\x45E\x3\x2\x2\x2\x45E\x45F\x3\x2\x2\x2\x45F"+
		"\x462\x5\x13C\x9F\x2\x460\x461\a\x6\x2\x2\x461\x463\x5\xFE\x80\x2\x462"+
		"\x460\x3\x2\x2\x2\x462\x463\x3\x2\x2\x2\x463\x478\x3\x2\x2\x2\x464\x479"+
		"\a\x167\x2\x2\x465\x467\x5Z.\x2\x466\x465\x3\x2\x2\x2\x467\x468\x3\x2"+
		"\x2\x2\x468\x466\x3\x2\x2\x2\x468\x469\x3\x2\x2\x2\x469\x46A\x3\x2\x2"+
		"\x2\x46A\x46B\a\x167\x2\x2\x46B\x479\x3\x2\x2\x2\x46C\x46E\x5\xE\b\x2"+
		"\x46D\x46F\x5\\/\x2\x46E\x46D\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x46E"+
		"\x3\x2\x2\x2\x470\x471\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2\x472\x474\a\x19"+
		"\x2\x2\x473\x475\aZ\x2\x2\x474\x473\x3\x2\x2\x2\x474\x475\x3\x2\x2\x2"+
		"\x475\x476\x3\x2\x2\x2\x476\x477\a\x167\x2\x2\x477\x479\x3\x2\x2\x2\x478"+
		"\x464\x3\x2\x2\x2\x478\x466\x3\x2\x2\x2\x478\x46C\x3\x2\x2\x2\x479Y\x3"+
		"\x2\x2\x2\x47A\x47C\x5\x8CG\x2\x47B\x47A\x3\x2\x2\x2\x47B\x47C\x3\x2\x2"+
		"\x2\x47C\x47E\x3\x2\x2\x2\x47D\x47F\x5n\x38\x2\x47E\x47D\x3\x2\x2\x2\x47E"+
		"\x47F\x3\x2\x2\x2\x47F\x48B\x3\x2\x2\x2\x480\x481\x6.\t\x2\x481\x483\a"+
		"v\x2\x2\x482\x484\x5p\x39\x2\x483\x482\x3\x2\x2\x2\x483\x484\x3\x2\x2"+
		"\x2\x484\x48C\x3\x2\x2\x2\x485\x486\x6.\n\x2\x486\x488\a\x8E\x2\x2\x487"+
		"\x489\x5p\x39\x2\x488\x487\x3\x2\x2\x2\x488\x489\x3\x2\x2\x2\x489\x48C"+
		"\x3\x2\x2\x2\x48A\x48C\t\x14\x2\x2\x48B\x480\x3\x2\x2\x2\x48B\x485\x3"+
		"\x2\x2\x2\x48B\x48A\x3\x2\x2\x2\x48C[\x3\x2\x2\x2\x48D\x48F\x5\x8CG\x2"+
		"\x48E\x48D\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F\x491\x3\x2\x2\x2\x490"+
		"\x492\x5n\x38\x2\x491\x490\x3\x2\x2\x2\x491\x492\x3\x2\x2\x2\x492\x4A7"+
		"\x3\x2\x2\x2\x493\x494\av\x2\x2\x494\x495\x5\xE\b\x2\x495\x496\x5*\x16"+
		"\x2\x496\x498\a\x19\x2\x2\x497\x499\av\x2\x2\x498\x497\x3\x2\x2\x2\x498"+
		"\x499\x3\x2\x2\x2\x499\x4A8\x3\x2\x2\x2\x49A\x49B\av\x2\x2\x49B\x49C\a"+
		"\x15D\x2\x2\x49C\x4A8\x5\xCEh\x2\x49D\x49E\a\x8E\x2\x2\x49E\x49F\x5\xE"+
		"\b\x2\x49F\x4A0\x5*\x16\x2\x4A0\x4A2\a\x19\x2\x2\x4A1\x4A3\a\x8E\x2\x2"+
		"\x4A2\x4A1\x3\x2\x2\x2\x4A2\x4A3\x3\x2\x2\x2\x4A3\x4A8\x3\x2\x2\x2\x4A4"+
		"\x4A5\a\x8E\x2\x2\x4A5\x4A6\a\x15D\x2\x2\x4A6\x4A8\x5\xCEh\x2\x4A7\x493"+
		"\x3\x2\x2\x2\x4A7\x49A\x3\x2\x2\x2\x4A7\x49D\x3\x2\x2\x2\x4A7\x4A4\x3"+
		"\x2\x2\x2\x4A8\x4A9\x3\x2\x2\x2\x4A9\x4AA\x5\xE\b\x2\x4AA]\x3\x2\x2\x2"+
		"\x4AB\x4AD\x5\x8CG\x2\x4AC\x4AB\x3\x2\x2\x2\x4AC\x4AD\x3\x2\x2\x2\x4AD"+
		"\x4AE\x3\x2\x2\x2\x4AE\x4AF\x5`\x31\x2\x4AF\x4B4\x5\x62\x32\x2\x4B0\x4B1"+
		"\a\x127\x2\x2\x4B1\x4B3\x5\x62\x32\x2\x4B2\x4B0\x3\x2\x2\x2\x4B3\x4B6"+
		"\x3\x2\x2\x2\x4B4\x4B2\x3\x2\x2\x2\x4B4\x4B5\x3\x2\x2\x2\x4B5\x4B7\x3"+
		"\x2\x2\x2\x4B6\x4B4\x3\x2\x2\x2\x4B7\x4B8\x5\xE\b\x2\x4B8_\x3\x2\x2\x2"+
		"\x4B9\x4BB\t\x15\x2\x2\x4BA\x4B9\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC"+
		"\x4BA\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x61\x3\x2\x2\x2\x4BE\x4C0"+
		"\a\x12\x2\x2\x4BF\x4BE\x3\x2\x2\x2\x4BF\x4C0\x3\x2\x2\x2\x4C0\x4C1\x3"+
		"\x2\x2\x2\x4C1\x4C6\x5\x13C\x9F\x2\x4C2\x4C3\a\x124\x2\x2\x4C3\x4C4\x5"+
		"\x64\x33\x2\x4C4\x4C5\a\x125\x2\x2\x4C5\x4C7\x3\x2\x2\x2\x4C6\x4C2\x3"+
		"\x2\x2\x2\x4C6\x4C7\x3\x2\x2\x2\x4C7\x4CB\x3\x2\x2\x2\x4C8\x4C9\x5\xCC"+
		"g\x2\x4C9\x4CA\x5\xCEh\x2\x4CA\x4CC\x3\x2\x2\x2\x4CB\x4C8\x3\x2\x2\x2"+
		"\x4CB\x4CC\x3\x2\x2\x2\x4CC\x4CF\x3\x2\x2\x2\x4CD\x4CE\t\r\x2\x2\x4CE"+
		"\x4D0\x5\xFE\x80\x2\x4CF\x4CD\x3\x2\x2\x2\x4CF\x4D0\x3\x2\x2\x2\x4D0\x63"+
		"\x3\x2\x2\x2\x4D1\x4D5\x5\xCEh\x2\x4D2\x4D3\a\x125\x2\x2\x4D3\x4D4\a\x124"+
		"\x2\x2\x4D4\x4D6\x5\xCEh\x2\x4D5\x4D2\x3\x2\x2\x2\x4D6\x4D7\x3\x2\x2\x2"+
		"\x4D7\x4D5\x3\x2\x2\x2\x4D7\x4D8\x3\x2\x2\x2\x4D8\x4E2\x3\x2\x2\x2\x4D9"+
		"\x4DC\x5\xCEh\x2\x4DA\x4DB\a\x127\x2\x2\x4DB\x4DD\x5\xCEh\x2\x4DC\x4DA"+
		"\x3\x2\x2\x2\x4DD\x4DE\x3\x2\x2\x2\x4DE\x4DC\x3\x2\x2\x2\x4DE\x4DF\x3"+
		"\x2\x2\x2\x4DF\x4E2\x3\x2\x2\x2\x4E0\x4E2\x5\xCEh\x2\x4E1\x4D1\x3\x2\x2"+
		"\x2\x4E1\x4D9\x3\x2\x2\x2\x4E1\x4E0\x3\x2\x2\x2\x4E2\x65\x3\x2\x2\x2\x4E3"+
		"\x4E5\x5\x8CG\x2\x4E4\x4E3\x3\x2\x2\x2\x4E4\x4E5\x3\x2\x2\x2\x4E5\x4E7"+
		"\x3\x2\x2\x2\x4E6\x4E8\x5\x8A\x46\x2\x4E7\x4E6\x3\x2\x2\x2\x4E7\x4E8\x3"+
		"\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EB\aj\x2\x2\x4EA\x4EC\x5\xEEx\x2"+
		"\x4EB\x4EA\x3\x2\x2\x2\x4EB\x4EC\x3\x2\x2\x2\x4EC\x4EF\x3\x2\x2\x2\x4ED"+
		"\x4F0\a>\x2\x2\x4EE\x4F0\x5\x13C\x9F\x2\x4EF\x4ED\x3\x2\x2\x2\x4EF\x4EE"+
		"\x3\x2\x2\x2\x4F0\x4F2\x3\x2\x2\x2\x4F1\x4F3\x5h\x35\x2\x4F2\x4F1\x3\x2"+
		"\x2\x2\x4F2\x4F3\x3\x2\x2\x2\x4F3\x4F6\x3\x2\x2\x2\x4F4\x4F5\a\x6\x2\x2"+
		"\x4F5\x4F7\x5\xFE\x80\x2\x4F6\x4F4\x3\x2\x2\x2\x4F6\x4F7\x3\x2\x2\x2\x4F7"+
		"\x518\x3\x2\x2\x2\x4F8\x4FC\aR\x2\x2\x4F9\x4FB\x5j\x36\x2\x4FA\x4F9\x3"+
		"\x2\x2\x2\x4FB\x4FE\x3\x2\x2\x2\x4FC\x4FA\x3\x2\x2\x2\x4FC\x4FD\x3\x2"+
		"\x2\x2\x4FD\x502\x3\x2\x2\x2\x4FE\x4FC\x3\x2\x2\x2\x4FF\x500\x5\xCCg\x2"+
		"\x500\x501\x5\xCEh\x2\x501\x503\x3\x2\x2\x2\x502\x4FF\x3\x2\x2\x2\x502"+
		"\x503\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x519\a\x167\x2\x2\x505\x507"+
		"\x5l\x37\x2\x506\x505\x3\x2\x2\x2\x507\x508\x3\x2\x2\x2\x508\x506\x3\x2"+
		"\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50A\x3\x2\x2\x2\x50A\x50B\a\x167\x2"+
		"\x2\x50B\x519\x3\x2\x2\x2\x50C\x50E\x5\xE\b\x2\x50D\x50F\x5r:\x2\x50E"+
		"\x50D\x3\x2\x2\x2\x50F\x510\x3\x2\x2\x2\x510\x50E\x3\x2\x2\x2\x510\x511"+
		"\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x514\a\x19\x2\x2\x513\x515\aj"+
		"\x2\x2\x514\x513\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515\x516\x3\x2\x2"+
		"\x2\x516\x517\a\x167\x2\x2\x517\x519\x3\x2\x2\x2\x518\x4F8\x3\x2\x2\x2"+
		"\x518\x506\x3\x2\x2\x2\x518\x50C\x3\x2\x2\x2\x519g\x3\x2\x2\x2\x51A\x523"+
		"\a\x124\x2\x2\x51B\x520\x5&\x14\x2\x51C\x51D\a\x127\x2\x2\x51D\x51F\x5"+
		"&\x14\x2\x51E\x51C\x3\x2\x2\x2\x51F\x522\x3\x2\x2\x2\x520\x51E\x3\x2\x2"+
		"\x2\x520\x521\x3\x2\x2\x2\x521\x524\x3\x2\x2\x2\x522\x520\x3\x2\x2\x2"+
		"\x523\x51B\x3\x2\x2\x2\x523\x524\x3\x2\x2\x2\x524\x525\x3\x2\x2\x2\x525"+
		"\x533\a\x125\x2\x2\x526\x52F\a\x120\x2\x2\x527\x52C\x5&\x14\x2\x528\x529"+
		"\a\x127\x2\x2\x529\x52B\x5&\x14\x2\x52A\x528\x3\x2\x2\x2\x52B\x52E\x3"+
		"\x2\x2\x2\x52C\x52A\x3\x2\x2\x2\x52C\x52D\x3\x2\x2\x2\x52D\x530\x3\x2"+
		"\x2\x2\x52E\x52C\x3\x2\x2\x2\x52F\x527\x3\x2\x2\x2\x52F\x530\x3\x2\x2"+
		"\x2\x530\x531\x3\x2\x2\x2\x531\x533\a\x121\x2\x2\x532\x51A\x3\x2\x2\x2"+
		"\x532\x526\x3\x2\x2\x2\x533i\x3\x2\x2\x2\x534\x536\x5\x8CG\x2\x535\x534"+
		"\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x538\x3\x2\x2\x2\x537\x539\x5"+
		"n\x38\x2\x538\x537\x3\x2\x2\x2\x538\x539\x3\x2\x2\x2\x539\x53A\x3\x2\x2"+
		"\x2\x53A\x53B\t\x16\x2\x2\x53Bk\x3\x2\x2\x2\x53C\x53E\x5\x8CG\x2\x53D"+
		"\x53C\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x540\x3\x2\x2\x2\x53F\x541"+
		"\x5n\x38\x2\x540\x53F\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x54D\x3\x2"+
		"\x2\x2\x542\x543\x6\x37\v\x2\x543\x545\t\x17\x2\x2\x544\x546\x5\xCEh\x2"+
		"\x545\x544\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x54E\x3\x2\x2\x2\x547"+
		"\x548\x6\x37\f\x2\x548\x54A\t\x18\x2\x2\x549\x54B\x5p\x39\x2\x54A\x549"+
		"\x3\x2\x2\x2\x54A\x54B\x3\x2\x2\x2\x54B\x54E\x3\x2\x2\x2\x54C\x54E\t\x16"+
		"\x2\x2\x54D\x542\x3\x2\x2\x2\x54D\x547\x3\x2\x2\x2\x54D\x54C\x3\x2\x2"+
		"\x2\x54Em\x3\x2\x2\x2\x54F\x551\t\x19\x2\x2\x550\x54F\x3\x2\x2\x2\x551"+
		"\x552\x3\x2\x2\x2\x552\x550\x3\x2\x2\x2\x552\x553\x3\x2\x2\x2\x553o\x3"+
		"\x2\x2\x2\x554\x559\x5\xCEh\x2\x555\x556\a\x127\x2\x2\x556\x558\x5\xCE"+
		"h\x2\x557\x555\x3\x2\x2\x2\x558\x55B\x3\x2\x2\x2\x559\x557\x3\x2\x2\x2"+
		"\x559\x55A\x3\x2\x2\x2\x55Aq\x3\x2\x2\x2\x55B\x559\x3\x2\x2\x2\x55C\x55E"+
		"\x5\x8CG\x2\x55D\x55C\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x560\x3\x2"+
		"\x2\x2\x55F\x561\x5n\x38\x2\x560\x55F\x3\x2\x2\x2\x560\x561\x3\x2\x2\x2"+
		"\x561\x576\x3\x2\x2\x2\x562\x563\a]\x2\x2\x563\x564\x5\xE\b\x2\x564\x565"+
		"\x5*\x16\x2\x565\x567\a\x19\x2\x2\x566\x568\a]\x2\x2\x567\x566\x3\x2\x2"+
		"\x2\x567\x568\x3\x2\x2\x2\x568\x577\x3\x2\x2\x2\x569\x56A\a]\x2\x2\x56A"+
		"\x56B\a\x15D\x2\x2\x56B\x577\x5\xCEh\x2\x56C\x56D\t\x18\x2\x2\x56D\x56E"+
		"\x5\xE\b\x2\x56E\x56F\x5*\x16\x2\x56F\x571\a\x19\x2\x2\x570\x572\t\x18"+
		"\x2\x2\x571\x570\x3\x2\x2\x2\x571\x572\x3\x2\x2\x2\x572\x577\x3\x2\x2"+
		"\x2\x573\x574\t\x18\x2\x2\x574\x575\a\x15D\x2\x2\x575\x577\x5\xCEh\x2"+
		"\x576\x562\x3\x2\x2\x2\x576\x569\x3\x2\x2\x2\x576\x56C\x3\x2\x2\x2\x576"+
		"\x573\x3\x2\x2\x2\x577\x578\x3\x2\x2\x2\x578\x579\x5\xE\b\x2\x579s\x3"+
		"\x2\x2\x2\x57A\x58B\x5\x32\x1A\x2\x57B\x58B\x5|?\x2\x57C\x58B\x5v<\x2"+
		"\x57D\x58B\x5~@\x2\x57E\x58B\x5^\x30\x2\x57F\x58B\x5\x66\x34\x2\x580\x58B"+
		"\x5\x86\x44\x2\x581\x58B\x5P)\x2\x582\x58B\x5\x44#\x2\x583\x58B\x5R*\x2"+
		"\x584\x58B\x5T+\x2\x585\x58B\x5X-\x2\x586\x58B\x5\x42\"\x2\x587\x588\x6"+
		";\r\x2\x588\x58B\x5\"\x12\x2\x589\x58B\x5\xE\b\x2\x58A\x57A\x3\x2\x2\x2"+
		"\x58A\x57B\x3\x2\x2\x2\x58A\x57C\x3\x2\x2\x2\x58A\x57D\x3\x2\x2\x2\x58A"+
		"\x57E\x3\x2\x2\x2\x58A\x57F\x3\x2\x2\x2\x58A\x580\x3\x2\x2\x2\x58A\x581"+
		"\x3\x2\x2\x2\x58A\x582\x3\x2\x2\x2\x58A\x583\x3\x2\x2\x2\x58A\x584\x3"+
		"\x2\x2\x2\x58A\x585\x3\x2\x2\x2\x58A\x586\x3\x2\x2\x2\x58A\x587\x3\x2"+
		"\x2\x2\x58A\x589\x3\x2\x2\x2\x58Bu\x3\x2\x2\x2\x58C\x58E\x5\x8CG\x2\x58D"+
		"\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x590\x3\x2\x2\x2\x58F\x591"+
		"\x5z>\x2\x590\x58F\x3\x2\x2\x2\x590\x591\x3\x2\x2\x2\x591\x592\x3\x2\x2"+
		"\x2\x592\x594\aT\x2\x2\x593\x595\x5$\x13\x2\x594\x593\x3\x2\x2\x2\x594"+
		"\x595\x3\x2\x2\x2\x595\x598\x3\x2\x2\x2\x596\x597\a\x6\x2\x2\x597\x599"+
		"\a\xAF\x2\x2\x598\x596\x3\x2\x2\x2\x598\x599\x3\x2\x2\x2\x599\x59B\x3"+
		"\x2\x2\x2\x59A\x59C\x5\x18\r\x2\x59B\x59A\x3\x2\x2\x2\x59B\x59C\x3\x2"+
		"\x2\x2\x59C\x59F\x3\x2\x2\x2\x59D\x59E\a\xE\x2\x2\x59E\x5A0\x5\x13C\x9F"+
		"\x2\x59F\x59D\x3\x2\x2\x2\x59F\x5A0\x3\x2\x2\x2\x5A0\x5A3\x3\x2\x2\x2"+
		"\x5A1\x5A2\a\x15D\x2\x2\x5A2\x5A4\x5\xCEh\x2\x5A3\x5A1\x3\x2\x2\x2\x5A3"+
		"\x5A4\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A7\x5\xE\b\x2\x5A6\x5A8"+
		"\x5x=\x2\x5A7\x5A6\x3\x2\x2\x2\x5A7\x5A8\x3\x2\x2\x2\x5A8\x5A9\x3\x2\x2"+
		"\x2\x5A9\x5AD\x5*\x16\x2\x5AA\x5AB\a\x19\x2\x2\x5AB\x5AC\aT\x2\x2\x5AC"+
		"\x5AE\a\x167\x2\x2\x5AD\x5AA\x3\x2\x2\x2\x5AD\x5AE\x3\x2\x2\x2\x5AEw\x3"+
		"\x2\x2\x2\x5AF\x5B0\t\x1A\x2\x2\x5B0\x5B1\a\x120\x2\x2\x5B1\x5B2\x5\xE8"+
		"u\x2\x5B2\x5B3\a\x121\x2\x2\x5B3\x5B4\x5\xE\b\x2\x5B4y\x3\x2\x2\x2\x5B5"+
		"\x5B7\t\x1B\x2\x2\x5B6\x5B5\x3\x2\x2\x2\x5B7\x5B8\x3\x2\x2\x2\x5B8\x5B6"+
		"\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9{\x3\x2\x2\x2\x5BA\x5BB\a\x10\x2"+
		"\x2\x5BB\x5BD\t\f\x2\x2\x5BC\x5BE\n\t\x2\x2\x5BD\x5BC\x3\x2\x2\x2\x5BE"+
		"\x5BF\x3\x2\x2\x2\x5BF\x5BD\x3\x2\x2\x2\x5BF\x5C0\x3\x2\x2\x2\x5C0\x5C1"+
		"\x3\x2\x2\x2\x5C1\x5C2\x5\xE\b\x2\x5C2}\x3\x2\x2\x2\x5C3\x5C5\x5\x8CG"+
		"\x2\x5C4\x5C3\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5\x5C7\x3\x2\x2\x2"+
		"\x5C6\x5C8\x5\x80\x41\x2\x5C7\x5C6\x3\x2\x2\x2\x5C7\x5C8\x3\x2\x2\x2\x5C8"+
		"\x5C9\x3\x2\x2\x2\x5C9\x5CC\aX\x2\x2\x5CA\x5CB\a\x120\x2\x2\x5CB\x5CD"+
		"\a\x121\x2\x2\x5CC\x5CA\x3\x2\x2\x2\x5CC\x5CD\x3\x2\x2\x2\x5CD\x5D0\x3"+
		"\x2\x2\x2\x5CE\x5CF\a\xE\x2\x2\x5CF\x5D1\x5\x13C\x9F\x2\x5D0\x5CE\x3\x2"+
		"\x2\x2\x5D0\x5D1\x3\x2\x2\x2\x5D1\x5D4\x3\x2\x2\x2\x5D2\x5D3\a\x15D\x2"+
		"\x2\x5D3\x5D5\x5\xCEh\x2\x5D4\x5D2\x3\x2\x2\x2\x5D4\x5D5\x3\x2\x2\x2\x5D5"+
		"\x5D6\x3\x2\x2\x2\x5D6\x5D7\x5\xE\b\x2\x5D7\x5DB\x5*\x16\x2\x5D8\x5D9"+
		"\a\x19\x2\x2\x5D9\x5DA\aX\x2\x2\x5DA\x5DC\a\x167\x2\x2\x5DB\x5D8\x3\x2"+
		"\x2\x2\x5DB\x5DC\x3\x2\x2\x2\x5DC\x7F\x3\x2\x2\x2\x5DD\x5DF\a\x80\x2\x2"+
		"\x5DE\x5DD\x3\x2\x2\x2\x5DF\x5E0\x3\x2\x2\x2\x5E0\x5DE\x3\x2\x2\x2\x5E0"+
		"\x5E1\x3\x2\x2\x2\x5E1\x81\x3\x2\x2\x2\x5E2\x5E3\t\x1C\x2\x2\x5E3\x83"+
		"\x3\x2\x2\x2\x5E4\x5E5\t\x1D\x2\x2\x5E5\x85\x3\x2\x2\x2\x5E6\x5E8\x5\x8C"+
		"G\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8\x5EA\x3\x2\x2\x2"+
		"\x5E9\x5EB\x5\x88\x45\x2\x5EA\x5E9\x3\x2\x2\x2\x5EA\x5EB\x3\x2\x2\x2\x5EB"+
		"\x5EC\x3\x2\x2\x2\x5EC\x5EF\ag\x2\x2\x5ED\x5F0\x5\x82\x42\x2\x5EE\x5F0"+
		"\x5\x84\x43\x2\x5EF\x5ED\x3\x2\x2\x2\x5EF\x5EE\x3\x2\x2\x2\x5F0\x5F2\x3"+
		"\x2\x2\x2\x5F1\x5F3\a\xF0\x2\x2\x5F2\x5F1\x3\x2\x2\x2\x5F2\x5F3\x3\x2"+
		"\x2\x2\x5F3\x5F4\x3\x2\x2\x2\x5F4\x5F7\x5$\x13\x2\x5F5\x5F6\a\x6\x2\x2"+
		"\x5F6\x5F8\x5\xFE\x80\x2\x5F7\x5F5\x3\x2\x2\x2\x5F7\x5F8\x3\x2\x2\x2\x5F8"+
		"\x5FB\x3\x2\x2\x2\x5F9\x5FA\a\x15D\x2\x2\x5FA\x5FC\x5\xCEh\x2\x5FB\x5F9"+
		"\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FD\x3\x2\x2\x2\x5FD\x5FE\x5"+
		"\xE\b\x2\x5FE\x602\x5*\x16\x2\x5FF\x600\a\x19\x2\x2\x600\x601\ag\x2\x2"+
		"\x601\x603\a\x167\x2\x2\x602\x5FF\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603"+
		"\x87\x3\x2\x2\x2\x604\x606\t\x1E\x2\x2\x605\x604\x3\x2\x2\x2\x606\x607"+
		"\x3\x2\x2\x2\x607\x605\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x89\x3\x2"+
		"\x2\x2\x609\x60B\t\x1F\x2\x2\x60A\x609\x3\x2\x2\x2\x60B\x60C\x3\x2\x2"+
		"\x2\x60C\x60A\x3\x2\x2\x2\x60C\x60D\x3\x2\x2\x2\x60D\x8B\x3\x2\x2\x2\x60E"+
		"\x610\x5\x8EH\x2\x60F\x60E\x3\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x60F"+
		"\x3\x2\x2\x2\x611\x612\x3\x2\x2\x2\x612\x8D\x3\x2\x2\x2\x613\x615\a\x124"+
		"\x2\x2\x614\x616\x5\x90I\x2\x615\x614\x3\x2\x2\x2\x615\x616\x3\x2\x2\x2"+
		"\x616\x617\x3\x2\x2\x2\x617\x61C\x5\x92J\x2\x618\x619\a\x127\x2\x2\x619"+
		"\x61B\x5\x92J\x2\x61A\x618\x3\x2\x2\x2\x61B\x61E\x3\x2\x2\x2\x61C\x61A"+
		"\x3\x2\x2\x2\x61C\x61D\x3\x2\x2\x2\x61D\x61F\x3\x2\x2\x2\x61E\x61C\x3"+
		"\x2\x2\x2\x61F\x620\a\x125\x2\x2\x620\x623\x3\x2\x2\x2\x621\x623\a\x144"+
		"\x2\x2\x622\x613\x3\x2\x2\x2\x622\x621\x3\x2\x2\x2\x623\x8F\x3\x2\x2\x2"+
		"\x624\x625\t \x2\x2\x625\x626\a\x126\x2\x2\x626\x91\x3\x2\x2\x2\x627\x634"+
		"\x5\xF0y\x2\x628\x631\a\x120\x2\x2\x629\x62E\x5\x94K\x2\x62A\x62B\a\x127"+
		"\x2\x2\x62B\x62D\x5\x94K\x2\x62C\x62A\x3\x2\x2\x2\x62D\x630\x3\x2\x2\x2"+
		"\x62E\x62C\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x632\x3\x2\x2\x2\x630"+
		"\x62E\x3\x2\x2\x2\x631\x629\x3\x2\x2\x2\x631\x632\x3\x2\x2\x2\x632\x633"+
		"\x3\x2\x2\x2\x633\x635\a\x121\x2\x2\x634\x628\x3\x2\x2\x2\x634\x635\x3"+
		"\x2\x2\x2\x635\x93\x3\x2\x2\x2\x636\x637\x5\xF8}\x2\x637\x638\x5\xCCg"+
		"\x2\x638\x639\x5\xCEh\x2\x639\x63C\x3\x2\x2\x2\x63A\x63C\x5\xCEh\x2\x63B"+
		"\x636\x3\x2\x2\x2\x63B\x63A\x3\x2\x2\x2\x63C\x95\x3\x2\x2\x2\x63D\x63E"+
		"\a\x124\x2\x2\x63E\x63F\x5\x98M\x2\x63F\x644\x5\x92J\x2\x640\x641\a\x127"+
		"\x2\x2\x641\x643\x5\x92J\x2\x642\x640\x3\x2\x2\x2\x643\x646\x3\x2\x2\x2"+
		"\x644\x642\x3\x2\x2\x2\x644\x645\x3\x2\x2\x2\x645\x647\x3\x2\x2\x2\x646"+
		"\x644\x3\x2\x2\x2\x647\x648\a\x125\x2\x2\x648\x649\a\x167\x2\x2\x649\x97"+
		"\x3\x2\x2\x2\x64A\x64B\a\x15E\x2\x2\x64B\x64C\a\x126\x2\x2\x64C\x99\x3"+
		"\x2\x2\x2\x64D\x64E\a\x31\x2\x2\x64E\x653\x5\xF8}\x2\x64F\x650\a\x127"+
		"\x2\x2\x650\x652\x5\xF8}\x2\x651\x64F\x3\x2\x2\x2\x652\x655\x3\x2\x2\x2"+
		"\x653\x651\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x656\x3\x2\x2\x2\x655"+
		"\x653\x3\x2\x2\x2\x656\x657\x5\xE\b\x2\x657\x680\x3\x2\x2\x2\x658\x659"+
		"\a \x2\x2\x659\x65E\x5\xF8}\x2\x65A\x65B\a\x127\x2\x2\x65B\x65D\x5\xF8"+
		"}\x2\x65C\x65A\x3\x2\x2\x2\x65D\x660\x3\x2\x2\x2\x65E\x65C\x3\x2\x2\x2"+
		"\x65E\x65F\x3\x2\x2\x2\x65F\x663\x3\x2\x2\x2\x660\x65E\x3\x2\x2\x2\x661"+
		"\x662\a-\x2\x2\x662\x664\x5\xF8}\x2\x663\x661\x3\x2\x2\x2\x663\x664\x3"+
		"\x2\x2\x2\x664\x665\x3\x2\x2\x2\x665\x666\x5\xE\b\x2\x666\x680\x3\x2\x2"+
		"\x2\x667\x668\x6N\xE\x2\x668\x669\a;\x2\x2\x669\x66E\x5\xB6\\\x2\x66A"+
		"\x66B\a\x127\x2\x2\x66B\x66D\x5\xB6\\\x2\x66C\x66A\x3\x2\x2\x2\x66D\x670"+
		"\x3\x2\x2\x2\x66E\x66C\x3\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x671\x3"+
		"\x2\x2\x2\x670\x66E\x3\x2\x2\x2\x671\x672\x5\xE\b\x2\x672\x680\x3\x2\x2"+
		"\x2\x673\x674\x6N\xF\x2\x674\x675\a;\x2\x2\x675\x67A\x5\xC6\x64\x2\x676"+
		"\x677\a\x127\x2\x2\x677\x679\x5\xC6\x64\x2\x678\x676\x3\x2\x2\x2\x679"+
		"\x67C\x3\x2\x2\x2\x67A\x678\x3\x2\x2\x2\x67A\x67B\x3\x2\x2\x2\x67B\x67D"+
		"\x3\x2\x2\x2\x67C\x67A\x3\x2\x2\x2\x67D\x67E\x5\xE\b\x2\x67E\x680\x3\x2"+
		"\x2\x2\x67F\x64D\x3\x2\x2\x2\x67F\x658\x3\x2\x2\x2\x67F\x667\x3\x2\x2"+
		"\x2\x67F\x673\x3\x2\x2\x2\x680\x9B\x3\x2\x2\x2\x681\x7E8\x5\xACW\x2\x682"+
		"\x7E8\x5\xBC_\x2\x683\x7E8\x5\xC8\x65\x2\x684\x685\x6O\x10\x2\x685\x7E8"+
		"\x5\xB4[\x2\x686\x7E8\x5\xB2Z\x2\x687\x688\x6O\x11\x2\x688\x7E8\x5\xB8"+
		"]\x2\x689\x68A\x6O\x12\x2\x68A\x7E8\x5\xBA^\x2\x68B\x68D\a\x15\x2\x2\x68C"+
		"\x68B\x3\x2\x2\x2\x68C\x68D\x3\x2\x2\x2\x68D\x68E\x3\x2\x2\x2\x68E\x68F"+
		"\aK\x2\x2\x68F\x690\x5\xCEh\x2\x690\x691\x5\xE\b\x2\x691\x697\x5*\x16"+
		"\x2\x692\x694\a\x19\x2\x2\x693\x695\t!\x2\x2\x694\x693\x3\x2\x2\x2\x694"+
		"\x695\x3\x2\x2\x2\x695\x698\x3\x2\x2\x2\x696\x698\a\x1B\x2\x2\x697\x692"+
		"\x3\x2\x2\x2\x697\x696\x3\x2\x2\x2\x698\x699\x3\x2\x2\x2\x699\x69A\x5"+
		"\xE\b\x2\x69A\x7E8\x3\x2\x2\x2\x69B\x69E\a\x88\x2\x2\x69C\x69D\a\x120"+
		"\x2\x2\x69D\x69F\a\x121\x2\x2\x69E\x69C\x3\x2\x2\x2\x69E\x69F\x3\x2\x2"+
		"\x2\x69F\x6A0\x3\x2\x2\x2\x6A0\x7E8\x5\xE\b\x2\x6A1\x6B6\a!\x2\x2\x6A2"+
		"\x6B7\x5\xCEh\x2\x6A3\x6A5\a.\x2\x2\x6A4\x6A3\x3\x2\x2\x2\x6A4\x6A5\x3"+
		"\x2\x2\x2\x6A5\x6A6\x3\x2\x2\x2\x6A6\x6A9\a`\x2\x2\x6A7\x6A9\a\x94\x2"+
		"\x2\x6A8\x6A4\x3\x2\x2\x2\x6A8\x6A7\x3\x2\x2\x2\x6A9\x6AA\x3\x2\x2\x2"+
		"\x6AA\x6AB\x5\x13C\x9F\x2\x6AB\x6AC\x5\xCCg\x2\x6AC\x6AD\x5\xCEh\x2\x6AD"+
		"\x6B7\x3\x2\x2\x2\x6AE\x6AF\a.\x2\x2\x6AF\x6B0\x5\x13C\x9F\x2\x6B0\x6B1"+
		"\x5\xCCg\x2\x6B1\x6B4\x5\xCEh\x2\x6B2\x6B3\a\x6\x2\x2\x6B3\x6B5\x5\xFE"+
		"\x80\x2\x6B4\x6B2\x3\x2\x2\x2\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B7\x3\x2\x2"+
		"\x2\x6B6\x6A2\x3\x2\x2\x2\x6B6\x6A8\x3\x2\x2\x2\x6B6\x6AE\x3\x2\x2\x2"+
		"\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6B9\t\"\x2\x2\x6B9\x6BC\x5\xCEh\x2\x6BA\x6BB"+
		"\a\x42\x2\x2\x6BB\x6BD\x5\xCEh\x2\x6BC\x6BA\x3\x2\x2\x2\x6BC\x6BD\x3\x2"+
		"\x2\x2\x6BD\x6BE\x3\x2\x2\x2\x6BE\x6BF\x5\xE\b\x2\x6BF\x6C2\x5*\x16\x2"+
		"\x6C0\x6C3\a\x34\x2\x2\x6C1\x6C3\a\xD9\x2\x2\x6C2\x6C0\x3\x2\x2\x2\x6C2"+
		"\x6C1\x3\x2\x2\x2\x6C3\x6C4\x3\x2\x2\x2\x6C4\x6C5\x5\xE\b\x2\x6C5\x7E8"+
		"\x3\x2\x2\x2\x6C6\x6C7\a%\x2\x2\x6C7\x6CC\x5\xA0Q\x2\x6C8\x6C9\a\x18\x2"+
		"\x2\x6C9\x6CB\x5\xA0Q\x2\x6CA\x6C8\x3\x2\x2\x2\x6CB\x6CE\x3\x2\x2\x2\x6CC"+
		"\x6CA\x3\x2\x2\x2\x6CC\x6CD\x3\x2\x2\x2\x6CD\x6D3\x3\x2\x2\x2\x6CE\x6CC"+
		"\x3\x2\x2\x2\x6CF\x6D0\a\x17\x2\x2\x6D0\x6D1\x5\xE\b\x2\x6D1\x6D2\x5*"+
		"\x16\x2\x6D2\x6D4\x3\x2\x2\x2\x6D3\x6CF\x3\x2\x2\x2\x6D3\x6D4\x3\x2\x2"+
		"\x2\x6D4\x6DA\x3\x2\x2\x2\x6D5\x6D7\a\x19\x2\x2\x6D6\x6D8\a%\x2\x2\x6D7"+
		"\x6D6\x3\x2\x2\x2\x6D7\x6D8\x3\x2\x2\x2\x6D8\x6DB\x3\x2\x2\x2\x6D9\x6DB"+
		"\a\x1C\x2\x2\x6DA\x6D5\x3\x2\x2\x2\x6DA\x6D9\x3\x2\x2\x2\x6DB\x6DC\x3"+
		"\x2\x2\x2\x6DC\x6DD\x5\xE\b\x2\x6DD\x7E8\x3\x2\x2\x2\x6DE\x6DF\a\x15\x2"+
		"\x2\x6DF\x6E0\a\f\x2\x2\x6E0\x6E5\x5\xE\b\x2\x6E1\x6E2\a\f\x2\x2\x6E2"+
		"\x6E4\x5\xA0Q\x2\x6E3\x6E1\x3\x2\x2\x2\x6E4\x6E7\x3\x2\x2\x2\x6E5\x6E3"+
		"\x3\x2\x2\x2\x6E5\x6E6\x3\x2\x2\x2\x6E6\x6EC\x3\x2\x2\x2\x6E7\x6E5\x3"+
		"\x2\x2\x2\x6E8\x6E9\a\x35\x2\x2\x6E9\x6EA\x5\xE\b\x2\x6EA\x6EB\x5*\x16"+
		"\x2\x6EB\x6ED\x3\x2\x2\x2\x6EC\x6E8\x3\x2\x2\x2\x6EC\x6ED\x3\x2\x2\x2"+
		"\x6ED\x6F3\x3\x2\x2\x2\x6EE\x6F0\a\x19\x2\x2\x6EF\x6F1\a\f\x2\x2\x6F0"+
		"\x6EF\x3\x2\x2\x2\x6F0\x6F1\x3\x2\x2\x2\x6F1\x6F4\x3\x2\x2\x2\x6F2\x6F4"+
		"\a\x1A\x2\x2\x6F3\x6EE\x3\x2\x2\x2\x6F3\x6F2\x3\x2\x2\x2\x6F4\x6F5\x3"+
		"\x2\x2\x2\x6F5\x6F6\x5\xE\b\x2\x6F6\x7E8\x3\x2\x2\x2\x6F7\x6F8\a\x1D\x2"+
		"\x2\x6F8\x7E8\x5\xE\b\x2\x6F9\x6FA\a/\x2\x2\x6FA\x7E8\x5\xE\b\x2\x6FB"+
		"\x6FD\a\n\x2\x2\x6FC\x6FE\x5\xCEh\x2\x6FD\x6FC\x3\x2\x2\x2\x6FD\x6FE\x3"+
		"\x2\x2\x2\x6FE\x6FF\x3\x2\x2\x2\x6FF\x7E8\x5\xE\b\x2\x700\x703\a=\x2\x2"+
		"\x701\x704\a\xAF\x2\x2\x702\x704\x5\xCEh\x2\x703\x701\x3\x2\x2\x2\x703"+
		"\x702\x3\x2\x2\x2\x703\x704\x3\x2\x2\x2\x704\x705\x3\x2\x2\x2\x705\x7E8"+
		"\x5\xE\b\x2\x706\x70F\t#\x2\x2\x707\x70C\x5\xCEh\x2\x708\x709\a\x127\x2"+
		"\x2\x709\x70B\x5\xCEh\x2\x70A\x708\x3\x2\x2\x2\x70B\x70E\x3\x2\x2\x2\x70C"+
		"\x70A\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x710\x3\x2\x2\x2\x70E\x70C"+
		"\x3\x2\x2\x2\x70F\x707\x3\x2\x2\x2\x70F\x710\x3\x2\x2\x2\x710\x711\x3"+
		"\x2\x2\x2\x711\x7E8\x5\xE\b\x2\x712\x713\a\t\x2\x2\x713\x714\a?\x2\x2"+
		"\x714\x715\x5\xE\b\x2\x715\x718\x5*\x16\x2\x716\x717\a<\x2\x2\x717\x719"+
		"\x5\xA6T\x2\x718\x716\x3\x2\x2\x2\x718\x719\x3\x2\x2\x2\x719\x71E\x3\x2"+
		"\x2\x2\x71A\x71B\aN\x2\x2\x71B\x71C\x5\xE\b\x2\x71C\x71D\x5*\x16\x2\x71D"+
		"\x71F\x3\x2\x2\x2\x71E\x71A\x3\x2\x2\x2\x71E\x71F\x3\x2\x2\x2\x71F\x725"+
		"\x3\x2\x2\x2\x720\x722\a\x19\x2\x2\x721\x723\a?\x2\x2\x722\x721\x3\x2"+
		"\x2\x2\x722\x723\x3\x2\x2\x2\x723\x726\x3\x2\x2\x2\x724\x726\a\xC2\x2"+
		"\x2\x725\x720\x3\x2\x2\x2\x725\x724\x3\x2\x2\x2\x726\x727\x3\x2\x2\x2"+
		"\x727\x728\x5\xE\b\x2\x728\x7E8\x3\x2\x2\x2\x729\x72A\ak\x2\x2\x72A\x72B"+
		"\x5\xE\b\x2\x72B\x72C\x5*\x16\x2\x72C\x72D\ar\x2\x2\x72D\x72E\x5\xCEh"+
		"\x2\x72E\x72F\x5\xE\b\x2\x72F\x7E8\x3\x2\x2\x2\x730\x734\a\\\x2\x2\x731"+
		"\x732\a!\x2\x2\x732\x734\a\xDE\x2\x2\x733\x730\x3\x2\x2\x2\x733\x731\x3"+
		"\x2\x2\x2\x734\x736\x3\x2\x2\x2\x735\x737\a{\x2\x2\x736\x735\x3\x2\x2"+
		"\x2\x736\x737\x3\x2\x2\x2\x737\x741\x3\x2\x2\x2\x738\x739\a`\x2\x2\x739"+
		"\x742\x5\xFA~\x2\x73A\x73D\x5\xFA~\x2\x73B\x73C\a\x6\x2\x2\x73C\x73E\x5"+
		"\xFE\x80\x2\x73D\x73B\x3\x2\x2\x2\x73D\x73E\x3\x2\x2\x2\x73E\x742\x3\x2"+
		"\x2\x2\x73F\x740\a\x94\x2\x2\x740\x742\x5\xFA~\x2\x741\x738\x3\x2\x2\x2"+
		"\x741\x73A\x3\x2\x2\x2\x741\x73F\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2\x743"+
		"\x744\a-\x2\x2\x744\x745\x5\xCEh\x2\x745\x746\x5\xE\b\x2\x746\x749\x5"+
		"*\x16\x2\x747\x74A\a\x34\x2\x2\x748\x74A\a\xD9\x2\x2\x749\x747\x3\x2\x2"+
		"\x2\x749\x748\x3\x2\x2\x2\x74A\x74B\x3\x2\x2\x2\x74B\x74C\x5\xE\b\x2\x74C"+
		"\x7E8\x3\x2\x2\x2\x74D\x74F\aO\x2\x2\x74E\x750\x5\xCEh\x2\x74F\x74E\x3"+
		"\x2\x2\x2\x74F\x750\x3\x2\x2\x2\x750\x751\x3\x2\x2\x2\x751\x7E8\x5\xE"+
		"\b\x2\x752\x753\ap\x2\x2\x753\x754\x5\xE\b\x2\x754\x75B\x5*\x16\x2\x755"+
		"\x757\aM\x2\x2\x756\x758\x5\xA4S\x2\x757\x756\x3\x2\x2\x2\x757\x758\x3"+
		"\x2\x2\x2\x758\x75A\x3\x2\x2\x2\x759\x755\x3\x2\x2\x2\x75A\x75D\x3\x2"+
		"\x2\x2\x75B\x759\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x762\x3\x2\x2"+
		"\x2\x75D\x75B\x3\x2\x2\x2\x75E\x75F\aN\x2\x2\x75F\x760\x5\xE\b\x2\x760"+
		"\x761\x5*\x16\x2\x761\x763\x3\x2\x2\x2\x762\x75E\x3\x2\x2\x2\x762\x763"+
		"\x3\x2\x2\x2\x763\x769\x3\x2\x2\x2\x764\x766\a\x19\x2\x2\x765\x767\ap"+
		"\x2\x2\x766\x765\x3\x2\x2\x2\x766\x767\x3\x2\x2\x2\x767\x76A\x3\x2\x2"+
		"\x2\x768\x76A\a\xDC\x2\x2\x769\x764\x3\x2\x2\x2\x769\x768\x3\x2\x2\x2"+
		"\x76A\x76B\x3\x2\x2\x2\x76B\x76C\x5\xE\b\x2\x76C\x7E8\x3\x2\x2\x2\x76D"+
		"\x76E\a\t\x2\x2\x76E\x76F\a\x64\x2\x2\x76F\x770\x5\xCEh\x2\x770\x771\x5"+
		"\xE\b\x2\x771\x772\x5*\x16\x2\x772\x774\a\x19\x2\x2\x773\x775\a\x64\x2"+
		"\x2\x774\x773\x3\x2\x2\x2\x774\x775\x3\x2\x2\x2\x775\x776\x3\x2\x2\x2"+
		"\x776\x777\x5\xE\b\x2\x777\x7E8\x3\x2\x2\x2\x778\x779\a\x98\x2\x2\x779"+
		"\x77C\a=\x2\x2\x77A\x77D\a\xAF\x2\x2\x77B\x77D\x5\xCEh\x2\x77C\x77A\x3"+
		"\x2\x2\x2\x77C\x77B\x3\x2\x2\x2\x77C\x77D\x3\x2\x2\x2\x77D\x77E\x3\x2"+
		"\x2\x2\x77E\x7E8\x5\xE\b\x2\x77F\x780\a\x98\x2\x2\x780\x781\t$\x2\x2\x781"+
		"\x7E8\x5\xE\b\x2\x782\x784\t%\x2\x2\x783\x782\x3\x2\x2\x2\x783\x784\x3"+
		"\x2\x2\x2\x784\x785\x3\x2\x2\x2\x785\x786\a\x91\x2\x2\x786\x787\x5\xCE"+
		"h\x2\x787\x789\x5\xE\b\x2\x788\x78A\x5\xA2R\x2\x789\x788\x3\x2\x2\x2\x78A"+
		"\x78B\x3\x2\x2\x2\x78B\x789\x3\x2\x2\x2\x78B\x78C\x3\x2\x2\x2\x78C\x78D"+
		"\x3\x2\x2\x2\x78D\x78F\a\x19\x2\x2\x78E\x790\a\x91\x2\x2\x78F\x78E\x3"+
		"\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x791\x3\x2\x2\x2\x791\x792\x5\xE"+
		"\b\x2\x792\x7E8\x3\x2\x2\x2\x793\x794\a\t\x2\x2\x794\x797\aJ\x2\x2\x795"+
		"\x798\x5\xCEh\x2\x796\x798\x5\xA8U\x2\x797\x795\x3\x2\x2\x2\x797\x796"+
		"\x3\x2\x2\x2\x798\x799\x3\x2\x2\x2\x799\x79A\x5\xE\b\x2\x79A\x79B\x5*"+
		"\x16\x2\x79B\x79D\a\x19\x2\x2\x79C\x79E\aJ\x2\x2\x79D\x79C\x3\x2\x2\x2"+
		"\x79D\x79E\x3\x2\x2\x2\x79E\x79F\x3\x2\x2\x2\x79F\x7A0\x5\xE\b\x2\x7A0"+
		"\x7E8\x3\x2\x2\x2\x7A1\x7A2\a\t\x2\x2\x7A2\x7A3\a\x81\x2\x2\x7A3\x7A4"+
		"\x5\xA8U\x2\x7A4\x7A5\x5\xE\b\x2\x7A5\x7A6\x5*\x16\x2\x7A6\x7A8\a\x19"+
		"\x2\x2\x7A7\x7A9\a\x81\x2\x2\x7A8\x7A7\x3\x2\x2\x2\x7A8\x7A9\x3\x2\x2"+
		"\x2\x7A9\x7AA\x3\x2\x2\x2\x7AA\x7AB\x5\xE\b\x2\x7AB\x7E8\x3\x2\x2\x2\x7AC"+
		"\x7AD\a\x99\x2\x2\x7AD\x7B3\x5\xCEh\x2\x7AE\x7AF\a\x6\x2\x2\x7AF\x7B1"+
		"\x5\xFE\x80\x2\x7B0\x7B2\x5\xC0\x61\x2\x7B1\x7B0\x3\x2\x2\x2\x7B1\x7B2"+
		"\x3\x2\x2\x2\x7B2\x7B4\x3\x2\x2\x2\x7B3\x7AE\x3\x2\x2\x2\x7B3\x7B4\x3"+
		"\x2\x2\x2\x7B4\x7B5\x3\x2\x2\x2\x7B5\x7B6\x5\xE\b\x2\x7B6\x7BC\x5*\x16"+
		"\x2\x7B7\x7B9\a\x19\x2\x2\x7B8\x7BA\a\x99\x2\x2\x7B9\x7B8\x3\x2\x2\x2"+
		"\x7B9\x7BA\x3\x2\x2\x2\x7BA\x7BD\x3\x2\x2\x2\x7BB\x7BD\a\xDD\x2\x2\x7BC"+
		"\x7B7\x3\x2\x2\x2\x7BC\x7BB\x3\x2\x2\x2\x7BD\x7BE\x3\x2\x2\x2\x7BE\x7BF"+
		"\x5\xE\b\x2\x7BF\x7E8\x3\x2\x2\x2\x7C0\x7C1\a\t\x2\x2\x7C1\x7C2\x5\x9E"+
		"P\x2\x7C2\x7C3\x5\xE\b\x2\x7C3\x7C4\x5*\x16\x2\x7C4\x7C6\a\x19\x2\x2\x7C5"+
		"\x7C7\x5\x9EP\x2\x7C6\x7C5\x3\x2\x2\x2\x7C6\x7C7\x3\x2\x2\x2\x7C7\x7C8"+
		"\x3\x2\x2\x2\x7C8\x7C9\x5\xE\b\x2\x7C9\x7E8\x3\x2\x2\x2\x7CA\x7CB\a\xF2"+
		"\x2\x2\x7CB\x7CC\x5\xCEh\x2\x7CC\x7CD\x5\xE\b\x2\x7CD\x7E8\x3\x2\x2\x2"+
		"\x7CE\x7CF\t&\x2\x2\x7CF\x7D0\a\x143\x2\x2\x7D0\x7E8\a\x167\x2\x2\x7D1"+
		"\x7D3\a\x15\x2\x2\x7D2\x7D4\a\x129\x2\x2\x7D3\x7D2\x3\x2\x2\x2\x7D3\x7D4"+
		"\x3\x2\x2\x2\x7D4\x7D5\x3\x2\x2\x2\x7D5\x7D8\x5\xFC\x7F\x2\x7D6\x7D7\a"+
		"\x99\x2\x2\x7D7\x7D9\x5\xE8u\x2\x7D8\x7D6\x3\x2\x2\x2\x7D8\x7D9\x3\x2"+
		"\x2\x2\x7D9\x7DA\x3\x2\x2\x2\x7DA\x7DB\x5\xE\b\x2\x7DB\x7E8\x3\x2\x2\x2"+
		"\x7DC\x7DD\x6O\x13\x2\x7DD\x7E2\x5\xCEh\x2\x7DE\x7DF\a\x127\x2\x2\x7DF"+
		"\x7E1\x5\xCEh\x2\x7E0\x7DE\x3\x2\x2\x2\x7E1\x7E4\x3\x2\x2\x2\x7E2\x7E0"+
		"\x3\x2\x2\x2\x7E2\x7E3\x3\x2\x2\x2\x7E3\x7E5\x3\x2\x2\x2\x7E4\x7E2\x3"+
		"\x2\x2\x2\x7E5\x7E6\x5\xE\b\x2\x7E6\x7E8\x3\x2\x2\x2\x7E7\x681\x3\x2\x2"+
		"\x2\x7E7\x682\x3\x2\x2\x2\x7E7\x683\x3\x2\x2\x2\x7E7\x684\x3\x2\x2\x2"+
		"\x7E7\x686\x3\x2\x2\x2\x7E7\x687\x3\x2\x2\x2\x7E7\x689\x3\x2\x2\x2\x7E7"+
		"\x68C\x3\x2\x2\x2\x7E7\x69B\x3\x2\x2\x2\x7E7\x6A1\x3\x2\x2\x2\x7E7\x6C6"+
		"\x3\x2\x2\x2\x7E7\x6DE\x3\x2\x2\x2\x7E7\x6F7\x3\x2\x2\x2\x7E7\x6F9\x3"+
		"\x2\x2\x2\x7E7\x6FB\x3\x2\x2\x2\x7E7\x700\x3\x2\x2\x2\x7E7\x706\x3\x2"+
		"\x2\x2\x7E7\x712\x3\x2\x2\x2\x7E7\x729\x3\x2\x2\x2\x7E7\x733\x3\x2\x2"+
		"\x2\x7E7\x74D\x3\x2\x2\x2\x7E7\x752\x3\x2\x2\x2\x7E7\x76D\x3\x2\x2\x2"+
		"\x7E7\x778\x3\x2\x2\x2\x7E7\x77F\x3\x2\x2\x2\x7E7\x783\x3\x2\x2\x2\x7E7"+
		"\x793\x3\x2\x2\x2\x7E7\x7A1\x3\x2\x2\x2\x7E7\x7AC\x3\x2\x2\x2\x7E7\x7C0"+
		"\x3\x2\x2\x2\x7E7\x7CA\x3\x2\x2\x2\x7E7\x7CE\x3\x2\x2\x2\x7E7\x7D1\x3"+
		"\x2\x2\x2\x7E7\x7DC\x3\x2\x2\x2\x7E8\x9D\x3\x2\x2\x2\x7E9\x7EA\t\'\x2"+
		"\x2\x7EA\x9F\x3\x2\x2\x2\x7EB\x7ED\x5\xCEh\x2\x7EC\x7EE\a\xD5\x2\x2\x7ED"+
		"\x7EC\x3\x2\x2\x2\x7ED\x7EE\x3\x2\x2\x2\x7EE\x7EF\x3\x2\x2\x2\x7EF\x7F0"+
		"\x5\xE\b\x2\x7F0\x7F1\x5*\x16\x2\x7F1\xA1\x3\x2\x2\x2\x7F2\x7F3\a\f\x2"+
		"\x2\x7F3\x7F6\x5\xCEh\x2\x7F4\x7F5\a\x96\x2\x2\x7F5\x7F7\x5\xCEh\x2\x7F6"+
		"\x7F4\x3\x2\x2\x2\x7F6\x7F7\x3\x2\x2\x2\x7F7\x802\x3\x2\x2\x2\x7F8\x7F9"+
		"\a\f\x2\x2\x7F9\x7FA\x5\xFA~\x2\x7FA\x7FB\a\x6\x2\x2\x7FB\x7FE\x5\xFE"+
		"\x80\x2\x7FC\x7FD\a\x96\x2\x2\x7FD\x7FF\x5\xCEh\x2\x7FE\x7FC\x3\x2\x2"+
		"\x2\x7FE\x7FF\x3\x2\x2\x2\x7FF\x802\x3\x2\x2\x2\x800\x802\a\x35\x2\x2"+
		"\x801\x7F2\x3\x2\x2\x2\x801\x7F8\x3\x2\x2\x2\x801\x800\x3\x2\x2\x2\x802"+
		"\x803\x3\x2\x2\x2\x803\x804\x5\xE\b\x2\x804\x805\x5*\x16\x2\x805\xA3\x3"+
		"\x2\x2\x2\x806\x808\a\x46\x2\x2\x807\x806\x3\x2\x2\x2\x807\x808\x3\x2"+
		"\x2\x2\x808\x80A\x3\x2\x2\x2\x809\x80B\x5\xFA~\x2\x80A\x809\x3\x2\x2\x2"+
		"\x80A\x80B\x3\x2\x2\x2\x80B\x80E\x3\x2\x2\x2\x80C\x80D\a\x6\x2\x2\x80D"+
		"\x80F\x5\xFE\x80\x2\x80E\x80C\x3\x2\x2\x2\x80E\x80F\x3\x2\x2\x2\x80F\x812"+
		"\x3\x2\x2\x2\x810\x811\a\x96\x2\x2\x811\x813\x5\xCEh\x2\x812\x810\x3\x2"+
		"\x2\x2\x812\x813\x3\x2\x2\x2\x813\x814\x3\x2\x2\x2\x814\x815\x5\xE\b\x2"+
		"\x815\x816\x5*\x16\x2\x816\xA5\x3\x2\x2\x2\x817\x818\aJ\x2\x2\x818\x81A"+
		"\x5\xFA~\x2\x819\x817\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x81B\x3\x2"+
		"\x2\x2\x81B\x81C\x5\xE\b\x2\x81C\x81D\x5*\x16\x2\x81D\xA7\x3\x2\x2\x2"+
		"\x81E\x820\a.\x2\x2\x81F\x81E\x3\x2\x2\x2\x81F\x820\x3\x2\x2\x2\x820\x821"+
		"\x3\x2\x2\x2\x821\x824\a`\x2\x2\x822\x824\a\x94\x2\x2\x823\x81F\x3\x2"+
		"\x2\x2\x823\x822\x3\x2\x2\x2\x824\x825\x3\x2\x2\x2\x825\x82A\x5\xAAV\x2"+
		"\x826\x827\a\x127\x2\x2\x827\x829\x5\xAAV\x2\x828\x826\x3\x2\x2\x2\x829"+
		"\x82C\x3\x2\x2\x2\x82A\x828\x3\x2\x2\x2\x82A\x82B\x3\x2\x2\x2\x82B\x83B"+
		"\x3\x2\x2\x2\x82C\x82A\x3\x2\x2\x2\x82D\x82E\a.\x2\x2\x82E\x833\x5\xAA"+
		"V\x2\x82F\x830\a\x127\x2\x2\x830\x832\x5\xAAV\x2\x831\x82F\x3\x2\x2\x2"+
		"\x832\x835\x3\x2\x2\x2\x833\x831\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834"+
		"\x838\x3\x2\x2\x2\x835\x833\x3\x2\x2\x2\x836\x837\a\x6\x2\x2\x837\x839"+
		"\x5\xFE\x80\x2\x838\x836\x3\x2\x2\x2\x838\x839\x3\x2\x2\x2\x839\x83B\x3"+
		"\x2\x2\x2\x83A\x823\x3\x2\x2\x2\x83A\x82D\x3\x2\x2\x2\x83B\xA9\x3\x2\x2"+
		"\x2\x83C\x83D\x5\xFA~\x2\x83D\x83E\x5\xCCg\x2\x83E\x83F\x5\xCEh\x2\x83F"+
		"\xAB\x3\x2\x2\x2\x840\x842\a.\x2\x2\x841\x843\a\x41\x2\x2\x842\x841\x3"+
		"\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x844\x3\x2\x2\x2\x844\x849\x5\xAE"+
		"X\x2\x845\x846\a\x127\x2\x2\x846\x848\x5\xAEX\x2\x847\x845\x3\x2\x2\x2"+
		"\x848\x84B\x3\x2\x2\x2\x849\x847\x3\x2\x2\x2\x849\x84A\x3\x2\x2\x2\x84A"+
		"\x84C\x3\x2\x2\x2\x84B\x849\x3\x2\x2\x2\x84C\x84D\x5\xE\b\x2\x84D\x8C6"+
		"\x3\x2\x2\x2\x84E\x84F\a\x41\x2\x2\x84F\x850\a.\x2\x2\x850\x855\x5\xAE"+
		"X\x2\x851\x852\a\x127\x2\x2\x852\x854\x5\xAEX\x2\x853\x851\x3\x2\x2\x2"+
		"\x854\x857\x3\x2\x2\x2\x855\x853\x3\x2\x2\x2\x855\x856\x3\x2\x2\x2\x856"+
		"\x858\x3\x2\x2\x2\x857\x855\x3\x2\x2\x2\x858\x859\x5\xE\b\x2\x859\x8C6"+
		"\x3\x2\x2\x2\x85A\x85B\x6W\x14\x2\x85B\x85C\a\x41\x2\x2\x85C\x861\x5\xAE"+
		"X\x2\x85D\x85E\a\x127\x2\x2\x85E\x860\x5\xAEX\x2\x85F\x85D\x3\x2\x2\x2"+
		"\x860\x863\x3\x2\x2\x2\x861\x85F\x3\x2\x2\x2\x861\x862\x3\x2\x2\x2\x862"+
		"\x864\x3\x2\x2\x2\x863\x861\x3\x2\x2\x2\x864\x865\x5\xE\b\x2\x865\x8C6"+
		"\x3\x2\x2\x2\x866\x868\a\x41\x2\x2\x867\x866\x3\x2\x2\x2\x867\x868\x3"+
		"\x2\x2\x2\x868\x869\x3\x2\x2\x2\x869\x86A\a\x94\x2\x2\x86A\x86F\x5\xB0"+
		"Y\x2\x86B\x86C\a\x127\x2\x2\x86C\x86E\x5\xB0Y\x2\x86D\x86B\x3\x2\x2\x2"+
		"\x86E\x871\x3\x2\x2\x2\x86F\x86D\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2\x870"+
		"\x872\x3\x2\x2\x2\x871\x86F\x3\x2\x2\x2\x872\x873\x5\xE\b\x2\x873\x8C6"+
		"\x3\x2\x2\x2\x874\x876\a\x41\x2\x2\x875\x877\a.\x2\x2\x876\x875\x3\x2"+
		"\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\x3\x2\x2\x2\x878\x879\a`\x2\x2"+
		"\x879\x87E\x5\xB0Y\x2\x87A\x87B\a\x127\x2\x2\x87B\x87D\x5\xB0Y\x2\x87C"+
		"\x87A\x3\x2\x2\x2\x87D\x880\x3\x2\x2\x2\x87E\x87C\x3\x2\x2\x2\x87E\x87F"+
		"\x3\x2\x2\x2\x87F\x881\x3\x2\x2\x2\x880\x87E\x3\x2\x2\x2\x881\x882\x5"+
		"\xE\b\x2\x882\x8C6\x3\x2\x2\x2\x883\x885\a.\x2\x2\x884\x886\a\x41\x2\x2"+
		"\x885\x884\x3\x2\x2\x2\x885\x886\x3\x2\x2\x2\x886\x887\x3\x2\x2\x2\x887"+
		"\x888\a`\x2\x2\x888\x88D\x5\xB0Y\x2\x889\x88A\a\x127\x2\x2\x88A\x88C\x5"+
		"\xB0Y\x2\x88B\x889\x3\x2\x2\x2\x88C\x88F\x3\x2\x2\x2\x88D\x88B\x3\x2\x2"+
		"\x2\x88D\x88E\x3\x2\x2\x2\x88E\x890\x3\x2\x2\x2\x88F\x88D\x3\x2\x2\x2"+
		"\x890\x891\x5\xE\b\x2\x891\x8C6\x3\x2\x2\x2\x892\x894\aJ\x2\x2\x893\x895"+
		"\a\x41\x2\x2\x894\x893\x3\x2\x2\x2\x894\x895\x3\x2\x2\x2\x895\x896\x3"+
		"\x2\x2\x2\x896\x897\a\x94\x2\x2\x897\x89C\x5\xB0Y\x2\x898\x899\a\x127"+
		"\x2\x2\x899\x89B\x5\xB0Y\x2\x89A\x898\x3\x2\x2\x2\x89B\x89E\x3\x2\x2\x2"+
		"\x89C\x89A\x3\x2\x2\x2\x89C\x89D\x3\x2\x2\x2\x89D\x89F\x3\x2\x2\x2\x89E"+
		"\x89C\x3\x2\x2\x2\x89F\x8A0\x5\xE\b\x2\x8A0\x8C6\x3\x2\x2\x2\x8A1\x8A3"+
		"\aJ\x2\x2\x8A2\x8A4\a\x41\x2\x2\x8A3\x8A2\x3\x2\x2\x2\x8A3\x8A4\x3\x2"+
		"\x2\x2\x8A4\x8A6\x3\x2\x2\x2\x8A5\x8A7\a.\x2\x2\x8A6\x8A5\x3\x2\x2\x2"+
		"\x8A6\x8A7\x3\x2\x2\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8A9\a`\x2\x2\x8A9\x8AE"+
		"\x5\xB0Y\x2\x8AA\x8AB\a\x127\x2\x2\x8AB\x8AD\x5\xB0Y\x2\x8AC\x8AA\x3\x2"+
		"\x2\x2\x8AD\x8B0\x3\x2\x2\x2\x8AE\x8AC\x3\x2\x2\x2\x8AE\x8AF\x3\x2\x2"+
		"\x2\x8AF\x8B1\x3\x2\x2\x2\x8B0\x8AE\x3\x2\x2\x2\x8B1\x8B2\x5\xE\b\x2\x8B2"+
		"\x8C6\x3\x2\x2\x2\x8B3\x8B9\a\x94\x2\x2\x8B4\x8B6\a.\x2\x2\x8B5\x8B4\x3"+
		"\x2\x2\x2\x8B5\x8B6\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B9\a`\x2"+
		"\x2\x8B8\x8B3\x3\x2\x2\x2\x8B8\x8B5\x3\x2\x2\x2\x8B9\x8BA\x3\x2\x2\x2"+
		"\x8BA\x8BB\x5\x116\x8C\x2\x8BB\x8BC\x5\xCCg\x2\x8BC\x8BD\x5\xCEh\x2\x8BD"+
		"\x8BE\x5\xE\b\x2\x8BE\x8C6\x3\x2\x2\x2\x8BF\x8C0\a.\x2\x2\x8C0\x8C1\x5"+
		"\x118\x8D\x2\x8C1\x8C2\x5\xCCg\x2\x8C2\x8C3\x5\xCEh\x2\x8C3\x8C4\x5\xE"+
		"\b\x2\x8C4\x8C6\x3\x2\x2\x2\x8C5\x840\x3\x2\x2\x2\x8C5\x84E\x3\x2\x2\x2"+
		"\x8C5\x85A\x3\x2\x2\x2\x8C5\x867\x3\x2\x2\x2\x8C5\x874\x3\x2\x2\x2\x8C5"+
		"\x883\x3\x2\x2\x2\x8C5\x892\x3\x2\x2\x2\x8C5\x8A1\x3\x2\x2\x2\x8C5\x8B8"+
		"\x3\x2\x2\x2\x8C5\x8BF\x3\x2\x2\x2\x8C6\xAD\x3\x2\x2\x2\x8C7\x8C9\aU\x2"+
		"\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2\x2\x8C9\x8CB\x3\x2\x2\x2"+
		"\x8CA\x8CC\a\x12\x2\x2\x8CB\x8CA\x3\x2\x2\x2\x8CB\x8CC\x3\x2\x2\x2\x8CC"+
		"\x8CD\x3\x2\x2\x2\x8CD\x8D2\x5\xFA~\x2\x8CE\x8CF\a\x124\x2\x2\x8CF\x8D0"+
		"\x5\x64\x33\x2\x8D0\x8D1\a\x125\x2\x2\x8D1\x8D3\x3\x2\x2\x2\x8D2\x8CE"+
		"\x3\x2\x2\x2\x8D2\x8D3\x3\x2\x2\x2\x8D3\x8D7\x3\x2\x2\x2\x8D4\x8D5\x5"+
		"\xCCg\x2\x8D5\x8D6\x5\xCEh\x2\x8D6\x8D8\x3\x2\x2\x2\x8D7\x8D4\x3\x2\x2"+
		"\x2\x8D7\x8D8\x3\x2\x2\x2\x8D8\x8DE\x3\x2\x2\x2\x8D9\x8DA\t\r\x2\x2\x8DA"+
		"\x8DC\x5\xFE\x80\x2\x8DB\x8DD\x5\xC0\x61\x2\x8DC\x8DB\x3\x2\x2\x2\x8DC"+
		"\x8DD\x3\x2\x2\x2\x8DD\x8DF\x3\x2\x2\x2\x8DE\x8D9\x3\x2\x2\x2\x8DE\x8DF"+
		"\x3\x2\x2\x2\x8DF\x8F2\x3\x2\x2\x2\x8E0\x8E1\x6X\x15\x2\x8E1\x8E2\x5\xFA"+
		"~\x2\x8E2\x8E3\a\x120\x2\x2\x8E3\x8E4\x5\x64\x33\x2\x8E4\x8E8\a\x121\x2"+
		"\x2\x8E5\x8E6\x5\xCCg\x2\x8E6\x8E7\x5\xCEh\x2\x8E7\x8E9\x3\x2\x2\x2\x8E8"+
		"\x8E5\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EF\x3\x2\x2\x2\x8EA\x8EB"+
		"\t\r\x2\x2\x8EB\x8ED\x5\xFE\x80\x2\x8EC\x8EE\x5\xC0\x61\x2\x8ED\x8EC\x3"+
		"\x2\x2\x2\x8ED\x8EE\x3\x2\x2\x2\x8EE\x8F0\x3\x2\x2\x2\x8EF\x8EA\x3\x2"+
		"\x2\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x8F2\x3\x2\x2\x2\x8F1\x8C8\x3\x2\x2"+
		"\x2\x8F1\x8E0\x3\x2\x2\x2\x8F2\xAF\x3\x2\x2\x2\x8F3\x8F5\aU\x2\x2\x8F4"+
		"\x8F3\x3\x2\x2\x2\x8F4\x8F5\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6\x8F7"+
		"\x5\xFA~\x2\x8F7\x8F8\x5\xCCg\x2\x8F8\x8F9\x5\xCEh\x2\x8F9\xB1\x3\x2\x2"+
		"\x2\x8FA\x8FB\a \x2\x2\x8FB\x900\x5\xF8}\x2\x8FC\x8FD\a\x127\x2\x2\x8FD"+
		"\x8FF\x5\xF8}\x2\x8FE\x8FC\x3\x2\x2\x2\x8FF\x902\x3\x2\x2\x2\x900\x8FE"+
		"\x3\x2\x2\x2\x900\x901\x3\x2\x2\x2\x901\x905\x3\x2\x2\x2\x902\x900\x3"+
		"\x2\x2\x2\x903\x904\a-\x2\x2\x904\x906\x5\xF8}\x2\x905\x903\x3\x2\x2\x2"+
		"\x905\x906\x3\x2\x2\x2\x906\x907\x3\x2\x2\x2\x907\x908\x5\xE\b\x2\x908"+
		"\xB3\x3\x2\x2\x2\x909\x90A\t(\x2\x2\x90A\x90F\x5\xB6\\\x2\x90B\x90C\a"+
		"\x127\x2\x2\x90C\x90E\x5\xB6\\\x2\x90D\x90B\x3\x2\x2\x2\x90E\x911\x3\x2"+
		"\x2\x2\x90F\x90D\x3\x2\x2\x2\x90F\x910\x3\x2\x2\x2\x910\x912\x3\x2\x2"+
		"\x2\x911\x90F\x3\x2\x2\x2\x912\x913\x5\xE\b\x2\x913\xB5\x3\x2\x2\x2\x914"+
		"\x916\a\x129\x2\x2\x915\x914\x3\x2\x2\x2\x915\x916\x3\x2\x2\x2\x916\x917"+
		"\x3\x2\x2\x2\x917\x91C\x5\xFC\x7F\x2\x918\x919\a\x124\x2\x2\x919\x91A"+
		"\x5\x64\x33\x2\x91A\x91B\a\x125\x2\x2\x91B\x91D\x3\x2\x2\x2\x91C\x918"+
		"\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x921\x3\x2\x2\x2\x91E\x91F\x5"+
		"\xCCg\x2\x91F\x920\x5\xCEh\x2\x920\x922\x3\x2\x2\x2\x921\x91E\x3\x2\x2"+
		"\x2\x921\x922\x3\x2\x2\x2\x922\xB7\x3\x2\x2\x2\x923\x924\t(\x2\x2\x924"+
		"\x929\x5\xC6\x64\x2\x925\x926\a\x127\x2\x2\x926\x928\x5\xC6\x64\x2\x927"+
		"\x925\x3\x2\x2\x2\x928\x92B\x3\x2\x2\x2\x929\x927\x3\x2\x2\x2\x929\x92A"+
		"\x3\x2\x2\x2\x92A\x92C\x3\x2\x2\x2\x92B\x929\x3\x2\x2\x2\x92C\x92D\x5"+
		"\xE\b\x2\x92D\xB9\x3\x2\x2\x2\x92E\x92F\t)\x2\x2\x92F\x934\x5\xBE`\x2"+
		"\x930\x931\a\x127\x2\x2\x931\x933\x5\xBE`\x2\x932\x930\x3\x2\x2\x2\x933"+
		"\x936\x3\x2\x2\x2\x934\x932\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x937"+
		"\x3\x2\x2\x2\x936\x934\x3\x2\x2\x2\x937\x938\x5\xE\b\x2\x938\x954\x3\x2"+
		"\x2\x2\x939\x93B\a;\x2\x2\x93A\x93C\a\x9C\x2\x2\x93B\x93A\x3\x2\x2\x2"+
		"\x93B\x93C\x3\x2\x2\x2\x93C\x93D\x3\x2\x2\x2\x93D\x942\x5\xBE`\x2\x93E"+
		"\x93F\a\x127\x2\x2\x93F\x941\x5\xBE`\x2\x940\x93E\x3\x2\x2\x2\x941\x944"+
		"\x3\x2\x2\x2\x942\x940\x3\x2\x2\x2\x942\x943\x3\x2\x2\x2\x943\x945\x3"+
		"\x2\x2\x2\x944\x942\x3\x2\x2\x2\x945\x946\x5\xE\b\x2\x946\x954\x3\x2\x2"+
		"\x2\x947\x948\a.\x2\x2\x948\x949\a\x9C\x2\x2\x949\x94E\x5\xBE`\x2\x94A"+
		"\x94B\a\x127\x2\x2\x94B\x94D\x5\xBE`\x2\x94C\x94A\x3\x2\x2\x2\x94D\x950"+
		"\x3\x2\x2\x2\x94E\x94C\x3\x2\x2\x2\x94E\x94F\x3\x2\x2\x2\x94F\x951\x3"+
		"\x2\x2\x2\x950\x94E\x3\x2\x2\x2\x951\x952\x5\xE\b\x2\x952\x954\x3\x2\x2"+
		"\x2\x953\x92E\x3\x2\x2\x2\x953\x939\x3\x2\x2\x2\x953\x947\x3\x2\x2\x2"+
		"\x954\xBB\x3\x2\x2\x2\x955\x956\a\xCE\x2\x2\x956\x95B\x5\xC2\x62\x2\x957"+
		"\x958\a\x127\x2\x2\x958\x95A\x5\xC2\x62\x2\x959\x957\x3\x2\x2\x2\x95A"+
		"\x95D\x3\x2\x2\x2\x95B\x959\x3\x2\x2\x2\x95B\x95C\x3\x2\x2\x2\x95C\x95E"+
		"\x3\x2\x2\x2\x95D\x95B\x3\x2\x2\x2\x95E\x95F\x5\xE\b\x2\x95F\xBD\x3\x2"+
		"\x2\x2\x960\x962\a\x129\x2\x2\x961\x960\x3\x2\x2\x2\x961\x962\x3\x2\x2"+
		"\x2\x962\x963\x3\x2\x2\x2\x963\x97A\x5\xFC\x7F\x2\x964\x965\a\x124\x2"+
		"\x2\x965\x96A\x5\xCEh\x2\x966\x967\a\x127\x2\x2\x967\x969\x5\xCEh\x2\x968"+
		"\x966\x3\x2\x2\x2\x969\x96C\x3\x2\x2\x2\x96A\x968\x3\x2\x2\x2\x96A\x96B"+
		"\x3\x2\x2\x2\x96B\x96D\x3\x2\x2\x2\x96C\x96A\x3\x2\x2\x2\x96D\x96E\a\x125"+
		"\x2\x2\x96E\x97B\x3\x2\x2\x2\x96F\x970\a\x120\x2\x2\x970\x975\x5\xCEh"+
		"\x2\x971\x972\a\x127\x2\x2\x972\x974\x5\xCEh\x2\x973\x971\x3\x2\x2\x2"+
		"\x974\x977\x3\x2\x2\x2\x975\x973\x3\x2\x2\x2\x975\x976\x3\x2\x2\x2\x976"+
		"\x978\x3\x2\x2\x2\x977\x975\x3\x2\x2\x2\x978\x979\a\x121\x2\x2\x979\x97B"+
		"\x3\x2\x2\x2\x97A\x964\x3\x2\x2\x2\x97A\x96F\x3\x2\x2\x2\x97B\x97D\x3"+
		"\x2\x2\x2\x97C\x97E\x5\xC4\x63\x2\x97D\x97C\x3\x2\x2\x2\x97D\x97E\x3\x2"+
		"\x2\x2\x97E\x99C\x3\x2\x2\x2\x97F\x996\x5\xCEh\x2\x980\x981\a\x124\x2"+
		"\x2\x981\x986\x5\xCEh\x2\x982\x983\a\x127\x2\x2\x983\x985\x5\xCEh\x2\x984"+
		"\x982\x3\x2\x2\x2\x985\x988\x3\x2\x2\x2\x986\x984\x3\x2\x2\x2\x986\x987"+
		"\x3\x2\x2\x2\x987\x989\x3\x2\x2\x2\x988\x986\x3\x2\x2\x2\x989\x98A\a\x125"+
		"\x2\x2\x98A\x997\x3\x2\x2\x2\x98B\x98C\a\x120\x2\x2\x98C\x991\x5\xCEh"+
		"\x2\x98D\x98E\a\x127\x2\x2\x98E\x990\x5\xCEh\x2\x98F\x98D\x3\x2\x2\x2"+
		"\x990\x993\x3\x2\x2\x2\x991\x98F\x3\x2\x2\x2\x991\x992\x3\x2\x2\x2\x992"+
		"\x994\x3\x2\x2\x2\x993\x991\x3\x2\x2\x2\x994\x995\a\x121\x2\x2\x995\x997"+
		"\x3\x2\x2\x2\x996\x980\x3\x2\x2\x2\x996\x98B\x3\x2\x2\x2\x997\x999\x3"+
		"\x2\x2\x2\x998\x99A\x5\xC4\x63\x2\x999\x998\x3\x2\x2\x2\x999\x99A\x3\x2"+
		"\x2\x2\x99A\x99C\x3\x2\x2\x2\x99B\x961\x3\x2\x2\x2\x99B\x97F\x3\x2\x2"+
		"\x2\x99C\xBF\x3\x2\x2\x2\x99D\x99E\a\x89\x2\x2\x99E\x99F\x5\xF8}\x2\x99F"+
		"\xC1\x3\x2\x2\x2\x9A0\x9A2\x5\xFC\x7F\x2\x9A1\x9A3\x5\xC4\x63\x2\x9A2"+
		"\x9A1\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\xC3\x3\x2\x2\x2\x9A4\x9A5"+
		"\a\x6\x2\x2\x9A5\x9A7\x5\xFE\x80\x2\x9A6\x9A8\x5\xC0\x61\x2\x9A7\x9A6"+
		"\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\xC5\x3\x2\x2\x2\x9A9\x9AB\a\x129"+
		"\x2\x2\x9AA\x9A9\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9AC\x3\x2\x2"+
		"\x2\x9AC\x9B0\x5\xFC\x7F\x2\x9AD\x9AE\x5\xCCg\x2\x9AE\x9AF\x5\xCEh\x2"+
		"\x9AF\x9B1\x3\x2\x2\x2\x9B0\x9AD\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1"+
		"\x9B3\x3\x2\x2\x2\x9B2\x9B4\x5\xC4\x63\x2\x9B3\x9B2\x3\x2\x2\x2\x9B3\x9B4"+
		"\x3\x2\x2\x2\x9B4\xC7\x3\x2\x2\x2\x9B5\x9B7\x5\xCA\x66\x2\x9B6\x9B5\x3"+
		"\x2\x2\x2\x9B6\x9B7\x3\x2\x2\x2\x9B7\x9B8\x3\x2\x2\x2\x9B8\x9B9\a.\x2"+
		"\x2\x9B9\x9BA\x5\x12\n\x2\x9BA\x9BB\x5\x14\v\x2\x9BB\x9BC\x5\xE\b\x2\x9BC"+
		"\x9C0\x5*\x16\x2\x9BD\x9C1\t\x4\x2\x2\x9BE\x9BF\a\x19\x2\x2\x9BF\x9C1"+
		"\x5\x12\n\x2\x9C0\x9BD\x3\x2\x2\x2\x9C0\x9BE\x3\x2\x2\x2\x9C1\x9C2\x3"+
		"\x2\x2\x2\x9C2\x9C3\a\x167\x2\x2\x9C3\xC9\x3\x2\x2\x2\x9C4\x9C6\t*\x2"+
		"\x2\x9C5\x9C4\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C5\x3\x2\x2\x2"+
		"\x9C7\x9C8\x3\x2\x2\x2\x9C8\xCB\x3\x2\x2\x2\x9C9\x9CA\t+\x2\x2\x9CA\xCD"+
		"\x3\x2\x2\x2\x9CB\x9CC\bh\x1\x2\x9CC\x9CD\t,\x2\x2\x9CD\x9F1\x5\xF4{\x2"+
		"\x9CE\x9CF\t,\x2\x2\x9CF\x9D5\a\x129\x2\x2\x9D0\x9D6\x5\xF8}\x2\x9D1\x9D2"+
		"\a\x120\x2\x2\x9D2\x9D3\x5\xCEh\x2\x9D3\x9D4\a\x121\x2\x2\x9D4\x9D6\x3"+
		"\x2\x2\x2\x9D5\x9D0\x3\x2\x2\x2\x9D5\x9D1\x3\x2\x2\x2\x9D6\x9F1\x3\x2"+
		"\x2\x2\x9D7\x9D8\x5\x140\xA1\x2\x9D8\x9D9\a\x120\x2\x2\x9D9\x9DA\x5\xE8"+
		"u\x2\x9DA\x9DB\a\x121\x2\x2\x9DB\x9F1\x3\x2\x2\x2\x9DC\x9DD\x6h\x16\x2"+
		"\x9DD\x9DE\a\x120\x2\x2\x9DE\x9DF\x5\xFE\x80\x2\x9DF\x9E0\a\x121\x2\x2"+
		"\x9E0\x9E1\x5\xCEh\x1C\x9E1\x9F1\x3\x2\x2\x2\x9E2\x9E3\a{\x2\x2\x9E3\x9F1"+
		"\x5\xCEh\x1A\x9E4\x9E5\x6h\x17\x2\x9E5\x9E6\a\x90\x2\x2\x9E6\x9F1\x5\xCE"+
		"h\x19\x9E7\x9E8\t-\x2\x2\x9E8\x9F1\x5\xCEh\x18\x9E9\x9EA\t.\x2\x2\x9EA"+
		"\x9F1\x5\xCEh\v\x9EB\x9ED\a\x131\x2\x2\x9EC\x9EE\x5\xCEh\x2\x9ED\x9EC"+
		"\x3\x2\x2\x2\x9ED\x9EE\x3\x2\x2\x2\x9EE\x9F1\x3\x2\x2\x2\x9EF\x9F1\x5"+
		"\xD0i\x2\x9F0\x9CB\x3\x2\x2\x2\x9F0\x9CE\x3\x2\x2\x2\x9F0\x9D7\x3\x2\x2"+
		"\x2\x9F0\x9DC\x3\x2\x2\x2\x9F0\x9E2\x3\x2\x2\x2\x9F0\x9E4\x3\x2\x2\x2"+
		"\x9F0\x9E7\x3\x2\x2\x2\x9F0\x9E9\x3\x2\x2\x2\x9F0\x9EB\x3\x2\x2\x2\x9F0"+
		"\x9EF\x3\x2\x2\x2\x9F1\xA59\x3\x2\x2\x2\x9F2\x9F3\f\x14\x2\x2\x9F3\x9F4"+
		"\a\xFD\x2\x2\x9F4\xA58\x5\xCEh\x15\x9F5\x9F6\f\x13\x2\x2\x9F6\x9F7\t/"+
		"\x2\x2\x9F7\xA58\x5\xCEh\x14\x9F8\x9F9\f\x12\x2\x2\x9F9\x9FA\t\x30\x2"+
		"\x2\x9FA\xA58\x5\xCEh\x13\x9FB\x9FC\f\x11\x2\x2\x9FC\x9FD\a\xFE\x2\x2"+
		"\x9FD\xA58\x5\xCEh\x12\x9FE\x9FF\f\x10\x2\x2\x9FF\xA00\a\xF0\x2\x2\xA00"+
		"\xA01\a\xF0\x2\x2\xA01\xA58\x5\xCEh\x11\xA02\xA03\f\xF\x2\x2\xA03\xA04"+
		"\t\x31\x2\x2\xA04\xA58\x5\xCEh\x10\xA05\xA06\f\xE\x2\x2\xA06\xA07\a\x129"+
		"\x2\x2\xA07\xA58\x5\xCEh\xF\xA08\xA09\f\r\x2\x2\xA09\xA0A\a\x100\x2\x2"+
		"\xA0A\xA58\x5\xCEh\xE\xA0B\xA0C\f\f\x2\x2\xA0C\xA0D\a\x128\x2\x2\xA0D"+
		"\xA58\x5\xCEh\r\xA0E\xA0F\f\n\x2\x2\xA0F\xA10\t\x32\x2\x2\xA10\xA58\x5"+
		"\xCEh\v\xA11\xA12\f\t\x2\x2\xA12\xA13\t\x33\x2\x2\xA13\xA58\x5\xCEh\n"+
		"\xA14\xA15\f\b\x2\x2\xA15\xA16\t\x34\x2\x2\xA16\xA58\x5\xCEh\t\xA17\xA18"+
		"\f\a\x2\x2\xA18\xA19\t\x35\x2\x2\xA19\xA58\x5\xCEh\b\xA1A\xA1B\f\x4\x2"+
		"\x2\xA1B\xA1C\t\x36\x2\x2\xA1C\xA58\x5\xCEh\x4\xA1D\xA1E\f%\x2\x2\xA1E"+
		"\xA1F\t\x37\x2\x2\xA1F\xA58\x5\xF4{\x2\xA20\xA21\f#\x2\x2\xA21\xA22\t"+
		"\x37\x2\x2\xA22\xA23\a\x120\x2\x2\xA23\xA24\x5\xCEh\x2\xA24\xA25\a\x121"+
		"\x2\x2\xA25\xA58\x3\x2\x2\x2\xA26\xA27\f\"\x2\x2\xA27\xA28\t\x37\x2\x2"+
		"\xA28\xA2E\a\x129\x2\x2\xA29\xA2F\x5\xF8}\x2\xA2A\xA2B\a\x120\x2\x2\xA2B"+
		"\xA2C\x5\xCEh\x2\xA2C\xA2D\a\x121\x2\x2\xA2D\xA2F\x3\x2\x2\x2\xA2E\xA29"+
		"\x3\x2\x2\x2\xA2E\xA2A\x3\x2\x2\x2\xA2F\xA58\x3\x2\x2\x2\xA30\xA31\f "+
		"\x2\x2\xA31\xA32\a\x120\x2\x2\xA32\xA33\x5\xE8u\x2\xA33\xA34\a\x121\x2"+
		"\x2\xA34\xA58\x3\x2\x2\x2\xA35\xA36\f\x1E\x2\x2\xA36\xA37\a\x124\x2\x2"+
		"\xA37\xA38\x5\xE4s\x2\xA38\xA39\a\x125\x2\x2\xA39\xA58\x3\x2\x2\x2\xA3A"+
		"\xA3B\f\x1D\x2\x2\xA3B\xA3C\a\x103\x2\x2\xA3C\xA58\x5\xD2j\x2\xA3D\xA3E"+
		"\f\x1B\x2\x2\xA3E\xA58\t\x38\x2\x2\xA3F\xA40\f\x17\x2\x2\xA40\xA42\a,"+
		"\x2\x2\xA41\xA43\a\x11E\x2\x2\xA42\xA41\x3\x2\x2\x2\xA42\xA43\x3\x2\x2"+
		"\x2\xA43\xA44\x3\x2\x2\x2\xA44\xA58\a\xE2\x2\x2\xA45\xA46\f\x16\x2\x2"+
		"\xA46\xA48\a,\x2\x2\xA47\xA49\a\x11E\x2\x2\xA48\xA47\x3\x2\x2\x2\xA48"+
		"\xA49\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2\x2\xA4A\xA4D\x5\xFE\x80\x2\xA4B\xA4C"+
		"\a\x94\x2\x2\xA4C\xA4E\x5\xFA~\x2\xA4D\xA4B\x3\x2\x2\x2\xA4D\xA4E\x3\x2"+
		"\x2\x2\xA4E\xA58\x3\x2\x2\x2\xA4F\xA50\f\x15\x2\x2\xA50\xA51\az\x2\x2"+
		"\xA51\xA58\x5\xFE\x80\x2\xA52\xA53\f\x5\x2\x2\xA53\xA55\a\x131\x2\x2\xA54"+
		"\xA56\x5\xCEh\x2\xA55\xA54\x3\x2\x2\x2\xA55\xA56\x3\x2\x2\x2\xA56\xA58"+
		"\x3\x2\x2\x2\xA57\x9F2\x3\x2\x2\x2\xA57\x9F5\x3\x2\x2\x2\xA57\x9F8\x3"+
		"\x2\x2\x2\xA57\x9FB\x3\x2\x2\x2\xA57\x9FE\x3\x2\x2\x2\xA57\xA02\x3\x2"+
		"\x2\x2\xA57\xA05\x3\x2\x2\x2\xA57\xA08\x3\x2\x2\x2\xA57\xA0B\x3\x2\x2"+
		"\x2\xA57\xA0E\x3\x2\x2\x2\xA57\xA11\x3\x2\x2\x2\xA57\xA14\x3\x2\x2\x2"+
		"\xA57\xA17\x3\x2\x2\x2\xA57\xA1A\x3\x2\x2\x2\xA57\xA1D\x3\x2\x2\x2\xA57"+
		"\xA20\x3\x2\x2\x2\xA57\xA26\x3\x2\x2\x2\xA57\xA30\x3\x2\x2\x2\xA57\xA35"+
		"\x3\x2\x2\x2\xA57\xA3A\x3\x2\x2\x2\xA57\xA3D\x3\x2\x2\x2\xA57\xA3F\x3"+
		"\x2\x2\x2\xA57\xA45\x3\x2\x2\x2\xA57\xA4F\x3\x2\x2\x2\xA57\xA52\x3\x2"+
		"\x2\x2\xA58\xA5B\x3\x2\x2\x2\xA59\xA57\x3\x2\x2\x2\xA59\xA5A\x3\x2\x2"+
		"\x2\xA5A\xCF\x3\x2\x2\x2\xA5B\xA59\x3\x2\x2\x2\xA5C\xAEB\a>\x2\x2\xA5D"+
		"\xAEB\a\x44\x2\x2\xA5E\xA5F\a\xE2\x2\x2\xA5F\xA61\a\x120\x2\x2\xA60\xA62"+
		"\x5\xFE\x80\x2\xA61\xA60\x3\x2\x2\x2\xA61\xA62\x3\x2\x2\x2\xA62\xA63\x3"+
		"\x2\x2\x2\xA63\xAEB\a\x121\x2\x2\xA64\xAEB\x5\x146\xA4\x2\xA65\xAEB\x5"+
		"\x148\xA5\x2\xA66\xAEB\x5\x106\x84\x2\xA67\xAEB\x5\x10A\x86\x2\xA68\xAEB"+
		"\x5\x112\x8A\x2\xA69\xAEB\x5\x11C\x8F\x2\xA6A\xAEB\x5\x126\x94\x2\xA6B"+
		"\xAEB\x5\x12C\x97\x2\xA6C\xA6D\x6i\x31\x2\xA6D\xA6E\x5\xFE\x80\x2\xA6E"+
		"\xA6F\a\x122\x2\x2\xA6F\xA70\x5\xCEh\x2\xA70\xA71\a\x127\x2\x2\xA71\xA72"+
		"\a\x12A\x2\x2\xA72\xA73\x5\xF0y\x2\xA73\xA74\a\x120\x2\x2\xA74\xA75\a"+
		"\x121\x2\x2\xA75\xA76\a\x123\x2\x2\xA76\xAEB\x3\x2\x2\x2\xA77\xA78\x6"+
		"i\x32\x2\xA78\xA79\x5\xFE\x80\x2\xA79\xA7A\a\x122\x2\x2\xA7A\xA7B\x5\xE8"+
		"u\x2\xA7B\xA7D\a\x123\x2\x2\xA7C\xA7E\x5\xD6l\x2\xA7D\xA7C\x3\x2\x2\x2"+
		"\xA7D\xA7E\x3\x2\x2\x2\xA7E\xAEB\x3\x2\x2\x2\xA7F\xA80\t\x39\x2\x2\xA80"+
		"\xA81\a\x120\x2\x2\xA81\xA82\x5\xCEh\x2\xA82\xA83\a\x121\x2\x2\xA83\xAEB"+
		"\x3\x2\x2\x2\xA84\xA85\aG\x2\x2\xA85\xA86\a\x120\x2\x2\xA86\xA87\x5\xFE"+
		"\x80\x2\xA87\xA88\a\x121\x2\x2\xA88\xAEB\x3\x2\x2\x2\xA89\xA8A\a@\x2\x2"+
		"\xA8A\xA8B\a\x120\x2\x2\xA8B\xA8C\x5\xFE\x80\x2\xA8C\xA8D\a\x121\x2\x2"+
		"\xA8D\xAEB\x3\x2\x2\x2\xA8E\xA8F\aV\x2\x2\xA8F\xA91\a\x120\x2\x2\xA90"+
		"\xA92\x5\xFE\x80\x2\xA91\xA90\x3\x2\x2\x2\xA91\xA92\x3\x2\x2\x2\xA92\xA93"+
		"\x3\x2\x2\x2\xA93\xAEB\a\x121\x2\x2\xA94\xAEB\x5\xF4{\x2\xA95\xA96\x6"+
		"i\x33\x2\xA96\xA97\x5\x144\xA3\x2\xA97\xA98\a\x120\x2\x2\xA98\xA99\x5"+
		"\xCEh\x2\xA99\xA9A\a\x121\x2\x2\xA9A\xAEB\x3\x2\x2\x2\xA9B\xA9C\x6i\x34"+
		"\x2\xA9C\xA9D\x5\x142\xA2\x2\xA9D\xA9E\a\x120\x2\x2\xA9E\xA9F\x5\xCEh"+
		"\x2\xA9F\xAA0\a\x121\x2\x2\xAA0\xAEB\x3\x2\x2\x2\xAA1\xAA2\x6i\x35\x2"+
		"\xAA2\xAA3\x5\x144\xA3\x2\xAA3\xAA4\a\x120\x2\x2\xAA4\xAA5\a\r\x2\x2\xAA5"+
		"\xAA6\a\x127\x2\x2\xAA6\xAA7\x5\xCEh\x2\xAA7\xAA8\a\x121\x2\x2\xAA8\xAEB"+
		"\x3\x2\x2\x2\xAA9\xAAA\x6i\x36\x2\xAAA\xAAB\x5\x142\xA2\x2\xAAB\xAAC\a"+
		"\x120\x2\x2\xAAC\xAAD\a\r\x2\x2\xAAD\xAAE\a\x127\x2\x2\xAAE\xAAF\x5\xCE"+
		"h\x2\xAAF\xAB0\a\x121\x2\x2\xAB0\xAEB\x3\x2\x2\x2\xAB1\xAB2\aS\x2\x2\xAB2"+
		"\xAB3\a\x120\x2\x2\xAB3\xAB4\x5\x144\xA3\x2\xAB4\xAB5\a\x127\x2\x2\xAB5"+
		"\xAB6\x5\xCEh\x2\xAB6\xAB7\a\x121\x2\x2\xAB7\xAEB\x3\x2\x2\x2\xAB8\xAB9"+
		"\aS\x2\x2\xAB9\xABA\a\x120\x2\x2\xABA\xABB\x5\x142\xA2\x2\xABB\xABC\a"+
		"\x127\x2\x2\xABC\xABD\x5\xCEh\x2\xABD\xABE\a\x121\x2\x2\xABE\xAEB\x3\x2"+
		"\x2\x2\xABF\xAC0\a\xA7\x2\x2\xAC0\xAC1\a\x120\x2\x2\xAC1\xAC2\x5\xFE\x80"+
		"\x2\xAC2\xAC3\a\x127\x2\x2\xAC3\xAC4\x5\xCEh\x2\xAC4\xAC5\a\x121\x2\x2"+
		"\xAC5\xAEB\x3\x2\x2\x2\xAC6\xAEB\x5\x104\x83\x2\xAC7\xAEB\x5\x102\x82"+
		"\x2\xAC8\xAEB\x5\xECw\x2\xAC9\xACA\t:\x2\x2\xACA\xACB\a\x120\x2\x2\xACB"+
		"\xAD0\x5\xCEh\x2\xACC\xACD\a\x127\x2\x2\xACD\xACF\x5\xCEh\x2\xACE\xACC"+
		"\x3\x2\x2\x2\xACF\xAD2\x3\x2\x2\x2\xAD0\xACE\x3\x2\x2\x2\xAD0\xAD1\x3"+
		"\x2\x2\x2\xAD1\xAD3\x3\x2\x2\x2\xAD2\xAD0\x3\x2\x2\x2\xAD3\xAD4\a\x121"+
		"\x2\x2\xAD4\xAEB\x3\x2\x2\x2\xAD5\xAD6\x6i\x37\x2\xAD6\xAEB\x5\xD4k\x2"+
		"\xAD7\xAD8\a\x129\x2\x2\xAD8\xAD9\a\x120\x2\x2\xAD9\xADA\x5\xCEh\x2\xADA"+
		"\xADB\a\x121\x2\x2\xADB\xAEB\x3\x2\x2\x2\xADC\xADD\a\x129\x2\x2\xADD\xAEB"+
		"\x5\xF8}\x2\xADE\xADF\a\x120\x2\x2\xADF\xAE4\x5\xCEh\x2\xAE0\xAE1\a\x127"+
		"\x2\x2\xAE1\xAE3\x5\xCEh\x2\xAE2\xAE0\x3\x2\x2\x2\xAE3\xAE6\x3\x2\x2\x2"+
		"\xAE4\xAE2\x3\x2\x2\x2\xAE4\xAE5\x3\x2\x2\x2\xAE5\xAE7\x3\x2\x2\x2\xAE6"+
		"\xAE4\x3\x2\x2\x2\xAE7\xAE8\a\x121\x2\x2\xAE8\xAEB\x3\x2\x2\x2\xAE9\xAEB"+
		"\aw\x2\x2\xAEA\xA5C\x3\x2\x2\x2\xAEA\xA5D\x3\x2\x2\x2\xAEA\xA5E\x3\x2"+
		"\x2\x2\xAEA\xA64\x3\x2\x2\x2\xAEA\xA65\x3\x2\x2\x2\xAEA\xA66\x3\x2\x2"+
		"\x2\xAEA\xA67\x3\x2\x2\x2\xAEA\xA68\x3\x2\x2\x2\xAEA\xA69\x3\x2\x2\x2"+
		"\xAEA\xA6A\x3\x2\x2\x2\xAEA\xA6B\x3\x2\x2\x2\xAEA\xA6C\x3\x2\x2\x2\xAEA"+
		"\xA77\x3\x2\x2\x2\xAEA\xA7F\x3\x2\x2\x2\xAEA\xA84\x3\x2\x2\x2\xAEA\xA89"+
		"\x3\x2\x2\x2\xAEA\xA8E\x3\x2\x2\x2\xAEA\xA94\x3\x2\x2\x2\xAEA\xA95\x3"+
		"\x2\x2\x2\xAEA\xA9B\x3\x2\x2\x2\xAEA\xAA1\x3\x2\x2\x2\xAEA\xAA9\x3\x2"+
		"\x2\x2\xAEA\xAB1\x3\x2\x2\x2\xAEA\xAB8\x3\x2\x2\x2\xAEA\xABF\x3\x2\x2"+
		"\x2\xAEA\xAC6\x3\x2\x2\x2\xAEA\xAC7\x3\x2\x2\x2\xAEA\xAC8\x3\x2\x2\x2"+
		"\xAEA\xAC9\x3\x2\x2\x2\xAEA\xAD5\x3\x2\x2\x2\xAEA\xAD7\x3\x2\x2\x2\xAEA"+
		"\xADC\x3\x2\x2\x2\xAEA\xADE\x3\x2\x2\x2\xAEA\xAE9\x3\x2\x2\x2\xAEB\xD1"+
		"\x3\x2\x2\x2\xAEC\xAED\bj\x1\x2\xAED\xAEE\t\x37\x2\x2\xAEE\xAF4\x5\xF4"+
		"{\x2\xAEF\xAF0\a\x124\x2\x2\xAF0\xAF1\x5\xE4s\x2\xAF1\xAF2\a\x125\x2\x2"+
		"\xAF2\xAF4\x3\x2\x2\x2\xAF3\xAEC\x3\x2\x2\x2\xAF3\xAEF\x3\x2\x2\x2\xAF4"+
		"\xB07\x3\x2\x2\x2\xAF5\xAF6\f\x5\x2\x2\xAF6\xAF7\a\x103\x2\x2\xAF7\xB06"+
		"\x5\xD2j\x5\xAF8\xAF9\f\b\x2\x2\xAF9\xAFA\t\x37\x2\x2\xAFA\xB06\x5\xF4"+
		"{\x2\xAFB\xAFC\f\a\x2\x2\xAFC\xAFD\a\x120\x2\x2\xAFD\xAFE\x5\xE8u\x2\xAFE"+
		"\xAFF\a\x121\x2\x2\xAFF\xB06\x3\x2\x2\x2\xB00\xB01\f\x6\x2\x2\xB01\xB02"+
		"\a\x124\x2\x2\xB02\xB03\x5\xE4s\x2\xB03\xB04\a\x125\x2\x2\xB04\xB06\x3"+
		"\x2\x2\x2\xB05\xAF5\x3\x2\x2\x2\xB05\xAF8\x3\x2\x2\x2\xB05\xAFB\x3\x2"+
		"\x2\x2\xB05\xB00\x3\x2\x2\x2\xB06\xB09\x3\x2\x2\x2\xB07\xB05\x3\x2\x2"+
		"\x2\xB07\xB08\x3\x2\x2\x2\xB08\xD3\x3\x2\x2\x2\xB09\xB07\x3\x2\x2\x2\xB0A"+
		"\xB0B\x6k<\x2\xB0B\xB0C\a\x31\x2\x2\xB0C\xB0D\a\x12B\x2\x2\xB0D\xB47\x5"+
		"\x13C\x9F\x2\xB0E\xB0F\a \x2\x2\xB0F\xB13\a\x12B\x2\x2\xB10\xB11\x5\x13C"+
		"\x9F\x2\xB11\xB12\a\x12B\x2\x2\xB12\xB14\x3\x2\x2\x2\xB13\xB10\x3\x2\x2"+
		"\x2\xB13\xB14\x3\x2\x2\x2\xB14\xB15\x3\x2\x2\x2\xB15\xB47\x5\x13C\x9F"+
		"\x2\xB16\xB17\x6k=\x2\xB17\xB18\x5\x13C\x9F\x2\xB18\xB19\a\x12B\x2\x2"+
		"\xB19\xB1A\x5\x13C\x9F\x2\xB1A\xB47\x3\x2\x2\x2\xB1B\xB1C\x6k>\x2\xB1C"+
		"\xB1D\a\x120\x2\x2\xB1D\xB1E\x5\x13C\x9F\x2\xB1E\xB1F\a\x121\x2\x2\xB1F"+
		"\xB20\a\x12B\x2\x2\xB20\xB21\x5\x13C\x9F\x2\xB21\xB47\x3\x2\x2\x2\xB22"+
		"\xB23\x5\x13C\x9F\x2\xB23\xB24\a\x12B\x2\x2\xB24\xB25\a\x129\x2\x2\xB25"+
		"\xB26\x5\xCEh\x2\xB26\xB47\x3\x2\x2\x2\xB27\xB28\a \x2\x2\xB28\xB2C\a"+
		"\x12B\x2\x2\xB29\xB2A\x5\x13C\x9F\x2\xB2A\xB2B\a\x12B\x2\x2\xB2B\xB2D"+
		"\x3\x2\x2\x2\xB2C\xB29\x3\x2\x2\x2\xB2C\xB2D\x3\x2\x2\x2\xB2D\xB2E\x3"+
		"\x2\x2\x2\xB2E\xB2F\a\x129\x2\x2\xB2F\xB47\x5\xCEh\x2\xB30\xB31\a\x120"+
		"\x2\x2\xB31\xB32\x5\x13C\x9F\x2\xB32\xB33\a\x121\x2\x2\xB33\xB34\a\x12B"+
		"\x2\x2\xB34\xB35\a\x129\x2\x2\xB35\xB36\x5\xCEh\x2\xB36\xB47\x3\x2\x2"+
		"\x2\xB37\xB3D\x5\x13C\x9F\x2\xB38\xB39\a\x120\x2\x2\xB39\xB3A\x5\xCEh"+
		"\x2\xB3A\xB3B\a\x121\x2\x2\xB3B\xB3D\x3\x2\x2\x2\xB3C\xB37\x3\x2\x2\x2"+
		"\xB3C\xB38\x3\x2\x2\x2\xB3D\xB3E\x3\x2\x2\x2\xB3E\xB44\a\x12B\x2\x2\xB3F"+
		"\xB40\a\x120\x2\x2\xB40\xB41\x5\xCEh\x2\xB41\xB42\a\x121\x2\x2\xB42\xB45"+
		"\x3\x2\x2\x2\xB43\xB45\x5\xCEh\x2\xB44\xB3F\x3\x2\x2\x2\xB44\xB43\x3\x2"+
		"\x2\x2\xB45\xB47\x3\x2\x2\x2\xB46\xB0A\x3\x2\x2\x2\xB46\xB0E\x3\x2\x2"+
		"\x2\xB46\xB16\x3\x2\x2\x2\xB46\xB1B\x3\x2\x2\x2\xB46\xB22\x3\x2\x2\x2"+
		"\xB46\xB27\x3\x2\x2\x2\xB46\xB30\x3\x2\x2\x2\xB46\xB3C\x3\x2\x2\x2\xB47"+
		"\xD5\x3\x2\x2\x2\xB48\xB4B\x5\xD8m\x2\xB49\xB4B\x5\xE2r\x2\xB4A\xB48\x3"+
		"\x2\x2\x2\xB4A\xB49\x3\x2\x2\x2\xB4B\xD7\x3\x2\x2\x2\xB4C\xB55\a\x122"+
		"\x2\x2\xB4D\xB52\x5\xDAn\x2\xB4E\xB4F\a\x127\x2\x2\xB4F\xB51\x5\xDAn\x2"+
		"\xB50\xB4E\x3\x2\x2\x2\xB51\xB54\x3\x2\x2\x2\xB52\xB50\x3\x2\x2\x2\xB52"+
		"\xB53\x3\x2\x2\x2\xB53\xB56\x3\x2\x2\x2\xB54\xB52\x3\x2\x2\x2\xB55\xB4D"+
		"\x3\x2\x2\x2\xB55\xB56\x3\x2\x2\x2\xB56\xB57\x3\x2\x2\x2\xB57\xB58\a\x123"+
		"\x2\x2\xB58\xD9\x3\x2\x2\x2\xB59\xB5A\x5\xF8}\x2\xB5A\xB5B\x5\xCCg\x2"+
		"\xB5B\xB5C\x5\xDCo\x2\xB5C\xDB\x3\x2\x2\x2\xB5D\xB60\x5\xD6l\x2\xB5E\xB60"+
		"\x5\xCEh\x2\xB5F\xB5D\x3\x2\x2\x2\xB5F\xB5E\x3\x2\x2\x2\xB60\xDD\x3\x2"+
		"\x2\x2\xB61\xB62\a\x122\x2\x2\xB62\xB67\x5\xE0q\x2\xB63\xB64\a\x127\x2"+
		"\x2\xB64\xB66\x5\xE0q\x2\xB65\xB63\x3\x2\x2\x2\xB66\xB69\x3\x2\x2\x2\xB67"+
		"\xB65\x3\x2\x2\x2\xB67\xB68\x3\x2\x2\x2\xB68\xB6A\x3\x2\x2\x2\xB69\xB67"+
		"\x3\x2\x2\x2\xB6A\xB6B\a\x123\x2\x2\xB6B\xDF\x3\x2\x2\x2\xB6C\xB6F\x5"+
		"\xDEp\x2\xB6D\xB6F\x5\xCEh\x2\xB6E\xB6C\x3\x2\x2\x2\xB6E\xB6D\x3\x2\x2"+
		"\x2\xB6F\xE1\x3\x2\x2\x2\xB70\xB71\a\x122\x2\x2\xB71\xB76\x5\xE0q\x2\xB72"+
		"\xB73\a\x127\x2\x2\xB73\xB75\x5\xE0q\x2\xB74\xB72\x3\x2\x2\x2\xB75\xB78"+
		"\x3\x2\x2\x2\xB76\xB74\x3\x2\x2\x2\xB76\xB77\x3\x2\x2\x2\xB77\xB79\x3"+
		"\x2\x2\x2\xB78\xB76\x3\x2\x2\x2\xB79\xB7A\a\x123\x2\x2\xB7A\xE3\x3\x2"+
		"\x2\x2\xB7B\xB80\x5\xE6t\x2\xB7C\xB7D\a\x127\x2\x2\xB7D\xB7F\x5\xE6t\x2"+
		"\xB7E\xB7C\x3\x2\x2\x2\xB7F\xB82\x3\x2\x2\x2\xB80\xB7E\x3\x2\x2\x2\xB80"+
		"\xB81\x3\x2\x2\x2\xB81\xE5\x3\x2\x2\x2\xB82\xB80\x3\x2\x2\x2\xB83\xB84"+
		"\x5\xCEh\x2\xB84\xE7\x3\x2\x2\x2\xB85\xB8A\x5\xEAv\x2\xB86\xB87\a\x127"+
		"\x2\x2\xB87\xB89\x5\xEAv\x2\xB88\xB86\x3\x2\x2\x2\xB89\xB8C\x3\x2\x2\x2"+
		"\xB8A\xB88\x3\x2\x2\x2\xB8A\xB8B\x3\x2\x2\x2\xB8B\xE9\x3\x2\x2\x2\xB8C"+
		"\xB8A\x3\x2\x2\x2\xB8D\xB8E\x6v?\x2\xB8E\xB8F\x5\xF8}\x2\xB8F\xB91\a\x10B"+
		"\x2\x2\xB90\xB92\t;\x2\x2\xB91\xB90\x3\x2\x2\x2\xB91\xB92\x3\x2\x2\x2"+
		"\xB92\xB93\x3\x2\x2\x2\xB93\xB94\x5\xCEh\x2\xB94\xBA6\x3\x2\x2\x2\xB95"+
		"\xB96\ah\x2\x2\xB96\xB97\a\x94\x2\x2\xB97\xBA6\x5\xFA~\x2\xB98\xB99\a"+
		"h\x2\x2\xB99\xB9A\x5\xFA~\x2\xB9A\xB9B\a\x6\x2\x2\xB9B\xB9C\x5\xFE\x80"+
		"\x2\xB9C\xBA6\x3\x2\x2\x2\xB9D\xB9E\ah\x2\x2\xB9E\xBA6\a\xE2\x2\x2\xB9F"+
		"\xBA1\t;\x2\x2\xBA0\xB9F\x3\x2\x2\x2\xBA0\xBA1\x3\x2\x2\x2\xBA1\xBA3\x3"+
		"\x2\x2\x2\xBA2\xBA4\x5\xCEh\x2\xBA3\xBA2\x3\x2\x2\x2\xBA3\xBA4\x3\x2\x2"+
		"\x2\xBA4\xBA6\x3\x2\x2\x2\xBA5\xB8D\x3\x2\x2\x2\xBA5\xB95\x3\x2\x2\x2"+
		"\xBA5\xB98\x3\x2\x2\x2\xBA5\xB9D\x3\x2\x2\x2\xBA5\xBA0\x3\x2\x2\x2\xBA6"+
		"\xEB\x3\x2\x2\x2\xBA7\xBA8\t<\x2\x2\xBA8\xBA9\a\x120\x2\x2\xBA9\xBAA\x5"+
		"\xCEh\x2\xBAA\xBAC\a\x127\x2\x2\xBAB\xBAD\x5\xCEh\x2\xBAC\xBAB\x3\x2\x2"+
		"\x2\xBAC\xBAD\x3\x2\x2\x2\xBAD\xBAE\x3\x2\x2\x2\xBAE\xBB0\a\x127\x2\x2"+
		"\xBAF\xBB1\x5\xCEh\x2\xBB0\xBAF\x3\x2\x2\x2\xBB0\xBB1\x3\x2\x2\x2\xBB1"+
		"\xBB2\x3\x2\x2\x2\xBB2\xBB3\a\x121\x2\x2\xBB3\xED\x3\x2\x2\x2\xBB4\xBB5"+
		"\bx\x1\x2\xBB5\xBB6\x5\xF2z\x2\xBB6\xBB7\a\x12C\x2\x2\xBB7\xBBE\x3\x2"+
		"\x2\x2\xBB8\xBB9\f\x4\x2\x2\xBB9\xBBA\x5\xF4{\x2\xBBA\xBBB\a\x12C\x2\x2"+
		"\xBBB\xBBD\x3\x2\x2\x2\xBBC\xBB8\x3\x2\x2\x2\xBBD\xBC0\x3\x2\x2\x2\xBBE"+
		"\xBBC\x3\x2\x2\x2\xBBE\xBBF\x3\x2\x2\x2\xBBF\xEF\x3\x2\x2\x2\xBC0\xBBE"+
		"\x3\x2\x2\x2\xBC1\xBC2\by\x1\x2\xBC2\xBC3\x5\xF2z\x2\xBC3\xBC9\x3\x2\x2"+
		"\x2\xBC4\xBC5\f\x4\x2\x2\xBC5\xBC6\a\x12C\x2\x2\xBC6\xBC8\x5\xF4{\x2\xBC7"+
		"\xBC4\x3\x2\x2\x2\xBC8\xBCB\x3\x2\x2\x2\xBC9\xBC7\x3\x2\x2\x2\xBC9\xBCA"+
		"\x3\x2\x2\x2\xBCA\xF1\x3\x2\x2\x2\xBCB\xBC9\x3\x2\x2\x2\xBCC\xBCD\a#\x2"+
		"\x2\xBCD\xBCE\a\x12D\x2\x2\xBCE\xBD5\x5\xF4{\x2\xBCF\xBD0\x5\xF8}\x2\xBD0"+
		"\xBD1\a\x12D\x2\x2\xBD1\xBD2\x5\xF4{\x2\xBD2\xBD5\x3\x2\x2\x2\xBD3\xBD5"+
		"\x5\xF4{\x2\xBD4\xBCC\x3\x2\x2\x2\xBD4\xBCF\x3\x2\x2\x2\xBD4\xBD3\x3\x2"+
		"\x2\x2\xBD5\xF3\x3\x2\x2\x2\xBD6\xBD8\x5\x13C\x9F\x2\xBD7\xBD9\x5\xF6"+
		"|\x2\xBD8\xBD7\x3\x2\x2\x2\xBD8\xBD9\x3\x2\x2\x2\xBD9\xF5\x3\x2\x2\x2"+
		"\xBDA\xBDB\a\xEE\x2\x2\xBDB\xBE0\x5\xFE\x80\x2\xBDC\xBDD\a\x127\x2\x2"+
		"\xBDD\xBDF\x5\xFE\x80\x2\xBDE\xBDC\x3\x2\x2\x2\xBDF\xBE2\x3\x2\x2\x2\xBE0"+
		"\xBDE\x3\x2\x2\x2\xBE0\xBE1\x3\x2\x2\x2\xBE1\xBE3\x3\x2\x2\x2\xBE2\xBE0"+
		"\x3\x2\x2\x2\xBE3\xBE4\a\xF0\x2\x2\xBE4\xF7\x3\x2\x2\x2\xBE5\xBE6\x5\x13C"+
		"\x9F\x2\xBE6\xF9\x3\x2\x2\x2\xBE7\xBE8\a\xD6\x2\x2\xBE8\xBEA\a\x12C\x2"+
		"\x2\xBE9\xBE7\x3\x2\x2\x2\xBE9\xBEA\x3\x2\x2\x2\xBEA\xBEB\x3\x2\x2\x2"+
		"\xBEB\xBEC\x5\x13C\x9F\x2\xBEC\xFB\x3\x2\x2\x2\xBED\xBEE\a\xD6\x2\x2\xBEE"+
		"\xBF0\a\x12C\x2\x2\xBEF\xBED\x3\x2\x2\x2\xBEF\xBF0\x3\x2\x2\x2\xBF0\xBF1"+
		"\x3\x2\x2\x2\xBF1\xBF2\x5\xF8}\x2\xBF2\xFD\x3\x2\x2\x2\xBF3\xBF4\a\x9C"+
		"\x2\x2\xBF4\xBF5\a\x89\x2\x2\xBF5\xC05\x5\x102\x82\x2\xBF6\xBF7\x5\x102"+
		"\x82\x2\xBF7\xBF8\a\xA7\x2\x2\xBF8\xC05\x3\x2\x2\x2\xBF9\xBFB\x5\x102"+
		"\x82\x2\xBFA\xBFC\x5\x100\x81\x2\xBFB\xBFA\x3\x2\x2\x2\xBFC\xBFD\x3\x2"+
		"\x2\x2\xBFD\xBFB\x3\x2\x2\x2\xBFD\xBFE\x3\x2\x2\x2\xBFE\xC05\x3\x2\x2"+
		"\x2\xBFF\xC05\x5\x102\x82\x2\xC00\xC01\x5\x102\x82\x2\xC01\xC02\a\x103"+
		"\x2\x2\xC02\xC05\x3\x2\x2\x2\xC03\xC05\x5\x10E\x88\x2\xC04\xBF3\x3\x2"+
		"\x2\x2\xC04\xBF6\x3\x2\x2\x2\xC04\xBF9\x3\x2\x2\x2\xC04\xBFF\x3\x2\x2"+
		"\x2\xC04\xC00\x3\x2\x2\x2\xC04\xC03\x3\x2\x2\x2\xC05\xFF\x3\x2\x2\x2\xC06"+
		"\xC0A\a\x124\x2\x2\xC07\xC09\a\x127\x2\x2\xC08\xC07\x3\x2\x2\x2\xC09\xC0C"+
		"\x3\x2\x2\x2\xC0A\xC08\x3\x2\x2\x2\xC0A\xC0B\x3\x2\x2\x2\xC0B\xC0D\x3"+
		"\x2\x2\x2\xC0C\xC0A\x3\x2\x2\x2\xC0D\xC10\a\x125\x2\x2\xC0E\xC10\a\x144"+
		"\x2\x2\xC0F\xC06\x3\x2\x2\x2\xC0F\xC0E\x3\x2\x2\x2\xC10\x101\x3\x2\x2"+
		"\x2\xC11\xC15\x5\x144\xA3\x2\xC12\xC15\x5\x142\xA2\x2\xC13\xC15\x5\xF0"+
		"y\x2\xC14\xC11\x3\x2\x2\x2\xC14\xC12\x3\x2\x2\x2\xC14\xC13\x3\x2\x2\x2"+
		"\xC15\x103\x3\x2\x2\x2\xC16\xC19\x5\x144\xA3\x2\xC17\xC19\x5\x142\xA2"+
		"\x2\xC18\xC16\x3\x2\x2\x2\xC18\xC17\x3\x2\x2\x2\xC19\x105\x3\x2\x2\x2"+
		"\xC1A\xC1B\a\xEE\x2\x2\xC1B\xC1C\x5\xFE\x80\x2\xC1C\xC1D\a\xF0\x2\x2\xC1D"+
		"\xC1F\x3\x2\x2\x2\xC1E\xC1A\x3\x2\x2\x2\xC1E\xC1F\x3\x2\x2\x2\xC1F\xC20"+
		"\x3\x2\x2\x2\xC20\xC21\a\x122\x2\x2\xC21\xC34\a\x123\x2\x2\xC22\xC23\a"+
		"\xEE\x2\x2\xC23\xC24\x5\xFE\x80\x2\xC24\xC25\a\xF0\x2\x2\xC25\xC27\x3"+
		"\x2\x2\x2\xC26\xC22\x3\x2\x2\x2\xC26\xC27\x3\x2\x2\x2\xC27\xC28\x3\x2"+
		"\x2\x2\xC28\xC29\a\x122\x2\x2\xC29\xC2E\x5\x108\x85\x2\xC2A\xC2B\a\x127"+
		"\x2\x2\xC2B\xC2D\x5\x108\x85\x2\xC2C\xC2A\x3\x2\x2\x2\xC2D\xC30\x3\x2"+
		"\x2\x2\xC2E\xC2C\x3\x2\x2\x2\xC2E\xC2F\x3\x2\x2\x2\xC2F\xC31\x3\x2\x2"+
		"\x2\xC30\xC2E\x3\x2\x2\x2\xC31\xC32\a\x123\x2\x2\xC32\xC34\x3\x2\x2\x2"+
		"\xC33\xC1E\x3\x2\x2\x2\xC33\xC26\x3\x2\x2\x2\xC34\x107\x3\x2\x2\x2\xC35"+
		"\xC37\x5\xCEh\x2\xC36\xC35\x3\x2\x2\x2\xC36\xC37\x3\x2\x2\x2\xC37\x109"+
		"\x3\x2\x2\x2\xC38\xC39\a\xE\x2\x2\xC39\xC42\a\x122\x2\x2\xC3A\xC3F\x5"+
		"\x10C\x87\x2\xC3B\xC3C\a\x127\x2\x2\xC3C\xC3E\x5\x10C\x87\x2\xC3D\xC3B"+
		"\x3\x2\x2\x2\xC3E\xC41\x3\x2\x2\x2\xC3F\xC3D\x3\x2\x2\x2\xC3F\xC40\x3"+
		"\x2\x2\x2\xC40\xC43\x3\x2\x2\x2\xC41\xC3F\x3\x2\x2\x2\xC42\xC3A\x3\x2"+
		"\x2\x2\xC42\xC43\x3\x2\x2\x2\xC43\xC44\x3\x2\x2\x2\xC44\xC45\a\x123\x2"+
		"\x2\xC45\x10B\x3\x2\x2\x2\xC46\xC47\x5\xF8}\x2\xC47\xC48\x5\xCCg\x2\xC48"+
		"\xC49\x5\xCEh\x2\xC49\xC4C\x3\x2\x2\x2\xC4A\xC4C\x5\xCEh\x2\xC4B\xC46"+
		"\x3\x2\x2\x2\xC4B\xC4A\x3\x2\x2\x2\xC4C\x10D\x3\x2\x2\x2\xC4D\xC4F\aq"+
		"\x2\x2\xC4E\xC4D\x3\x2\x2\x2\xC4E\xC4F\x3\x2\x2\x2\xC4F\xC50\x3\x2\x2"+
		"\x2\xC50\xC59\a\x120\x2\x2\xC51\xC56\x5\x110\x89\x2\xC52\xC53\a\x127\x2"+
		"\x2\xC53\xC55\x5\x110\x89\x2\xC54\xC52\x3\x2\x2\x2\xC55\xC58\x3\x2\x2"+
		"\x2\xC56\xC54\x3\x2\x2\x2\xC56\xC57\x3\x2\x2\x2\xC57\xC5A\x3\x2\x2\x2"+
		"\xC58\xC56\x3\x2\x2\x2\xC59\xC51\x3\x2\x2\x2\xC59\xC5A\x3\x2\x2\x2\xC5A"+
		"\xC5B\x3\x2\x2\x2\xC5B\xC5C\a\x121\x2\x2\xC5C\x10F\x3\x2\x2\x2\xC5D\xC5E"+
		"\x5\xF8}\x2\xC5E\xC5F\a\x6\x2\x2\xC5F\xC61\x3\x2\x2\x2\xC60\xC5D\x3\x2"+
		"\x2\x2\xC60\xC61\x3\x2\x2\x2\xC61\xC62\x3\x2\x2\x2\xC62\xC63\x5\xFE\x80"+
		"\x2\xC63\x111\x3\x2\x2\x2\xC64\xC65\aq\x2\x2\xC65\xC6E\a\x122\x2\x2\xC66"+
		"\xC6B\x5\x114\x8B\x2\xC67\xC68\a\x127\x2\x2\xC68\xC6A\x5\x114\x8B\x2\xC69"+
		"\xC67\x3\x2\x2\x2\xC6A\xC6D\x3\x2\x2\x2\xC6B\xC69\x3\x2\x2\x2\xC6B\xC6C"+
		"\x3\x2\x2\x2\xC6C\xC6F\x3\x2\x2\x2\xC6D\xC6B\x3\x2\x2\x2\xC6E\xC66\x3"+
		"\x2\x2\x2\xC6E\xC6F\x3\x2\x2\x2\xC6F\xC70\x3\x2\x2\x2\xC70\xC71\a\x123"+
		"\x2\x2\xC71\x113\x3\x2\x2\x2\xC72\xC73\x5\xF8}\x2\xC73\xC74\x5\xCCg\x2"+
		"\xC74\xC75\x5\xCEh\x2\xC75\xC78\x3\x2\x2\x2\xC76\xC78\x5\xCEh\x2\xC77"+
		"\xC72\x3\x2\x2\x2\xC77\xC76\x3\x2\x2\x2\xC78\x115\x3\x2\x2\x2\xC79\xC7A"+
		"\a\x120\x2\x2\xC7A\xC7F\x5\xFA~\x2\xC7B\xC7C\a\x127\x2\x2\xC7C\xC7E\x5"+
		"\xFA~\x2\xC7D\xC7B\x3\x2\x2\x2\xC7E\xC81\x3\x2\x2\x2\xC7F\xC7D\x3\x2\x2"+
		"\x2\xC7F\xC80\x3\x2\x2\x2\xC80\xC82\x3\x2\x2\x2\xC81\xC7F\x3\x2\x2\x2"+
		"\xC82\xC83\a\x121\x2\x2\xC83\x117\x3\x2\x2\x2\xC84\xC85\a\x120\x2\x2\xC85"+
		"\xC8A\x5\x11A\x8E\x2\xC86\xC87\a\x127\x2\x2\xC87\xC89\x5\x11A\x8E\x2\xC88"+
		"\xC86\x3\x2\x2\x2\xC89\xC8C\x3\x2\x2\x2\xC8A\xC88\x3\x2\x2\x2\xC8A\xC8B"+
		"\x3\x2\x2\x2\xC8B\xC8D\x3\x2\x2\x2\xC8C\xC8A\x3\x2\x2\x2\xC8D\xC8E\a\x121"+
		"\x2\x2\xC8E\x119\x3\x2\x2\x2\xC8F\xC90\x5\xFA~\x2\xC90\xC91\a\x6\x2\x2"+
		"\xC91\xC92\x5\xFE\x80\x2\xC92\x11B\x3\x2\x2\x2\xC93\xC94\a\x122\x2\x2"+
		"\xC94\xC96\a\x105\x2\x2\xC95\xC97\a\x15D\x2\x2\xC96\xC95\x3\x2\x2\x2\xC96"+
		"\xC97\x3\x2\x2\x2\xC97\xC98\x3\x2\x2\x2\xC98\xC99\x5\x11E\x90\x2\xC99"+
		"\xC9A\a\x123\x2\x2\xC9A\xCB0\x3\x2\x2\x2\xC9B\xC9C\a\x122\x2\x2\xC9C\xC9E"+
		"\a\x128\x2\x2\xC9D\xC9F\x5\x120\x91\x2\xC9E\xC9D\x3\x2\x2\x2\xC9E\xC9F"+
		"\x3\x2\x2\x2\xC9F\xCA0\x3\x2\x2\x2\xCA0\xCA2\a\x128\x2\x2\xCA1\xCA3\a"+
		"\x15D\x2\x2\xCA2\xCA1\x3\x2\x2\x2\xCA2\xCA3\x3\x2\x2\x2\xCA3\xCA4\x3\x2"+
		"\x2\x2\xCA4\xCA5\x5\x11E\x90\x2\xCA5\xCA6\a\x123\x2\x2\xCA6\xCB0\x3\x2"+
		"\x2\x2\xCA7\xCA9\a\x122\x2\x2\xCA8\xCAA\x5\x120\x91\x2\xCA9\xCA8\x3\x2"+
		"\x2\x2\xCA9\xCAA\x3\x2\x2\x2\xCAA\xCAB\x3\x2\x2\x2\xCAB\xCAC\a\x15D\x2"+
		"\x2\xCAC\xCAD\x5\x11E\x90\x2\xCAD\xCAE\a\x123\x2\x2\xCAE\xCB0\x3\x2\x2"+
		"\x2\xCAF\xC93\x3\x2\x2\x2\xCAF\xC9B\x3\x2\x2\x2\xCAF\xCA7\x3\x2\x2\x2"+
		"\xCB0\x11D\x3\x2\x2\x2\xCB1\xCB3\x5\xCEh\x2\xCB2\xCB1\x3\x2\x2\x2\xCB2"+
		"\xCB3\x3\x2\x2\x2\xCB3\xCB9\x3\x2\x2\x2\xCB4\xCB5\x5\xE\b\x2\xCB5\xCB6"+
		"\x5*\x16\x2\xCB6\xCB9\x3\x2\x2\x2\xCB7\xCB9\x5\x124\x93\x2\xCB8\xCB2\x3"+
		"\x2\x2\x2\xCB8\xCB4\x3\x2\x2\x2\xCB8\xCB7\x3\x2\x2\x2\xCB9\x11F\x3\x2"+
		"\x2\x2\xCBA\xCBD\x5\x122\x92\x2\xCBB\xCBD\x5\x128\x95\x2\xCBC\xCBA\x3"+
		"\x2\x2\x2\xCBC\xCBB\x3\x2\x2\x2\xCBD\x121\x3\x2\x2\x2\xCBE\xCC3\x5\x13C"+
		"\x9F\x2\xCBF\xCC0\a\x127\x2\x2\xCC0\xCC2\x5\x13C\x9F\x2\xCC1\xCBF\x3\x2"+
		"\x2\x2\xCC2\xCC5\x3\x2\x2\x2\xCC3\xCC1\x3\x2\x2\x2\xCC3\xCC4\x3\x2\x2"+
		"\x2\xCC4\x123\x3\x2\x2\x2\xCC5\xCC3\x3\x2\x2\x2\xCC6\xCC8\x5\xCEh\x2\xCC7"+
		"\xCC6\x3\x2\x2\x2\xCC7\xCC8\x3\x2\x2\x2\xCC8\xCC9\x3\x2\x2\x2\xCC9\xCCB"+
		"\a\x127\x2\x2\xCCA\xCC7\x3\x2\x2\x2\xCCB\xCCC\x3\x2\x2\x2\xCCC\xCCA\x3"+
		"\x2\x2\x2\xCCC\xCCD\x3\x2\x2\x2\xCCD\xCCE\x3\x2\x2\x2\xCCE\xCCF\x5\xCE"+
		"h\x2\xCCF\x125\x3\x2\x2\x2\xCD0\xCD2\ay\x2\x2\xCD1\xCD0\x3\x2\x2\x2\xCD1"+
		"\xCD2\x3\x2\x2\x2\xCD2\xCD3\x3\x2\x2\x2\xCD3\xCD9\aW\x2\x2\xCD4\xCD6\a"+
		"\x120\x2\x2\xCD5\xCD7\x5\x128\x95\x2\xCD6\xCD5\x3\x2\x2\x2\xCD6\xCD7\x3"+
		"\x2\x2\x2\xCD7\xCD8\x3\x2\x2\x2\xCD8\xCDA\a\x121\x2\x2\xCD9\xCD4\x3\x2"+
		"\x2\x2\xCD9\xCDA\x3\x2\x2\x2\xCDA\xCDB\x3\x2\x2\x2\xCDB\xCDC\a\x122\x2"+
		"\x2\xCDC\xCDD\x5\x11E\x90\x2\xCDD\xCDE\a\x123\x2\x2\xCDE\x127\x3\x2\x2"+
		"\x2\xCDF\xCE4\x5\x12A\x96\x2\xCE0\xCE1\a\x127\x2\x2\xCE1\xCE3\x5\x12A"+
		"\x96\x2\xCE2\xCE0\x3\x2\x2\x2\xCE3\xCE6\x3\x2\x2\x2\xCE4\xCE2\x3\x2\x2"+
		"\x2\xCE4\xCE5\x3\x2\x2\x2\xCE5\x129\x3\x2\x2\x2\xCE6\xCE4\x3\x2\x2\x2"+
		"\xCE7\xCE8\x5\x13C\x9F\x2\xCE8\xCE9\x5(\x15\x2\xCE9\xCEA\x5\xFE\x80\x2"+
		"\xCEA\x12B\x3\x2\x2\x2\xCEB\xCEC\x5\x12E\x98\x2\xCEC\xCED\x5\x130\x99"+
		"\x2\xCED\x12D\x3\x2\x2\x2\xCEE\xCEF\a\x82\x2\x2\xCEF\xCF2\x5\x13C\x9F"+
		"\x2\xCF0\xCF1\a\x6\x2\x2\xCF1\xCF3\x5\x102\x82\x2\xCF2\xCF0\x3\x2\x2\x2"+
		"\xCF2\xCF3\x3\x2\x2\x2\xCF3\xCF4\x3\x2\x2\x2\xCF4\xCF5\a-\x2\x2\xCF5\xCF6"+
		"\x5\xCEh\x2\xCF6\x12F\x3\x2\x2\x2\xCF7\xCF9\x5\x132\x9A\x2\xCF8\xCF7\x3"+
		"\x2\x2\x2\xCF9\xCFC\x3\x2\x2\x2\xCFA\xCF8\x3\x2\x2\x2\xCFA\xCFB\x3\x2"+
		"\x2\x2\xCFB\xCFD\x3\x2\x2\x2\xCFC\xCFA\x3\x2\x2\x2\xCFD\xCFF\x5\x138\x9D"+
		"\x2\xCFE\xD00\x5\x13A\x9E\x2\xCFF\xCFE\x3\x2\x2\x2\xCFF\xD00\x3\x2\x2"+
		"\x2\xD00\x131\x3\x2\x2\x2\xD01\xD22\x5\x12E\x98\x2\xD02\xD03\a\x87\x2"+
		"\x2\xD03\xD04\x5\x13C\x9F\x2\xD04\xD05\x5\xCCg\x2\xD05\xD06\x5\xCEh\x2"+
		"\xD06\xD22\x3\x2\x2\x2\xD07\xD08\a\x97\x2\x2\xD08\xD22\x5\xCEh\x2\xD09"+
		"\xD0A\a\x86\x2\x2\xD0A\xD0D\x5\x13C\x9F\x2\xD0B\xD0C\a\x6\x2\x2\xD0C\xD0E"+
		"\x5\x102\x82\x2\xD0D\xD0B\x3\x2\x2\x2\xD0D\xD0E\x3\x2\x2\x2\xD0E\xD0F"+
		"\x3\x2\x2\x2\xD0F\xD10\a-\x2\x2\xD10\xD11\x5\xCEh\x2\xD11\xD12\a\x8A\x2"+
		"\x2\xD12\xD13\x5\xCEh\x2\xD13\xD14\a\x7F\x2\x2\xD14\xD16\x5\xCEh\x2\xD15"+
		"\xD17\x5\x134\x9B\x2\xD16\xD15\x3\x2\x2\x2\xD16\xD17\x3\x2\x2\x2\xD17"+
		"\xD22\x3\x2\x2\x2\xD18\xD19\a\x8B\x2\x2\xD19\xD1E\x5\x136\x9C\x2\xD1A"+
		"\xD1B\a\x127\x2\x2\xD1B\xD1D\x5\x136\x9C\x2\xD1C\xD1A\x3\x2\x2\x2\xD1D"+
		"\xD20\x3\x2\x2\x2\xD1E\xD1C\x3\x2\x2\x2\xD1E\xD1F\x3\x2\x2\x2\xD1F\xD22"+
		"\x3\x2\x2\x2\xD20\xD1E\x3\x2\x2\x2\xD21\xD01\x3\x2\x2\x2\xD21\xD02\x3"+
		"\x2\x2\x2\xD21\xD07\x3\x2\x2\x2\xD21\xD09\x3\x2\x2\x2\xD21\xD18\x3\x2"+
		"\x2\x2\xD22\x133\x3\x2\x2\x2\xD23\xD24\a\x85\x2\x2\xD24\xD25\x5\x13C\x9F"+
		"\x2\xD25\x135\x3\x2\x2\x2\xD26\xD28\x5\xCEh\x2\xD27\xD29\t=\x2\x2\xD28"+
		"\xD27\x3\x2\x2\x2\xD28\xD29\x3\x2\x2\x2\xD29\x137\x3\x2\x2\x2\xD2A\xD2B"+
		"\a\x8F\x2\x2\xD2B\xD32\x5\xCEh\x2\xD2C\xD2D\a\x83\x2\x2\xD2D\xD2E\x5\xCE"+
		"h\x2\xD2E\xD2F\a|\x2\x2\xD2F\xD30\x5\xCEh\x2\xD30\xD32\x3\x2\x2\x2\xD31"+
		"\xD2A\x3\x2\x2\x2\xD31\xD2C\x3\x2\x2\x2\xD32\x139\x3\x2\x2\x2\xD33\xD34"+
		"\a\x85\x2\x2\xD34\xD35\x5\x13C\x9F\x2\xD35\xD36\x5\x130\x99\x2\xD36\x13B"+
		"\x3\x2\x2\x2\xD37\xD40\a\x15E\x2\x2\xD38\xD40\x5\x14C\xA7\x2\xD39\xD40"+
		"\x5\x14E\xA8\x2\xD3A\xD40\x5\x16E\xB8\x2\xD3B\xD3C\x6\x9F\x42\x2\xD3C"+
		"\xD40\x5\x142\xA2\x2\xD3D\xD3E\x6\x9F\x43\x2\xD3E\xD40\x5\x144\xA3\x2"+
		"\xD3F\xD37\x3\x2\x2\x2\xD3F\xD38\x3\x2\x2\x2\xD3F\xD39\x3\x2\x2\x2\xD3F"+
		"\xD3A\x3\x2\x2\x2\xD3F\xD3B\x3\x2\x2\x2\xD3F\xD3D\x3\x2\x2\x2\xD40\x13D"+
		"\x3\x2\x2\x2\xD41\xD49\a\x15E\x2\x2\xD42\xD49\a\x13F\x2\x2\xD43\xD49\x5"+
		"\x14C\xA7\x2\xD44\xD49\x5\x14E\xA8\x2\xD45\xD49\x5\x16E\xB8\x2\xD46\xD49"+
		"\x5\x142\xA2\x2\xD47\xD49\x5\x144\xA3\x2\xD48\xD41\x3\x2\x2\x2\xD48\xD42"+
		"\x3\x2\x2\x2\xD48\xD43\x3\x2\x2\x2\xD48\xD44\x3\x2\x2\x2\xD48\xD45\x3"+
		"\x2\x2\x2\xD48\xD46\x3\x2\x2\x2\xD48\xD47\x3\x2\x2\x2\xD49\x13F\x3\x2"+
		"\x2\x2\xD4A\xD4B\t>\x2\x2\xD4B\x141\x3\x2\x2\x2\xD4C\xD4D\t?\x2\x2\xD4D"+
		"\x143\x3\x2\x2\x2\xD4E\xD4F\t@\x2\x2\xD4F\x145\x3\x2\x2\x2\xD50\xD51\t"+
		"\x41\x2\x2\xD51\x147\x3\x2\x2\x2\xD52\xD53\a\x138\x2\x2\xD53\xD54\a\x12C"+
		"\x2\x2\xD54\xD55\a\x138\x2\x2\xD55\xD56\a\x12C\x2\x2\xD56\xD71\a\x138"+
		"\x2\x2\xD57\xD58\a\x122\x2\x2\xD58\xD59\a\xFD\x2\x2\xD59\xD5A\a\x138\x2"+
		"\x2\xD5A\xD5B\a\xFA\x2\x2\xD5B\xD5C\a\x138\x2\x2\xD5C\xD5D\a\xFA\x2\x2"+
		"\xD5D\xD67\a\x138\x2\x2\xD5E\xD65\a\x138\x2\x2\xD5F\xD60\a\x126\x2\x2"+
		"\xD60\xD63\a\x138\x2\x2\xD61\xD62\a\x126\x2\x2\xD62\xD64\a\x138\x2\x2"+
		"\xD63\xD61\x3\x2\x2\x2\xD63\xD64\x3\x2\x2\x2\xD64\xD66\x3\x2\x2\x2\xD65"+
		"\xD5F\x3\x2\x2\x2\xD65\xD66\x3\x2\x2\x2\xD66\xD68\x3\x2\x2\x2\xD67\xD5E"+
		"\x3\x2\x2\x2\xD67\xD68\x3\x2\x2\x2\xD68\xD6C\x3\x2\x2\x2\xD69\xD6B\v\x2"+
		"\x2\x2\xD6A\xD69\x3\x2\x2\x2\xD6B\xD6E\x3\x2\x2\x2\xD6C\xD6D\x3\x2\x2"+
		"\x2\xD6C\xD6A\x3\x2\x2\x2\xD6D\xD6F\x3\x2\x2\x2\xD6E\xD6C\x3\x2\x2\x2"+
		"\xD6F\xD71\a\x123\x2\x2\xD70\xD52\x3\x2\x2\x2\xD70\xD57\x3\x2\x2\x2\xD71"+
		"\x149\x3\x2\x2\x2\xD72\xD73\t\x42\x2\x2\xD73\x14B\x3\x2\x2\x2\xD74\xD75"+
		"\t\x43\x2\x2\xD75\x14D\x3\x2\x2\x2\xD76\xD77\t\x44\x2\x2\xD77\x14F\x3"+
		"\x2\x2\x2\xD78\xD7A\x5\x8CG\x2\xD79\xD78\x3\x2\x2\x2\xD79\xD7A\x3\x2\x2"+
		"\x2\xD7A\xD7C\x3\x2\x2\x2\xD7B\xD7D\x5\x152\xAA\x2\xD7C\xD7B\x3\x2\x2"+
		"\x2\xD7C\xD7D\x3\x2\x2\x2\xD7D\xD7E\x3\x2\x2\x2\xD7E\xD80\a\xE\x2\x2\xD7F"+
		"\xD81\x5\xEEx\x2\xD80\xD7F\x3\x2\x2\x2\xD80\xD81\x3\x2\x2\x2\xD81\xD82"+
		"\x3\x2\x2\x2\xD82\xD84\x5\x13C\x9F\x2\xD83\xD85\x5H%\x2\xD84\xD83\x3\x2"+
		"\x2\x2\xD84\xD85\x3\x2\x2\x2\xD85\xD8F\x3\x2\x2\x2\xD86\xD87\t\x45\x2"+
		"\x2\xD87\xD8C\x5\xFE\x80\x2\xD88\xD89\a\x127\x2\x2\xD89\xD8B\x5\xFE\x80"+
		"\x2\xD8A\xD88\x3\x2\x2\x2\xD8B\xD8E\x3\x2\x2\x2\xD8C\xD8A\x3\x2\x2\x2"+
		"\xD8C\xD8D\x3\x2\x2\x2\xD8D\xD90\x3\x2\x2\x2\xD8E\xD8C\x3\x2\x2\x2\xD8F"+
		"\xD86\x3\x2\x2\x2\xD8F\xD90\x3\x2\x2\x2\xD90\xD9A\x3\x2\x2\x2\xD91\xD92"+
		"\a^\x2\x2\xD92\xD97\x5\xFE\x80\x2\xD93\xD94\a\x127\x2\x2\xD94\xD96\x5"+
		"\xFE\x80\x2\xD95\xD93\x3\x2\x2\x2\xD96\xD99\x3\x2\x2\x2\xD97\xD95\x3\x2"+
		"\x2\x2\xD97\xD98\x3\x2\x2\x2\xD98\xD9B\x3\x2\x2\x2\xD99\xD97\x3\x2\x2"+
		"\x2\xD9A\xD91\x3\x2\x2\x2\xD9A\xD9B\x3\x2\x2\x2\xD9B\xD9F\x3\x2\x2\x2"+
		"\xD9C\xD9E\x5L\'\x2\xD9D\xD9C\x3\x2\x2\x2\xD9E\xDA1\x3\x2\x2\x2\xD9F\xD9D"+
		"\x3\x2\x2\x2\xD9F\xDA0\x3\x2\x2\x2\xDA0\xDA2\x3\x2\x2\x2\xDA1\xD9F\x3"+
		"\x2\x2\x2\xDA2\xDA6\x5\xE\b\x2\xDA3\xDA5\x5\x154\xAB\x2\xDA4\xDA3\x3\x2"+
		"\x2\x2\xDA5\xDA8\x3\x2\x2\x2\xDA6\xDA4\x3\x2\x2\x2\xDA6\xDA7\x3\x2\x2"+
		"\x2\xDA7\xDA9\x3\x2\x2\x2\xDA8\xDA6\x3\x2\x2\x2\xDA9\xDAA\a\xC1\x2\x2"+
		"\xDAA\xDAB\x5\xE\b\x2\xDAB\x151\x3\x2\x2\x2\xDAC\xDAE\t\x46\x2\x2\xDAD"+
		"\xDAC\x3\x2\x2\x2\xDAE\xDAF\x3\x2\x2\x2\xDAF\xDAD\x3\x2\x2\x2\xDAF\xDB0"+
		"\x3\x2\x2\x2\xDB0\x153\x3\x2\x2\x2\xDB1\xDB7\x5\x156\xAC\x2\xDB2\xDB7"+
		"\x5\x162\xB2\x2\xDB3\xDB7\x5\x16C\xB7\x2\xDB4\xDB7\x5\x15A\xAE\x2\xDB5"+
		"\xDB7\x5\x166\xB4\x2\xDB6\xDB1\x3\x2\x2\x2\xDB6\xDB2\x3\x2\x2\x2\xDB6"+
		"\xDB3\x3\x2\x2\x2\xDB6\xDB4\x3\x2\x2\x2\xDB6\xDB5\x3\x2\x2\x2\xDB7\x155"+
		"\x3\x2\x2\x2\xDB8\xDB9\x5\x158\xAD\x2\xDB9\xDBA\a\x126\x2\x2\xDBA\xDBB"+
		"\x5\xE\b\x2\xDBB\x157\x3\x2\x2\x2\xDBC\xDBD\tG\x2\x2\xDBD\x159\x3\x2\x2"+
		"\x2\xDBE\xDC0\x5\x8CG\x2\xDBF\xDBE\x3\x2\x2\x2\xDBF\xDC0\x3\x2\x2\x2\xDC0"+
		"\xDC2\x3\x2\x2\x2\xDC1\xDC3\x5\x160\xB1\x2\xDC2\xDC1\x3\x2\x2\x2\xDC2"+
		"\xDC3\x3\x2\x2\x2\xDC3\xDC4\x3\x2\x2\x2\xDC4\xDC5\a\x32\x2\x2\xDC5\xDC7"+
		"\x5\x13C\x9F\x2\xDC6\xDC8\x5\x15C\xAF\x2\xDC7\xDC6\x3\x2\x2\x2\xDC7\xDC8"+
		"\x3\x2\x2\x2\xDC8\xDD4\x3\x2\x2\x2\xDC9\xDD5\x5\x15E\xB0\x2\xDCA\xDCB"+
		"\a\x127\x2\x2\xDCB\xDCD\x5\x13C\x9F\x2\xDCC\xDCE\x5\x15C\xAF\x2\xDCD\xDCC"+
		"\x3\x2\x2\x2\xDCD\xDCE\x3\x2\x2\x2\xDCE\xDD0\x3\x2\x2\x2\xDCF\xDCA\x3"+
		"\x2\x2\x2\xDD0\xDD3\x3\x2\x2\x2\xDD1\xDCF\x3\x2\x2\x2\xDD1\xDD2\x3\x2"+
		"\x2\x2\xDD2\xDD5\x3\x2\x2\x2\xDD3\xDD1\x3\x2\x2\x2\xDD4\xDC9\x3\x2\x2"+
		"\x2\xDD4\xDD1\x3\x2\x2\x2\xDD5\xDD6\x3\x2\x2\x2\xDD6\xDD7\x5\xE\b\x2\xDD7"+
		"\x15B\x3\x2\x2\x2\xDD8\xDE1\a\x120\x2\x2\xDD9\xDDE\x5\x13C\x9F\x2\xDDA"+
		"\xDDB\a\x127\x2\x2\xDDB\xDDD\x5\x13C\x9F\x2\xDDC\xDDA\x3\x2\x2\x2\xDDD"+
		"\xDE0\x3\x2\x2\x2\xDDE\xDDC\x3\x2\x2\x2\xDDE\xDDF\x3\x2\x2\x2\xDDF\xDE2"+
		"\x3\x2\x2\x2\xDE0\xDDE\x3\x2\x2\x2\xDE1\xDD9\x3\x2\x2\x2\xDE1\xDE2\x3"+
		"\x2\x2\x2\xDE2\xDE3\x3\x2\x2\x2\xDE3\xDE4\a\x121\x2\x2\xDE4\x15D\x3\x2"+
		"\x2\x2\xDE5\xDE6\a,\x2\x2\xDE6\xDE8\x5\x13C\x9F\x2\xDE7\xDE5\x3\x2\x2"+
		"\x2\xDE7\xDE8\x3\x2\x2\x2\xDE8\xDEB\x3\x2\x2\x2\xDE9\xDEA\a-\x2\x2\xDEA"+
		"\xDEC\x5\x13C\x9F\x2\xDEB\xDE9\x3\x2\x2\x2\xDEB\xDEC\x3\x2\x2\x2\xDEC"+
		"\x15F\x3\x2\x2\x2\xDED\xDEF\tH\x2\x2\xDEE\xDED\x3\x2\x2\x2\xDEF\xDF0\x3"+
		"\x2\x2\x2\xDF0\xDEE\x3\x2\x2\x2\xDF0\xDF1\x3\x2\x2\x2\xDF1\x161\x3\x2"+
		"\x2\x2\xDF2\xDF4\x5\x160\xB1\x2\xDF3\xDF2\x3\x2\x2\x2\xDF3\xDF4\x3\x2"+
		"\x2\x2\xDF4\xDF5\x3\x2\x2\x2\xDF5\xDF6\a\x94\x2\x2\xDF6\xE03\x5\x13C\x9F"+
		"\x2\xDF7\xE04\x5\x15E\xB0\x2\xDF8\xDF9\a\x127\x2\x2\xDF9\xDFB\x5\x13C"+
		"\x9F\x2\xDFA\xDF8\x3\x2\x2\x2\xDFB\xDFE\x3\x2\x2\x2\xDFC\xDFA\x3\x2\x2"+
		"\x2\xDFC\xDFD\x3\x2\x2\x2\xDFD\xE01\x3\x2\x2\x2\xDFE\xDFC\x3\x2\x2\x2"+
		"\xDFF\xE00\a\x6\x2\x2\xE00\xE02\x5\xFE\x80\x2\xE01\xDFF\x3\x2\x2\x2\xE01"+
		"\xE02\x3\x2\x2\x2\xE02\xE04\x3\x2\x2\x2\xE03\xDF7\x3\x2\x2\x2\xE03\xDFC"+
		"\x3\x2\x2\x2\xE04\xE06\x3\x2\x2\x2\xE05\xE07\a\xCB\x2\x2\xE06\xE05\x3"+
		"\x2\x2\x2\xE06\xE07\x3\x2\x2\x2\xE07\xE09\x3\x2\x2\x2\xE08\xE0A\a\xC9"+
		"\x2\x2\xE09\xE08\x3\x2\x2\x2\xE09\xE0A\x3\x2\x2\x2\xE0A\xE0C\x3\x2\x2"+
		"\x2\xE0B\xE0D\x5\x164\xB3\x2\xE0C\xE0B\x3\x2\x2\x2\xE0C\xE0D\x3\x2\x2"+
		"\x2\xE0D\xE0F\x3\x2\x2\x2\xE0E\xE10\a\xC8\x2\x2\xE0F\xE0E\x3\x2\x2\x2"+
		"\xE0F\xE10\x3\x2\x2\x2\xE10\xE11\x3\x2\x2\x2\xE11\xE12\x5\xE\b\x2\xE12"+
		"\x163\x3\x2\x2\x2\xE13\xE14\a\xBF\x2\x2\xE14\xE15\x5\x158\xAD\x2\xE15"+
		"\x165\x3\x2\x2\x2\xE16\xE18\x5\x8CG\x2\xE17\xE16\x3\x2\x2\x2\xE17\xE18"+
		"\x3\x2\x2\x2\xE18\xE19\x3\x2\x2\x2\xE19\xE1B\x5\x168\xB5\x2\xE1A\xE1C"+
		"\x5\x160\xB1\x2\xE1B\xE1A\x3\x2\x2\x2\xE1B\xE1C\x3\x2\x2\x2\xE1C\xE1D"+
		"\x3\x2\x2\x2\xE1D\xE1E\a\x32\x2\x2\xE1E\xE21\x5\x13C\x9F\x2\xE1F\xE20"+
		"\a\x94\x2\x2\xE20\xE22\x5\x13C\x9F\x2\xE21\xE1F\x3\x2\x2\x2\xE21\xE22"+
		"\x3\x2\x2\x2\xE22\xE25\x3\x2\x2\x2\xE23\xE24\a\x6\x2\x2\xE24\xE26\x5\xFE"+
		"\x80\x2\xE25\xE23\x3\x2\x2\x2\xE25\xE26\x3\x2\x2\x2\xE26\xE27\x3\x2\x2"+
		"\x2\xE27\xE28\x5\xE\b\x2\xE28\x167\x3\x2\x2\x2\xE29\xE2B\tI\x2\x2\xE2A"+
		"\xE29\x3\x2\x2\x2\xE2B\xE2C\x3\x2\x2\x2\xE2C\xE2A\x3\x2\x2\x2\xE2C\xE2D"+
		"\x3\x2\x2\x2\xE2D\x169\x3\x2\x2\x2\xE2E\xE30\x5\x8CG\x2\xE2F\xE2E\x3\x2"+
		"\x2\x2\xE2F\xE30\x3\x2\x2\x2\xE30\xE32\x3\x2\x2\x2\xE31\xE33\x5\x168\xB5"+
		"\x2\xE32\xE31\x3\x2\x2\x2\xE32\xE33\x3\x2\x2\x2\xE33\xE35\x3\x2\x2\x2"+
		"\xE34\xE36\x5\x160\xB1\x2\xE35\xE34\x3\x2\x2\x2\xE35\xE36\x3\x2\x2\x2"+
		"\xE36\xE37\x3\x2\x2\x2\xE37\xE3B\a\x32\x2\x2\xE38\xE39\x5\x13C\x9F\x2"+
		"\xE39\xE3A\a\x126\x2\x2\xE3A\xE3C\x3\x2\x2\x2\xE3B\xE38\x3\x2\x2\x2\xE3B"+
		"\xE3C\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\xE3E\x5\x14\v\x2\xE3E\xE3F"+
		"\x5\xE\b\x2\xE3F\xE43\x5*\x16\x2\xE40\xE41\a\x19\x2\x2\xE41\xE42\a\x32"+
		"\x2\x2\xE42\xE44\x5\xE\b\x2\xE43\xE40\x3\x2\x2\x2\xE43\xE44\x3\x2\x2\x2"+
		"\xE44\x16B\x3\x2\x2\x2\xE45\xE47\x5\x8CG\x2\xE46\xE45\x3\x2\x2\x2\xE46"+
		"\xE47\x3\x2\x2\x2\xE47\xE48\x3\x2\x2\x2\xE48\xE4A\a\xC6\x2\x2\xE49\xE4B"+
		"\x5\x168\xB5\x2\xE4A\xE49\x3\x2\x2\x2\xE4A\xE4B\x3\x2\x2\x2\xE4B\xE4D"+
		"\x3\x2\x2\x2\xE4C\xE4E\x5\x160\xB1\x2\xE4D\xE4C\x3\x2\x2\x2\xE4D\xE4E"+
		"\x3\x2\x2\x2\xE4E\xE4F\x3\x2\x2\x2\xE4F\xE50\a\x32\x2\x2\xE50\xE51\x5"+
		"\x14\v\x2\xE51\xE52\x5\xE\b\x2\xE52\xE56\x5*\x16\x2\xE53\xE54\a\x19\x2"+
		"\x2\xE54\xE55\a\x32\x2\x2\xE55\xE57\x5\xE\b\x2\xE56\xE53\x3\x2\x2\x2\xE56"+
		"\xE57\x3\x2\x2\x2\xE57\x16D\x3\x2\x2\x2\xE58\xE59\tJ\x2\x2\xE59\x16F\x3"+
		"\x2\x2\x2\xE5A\xE5C\x5\x8CG\x2\xE5B\xE5A\x3\x2\x2\x2\xE5B\xE5C\x3\x2\x2"+
		"\x2\xE5C\xE5D\x3\x2\x2\x2\xE5D\xE5F\a\x11\x2\x2\xE5E\xE60\x5\x46$\x2\xE5F"+
		"\xE5E\x3\x2\x2\x2\xE5F\xE60\x3\x2\x2\x2\xE60\xE61\x3\x2\x2\x2\xE61\xE63"+
		"\a\xE\x2\x2\xE62\xE64\x5\xEEx\x2\xE63\xE62\x3\x2\x2\x2\xE63\xE64\x3\x2"+
		"\x2\x2\xE64\xE65\x3\x2\x2\x2\xE65\xE67\x5\x13C\x9F\x2\xE66\xE68\x5H%\x2"+
		"\xE67\xE66\x3\x2\x2\x2\xE67\xE68\x3\x2\x2\x2\xE68\xE6B\x3\x2\x2\x2\xE69"+
		"\xE6A\a\x6\x2\x2\xE6A\xE6C\x5\xFE\x80\x2\xE6B\xE69\x3\x2\x2\x2\xE6B\xE6C"+
		"\x3\x2\x2\x2\xE6C\xE6E\x3\x2\x2\x2\xE6D\xE6F\x5\xC0\x61\x2\xE6E\xE6D\x3"+
		"\x2\x2\x2\xE6E\xE6F\x3\x2\x2\x2\xE6F\xE73\x3\x2\x2\x2\xE70\xE72\x5L\'"+
		"\x2\xE71\xE70\x3\x2\x2\x2\xE72\xE75\x3\x2\x2\x2\xE73\xE71\x3\x2\x2\x2"+
		"\xE73\xE74\x3\x2\x2\x2\xE74\xE77\x3\x2\x2\x2\xE75\xE73\x3\x2\x2\x2\xE76"+
		"\xE78\a\xCF\x2\x2\xE77\xE76\x3\x2\x2\x2\xE77\xE78\x3\x2\x2\x2\xE78\xE79"+
		"\x3\x2\x2\x2\xE79\xE7D\x5\xE\b\x2\xE7A\xE7C\x5\x172\xBA\x2\xE7B\xE7A\x3"+
		"\x2\x2\x2\xE7C\xE7F\x3\x2\x2\x2\xE7D\xE7B\x3\x2\x2\x2\xE7D\xE7E\x3\x2"+
		"\x2\x2\xE7E\xE83\x3\x2\x2\x2\xE7F\xE7D\x3\x2\x2\x2\xE80\xE84\a\xCD\x2"+
		"\x2\xE81\xE82\a\x19\x2\x2\xE82\xE84\a\x11\x2\x2\xE83\xE80\x3\x2\x2\x2"+
		"\xE83\xE81\x3\x2\x2\x2\xE84\xE85\x3\x2\x2\x2\xE85\xE86\x5\xE\b\x2\xE86"+
		"\x171\x3\x2\x2\x2\xE87\xE90\x5\x176\xBC\x2\xE88\xE90\x5\x178\xBD\x2\xE89"+
		"\xE90\x5\x174\xBB\x2\xE8A\xE90\x5\x17C\xBF\x2\xE8B\xE90\x5\x17E\xC0\x2"+
		"\xE8C\xE90\x5\x180\xC1\x2\xE8D\xE90\x5v<\x2\xE8E\xE90\x5~@\x2\xE8F\xE87"+
		"\x3\x2\x2\x2\xE8F\xE88\x3\x2\x2\x2\xE8F\xE89\x3\x2\x2\x2\xE8F\xE8A\x3"+
		"\x2\x2\x2\xE8F\xE8B\x3\x2\x2\x2\xE8F\xE8C\x3\x2\x2\x2\xE8F\xE8D\x3\x2"+
		"\x2\x2\xE8F\xE8E\x3\x2\x2\x2\xE90\x173\x3\x2\x2\x2\xE91\xE93\x5\x8CG\x2"+
		"\xE92\xE91\x3\x2\x2\x2\xE92\xE93\x3\x2\x2\x2\xE93\xE95\x3\x2\x2\x2\xE94"+
		"\xE96\x5\x8A\x46\x2\xE95\xE94\x3\x2\x2\x2\xE95\xE96\x3\x2\x2\x2\xE96\xE97"+
		"\x3\x2\x2\x2\xE97\xE98\x5\x12\n\x2\xE98\xE9B\x5\x14\v\x2\xE99\xE9A\a\xD2"+
		"\x2\x2\xE9A\xE9C\x5\xCEh\x2\xE9B\xE99\x3\x2\x2\x2\xE9B\xE9C\x3\x2\x2\x2"+
		"\xE9C\xEA2\x3\x2\x2\x2\xE9D\xE9E\a\xD1\x2\x2\xE9E\xE9F\a\x120\x2\x2\xE9F"+
		"\xEA0\x5\x13C\x9F\x2\xEA0\xEA1\a\x121\x2\x2\xEA1\xEA3\x3\x2\x2\x2\xEA2"+
		"\xE9D\x3\x2\x2\x2\xEA2\xEA3\x3\x2\x2\x2\xEA3\xEA4\x3\x2\x2\x2\xEA4\xEA5"+
		"\x5\xE\b\x2\xEA5\xEAC\x5*\x16\x2\xEA6\xEAA\t\x4\x2\x2\xEA7\xEA8\a\x19"+
		"\x2\x2\xEA8\xEAA\x5\x12\n\x2\xEA9\xEA6\x3\x2\x2\x2\xEA9\xEA7\x3\x2\x2"+
		"\x2\xEAA\xEAB\x3\x2\x2\x2\xEAB\xEAD\a\x167\x2\x2\xEAC\xEA9\x3\x2\x2\x2"+
		"\xEAC\xEAD\x3\x2\x2\x2\xEAD\x175\x3\x2\x2\x2\xEAE\xEB0\x5\x8CG\x2\xEAF"+
		"\xEAE\x3\x2\x2\x2\xEAF\xEB0\x3\x2\x2\x2\xEB0\xEB2\x3\x2\x2\x2\xEB1\xEB3"+
		"\x5`\x31\x2\xEB2\xEB1\x3\x2\x2\x2\xEB2\xEB3\x3\x2\x2\x2\xEB3\xEB5\x3\x2"+
		"\x2\x2\xEB4\xEB6\a \x2\x2\xEB5\xEB4\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2\x2"+
		"\xEB6\xEB7\x3\x2\x2\x2\xEB7\xEBC\x5\x13C\x9F\x2\xEB8\xEB9\a\x127\x2\x2"+
		"\xEB9\xEBB\x5\x13C\x9F\x2\xEBA\xEB8\x3\x2\x2\x2\xEBB\xEBE\x3\x2\x2\x2"+
		"\xEBC\xEBA\x3\x2\x2\x2\xEBC\xEBD\x3\x2\x2\x2\xEBD\xEC1\x3\x2\x2\x2\xEBE"+
		"\xEBC\x3\x2\x2\x2\xEBF\xEC0\a\x6\x2\x2\xEC0\xEC2\x5\xFE\x80\x2\xEC1\xEBF"+
		"\x3\x2\x2\x2\xEC1\xEC2\x3\x2\x2\x2\xEC2\xEC3\x3\x2\x2\x2\xEC3\xEC4\x5"+
		"\xE\b\x2\xEC4\x177\x3\x2\x2\x2\xEC5\xEC7\x5`\x31\x2\xEC6\xEC5\x3\x2\x2"+
		"\x2\xEC6\xEC7\x3\x2\x2\x2\xEC7\xEC9\x3\x2\x2\x2\xEC8\xECA\a \x2\x2\xEC9"+
		"\xEC8\x3\x2\x2\x2\xEC9\xECA\x3\x2\x2\x2\xECA\xECB\x3\x2\x2\x2\xECB\xECC"+
		"\x5\x17A\xBE\x2\xECC\xECD\x5\xE\b\x2\xECD\x179\x3\x2\x2\x2\xECE\xECF\x5"+
		"\xF0y\x2\xECF\xED0\x5\xCCg\x2\xED0\xED1\x5\xCEh\x2\xED1\x17B\x3\x2\x2"+
		"\x2\xED2\xED3\a^\x2\x2\xED3\xED5\x5\xFE\x80\x2\xED4\xED6\a\xD0\x2\x2\xED5"+
		"\xED4\x3\x2\x2\x2\xED5\xED6\x3\x2\x2\x2\xED6\xED9\x3\x2\x2\x2\xED7\xED8"+
		"\a-\x2\x2\xED8\xEDA\x5\xCEh\x2\xED9\xED7\x3\x2\x2\x2\xED9\xEDA\x3\x2\x2"+
		"\x2\xEDA\xEDB\x3\x2\x2\x2\xEDB\xEDC\x5\xE\b\x2\xEDC\x17D\x3\x2\x2\x2\xEDD"+
		"\xEDF\x5\x8CG\x2\xEDE\xEDD\x3\x2\x2\x2\xEDE\xEDF\x3\x2\x2\x2\xEDF\xEE0"+
		"\x3\x2\x2\x2\xEE0\xEE1\av\x2\x2\xEE1\xEE3\a\xA5\x2\x2\xEE2\xEE4\x5`\x31"+
		"\x2\xEE3\xEE2\x3\x2\x2\x2\xEE3\xEE4\x3\x2\x2\x2\xEE4\xEE5\x3\x2\x2\x2"+
		"\xEE5\xEE6\x5\x13C\x9F\x2\xEE6\xEE7\a\x6\x2\x2\xEE7\xEE9\x5\xFE\x80\x2"+
		"\xEE8\xEEA\a\xD4\x2\x2\xEE9\xEE8\x3\x2\x2\x2\xEE9\xEEA\x3\x2\x2\x2\xEEA"+
		"\xEF4\x3\x2\x2\x2\xEEB\xEEC\a\x99\x2\x2\xEEC\xEF1\x5\x17A\xBE\x2\xEED"+
		"\xEEE\a\x127\x2\x2\xEEE\xEF0\x5\x17A\xBE\x2\xEEF\xEED\x3\x2\x2\x2\xEF0"+
		"\xEF3\x3\x2\x2\x2\xEF1\xEEF\x3\x2\x2\x2\xEF1\xEF2\x3\x2\x2\x2\xEF2\xEF5"+
		"\x3\x2\x2\x2\xEF3\xEF1\x3\x2\x2\x2\xEF4\xEEB\x3\x2\x2\x2\xEF4\xEF5\x3"+
		"\x2\x2\x2\xEF5\xEF6\x3\x2\x2\x2\xEF6\xEF7\x5\xE\b\x2\xEF7\x17F\x3\x2\x2"+
		"\x2\xEF8\xEF9\a\xD3\x2\x2\xEF9\xEFA\x5\x13C\x9F\x2\xEFA\xEFB\a\x124\x2"+
		"\x2\xEFB\xEFE\x5\xCEh\x2\xEFC\xEFD\a\x127\x2\x2\xEFD\xEFF\x5\xCEh\x2\xEFE"+
		"\xEFC\x3\x2\x2\x2\xEFE\xEFF\x3\x2\x2\x2\xEFF\xF00\x3\x2\x2\x2\xF00\xF01"+
		"\a\x125\x2\x2\xF01\xF02\x5\xE\b\x2\xF02\xF17\x3\x2\x2\x2\xF03\xF04\a\xD3"+
		"\x2\x2\xF04\xF05\x5\x13C\x9F\x2\xF05\xF06\a\x120\x2\x2\xF06\xF09\x5\xCE"+
		"h\x2\xF07\xF08\a\x127\x2\x2\xF08\xF0A\x5\xCEh\x2\xF09\xF07\x3\x2\x2\x2"+
		"\xF09\xF0A\x3\x2\x2\x2\xF0A\xF0B\x3\x2\x2\x2\xF0B\xF0C\a\x121\x2\x2\xF0C"+
		"\xF0D\x5\xE\b\x2\xF0D\xF17\x3\x2\x2\x2\xF0E\xF0F\x5\x13C\x9F\x2\xF0F\xF10"+
		"\a\x124\x2\x2\xF10\xF11\x5\xCEh\x2\xF11\xF12\a\x125\x2\x2\xF12\xF13\x5"+
		"\xCCg\x2\xF13\xF14\x5\xCEh\x2\xF14\xF15\x5\xE\b\x2\xF15\xF17\x3\x2\x2"+
		"\x2\xF16\xEF8\x3\x2\x2\x2\xF16\xF03\x3\x2\x2\x2\xF16\xF0E\x3\x2\x2\x2"+
		"\xF17\x181\x3\x2\x2\x2\x226\x188\x18A\x190\x198\x19C\x1A4\x1AC\x1B3\x1D7"+
		"\x1DC\x1DF\x1E2\x1E5\x1EA\x1F2\x1F5\x1FB\x1FE\x202\x207\x20B\x20F\x213"+
		"\x217\x21C\x21F\x225\x229\x22C\x232\x238\x23B\x23F\x241\x244\x24B\x24E"+
		"\x252\x259\x25D\x264\x267\x26C\x270\x273\x278\x282\x285\x28A\x28D\x293"+
		"\x298\x29B\x29F\x2A4\x2AA\x2AD\x2B1\x2B6\x2BC\x2BF\x2C3\x2CA\x2D0\x2D4"+
		"\x2DB\x2E0\x2E3\x2E6\x2EA\x2EF\x2F8\x2FD\x305\x30A\x30E\x313\x319\x31E"+
		"\x328\x330\x334\x337\x33B\x342\x347\x34C\x355\x35B\x35E\x361\x365\x369"+
		"\x36D\x373\x379\x380\x388\x38B\x38F\x393\x397\x39F\x3A2\x3A7\x3AE\x3B8"+
		"\x3BE\x3C3\x3C9\x3CC\x3D8\x3E0\x3E3\x3E6\x3EA\x3EE\x3F6\x3F9\x3FE\x405"+
		"\x40D\x410\x414\x418\x41B\x41F\x424\x428\x42D\x430\x434\x439\x43F\x443"+
		"\x448\x44B\x451\x456\x459\x45D\x462\x468\x470\x474\x478\x47B\x47E\x483"+
		"\x488\x48B\x48E\x491\x498\x4A2\x4A7\x4AC\x4B4\x4BC\x4BF\x4C6\x4CB\x4CF"+
		"\x4D7\x4DE\x4E1\x4E4\x4E7\x4EB\x4EF\x4F2\x4F6\x4FC\x502\x508\x510\x514"+
		"\x518\x520\x523\x52C\x52F\x532\x535\x538\x53D\x540\x545\x54A\x54D\x552"+
		"\x559\x55D\x560\x567\x571\x576\x58A\x58D\x590\x594\x598\x59B\x59F\x5A3"+
		"\x5A7\x5AD\x5B8\x5BF\x5C4\x5C7\x5CC\x5D0\x5D4\x5DB\x5E0\x5E7\x5EA\x5EF"+
		"\x5F2\x5F7\x5FB\x602\x607\x60C\x611\x615\x61C\x622\x62E\x631\x634\x63B"+
		"\x644\x653\x65E\x663\x66E\x67A\x67F\x68C\x694\x697\x69E\x6A4\x6A8\x6B4"+
		"\x6B6\x6BC\x6C2\x6CC\x6D3\x6D7\x6DA\x6E5\x6EC\x6F0\x6F3\x6FD\x703\x70C"+
		"\x70F\x718\x71E\x722\x725\x733\x736\x73D\x741\x749\x74F\x757\x75B\x762"+
		"\x766\x769\x774\x77C\x783\x78B\x78F\x797\x79D\x7A8\x7B1\x7B3\x7B9\x7BC"+
		"\x7C6\x7D3\x7D8\x7E2\x7E7\x7ED\x7F6\x7FE\x801\x807\x80A\x80E\x812\x819"+
		"\x81F\x823\x82A\x833\x838\x83A\x842\x849\x855\x861\x867\x86F\x876\x87E"+
		"\x885\x88D\x894\x89C\x8A3\x8A6\x8AE\x8B5\x8B8\x8C5\x8C8\x8CB\x8D2\x8D7"+
		"\x8DC\x8DE\x8E8\x8ED\x8EF\x8F1\x8F4\x900\x905\x90F\x915\x91C\x921\x929"+
		"\x934\x93B\x942\x94E\x953\x95B\x961\x96A\x975\x97A\x97D\x986\x991\x996"+
		"\x999\x99B\x9A2\x9A7\x9AA\x9B0\x9B3\x9B6\x9C0\x9C7\x9D5\x9ED\x9F0\xA2E"+
		"\xA42\xA48\xA4D\xA55\xA57\xA59\xA61\xA7D\xA91\xAD0\xAE4\xAEA\xAF3\xB05"+
		"\xB07\xB13\xB2C\xB3C\xB44\xB46\xB4A\xB52\xB55\xB5F\xB67\xB6E\xB76\xB80"+
		"\xB8A\xB91\xBA0\xBA3\xBA5\xBAC\xBB0\xBBE\xBC9\xBD4\xBD8\xBE0\xBE9\xBEF"+
		"\xBFD\xC04\xC0A\xC0F\xC14\xC18\xC1E\xC26\xC2E\xC33\xC36\xC3F\xC42\xC4B"+
		"\xC4E\xC56\xC59\xC60\xC6B\xC6E\xC77\xC7F\xC8A\xC96\xC9E\xCA2\xCA9\xCAF"+
		"\xCB2\xCB8\xCBC\xCC3\xCC7\xCCC\xCD1\xCD6\xCD9\xCE4\xCF2\xCFA\xCFF\xD0D"+
		"\xD16\xD1E\xD21\xD28\xD31\xD3F\xD48\xD63\xD65\xD67\xD6C\xD70\xD79\xD7C"+
		"\xD80\xD84\xD8C\xD8F\xD97\xD9A\xD9F\xDA6\xDAF\xDB6\xDBF\xDC2\xDC7\xDCD"+
		"\xDD1\xDD4\xDDE\xDE1\xDE7\xDEB\xDF0\xDF3\xDFC\xE01\xE03\xE06\xE09\xE0C"+
		"\xE0F\xE17\xE1B\xE21\xE25\xE2C\xE2F\xE32\xE35\xE3B\xE43\xE46\xE4A\xE4D"+
		"\xE56\xE5B\xE5F\xE63\xE67\xE6B\xE6E\xE73\xE77\xE7D\xE83\xE8F\xE92\xE95"+
		"\xE9B\xEA2\xEA9\xEAC\xEAF\xEB2\xEB5\xEBC\xEC1\xEC6\xEC9\xED5\xED9\xEDE"+
		"\xEE3\xEE9\xEF1\xEF4\xEFE\xF09\xF16";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
