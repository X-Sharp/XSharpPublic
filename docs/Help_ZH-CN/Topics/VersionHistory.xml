<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-06-12T13:27:01.011+08:00" lasteditedby="Design" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>版本历史</title>
  <keywords>
    <keyword>/shared</keyword>
    <keyword>Changes</keyword>
    <keyword>Runtime chapter</keyword>
    <keyword>STACKALLOC</keyword>
    <keyword>XS9082</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">版本历史</para>
    </header>
    <para styleclass="Normal" style="margin-top:14px; line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-weight:bold; text-decoration:none; vertical-align:baseline; color:#ff0000; background-color:#ffffff;">注：</text><text style="font-family:&apos;Times New Roman&apos;; text-decoration:none; vertical-align:baseline; color:#000000;">当一个项目有一个匹配的 GitHub 票据时，票据编号就会出现在项目后面的括号中，前缀为 #。</text></para>
    <para styleclass="Normal" style="margin-top:14px; line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; text-decoration:none; vertical-align:baseline; color:#000000;">您可以访问 https://github.com/X-Sharp/XSharpPublic/issues/nnn 其中 nnnn 是票据编号。</text></para>
    <para styleclass="Normal" style="margin-top:14px; line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; text-decoration:none; vertical-align:baseline; color:#000000;">如果您在 X# 中发现问题，我们建议您在 GitHub 上报告。我们会通知您问题的处理进度。</text></para>
    <para styleclass="Heading1">Changes in 2.20.0.3</para>
    <para styleclass="Heading2">编译器</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了在 FoxPro 方言中 USE 命令的 AGAIN 子句问题 (#235)</li>
      <li styleclass="Normal">修复了启用 /namedargs 编译器选项的情况下在编译时调用带有命名参数的类型数组(typed array)构造函数的问题 (#1430)</li>
      <li styleclass="Normal">修复了 INSTANCE 关键字与类内部使用的不一致 (#1432)</li>
      <li styleclass="Normal">修复了 REPLACE UDC 可能会阻止使用名为 “replace” 的变量的问题 (#1443)</li>
      <li styleclass="Normal">修复了 /vo9（处理丢失的 RETURN 语句）编译器选项与 PARTIAL 类中的 ACCESSes 的问题 (#1450)</li>
      <li styleclass="Normal">修复了词法分析器在 FoxPro 方言中识别字符串内的续行符的问题 (#1453)</li>
      <li styleclass="Normal">修复了 memvar pragma 选项的问题 (#1454)</li>
      <li styleclass="Normal">修复了 /xpp 编译器选项的问题。(#1243, #1458)</li>
      <li styleclass="Normal">修复了当涉及的对象未定义类型时，从定义成员的类中访问方法中隐藏类成员的问题(#1335, #1457)</li>
      <li styleclass="Normal">修复了单行代码行仅包含单逗号时的内部编译器错误 (#1462)</li>
      <li styleclass="Normal">修复了使用 USE 命令时以方括号为包含文件名的字符定界符时产生的entire (#1468)</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">现在，您可以使用 NULL() 和 DEFAULT() 表达式以默认值初始化任何变量。这相当于 C# 中的默认关键字。</li>
      <li styleclass="Normal">我们添加了一个新的编译器选项 /modernsyntax (#1394)。这将<text style="font-weight:bold;">禁用</text>某些传统功能：</li>
      <list id="0" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Normal">&amp;&amp; 作为行注释</li>
        <li styleclass="Normal"><text style="font-weight:bold;">*</text> 在行首表示注释</li>
        <li styleclass="Normal">使用方括号的字符串</li>
        <li styleclass="Normal">括号表达式列表（因此更容易识别元组）</li>
      </list>
    </list>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">已添加对 IS NULL 和 IS NOT NULL 模式的支持 (#1422)</li>
      <li styleclass="Normal">在 Harbour 方言中添加了对文件宽 FIELD 语句(file wide FIELD statements)的支持 (#1436) (#1436)</li>
    </list>
    <para styleclass="Heading2">运行时</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了在 Transform() 函数中使用 PTR 参数时的运行时错误 (#1428) </li>
      <li styleclass="Normal">修复了传递 PSZ 参数时，多个 String 运行时函数抛出运行时错误的问题 (#1429) </li>
      <li styleclass="Normal">修复了在 ADS RDD 中使用 OrdKeyVal() 和 ADS/ADT 文件时的问题 (#1434)</li>
      <li styleclass="Normal">修复了在创建和使用长名称的索引时，与各种 xBase 方言的不兼容问题 (#1438) </li>
      <li styleclass="Normal">修复了在 ADS RDD 中使用 OrderKeyNo() 时，如果设置 Ax_SetExactKeyPos() 为 TRUE，则会出现 VO 不兼容的问题 (#1444)</li>
      <li styleclass="Normal">修复了宏编译器在传递超过两个引用参数时的问题 (#1445)</li>
      <li styleclass="Normal">修复了 DBSetIndex() 设置记录指针在 eof 时的问题 (#1448) </li>
      <li styleclass="Normal">修复了从 OEM dbfs 读取字段时的问题 (#1449) </li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="2" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">实现了 DBFMEMO 驱动程序（#604）</li>
      <li styleclass="Normal">实现了 DBFBLOB 驱动程序（#605）</li>
      <li styleclass="Normal">添加了缺失的无参数 SetColor() 函数重载（#1440）</li>
    </list>
    <list id="3" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">此版本包含了新的 <link displaytype="text" defaultstyle="true" type="topiclink" href="XSharp_VFP_UI">XSharp.VFP.UI.DLL</link> ，该 DLL 由从 Visual FoxPro 导出的表单使用，通过 <link displaytype="text" defaultstyle="true" type="topiclink" href="VFPXporter">VFP Exporter</link> 实现。</li>
    </list>
    <para styleclass="Heading2">Visual Studio 集成</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="4" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了 VS 2019 中“跳转到文件”命令的问题 (#1146) </li>
      <li styleclass="Normal">修复了本地函数的“转到定义”功能不工作的问题 (#1415)</li>
      <li styleclass="Normal">修复了在某些情况下类导航框显示错误当前条目的问题 (#1426)</li>
      <li styleclass="Normal">修复了设置“启用命名参数”项目选项的问题 (#1431) </li>
      <li styleclass="Normal">修复了外部程序集中的类型的代码生成器未为索引属性生成参数的问题 (#1442) </li>
      <li styleclass="Normal">修复了 VODBServer 编辑器未保存 [DBSERVER] 部分的 access/assigns 和其他实体的问题 (#1452) </li>
      <li styleclass="Normal">修复了在 VO 窗口编辑器中加载 cavowed.inf 文件提供的带有绝对或相对路径的补充文件的问题 (#1470)</li>
      <li styleclass="Normal">修复了 VS2022 调试器中不同 DLL 包含相同命名空间但大小写不同时的问题。</li>
      <li styleclass="Normal">修复了编辑器内的实体解析器未能正确确定包含本地函数或过程的实体结束的问题 </li>
      <li styleclass="Normal">修复了编辑器内的实体解析器在未启用 /memvars 编译选项时，遇到行首的 param 标记时会出错的问题。</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们已经在帮助菜单中为中文版本的文档添加了一个菜单项。</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="6" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed problem with incorrectly converting attributes to string literals (#1404)</li>
    </list>
    <para styleclass="Heading3">New Features</para>
    <list id="7" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">It is now possible to define special TEXTBLOCK entities in the VO code in any module with name &quot;VXP-TOP&quot; or &quot;{VOXP:TOP}&quot; and VOXporter will automatically insert the contents of the textblock in the beginning of the exported X# .prg file for the module. This is particularly helpful for specifying top level commands like #using statements (#1425)</li>
    </list>
    <para styleclass="Heading2">VFPXporter</para>
    <list id="8" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">该版本的 X# 包含 <link displaytype="text" defaultstyle="true" type="topiclink" href="VFPXporter">VFP Exporter</link> 。该工具可将 Visual FoxPro 项目文件转换为 Visual Studio 解决方案</li>
    </list>
    <para styleclass="Heading2">XIDE</para>
    <list id="9" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added option when trying to debug a 32/64bit app in the wrong XIDE version, to automatically open the alternative version</li>
      <li styleclass="Normal">Fixed coloring of several positional keywords in the editor</li>
      <li styleclass="Normal">Improved editor support for TEXT...END TEXT</li>
      <li styleclass="Normal">Added editor support for the NOT NULL code pattern</li>
      <li styleclass="Normal">Added project support for the compiler options /namedargs, /initlocals, /modernsyntax and /allowoldstyleassignments</li>
      <li styleclass="Normal">Now pressing the SHIFT key on startup, resets the layout of the IDE to default positions (and does not save it on exit)</li>
      <li styleclass="Normal">Added menu command View-&gt;Save Current Layout</li>
      <li styleclass="Normal">Fixed a problem with toggling case (CTR+U) of text selected in a column selection</li>
      <li styleclass="Normal">Fixed several issues with incorrectly identifying a line with identifiers like PROC or FUNC as entity definitions</li>
    </list>
    <para styleclass="Heading2">文档</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="10" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了 /namedargs 编译器选项主题中的拼写错误。</li>
    </list>
    <para styleclass="Heading3">New Features</para>
    <list id="11" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们添加了几个关于修饰符(<link displaytype="text" defaultstyle="true" type="topiclink" href="Modifiers">modifiers) </link>的章节</li>
      <li styleclass="Normal">我们添加了(部分)翻译成简体中文的帮助文件。</li>
    </list>
    <para styleclass="Heading1">Changes in 2.19.0.2</para>
    <para styleclass="Heading2">编译器</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">现在编译器在类型中定义重复字段名时会正确报告错误 (#1385)。</li>
      <li styleclass="Normal">修复了在泛型类型中定义多个类型约束的问题 (#1389)。</li>
      <li styleclass="Normal">修复了全局 MEMVAR 隐藏同名局部变量或参数的问题 (#1294)。</li>
      <li styleclass="Normal">修复了在找不到类型时出现虚假编译器错误消息的问题 (#1396)。</li>
      <li styleclass="Normal">修复了在 FoxPro 方言中缺少对 XSharp.VFP 的引用导致编译器崩溃的问题 (#1405)。</li>
      <li styleclass="Normal">修复了 /initlocals 编译选项错误地初始化类字段的问题 (#1408)。</li>
      <li styleclass="Normal">修复了预处理器中扩展匹配符号无法正确匹配以字符串文字开头的表达式的问题。</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们增加了对维度(FoxPro)类属性的支持，例如：<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DIMENSION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> this.</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Field</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">(10)</text><br/></li>
      <li styleclass="Normal">我们添加了对 FOREACH AWAIT 的支持，如以下示例(适用于 .Net Core、.Net 5 及更高版本)。</li>
    </list>
    <para styleclass="Normal"><tab /><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FOREACH</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AWAIT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VAR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> data </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IN</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> GenerateNumbersAsync(number)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SELF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">:oListView1:Items:Add(data)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">NEXT</text></para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们已经添加了对合并成员访问的支持，例如在以下示例中，FirstName 和 LastName 都是 oPerson 对象的属性：:</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? oPerson:(FirstName+&quot; &quot;+LastName)</text></para>
    <para styleclass="Normal"><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;</text></para>
    <list id="12" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">WITH 命令现在也能识别 AS DataType 子句。</li>
    </list>
    <list id="13" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">XBase++ 类声明现在也允许使用 “END CLASS ”作为结束标记。</li>
    </list>
    <list id="12" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">现在，编译器在尝试将 Lambda 表达式转换为常规表达式时会报错 (#1343)</li>
    </list>
    <list id="14" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们增加了对 TUPLE 数据类型的支持。这包括声明局部变量、参数、返回值等。</li>
      <li styleclass="Normal">我们还支持将 <link displaytype="text" defaultstyle="true" type="topiclink" href="Tuples">元组</link>&#32;返回值分解为多个本地变量。更多信息，请参见 <link displaytype="text" defaultstyle="true" type="topiclink" href="Tuples">元组</link> 帮助主题。.</li>
    </list>
    <para styleclass="Heading2">运行时</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="15" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了从宏编译器调用 DoEvents() 的问题 (#872)</li>
      <li styleclass="Normal">修复了 __Mem2StringRaw()(文档未记录)函数的问题 (#1302)</li>
      <li styleclass="Normal">修复了在头部中包含不正确排序信息的 DBFCDX 索引文件打开问题 (#1360)</li>
      <li styleclass="Normal">修复了 OrdSetFocus() 在无参数调用时重置当前顺序的问题 (#1362)</li>
      <li styleclass="Normal">修复了在 DBPack() 后一些索引文件的问题 (#1367)</li>
      <li styleclass="Normal">修复了在所有记录都被删除的表上 Deleted() 返回 TRUE 的问题 (#1370)</li>
      <li styleclass="Normal">修复了以独占和只写模式打开并使用 FWrite() 等函数写入文件的问题 (#1382)</li>
      <li styleclass="Normal">修复了 SplitPath() 函数中的几个问题(与 VO 不兼容性) (#1384)</li>
      <li styleclass="Normal">现在，当在 dbf 头部中找不到代码页时，将使用 RuntimeState 中的 DOS 代码页，而不再使用硬编码的代码页 437 (#1386)</li>
      <li styleclass="Normal">在运行时的某些区域中使用的 Dictionary&lt;,&gt; 类被替换为 ConcurrentDictionary&lt;,&gt;，以避免多线程应用程序中的问题 (#1391)</li>
      <li styleclass="Normal">在使用 IDynamicProperties(FoxPro 方言)时，修复了 NoIVarget 的问题 (#1401)</li>
      <li styleclass="Normal">修复了 Hex2C() 使用小写字母时与使用大写字母时产生不同结果的问题。<br/><text style="font-weight:bold; color:#ff0000;">请注意，这个 bug 也存在于 VO 中，所以现在在 X# 中使用小写十六进制字母的 Hex2C() 的行为与 VO 不同</text> (#1402)</li>
    </list>
    <list id="16" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">访问已使用 Advantage RDD 打开的已关闭 DbServer 对象上的属性可能会在调试器中引起问题。现在，当服务关闭时，DbServer 类将返回空值。</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="17" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">实现了 CREATE CURSOR 命令 [FoxPro] (#247)。还实现了 CREATE TABLE 和 ALTER TABLE(FoxPro 方言)</li>
      <li styleclass="Normal">实现了 INSERT INTO 命令(FoxPro 方言，用于从值、数组、对象和内存变量中插入变量)。SQL 查询中的 INSERT INTO 尚不能使用 (FoxPro 方言）</li>
    </list>
    <list id="18" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">在 XSharp.VFP 中实现了 Str() 函数的新 FoxPro 兼容版本 (#386)</li>
      <li styleclass="Normal">现在，当打开索引文件失败时会抛出错误 (#1358)</li>
      <li styleclass="Normal">添加了 AscA() 函数，并使 Asc() 依赖于运行时中的 SetAnsi() 设置 (#1376)</li>
    </list>
    <para styleclass="Heading2">头文件</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="19" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">实现了几个缺失的命令 (#1407)</li>
      <li styleclass="Normal">修正了 SET DECIMALS TO 命令中的拼写错误 (#1406)</li>
      <li styleclass="Normal">为 GATHER 命令(FoxPro)添加了缺失的 NAME 和 MEMVAR 子句 (#1409)</li>
      <li styleclass="Normal">更新了几个命令，使一些标记变为可选，并更加兼容各种方言 (#1410, #1412)</li>
      <li styleclass="Normal">修复了在各种方言中 COMMIT 命令的各种不兼容性问题 (#1411)</li>
    </list>
    <para styleclass="Heading2">Visual Studio 集成</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="20" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">修复了通过静态使用引用的类型中查找公共静态字段的问题 (#1307)</li>
      <li styleclass="Normal">修复了在块语句内定义的局部变量的智能感知问题 (#1345)</li>
      <li styleclass="Normal">修复了智能感知不正确地将代码中指定的类型解析为 usings 列表中的另一个类型的问题 (#1363)</li>
      <li styleclass="Normal">修复了在输入冒号后不正确显示静态方法的成员完成问题 (#1379)</li>
      <li styleclass="Normal">修复了特定代码导致编辑器冻结的问题 (#1380)</li>
      <li styleclass="Normal">修复了在某些情况下类导航栏未显示方法名称的问题 (#1381)</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="21" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">增加了对 IEnumerable 和 DataTable 调试可视化器的支持 (#1373)。<br/>请注意，当浏览 X# 数组时，可视化器中的结果看起来非常丑陋，因为可视化器忽略了隐藏属性和字段的属性，以用于我们的 USUAL 类。</li>
      <li styleclass="Normal">调整了 Globals、Workareas 等调试器窗口，以遵循在 VS 中选择的全局主题 (#1375)。还向 Workarea 窗口添加了状态面板，这样您可以查看工作区状态或字段名称/值。</li>
      <li styleclass="Normal">为使用 USING VAR 或 USING (LOCAL) IMPLIED 声明的本地变量添加了智能感知支持 (#1390)。</li>
      <li styleclass="Normal">现在智能感知数据库使用了一个具有 ARM 支持的 SQLite 包，因此它也将在 Mac 和其他平台上工作 (#1397)。</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <para styleclass="Heading3">Fixes</para>
    <list id="22" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed problem with VOXporter incorrectly modifying previously commented code with {VOXP:UNC} tags (#1404)</li>
    </list>
    <para styleclass="Heading2">文档</para>
    <para styleclass="Heading3">Bug 修复</para>
    <list id="23" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">运行时帮助中函数的文档描述有误。<br/>例如，“Left” 函数的主题标题原为 “Functions.Left Method”，现已更改为 “Left Function”。</li>
      <li styleclass="Normal">文档中的 “SingleLineEdit” 类被称为 “Real4LineEdit”，已进行修正。</li>
    </list>
    <para styleclass="Heading3">新特性</para>
    <list id="23" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">我们在 X# 编程指南中添加了有关多个主题的附加文档。</li>
    </list>
    <para styleclass="Heading1">Changes in 2.18.0.4</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed some preprocessor issues with XBase++ related commands (#1213, #1288, #1337)</li>
      <li styleclass="Body Text">Fixed problem with implicit access to static class members (XBase++ dialect) (#1215)</li>
      <li styleclass="Body Text">Fixed a parser error with the DIMENSION command (VFP dialect) (#1267)</li>
      <li styleclass="Body Text">Fixed preprocessor problem with UDCs in code spanning in multiple lines (#1298)</li>
      <li styleclass="Body Text">Now each &quot;unused variable&quot; warning is reported at the exact location of a variable definition, instread of always at the first one (#1310)</li>
      <li styleclass="Body Text">Fixed bogus &quot;unreachable code&quot; warning in the SET RELATION command (#1312)</li>
      <li styleclass="Body Text">Fixed a problem in generating XML documentation for the compiler generated &lt;Module&gt;.$AppInit and &lt;Module&gt;.$AppExit methods (#1316)</li>
      <li styleclass="Body Text">Fixed problem with accessing hidden fields of another object (XBase++ dialect) (#1335)</li>
      <li styleclass="Body Text">Fixed problem with calling parent methods with an explicit class indication (Xbase++ dialect) (#1338)</li>
      <li styleclass="Body Text">Fixed problem with incorrectly calling function twice, in code like &quot;SLen(c := SomeFunction())&quot; (#1339)</li>
      <li styleclass="Body Text">Fixed problem with parent Сlass methods not being visible in derived classes (Xbase++ dialect) (#1349)</li>
      <li styleclass="Body Text">Fixed problem with ::new() not working properly in class methods (Xbase++ dialect) (#1350)</li>
      <li styleclass="Body Text">Fixed an exception when an error occurred for a token that was defined in a header file</li>
      <li styleclass="Body Text">Fixed a compiler error when returning super:Init() from a XBase++ method (#1357)</li>
      <li styleclass="Body Text">Fixed a problem with STATIC DEFINEs in same named .prg files (#1361)</li>
    </list>
    <para styleclass="Heading3">New features</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Introduced warning for not specifying the OUT keyword for OUT parameters (#1295)</li>
      <li styleclass="Body Text">The parser rules for method and constructor calls without parameters have been updated. This may result in a bit faster compilation.</li>
      <li styleclass="Body Text">SLen() is no longer &quot;inlined&quot; by the compiler. If you reference XSharp.Core in your app, SLen() now gets resolved to the SLen() function inside X# Core.<br/>If you compile without X# runtime, or compile against the Vulcan Runtime you now need to add a SLen() function to your code. <br/>This is the code inside X# Core that you can use as a template <br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> SLen(cString </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DWORD</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> len := 0 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DWORD</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> cString != </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">NULL</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;len := (</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DWORD</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">) cString:Length</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDIF</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> len</text></li>
      <li styleclass="Body Text">Added support for preprocessor commands<link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Command"> #ycommand</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Translate">#ytranslate</link> that are also supported by Harbour. They work the same as #xcommand and #xtranslate, but the tokens are compared in case sensitive mode (#1314)</li>
      <li styleclass="Body Text">Code generation for some of the Xbase++ specific features has changed. </li>
      <li styleclass="Body Text">We have added several more UDCs with the IN &lt;cursor&gt; clause</li>
    </list>
    <list id="25" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We have added UDC support for the FoxPro CAST expression</li>
      <li styleclass="Normal">Several more SET commands now also support the &amp; operator</li>
      <li styleclass="Normal">The compiler now supports &quot;Late bound names&quot; in more locations, such as in the REPLACE command, With command etc. This now compiles without problems:</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">cVar := &quot;FirstName&quot;</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WITH</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oCustomer</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; .&amp;cVar := &quot;John&quot;</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WITH</text><br/><text styleclass="Normal">and this too</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">cVar := &quot;FirstName&quot;</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REPLACE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &amp;cVar </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">with</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &quot;John&quot;</text></para>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="25" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed problem with incorrectly closing dbf file before relations are cleared (#1237)</li>
      <li styleclass="Normal">Fixed incorrect index scope visibility immediately after file creation (#1238)</li>
      <li styleclass="Normal">Fixed problem in FFirst()/FNext() not finding all files specified by filter (#1315)</li>
      <li styleclass="Normal">Fixed problem with DBSetIndex()/VoDbOrdListAdd() always reseting the controlling order to 1 (#1341)</li>
      <li styleclass="Normal">Fixed problem with updating index keys in the DBFCDX driver when the key expression was of type DATE.</li>
      <li styleclass="Normal">Fixed a problem when Str() and StrZero() had a built-in maximum string length of 30.(#1352)</li>
      <li styleclass="Normal">The RegisteredRDD Class now uses a ConcurrentDictionary.</li>
      <li styleclass="Normal">Fixed a bug in the RDD TransRec() method when a field is missing in the target table (#1372)</li>
      <li styleclass="Normal">Fixed a problem in the Advantage RDD to prevent ADS functions from being called when the table is closed</li>
      <li styleclass="Normal">Fixed a problem in the Advantage RDD that could occur when an field with an incorrect name was read</li>
      <li styleclass="Normal">Fixed a problem in the CurDir() function when the current directory is a UNCPath (\\Server\Share\SomeDir) (#1378)</li>
    </list>
    <para styleclass="Heading3">New features</para>
    <list id="25" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added support for accessing indexers in the USUAL type (#1296 )</li>
      <li styleclass="Normal">We have added a DbCurrency type that is returned from the RDD when a currency field is read.</li>
      <li styleclass="Normal">Implemented the TEXT TO FILE command (#1304)</li>
      <li styleclass="Normal">Now the RDD reports an error (dialog) when tagname &gt; maximum length when creating an index order (#1305)</li>
      <li styleclass="Normal">Added a function _CreateInstance() that accepts a System.Type parameter</li>
      <li styleclass="Normal">The late binding code now detects from where Send(), IVarGet() and IVarPut() are called and allow access to private/hidden fields when the calling code is of the same type as the type where the class members were declared. This is used in some of the XBase++ related changes.</li>
      <li styleclass="Normal">The classes in the XBase++ have been restructured a bit. </li>
      <li styleclass="Normal">The mapping of several DBF / Workarea / Cursor related UDCs has been changed to be more FoxPro compatible.</li>
      <li styleclass="Normal">We have added runtime support for the FoxPro CAST expression</li>
      <li styleclass="Normal">We have done some small code optimizations w.r.t. dictionaries(#1371)</li>
      <li styleclass="Normal">Several DbServer properties no longer call into the RDD when the server is closed, but return blank values instead.</li>
    </list>
    <para styleclass="Heading2">Typed SDK classes</para>
    <list id="25" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added a DbServer:Append() overload without parametrs (#1320)</li>
      <li styleclass="Normal">Added missing DataServer:LockcurrentRecord() method (#1321)</li>
      <li styleclass="Normal">Fixed runtime error when creating a DataWindow with a ShellWindow as owner (#1324)</li>
      <li styleclass="Normal">Changed DataWindow:Show() method to CLIPPER for compatibility with existing code (#1325)</li>
      <li styleclass="Normal">Fixed exception when using a ComboBox on a VO Window (#1328)</li>
      <li styleclass="Normal">Fixed error when opening a datawindow with an assigned server (#1332)</li>
      <li styleclass="Normal">Fixed runtime error when instantiating a DBServer object with an untyped FileSpec object as first argument (#1348)</li>
      <li styleclass="Normal">Fixed problem with displaying items in Comboboxes and Listboxes (#1347)</li>
      <li styleclass="Normal">Several DbServer properties no longer call into the RDD when the server is closed, but return blank values instead.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="22" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed problem with the &quot;allow dot&quot; setting in the project file (#1192)</li>
      <li styleclass="Normal">Several macros such as $CALLSTACK were not returning values in expected format. This has been fixed (#1236)</li>
      <li styleclass="Normal">Fixed build problem when there is a block comment in the first line of form.prg (#1334)</li>
      <li styleclass="Normal">Fixed probelm with block commenting a code snippet in a single line (#1336)</li>
      <li styleclass="Normal">Fixed failing project build when the project file contains a property &lt;GenerateAssemblyInfo&gt;True&lt;/GenerateAssemblyInfo&gt; (#1344)</li>
      <li styleclass="Normal">Fixed a problem in the Parser that was causing errors parsing DebuggerDisplay attributes in the expression evaluator.</li>
      <li styleclass="Normal">The new debugger windows were not following the current windows theme. This is now partially fixed. (#1375)</li>
    </list>
    <para styleclass="Heading3">VO Compatible Editors</para>
    <list id="22" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed design time display issue with CheckBox and RadioButton captions with specific fonts in the VOWED (#796)</li>
      <li styleclass="Normal">Fixed problem with the VOWED editor changing all existing classes in the prg to PARTIAL (#814)</li>
      <li styleclass="Body Text">Fixed problem with incorrectly adding constructor code to instantiate the DataBrowser in the VOWED, even when there are no (non-deleted) data columns (#1365)</li>
      <li styleclass="Body Text">Fixed several problems in the VOMED with menu item define names in source code and resource files (#1374)</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <para styleclass="Heading3">New features</para>
    <list id="22" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Introduced options (inline in existing code) to comment, uncomment and delete lines from the original VO code (#1303)</li>
    </list>
    <para styleclass="Normal">- {VOXP:COM} // comment out line</para>
    <para styleclass="Normal">- {VOXP:UNC} // uncomment line</para>
    <para styleclass="Normal">- {VOXP:DEL} and // {VOXP:REM} // remove line</para>
    <para styleclass="Heading2">Installer</para>
    <para styleclass="Heading3">New features</para>
    <list id="22" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The installer now detects if the required Visual Studio components &quot;Core Editor&quot; and &quot;.Net Desktop Development&quot; are installed. <br/>When it finds one or more VS installations but none of these installations has both the required components then a warning is shown.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.17.0.3</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed several incompatibilities with XBase++ regarding using class members (#1215) <text style="font-weight:bold;">UNCONFIRMED</text></li>
      <li styleclass="Body Text">Fixed /vo3 option not working correctly in XBase++ dialect. Also added support for modifiers <text styleclass="Normal" style="font-family:&apos;Times New Roman&apos;; font-size:12pt; text-decoration:none; vertical-align:baseline; color:#000000;">final, introduce </text>and<text styleclass="Normal" style="font-family:&apos;Times New Roman&apos;; font-size:12pt; text-decoration:none; vertical-align:baseline; color:#000000;"> override</text> (#1244)</li>
      <li styleclass="Body Text">Fixed problem with using the NEW modifier on class fields (#1246)</li>
      <li styleclass="Body Text">Fixed several preprocessor issues with XPP dialect UDCs (#1247, #1250)</li>
      <li styleclass="Body Text">Fixed VO incompatibility with special handling of INSTANCE fields in methods and properties (#1253)</li>
      <li styleclass="Body Text">Fixed problem with the debugger erratically stepping to incorrect lines (#1254, #1264)</li>
      <li styleclass="Body Text">Fixed problem with showing the wrong error line number in some cases with nested statements (#1268)</li>
      <li styleclass="Body Text">Fixed problem where a DO CASE statement without CASE lines was producing an internal error in the compiler (#1281)</li>
      <li styleclass="Body Text">Fixed a couple preprocessor issues (#1284, #1289)</li>
      <li styleclass="Body Text">Fixed missing compiler error on calling with SUPER a method that does not exist, when late binding is enabled (#1285)</li>
      <li styleclass="Body Text">Fixed a Failed to emit Module error with CONST class field missing value assignment (#1293)</li>
      <li styleclass="Body Text">Fixed a problem with repeated match markers (such as in the SET INDEX TO command) in the preprocessor.</li>
      <li styleclass="Body Text">Fixed a problem that an property definition with an explicit interface prefix could lead to a compiler crash when the interface was &quot;unknown&quot; at compile time and/or the property name was not &quot;Item&quot; (#1306)</li>
    </list>
    <para styleclass="Heading3">New features</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for &quot;classic&quot; INIT PROCEDURE and EXIT PROCEDURE (#1290)</li>
      <li styleclass="Body Text">Added warnings when statement list inside case blocks, if blocks and other blocks are empty. To suppress the warning you can add a NOP statement in your code.</li>
      <li styleclass="Body Text">We have made some changes to the lexer and parser in the compiler. This may result in a bit smaller memory footprint and faster compilation speed for code with many nested blocks.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed several problems (incompatibilities with VO) in CToD() (#1275)</li>
      <li styleclass="Body Text">Added support for 3rd parameter in AAdd() for specifying where to insert the new element (#1287)</li>
      <li styleclass="Body Text">The Default() function now no longer updates usuals that have a value of NULL_OBJECT to be compatible with Visual Objects.(#1119)</li>
      <li styleclass="Body Text">We have added support for parameters for the AdsSQLServer class (#1282)</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="26" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="Body Text">We have added debugger pane windows for the following items:</text></li>
      <list id="26" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List"><link displaytype="text" defaultstyle="true" type="topiclink" href="debugger-Globals-Window">Global variables</link></li>
        <li styleclass="List"><link displaytype="text" defaultstyle="true" type="topiclink" href="debugger-Publics-and-Privates-Window">Dynamic memory variables (Privates and Publics)</link></li>
        <li styleclass="List"><link displaytype="text" defaultstyle="true" type="topiclink" href="debugger-Workareas-window">Workareas</link></li>
        <li styleclass="List"><link displaytype="text" defaultstyle="true" type="topiclink" href="debugger-Settings-Window">Settings</link></li>
      </list>
    </list>
    <list id="26" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">You can open these windows from the Debug/XSharp menu during debugging. There is also a special &quot;X# Debugger Toolbar&quot; which is also only shown during debugging.</li>
      <li styleclass="Body Text">These windows will only show information when the app being debugged uses the X# runtime (so they will not work in combination with the Vulcan Runtime). <br/>If you are debugging an application written in another language that uses the X# runtime then these windows will also show information.<br/>We have planned to add more features to these windows in future builds, like the properties of the current selected area and the field/values in the current selected workarea </li>
      <li styleclass="Body Text">We have added support for &quot;FileCodeModel&quot; for X# files. This is used by the WPF designer and XAML editor. <br/>This now also fixes the Goto definition in the XAML editor (#1026)</li>
      <li styleclass="Body Text">Several properties of X# projects are now cached. This should result in slightly faster performance.</li>
      <li styleclass="Body Text">We have added support for &quot;Goto Definition&quot; for User Defined commands. For example choosing &quot;Goto definition&quot; on the USE keyword from the USE command will bring you to its definition in our standard header file.</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed member completion issue with Type[,] arrays (#980)</li>
      <li styleclass="Body Text">Fixed missing member completion in class inside namespace when same named class exists without namespace (#1204)</li>
      <li styleclass="Body Text">Fixed an auto indent problem when an entity has an attribute in the precessing line (#1210)</li>
      <li styleclass="Body Text">Fixed intellisense problems with static members in some cases (#1212)</li>
      <li styleclass="Body Text">Fixed some intellisense issues with code or declarations spanning in multiple lines (#1221, #1260)</li>
      <li styleclass="Body Text">Fixed intellisense problem with nested classes inside a namespace (#1222)</li>
      <li styleclass="Body Text">Fixed incorrect resolving of VAR local type, when using a type cast (#1224)</li>
      <li styleclass="Body Text">Fixed several problems with collapsing/expanding code in the editor (#1233)</li>
      <li styleclass="Body Text">Fixed showing of bogus member completion list with unknown types (#1255)</li>
      <li styleclass="Body Text">Fixed some problems with auto typing text with Ctrl + Space (complete Word) (#1256)</li>
      <li styleclass="Body Text">Fixed coloring of Text .. EndText statements (#1257)</li>
      <li styleclass="Body Text">Fixed several issues with tooltip hints with generic types (#1258, #1259, #1273)</li>
      <li styleclass="Body Text">Fixed problem with delegate signature not showing in intellisense tooltips (#1265)</li>
      <li styleclass="Body Text">Fixed invalid coloring of code with multiline comments (#1269)</li>
      <li styleclass="Body Text">Fixed invalid entries in member completion after typing &quot;self.&quot; (#1270)</li>
      <li styleclass="Body Text">Fixed problem with calling the disassembler when path specified (in option X# Custom Editors\Other Editors\Disassembler) with spaces (#1271)</li>
      <li styleclass="Body Text">Fixed editor coloring completely stopping when using some UDC calls (#1272)</li>
      <li styleclass="Body Text">Fixed problem with hint not showing on CONSTANT locals in FOR statements (#1274)</li>
      <li styleclass="Body Text">Fixed auto indent problem when code contains a LOOP or EXIT keyword (#1278)</li>
      <li styleclass="Body Text">Fixed an exception in the editor when typing a parenthesis under specific circumstances (#1279)</li>
      <li styleclass="Body Text">Fixed problem with incorrectly trying to open in design mode files with filenames starting with an opening bracket (#1292 )</li>
      <li styleclass="Body Text">The &quot;XSharp Website&quot; menu option inside VS was broken (#1297)</li>
      <li styleclass="Body Text">Fixed problem with the Match Identical Identifiers functionality that could slow down Visual Studio</li>
      <li styleclass="Body Text">Fixed a VS lock up that could happen when a file was opened during debugging.</li>
      <li styleclass="Body Text">Parameter tips for classes with a static constructor and a normal constructor were not processed correctly. This has been fixed.</li>
    </list>
    <list id="26" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When a project was opened where the dependency between a dependent item (like a .resx file or a .designer.prg file) and its parent was missing, then an exception could occur, which prevented the project from opening. This has been fixed.</li>
      <li styleclass="Body Text">When 2 compiler errors occurred on the same line with the same error code they were sometimes shown in the VS output window but not in the Error List. This has been fixed (#1308)</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <para styleclass="Heading3">New Features</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for special tags {VOXP:COM}, {VOXP:UNC} and {VOXP:DEL} / {VOXP:REM} to comment out, uncomment and remove lines from the original VO code (#1303)</li>
    </list>
    <para styleclass="Heading1">Changes in 2.16.0.5</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features Xbase++ dialect</text></para>
    <para styleclass="Body Text">We have made several changes in the way how Xbase++ class definitions are generated. Please check your code extensively with this new build !</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We now generate a class function for all classes. This returns the same object as the ClassObject() method for Xbase++ classes. <br/>This class function is generated, regardless of the /xpp1 compiler option. <br/>The Class function depends on the function __GetXppClassObject and the XSharp.XPP.StaticClassObject class that both can be found in the XSharp.XPP assembly(#1235).<br/>From the Class function you can access class variables and class methods. </li>
      <li styleclass="Body Text">In Xbase++ you can have fields (VAR) and properties (ACCESS / ASSIGN METHOD) with the same name, even with same visibility. Previously this was not supported.<br/>The compiler now automatically makes the field protected (or private for FINAL classes) and marks it with the [IsInstance] attribute. <br/>Inside the code of the class the compiler will now resolve the name to the field. In code outside of the class the compiler will resolve the name to the property.</li>
      <li styleclass="Body Text">For derived classes the compiler now automatically generates a property with the name of the parentclass, that is declared as the parent class and returns the equivalent to SUPER.</li>
      <li styleclass="Body Text">We have fixed an issue with the FINAL, INTRODUCE and OVERRIDE keywords for Xbase++ methods (#1244)</li>
      <li styleclass="Body Text">We have fixed some issues with accessing static class members in the XBase++ dialect (#1215)</li>
      <li styleclass="Body Text">You can now use the &quot;::&quot; prefix to access class variables and class methods inside class methods. </li>
      <li styleclass="Body Text">When a class is declared as subclass from another class then the compiler generates a (typed) property in the subclass to access the parent class, like Xbase++ does. This property returns the value &quot;super&quot;.</li>
      <li styleclass="Body Text">We are now supporting the READONLY clause for Vars and Class Vars. This means that the variable must be assigned in the Init() method (instance variables) or InitClass() method (Class vars)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features other dialects</text></para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Inside Visual Objects you could declare fields with the INSTANCE keyword and add ACCESS/ASSIGN methods with the same name as the INSTANCE field.<br/>In previous builds of X# this was not supported. <br/>The compiler now handles this correctly and resolves the name to the field in code inside methods/properties of the class and resolves the name to the property in code outside of the class.</li>
      <li styleclass="Body Text">The PPO file now contains the original white space from user defined commands and translates.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed some method overload resolution issues in the VO dialect (#1211).</li>
      <li styleclass="Body Text">Fixed internal compiler error (insufficient stack) with huge DO CASE statements and huge IF ELSEIF statements (#1214).</li>
      <li styleclass="Body Text">Fixed a problem with the Interpolated/Extended string syntax (#1218).</li>
      <li styleclass="Body Text">Fixed some issues with incorrectly allowing accessing static class members with the colon operator or instance members with the dot operator (#1219,#1220).</li>
      <li styleclass="Body Text">Fixed Incorrect visibility of MEMVARs created with MemVarPut() (#1223).</li>
      <li styleclass="Body Text">Fixed problem with _DLL FUNCTION with name in Quotes not working correctly (#1225).</li>
      <li styleclass="Body Text">If the preprocessor generated date and/or datetime literals, then these were not recognized. This has been fixed (#1232).</li>
      <li styleclass="Body Text">Fixed a problem with the preprocessor matching of the last optional token (#1241)</li>
      <li styleclass="Body Text">Fixed a problem with recognizing the ENDSEQUENCE keyword in the Xbase++ dialect (#1242).</li>
      <li styleclass="Body Text">Using a default parameter value of NIL is now only supported for parameters of type USUAL. Using NIL for other parameter types will generate a (new) warning <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9117">XS9117</link> .<br/>Also assigning NIL to a Symbol or using NIL as parameter to a function/method call that expects a SYMBOL will now also generate that warning (#1231).</li>
      <li styleclass="Body Text">Fixed a problem in the preprocessor where two adjacent tokens were not merged into one token in the result stream. (#1247).</li>
      <li styleclass="Body Text">Fixed a problem in the preprocessor where the preprocessor was not detecting an optional element when the element started with a Left parenthesis (#1250)</li>
      <li styleclass="Body Text">Fixed a problem with interpolated strings that contained literal double quotes like in <text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">i</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#0000ff;">&quot;SomeText&quot;&quot;{iNum}&quot;&quot; &quot;</text></li>
      <li styleclass="Body Text">Fixed a problem that was introduced in an earlier build of 2.16 with local functions / procedures.</li>
      <li styleclass="Body Text">A warning generated at parse time could lead to another warning about a preprocessor define even when that is not needed. This has been fixed.</li>
      <li styleclass="Body Text">Fixed issue with default parameter values for parameters declared as &quot;a := NIL,b := NIL as USUAL&quot; introduced in an earlier build of &#160;2.16</li>
      <li styleclass="Body Text">Fixed issue with erratic debugger behavior introduced in an earlier build of &#160;2.16.</li>
      <li styleclass="Body Text">When you are referring to a type in an external assembly that depends on another external assembly, but you did not have a reference to that other external assembly, then compilation could fail without proper explanation. Now we are producing the normal error that you need to add a reference to that other assembly.</li>
      <li styleclass="Body Text">Omitting the type for a parameter for a function or method &#160;that does not have the CLIPPER calling convention is allowed. These parameters are assumed to be of type USUAL. <br/>This now produces a new warning <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9118">XS9118</link>. </li>
    </list>
    <para styleclass="Heading3">Breaking changes</para>
    <para styleclass="Normal">If you are using our parser to parse source code, please check your code. We have made some changes to the language definition for the handling of if ... else statements as well as for the case statements (a new condBlock rule that is shared by both rules). This removes some recursion in the language. Also some of the Xbase++ specific rules have been changed. Please check the <link displaytype="text" defaultstyle="true" type="weblink" href="https://github.com/X-Sharp/XSharpDev/blob/main/XSharp/src/Compiler/XSharpCodeAnalysis/Parser/XSharp.g4" target="_blank">language definition online</link></para>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added the DOY() function.</li>
      <li styleclass="Body Text">Addeding missing ADS_LONG and ADS_LONGLONG defines.</li>
    </list>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Improved the speed of CDX skip operations on network drives (#1165).</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with DbSetRelation() and RLock() (#1226).</li>
      <li styleclass="Body Text">Adjusted implicit conversion from NULL_PSZ to string to now return NULL instead of an empty string.</li>
      <li styleclass="Body Text">Some initialization code is now moved from _INIT procedures to the static constructor of the SQLConnection Class, in order to make it easier to use this class from non-X# apps.</li>
      <li styleclass="Body Text">Fixed an issue with the visibility of dynamic memory variables that were created with the MemVarPut function (#1223).</li>
      <li styleclass="Body Text">Fixed a problem with the DbServer class in exclusive mode (#1230).</li>
      <li styleclass="Body Text">Implicit conversions from NULL_PSZ to string were returning an empty string and not NULL (#1234).</li>
      <li styleclass="Body Text">Fixed a problem in the CTOD() function when the day, month or year were prefixed with spaces.</li>
      <li styleclass="Body Text">Fixed an issue with OrderListAdd() in the ADS RDD. When the index is already open, then the RDD no longer returns an error.</li>
      <li styleclass="Body Text">Fixed an issue with MemRealloc where the second call on the same pointer would return NULL_PTR (#1248).</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">VOSDK</text></para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Global arrays in the SDK classes are now initialized from the class constructor of the SQLConnection class to fix problems when the main app does not include a link to the SQL Classes assembly.</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Debugger</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The debugger expression evaluator now also evaluates late bound properties and fields (if that compiler option is enabled inside your project). <br/>If this causes negative side effects then you can disable that in the &quot;Tools/Options Debugging/X# Debugger options screen&quot;.</li>
      <li styleclass="Body Text">The debugger expression evaluator now is initialized with the compiler options from your main application (if that application is an X# project). <br/>The settings on the <link displaytype="text" defaultstyle="true" type="topiclink" href="optPage-Debugger">Debugger Options dialog</link> are now only used when debugging DLLs that are loaded by a non X# startup project.</li>
      <li styleclass="Body Text">The debugger expression evaluator now always accepts a &apos;.&apos; character for instance fields, properties and methods, regardless of the setting in the project options. <br/>This is needed because several windows in the VS debugger automatically insert &apos;.&apos; characters when adding expressions to the watch window or when changing values for properties or fields.</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for importing Indexes in the DbServer editor.</li>
      <li styleclass="Body Text">The X# project system now remembers which Windows were opened in the Windows editor in design mode and reopens them correctly when a solution is reopened.</li>
      <li styleclass="Body Text">We have added templates for a Harbour console application and Harbour class library.</li>
      <li styleclass="Body Text">We have added item templates for FoxPro syntax classes and Xbase++ syntax classes.</li>
      <li styleclass="Body Text">The Class templates for the FoxPro and XBase++ dialect now include a class definition in that dialect. </li>
      <li styleclass="Body Text">We have improved the support for PPO files in the VS Editor.</li>
      <li styleclass="Body Text">We have updated some of the project templates.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with incorrectly showing member list in the editor for the &quot;:=&quot; operator (#1061).</li>
      <li styleclass="Body Text">Fixed VOMED generation of menu item DEFINE names that were different to the ones generated by VO (#1208).</li>
      <li styleclass="Body Text">Fixed VOWED incorrect order of generated lines of code in some cases (#1217).</li>
      <li styleclass="Body Text">Switched back to our own version of Mono.Cecil to avoid issues on computers that have the Xamarin (MAUI) workload in Visual Studio.</li>
      <li styleclass="Body Text">Fixed a problem opening a form in the Form Designer that contains fields that are initialized with a function call (#1251).</li>
      <li styleclass="Body Text">Windows that were in [Design] mode when a solution is closed, are now properly opened in [Design] mode when the solution is reopened.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.15.0.3</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Implemented the <link displaytype="text" defaultstyle="true" type="topiclink" href="STACKALLOC">STACKALLOC</link> syntax for allocating a block of memory on the stack (instead of the heap) (#1084)</li>
      <li styleclass="Body Text">Added ASYNC support to XBase++ methods (#1183)</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed missing compiler error in a few specific cases when using the dot for accessing instance members, when /allowdot is disabled (#1109)</li>
      <li styleclass="Body Text">Fixed some issues with passing parameters by reference (#1166)</li>
      <li styleclass="Body Text">Fixed some issues with interpolated strings (#1184)</li>
      <li styleclass="Body Text">Fixed a problem with the macro compiler not detecting an error with incorrectly accessing static/instance members (#1186)</li>
      <li styleclass="Body Text">Fixed incorrect line number reported for error messages on ELSEIF and UNTIL statements (#1187)</li>
      <li styleclass="Body Text">Fixed problem with using an iVar named &quot;Value&quot; inside a property setter, when option /cs is enabled (#1189)</li>
      <li styleclass="Body Text">Fixed incorrect file/line info reported in error message when the Start() function is missing (#1190)</li>
      <li styleclass="Body Text">Fixed bogus warning about ambiguous methods in some cases (#1191)</li>
      <li styleclass="Body Text">Fixed a preprocessor problem with nested square brackets (in SUM and REPLACE commands) (#1194)</li>
      <li styleclass="Body Text">Fixed incorrect method overload resolution in some cases in the VO dialect (#1195)</li>
      <li styleclass="Body Text">Fixed incorrect ambiguous call error with OBJECT/IntPtr parameters (#1197)</li>
      <li styleclass="Body Text">Fixed erratic debugging while stepping over code in some cases (#1200, #1202)</li>
      <li styleclass="Body Text">Fixed a problem where a missing &quot;end keyword&quot;, such as ENDIF, NEXT, ENDDO was not reported when the code between the start and end contained a compiler warning (#1203)</li>
      <li styleclass="Body Text">Fixed a problem in the build system where sometimes an error message about an incorrect &quot;RuntimeIdentifier&quot; was shown</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed runtime error in DBSort() (#1196)</li>
      <li styleclass="Body Text">Fixed error in the ConvertFromCodePageToCodePage function</li>
      <li styleclass="Body Text">A change in the startup code for the XSharp.RuntimeState could lead to incorrect codepages</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="29" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added VS option for the WED to manually adjust the x/y positions/sizes in the generated resource with multipliers (#1199)</li>
      <li styleclass="Body Text">Added new options page to control where the editor looks for identifiers on the Complete Word (Ctrl+Space) command.</li>
      <li styleclass="Body Text">A lot of improvements to the debugger expression evaluator (#1050). Please note that this debugger expression evaluator is only available in Visual Studio 2019 and later</li>
      <li styleclass="Body Text">Added a debugger options page that controls how expression are parsed by the new debugger expression evaluator. <br/>You can also change the setting here that disallows editing while debugging.</li>
      <li styleclass="Body Text">We have added context help to the Visual Studio source code editor. When you press F1 on a symbol then we inspect the symbol. If it comes from X# then the relevant page in the help file is opened. When it comes from Microsoft then we open the relevant page from the Microsoft Documentation online.<br/>In a next build we will probably add an option for 3rd parties to register their help collections too.</li>
      <li styleclass="Body Text">When a keyword is selected in the editor that is part of a block, such as CASE, OTHERWISE, ELSE, ELSEIF then the editor will now highlight all keywords from that block. </li>
      <li styleclass="Body Text">The Jump Keywords EXIT and LOOP are now also highlighted as part of the repeat block that they belong to.</li>
      <li styleclass="Body Text">When a RETURN keyword is selected in the editor, then the matching &quot;Entity&quot; keyword, such as FUNCTION, METHOD will be highlighted too.</li>
      <li styleclass="Body Text">Added a warning to the <link displaytype="text" defaultstyle="true" type="topiclink" href="PropPage-Application">Application project options </link>page, when switching the target framework.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed previously broken automatic case synchronization, when using the cursor keys to move to a different line in the editor (#722)</li>
      <li styleclass="Body Text">Fixed some issues with using Control+Space for code completion (#1044, #1140)</li>
      <li styleclass="Body Text">Fixed an intellisense problem with typing &quot;:&quot; in some cases (#1061)</li>
      <li styleclass="Body Text">Fixed parameter tooltips in a multiline expressions (method/function calls) (#1135)</li>
      <li styleclass="Body Text">Fixed problem with Format Document and the PUBLIC modifier (#1137)</li>
      <li styleclass="Body Text">Fixed a problem with Go to definition not working correctly with multiple partial classes defined in the same file (#1141)</li>
      <li styleclass="Body Text">Fixed some issues with auto-indenting (#1142, #1143)</li>
      <li styleclass="Body Text">Fixed a problem with not showing values for identifiers in the beginning of a new line when debugging (#1157)</li>
      <li styleclass="Body Text">Fixed Intellisense problem with LOGICs in some cases (#1185)</li>
      <li styleclass="Body Text">Fixed an issue where the completionlist could contain methods that were not visible from the spot where the completionlist was shown (#1188)</li>
      <li styleclass="Body Text">Fixed an issue with the display of nested types in the editor (#1198)</li>
      <li styleclass="Body Text">Cleaned up several X# project templates, fixing problems with incorrect placement of Debug/Output folders (#1201)</li>
      <li styleclass="Body Text">Undoing a case synchronization in the VS editor was not working, because the editor would immediately synchronize the case again (#1205)</li>
      <li styleclass="Body Text">Rebuilding the intellisense database no longer restarts Visual Studio (#1206)</li>
      <li styleclass="Body Text">Now the VO Menu Editor uses the same menu item DEFINE values, as those used in the original VO app (re-porting of the app is necessary for this to work) (#1207)</li>
      <li styleclass="Body Text">A Change to our project system and language service could lead to broken &quot;Find in Files&quot; functionality in some versions of Visual Studio. &#160;This has been fixed.</li>
      <li styleclass="Body Text">Fixed an issue where goto definition was not working for protected or private members</li>
      <li styleclass="Body Text">Fixed an issue where for certain files the Dropdown combo boxes on top of the editor were not correctly synchronized.</li>
    </list>
    <para styleclass="Heading2">Documentation</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Changes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Some methods in the typed SDK were documented as Function. They are now properly documented as Method</li>
      <li styleclass="Body Text">Property Lists and Method lists for classes now include references to methods that are inherited from parent classes. Methods that are inherited from .Net classes, such as ToString() from System.Object are NOT included.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.14.0.2, 3 &amp; 4</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed an exception in the X# Editor when opening a PRG file in VS 2017</li>
      <li styleclass="Body Text">Selecting a member from a completion list with the Enter key on a line immediately after an entry that has an XML comment could lead to extra triple slash (///) characters to be inserted in the editor</li>
      <li styleclass="Body Text">The triple slash command to insert XML comments was not working. This has been fixed.</li>
      <li styleclass="Body Text">Fixed a problem with entity separators not shown on the right line for entities with leading XML comments</li>
      <li styleclass="Body Text">Fixed a peek definition problem with types in source code that do not have a constructor</li>
      <li styleclass="Body Text">Fixed a problem with the Implement Interface action when the keyword case was not upper case</li>
      <li styleclass="Body Text">Fixed a problem that the keyword case was prematurely synchronized in the current line.</li>
      <li styleclass="Body Text">Fixed a problem with indenting after keywords such as IF, DO WHILE etc</li>
      <li styleclass="Body Text">Fixed a problem with selecting words at the end of a line when debugging</li>
      <li styleclass="Body Text">Fixed a problem where Format Document could lock up VS</li>
      <li styleclass="Body Text">Fixed a problem that accessors such as GET and SET were not indented inside the property block</li>
      <li styleclass="Body Text">Fixed a problem that Format Document was not working for some documents</li>
      <li styleclass="Body Text">Changed the priority of the background scanner that is responsible for keyword colorization and derived tasks inside VS.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.14.0.1</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with date literals resulting in a message about an unknown alias &quot;gloal&quot; (#1178)</li>
      <li styleclass="Body Text">Fixed a problem that leading 0 characters in AssemblyFileVersion and AssemblyInformationalVersion were lost. If the attribute does not have the wildcard &apos;*&apos; then these leading zeros are preserved (#1179)</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The runtime DLLs for 2.14.0.0 were marked with the TargetFramework Attribute. This caused problems. The attribute is no longer set on the runtime DLLs (#1177)</li>
    </list>
    <para styleclass="Heading1">Changes in 2.14.0.0</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="28" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem resolving methods when a type &#160;and a local have the same name (#922)</li>
      <li styleclass="Body Text">Improved XML doc messages for methods implicitly generated by the compiler (INITs, implicit constructors) (#1128)</li>
      <li styleclass="Body Text">Fixed an internal compiler error with DELEGATEs with default parameter values (#1129)</li>
      <li styleclass="Body Text">Fixed a problem with incorrect calculation of the memory address offset when obtaining a pointer to a structure element (#1132)</li>
      <li styleclass="Body Text">Fixed problematic behavior of #pragma warning directive unintentionally enabling/.disabling other warnings (#1133)</li>
      <li styleclass="Body Text">Fixed a problem with marking the complete current executing line of code while debugging (#1136)</li>
      <li styleclass="Body Text">Fixed incompatible to VO behavior with value initialization when declaring global MEMVAR (#1144)</li>
      <li styleclass="Body Text">Fixed problem with compiler rule for DO not recognizing the &quot;&amp;&quot; operator (#1147 )</li>
      <li styleclass="Body Text">Fixed inconsistent behavior of the ^ operator regarding narrowing conversion warnings (#1160)</li>
      <li styleclass="Body Text">Fixed several issues with CLOSE and INDEX UDC commands (#1162, #1163)</li>
      <li styleclass="Body Text">Fixed incorrect error line reported for error XS0161: not all code paths return a value (#1164)</li>
      <li styleclass="Body Text">Fixed bogus filename reported in error message when the Start() function is missing (#1167)</li>
      <li styleclass="Body Text">The PDB information for a command defined in a UDC now highlights the entire row and not just the first keyword</li>
      <li styleclass="Body Text">Fixed a problem in the CLOSE ALL and CLOSE DATABASES UDC.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added 2 new values to the DbNotificationType enum: BeforeRecordDeleted and BeforeRecordRecalled. Also added AfterRecordDeleted and AfterRecordRecalled which are aliases for the already existent RecordDeleted and RecordRecalled (#1174)</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="24" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added/updated several defines in the Win32API SDK library (#696)</li>
      <li styleclass="Body Text">Fixed a problem with &quot;SkipUnique&quot; not working correctly (#1117)</li>
      <li styleclass="Body Text">Fixed an RDD scope problem when the bottom scope is larger than the highest available key value (#1121)</li>
      <li styleclass="Body Text">Fixed signature of LookupAccountSid() function in the Win32API SDK library (#1125)</li>
      <li styleclass="Body Text">Improved exception error message when attempting to use functions like Trim() (which alter the key string length) in index expressions (#1148)</li>
      <li styleclass="Body Text">Fixed a Macro Compiler runtime exception when there is an assignment in an IIF statement (#1149)</li>
      <li styleclass="Body Text">Fixed a problem with resolving the correct overloaded method in late bound calls (#1158)</li>
      <li styleclass="Body Text">Fixed a problem with parametrized SQLExec() statements in the FoxPro Dialect</li>
      <li styleclass="Body Text">Fixed a problem in the Days() function where the incorrect number of seconds in a day was used.</li>
      <li styleclass="Body Text">Fixed a problem in the Advantage RDD when a FieldGet returned fields with trailing 0 characters. These are now replaced with a space.</li>
      <li styleclass="Body Text">Fixed a problem with DBI_LUPDATE in the ADS RDDs</li>
      <li styleclass="Body Text">Fixed the Debugger display of the USUAL type.</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="29" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Now using the &quot;Reference Manager&quot; instead of the &quot;Add Reference Dialog Box&quot; for adding References (#21, #1005)</li>
      <li styleclass="Body Text">Added an option to the Solution Explorer context menu to split a Windows Form in a form.prg and form.designer.prg (#33)</li>
      <li styleclass="Body Text">We have added an options page to the Tools / Options TextEditor/X# settings that allows you to enable/disable certain features in the X# source code editor, such as &quot;Highlight Word&quot;, &quot;Brace Matching&quot; etc. The option to backup the source code for the Windows Forms Editor has been moved from the Texteditor options page to the Custom Editor options page. Search for &apos;Backup&quot; in the Tools/Options dialog to find the setting.</li>
      <li styleclass="Body Text">Tooltips for all source code items now contain the Location (file name and the line/column).</li>
      <li styleclass="Body Text">We have added &quot;search keywords&quot; to all of our option page. you may be able to find a page by typing the keyword that you are looking for in the search control.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed &#160;a problem renaming files when a solution is under SCC with Team Foundation Server (#49)</li>
      <li styleclass="Body Text">The WinForms designer now ignores differences in the namespaces specified in the form.prg and designer.prg files (the one from form.prg is used) (#464)</li>
      <li styleclass="Body Text">Fixed incorrect mouse tooltip for a class in some cases (#871)</li>
      <li styleclass="Body Text">Fixed a code completion issue on enum types with extension methods (#1027)</li>
      <li styleclass="Body Text">Fixed some intellisense problems with enums (#1064)</li>
      <li styleclass="Body Text">Fixed a problem with Nuget packages in VS 2022 causing first attempts to build projects to fail (#1114)</li>
      <li styleclass="Body Text">Fixed a formatting problem in XML documentation tooltips (#1127)</li>
      <li styleclass="Body Text">Fixed a problem with including bogus extra static members in the code completion list in the editor (#1130)</li>
      <li styleclass="Body Text">Fixed problem with Extension methods not included in Goto Definition, Peek definition, QuickInfo tips and Parameter Tips (#1131)</li>
      <li styleclass="Body Text">Fixed a problem in determining the correct parameter number for parameter tips when a compiler pseudo function such as IIF() was used inside the parameter list (#1134)</li>
      <li styleclass="Body Text">Fixed a problem with selecting words with mouse double-click in the editor with underscores while debugging (#1138)</li>
      <li styleclass="Body Text">Fixed a problem with evaluating values of identifiers with underscores in their names while debugging (#1139)</li>
      <li styleclass="Body Text">Fixed identifier highlighting causing the VS Editor to hang in certain situations (#1145)</li>
      <li styleclass="Body Text">Fixed indenting of generated event handler methods in the WinForms designer (#1152)</li>
      <li styleclass="Body Text">Fixed a problem with the WinForms designer duplicating fields when adding new controls (#1154)</li>
      <li styleclass="Body Text">Fixed a problem with the WinForms designer removing #region directives (#1155)</li>
      <li styleclass="Body Text">Fixed a problem with the WinForms designer removing PROPERTY declarations (#1156)</li>
      <li styleclass="Body Text">Fixed a problem that the type lookup for locals was failing in some cases (#1168)</li>
      <li styleclass="Body Text">Fixed a problem where the existence of extension methods in code was causing a problem filling the member list (#1170)</li>
      <li styleclass="Body Text">Fixed a problem when completing the member completion list without selecting an item (#1171)</li>
      <li styleclass="Body Text">Fixed a problem with showing member completion on types of static members of a class (#1172)</li>
      <li styleclass="Body Text">Fixed a problem with the indentation after single line entities, such as GLOBAL, DEFINE, EXPORT etc. (#1173)</li>
      <li styleclass="Body Text">Fixed a problem with parameter tips for extension methods (#1175)</li>
      <li styleclass="Body Text">Fixed a problem with tooltips for namespaces and nested classes (#1176)</li>
      <li styleclass="Body Text">Optional tokens in UDCs were not colored as Keyword in the source code editor</li>
      <li styleclass="Body Text">Fixed a problem in the CodeDom provider that failed to load on a Build Server because of &#160;a dependency to Microsoft.VisualStudio.Shell.Design version 15.0 when generating code for WPF projects.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.13.2.2</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="30" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Class members declared with only the INSTANCE modifier were generated as public. This has been changed to protected, just like in Visual Objects (#1115)</text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="30" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">IVarGetInfo() returned incorrect values for PROTECTED and INSTANCE members. This has been fixed.(#1116)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The Default() function was changing usual variables initialized with NULL_OBJECT to the new value. This was not compatible with Visual Objects (#1119)</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The Rebuild Intellisense Database menu option now asks for confirmation before restarting Visual Studio (#1120)</li>
      <li styleclass="Body Text">The &quot;Include Files&quot; node in the solution explorer can now be hidden (Tools/ Options X# Custom Editors/Other Editors)</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The type information for variables declared in a CATCH clause was not available. This has been fixed (#1118)</li>
      <li styleclass="Body Text">Fixed several issues with parameter tips (#1098, #1065)</li>
      <li styleclass="Body Text">Fixed a performance issue when the cursor was on a undeclared identifier in a &quot;global&quot; entity such as a function or procedure in VERY large projects</li>
      <li styleclass="Body Text">The &quot;Include Files&quot; node could contain duplicate references when the source code for an #include statement contained relative paths, such as<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#include &quot;..\GlobalDefines.vh&quot;</text></li>
    </list>
    <list id="31" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Suppressed the expansion of the &quot;Include Files&quot; node in the Solution Explorer when a solution is opened.</li>
      <li styleclass="Body Text">Single character words (like i, j, k) were not highlighted with the &apos;highlight word&apos; feature</li>
      <li styleclass="Body Text">The type &apos;ptr&apos; was not marked in the keyword color in quickinfo tooltips</li>
      <li styleclass="Body Text">The nameof, typeof and sizeof keywords were not synchronized in the keyword case</li>
    </list>
    <para styleclass="Heading1">Changes in 2.13.2.1</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The parser now recognizes AS &lt;type&gt; clause for PUBLIC and PRIVATE memory variable declarations but ignores these with a warning</li>
      <li styleclass="Body Text">We have added support for AS &lt;type&gt; for locals declared with <link displaytype="text" defaultstyle="true" type="topiclink" href="command_LPARAMETERS">LPARAMETERS</link>. The function/procedure is still clipper calling convention, but the local variable is of the declared type.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="30" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">The PUBLIC and PRIVATE keywords are sometimes misinterpreted as memvar declarations when the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar" styleclass="Body Text">/memvar</link><text styleclass="Body Text"> compiler option is not even selected. We have added parser rules to prevent this from happening: when /memvar is not selected then PUBLIC and PRIVATE are only used as visibility modifiers</text></li>
      <li styleclass="Normal">Fix to an issue with selecting function and method overloads (#1096, #1101)</li>
      <li styleclass="Normal">Build 2.13.2.0 introduced a problem that could cause a big performance problem for VERY large source files. This has been fixed in 2.13.2.1.</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="30" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">When the runtime cannot resolve a late bound call to an overloaded method it produces an error message that includes a list of all relevant overloads (#875, #1096).</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The .NULL. related behavior that was added for the FoxPro dialect was breaking existing code that involves usuals. In the FoxPro dialect DBNull.Value is now seen as .NULL. but in the other dialects as a NULL_OBJECT / NIL</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Several internal members of the PropertyContainer class in the VFP library are now public</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="30" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">The lookup code for Peek definition, Goto definition etc. was filtering out instance methods and only returning static methods. This has been fixed (#1111, #1100)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Several changes to fix issues with indentation while typing (#1094) </text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed several problems with parameter tips (#1098, #1066, #1110)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">A recent change to support the wizard that converts packages.config to package references has had a negative impact on nuget restore operations during builds inside Visual Studio. This was fixed. (#1113 and #1114)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed recognition of variables in lines such as CATCH, ELSEIF, FOR, FOREACH etc (#1118)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed recognition of types in the default namespace (#1122)</text></li>
    </list>
    <para styleclass="Heading1">Changes in 2.13.1</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The PUBLIC and PRIVATE statements in the FoxPro dialect now support inline assignments, such as in<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MyVar := 42</text><br/>Without initialization the value of the PUBLIC will be FALSE, with the exception of the variable with the name &quot;FOXPRO&quot; and &quot;FOX&quot;. These will be initialized with TRUE in the FoxPro dialect</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with initialization of File Wide publics in the foxpro dialect</li>
      <li styleclass="Body Text">Column numbers for error messages were not always correct for complex expressions. This has been fixed (#1088)</li>
      <li styleclass="Body Text">Corrected an issue in the lexer where line numbers were incorrect when the source contains statements that span multiple lines (by using a semicolon as line continuation character) (#1105)</li>
      <li styleclass="Body Text">Fixed a problem in the overload resolution when one or more overloads have a Nullable parameter(#1106), such as in<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;"> &#160; class</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Dummy &#160; &#160;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">method</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Test (param </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">usual</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">int</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;.</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;"> &#160; &#160; &#160;method</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Test(param </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">Int</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">? </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">int</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;.</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;"> &#160; end</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">class</text></li>
      <li styleclass="Body Text">Fixed a problem with the code generation for late bound method calls and/or array access in the FoxPro dialect with the /fox2 compiler compiler option (&quot;compatible array handling&quot;) for variables of unknown type (#1108).<br/>An expression such as <tab /> &#160; <br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; undefinedVariable.MemberName(1)</text><br/><br/>was interpreted as an array access but it could also be a method call.<br/>The compiler now generates code that calls a runtime function that checks at runtime if &quot;MemberName&quot; is either a method or a property. <br/>If it is a property then the runtime will assume that it is an array and access the first element.<br/>Code with more than 2 parameters or with non-numeric parameters, such as <br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; undefinedVariable.DoSomething(&quot;somestring&quot;)</text><br/><br/>was not affected, since &quot;<text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">somestring</text>&quot; &#160;cannot be an array index. <br/><text style="font-weight:bold;">TIP</text>: We recommend however, to always declare variables and specify their type. This helps to find problems at compile time and will generate MUCH faster code.</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added functions to resolve method calls or array access at runtime &#160;(#1108)</li>
      <li styleclass="Body Text">Added GoTo record number functionality to the WorkareasWindow in the XSharp.RT.Debugger library</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Now the VS Project tree shows (in a special node) include files that are used by a project (#906). <br/>This includes include files inside the project itself but also include files in the XSharp folder or Vulcan folder (when applicable). </li>
      <li styleclass="Body Text">We are using the built-in images of Visual Studio in the project tree and on several other locations when possible.</li>
      <li styleclass="Body Text">Our background parser inside VS is now paused during the built process to interfere less with the build.</li>
      <li styleclass="Body Text">We have added a setting to the indentation options so you can control the indentation for class fields and properties separately from methods. <br/>So you can choose to indent the fields and properties and to not indent the methods. This has also been added to the <link displaytype="text" defaultstyle="true" type="topiclink" href="_EditorConfig-files">.editorconfig</link> file</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug Fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed problems with Peek Definition and Goto Definition</li>
      <li styleclass="Body Text">When looking up Functions we were (accidentally) sometimes also including static methods in other classes.</li>
      <li styleclass="Body Text">When parsing tokens for QuickInfo and Peek Definition then a method name would not be found if there was a space following the name and before the open parenthesis.</li>
      <li styleclass="Body Text">Fixed a problem where project wide resources and settings (added from the project properties page) did not get the code behind file when saving</li>
      <li styleclass="Body Text">Quick Info and Goto definition on a line that calls a constructor will now show / goto the first constructor of the type and no longer to the type declaration</li>
      <li styleclass="Body Text">When the build process of a project was failing due to missing resources or other resource related problems, then the error list was not properly updated. This has been fixed (#1102)</li>
      <li styleclass="Body Text">The XSharpDebugger.DLL was not installed properly into VS2017 and VS2019.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.13</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="32" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-24px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:24px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-24px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:24px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Body Text">We have implemented a new compiler option /</text><text styleclass="Body Text" style="font-weight:bold;">allowoldstyleassignments</text><text styleclass="Body Text">, which allows using the &quot;=&quot; operator instead of &quot;:=&quot; for assignments. </text><br/><text styleclass="Body Text">This option is enabled by default in the VFP dialect and disabled by default in all other dialects.</text></li>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="text-indent:-27px; margin-left:27px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text" style="text-indent:-27px; margin-left:27px;">We have <text style="font-weight:bold;">revised the behavior</text> of the <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo4">/vo4</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo11">/vo11</link> command line options that are related to <text style="font-weight:bold;">numeric conversions</text>.<br/>Before /vo4 only was related to conversions between integral numbers. It has now been extended to also include conversions between fractional numbers (such as float, real8, decimal and currency) and integral numbers.<br/>In the original languages (VO, FoxPro) you can assign a fractional number to a variable with integral value without problems.<br/>In .Net you can&apos;t do that but you will have to add a cast to the assignment:</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> integerValue </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> floatValue := 1.5 </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">FLOAT</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">integerValue := floatValue &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// no conversion: this will not compile in .Net without conversion</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">integerValue := (</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;">) floatValue &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// explicit conversion: this does compile in .Net</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? integerValue</text><br/><br/><text styleclass="Body Text">If you enable the compiler option /vo4 then the assignment without the cast will also work. </text><br/><text styleclass="Body Text">The /vo4 compiler option adds an implicit conversion</text><br/><text styleclass="Body Text">In both cases the compiler will produce a warning:</text><br/><text styleclass="Body Text" style="font-weight:bold;">warning XS9020: Narrowing conversion from &apos;float&apos; to &apos;int&apos; may lead to loss of data or overflow errors</text><br/><text styleclass="Body Text">The </text><text styleclass="Body Text" style="font-weight:bold;">value of the integer</text><text styleclass="Body Text"> integerValue above is controlled by the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo11" styleclass="Body Text">/vo11</link><text styleclass="Body Text"> compiler option:</text><br/><text styleclass="Body Text">By default in .Net conversions from a fractional value to an integer value will round towards zero, so the value will then be 1.</text><br/><text styleclass="Body Text">If you enable the compiler option /vo11 then the fractional number will be rounded to the nearest even integral value, so the value of integerValue in the example will be 2.</text><br/><text styleclass="Body Text">This is not new.</text><br/><text styleclass="Body Text">We have made a change in build 2.13, to make sure that this difference is no longer determined at runtime for the X# numeric types but at compile time.</text><br/><text styleclass="Body Text">In earlier builds this was handled inside conversion operators from the FLOAT and CURRENCY types in the runtime. </text><br/><text styleclass="Body Text">These classes choose the rounding method based on the /vo11 setting from the main program which is stored in the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="html\P_XSharp_RuntimeState_CompilerOptionVO11.htm" domain="XSharpRef.chm" styleclass="Body Text">RuntimeState</link><text styleclass="Body Text"> object.</text><br/><text styleclass="Body Text">However that could lead to unwanted side effects when an assembly was compiled with /vo11 but the main program was not. </text><br/><text styleclass="Body Text">This could happen for example with ReportPro or bBrowser.</text><br/><text styleclass="Body Text">If the author of such a library now chooses to compile with /vo11 then he can be certain that all these conversions in his code will follow rounding to zero or rounding to the nearest even integer, depending on his choice.</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The DebuggerDisplay attribute for Compile Time Codeblocks has changed. You now see the source code for compile time codeblocks in the debugger.</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a code generation issue with ASYNC/AWAIT (#1049)</li>
      <li styleclass="Body Text">Fixed an Internal compiler error with Evaluate() in CODEBLOCK in VFP dialect (#1043)</li>
      <li styleclass="Body Text">Fixed an Internal compiler error with UDCs incorrectly inserted after an END FUNCTION statement</li>
      <li styleclass="Body Text">Fixed a problem in the preprocessor with #region and #endregion in nested include files (#1046)</li>
      <li styleclass="Body Text">Fixed some problems with evaluating DEFINEs based on the order they appear (#866, #1057)</li>
      <li styleclass="Body Text">Fixed a compiler error with nested BEGIN SEQUENCE .. END SEQUENCE statements (#1055)</li>
      <li styleclass="Body Text">Fixed some problems with codeblocks containing complex expressions (#1056)</li>
      <li styleclass="Body Text">Fixed problem assigning function to delegate, when /undeclared+ is enabled (#1051)</li>
      <li styleclass="Body Text">Fixed a bogus warning when defining a LOCAL FUNCTION in the Fox dialect (#1017)</li>
      <li styleclass="Body Text">Fixed a problem with the Linq Operation Sum on FLOAT values (#965)</li>
      <li styleclass="Body Text">Fixed a problem with using SELF in an anonymous method/lamda expression (#1058)</li>
      <li styleclass="Body Text">Fixed an InvalidCastException when casting a Usual to a Enum defined as DWord (#1069)</li>
      <li styleclass="Body Text">Fixed incorrect emitted code when calling AScan() with param nStart supplied and similar functions (#1062, #1063)</li>
      <li styleclass="Body Text">Fixed a problem with resolving the correct one form overloads of the same function that span across different assemblies (#1079)</li>
      <li styleclass="Body Text">Fixed unexpected behavior of the preprocessor with #translate for specific XBase++ code (#1073)</li>
      <li styleclass="Body Text">Fixed a problem with unexpected behavior of &quot;ARRAY OF&quot; (#885)</li>
      <li styleclass="Body Text">Fixed some issues with calling specific overloads of functions accepting an ARRAY as a first argument (#1074)</li>
      <li styleclass="Body Text">Fixed a bogus XS0460 error when using the PUBLIC keyword on a method (#1072)</li>
      <li styleclass="Body Text">Fixed incorrect behavior when enabling Named Arguments option (#1071)</li>
      <li styleclass="Body Text">Fixed Access violation when calling a function/method with DECIMAL argument with default value (#1075)</li>
      <li styleclass="Body Text">Fixed some issues with #xtranslate not recognizing the Regular match marker in the preprocessor. Also fixed an issue with recognizing the double colon (::) inside expression tokens in the preprocessor. (#1077)</li>
      <li styleclass="Body Text">Fixed some issues with declaring arrays in the VFP dialect (#848)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed some incompatibilities with VO in the Mod() function</li>
      <li styleclass="Body Text">Fixed an exception with Copy to array in the VFP dialect when dimensions do not match (#993)</li>
      <li styleclass="Body Text">Fixed a seeking problem with SetDeleted(TRUE) and DESCEND order (#986)</li>
      <li styleclass="Body Text">Fixed a problem with DataListView incorrectly showing (empty) deleted records with SetDeleted(TRUE) (#1009)</li>
      <li styleclass="Body Text">Fixed problem with SetOrder() failing with SYMBOL argument (#1070)</li>
      <li styleclass="Body Text">Reverted a previous incorrect change in the SDK in DBServer:FieldGetFormatted() (#1076)</li>
      <li styleclass="Body Text">Fixed several issues with StrEvaluate(), including not recognizing MEMVARs with underscores in their names (#1078)</li>
      <li styleclass="Body Text">Fix for a problem with InList() and string values (#1095)</li>
      <li styleclass="Body Text">The Empty() function now returns false for the values <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">.NULL.</text> and <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">DBNull.Value</text> to be compatible with FoxPro</li>
      <li styleclass="Body Text">Fixed a problem with GetDefault()/ SetDefault() to make them compatible with Visual Objects (#1099)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">New Features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Enhancements for Unicode AnyCpu SQL classes (#1006):</li>
      <li styleclass="Body Text">Added a property to open a Sqlselect in readonly mode. This should prevent Append(), Delete() and FieldPut()</li>
      <li styleclass="Body Text">Implemented delay creating InsertCmd, DeleteCmd, UpdateCmd until really needed</li>
      <li styleclass="Body Text">Added callback mechanism so customers can override the commandtext for these command (and for example route them to stored Procedures)</li>
      <li styleclass="Body Text">When a late bound method call cannot be resolved because the method is overloaded then a better error message is now generated that also includes the prototypes of the methods found (#1096)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">FoxPro dialect</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added ADatabases() function</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">You can now control how indenting is done through the Tools/Options Text Editor/X# option pages. We have added several options that control indenting of your source code. You can also set these from an <link displaytype="text" defaultstyle="true" type="topiclink" href="_EditorConfig-files">.editorconfig</link> file if you want to enforce indenting rules inside your company.</li>
      <li styleclass="Body Text">We have now added extensive code formatting options to the source code editor. See Tools/Options/Text Editor/X#/Indentation for available options (#430)</li>
      <li styleclass="Body Text">We have implemented the option &quot;Identifier Case Synchronization&quot;. This works as follows: The editor picks up the first occurrence of an Identifier (class name, variable name etc) in a source file and make sure that all other occurrences of that identifier in the same source file use the same case. This does NOT enforce casing across source files (that would be way too slow)</li>
      <li styleclass="Body Text">We have added color settings to the VS Color dialog for Matched braces, Matched keyword and Matched identifiers. Open the Tools/Options dialog, Choose Environment/Fonts and Colors and look for the colors in the listbox that start with the word &quot;X#&quot;. You can customize these to your liking.</li>
      <li styleclass="Body Text">X# projects that use the Vulcan Runtime now have a context menu item that allows you to convert them to the X# runtime. Standard Vulcan assemblies will be replaced with the equivalent X# runtime assemblies. If you are using 3rd party components such as bBrowser or ReportPro then you need to replace the references to these components yourself.(#32)</li>
      <li styleclass="Body Text">We have added an option to the language page of the project properties to set the new /allowoldstyleassignments commandline option for the compiler</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with Get Latest Version for solution that is under TFS (#1045)</li>
      <li styleclass="Body Text">Fixed WinForm designer changing formatting in main-prg file (#806)</li>
      <li styleclass="Body Text">Fixed some problems with code generation in the WinForms designer (#1042, #1052)</li>
      <li styleclass="Body Text">Fixed a problem with formatting of DO WHILE (#923)</li>
      <li styleclass="Body Text">Fixed problem with Light Bulb &quot;Generate default constructor&quot; feature (#1034)</li>
      <li styleclass="Body Text">Fixed problem with ToolTips in the Debugger. We now parse the complete expression from the first token until the cursor location. (#1015)</li>
      <li styleclass="Body Text">Fixed some remaining intellisense issues with .Net array locals defined with VAR (#569)</li>
      <li styleclass="Body Text">Fixed a problem with indenting not working correctly in some cases (#421)</li>
      <li styleclass="Body Text">Fixed a problem with auto outdenting (#919)</li>
      <li styleclass="Body Text">Several improvements to keyword pair matching (#904)</li>
      <li styleclass="Body Text">Fixed a problem with Code Completion showing also static members after typing a dot in &quot;ClassName{}.&quot; #1081</li>
      <li styleclass="Body Text">Fixed a performance Issue when typing . for .and. (#1080)</li>
      <li styleclass="Body Text">Fixed a problem with the navigation bar while typing new classes/methods (#1041)</li>
      <li styleclass="Body Text">Fixed incorrect info tooltips on keywords (#979)</li>
      <li styleclass="Body Text">Fixed a possible VS freeze when using &quot;Clean Solution&quot; (#1053)</li>
      <li styleclass="Body Text">Fixed incorrect positioning of caret in eventhandlers in the form designer (#1092)</li>
      <li styleclass="Body Text">Fixed a problem with the form designer failing to open forms after creating a new one (#1093)</li>
      <li styleclass="Body Text">Right Click on a packages.config file and choosing the option &quot;Migrate to packagereferences&quot; did not work because inside Visual Studio there is a hardcoded list of supported project types. We are now &quot;faking&quot; the projecttype to make VS happy and enable the wizard.</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The XSharp.Build.Dll, which is responsible for creating the command line when compiling X# projects in VS, was not properly passing the <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-noconfig">/noconfig</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-shared">/shared</link> compiler options to the compiler. As a result the shared compiler was not used, even when the project property to use the Shared Compiler was enabled. Also the compiler was automatically including references to all the assemblies that are listed inside the file xsc.rsp, which is located inside the XSharp\bin folder.<br/>You may experience now that assemblies will not compile because of missing types. This will happen if you are using a type that is inside an assembly that is listed inside xsc.rsp. You should add explicit references to these assemblies in your X# project now.</li>
    </list>
    <para styleclass="Heading1">Changes in 2.12.2.0</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a bug in the code generation for handling FoxPro array access with parenthesized indices (#988, #991)</li>
      <li styleclass="Body Text">The compiler was generating incorrect warnings for locals declared with IS. This has been fixed.</li>
      <li styleclass="Body Text">The compiler was not reporting an error on invalid usage of the OVERRIDE modifier on ACCESS/ASSIGNs, this has been fixed (#981)</li>
      <li styleclass="Body Text">Fixed inconsistent behavior in reporting warnings and errors in several cases when converting from various numeric data types to another (#951, #987)</li>
      <li styleclass="Body Text">Fixed some &quot;failed to emit module&quot; issues with iif() statements in some cases (#989)</li>
      <li styleclass="Body Text">Fixed a problem with compiling X# code scripts (#1002)</li>
      <li styleclass="Body Text">Fixed a problem with using classes for some specific assemblies in the macro compiler (#1003)</li>
      <li styleclass="Body Text">Fix an incorrect error message when adding an INT to a pointer in AnyCPU mode (#1007)</li>
      <li styleclass="Body Text">Fixed a problem with casting STRING to PTR syntax (#1013)</li>
      <li styleclass="Body Text">Fixed a problem with PCount() when passing a single NULL argument to a CLIPPER function/method (#1016)</li>
    </list>
    <para styleclass="Heading3">New Features</para>
    <list id="33" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support for the TEXT .. ENDTEXT command in all dialects. Please note that there are several variations of this command. One variation work in ALL dialects (TEXT TO varName). Other variations depend on the dialect chosen. We have moved the support for TEXT .. ENDTEXT now also from the compiler to the preprocessor. This means that there are also 2 new preprocessor directives, <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Text">#text</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Endtext">#endtext</link> (#977, #1029)</li>
      <li styleclass="Body Text">Implemented new compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo17">/vo17</link>, which implements a more compatible to VO behavior for the BEGIN SEQUENCE..RECOVER command (#111, #881, #916):</li>
      <list id="33" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">For code that contains a RECOVER USING, a check is made for wrapped exceptions. When the exception is not a wrapped exception then a function in the runtime is called (<text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> _SequenceError(e </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Exception) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text>) that can process the error. It can for example call the error handler, or throw the error</li>
        <li styleclass="Body Text">When there is no RECOVER USING clause , then the compiler generates one and from within this generated clause detects if the RECOVER was reached with a wrapped exception or a normal exception. For wrapped exceptions it gets the value and calls a special function in the runtime (<text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> _SequenceRecover(uBreakValue </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text>). When the generated recover is called with a &apos;normal&apos; exception then _SequenceError function from the previous bullet is called.</li>
      </list>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support for CCALL() and CCALLNATIVE()</li>
      <li styleclass="Body Text">The #pragma directives are now handled by the preprocessor. As a result you can add #pragma lines anywhere in your code: between entities, inside the body of an entity etc.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Changed the prototype for AdsGetFTSIndexInfo (#966)</li>
      <li styleclass="Body Text">Fixed a problem with TransForm and decimal types (#1001)</li>
      <li styleclass="Body Text">Added several missing return types in the VFP assembly</li>
      <li styleclass="Body Text">Fixed a problem with browsing a DBFVFP table in the FoxPro dialect</li>
      <li styleclass="Body Text">Fixed an inconsistency with handling values provided by BREAK commands inside surrounding BEGIN...RECOVER statements, depending on if early or late bound call is used (#883)</li>
      <li styleclass="Body Text">Fixed a problem with floating point format when assigning a System.Decimal value to a USUAL var (#1001)</li>
      <li styleclass="Body Text">Fixed a runtime error with DbCopyToArray() when copying to an array that has more columns than the table, in the FoxPro dialect (#993)</li>
      <li styleclass="Body Text">Fixed a problem with the typecast expression and numeric literals with the +/- sign in the macro compiler (#1025)</li>
      <li styleclass="Body Text">Fixed problem in the Late binding code where a string was sometimes passed in and not properly converted to symbol</li>
      <li styleclass="Body Text">IVarPut()/IVarGet() now throw an appropriate exception when trying to use an inaccessible (due to limiting visibility modifiers) property getter/setter (ACCESS/ASSIGN) (#1023)</li>
      <li styleclass="Body Text">Fixed an issue with IVarGet() and IVarPut() for properties that are redefined in a subclass with the NEW modifier (#1030)</li>
      <li styleclass="Body Text">DbDataSource now tries to lock a record when deleting or recalling the record</li>
      <li styleclass="Body Text">Foreach was not working correctly on properties containing collections that were returned from a late bound property access such as IVarGet()(#1033)</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="34" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Heading3" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Heading3"><text styleclass="Body Text">You</text><text styleclass="List">&#32;</text><text styleclass="Body Text">can now register a delegate in the runtime state that allows you to control how the macro compiler caches types from loaded assemblies(#998).</text><br/><text styleclass="Body Text">This delegate has to have the format:</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DELEGATE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MacroCompilerIncludeAssemblyInCache(ass </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">Assembly</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOGIC</text><br/><br/><text styleclass="Body Text">Example:</text><br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">XSharp.RuntimeState.MacroCompilerIncludeAssemblyInCache := { a &#160;=&gt; &#160;DoNotCacheDevExpress(a)}</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> DoNotCacheDevExpress(ass </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">Assembly</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOGIC</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// do not cache DevExpress assemblies</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> ass:Location:IndexOf(&quot;devexpress&quot;, StringComparison.OrdinalIgnoreCase) == -1</text></li>
    </list>
    <para styleclass="Heading2">Compatible VO SDK</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed an issue where SetAnsi(FALSE) causes SingleLineEdit controls with pictures to show random characters when entering umlauts (#1038)</li>
    </list>
    <para styleclass="Heading2">Typed VO SDK</para>
    <para styleclass="Body Text">There are 2 new properties for the SQLSelect class. </para>
    <list id="35" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">ReadOnly - which makes the SQLSelect Readonly</li>
      <li styleclass="Body Text">BatchUpdates - which controls how updates are handled</li>
    </list>
    <para styleclass="Heading3">ReadOnly cursors and delayed creation of command objects</para>
    <para styleclass="Body Text">Previously the SQLSelect class created <link displaytype="text" defaultstyle="true" type="weblink" href="https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbcommand?view=netframework-4.8" target="_blank">DbCommand</link> objects to update, insert and delete changes made to a cursor immediately when the result set was opened. <br/>That could cause problems when a complex query was used to select data, because the <link displaytype="text" defaultstyle="true" type="weblink" href="https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbcommandbuilder?view=netframework-4.8" target="_blank">DbCommandBuilder</link> object could not figure out how to create these statements.</para>
    <para styleclass="Body Text">We are now delaying the creation of these commands until the first time they are needed. <br/>At the same time we have now added a ReadOnly property with a default value of FALSE.</para>
    <para styleclass="Body Text">If you set ReadOnly to true then:</para>
    <list id="36" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Calling FieldPut(), Delete() and Append() will generate an error with Gencode EG_READONLY.</li>
      <li styleclass="Body Text">No Command objects will be created for the SQLSelect, because the cursor cannot be updated.</li>
    </list>
    <para styleclass="Body Text">If ReadOnly remains FALSE then the command objects to update, insert and delete will be created the first time they are needed. <br/>These commands are created in the __CreateDataAdapter() method.<br/>You can override this method and create the commands in your own subclass when you want.<br/>The command creation and the updates work as follows:</para>
    <list id="37" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">First a DataAdapter (of type <link displaytype="text" defaultstyle="true" type="weblink" href="https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbdataadapter?view=netframework-4.8" target="_blank">DbDataAdapter</link>) is created using the CreateDataAdapter method from the SQLFactory class</li>
      <li styleclass="Body Text">Then a CommandBuilder object (of type <link displaytype="text" defaultstyle="true" type="weblink" href="https://docs.microsoft.com/en-us/dotnet/api/system.data.common.dbcommandbuilder?view=netframework-4.8" target="_blank">DbCommandBuilder</link>) is created from the CreateCommandBuilder method of the SQLFactory class</li>
      <li styleclass="Body Text">Then the Insert, Delete and Update Command objects (all of type DbCommand) are created from the GetInsertCommand() etc methods from the DbCommandBuilder object. The DBCommandBuilder object takes the Select statement and creates commands with parameters based on the SQLSelect command</li>
      <li styleclass="Body Text">These command objects are assigned to the DataAdapter and then the DataAdapter:Update() method is called with the <link displaytype="text" defaultstyle="true" type="weblink" href="https://docs.microsoft.com/en-us/dotnet/api/system.data.datatable?view=netframework-4.8" target="_blank">DataTable</link> that is behind the SQLSelect as argument.</li>
    </list>
    <para styleclass="Heading3">Batch Updates</para>
    <para styleclass="Normal">Normally updates in a SQLSelect will be sent to the server when you move the record pointer to a new row, or when you call Update()</para>
    <para styleclass="Normal">If you set the BatchUpdates property to TRUE then the SQLSelect will delay sending updates to the server and will not do that for each record movement, but will wait until you call the Update() method with an argument TRUE. This will then write all the buffered changes to the server. This may then also trigger the creation of the DBCommand objects (see before).<br/>If your table has autoincrement fields then you may want to call Requery() afterwards to see the newly assigned key values.</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed the handling for project property pages for flavored projects (#992)</li>
      <li styleclass="Body Text">When trying to start the debugger with a non existing working directory or program file name, now an appropriate error is displayed (#996)</li>
      <li styleclass="Body Text">Fixed a problem with the form designer generating sometimes invalid code with #regions (#1020, #935)</li>
      <li styleclass="Body Text">The WinForms designer now by default adds the OVERRIDE keyword modifier to the generated Dispose() method (was added in the template) (#1004)</li>
      <li styleclass="Body Text">Due to a changed threading model inside the latest VS2022 releases, error messages were sometimes not shown in the output window and the error list. This has been fixed</li>
      <li styleclass="Body Text">Fixed a problem in the windows forms designer code generation with nested classes inside the main form class (#1031).</li>
      <li styleclass="Body Text">Fixed problem with windows forms editor failing to open form with command based on UDC (#1037).</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Sourcecode Editor</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Type lookups on full names were sometimes failing because the fullname was defined as case sensitive (#978)</li>
      <li styleclass="Body Text">Nested type lookup was sometimes failing. This has been fixed.</li>
      <li styleclass="Body Text">The indenting options can now also be overridden in the <link displaytype="text" defaultstyle="true" type="topiclink" href="_EditorConfig-files">.editorconfig</link> file (#999)</li>
      <li styleclass="Body Text">When a source file was loaded in the editor then the combo boxes with types and members were not activated until the caret was moved in the buffer (#995)</li>
      <li styleclass="Body Text">The member combobox in the editor was getting confused for code that contains local functions or local procedures.</li>
      <li styleclass="Body Text">Fixed a lookup problem for expressions inside a conversion or cast with a keyword, such as DWORD( SomeExpression). There were no quick info tips for the expression inside the parentheses for the conversion (#997)</li>
      <li styleclass="Body Text">Fixed an intellisense problem with DATATYPE(&lt;expression&gt;) conversion expressions (#997)</li>
      <li styleclass="Body Text">Fixed a problem with properties declared with the =&gt; symbol in their implementation causing Navigation Bar contents to be incomplete (#1008)</li>
      <li styleclass="Body Text">Fixed several issues with code folding and formatting (#975)</li>
      <li styleclass="Body Text">Fixed problem with typing a comma inside an argument list did not invoke the Parameters Tooltip (#1019)</li>
      <li styleclass="Body Text">Fixed some issues with the detection of variable types for the VAR keyword (#903)</li>
      <li styleclass="Body Text">Fixed an Intellisense problem with typing &quot;:&quot; or &quot;.&quot; inside a string literal (#1021)</li>
      <li styleclass="Body Text">Fixed a problem with unknown identifiers sometimes causing bogus member completion list to show (#1022)</li>
      <li styleclass="Body Text">Pressing CTRL+SPACE in the editor now always invokes a code completion list (#957)</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New Features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added options to insert page and reorder pages in a tabcontrol, in the VOWED (#1024)</li>
      <li styleclass="Body Text">We have updated the WPF Application template. The Main window is now called &#160;&quot;MainWindow&quot;.</li>
      <li styleclass="Body Text">Added the following new settings to the .editorconfig file to set indentation options (#999).</li>
    </list>
    <list id="38" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ; font-family:Symbol; font-size:12pt; color:#000000;">
      <li styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">indent_entity_content (true or false)</text></li>
      <li styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">indent_block_content (true or false)</text></li>
      <li styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">indent_case_content (true or false)</text></li>
      <li styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">indent_case_label (true or false)</text></li>
      <li styleclass="List" style="text-indent:-13px; margin-left:40px; line-height:1.00; tabstops:2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">indent_continued_lines (true or false)</text></li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading1"><text styleclass="Heading2">VOXporter</text></para>
    <list id="39" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The VOXporter now correctly enabled or disables the Allow MEMVAR/Undeclared vars compiler options, if they were enabled in the VO app (#1000)</li>
    </list>
    <para styleclass="Heading1">Changes in 2.11.0.1</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Body Text"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed an internal compiler error with CLIPPER calling convention delegates (#932)</li>
      <li styleclass="Body Text">Fixed an AccessViolationException at runtime with the Null-conditional operator ?. on a usual property (#770)</li>
      <li styleclass="Body Text">[XBase++ dialect] Fixed a problem with parsing method declarations with parentheses (#927)</li>
      <li styleclass="Body Text">[XBase++ dialect] Fixed a problem with parsing the (obsolete in X#) ANNOUNCE and REQUEST statements (#929)</li>
      <li styleclass="Body Text">[XBase++ dialect] Fixed a problem with parsing INLINE ACCESS and ACCESS ASSIGN statements (#926)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with parsing FOR EACH statements containing &quot;M.&quot; variables usage where the variable was not typed in the FOR EACH line (#911) .</li>
      <li styleclass="Body Text">Fixed a problem where the PPO files contains some output twice, when a single UDC was producing several statements (#933)</li>
      <li styleclass="Body Text">Fixed some issues with the &quot;FIELDS&quot; clause in several UDCs (#931, #795)</li>
      <li styleclass="Body Text">Fixed a problem in the preprocessor with parentheses in #xtranslate directives (#963)</li>
      <li styleclass="Body Text">Fixed several more issues with #command and #translate directives (#915)</li>
      <li styleclass="Body Text">In some cases, the compiler would emit code that does not throw a runtime exception, when casting/converting from one type to an incompatible one. This has been fixed (#961, #984)</li>
      <li styleclass="Body Text">The compiler was not reporting narrowing conversion warnings in several cases, this has been fixed (#951)</li>
      <li styleclass="Body Text">The compiler was not reporting signed/unsigned conversion warnings. This has been fixed (#971)</li>
      <li styleclass="Body Text">Fixed a problem that could lead to the &quot;Could not emit module&quot; error message, caused by NULL values inside IIF() expressions(#989)</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-noinit">/noinit</link> to not generate $Init calls for libraries without INIT procedures for the sake of postponed loading (#854) </li>
      <li styleclass="Body Text">Added preprocessor support for <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Stdout">#stdout</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-If">#if</link>. (#912)</li>
      <li styleclass="Body Text">The full contents of #include files is now written to the ppo file (#920)</li>
      <li styleclass="Body Text">When a parser error occurs because an identifier was replaced by a define with the same name, then the compiler will now generate a second warning.</li>
      <li styleclass="Body Text">If a header file contains actual code and this code is called during debugging then the debugger will now step into the header file when debugging this code. <br/>Previously all statements were linked to the #include line from the place where the header was included. (#967)</li>
      <li styleclass="Body Text">When you are suppressing compiler errors with the <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo11">/vo11</link> (Compatible numeric conversion) compiler option you will now see a <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9020">XS9020</link> &quot;narrowing&quot; warning indicating that a runtime error may happen or that data may be lost.</li>
      <li styleclass="Body Text">When you are suppressing conversion errors between signed and unsigned integers with <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo4">/vo4</link> then you will now see as <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9021">XS9021</link> warning indicating that data may be lost or an overflow error may occur.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The source code editor now also supports the new #if and #stdout preprocessor commands &#160;(#912)</li>
      <li styleclass="Body Text">There is new &quot;Lightbulb&quot; option to generate constructors for classes.</li>
    </list>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with specifying custom preprocessor defines in the project properties (#909)</li>
      <li styleclass="Body Text">The VO-style editors now retain existing &quot;CLIPPER&quot; clause to methods/constructors when generating code (#913)</li>
      <li styleclass="Body Text">Fixed incorrect parsing of classes as nested to each other (#939)</li>
      <li styleclass="Body Text">Fixed a problem with using embedded variables in the form of $(SomeName) in the project settings (#928)</li>
      <li styleclass="Body Text">Fixed a problem where deleting items from a project would fail.</li>
      <li styleclass="Body Text">Fixed a problem resolving the DLL produced by project files from other development languages, in particular SDK style C# projects (#950)</li>
      <li styleclass="Body Text">Fixed a problem with quick info tooltip after an unrecognized identifier (#894)</li>
      <li styleclass="Body Text">Fixed a problem with the editor incorrectly adding parentheses after auto typing a property (#974)</li>
      <li styleclass="Body Text">Fixed extremely slow editor response when creating a new line after an #endif directive (#970)</li>
      <li styleclass="Body Text">Fixed some intellisense issues with .Net array types (#569)</li>
      <li styleclass="Body Text">Fixed a problem with the DevExpress DocumentManager control at design time (#976)</li>
      <li styleclass="Body Text">Fixed an ArgumentNullException in the Output window when &quot;Show output from&quot; is set to &quot;Extension&quot; (#940)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added a constructor with IEnumerable to the array class (#943)</li>
      <li styleclass="Body Text">Implemented missing functions AdsSetTableTransactionFree() and AdsGetFTSIndexInfo() (#966)</li>
      <li styleclass="Body Text">Moved functions GetRValue(), GetGValue() and GetBValue() from the Win32API library to XSharp.RT, so they can be used by AnyCPU code (#972)</li>
      <li styleclass="Body Text">[VFP dialect] Implemented function APrinters() (#952)</li>
      <li styleclass="Body Text">[VFP dialect] Implemented function GetColor() (#973)</li>
      <li styleclass="Body Text">[VFP dialect] Implemented functions Payment(), FV() and PV() (#964)</li>
      <li styleclass="Body Text">[VFP dialect] Implemented commands MKDIR, RMDIR and CHDIR (#614)</li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with the ListView TextColor and TextBackgroundColor ACCESSes in the SDK (#896)</li>
      <li styleclass="Body Text">Fixed a problem with soft Seek not respecting order scope when to strict key is found (#905)</li>
      <li styleclass="Body Text">Fixed DBUseArea() search logic for files in various folders. Also SetDefault() is no longer initialized with the current directory (for VO compatibility) (#908)</li>
      <li styleclass="Body Text">Fixed problem with creating dbfs with character fields with length &gt; 255 (#917)</li>
      <li styleclass="Body Text">Fixed a problem with the buffered read system in some cases when a dbf was being read, closed, overwritten and then reopened (#968)</li>
      <li styleclass="Body Text">Fixed a VO compatibility problem with how DBSetIndex() changes the active order when opening index files (#958)</li>
      <li styleclass="Body Text">Fixed a problem with db append, copy etc, when both source and destination files have the same structure and include a memo file (#945)</li>
      <li styleclass="Body Text">Fixed an incorrect result of DBOrderInfo(DBOI_ORDERCOUNT) with a non existing or not open index file (#954)</li>
      <li styleclass="Body Text">[VFP dialect] Added optional parameter to Program( [,lShowSignature default=.f.] ) (#712)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed several issues with the Type() function (#747, #942)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with ExecScriptFast() (#823)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with SQLExec() not putting the record pointer on the first record (#864)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with SQLExec() with null values (#941)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a write error in the buffer returned from SqlExec() (#948)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with the DBFVFP RDD and null columns (#953)</li>
      <li styleclass="Body Text">[VFP dialect] Fixed a problem with SCATTER TO and APPEND FROM ARRAY (#821)</li>
    </list>
    <para styleclass="Heading3">Typed SDK</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with the FileName property of standard open dialogs</li>
      <li styleclass="Body Text">Fixed a problem with a FOREACH inside the Menu constructor causing handled exceptions</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD</text></para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the DBFVFP RDD with the calculation of the keysize of nullable keys (#985)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOXporter</text></para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed incorrectly detecting pointers to functions inside literal strings and comments (#932)</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.10.0.3 </para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Body Text"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed some problems with COPY TO ARRAY command in the FoxPro dialect (#673)</li>
      <li styleclass="Body Text">Fixed a problem with using a System.Decimal type on a SWITCH statement (#725)</li>
      <li styleclass="Body Text">Fixed an internal compiler error with Type() in the FoxPro dialect (#840)</li>
      <li styleclass="Body Text">Fixed a problem with generating XML documentation (#783, #855)</li>
      <li styleclass="Body Text">Prevented a warning from appearing for members of SEALED classes when /vo3 (all members VIRTUAL) is enabled (#785)</li>
      <li styleclass="Body Text">Fixed problems with assigning and comparing &quot;ARRAY OF &lt;type&gt;&quot; vars to NULL_ARRAY (#833)</li>
      <li styleclass="Body Text">Fixed some issues with passing arguments by reference with the @ operator and/or using it as the AddressOf operator (#810, #899, #902)</li>
      <li styleclass="Body Text">Fixed a problem resolving parameters passed by reference with the @ operator when the function/ method had a parameter of the pointer type (#899, #902)</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Added compiler option (</text><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-enforceoverride" style="font-weight:normal; font-style:normal; color:#000000;">-enforceoverride</link><text style="font-weight:normal; font-style:normal; color:#000000;">) to make the OVERRIDE modified mandatory when overriding a parent member (#786, #846)</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler now reports an error when using String2Psz() and Cast2Psz() in a non local context (since such PSZs are being released on exiting the current entity) (#775)</text></li>
      <li styleclass="Body Text"><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text>s and <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text>s now support the <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ASYNC</text> modifier (#853)</li>
      <li styleclass="Body Text">You can now suppress the automatic generation of the $Init1() and $Exit() functions by passing the compiler commandline <br/>option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-noinit">-noinit</link> (#854). This is NOT yet supported in the VS Properties dialog </li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Added support for the </text><text styleclass="Code Example" style="font-weight:bold; color:#ff0000;">ASTYPE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> operator also for USUAL vars (#857)</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Allowed specifying </text><text styleclass="Code Example" style="font-weight:bold; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &lt;type&gt; clause in </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> var declarations (ignored by the compiler, but used by the editor in the future for intellisense) (#853)</text></li>
      <li styleclass="Body Text">The <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text> &lt;datatype&gt; <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OF</text> &lt;classlib&gt; clause is now also supported for several other FoxPro compatible commands, such as PARAMETERS and PUBLIC.<br/>Since these variables are untyped at runtime by nature, the clause is ignored by the compiler and a warning is shown.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Build System</text></para>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Running MsBuild on a X# WPF project could fail (#879)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added Visual Studio integration for </text><text style="font-weight:bold; font-style:normal; color:#000000;">VS 2022</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added support for </text><text style="font-weight:bold; font-style:normal; color:#000000;">Package References</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Now XML comments are automatically inserted in the editor when the user types &quot;///&quot;. (#867, #887) Conditions:</text></li>
      <list id="27" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text"><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">Cursor must be on a line before the start of an entity</text></li>
        <li styleclass="Body Text"><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">Cursor must NOT be before a comment line</text></li>
      </list>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Now the tooltip on a class includes also information about the parent class and implemented interfaces (if any) (#860)</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added tooltips, parameter completion etc for the pseudo functions that are built into the compiler, such as PCount() and String2Psz().</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added a first version of Lightbulb tips. For now to implement missing interface members and to convert a field to a Property. More implementations and configuration options will follow</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added a new dialog to configure source code formatting with visual examples of the effects of the options.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added the ability to log operations of the X# VS integration to the Windows debug window and/or a logfile. </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">If you are experiencing unexplainable problems we will contact you and tell you how to enable these options, so you can send us a log file that shows what happened before a problem occurred inside Visual Studio. We have used Serilog for this.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The Highlight Word feature now is case insensitive and no longer hightlights words that are part of a comment, string or inactive editor region</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added &apos;Brace Completion&apos; to the editor</text></li>
    </list>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed some problems with the Format Document command (#552)</li>
      <li styleclass="Body Text">Fixed several issues with Parameter Tooltips (#728, #843)</li>
      <li styleclass="Body Text">Fixed problem with code completion list showing even for not defined vars/identifiers (#793)</li>
      <li styleclass="Body Text">Fixed member completion and parameter tooltips with chained expressions (#838)</li>
      <li styleclass="Body Text">Fixed recognition of type for VAR locals in some cases (#844)</li>
      <li styleclass="Body Text">Fixed member completion and tooltip info problems with VOSTRUCT vars (#851)</li>
      <li styleclass="Body Text">Fixed a problem with ignoring Line Breaks in XML Comments (#858)</li>
      <li styleclass="Body Text">Fixed some WinForms designer problems with CHAR properties (#859)</li>
      <li styleclass="Body Text">Fixed a problem with Goto Definition not working correctly with SUPER() constructor calls (#862)</li>
      <li styleclass="Body Text">Fixed an error with the Rebuild Intellisense Database command, when the solution contains a space in the path (#865)</li>
      <li styleclass="Body Text">Goto Definition for types from external assemblies was failing when there was more than one copy of VS running at the same time.</li>
      <li styleclass="Body Text">Fixed a problem with a VOSTRUCT some times confusing the parser (#868)</li>
      <li styleclass="Body Text">Fixed some more problems with quickinfo and member completion (#870)</li>
      <li styleclass="Body Text">Fixed a problem in the Windows Forms designer (#873)</li>
      <li styleclass="Body Text">Fixed an intellisense problem with ENUMs using no MEMBER keywords (#877)</li>
      <li styleclass="Body Text">Fixed a member completion problem with inherited exception types (#884)</li>
      <li styleclass="Body Text">If an XML topic had sub elements of type &lt;see&gt; or other these were not shown in the editor. This has been fixed (#900)</li>
      <li styleclass="Body Text">Unbalanced braces were sometimes matched in the editor with keywords. This has been fixed (#892)</li>
      <li styleclass="Body Text">Line separators were sometimes flickering. This has been fixed (#792)</li>
      <li styleclass="Body Text">When parsing for local variables we were not processing the include files. This could lead to a situation where a local that was declared in a conditional block (#ifdef SOMEVAR) was not found. This has been fixed. The editor parser now includes the header files and #defines and #undefines found in the code even when parsing a part of the source file (#893)</li>
      <li styleclass="Body Text">#include lines are now included in the fields/members combobox in the editor (when fields are shown). They are also saved to the intellisense database.</li>
      <li styleclass="Body Text">The editor was trying to show QuickInfo tooltips when the cursor was over an inactive preprocessor region (#ifdef). This no longer happens. </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed DBFCDX corruption that could happen with simultaneous updates (#585)</li>
      <li styleclass="Body Text">Fixed a problem opening FoxPro tables with indexes on nullable fields (#631)</li>
      <li styleclass="Body Text">The BlobGet() function was returning a LOGIC instead of the actual field value (#681)</li>
      <li styleclass="Body Text">Greatly improved speed of index creation with large number of fields in the index expression (#711)</li>
      <li styleclass="Body Text">Fixed some problems with &#160;FieldPutBytes() and FieldGetBytes() (#797)</li>
      <li styleclass="Body Text">DBSeek() with 3rd param (lLast) TRUE had incorrect behavior in some cases (#807)</li>
      <li styleclass="Body Text">Fixed a potential NullreferenceException that could happen when creating indexes (#849)</li>
      <li styleclass="Body Text">Improved indentation in the text produced by the method Error.WrapRawException() (#856)</li>
      <li styleclass="Body Text">Fixed a runtime problem when converting .Net Array &lt;-&gt; USUAL (#876)</li>
      <li styleclass="Body Text">DbInfo() was returning TRUE even when an info enum was not supported.(#886)</li>
      <li styleclass="Body Text">Fixed also a possible DBFNTX corruption problem (#889)</li>
      <li styleclass="Body Text">DbEval() could fail in FoxPro when the codeblock was returning NIL or was VOID (#890)</li>
      <li styleclass="Body Text">Fixed a problem with Softseek and descending indexes.</li>
      <li styleclass="Body Text">Fixed a problem where incorrect scope expressions could lead to unexpected results. Now the server goes to (and stays at) EOF with an incorrect scope.</li>
      <li styleclass="Body Text">Fixed a problem with accessing FoxPro arrays with the parenthesis operators in a macro expression (#805). <br/>Please note that for this to work you have to compile the main program with <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-fox2">/fox2</link></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.9.1.1 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem introduced in 2.9.0.2 with define symbols not respecting the /cs compiler option in combination with the /vo8 compiler option (#816)</li>
      <li styleclass="Body Text">Fixed an internal compiler error with assignment expressions inside object initializers when the /fox2 compiler option is enabled (#817)</li>
      <li styleclass="Body Text">Fixed some problems with DATEs in VOSTRUCTs (#773)</li>
      <li styleclass="Body Text">Fixed a problem in the preprocessor that would occur when using a list rule like <text style="font-weight:bold; font-style:normal; color:#ff0000;">FIELDS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &lt;f1&gt; [,&lt;fn&gt; ] in the middle of a UDC.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem compiling UDCs such as </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CENTURY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &amp;cOn </text>because <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">cOn</text> was not parsed as an identifier but as a keyword.</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">There is a new result marker (the NotEmpty result marker) in the preprocessor that does the same as the regular result marker, but writes a NIL value to the output when the (optional) match marker is not found in the input. </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">This can be used when you want to make the result a part of an IIF() expression in the output, since the sections inside an IIF expression may not be empty.</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">The result marker looks like this: </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&lt;!marker!&gt;</text></li>
      <li styleclass="Body Text">Using a Restricted match marker as the first token in an UDC was not allowed before. This has been fixed. You can now write a rule like this, which will output the keyword (SCATTER, GATHER or COPY) followed by the stringified list of options.</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal;">#command &lt;cmd:SCATTER,GATHER,</text><text style="font-weight:bold; font-style:normal;">COPY</text><text style="font-weight:normal; font-style:normal;">&gt; &lt;*clauses*&gt; =&gt; ? &#160;&lt;&quot;cmd&quot;&gt;, &lt;&quot;clauses&quot;&gt;</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;SCATTER </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TO</text><text style="font-weight:normal; font-style:normal; color:#000000;"> TEST &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// is preprocessed into ? &quot;SCATTER&quot; , &quot;TO TEST&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem introduced in 2.9.0.2 with code generation for WPF projects (#820)</li>
      <li styleclass="Body Text">Fixed a VS freezing problem after building (#819)</li>
      <li styleclass="Body Text">Fixed some problems with code collapsing and the navigation bar for source files that contains a SELF property (#825)</li>
      <li styleclass="Body Text">Fixed a problem with the form designer emitting invalid code when the form prg contains nested classes (#828)</li>
      <li styleclass="Body Text">Fixed a problem with code completion showing the wrong members when opened just left to a closing paren (#826)</li>
      <li styleclass="Body Text">Fixed a VS crash when clicking on a generic class (#827)</li>
      <li styleclass="Body Text">Fixed a problem with the keyword colorization for expressions such as <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CENTURY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &amp;cOn, </text>where <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&amp;cOn</text> was colored in the keyword color.</li>
      <li styleclass="Body Text">Parameter tips for nested function calls required an extra space before the name of the nested function (#728)</li>
      <li styleclass="Body Text">Fixed a problem with the form designer deleting delegates and other nested types in the form.prg (#828)</li>
      <li styleclass="Body Text">The background process to load the types in the ClassView / ObjectView windows was slowing down the VS performance. This has been disabled for now.</li>
      <li styleclass="Body Text">Fixed type lookup for Generic types.</li>
      <li styleclass="Body Text">Hovering the mouse over a constructor keyword was showing a tooltip for the class and not for the constructor. This has been fixed.</li>
      <li styleclass="Body Text">Fixed an issue in the code generator for Windows Forms for literal characters with special values (such as &apos;\0&apos;) (#859)</li>
      <li styleclass="Body Text">Fixed an exception in the project system when the project system was initialized in the background (for example when no X# projects were opened) (#852)</li>
      <li styleclass="Body Text">Fixed missing code completion for the LONGINT and SHORTINT keywords (#850)</li>
      <li styleclass="Body Text">The context menu option &quot;View in Disassembler&quot; is now only shown for X# projects </li>
      <li styleclass="Body Text">Fixed code generator problem with ARRAY OF &lt;type&gt; (#842)</li>
      <li styleclass="Body Text">Fixed a performance problem when clicking on code in the editor (#829)</li>
      <li styleclass="Body Text">Fixed a problem with loading Windows Forms when the lookup of a nested type failed.</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">New features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added a context item to the project context menu in the solution explorer to edit the project file. This will unload the project when needed and then open the file for editing.</li>
      <li styleclass="Body Text">The Rebuild Intellisense Database menu option in the Tools/XSharp menu now unloads the current solution, deletes the intellisense database and reopens the solution to make sure that the database is recreated correctly. </li>
      <li styleclass="Body Text">We have made some changes to the process that parses the source code for a solution in the background.</li>
      <li styleclass="Body Text">Generic Typenames are now stored in the Name`n format in the Intellisense database, for example IList`1 for IList&lt;T&gt;</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">New features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added missing ErrorExec() function (#830)</li>
      <li styleclass="Body Text">Added support for BlobDirectExport, BlobDirectImport, BlobDirectPut and BlobDirectGet (#832)</li>
      <li styleclass="Body Text">Fixed a problem with creating DBF files with custom file extension. Also added support for _SET_MEMOEXT (#834)</li>
      <li styleclass="Body Text">When you do a numeric operation on two USUALs of different types we now make sure that decimal values are no longer lost (#808). For example a LONG + DECIMAL will result in a DECIMAL. <link displaytype="text" defaultstyle="true" type="topiclink" href="USUAL">See the table in the USUAL type page in this help file for the possible return values when mixed types are used.</link></li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading3">Bug Fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with _PrivateCount() throwing an InvalidateOperationException (#801)</li>
      <li styleclass="Body Text">Fixed a problem with member completion in the editor sometimes showing methods of the wrong type (#740)</li>
      <li styleclass="Body Text">Fixed some problems with the ACopy() function (#815)</li>
      <li styleclass="Body Text">Fixed a few issues that were remaining related to DATEs in VOSTRUCTs (#773)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Macro compiler</text></para>
    <para styleclass="Heading3">New features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for the &amp; operator (#835)</li>
      <li styleclass="Body Text">Added support for parameters by reference (both @ and REF are supported) for late bound method calls (#818)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOXporter</text></para>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed problem with incorrectly prefixing PUBLIC declarations with &quot;@@&quot;</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.9.0.2 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The parser now supports class variable declarations and global declarations with multiple types(#709) </li>
    </list>
    <para styleclass="Body Text"><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">EXPORT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> var1 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, var2, var3 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text></para>
    <para styleclass="Body Text"><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">GLOBAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> globalvar1 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, globalvar2, globalvar3 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text></para>
    <list id="40" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">If you are using our parser you should be aware that the ClassVarList rule has disappeared and that the ClassVars, VoGlobal and ClassVar rules have changed.</li>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added a command to fill a foxpro array with a single value</li>
    </list>
    <para styleclass="Body Text"><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">STORE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &lt;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">value</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&gt; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">TO</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ARRAY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &lt;arrayName&gt;</text></para>
    <para styleclass="Body Text"></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When you create a VOSTRUCT or UNION that contains a DATE field, then the compiler will now use the new __WinDate structure that is binary compatible with how DATE values are stored inside a VOSTRUCT or UNION in Visual Objects (#773)</li>
      <li styleclass="Body Text">It is now possible to use parentheses for (instead of brackets) accessing ARRAY elements in the FoxPro dialect. The compiler option /fox2 must be enabled for that to work (#746)</li>
      <li styleclass="Body Text">We have added support (for the FoxPro dialect only) for accessing WITH block expressions inside code of a calling function / method. So you can type .SomeProperty and access the property that belongs to a WITH BLOCK expression inside the calling code. To use this Late Binding must be enabled, since the compiler does not know the type of the expression from the calling code (#811).</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When you use the NEW or OVERRIDE modifier for a method where no (virtual) method in a parent class exists an error will now be generated (#586, #777)</li>
      <li styleclass="Body Text">Fixed a problem with LOGICAL AND and OR for USUAL variables in an array (#597)</li>
      <li styleclass="Body Text">Error messages and Warnings for some compiler generated code (such as Late bound code) were not always pointing to the right line number, but to the first line in the body of the method or function. This has been fixed. (#603)</li>
      <li styleclass="Body Text">Fixed a problem incorrect return values for IIF expressions (#606)</li>
      <li styleclass="Body Text">Fixed a problem in the compiler when parsing multiple method names on a DECLARE METHOD line (#708)</li>
      <li styleclass="Body Text">Fixed a problem in the FoxPro dialect with assigning a single value to an array to fill the array (#720)</li>
      <li styleclass="Body Text">Fixed a problem with the calculation of VOSTRUCT sizes when the structure contained a member of type DATE (734)</li>
      <li styleclass="Body Text">The previous problem caused runtime errors (#735)</li>
      <li styleclass="Body Text">Fixed a problem in code like this (#736)<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">var</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> aLen := ALen(Aarray)</text></li>
      <li styleclass="Body Text">Fixed a compiler crash when overriding CLIPPER method with STRICT for methods with typed return value (#761)</li>
      <li styleclass="Body Text">When the interface implementation had different casing then the definition then an incorrect error message was shown (#765)</li>
      <li styleclass="Body Text">Fixed a compiler crash with incorrect function parameters inside a codeblock (#759)</li>
      <li styleclass="Body Text">Recursive definitions of DEFINEs could result in an infinate loop inside the compiler causing a StackOverflowException(#755)</li>
      <li styleclass="Body Text">Fixed a problem with late bound calls and OUT parameters (#771)</li>
      <li styleclass="Body Text">If you compile with warning level 4 or lower then certain warnings for comparing value types to null are not shown. We have changed the default warning level to 5 now. (#772)</li>
      <li styleclass="Body Text">Fixed a compiler crash with multiple PRIVATE &amp;cVarName statements in the same entity (#780)</li>
      <li styleclass="Body Text">Fixed a problem with possibly corrupting the USUAL NIL value when passing USUAL params by reference (#784)</li>
      <li styleclass="Body Text">Fixed a problem with declared PUBLIC variables getting created as PRIVATE in the FoxPro dialect (#753)</li>
      <li styleclass="Body Text">Fixed a problem with using typed defines as default arguments (#718)</li>
      <li styleclass="Body Text">Fixed a problem with typed DEFINEs that could produce constants of the wrong type (#705)</li>
      <li styleclass="Body Text">Fixed a problem with removing whitespace from #warning and #error directive texts (#798)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">New Features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added several strongly typed overloads for the Empty() function that should result in a bit better performance (#669)</li>
      <li styleclass="Body Text">We have added an event handler to the RuntimeState class. This event handler is called &quot;StateChanged&quot; and expected a method with the following signature:<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;"> Method</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MyStateChangedEventHandler(e </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> StateChangedEventArgs) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/>The StateChangeEventArgs type has properties for the Setting Enum, the OldValue and the NewValue.<br/>You can use this if you have to synchronize the state between the X# runtime and an external app, for example a Vulcan App, VO App or for example (this is where we are using it) with an external database server, such as Advantage.</li>
      <li styleclass="Body Text">We have added a new (internal) type __WinDate that is used when you store a DATE value into a VoStruct or Union. This field is binary compatible with the Julian date that VO stores inside structures and unions.</li>
      <li styleclass="Body Text">We have added an entry to the RuntimeState in which the compiler stores the current /fox2 compiler setting for the main app.</li>
      <li styleclass="Body Text">Added runtime support to support filling FoxPro arrays by assigning a single value. </li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem (incompatibility with VO) in the Descend() function (#779) - <text style="font-weight:bold; color:#ff0000;">IMPORTANT NOTE: If you are using Descend() in dbf index expressions, then those indexes need to be reindexed!</text></li>
      <li styleclass="Body Text">Late bound code that was returning a PSZ value was not correctly storing that inside a USUAL (#603)</li>
      <li styleclass="Body Text">Fixed a problem in the Cached IO that could cause problems with low level file IO (#724)</li>
      <li styleclass="Body Text">The VODbAlias() function now returns String.Empty and not NULL when called on an area where no table is open. (#733)</li>
      <li styleclass="Body Text">Fixed a compatibility problem with the MExec() function (#737)</li>
      <li styleclass="Body Text">The M-&gt; prefix was not recognized correctly inside codeblocks (#738)</li>
      <li styleclass="Body Text">The Explicit DATE -&gt; DWORD cast was returning an incorrect value for NULL_DATE.</li>
      <li styleclass="Body Text">Fixed a problem with late bound calls and OUT parameters (#771)</li>
      <li styleclass="Body Text">Added a new __WinDate type that is used to store DATE values inside a VOSTRUCT or UNION. (#773)</li>
      <li styleclass="Body Text">Fixed several problems with FoxPro arrays</li>
      <li styleclass="Body Text">Removed TypeConstraints on T for functions that manipulate __ArrayBase&lt;T&gt;</li>
      <li styleclass="Body Text">Fixed a problem with Directory() including files that match by shortname but not by longname (#800)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDDs</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When creating a new DBF with the DBFCDX driver an existing CDX file is not automatically deleted anymore (#603)</li>
      <li styleclass="Body Text">Fixed a problem with updating memo contents in DBFCDX (#782)</li>
      <li styleclass="Body Text">Fixed a runtime exception when creating DBFCDX index files with long filenames (#774)</li>
      <li styleclass="Body Text">Fixed a problem with with DBSeek() with active OrderDescend() finding even deleted records</li>
      <li styleclass="Body Text">Fixed a problem with a missing call to AdsClearCallbackFunction() in the ADS RDD in OrderCreate() (#794)</li>
      <li styleclass="Body Text">Fixed a problem with VODBOrdCreate function failing it the cOrder parameter contains an empty string (#809)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Macro compiler</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the Preprocessor</li>
      <li styleclass="Body Text">Added support for parameters passed by reference with the @ operator</li>
      <li styleclass="Body Text">Added support for M-&gt;, _MEMVAR-&gt; and MEMVAR-&gt; prefixes in the macro compiler</li>
      <li styleclass="Body Text">When the Macro compiler finds 2 or more functions with the same name it now uses the same precedence rules that the compiler uses:</li>
      <list id="27" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">Functions in User Code are used first</li>
        <li styleclass="Body Text">Functions in the &quot;Specific&quot; runtimes (XSharp.VO, XSharp.XPP, XSharp.VFP, XSharp.Data) take precedence over the ones inside XSharp.RT and XSharp.Core</li>
        <li styleclass="Body Text">Functions in XSharp.RT take precedence over functions inside XSharp.Core</li>
      </list>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Normal">In this build we have started to use the &quot;Community toolkit for Visual Studio extensions&quot; that you can find on GitHub. This toolkit contains &quot;best practices&quot; for code for VS Extension writers, like we are. As a result more code is now running asynchronously which should result in better performance.</para>
    <para styleclass="Normal">We have also started to remove 32 bit specific code that would become a problem when migrating to VS 2022 which is a 64 bits version if Visual Studio that is expected to ship in November 2021.</para>
    <para styleclass="Heading3">New features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added several new features to the editor</li>
      <list id="27" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">The editor can now show divider lines between entities. You can enable/disable this in the options dialog (#280)</li>
        <li styleclass="Body Text">Keyword inside QuickInfo tooltips are now colored (#748)</li>
        <li styleclass="Body Text">Goto definition now also works on &quot;external&quot; types. The editor generates a temporary file that contains the type information for the external type. In the options dialog you can also control if the generated code should contains comments (as read from the XML file that comes with an external DLL). (#763)</li>
        <li styleclass="Body Text">You can control which keyword is used for PUBLIC visibility from the Tools/Optons menu entry (PUBLIC, EXPORT or No modifier at all)</li>
        <li styleclass="Body Text">You can control which keyword is used for PRIVATE visibility from the Tools/Optons menu entry (PRIVATE or HIDDEN).</li>
      </list>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The various code generators inside VS now follow the capitalization rules from the source code editor.</li>
      <li styleclass="Body Text">The intellisense database now has views that return the unique namespaces in the source code and in the external assemblies</li>
      <li styleclass="Body Text">The X# specific menu points in the Tools menu have been moved to a separate submenut</li>
      <li styleclass="Body Text">Added option for the WinForms designer to generate backup (.bak) files of form.prg and form.designer.prg files when saving (#799)</li>
    </list>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed several problems in the editor:</li>
      <list id="27" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">We have made several improvements to increase the speed inside the editor (#689, #701)<tab /></li>
        <li styleclass="Body Text">Fixed a problem in the type lookup of variables for FOREACH loops (#697)</li>
        <li styleclass="Body Text">Parameter tips were not shown for methods selected from a completion list (#706)</li>
        <li styleclass="Body Text">Keyword case synchronization did not work when the keyword was not followed by a space (#722)</li>
        <li styleclass="Body Text">Goto definition always went to line 1 / column 1 in the file where a function was defined (#726)</li>
        <li styleclass="Body Text">Code completion for Constant members of classes (#727)</li>
        <li styleclass="Body Text">QuickInfo for DEFINES (#730, #739)</li>
        <li styleclass="Body Text">VOSTRUCT Member completion with the &apos;.&apos; operator (#731)</li>
        <li styleclass="Body Text">The ENUM and FUNC keywords are now recognized as identifier and not case synchronized in these cases.(#732)</li>
        <li styleclass="Body Text">Fixed a problem when opening files (#742)</li>
        <li styleclass="Body Text">Fixed parameter tip display for default values NULL, NULL_DATE and NULL_OBJECT (#743)</li>
        <li styleclass="Body Text">Fixes broken parameter tips for constructors (#744)</li>
        <li styleclass="Body Text">Nested classes were not always handled correctly by the intellisense (#745)</li>
        <li styleclass="Body Text">Fixed a problem in the type lookup of variables declared with ARRAY OF &lt;something&gt; (#749)</li>
        <li styleclass="Body Text">The Editor could sometimes &quot;freeze&quot; when the buffer contained invalid code (#751)</li>
        <li styleclass="Body Text">Non-existing namespaces would produce a bogus completion list (#760)</li>
        <li styleclass="Body Text">Fixed an editor exception in some cases when typing invalid code (#791)</li>
      </list>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The code generator for Windows Forms was replacing tab characters with spaces. This has been fixed.(#438)</li>
      <li styleclass="Body Text">Fixed a problem with the Form Designer corrupting code that contains EXPORT ARRAY OF &lt;type&gt;</li>
      <li styleclass="Body Text">Fixed a problem with the Form Designer that when removing an event handler in the editor, some code was deleted (#812)</li>
      <li styleclass="Body Text">Fixed a problem with the Form Designer converting EXPORT, INSTANCE and HIDDEN keywords to PUBLIC and PRIVATE (#802)</li>
    </list>
    <para styleclass="Heading3">VO-Compatible Editors</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Now all VO-compatible editors support full Undo/Redo functionality. Also added cut/copy/paste functionality to the Menu editor</li>
      <li styleclass="Body Text">Fixed several visual problems with VOWED controls in Design and Test mode (#741)</li>
      <li styleclass="Body Text">Fixed a VS crash when Alt-Tabbing out of the editors, with the Properties window having focus (#764)</li>
      <li styleclass="Body Text">Adjusted ComboBoxEx controls to have the same fixed height, as in VO. Also allowed the previous behavior, when the user has manually increased the height by more than 50 pixels, then this height is being used instead (#750)</li>
      <li styleclass="Body Text">Added a bitmap thumbnail for the &quot;Button Bmp&quot; property of the Menu Editor in the Properties Window</li>
      <li styleclass="Body Text">Added support for specifying a Ribbon in the Menu Editor. The ribbon (bitmap) to be used needs to be specified as a filename in the properties of the Menu&apos;s main item (#714)</li>
      <li styleclass="Body Text">Fixed some issues with event code generation in the Window Editor (#441, #46)</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.8.3.15 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">You can now use the .AND. logical operator and .OR. logical operator between variable names or numbers without leading or trailing whitespace (a.AND.b)</li>
      <li styleclass="Body Text">The PRIVATE declaration in the FoxPro dialect no longer allows an initializer.</li>
      <li styleclass="Body Text">Added support for the FoxPro NULL date ( { / / }, { - - } and { . . }) in the FoxPro dialect</li>
    </list>
    <para styleclass="Heading3"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">Bug fixes</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with a DIM array that uses a DEFINE for its dimension (#638)</li>
      <li styleclass="Body Text">Fixed a problem with the FoxPro PUBLIC ARRAY command (The ARRAY keyword is no longer mandatory) &#160;(#662). </li>
      <li styleclass="Body Text">Fixed a problem with DEFAULT(Usual) expressions as parameters for function / method calls (#664)</li>
      <li styleclass="Body Text">Fixed a problem with variables declared with the LOCAL declaration and dimensioned with the DIMENSION command (#683)</li>
      <li styleclass="Body Text">Fixed issue with overloads with the same name in different X# runtime assemblies that manifested itself with problems with FRead()(#686)</li>
      <li styleclass="Body Text">Fixed a problem with passing PRIVATE and PUBLIC memory variables by reference (#691)</li>
      <li styleclass="Body Text">Fixed a problem with PARAMETERS statement (#691)</li>
      <li styleclass="Body Text">Fixed a problem with real numbers (#704) that was caused by the change in handling of .AND. and .OR.</li>
      <li styleclass="Body Text">Fixed a problem parsing the DECLARE METHOD / ACCESS / ASSIGN lines inside class declarations.</li>
      <li styleclass="Body Text">Fixed a problem with truncating results for binary operators (+, -, *, /) for mixed integral types (e.g. int and word)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The _shutdown flag in the Runtime State is now set when the system shuts down.</li>
      <li styleclass="Body Text">Fixed a problem with the FoxPro ALen() function (#650)</li>
      <li styleclass="Body Text">Added default values on several locations (#678)</li>
      <li styleclass="Body Text">Fixed a problem where FRead() on a file opened by an RDD would go into an endless loop (#688)</li>
      <li styleclass="Body Text">Fixed a problem with FieldGet() when the file is at EOF (#698)</li>
      <li styleclass="Body Text">Fixed a scope problem when the scope was empty and a record matching the scope was added in another workarea or by another workstation (#699)</li>
      <li styleclass="Body Text">Fixed a problem with the BOF setting after a Skip(0) (#700)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">MacroCompiler</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:8px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:avoid; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="" style="font-family:Arial; font-size:12pt; font-weight:bold; color:#00a8d2;">New features</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">You can now use the .AND. operator between variable names or numbers without leading or trailing whitespace</li>
      <li styleclass="Body Text">Added support for the FoxPro NULL date ( { / / }, { - - } and { . . }) in the FoxPro dialect</li>
      <li styleclass="Body Text">Strings containing .AND. and .OR. are no longer reformatted by the macro compiler (#694)</li>
      <li styleclass="Body Text"><text styleclass="Normal">We have added an experimental new faster script compiler. This script compiler allows to compile statements, so no functions, classes etc. </text><br/><text styleclass="Normal">This new script compiler is much faster than the existing script compiler and uses a lot less memory. </text><br/><text styleclass="Normal">To call this script compiler use the new function ExecScriptFast() which has the same parameters as ExecScript().</text><br/><text styleclass="Normal">You can compile multiline scripts. The compiler should recognize all statements including PARAMETERS and LPARAMETERS to receive parameters.</text><br/><text styleclass="Normal">If you are using scripts in your code we would love to hear feedback.</text><br/><text styleclass="Normal">An example of code that should work:</text></li>
    </list>
    <para styleclass="Normal" style="margin-left:26px;"><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> ctest </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;cTest := &quot;? &apos;Hello world&apos;&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;ExecScriptFast(cTest)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;cTest :=</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">String</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">.</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">Join</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(e&quot;\n&quot;,&lt;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&gt;{;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;&quot;PARAMETERS a,b,c&quot;,;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;&quot;RETURN CallMe(a,b,c)&quot;})</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;? ExecScriptFast(cTest,1,2,3)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;cTest :=</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">String</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">.</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">Join</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(e&quot;\n&quot;,&lt;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&gt;{;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;&quot;LPARAMETERS a,b,c&quot;,;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;&quot;RETURN CallMe(a,b,c)&quot;})</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;? ExecScriptFast(cTest,1,2,3)</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Exception</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;? e:ToString()</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">wait</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><br/><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> CallMe(a,b,c) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;? &quot;Inside function, parameters received&quot;,a,b,c</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> a+b+c</text></para>
    <para styleclass="Normal" style="margin-left:26px;"><br/>Please test this new functionality and let us know what you think of it.</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Heading3">New Features</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Body Text">&quot;Highlight word&quot; now highlights words in the whole file when the cursor is outside of an entity (for example on the USING statements in the start of the file).</text></li>
    </list>
    <para styleclass="Heading3">Bug Fixes</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with displaying names of custom controls in the toolbox of the VO compatible Windows Editor</li>
      <li styleclass="Body Text">Fixed a problem with extra spaces when loading settings from cavowed.inf for the VO compatible Windows Editor</li>
      <li styleclass="Body Text">Fixed a problem with an incorrect completion list after an assignment statement (#658)</li>
      <li styleclass="Body Text">Fixed an exception in the editor after deleting code (#674)</li>
      <li styleclass="Body Text">Fixed a &quot;freeze&quot; problem in the VS IDE when attaching a file to the shell window (#676)</li>
      <li styleclass="Body Text">Fixed a problem when using dot instead of colon in VO Dialect with AllowDot (#679)</li>
      <li styleclass="Body Text">Fixed a problem with showing a completion list inside class (#685)</li>
      <li styleclass="Body Text">Fixed a performance problem in the editor (#689)</li>
      <li styleclass="Body Text">Fixed a problem with showing function overloads in the editor (#692)</li>
      <li styleclass="Body Text">Fixed a problem with intellisense after a !, .NOT. or other operator (#693)</li>
      <li styleclass="Body Text">Fixed a problem where the incorrect methods were shown in the completion list (#695)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Tools</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed an issue in VOXPorter with resources and the copying to the Resources subfolder</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.8.2.13 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed issues with extension methods that were not marked as STATIC (#660)</li>
      <li styleclass="Body Text">Fixed problem with IIF() expressions that returned an OBJECT and were assigned to a Decimal </li>
      <li styleclass="Body Text">The pragma commands were not checking for the current dialect</li>
      <li styleclass="Body Text">Fixed an exception in the preprocessor</li>
      <li styleclass="Body Text">The FoxPro LOCAL ARRAY was not generating a LOCAL variable but a PRIVATE variable.</li>
      <li styleclass="Body Text">Functions in XSharp.RT that are overridden in XSharp.VO, XSharp.VFP or XSharp.RT will no longer generate a warning. The version that is not in XSharp.RT will have preference</li>
      <li styleclass="Body Text">Enumerating a USUAL variable in a FOREACH loop will now call a runtime function that returns the ARRAY inside the USUAL or throws an error otherwise </li>
      <li styleclass="Body Text">Implicit conversions from OBJECT -&gt; NUMERIC are now supported when /vo7 is enabled. </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Enumerating a USUAL variable in a FOREACH loop will now call a runtime function that returns the ARRAY inside the USUAL or throws an error otherwise (#246)</li>
      <li styleclass="Body Text">Fixed a problem creating index with an Eval block and 0 records (#619)</li>
      <li styleclass="Body Text">Fixed an incompatibility with the ALen() function and array handling compared to FoxPro (#642)</li>
      <li styleclass="Body Text">We have fixed some issues in FoxPro AIns() function (#650)</li>
      <li styleclass="Body Text">We have added a ShowFoxArray() function that will be automatically called when you call ShowArray() on a FoxPro array (650)</li>
      <li styleclass="Body Text">Added support for OClone()</li>
      <li styleclass="Body Text">The _Quit() function now closes all databases and then kills the current running process (#665)</li>
      <li styleclass="Body Text">Fixed a problem with DbOrderInfo (#666)</li>
      <li styleclass="Body Text">Fixed a problem with the unary minus operator for currency values (#670)</li>
      <li styleclass="Body Text">Fixed a problem in the Integer function when a Currency value was sent in (#671)</li>
      <li styleclass="Body Text">We have added an implementation of MemCheckPtr() (#677)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading1"><text styleclass="Heading2">Macro compiler</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem calling functions after a new assembly was loaded with Assembly.Load()</li>
      <li styleclass="Body Text">Added support for passing variables by references (not yet for functions with Clipper calling convention) (#653)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VO SDK</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in GetObjectByHandle() in the GUI Classes(#677)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed an exception on the Build Options page inside VS (#654)</li>
      <li styleclass="Body Text">The project system did not write back the right property for the XML documentation generation (#654)</li>
      <li styleclass="Body Text">Intellisense could crash in header files (#657)</li>
      <li styleclass="Body Text">We have added #defines and user defined commands (#command, #translate) to the members combobox in the editor as members of the global type. You can now also do a Goto definition on a value defined with #define.</li>
      <li styleclass="Body Text">We have fixed a problem with member completion for enums (656)</li>
      <li styleclass="Body Text">We have fixed a problem with the Windows Forms Editor that could happen if another VS extension had loaded an older version of Mono.Cecil (#661)</li>
      <li styleclass="Body Text">Code completion was not showing instance members when the project option &quot;Allow dot&quot; was enables (#679)</li>
      <li styleclass="Body Text">The &quot;header&quot; new item template had a .VH extension. This has been changed to .XH</li>
      <li styleclass="Body Text">Fix a crash in the VO Compatible windows editor that happened with an incorrect CAVOWED.INF</li>
      <li styleclass="Body Text">Code completion inside parentheses for a method or function call was not working correctly</li>
      <li styleclass="Body Text">Improved Build Speed in Visual Studio when no files are changed (#675)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Tools</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">VO Xporter was generating 2 lines in the .xsproj file for the output folder (#672)</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.8.1.12 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed issues with interpolated strings (#598, #622):</li>
      <list id="27" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">The script compiler now correctly sets the AllowDot compiler option from the current active dialect in the runtime (Core &amp; FoxPro: AllowDot = true)</li>
        <li styleclass="Body Text">When compiling with DOT(.) as instance method separator then the &quot;:&quot; character is used inside interpolated strings to prefix the format string. </li>
        <li styleclass="Body Text">When compiling with COLON (:) as instance method separator then the colon can not be used to separate expressions from the format string inside interpolated strings. In that case we now support a double colon (::) between the expression and the format string. For example</li>
      </list>
    </list>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> num </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">num := 42</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? i&quot;num = {num::F2}&quot; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this diplays </text><text style="font-weight:normal; font-style:normal; color:#000000;">num</text><text style="font-weight:bold; font-style:italic; color:#339966;"> with 2 decimals</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">You can now use DATE fields inside VOSTRUCT and UNION (#595)</li>
      <li styleclass="Body Text">Fixed an assertion error &apos;UnconvertedConditionalOperator&apos; (#616)</li>
      <li styleclass="Body Text">Fixed an assertion error in the compiler when the namespace &quot;xsharp&quot; is used (#618)</li>
      <li styleclass="Body Text">Fixed an &quot;failed to emit&quot; problem for methods defined in COM assemblies with default arguments and arguments passed by reference (#626)</li>
      <li styleclass="Body Text">Fixed a problem with the handling of default parameters and method calls (#629)</li>
      <li styleclass="Body Text">Fixed a problem where the _SizeOf() operator was not calculating the right size for a VOSTRUCT (#635). <br/>Please note that _SizeOf() can only be calculated at compile time when your application is compiled for x86 or x64 mode. When compiling for AnyCpu we will be calculating _SizeOf() at runtime.</li>
      <li styleclass="Body Text">Fixed a problem where the &quot;IS Pattern&quot; was not always working correctly for variables of type USUAL (#636)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Implemented the FoxPro Evl() function (#389)</li>
      <li styleclass="Body Text">DbCloseArea() was returning TRUE even when no area was open. This was incompatible with VO. We are returning FALSE now.(#611)</li>
      <li styleclass="Body Text">Macro compiler was not able to find functions in assemblies that were loaded dynamically (#607)</li>
      <li styleclass="Body Text">When a DBF file was opened &quot;readonly&quot; and then an index was created, then a runtime error would happen when the file was closed, because the RDD was trying to set the &quot;production index&quot; flag in the DBF header. This flag is no longer set for files that are opened &quot;readonly&quot; (#610)</li>
      <li styleclass="Body Text">Fixed an exception (that was caught) inside DbOrderInfo(DBOI_KEYCOUND) (#613)</li>
      <li styleclass="Body Text">Fixed a problem with the Workareas debug window (#625)</li>
      <li styleclass="Body Text">DbOrderInfo() was returning incorrect values when an index was not abailable (#627)</li>
      <li styleclass="Body Text">Fixed a problem with TransForm() and symbol arguments (#628)</li>
      <li styleclass="Body Text">Fixed a problem with the StrZero function (#637)</li>
      <li styleclass="Body Text">Fixed a problem with the AELement() function (#639)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD System</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with indexes on workareas/cursors created with the SqlExec() function when the index expression contained &quot;nullable&quot; fields (#630)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Macrocompiler</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The macro compiler had problems finding functions that were inside an assembly that was loaded later (#607)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fix problem with saving dialect from General Page </li>
      <li styleclass="Body Text">Quick info and Goto definition were not working for members inside the same class when they were not prefixed with SELF:</li>
      <li styleclass="Body Text">Fix code completion for nullable types with the &apos;?&apos; syntax (#567)</li>
      <li styleclass="Body Text">Methods combobox was not correctly synchronized (#602)</li>
      <li styleclass="Body Text">Todo comments were not always parsed correctly, They were also included when they were part of another word or when they were not the first word on the line. This has been fixed.(#617)</li>
      <li styleclass="Body Text">Fix problem that &quot;warnings as errors&quot; was not saved from the Build properties page (#621)</li>
      <li styleclass="Body Text">Fix problems that would start occurring after editor window was split (#641)</li>
      <li styleclass="Body Text">After selecting a member of type &quot;Assign&quot; from the completion list the editor was incorrectly inserting a &apos;(&apos; character (#643)</li>
      <li styleclass="Body Text">Typing &apos;(&apos; on the declaration line of an entity (function, method) would trigger parameter completion. This has been fixed.(#643)</li>
      <li styleclass="Body Text">Parameter tips were not shown for Constructor calls (#645)</li>
      <li styleclass="Body Text">Completion list was incorrectly including static members (#646)</li>
      <li styleclass="Body Text">QuickInfo for external types was not including &quot;AS Type&quot; for the parameters (#647)</li>
      <li styleclass="Body Text">Fixed a problem when resolving parser options for a project that was not yet completely loaded (#649)</li>
      <li styleclass="Body Text">Local variables were not always recognized with their correct type in the editor (#651)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Installer</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The installer was adding an incorrect version of XSharp.CodeAnalysis.dll to the Global Assembly Cache. This has been fixed.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.8.0.0 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Heading3">General</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have migrated to the latest version of the Roslyn source code.</li>
      <li styleclass="Body Text">Passing a typed variable by reference to a function/method with clipper calling convention (untyped parameters) was not updating the local variable. This has been fixed.</li>
      <li styleclass="Body Text">Using the @ operator in a program in the VO Dialect when the /vo7 compiler option is NOT enabled could generate code that produces an error &quot;Cannot be boxed&quot;. (#551)</li>
      <li styleclass="Body Text">The generated code for NULL_PSZ and NULL_SYMBOL has been optimized (#398)</li>
      <li styleclass="Body Text">The generated VoStructAttribute on structures and unions had the wrong size when an element with the PSZ type was used. This has been fixed.</li>
      <li styleclass="Body Text">Fixed an internal compiler error when converting NULL to LOGIC</li>
      <li styleclass="Body Text">The _SIZEOF() operator will generate a constant now for VOSTRUCTS and UNIONS. (#545)</li>
      <li styleclass="Body Text">Using a keyword as field name could cause problems. For example FIELD-&gt;NEXT was not handled properly. The compiler now allows that. Of course you can also use the @@ prefix to tell the compiler that in a particular case you do not mean the keyword but an identifier.</li>
    </list>
    <list id="41" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Parenthesized expression that contained an expression list were not compiled correctly. This has been fixed. <br/>This could happen when you wanted to have more than one expression as part of an IIF() expression.<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;"> &#160; LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> l </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOGIC</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> v </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; l := TRUE &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; v := &quot;abcd&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">iif</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> (l, (v := Upper(v), Left(v,3)), (v := Lower(v), Left(v,4))) &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><br/>Since Roslyn (the C# compiler) does not allow an expression list inside a conditional expression, we are converting the parenthesized expression now to a function call to a local function. The expressions inside the Parenthesized expression become the body of the new local function and the compiler calls the generated local function.</li>
      <li styleclass="Body Text">The compiler now warns if you call a Function in a class that has a member with the same name. For example</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Test</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Left(sValue </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;">, nLen </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">DWORD</text><text style="font-weight:normal; font-style:normal; color:#000000;">) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &quot;Test&quot;</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ToString() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Left(&quot;abc&quot;,2) &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// This will generate a warning that the function Left() is called and not the method Left(). </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// if you want to call the method you will have to prefix the call with SELF:</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text></para>
    <para styleclass="Heading3">New language features</para>
    <list id="42" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support for <text style="font-weight:bold;">LOCAL FUNCTION</text> and <text style="font-weight:bold;">LOCAL PROCEDURE</text> statements. <br/>These functions and procedures become part of the statement list of another function, procedure, method etc. They have the following restrictions:</li>
      <list id="42" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">A <link displaytype="text" defaultstyle="true" type="topiclink" href="command_LOCAL-FUNCTION">LOCAL FUNCTION</link>&#32;<text style="font-weight:bold;">must be </text> terminated with END FUNCTION, a LOCAL PROCEDURE must be terminated with END PROCEDURE</li>
        <li styleclass="Body Text">The full &quot;signature&quot; of normal functions is supported, so Parameters, Return type, Type Parameters and Type Parameter constraints.</li>
        <li styleclass="Body Text">They cannot have Attributes (they are not compiler into methods but in a special kind of Lambda expression)</li>
        <li styleclass="Body Text">The only valid Modifiers for a local function are UNSAFE and ASYNC </li>
        <li styleclass="Body Text">Because they cannot have Attributes, we also do not support untyped parameters, so all parameters must be typed</li>
        <li styleclass="Body Text">If you need a local function with a variable number of parameters then you can define default parameter values or use a PARAMS array</li>
        <li styleclass="Body Text">Local functions can access local variables from its surrounding code. Roslyn creates a special structure where it stores the variables that are shared between the local function and its surrounding code.</li>
      </list>
    </list>
    <para styleclass="Body Text"></para>
    <list id="42" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Code Example" style="margin-top:0px; margin-bottom:0px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Code Example" style="margin-top:0px; margin-bottom:0px;"><text styleclass="Body Text">Added support for </text><text styleclass="Body Text" style="font-weight:bold;">Expression bodied members</text><text styleclass="Body Text">. Expression body definitions let you provide a member&apos;s implementation in a very concise, readable form. You can use an expression body definition whenever the logic for any supported member, such as a method or property, consists of a single expression. An expression body definition has the following general syntax:</text><br/>MEMBER =&gt; expression<br/><text styleclass="Body Text">An expression-bodied method consists of a single expression that returns a value whose type matches the method&apos;s return type, or, for methods that return void, that performs some operation. For example, types that override the ToString method typically include a single expression that returns the string representation of the current object.</text><br/><text styleclass="Body Text">An example of this could be</text></li>
    </list>
    <para styleclass="Code Example" style="margin-top:0px; margin-bottom:0px; margin-left:50px;"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> MyClass</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ToString() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;"> =&gt; &quot;My Class&quot;</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><br/><br/><text styleclass="Body Text">The result of this code is exactly the same as</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> MyClass</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ToString() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &quot;My Class&quot;</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><br/></para>
    <para styleclass="Code Example" style="margin-top:0px; margin-bottom:0px;"><text styleclass="Body Text">So you could say that the =&gt; operator replaces the RETURN keyword.</text></para>
    <para styleclass="Code Example" style="margin-top:0px; margin-bottom:0px;"></para>
    <list id="42" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Code Example" style="margin-top:0px; margin-bottom:0px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Code Example" style="margin-top:0px; margin-bottom:0px;"><text styleclass="Body Text">We have added support for the </text><text styleclass="Body Text" style="font-weight:bold;">Null Coalescing Operator</text><text styleclass="Body Text"> (??) like C# has as well as the Null Coalescing assignment operator (??=). </text><br/><text styleclass="Body Text">This operator does a check for != null. The operator will only work on Reference types so not on value types like USUAL, DATE and the built-in types like INT.</text></li>
    </list>
    <para styleclass="Code Example" style="margin-left:50px;"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s := </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">NULL</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">s := s </text><text style="font-weight:bold; font-style:normal; color:#000000;">??</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &quot;abc&quot; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// The ?? is the Null Coalescing Operator</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">s </text><text style="font-weight:bold; font-style:normal; color:#000000;">??=</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &quot;abc&quot; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// This is the same as the line before but compacter</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? s</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><br/><text style="font-weight:bold; font-style:italic; color:#339966;">// So this will not compile</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i := 0 </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">i := i ?? 42 &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Operator &apos;??&apos; cannot be applied to operands of type &apos;int&apos; and &apos;int&apos;</text><br/><text style="font-weight:bold; font-style:italic; color:#339966;">// But this will compile</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i := </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">NULL</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text><text style="font-weight:normal; font-style:normal; color:#000000;">? &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Nullable LONG</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">i := i ?? 42 &#160; &#160; &#160;</text></para>
    <list id="42" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Code Example" style="margin-top:0px; margin-bottom:0px; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Code Example" style="margin-top:0px; margin-bottom:0px;"><text styleclass="Body Text">We have added support for the </text><text styleclass="Body Text" style="font-weight:bold;">Properties with INIT accessors</text><text styleclass="Body Text">. These accessors allow you to assign a value to a property but only in the constructor. The property will be read only outside of he constructor of the class / structure.</text></li>
      <li styleclass="Body Text">We have added a new compiler option <text style="font-weight:bold;">/enforceself</text>. When this option is used then all calls to instance methods inside a class must be prefixed with SELF (or SUPER). In the FoxPro dialect THIS is supported too. Please note that some generated code, such as inside the Windows Forms editor does not use SELF: and applying this compiler option may force you to change the generated code, or may force you to add an #pragma options(&quot;enforceself&quot;, disable) to the code to disable the option for that file.</li>
      <li styleclass="Body Text">We have added a new compiler option <text style="font-weight:bold;">/allowdot</text>. With this option you can control if the DOT (&quot;.&quot;) operator is allowed to be used to access instance members. The default for the Core and FoxPro dialect is /allowdot+. The default for the other dialects is /allowdot-. You can also use this with a #pragma: #pragma options(&quot;allowdot&quot;, enable)</li>
      <li styleclass="Body Text">XML comments in the source code no longer require fully qualified cref names (#467)</li>
    </list>
    <para styleclass="Heading3">Preprocessor</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The preprocessor now automatically declares a match marker with the name <text style="font-weight:bold;">&lt;udc&gt;</text>. This match marker will contain all the tokens that were matched with the UDC by the preprocessor. This can be used for example to add the original source as string to the result:<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#command </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INSERT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTO</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &lt;*dbfAndFields*&gt; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FROM</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">MEMVAR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> =&gt; __FoxSqlInsertMemVar(&lt;&quot;udc&quot;&gt;)</text></li>
      <li styleclass="Body Text">Wildcard markers (such as the dbfAndFields marker in the previous bullet) now can also appear in the middle of a UDC. They will continue to match until the first token after the Wildcard marker (in the above example the FROM keyword) is found.</li>
      <li styleclass="Body Text">The standard header files (from the XSharp\Include folder) are now also included in the compiler as resource. When the file is missing then these files will be loaded from the resource.</li>
      <li styleclass="Body Text">The preprocessor was not generating macros for __FOX2__ . This has been fixed (but it is now obsolete, see the FoxPro dialect)</li>
      <li styleclass="Body Text">When wildcard tokens are included with a stringify result marker then the white space between these tokens is correctly included in the output of the UDC.</li>
    </list>
    <para styleclass="Heading3">FoxPro dialect</para>
    <list id="43" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The feature to allow parentheses as array delimiters for the FoxPro dialect that was added in the previous build had too many side effects. We have removed this feature for now. You have to use bracketed array arguments again.</li>
    </list>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The /fox2 compiler option is no longer needed (and ignored by the compiler). <br/>The compiler now checks to see if a runtime function is marked <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_Internal_NeedsAccessToLocalsAttribute.htm" domain="XSharpRef.chm">NeedsAccessToLocalsAttribute</link>, which is defined in the XSharp.Internal namespace.<br/>If the compiler finds a function that is marked with this attribute, such as the <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Functions_Type.htm" domain="XSharpRef.chm">Type()</link> function or the <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_VFP_Functions_SqlExec.htm" domain="XSharpRef.chm">SQLExec</link>() function then it will add some code before and after the function call to allow these functions to access the locals on the stack. This will only happen if the /memvar compiler option is enabled and only in the FoxPro dialect. <br/>The <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_Internal_NeedsAccessToLocalsAttribute.htm" domain="XSharpRef.chm">NeedsAccessToLocalsAttribute</link> has a mandatory parameter which indicates if a function is expected to write to the locals or only read the locals.<br/>When the function is expected to write to locals then the compiler will generate extra code after the call to make sure that the locals are updated when needed. </li>
    </list>
    <list id="43" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added a standard header file for the FoxPro embedded SQL statements. This header file should parse embedded SQL but will output warnings that the embedded SQL is not yet supported.</li>
      <li styleclass="Body Text">We have added the FoxPro array support, with a special subtype of the Array type in the runtime and support for DIMENSION and (Re)DIMENSION and filling arrays by assigning a single value. (#523)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">General</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with the return value of FSeek() and FSeek3()</li>
      <li styleclass="Body Text">AsHexString() and AsString() were not displaying the same result for PTR values as Visual Objects.</li>
      <li styleclass="Body Text">Fixed a problem with SetScope() for the DBFCDX RDD when the previous scope was empty. (#578)</li>
      <li styleclass="Body Text">Adjusted the Secs() function to make it more Visual Objects compatible.</li>
      <li styleclass="Body Text">The enumerator for Array and Array Of now returns an enumerator for a clone of the internal data, to prevent runtime errors when you are modifying the array from within your code.</li>
      <li styleclass="Body Text">The various Xbase types (DATE, FLOAT, CURRENCY, BINARY, ARRAY, USUAL etc.) are now marked with a [Serializable] attribute and implement ISerializable. They all work fine with the BinaryFormatter() classes, since that class not only stores the values but also the values in the stream. Most of the types also work with the JsonSerializer, however not all of values can be correctly deserialized with the Json serializers. (#529)</li>
      <li styleclass="Body Text">The CompareTo() operator on the Date type was not sorting the values correctly because it was making an incorrect assumption about the memory layout of the elements in the structure. This has been fixed.</li>
      <li styleclass="Body Text">We have made some changes in the error handling for functions such as DbUseArea() and DbSkip(). They were not always behaving the same as Visual Objects when an error occurs (for example when a file could not be opened). We have now also added an error handler similar to the default error handler in Visual Objects with a dialog that has the Abort, Retry and Ignore buttons. The Retry button is only enabled when the error object has the property &quot;CanRetry&quot; set to TRUE. (#587, #594)</li>
      <li styleclass="Body Text">Fixed Val() incompatibility with string that has more than one decimal place (#572)</li>
      <li styleclass="Body Text">Fixed a problem with comparing dates &quot;in reverse&quot; (#543)</li>
      <li styleclass="Body Text">We have added a couple of functions that bring up dialogs to display the current open workareas, settings, globals and private and public memory variables. See <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Debugger_Functions_DbgShowGlobals.htm" domain="XSharpRef.chm">DbgShowGlobals</link>(), &#160;<link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Debugger_Functions_DbgShowWorkareas.htm" domain="XSharpRef.chm">DbgShowWorkareas</link>(), <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Debugger_Functions_DbgShowMemVars.htm" domain="XSharpRef.chm">DbgShowMemvars</link>() and <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Debugger_Functions_DbgShowSettings.htm" domain="XSharpRef.chm">DbgShowSettings</link>()</li>
    </list>
    <para styleclass="Heading3">RDD system</para>
    <list id="44" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">DbCommit and DbCommitAll were failing when a workarea is opened Read only. This has been fixed. (#554)</li>
      <li styleclass="Body Text">When FoxPro CDX file has more than one tag and one of the tags has an invalid index expression (for example a missing closing parenthesis, which was accepted by Visual Objects) then the RDD system did not open the CDX at all. We now open the CDX with the exception of the tag with the corrupted index expression. (#542)</li>
      <li styleclass="Body Text">Added support for Advantage GUID and Int64 columns. GUIDs are returned as string and INT64 as INT64. We have also added some missing DEFINE values from the ACE header file.</li>
      <li styleclass="Body Text">Fixed a problem with incorrect negative Lock Offsets in the DBFNTX driver.</li>
      <li styleclass="Body Text">We have fixed several &quot;exotic&quot; problems with index &quot;information&quot; (KeyCount, KeyNo) etc. with indexes with Scopes, Descending indices etc. (#423, #578, #579, #580, #582, #583, #593, #599)</li>
      <li styleclass="Body Text">Fixed problems when opening MEMO files (Fpt and DBT) from different threads and different workstations (#577)</li>
      <li styleclass="Body Text">We have fixed a locking and corruption problem that could occur when 2 stations were frequently writing to the same CDX file. (#575, #592)</li>
      <li styleclass="Body Text">Improved Locking Speed when a lock fails. (#576)</li>
      <li styleclass="Body Text">SetOrder(0) was not working for ADS tables (#570)</li>
      <li styleclass="Body Text">Changed several method prototypes for ADS to have the correct IN / OUT modifiers (#568)</li>
    </list>
    <para styleclass="Heading3">Macro Compiler</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the FoxPro dialect assigning a value to an expression in the form of <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">VariableName.PropertyName</text></li>
      <li styleclass="Body Text">The X# macro compiler was allowing to reference GLOBAL and DEFINE values in macros. This made the compiler incompatible with VO and this would cause problems when indexing on a field with the same name as a GLOBAL or DEFINE. The support to reference GLOBALs or DEFINEs has been removed from the macro compiler. (#554)</li>
      <li styleclass="Body Text">The Macro compiler had a problem with a variable name was surrounded with parentheses. It was seeing that as a typecast. This has been fixed. (#584)</li>
    </list>
    <para styleclass="Heading3">Visual Objects SDK</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added some missing defines to the Win32APILibrary assembly, such as DUPLICATE_SAME_ACCESS.</li>
      <li styleclass="Body Text">DbServer:Filter was sometimes returning NIL instead of an empty string (#558)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading3">VO Dialect</text></para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support for SysObject (#596)</li>
    </list>
    <para styleclass="Heading3">Xbase++ dialect</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with XPP Collation tables that was introduced in 2.7</li>
    </list>
    <para styleclass="Heading3">FoxPro dialect</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added the <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_Internal_NeedsAccessToLocalsAttribute.htm" domain="XSharpRef.chm">NeedsAccessToLocalsAttribute</link> for the /fox2 compiler option</li>
      <li styleclass="Body Text">Adjusted the code that exposes the values of LOCAL variables to functions such as Type() and SqlExec().</li>
      <li styleclass="Body Text">Several functions have been marked with the new attributes so they will be able to &quot;see&quot; local variables.</li>
      <li styleclass="Body Text">Added an overload of TransForm() with a single argument.</li>
      <li styleclass="Body Text">Fixed a problem with the SQLExec() function and sql statements that contain a &quot;:&quot; (colon) character.</li>
      <li styleclass="Body Text">We have added the Bit..() functions (thanks Antonio)</li>
      <li styleclass="Body Text">We have added CapsLock(), NumLock() and InsMde (hanks Karl-Heinz)</li>
      <li styleclass="Body Text">We have improved the FoxPro array code (#523)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">Runtime Scripting</para>
    <para styleclass="Normal">This build introduces Runtime Scripting through the ExecScript() function. At this moment you will have to include the Full macro compiler (XSharp.MacroCompiler.Full.dll) and its support DLLs (XSharp.Scripting.dll , XSharp.CodeAnalysis.dll ) if you use Runtime scripting, </para>
    <para styleclass="Normal">We are working on a light weight version of the Runtime Scripting which will be included in one of the next builds.</para>
    <para styleclass="Normal">See the topic <link displaytype="text" defaultstyle="true" type="topiclink" href="Runtime-Scripting">Runtime Scripting</link> for more information.</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Normal">The Visual Studio integration in this build no longer supports Visual Studio 2015. Only Visual Studio 2017 and 2019 are supported.</para>
    <para styleclass="Heading3">General</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">New code templates in a subfolder were generated with a namespace name that starts with &quot;global::&quot;. This has been fixed.</li>
      <li styleclass="Body Text">Added support for LOCAL FUNCTION and LOCAL PROCEDURE.</li>
      <li styleclass="Body Text">Adding an item from the Class template in a folder prefixed the namespace with &quot;global::&quot;. This has been fixed.</li>
      <li styleclass="Body Text">When the intellisense database file on disk was corrupted then an error occurred. Now the file is deleted and all code information is collected again.</li>
      <li styleclass="Body Text">The Editor options in the Tools/Options dialog are now marked with &quot;X#&quot; and no longer with &quot;XSharp&quot;.</li>
      <li styleclass="Body Text">We have added a window under Tools/Options where you can set several values for our VO compatible editors, such as the grid size, paste offset etc. Look for X# in the tools options dialog.(#279, #440)</li>
      <li styleclass="Body Text">We have added 2 new options to the formatting options for the editor: &quot;Trim Trailing Whitespace&quot; and &quot;Insert Final Newline&quot;</li>
      <li styleclass="Body Text">Loading a MsTest project did not always work. The project file for MsTest projects will be adjusted when opening the project. (#563)</li>
      <li styleclass="Body Text">We have added support for t4 templates (text files with a .tt extension containing scripts to generate code) </li>
      <li styleclass="Body Text">Adding an existing &#160;.resx file did not make it a child of a parent form.prg (#197)</li>
      <li styleclass="Body Text">The project property dialogs have been completely redesigned.</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">Source code editor</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Longer QuickInfo tooltips are now shown over multiple lines to make them easier to read.</li>
      <li styleclass="Body Text">Refactored the &quot;type lookup&quot; code to improve the speed of the source code editor</li>
      <li styleclass="Body Text">Member completion in the source code editor was not always working for variables declared with the VAR keyword where there were nested curly braces and/or parentheses. (#541, #560)</li>
      <li styleclass="Body Text">Fixed a problem with member completion for project references (#540)</li>
      <li styleclass="Body Text">Fixed an exception when uncommenting a block of lines when one of the lines in the block was an empty line.</li>
      <li styleclass="Body Text">We have added support for .editorconfig files. <link displaytype="text" defaultstyle="true" type="topiclink" href="_EditorConfig-files">See the chapter about .editorconfig files </link>in the documentation file.</li>
      <li styleclass="Body Text">Collapsing the last entity om the editor did not work correctly (#564)</li>
      <li styleclass="Body Text">Fixed a problem with syntax highlighting after line continuation comments(#556)</li>
      <li styleclass="Body Text">Added parameter completion for delegates (#581)</li>
      <li styleclass="Body Text">Fixed a problem with certain cyrillic characters in QuickInfo tooltips (#504)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">Code generator</para>
    <list id="45" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Character literals are now always prefixed with the &apos;c&apos; prefix and values &gt; 127 are written in Hex notation to make sure they work in all codepages.</li>
    </list>
    <para styleclass="Heading3">Windows Forms Editor</para>
    <list id="45" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have fixed several issues with DevExpress controls.</li>
      <li styleclass="Body Text">Fixed a problem with a control that has the same name as a X# keyword (#566)</li>
      <li styleclass="Body Text">Fixed a problem with a control that has a property of type DWORD (#588)</li>
      <li styleclass="Body Text">Fixed a problem with the code generation for character literals (#550)</li>
      <li styleclass="Body Text">The .designer.prg no longer has to have the &quot;INHERIT FROM &quot; clause. (#533)</li>
    </list>
    <para styleclass="Heading3">Object Browser</para>
    <list id="45" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Goto definition was not working when you had performed a search first (#565)</li>
    </list>
    <para styleclass="Heading3">VO Compatible Forms editor</para>
    <list id="46" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support in the WED for correctly visually displaying custom controls that do not have the expected control class inheritance defined</li>
      <li styleclass="Body Text">Fixed a problem with custom controls in cavowed.inf not recognized that are not data aware</li>
      <li styleclass="Body Text">Added support for Cloning Windows (#508)</li>
      <li styleclass="Body Text">Fixed a problem with the display of Checkboxes (#573)</li>
      <li styleclass="Body Text">Fixed a problem with the code generation (#553)</li>
      <li styleclass="Body Text">There is a menu option in Tools/Options to set several settings (#279, #440)</li>
    </list>
    <para styleclass="Heading3">Debugger</para>
    <list id="46" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The debugger now fully supports 64 bits debugging</li>
      <li styleclass="Body Text">Added support for the new type names for CURRENCY and BINARY</li>
    </list>
    <para styleclass="Heading3">Templates</para>
    <list id="46" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have made adjustments to several VS item templates and project templates (#589)</li>
      <li styleclass="Body Text">We have added a new X# t4 template (.tt file)</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.7.0.0 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <para styleclass="Heading3">General</para>
    <list id="27" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with Nullable types that were missing an explicit cast for an assignment</li>
    </list>
    <list id="47" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with calling a parent constructor in a class hierarchy where a parent level was being skipped and the constructor for the grandparent was called instead.</li>
    </list>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The /usenativeversion commandline option was not checking +/- switches. This has been fixed.</li>
      <li styleclass="Normal" style="line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text styleclass="Body Text">Fixed a problem with PCall() and PCallNative() in source files with an embedded DOT in the filename (my.file.prg)</text></li>
      <li styleclass="Normal" style="line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text styleclass="Body Text">We have added a new header files to the files in the XSharp\Include files that helps to add custom User Defined Commands or defines that you want to include in every project. This file (CustomDefs.xh) will be automatically include by our XSharpDefs.xh.</text><br/><text styleclass="Body Text">The default contents of this file is just some comments. </text><br/><text styleclass="Body Text">The installer will NOT overwrite the file in this folder and will not delete it when the product is uninstalled.</text><br/><text styleclass="Body Text">You can choose to customize this file in the Include folder under Project Files. However you can also add a file with the same name to your project folder or to a common include folder for your project/solution. That last location allows you to keep the header file under source code control with the rest of your source code.</text></li>
    </list>
    <para styleclass="Heading3">FoxPro dialect</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The compiler now allows a M Dot (M.) prefix in LOCAL, PRIVATE and PUBLIC declarations. (<text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> m.Name</text><text styleclass="Normal" style="font-family:Calibri; vertical-align:baseline; color:#000000;">)</text></li>
      <li styleclass="Body Text">The compiler now also accepts parentheses as array delimiters in the Foxpro Dialect <text styleclass="Normal" style="font-family:Calibri; vertical-align:baseline; color:#000000;">(</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">aMyArray(1,2</text><text styleclass="Normal" style="font-family:Calibri; vertical-align:baseline; color:#000000;">))</text></li>
      <li styleclass="Body Text">The compiler now allows (and ignores) <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Type </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Classlib</text> clauses for PRIVATE, PUBLIC, PARAMETERS and LPARAMETERS declarations.</li>
    </list>
    <list id="49" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Support for TO keyword in CATCH clause of TRY CATCH</li>
      <li styleclass="Body Text">Added support for the ASSERT command and SET ASSERT</li>
    </list>
    <list id="50" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for SET CONSOLE and SET ALTERNATE</li>
      <li styleclass="Body Text">Assignments to macros with a single equals operator were not working (<text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &amp;myVar = 42</text>). This has been fixed.</li>
      <li styleclass="Body Text">Added support for zero length binary literals (0h)</li>
    </list>
    <para styleclass="Heading3">Build System</para>
    <list id="51" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added a project property to control if RC4005 errors (duplicate defines) should be suppressed for the Native Resource compiler</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <para styleclass="Heading3">General</para>
    <list id="52" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">IsMethod() now returns TRUE for overloaded methods.</li>
      <li styleclass="Body Text">AbsFloat() was &quot;losing&quot; the settings for # of decimal places. This has been fixed.</li>
      <li styleclass="Body Text">Binary:ToString() was using single digit numbers for binary values &lt; 15. This has been fixed.</li>
      <li styleclass="Body Text">Added an implicit operator to assign a usual to a binary.</li>
      <li styleclass="Body Text">Added an implicit conversion for USUAL values that contain an integer to an Intptr.</li>
      <li styleclass="Body Text">Some low level functions now set the OS error number &#160;FERROR_EOF when operations fail, just like in VO.</li>
      <li styleclass="Body Text">Exceptions in late bound code were not always showing the correct location where the error occurred. This has been fixed.</li>
      <li styleclass="Body Text">We have added support for DataSessions. The list of open workareas/cursors in the runtime is now called &quot;DataSession&quot; (the old name Workareas is still available).<br/>You can have multiple datasessions. You can also swap the &quot;active&quot; DataSession in the RuntimeState with a new method SetDataSession on the RuntimeState class.<br/>FoxPro databases are opened in their own datasession.<br/>You can inspect the open DataSessions in the debugger by adding the watch expression: <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">XSharp.RDD.DataSession.Sessions</text><br/>Each DataSession is associated with a Thread. When the Thread is stopped or aborted then the DataSession will be closed, which also closes all of its tables. <br/>At program shutdown all DataSessions are closed including their tables. This is done through an AppDomain:ProcessExit event handler.</li>
      <li styleclass="Body Text">Low level File IO functions (including the RDD system) that open a file in Exclusive mode now use &quot;buffered IO&quot;. This should result in faster performance.</li>
      <li styleclass="Body Text">The (undocumented) functions to convert a Stream from/to a MemoryStream have been removed. This is replaced with the buffer I/O from the previous bullet.</li>
      <li styleclass="Body Text">We have added System.Enum types for the FoxPro CursorProperties, DatabaseProperties and SQLProperties. </li>
      <li styleclass="Body Text">We have added a <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_RDD_DatabasePropertyCollection.htm" domain="XSharpRef.chm">DatabasePropertyCollection</link> type. This type is used to add &quot;additional&quot; properties to Fields, such as the DBF fields for FoxPro tables. </li>
    </list>
    <para styleclass="Heading3">Terminal API</para>
    <list id="52" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support for Alternate files. <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">ALTERNATE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">TO</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> SomeFile.txt. </text>Also<text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">SET ALTERNATE ON</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text>and<text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;"> ALTERNATE OFF</text></li>
      <li styleclass="Body Text">The <link displaytype="text" defaultstyle="true" type="topiclink" href="command_QUESTION">? statement</link> now respects the sessions for Set Console and Set Alternate . </li>
      <li styleclass="Body Text">We have added support for the <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">COLOR</text> command. Only the fist color in the settings is used and the blink attribute is ignored and interpreted as &quot;highlight&quot;. For example <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">COLOR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">TO</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> w+/b</text></li>
      <li styleclass="Body Text">We have added a <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ff0000;">CLEAR SCREEN</text> command</li>
    </list>
    <para styleclass="Heading3">FoxPro dialect</para>
    <list id="53" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added an Assert dialog</li>
      <li styleclass="Body Text">Added support for DBC files. This includes the SET DATABASE to commands, DbGetProp() and reading properties for files that are part of a database without explicitly opening the database first. DbSetProp() does not do anything yet. Also functions like DbAlias() and similar have been implemented.</li>
      <li styleclass="Body Text">The Runtime now works with DataSession object. The DBC files are opened in their own datasession as well of the files per thread. Each datasession has a list of open tables and a unique list of aliases and cursor/workarea numbers.</li>
      <li styleclass="Body Text">AutoIncrement columns in cursors returned by SqlExec() now have a numbering scheme that starts with -1 and subtracts 1 for every new row added.</li>
    </list>
    <list id="52" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Several settings needed for the FoxPro dialect have been added to the <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_Set.htm" domain="XSharpRef.chm">Set Enum</link>.</li>
    </list>
    <para styleclass="Heading3">Macro Compiler</para>
    <list id="54" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Until now the macro compiler was producing runtime codeblocks that take an array of objects and return an object return value. There was a class in the runtime that wrapped this and took care of usual -&gt; object conversion for the parameters and for object-&gt; usual conversion of the return value. This caused a problem when macros were returning a NIL value because that was converted to NULL_OBJECT.<br/>The reason for the OBJECT API is that the macro compiler needs to be used in the Core dialect (in the RDD system) and this dialect does not support the USUAL type.<br/>We have now added a new <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_IMacroCompilerUsual.htm" domain="XSharpRef.chm">IMacroCompilerUsual</link> interface in the XSharp.RT assembly that allows you to compile a string into a codeblock that supports USUAL arguments and a USUAL return value. The macro compiler now supports both this interface as well as the &apos;old&apos; interface. As a result you may see a (very small) performance improvement when compiling macros. </li>
      <li styleclass="Normal">Calling Altd() and _GetInst() inside a macro was not supported. This has been fixed.</li>
      <li styleclass="Normal">The macro compiler was reporting an error when you had overridden a built-in function in your own code. We have now implemented a default <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_MacroCompilerResolveAmbiguousMatch.htm" domain="XSharpRef.chm">MacroCompilerResolveAmbiguousMatch </link> delegate in the runtime that now gives preference to functions that are defined in your code over functions in our code.</li>
      <li styleclass="Normal">When choosing between 2 overloads of a method or function the Macro compiler now chooses the method with a USUAL parameter over a method without a USUAL parameter</li>
      <li styleclass="Normal">Fixed a problem with calling functions/methods with a parameter by reference or an out parameter</li>
      <li styleclass="Normal">Added support for the CURRENCY and BINARY types to the macro compiler.</li>
    </list>
    <para styleclass="Heading3">RDD System</para>
    <list id="55" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Exclusive DBF access now works in &quot;buffered&quot; mode which should make it a lot faster</li>
      <li styleclass="Normal">Internally the RDDs now work with the Stream objects, which makes it a bit faster.</li>
      <li styleclass="Normal">Fixed a problem when updating a key in an index where many duplicate key values existed.</li>
      <li styleclass="Normal">Removed duplicate Foxpro &quot;machine&quot; collations for several codepages, since they were all the same.</li>
      <li styleclass="Normal">For VFP compatible DBF files with field names &gt; 10 characters you can now use the short (10 char) or the full fieldname to retrieve the values.</li>
      <li styleclass="Normal">The DBFVFP driver now uses the built in DBC support in the runtime to read &quot;extended&quot; properties for DBF files. These properties are the longer fieldname, but also the Caption etc. When a DBFVFP table is used as datasource for a <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_DbDataSource.htm" domain="XSharpRef.chm">DbDataSource</link> or <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_DbDataTable.htm" domain="XSharpRef.chm">DbDataTable</link> and when this data source is assigned to a Grid then the columns headers in the Grid should show the Captions from the DBC.</li>
      <li styleclass="Normal">DBF files with an empty codepage byte are now opened as DOS - US just like in VO and Vulcan.</li>
      <li styleclass="Normal">GoTop(), GoBottom() and other operations were failing for when a DBFCDX/DBFVFP area was a child in a SetRelation and when the previous parent value was resulting in an &quot;empty&quot; resultset. </li>
      <li styleclass="Normal">We have added structures and functions for the ADS Management API to the RDD assembly.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="56" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">When creating a new VO compatible UI form in the VS IDE you can now clone an existing form.</li>
      <li styleclass="Normal">Fixed some problems with custom controls in the VO compatible form editor.</li>
      <li styleclass="Normal">Fixed several problems in the Windows Forms editor for the code parsing and code generation for DevExpress controls</li>
      <li styleclass="Normal">Solutions with &quot;flavored&quot; projects (such as MsTest projects) were not always opened correctly. An exception could occur.</li>
      <li styleclass="Normal">We have added an (internal) property FieldValues() to the workarea class that allows you to inspect the fieldnames and their values for the current record in the debugger. To see the current workarea in the debugger you have to add a watch expression: <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">XSharp.RuntimeState.DataSession.CurrentWorkarea</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Added Project property to set the new flag to suppress RC4005 (duplicate defines) errors for the resource compiler.</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.6.1.0 (Cahors)</para>
    <para styleclass="Normal">This is a bug fix release with fixes for some issues found in 2.6.0.0</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed problems with passing typed variables by reference to late bound code and to untyped constructors</li>
      <li styleclass="Body Text">Fixed an internal compiler error in code where a define containing a logic was cast to a byte <br/> &#160; <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">BYTE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">_CAST</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, LOGICDEFINE)</text>.<br/>Of course this is code that should be avoided at all times, but unfortunately even the VO SDK is full of code like this..<br/>The example above should be written as <text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IIF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(LOGICDEFINE, 1,0)</text> for example. The compiler will see that the define is constant and will replace that code with either 1 or 0.</li>
      <li styleclass="Body Text">The compiler was not recognizing <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">$.50</text> as a valid Currency literal (because the 0 is missing). This is now accepted.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Updated the code in the runtime that handles late bound calls to improve the handling of parameters by reference</li>
      <li styleclass="Body Text">Fixed a problem in late bound code when accessing properties such as fInit, dwFuncs and dwVars in the OleAutoObject class</li>
      <li styleclass="Body Text">Added operator TRUE and operator FALSE to the Usual type</li>
      <li styleclass="Body Text">Calling Val() with a NULL_STRING could cause an exception. This has been fixed.</li>
      <li styleclass="Body Text">String properties returned by DbDataTable() and DbDataSource() are now trimmed with the TrimEnd() method of the string class.</li>
      <li styleclass="Body Text">Added a DbTableSave() function to save changes in a DbDataTable to the current workarea.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Opening and upgrading project files that are under Scc could sometimes cause problems. This has been fixed</li>
      <li styleclass="Body Text">Fixed a regression introduced in 2.6.0.0. causing the task list to no longer be updated.</li>
      <li styleclass="Body Text">Opening a solution that referenced X# projects that do not exist on disk could cause an exception. This has been fixed.</li>
      <li styleclass="Body Text">Opening a X# Project file that is not part of a solution could also cause an exception. This has been fixed. We&apos;ll assume the project is part of a solution file in the same folder as the project and with the same name (but different extension) as the project.</li>
      <li styleclass="Body Text">The project system no longer makes backup files of projects that are updated. We assume you&apos;re all making backups yourself or using some kind of SCC system.</li>
      <li styleclass="Body Text">Fixed a regression that caused the VS Tasklist not to work for X# projects.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.6.0.0 (Cahors)</para>
    <para styleclass="Normal"><text style="font-weight:bold; font-style:italic;">Please note that there are some breaking changes in this build. </text><br/><text style="font-weight:bold; font-style:italic;">Therefore the Assembly version number of the Runtime Components has been changed and you will need to recompile all your code and you need new versions of 3rd party components!</text></para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The compiler was ignoring a (USUAL) cast. This has been fixed.</li>
      <li styleclass="Body Text">When the compiler detects a TRY .. ENDTRY without CATCH and FINALLY then it automatically adds a CATCH class that catches all exceptions silently. This was already the case, but we now generate a warning <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9101">XS9101</link> when this happens.</li>
      <li styleclass="Body Text">Passing parameters by reference with an @ sign was not working correctly for late bound method calls. This has been fixed.</li>
      <li styleclass="Body Text">Compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo15">vo15</link> and compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo16">vo16</link> can now also be set with a <link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Pragma-Options">#pragma</link></li>
      <li styleclass="Body Text">When /vo16 (Automatically generate Clipper calling convention constructors) was enabled then the compiler was also adding constructors to classes that are marked with the [COMImport] attribute. This has been fixed.</li>
      <li styleclass="Body Text">Currency literals ($12.34) were not compiled into the Currency type but were stored as System.Double. This has been fixed.</li>
      <li styleclass="Body Text">Fixed a problem with automatic version number generation for version numbers that are specified as <text styleclass="Code Example">[assembly: AssemblyVersion (&quot;1.0.*&quot;)] </text><text styleclass="Normal">or</text><text styleclass="Code Example"> [assembly: AssemblyVersion (&quot;1.0.0.*&quot;)].</text><br/>If you are building with the /deterministic compiler option then an error message <link displaytype="text" defaultstyle="true" type="topiclink" href="XS8357">XS8357</link> is shown.</li>
      <li styleclass="Body Text">Fixed a problem when passing a single USUAL argument to a constructor with a parameter array.</li>
      <li styleclass="Body Text">Fixed a problem when calling an overloaded method in a class tree where one level has a parameter of one type and another level the same method name but a parameter of another type and when there is an implicit typecast from the one type to the other (like between Date and Datetime, or between String and Symbol). The compiler now first looks to see if there is an overload with exactly the same type and where there is not then it looks for overloads for which the argument can be passed with an implicit conversion.</li>
      <li styleclass="Body Text">The __CastClass() pseudo function can now be used to box a usual into an object or to unbox a usual from an object.<br/>__CastClass(USUAL, &lt;objectValue&gt;) unboxes the usual that is inside the object.<br/>__CastClass(OBJECT, &lt;usualValue&gt;) boxes the usual into an object.</li>
      <li styleclass="Body Text">The &lt;usualValue&gt; IS SomeType VAR &lt;newVariableOfTypeSomeType&gt; clause was boxing the Usual into the Object before assigning it to the new variable instead of extracting the object from the usual. This has been fixed.</li>
      <li styleclass="Body Text">Late bound assignments (such as <text styleclass="Code Example" style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">obj.&amp;prop = &quot;Jack&quot;) </text>were failing when the assignment operator was a single equals character. This has been fixed.</li>
      <li styleclass="Body Text">Aliased Expressions such as SomeArea-&gt;(SomeExpression()) were returning an error on the incorrect source code line when SomeArea was not open. This has been fixed.</li>
      <li styleclass="Body Text">We have added support for the BINARY type and BINARY Literals. See the topics about <link displaytype="text" defaultstyle="true" type="topiclink" href="BINARY">binaries</link> and <link displaytype="text" defaultstyle="true" type="topiclink" href="Binary-Literals">binary literals</link> in the documentation.</li>
      <li styleclass="Body Text">Expressions such as <br/><tab /><text styleclass="Code Example" style="font-size:12pt;">LOCAL dwDim := 512 IS DWORD</text><text style="font-size:12pt;">&#32;</text><br/>were parsed as and compiled into <br/><tab /><text styleclass="Code Example" style="font-size:12pt;">LOCAL dwDim := (512 IS DWORD) AS USUAL</text><br/>As a result dwDim contained a USUAL with a LOGICAL value.<br/>This has been fixed and this code will now throw an error that DWORD variables cannot be declared with the IS keyword. <br/>This also happens for GLOBAL variables and Class Variables.</li>
      <li styleclass="Body Text">We have added a MatchLike preprocessor token to match expressions that contain wildcard characters, such as in the UDC<br/>SAVE ALL LIKE a*,*name TO SomeFileName.<br/>The token to use for MatchLike is <text styleclass="" style="font-family:Hack; font-size:11pt; font-weight:bold; color:#000000;">&lt;%name%&gt;</text></li>
      <li styleclass="Body Text">Added support for pattern matching (WHEN clauses) in TRY .. CATCH statements, such as in the example below. The WHEN keyword is positional, so it can also be used as a variable name like in the example.</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Test </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">local</text><text style="font-weight:normal; font-style:normal; color:#000000;"> when := 42 </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">long</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">THROW</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Exception{&quot;FooBar&quot;}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Exception </text><text style="font-weight:bold; font-style:normal; text-decoration:underline; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; text-decoration:underline; color:#000000;"> e:Message == &quot;Foo&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Foo&quot;, when, e:Message</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Exception </text><text style="font-weight:bold; font-style:normal; text-decoration:underline; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; text-decoration:underline; color:#000000;"> e:Message == &quot;Bar&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Bar&quot;, when, e:Message</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> when == 42</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;No Foo and No Bar&quot;, when</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <list id="57" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for pattern matching and filters for SWITCH statements. We support both the &quot;Identifier AS Type&quot; clause as well as the &quot;WHEN expression&quot; filter clause, like in the examples below</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo := 42</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> iValues := &lt;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;{1,2,3,4,5}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">FOREACH</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">IN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> iValues</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SWITCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 1 &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// This is now called the &apos;constant pattern&apos;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;One&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 2 </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo == 42 &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Filter with a constant pattern</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Two and Foo == 42&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 2 </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Two&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 3 </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Three&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 4</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Four&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">OTHERWISE</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Other&quot;, i</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SWITCH</text></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;"> &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> oValues := &lt;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">OBJECT</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;{1,2.1,&quot;abc&quot;, &quot;def&quot;, TRUE, FALSE, 1.1m} </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">FOREACH</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> o </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">in</text><text style="font-weight:normal; font-style:normal; color:#000000;"> oValues</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SWITCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> o</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> i </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Pattern matching</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Long&quot;, i</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> r8 </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">REAL8</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Pattern matching</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Real8&quot;, r8</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s == &quot;abc&quot; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Pattern matching with filter</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;String abc&quot;, s</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Pattern matching</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;String other&quot;, s</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CASE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> l </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOGIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">WHEN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> l == TRUE &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Pattern matching with filter</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? &quot;Logic&quot;, l</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">OTHERWISE</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; ? o:GetType():FullName, o</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SWITCH</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">NEXT</text></para>
    <list id="58" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Please note that the performance of these patterns and filters is just like normal IF statements or DO CASE statements. <br/>The difference is that the compiler checks for duplicate CASE expressions so you are less likely to make mistakes.</li>
      <li styleclass="Body Text">We have added support for the <text style="font-weight:bold;">IN </text>parameter modifier. This declares a parameter that is a REF READONLY parameter. You could consider to use this when passing large structures to methods or functions. Instead of passing the whole structure then the compiler will only pass the address of the structure which is 4 bytes or 8 bytes depending on if you are running in 32 bits or 64 bits. <br/>We are planning to use this in the X# runtime for functions that accept USUAL parameters which should give you a small performance benefit (Usual variables are 16 bytes in 32 bits mode and 20 bytes when running in 64 bit mode).</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="59" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Error messages in Late Bound code were not always showing the error causing the exception. We now retrieve the &quot;inner most&quot; exception so the message shows the first exception that was thrown.</li>
      <li styleclass="Body Text">We have added runtime state settings for Set.Safety and Set.Compatible and the functions for SetCompatible and SetSafety</li>
    </list>
    <list id="60" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">A UDC used to save and restore workareas for various Db..() functions was incorrect, causing the wrong area to be selected after the function call. This has been fixed.</li>
    </list>
    <list id="59" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The VFP MkDir() function has been added.</li>
      <li styleclass="Body Text">Fixed a problem in late bound IVarGet() / IVarPut() when a subclass of a type implements only the Getter or the Setter and the parent class implements both.</li>
    </list>
    <list id="61" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added a IDynamicProperties interface and added an implementation of this on the XPP DataObject, VFP Empty and VO OleAutoObject classes. This interface is used to optimize late bound access to properties in these classes.</li>
      <li styleclass="Body Text">An Exception in OleAutoObject.NoMethod was not forwarded &quot;as is&quot; but as an argument exception.</li>
    </list>
    <list id="60" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The Select() function now behaves differently in the FoxPro dialect to be compatible with FoxPro (no exception is thrown when the alias that is passed does not exist)</li>
      <li styleclass="Body Text">When an Error object is created from an exception then the innermost exception is used for the error information.</li>
      <li styleclass="Body Text">The casing of the Default() function has changed.</li>
      <li styleclass="Body Text">We have added a new XSharp.__Binary type. See the compiler topic above for more information.</li>
      <li styleclass="Body Text">We have added the CLOSE ALL UDC to dbcmd.xh as synonym for CLOSE DATABASES.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD System</text></para>
    <list id="59" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the Advantage RDD for the ADSADT driver when field names were &gt; 10 characters.</li>
      <li styleclass="Body Text">In the Advantage RDD the EOF, BOF and FOUND flags for tables that are a child in a relation were not properly set. This has been fixed.</li>
      <li styleclass="Body Text">In the FoxPro dialect the &apos;AutoOrder&apos; behavior has changed. In this dialect no longer the first order in the first index is selected. The index file is opened but the file stays in natural order and when opening the file the cursor is positioned on the record number 1.</li>
      <li styleclass="Body Text">When exporting to CSV and SDF there was an exception for empty dates. This has been fixed.</li>
      <li styleclass="Body Text">When an CDX is opened for which one of the order expressions could not be compiled (because a function is missing) then previously the complete CDX was ignored. Now the other tags are opened succesfully. The RuntimeState.LastRddError property will contain an Exception object that contains the error message for the tag that failed to open.</li>
      <li styleclass="Body Text">The calculation of Index keys for fields of type &quot;I&quot; (in the DBFVFP driver) was incorrect. This has been fixed.</li>
      <li styleclass="Body Text">Fixed a problem with the OrdDescend() function/</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed a problem in the VS parser for default expressions in parameter lists</li>
      <li styleclass="Normal">Parameters for external methods/functions were not always showing the right &quot;As&quot;/&quot;Is&quot; modifiers</li>
      <li styleclass="Normal">The location on the QuickInfo tooltip is now shown on its own line inside the tooltip.</li>
      <li styleclass="Normal">Fixed a problem where the XML tooltips or parameter tips for the first member in a XML file were not shown.</li>
      <li styleclass="Normal">We have made a change to the project file format (see comment below). All project files will be updated when opened with this build of X#. </li>
      <li styleclass="Normal">Improved the speed of closing a solution inside Visual Studio.</li>
      <li styleclass="Normal">The project system will no longer try to update SDK style project files. </li>
      <li styleclass="Normal">When looking for a method such as Foo.SomeMethod() the codemodel sometimes returned a method Bar.SomeMethod(). <br/>This was leading to problems when opening forms in the Windows Forms editor. This has been fixed.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VO Compatible editors</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Code generated from the VO Compatible editors now preserves the INTERNAL or other modifiers as well as IMPLEMENTS clauses for classes.</li>
      <li styleclass="Normal">We have fixed the display of &quot;LoadResString&quot; captions in PushButton controls</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Foxpro commands</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We have added support for several new Foxpro compatible commands:</li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_CLOSE">CLOSE ALL</link></li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="Command_SCATTER">SCATTER</link></li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="Command_GATHER">GATHER</link></li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_COPY_TO_ARRAY">COPY TO ARRAY</link></li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="Command_APPEND_FROM_ARRAY">APPEND FROM ARRAY</link></li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_COPY_TO_FoxPro">COPY TO</link> &#160;SDF|CSV|DELIMITED|FOXPLUS|FOX2X</li>
      <li styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_APPEND_FROM_FoxPro">APPEND FROM</link> SDF|CSV|DELIMITED|FOXPLUS|FOX2X</li>
      <li styleclass="Normal">All variations support a fields list, FIELDS LIKE or FIELDS EXCEPT clause and the relevant commands also support the MEMO and BLANK clauses.</li>
    </list>
    <list id="63" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Not all variations from COPY TO and APPEND FROM are supports, such as copying to excel and sylk</li>
      <li styleclass="Normal">The Database and name clause in the COPY TO command are ignored for now as well as the CodePage clause</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Build System</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We have prepared the X# Build System to work with SDK type projects that are used by .Net 5 and .Net Core. See the topic below for what this means for the project files.</li>
      <li styleclass="Normal">Please note that the source code for the Build System has been moved to the Compiler repository on GitHub, since the build system is also needed for automated builds that run outside of Visual Studio.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Changes to project files</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We are now no longer deploying our MSBuild support to a folder inside each VS version separately but we are only deploying it once in a folder inside the XSharp installation folder. <br/>The installer sets an environment variable XSharpMsBuildDir which points to that folder. As a result all project files will be updated when opened with this version of X#. </li>
    </list>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The change that we make is that the macro &quot;$(MSBuildExtensionsPath)\XSharp&quot; is replaced with &quot;$(XSharpMsBuildDir)&quot; which is an environment variable that points to the location of the X# MsBuild support files on your machine. If you are running X# on a build server you can set this environment variable in your build scripts when needed. </li>
      <li styleclass="Normal">The installer automatically adds this environment variable and points it to the &lt;XSharpDir&gt;\MsBuild folder.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.5.2.0 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When a define contains an expression that contains the _Chr() function with a value &gt; 127 then a warning is generated about possible code page differences between the development machine and the end users machine</li>
      <li styleclass="Body Text">Fixed an issue where a define was defined as PTR(_CAST,0) &#160;and this define was also used as a default value for a function/method. </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="59" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Calling IsAccess, IsAssign and similar methods on a NULL_OBJECT was causing an exception. This has been fixed.</li>
      <li styleclass="Body Text">EmptyUsual now also works for the type OBJECT</li>
      <li styleclass="Body Text">When a float division was returning an Infinite value then no divide by zero exception was generated. This has been fixed.</li>
      <li styleclass="Body Text">When a parameter is skipped in a late bound call, and when that parameter has a default value, then we will now use the default value instead of NIL</li>
      <li styleclass="Body Text">The default value of the 5th parameter (uCount) of StrTran() was &quot;only&quot; 65000 replacements. The default value now takes care of replacing all occurences.</li>
      <li styleclass="Body Text">The variable name passed to NoIVarGet() and NoVarPut() is now converted to Uppercase.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD System</text></para>
    <list id="59" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with skipping forward when a Scoped Descending Cdx was at Eof()</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOSDK</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Several DbServer methods were calling a method to write changes before the correct workarea was selected. This was an old bug originating in VO and has been fixed.</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Looking up XML documentation was sometimes not working in VS 2019. This has been fixed.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">ClassView and Objectview are working &quot;somewhat&quot; now. This needs to be improved.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Improved the loading of so called &quot;Primary Interop Assemblies&quot;</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed a problem in the Type and Member dropdown bars in the editor window</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Improved the renaming of controls when applying copy/paste in the VO Compatible window editor.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The X# toolbar for the VO Window editor is now automatically visible when the VO Window editor is opened</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The position and size of the property window and toolbox of the VO Window editor (and the other VO Editors) is now saved between sessions of Visual Studio.</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Build System</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The generated XML files were generated in the project folder and not in the intermediate folder. This has been fixed.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Documentation</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The [Source] links were missing for most topics. This has been fixed.</li>
      <li styleclass="Normal">Corrected some docs</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.5.1.0 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">no changes to the compiler in this build (it is still called 2.5.0.0)</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">(VO Compatibility) Fixed a VO compatibility issue for arrays . Accessing an single dimensional array with an index with 2 dimensions now returns NIL and does not generate an exception. This is stupid but compatible.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">(VO Compatibility) Comparing a usual with a numeric value with a symbol no longer generates an exception. The numeric value is now casted to a symbol and that symbol is used for the comparison.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">(XPP compatibility) Accessing a USUAL variable with the index operator (u[1]) is not allowed for usuals containing a LONG. This will return TRUE or FALSE and is a simple way to check if a bit is set.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The Literals for &quot;DB&quot; and &quot;CR&quot; are now stored in the resources and may be changed for other languages.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Added some optimizations to the support code for late binding</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="62" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Reading type information for external assemblies would fail when the external assembly contained 2 types for which the names were only different in case.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The entity parser did not recognize GET and SET accessors that were prefixed with a visibility modifier (PROTECTED SET)</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The entity parser did not recognize ENUM members that did not start with the MEMBER keyword</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Added support for the Visual Studio Task Window. Source code comments containing the words TODO or HACK (this is configurable in the Tools/Options window) are now added to the Task List. These tasls are persisted in the intellisense database, so all tasks are immediately visible after opening a solution without (re)scanning the source files.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed a problem in the Type and Member lookup for the WIndows Forms editor</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed a problem in the VS debugger where we were subtracting one from index operators for arrays and collections. This was not correct (obviously).</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Build System</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">The file name of the generated XML file was derived from the project file name instead of the output assembly name. This has been fixed.</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.5.0.0 (Cahors)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">#pragma lines that were followed by incorrect syntax would &quot;eat&quot; the incorrect syntax causing entire methods to be excluded from compilation. This has been fixed.</li>
      <li styleclass="Body Text">Multiline compile time codeblocks in a method /function with a VOID return type were not being compiled correctly. This has been fixed.</li>
      <li styleclass="Body Text">The compiler now allows to type the parameters in a codeblock. Since the codeblock definition requires parameters of type USUAL this gets transformed by the compiler. The parameters will still be of type USUAL, but inside the codeblock a local variable of the proper type will be allocated. So this compiles now</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; { | s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">string</text><text style="font-weight:normal; font-style:normal; color:#000000;">, i </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">int</text><text style="font-weight:normal; font-style:normal; color:#000000;">| s:SubString(i,1) }</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The code to fill in missing parameters was causing problems when passing parameters to COM calls (Word Example from Peter Monadjemi)</li>
      <li styleclass="Body Text">Fixed a problem passing an IntPtr, Typed pointer of the address of a VOSTRUCT to a function that accepts an object. </li>
      <li styleclass="Body Text">We have added code to add an integer value to a PSZ, which results in a new PSZ that starts at a relative location in the original PSZ. No new buffer is allocated.</li>
      <li styleclass="Body Text">We have fixed a problem with complex collection initializers.</li>
      <li styleclass="Body Text">Chr() and _Chr() with an DEFINE as argument, such as _Chr(ASC_TAB) were not properly resolved by the compiler.</li>
      <li styleclass="Body Text">The compiler was not properly parsing the syntax <text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> MyVar[123]. This has been fixed.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Some special characters (such as the Micro Character, U+00B5) were not recognized by the compiler as valid identifiers. We have now adopted the same identifier rules that C# uses.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Passing a pointer or PSZ in a value of type OBJECT is now handled by &quot;boxing&quot; the variable. So a NULL_PTR is no longer passed as NULL_OBJECT but as an object containing an IntPtr.Zero value. </text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler now allows to store IntPtr.Zero to a constant variable</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler now allows to embed quotes inside a string by writing double quotes. So this works:</text></li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">? &quot;Some String that has an embedded &quot;&quot; character&quot;</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">When you declare a MEMVAR with the same name as a function, the compiler will now have no problem anymore resolving the function call. Please note that you HAVE to declare the memvar for this resolution to work.</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">For example</text></li>
    </list>
    <para styleclass="Body Text"><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">MEMVAR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Test</text><br/><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">Test := 123 &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// assign to the memory variable</text><br/><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">Test(Test) &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// call the function &apos;Test&apos; with the value of &apos;Test&apos;</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Test(a)</text><br/><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">? a</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> a</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading2">Common Runtime</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The Workareas class no longer has an array of 4096 elements, but uses a dictionary to hold the open RDDs. This reduces the memory used by the runtime state.</li>
      <li styleclass="Body Text">Fixed a problem in the WrapperRDD class</li>
      <li styleclass="Body Text">OrdSetFocus() now returns the previous active tag as STRING</li>
      <li styleclass="Body Text">Fixed a problem in FRead() , it was not ignoring the SetAnsi() setting as it should</li>
      <li styleclass="Body Text">Added operators on the PSZ type for PSZ + LONG and PSZ + DWORD.</li>
      <li styleclass="Body Text">The Usual class now implements the IDisposable() interface. When it contains an object that implements IDisposable then it will call the Dispose method on that object.</li>
      <li styleclass="Body Text">We have added Array index properties with one and two numeric indices to make code that accesses array elements a bit faster </li>
      <li styleclass="Body Text">The code <text style="font-weight:bold; font-style:normal; color:#ff0000;">SELECT</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 10, was not working properly. This has been fixed. Thanks Karl Heinz.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The return value of VoDbOrdSetFocus() was TRUE even when trying to set the order to a non existing index. This has been fixed.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">We fixed a problem with Set(_SET_CENTURY) when the parameter passed was a string in the &quot;ON&quot; or &quot;OFF&quot; format</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">VODbOrdSetFocus() was returning TRUE even when the selected order could not be selected.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">ArrayCreate&lt;T&gt; was not filling the array. This has been fixed.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Trailing or Leading spaces are now ignored by the CToD() function.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Calling VoDbSeek() with 2 parameters now does not set lLast to FALSE but to the LAST value from the Current Scope.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">In the previous build the format for the stack trace for errors was changed (the names are all uppercase like in VO). You can now choose to enable or disable this. We have added a function </text><text styleclass="Normal">SetErrorStackVOFormat() that takes and returns a logical value. The default format for the error stack is the VO format for the VO and Vulcan dialects and the normal .Net format for the other dialects.</text></li>
      <li styleclass="Body Text"><text styleclass="Normal">We have implemented the StrEvaluate() function.</text></li>
      <li styleclass="Body Text"><text styleclass="Normal">We have implemented the PtrLen() and PtrLenWrite() functions. These only work on the Windows OS() when running in x86 mode. </text><br/><text styleclass="Normal">For other OSes or for apps running in 64 bits these functions returns the same value as MemLen(). </text></li>
      <li styleclass="Body Text"><text styleclass="Normal">When dividing 2 float numbers results in a NaN (Not a Number) value because the divisor is zero, then a DivideByZero exception will now be generated.</text></li>
      <li styleclass="Body Text"><text styleclass="Normal">When dividing 2 usual numbers results in a NaN (Not a Number) value because the divisor is zero, then a DivideByZero exception will now be generated.</text></li>
      <li styleclass="Body Text"><text styleclass="Normal">Please note that dividing 2 REAL8 (System.Double) values can still result in a NaN, because we are not &quot;intervening&quot; with this division.</text></li>
      <li styleclass="Body Text"><text styleclass="Normal">The OS() function now returns a more appropriate version description when running on Windows. It reads the version name from the registry and also includes a x86 and x64 flag in the version.</text></li>
    </list>
    <para styleclass="Heading2">RDD System</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The DBF RDD Now forces a disk flush when writing a record in shared mode.</li>
      <li styleclass="Body Text">Fixed a problem in the DBFCDX rdd that could corrupt indexes.</li>
      <li styleclass="Body Text">We have built in a validation routine inside the DBFCDX RDD that validates the integrity of the current tag. To call this routine call DbOrderInfo with the DBOI_VALIDATE constant.<br/>This will validate:</li>
      <list id="48" level="2" type="ul" listtype="bullet" formatstring="&#167;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Wingdings; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">If all records are included exactly once in the index</li>
        <li styleclass="Body Text">If the values for each record in the index are correct</li>
        <li styleclass="Body Text">If the order of the index keys in a page is correct</li>
        <li styleclass="Body Text">If the list of index pages in the index is correct</li>
      </list>
    </list>
    <para styleclass="Body Text" style="margin-left:13px;">When a problem is found then this call returns FALSE and a file will be written with the name &lt;BagName&gt;_&lt;TagName&gt;.ERR containing a description of the errors found.</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Most exported variables inside the Workarea class (inside XSharp.Core) and other RDD classes have been changed to PROTECTED. <br/>We have also added some properties for variables that need to be accessed from outside of the RDD</li>
      <li styleclass="Body Text">Fixed a problem that occurred when skipping back repeatedly from the BOF position in a scoped CDX index.</li>
      <li styleclass="Body Text">The Zap() operation for DBFCDX was not clearing one of the internal caches. This has been fixed.</li>
      <li styleclass="Body Text">The DBFCDX driver now closes and deletes a CDX file when the last tag in that CDX has been deleted.</li>
    </list>
    <para styleclass="Heading2">Macro compiler</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The macro compiler was not recognizing 0000.00.00 as an empty date. This has been fixed.</text></li>
      <li styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The macro compiler now also exotic characters in identifiers like the normal compiler. We have added the same identifier name rules that the C# compiler uses.</text></li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading2">XBase++ Functions</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the XPP function SetCollationTable()</li>
      <li styleclass="Body Text">DbCargo() can now also set the cargo value for a workarea to NULL or NIL</li>
      <li styleclass="Body Text">We have added several functions, such as PosUpper(), PosLower(), PosIns() and PosDel().</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading2">VFP Functions</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added AllTrim() , RTrim(), LTrim() and Trim() variations for FoxPro (thanks Antonio)</li>
      <li styleclass="Body Text">Added StrToFile() and FileToStr() (thanks Antonio and Karl Heinz)</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text styleclass="Heading2">VOSDK</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have created a Destroy() method on the CSession and CSocket class, so you can &apos;clean up&apos; objects (in VO you could call Axit(), but that is no longer allowed). The derstructor on these classes will also call Destroy().</li>
      <li styleclass="Body Text">Fixed a problem in TreeView:GetItemAttributes. It can now also be called with a hItem (which happens inside TreeViewSelectionEvent:NewTreeViewItem)</li>
      <li styleclass="Body Text">The OpenDialog class is now resizable.</li>
      <li styleclass="Body Text">Fixed a problem in FormattedString:MatchesTemplChar(), that was causing problems with edit controls with a picture</li>
      <li styleclass="Body Text">Calling DataWindow:__DoValidate() late bound was not working because there are 2 overloads. This has been fixed. Please note that in the VO SDK DataWindow:__DoValidate() expects a parameter of type Control, but inside the DataBrowser code it is called with a parameter of type DataColumn. VO does not complain but in .Net that does not work !</li>
      <li styleclass="Body Text">Fixed a problem in GetMailTimeStamp() in the Internet classes.</li>
      <li styleclass="Body Text">We have included &quot;typed&quot; versions of Consoleclasses, SystemClasses and RDD classes. These are mostly strongly typed and can run in AnyCPU mode.<br/>The SQL classes and GUI classes will follow.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <para styleclass="Heading3">Code Model</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have totally rewritten the background parser and code model that is used to parse &quot;entities&quot; in the VS editor and that is used to build a memory model of the types, methods, functions etc in your VS solution. This parser now uses the same lexer that the compiler uses, but the entities are collected with a hand written parser (since the code in the editor buffer may contains incomplete code we can&apos;t reliably use the normal parser).</li>
      <li styleclass="Body Text">We are now using a SQLite database to persist the code model between sessions. This reduces the memory needed by the X# project system. We are no longer keeping the entire code model in memory.</li>
      <li styleclass="Body Text">This also means that when you reopen an existing solution we will only have to parse files that have &#160;changed since the last time they were processed. That should speed up loading of large VS solutions. </li>
      <li styleclass="Body Text">We are now also reading type information from external code (assembly references and project references to non X# projects) using the Mono.Cecil library instead of the classes in the System.Reflection namespace. This is faster, uses less memory and, most important, we can easily unload and reload assemblies when they were changed.</li>
      <li styleclass="Body Text">As a result of all of this, opening VS solutions should be faster and &quot;lock up&quot; VS less often (hopefully not at all). Also code completion and other intellisense features should be improved.</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading3">Source code editor</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with the dropdown comboboxes above the editor when the cursor is in a line of code before the first entity.</li>
      <li styleclass="Body Text">Fixed a problem that functions in the editor after a class declaration had no collapsible regions</li>
      <li styleclass="Body Text">The code completion inside the editor now also picks up extension methods for the types themselves, but also extension methods for interfaces implemented by these types.</li>
      <li styleclass="Body Text">The editor code now properly recognizes variables declared with the VAR keyword when they are followed by a constructor call</li>
      <li styleclass="Body Text">If you have XML comments in your source code for entities in your solution, then these comments should be picked up by the tooltips inside Visual Studio and by the parameter completion.</li>
      <li styleclass="Body Text">Fixed several problems in the &quot;reformatting&quot; code</li>
    </list>
    <para styleclass="Heading3">Windows Forms editor</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Some inline assignments to fields inside classes that are used by the Windows Forms could make the form unusable by the form editor. This has been fixed.</li>
      <li styleclass="Body Text">The Windows Forms editor was sometimes removing blank lines between entities. This has been fixed.</li>
      <li styleclass="Body Text">User Defined Commands in code parsed by the Windows Forms Editor were not recognized and disappeared when the form was changed and saved. This has been fixed.</li>
      <li styleclass="Body Text">Fixed a problem with setting images and similar properties with resources stored in the project resources file (which are prefixed with &quot;global::&quot; in the source code)</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have added support to export VO Forms from the AEFs to XML format</li>
      <li styleclass="Body Text">We have added support to export VO Menus from the AEFs to XML format</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.4.1.0 (Bandol GA 2.4a)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Bracketed strings are now no longer supported in the Core dialect to avoid problems with single line external property declarations that contain attributes between the GET and SET keywords</li>
      <li styleclass="Body Text">The PROPERTY keyword was not properly recognized after an EXTERN modifier.</li>
      <li styleclass="Body Text">Fixed a XS9021 warning for a IIF expressions with 2 numeric constants</li>
      <li styleclass="Body Text">In the FoxPro dialect late bound calls are now always allowed on certain types (even when the /lb compiler option is not enabled), such as USUAL and the Empty class. &#160;These types are marked with the AllowLateBound attributes in the runtime.<br/>They WILL generate a new compiler warning (<link displaytype="text" defaultstyle="true" type="topiclink" href="XS9098">XS9098</link>).</li>
      <li styleclass="Body Text">We have added a new compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-fox2">-fox2</link>. This option makes local variables visible to the macro compiler and should also be used when you use SQL statements with embedded parameters. This compiler option must be used in combination with <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar">-memvar</link> and the FoxPro dialect</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the DELIM Rdd that would occur when using DbServer:AppendDelimited() and DbServer:CopyDelimited().</li>
      <li styleclass="Body Text">Fixed a problem with DbSetOrder() returning TRUE even when the order was not found.</li>
      <li styleclass="Body Text">Fixed a problem where the File() function would return FALSE when using wildcard characters</li>
      <li styleclass="Body Text">SqlExec() now returns columns of type Date for SQL providers that have a separate Date type</li>
      <li styleclass="Body Text">Workareas/Cursors created with SqlExec() now have the NULL flags, Binary flags etc. set properly according to the settings read from the backend.</li>
      <li styleclass="Body Text">Fixed and added implementation of VFP functions (Gomonth, Quarter, ChrTran, At in various variations, RAt in various variations, DMY, MDY). Thanks Karl Heinz.</li>
      <li styleclass="Body Text">First work on parameterized SQL functions. Not finished yet.</li>
      <li styleclass="Body Text">Some types in the runtime are now marked with a special &quot;AllowLateBound&quot; attribute. These types will be accepted in the FoxPro dialect as candidates for compiling latebound even when the /lb compiler option is not enabled.</li>
      <li styleclass="Body Text">We have added support for the macro compiler to access local variables by name. This is built into the VarGet() and VarPut() functions and also the MemVarGet() and MemVarPut() functions. Local variables will have preference over same named private or public variables. You have to enable the -fox2 compiler option for this.</li>
      <li styleclass="Body Text">ValType() now returns &quot;Y&quot; for currency values and &quot;T&quot; for DateTime values</li>
      <li styleclass="Body Text">No copy of the runtime state is created when that state is accessed in the Garbage collector thread. </li>
      <li styleclass="Body Text">SQLExecute() now returns -1 when an invalid SQL statement is executed.</li>
      <li styleclass="Body Text">Added the VarType() function</li>
      <li styleclass="Body Text">IVarGet() and Send() now return Empty strings when a method returns a NULL_STRING and the return type &#160;is STRING</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD</text></para>
    <list id="64" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Getting the OrdKeyNo for a scoped index was resetting the index position to the top of the index. This would affect scrollbars in browsers for scoped indexes</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOSDK</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The Console classes assembly is now marked as AnyCpu.</li>
      <li styleclass="Body Text">Fixed a problem introduced in the previous build with the calling convention for certain functions imported from Shell32.DLL such as the Drag and Drop support.</li>
      <li styleclass="Body Text">Fixed a problem in the PrintingDevice constructor for reading of printers when running on a Remote Desktop</li>
      <li styleclass="Body Text">We have changed several calls to IsInstanceOf with &lt;var&gt; IS &lt;Type&gt; constructs</li>
      <li styleclass="Body Text">Fixed typo in several IsInstanceOf() calls</li>
      <li styleclass="Body Text">Improved &quot;column scatter&quot; code for the DataBrowser class</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio Integration</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">If you removed all the characters from the &quot;Commit Completion List&quot; control in the XSharp editor options, then after restarting VS all default characters would appear. We now remember that you have cleared the list and will not refill the list again.</li>
      <li styleclass="Body Text">Fixed a problem that caused the editor not to rescan the current buffer for changed entities</li>
      <li styleclass="Body Text">Added project property for the new -fox2 compiler option</li>
      <li styleclass="Body Text">The VO MDI template now has Drag and Drop enabled</li>
      <li styleclass="Body Text">Fixed a problem in the Debugger with some of the runtime types, such as DATE that could cause an exception while debugging in VS 2019</li>
      <li styleclass="Body Text">Fixed a problem in the part of the editor code that is responsible for showing collapsible regions and updating the comboboxes with type names and member names.</li>
      <li styleclass="Body Text">Fixed the code generation for Tab pages in the VO compatible forms editor</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.4.0.0 (Bandol GA 2.4)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed problems where certain operations on integers would still return the wrong variable type</li>
      <li styleclass="Body Text">The Unary Minus operator on unsigned integral types (BYTE, WORD, DWORD, UINT64) was returning the same type as the original, so it was not returning a negative value. This has been changed. The return value of this operator is now the next larger signed integral type.</li>
      <li styleclass="Body Text">Using a compiler macro, such as __VERSION__ in an interpolated string was causing an internal error in the compiler. This has been fixed.</li>
      <li styleclass="Body Text">The <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo11">vo11</link> compiler option now only works for operations between integral and non integral types. Other behavior has been removed because the VO behavior for mixing integral types was confusing and impossible to emulate.</li>
      <li styleclass="Body Text">Bracketed strings are now also recognized after a RETURN and GET keyword.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed problems when subtracting a dword from a date (related to the signed/unsigned problems in the compiler)</li>
      <li styleclass="Body Text">LUpdate() now returns a NULL_DATE for workareas have no open table.</li>
      <li styleclass="Body Text">Added the missing ErrorStack() function (thanks Leonid)</li>
      <li styleclass="Body Text">Added the Stack property to the Error class</li>
      <li styleclass="Body Text">Added the SQL..() functions from Visual FoxPro. Please note that SQLExec() and SQLPrepare() with embedded parameters in the SQL statements are not supported yet. This requires a change in the compiler that is planned for the next build.</li>
      <li styleclass="Body Text">Added a DbDataTable() function that returns a (detached) DataTable with the data from the current workarea</li>
      <li styleclass="Body Text">Added a DbDataSource() function that returns a BindingList attached to the current workarea. Updates to properties in the bindinglist will be directly written to the attached workarea.</li>
      <li styleclass="Body Text">Added 2 classes DbDataTable and DbDataSource that are returned by the functions with the same name.</li>
      <li styleclass="Body Text">Fixed a problem with incorrectly formatted USUALs with numeric values</li>
      <li styleclass="Body Text">We have added the defines from FoxPro.h to the VFP assembly</li>
      <li styleclass="Body Text">We have added the VFP MessageBox functions, including a message box that automatically closes when a timeout has reached.</li>
      <li styleclass="Body Text">Fixed AsHexString() to display large DWORD values that are stored inside USUALs</li>
      <li styleclass="Body Text">Fixed several incompatibilities with VO for FLOAT-&gt;STRING conversions</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD System</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem with skipping backward in a DBFCDX table with a scope</li>
      <li styleclass="Body Text">Fixed a problem with creating unique indexes with the DBFCDX and DBFNTX drivers</li>
      <li styleclass="Body Text">Writing NULL values to DBF columns is now always supported. When the column is a Nullable column in a DBFVFP table then the null flags are set. For other RDDs a NULL value will be written as a blank value.</li>
      <li styleclass="Body Text">Fixed a performance issue in Append operations for all DBF based RDDs</li>
      <li styleclass="Body Text">Fixed a problem with the DBFCDX driver that could happen when index pages were nearly full with key-value pairs with all blanks </li>
      <li styleclass="Body Text">Fixed a problem in WrapperRDD:Open()</li>
      <li styleclass="Body Text">Added the SDF RDD</li>
      <li styleclass="Body Text">Added a special DbfVFPSQL RDD that is used by the SQL..() functions in the VFP support to store the results from SQL queries. The column information describing the original column from the Sql Resultset can be retrieved with the DbFieldInfo() and the <text styleclass="" style="font-family:Consolas; font-size:9pt; font-weight:bold; color:#000000;">DBS_COLUMINFO </text>define. The return value for this call is an object of the type XSharp.RDD.DbColumnInfo.</li>
      <li styleclass="Body Text">Added the DELIM RDD and 2 subclasses (CSV and TSV). These RDDs all return separated values. The default format for the DELIM RDD is to use the comma as separator. CSV uses semi colons and TSV uses Tabs to delimit the fields. On top of that CSV and TSV write a header row with field names.<br/>The &quot;normal&quot; Delimited operations still use DELIM. If you want to use the CSV or TSV RDDs you need to set a global setting:</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">RddSetDefault(&quot;DBFNTX&quot;)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">DbUseArea(TRUE,&quot;DBFNTX&quot;, &quot;c:\Test\TEST.DBF&quot;)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">DbCopyDelim(&quot;C:\test\test.txt&quot;) &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this uses the DELIM RDD</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">RuntimeState.DelimRDD := &quot;CSV&quot; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Tell the runtime to use the CSV RDD for delimited writes</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">DbCopyDelim(&quot;C:\test\test.csv&quot;) &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this uses the CSV RDD</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">RuntimeState.DelimRDD := &quot;TSV&quot; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Tell the runtime to use the TSV RDD for delimited writes</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">DbCopyDelim(&quot;C:\test\test.tsv&quot;) &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this uses the TSV RDD</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">DbZap()</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">RuntimeState.DelimRDD := &quot;CSV&quot; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Tell the runtime to use the CSV RDD for delimited reads</text><br/><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000;">DbAppDelim</text><text style="font-weight:normal; font-style:normal; color:#000000;">(&quot;C:\test\test.csv&quot;) &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// this uses the CSV RDD</text></para>
    <para styleclass="Heading1"><text styleclass="Heading2">VO SDK</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">PrintingDevice:Init() no longer tries to read the default printer from win.ini but from the registry</li>
      <li styleclass="Body Text">Several other locations where the code was still accessing win.ini (with the GetProfile..() funcitons) have been updated.</li>
      <li styleclass="Body Text">The GUI Classes were delay loading several calls to common dialog DLL and winspool.drv. This has changed because that is no longer needed in .Net.</li>
      <li styleclass="Body Text">Cleaned up all PSZ(_CAST operations in GUI Classes.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="65" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Parameter tips for OUT variables were shown as REF</li>
      <li styleclass="Body Text">XML descriptions for member with REF or OUT parameters were not found</li>
      <li styleclass="Body Text">Fixed an exception in the VS Editor </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOXporter</text></para>
    <list id="65" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">No changes in this build</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.3.2 (Bandol GA 2.3b)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added support for Bracketed Strings ([Some String containing quotes: &apos;&apos; and &apos; ] )</li>
      <li styleclass="Body Text">Added support for Support for PRIVATE/PUBLIC syntax with &amp;Id and &amp;Id.Suffix notation</li>
      <li styleclass="Body Text">EXE files were created without manifest before, unless you were using a WIN32 resource with a manifest. This manifest is now correctly added to exe files when no manifest is supplied.</li>
      <li styleclass="Body Text">The handling of unmanaged resources in relation to version resources and manifests has changed:</li>
      <list id="48" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">When the compiler detects native resources it will now check to see if there is a version and/or manifest resource included.</li>
        <li styleclass="Body Text">When there is no manifest resource, then the default manifest resource will be added to the resources from the Win32 resource file.</li>
        <li styleclass="Body Text">When there is a version resource then this version resource will be replaced by the version resource that the compiler generates from the Assembly attributes.</li>
        <li styleclass="Body Text">This should help people coming from VO, so they can use AssemblyVersion etc for all their assemblies, also the ones that have menu and window resources.<br/>If there happens to be a versioninfo resource in the source then this is ignored.</li>
        <li styleclass="Body Text">Of course we have added a command line option to suppress this: if you use the commandline option &quot;<link displaytype="text" defaultstyle="true" type="topiclink" href="Opt-usenativeversion">-usenativeversion</link>&quot; then the native version that is included in the Win32 resource will be used. If there is no version resource included in the Win32 resource file, then this commandline option is ignored. </li>
      </list>
    </list>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">PCOUNT() and ARGCOUNT() are now supported inside ACCESS/ASSIGN methods. The number of parameters that you can pass is still fixed, but both functions will now return the # of parameters defined in ACCESS and/or ASSIGN methods. </li>
      <li styleclass="Body Text">We fixed a problem that a compiler error &quot;Failed to emit module&quot; was produced instead of showing the real problem in the code (a missing type) .</li>
      <li styleclass="Body Text">Extended match markers in the preprocessor, such as &lt;(file)&gt; &#160;in the USE udc, now also properly match file names.</li>
      <li styleclass="Body Text">Improved the detection algorithm that distinguishes parenthesized expressions and typecasts. This algorithm is now:</li>
      <list id="48" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">Built in type names between parentheses are always seen as a typecast. For example <text styleclass="Code Example" style="font-size:12pt;">(DWORD), (SHORT) </text>etc.</li>
        <li styleclass="Body Text">Other type names between parentheses may be treated as typecast but also as parenthesized expression. This depends on the token following the closing parenthesis. When this token is an operator such as +, -, / or * then this is seen as parenthesized expression. When the token following the closing parenthesis is an opening parenthesis then the expression is seen as a typecast. Some examples:</li>
      </list>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">? (</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">DWORD</text><text style="font-weight:normal; font-style:normal; color:#000000;">) +42 &#160; &#160; &#160; </text><tab /><text style="font-weight:bold; font-style:italic; color:#339966;">// this is a typecast</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? (System.UInt32) +42 &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this is a parenthesized expression and will NOT compile</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? (System.UInt32) 42 &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// this is a typecast because there is no operator before 42</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? (System.UInt32) (+42) </text><text style="font-weight:bold; font-style:italic; color:#339966;">// this is a typecast because +42 is between parentheses</text></para>
    <list id="65" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Code that calls the Axit() method now generates &#160;a compiler error.</li>
      <li styleclass="Body Text">We have implemented the /vo11 compiler option </li>
      <li styleclass="Body Text">We have fixed several signed/unsigned warnings </li>
      <li styleclass="Body Text">You can now use PCall() on typed function pointers stored inside structures (this is used in the VO Internet Server SDK)</li>
      <li styleclass="Body Text">The lexer now recognizes (in the FoxPro dialect) the For() and Field() functions and you do not need to prefix these with @@ anymore. </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fix for StrZero() with negative values</li>
      <li styleclass="Body Text">Fix for IsSpace() crashing with empty or null string</li>
      <li styleclass="Body Text">AFill() in the VFP dialect now fills also elements in subarrays (for multi dimensional arrays)</li>
      <li styleclass="Body Text">NoIVarGet() and NoIvarPut() no longer convert the IVar names to Symbol. That way the original casing is kept when calling the NoIVarGet() and NoIVarPut() methods in a class</li>
      <li styleclass="Body Text">The VFP and XPP Abstract classes are now really abstract. </li>
      <li styleclass="Body Text">Implemented VFP Empty class. </li>
      <li styleclass="Body Text">Implemented VFP AddProperty and VFP RemoveProperty functions. </li>
      <li styleclass="Body Text">Fixed a typo in PropertyVisibility enum name</li>
      <li styleclass="Body Text">Fixed several errors when calling DBF related functions for a workarea that did not contain an open table.</li>
      <li styleclass="Body Text">The Seconds() function now returns 3 decimals when running in the FoxPro dialect. Please note that you have to add SetDecimal(3) to actually see the 3rd decimal</li>
      <li styleclass="Body Text">The Like() function is now case sensitive in the FoxPro dialect and case insensitive in all other dialects. The _Like() function is case sensitive in all dialects.</li>
      <li styleclass="Body Text">ASort() was not accepting a 4th argument of type Object(). This has been correct: when you pass an object that has an Eval() method then this method will be called to determine the right sort order.</li>
      <li styleclass="Body Text">When setting/restoring global State with the Set() function, some values that are synchronized by the runtime could get out of sync. This could result in incorrect date formats or similar errors. This has been fixed.</li>
      <li styleclass="Body Text">Several VFP compatibility functions have been added (some contributed by Thomas Ganss).</li>
      <li styleclass="Body Text">We have added several VFP functions such as </li>
      <li styleclass="Body Text">When you set a &quot;global setting&quot; using the Set() function the runtime now makes sure that related settings are set accordingly. For example Setting Set.DateFormat now also updates the DateFormatNet and DateFormatEmpty.</li>
      <li styleclass="Body Text">Fix for PadC() function with non standard filler</li>
      <li styleclass="Body Text">We have added DBOI_COLLATION and DBS_CAPTION for FoxPro specific properties</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VO SDK</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">We have removed the versioninfo resource from the GUI classes sourcecode. The version info is now generated from the Assembly attributes</li>
      <li styleclass="Body Text">We have cleaned up the code and removed the warnings 9020 and 9021 from the suppressed warnings, since the compiler now handles this correctly.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD system</text></para>
    <list id="48" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The DBFVP driver no longer fails to open a DBF when the DBC file is used exclusively by someone else</li>
      <li styleclass="Body Text">Added support for reading captions with DBS_CAPTION and collations with DBOI_COLLATION</li>
      <li styleclass="Body Text">The DBFNTX driver was not setting the HPLocking flag properly when creating new indexes</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The type lookup for variables declared with a VAR keyword could sometimes go into an infinite loop. This has been fixed.</li>
      <li styleclass="Body Text">Members starting with &apos;__&apos; are now only hidden from completion lists when the &apos;Hide Advanced members&apos; checkbox in the general editor options is checked</li>
      <li styleclass="Body Text">Added support for colorizing BRACKETED_STRING constants</li>
      <li styleclass="Body Text">Fixed a bug in the keyword case synchronization code.</li>
      <li styleclass="Body Text">The code behind the VS Form editor had problems with methods declared without return type. As a result forms could not be opened. This has been fixed.</li>
      <li styleclass="Body Text">Improved intellisense info for Defines and Enum members</li>
      <li styleclass="Body Text">You can now enable/disable /vo11 in the project properties dialog</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOXporter</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When porting from Clipboard contents, now VOXporter puts back the modified code to the clipboard</li>
      <li styleclass="Body Text">Added option to remove ~ONLYEARLY pragmas</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Installer</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The installer now has a new command line parameter &quot;-nouninstall&quot; that prevents the automatic installation of a previous version. This allows you to install multiple versions of X# side by side. <br/>Please note that the installer sets a registry key to the location where X# is last installed. This location will be used by the Visual Studio integration to locate the compiler. <br/>If you don&apos;t change this then all VS installations will always use the version of X# that is last installed. See the topic about the <link displaytype="text" defaultstyle="true" type="topiclink" href="Building-XSharp-apps-with-Visu" styleclass="Normal">build process in VS and with MsBuild</link><text styleclass="Normal"> for information about how this mechanism works.</text><br/><text styleclass="Normal">Also if you choose to install the X# runtime assemblies in the GAC then newer versions of these runtime DLLs will/may overwrite older versions. This depends on the fact if the newer DLLs have a new Assembly version. </text><br/><text styleclass="Normal">At this moment all X# runtime DLLs (still) have version 2.1.0.0 even when X# itself is now on version 2.3.2.</text></li>
      <li styleclass="Body Text">The installer now lists all found instances of VS 2017 and VS 2019, including the Visual Studio Buildtools, so you can choose to install in a particular instance of these versions of Visual Studio or simply in all instances.<br/>Please note that when you run X# with the -nouninstall command line option, this will prevent the installer from removing X# from VS installations where it was previously installed. </li>
      <li styleclass="Body Text">We have added <link displaytype="text" defaultstyle="true" type="topiclink" href="Installation">some documentation </link>about all the installer command line options to the help file. </li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Documentation</text></para>
    <list id="68" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed errors in the documentation of escape codes</li>
      <li styleclass="Normal">We have added a chapter with tips and tricks that contains the following topics at this moment.</li>
      <li styleclass="Normal">Added description of the installer <link displaytype="text" defaultstyle="true" type="topiclink" href="Installer-Command-Line-options">command line arguments</link></li>
      <li styleclass="Normal">Added description of the <link displaytype="text" defaultstyle="true" type="topiclink" href="Building-XSharp-apps-with-Visu">Build process in VS and with MsBuild</link></li>
      <li styleclass="Normal">Added topics describing the dialect &quot;<link displaytype="text" defaultstyle="true" type="topiclink" href="Dialect-(in)compatibilities">incompatibilities</link>&quot; in the X# runtime. Please note that this topic is not complete yet.</li>
      <li styleclass="Normal">How to catch errors at startup</li>
      <li styleclass="Normal">Compiler magic in the startup code</li>
      <li styleclass="Normal">Special classes generated by the compiler.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.3.1.0 (Bandol GA 2.3a)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">When compiling in case sensitive mode, the compiler now checks to see if a child class declares a method that only differs from a method in its parent class by case</li>
    </list>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The warning message about assigning to a foreach iterator variable has been changed from &quot;Cannot assign&quot; to &quot;Should not assign&quot;</li>
      <li styleclass="Body Text">#pragma warnings was not working with the xs1234 syntax but only with numbers. This has been corrected</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"></para>
    <para styleclass="Heading1"><text styleclass="Heading2">Runtime</text></para>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Added the SetFieldExtent method to the IRdd interface</li>
      <li styleclass="Body Text">The USUAL type no longer &quot;caches&quot; the dialect setting</li>
      <li styleclass="Body Text">Fixed some problems with ACopy() with skipped or negative arguments.</li>
      <li styleclass="Body Text">The return value for Alias() is now in upper case.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VO SDK </text></para>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The VO SDK Console class now uses the System.Console class internally. The only functionality that is no longer available is:</li>
      <list id="66" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Body Text">It does not respond to the mouse anymore</li>
        <li styleclass="Body Text">Creating a &quot;new&quot; console window is not supported.</li>
      </list>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD system</text></para>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in the Advantage RDDs that was caused by a casing problem (a method in a child class had a different case than the method in the parent class that it tried to override). This is why we also added a check to the compiler.</li>
      <li styleclass="Body Text">Creating an NTX with the DBFNTX driver could fail in some situations due to timing issues. This has been fixed.</li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">Visual Studio integration</text></para>
    <list id="66" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">Fixed a problem in keyword case synchronization that could corrupt the editor contents.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.3.0.0 (Bandol GA 2.3)</para>
    <para styleclass="Heading1"><text styleclass="Heading2">Compiler</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Syntax errors (</text><link displaytype="text" defaultstyle="true" type="topiclink" href="XS1003" styleclass="Normal">1003</link><text styleclass="Normal">) or Parser errors (</text><link displaytype="text" defaultstyle="true" type="topiclink" href="XS9002" styleclass="Normal">9002</link><text styleclass="Normal">) in a source file could lead to multiple errors in the error list. We are now only reporting the first of these error types in a source file.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Implemented the -cs (Case Sensitive identifiers) compiler option</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The compiler now includes the source for a compiletime codeblock as string in that codeblock. Calling ToString() on a compile time codeblock will retrieve this string.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem that memory variables were not updated when passed to a </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DO</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &lt;proc&gt; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">WITH </text><text styleclass="Normal"> statement</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Accessing or assigning undefined properties or calling undefined methods in typed code was generating a compiler error. The compiler now detects if the type has a NoIVarGet(), NoIVarPut() or NoMethod() method, and when it finds the appropriate methods then a compiler warning (</text><link displaytype="text" defaultstyle="true" type="topiclink" href="XS9094" styleclass="Normal">XS9094</link><text styleclass="Normal">) is generated instead of a compiler error.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="" style="font-family:Arial; font-size:10pt; color:#000000;">Casting a numeric to a LOGIC with the </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOGIC</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">_CAST</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, numValue) </text><text styleclass="Normal">construct was only looking at the lowest byte of numValue. If the lowest byte was zero and a higher byte was non zero the result would be FALSE. The compiler now compiles this into </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(numValue &lt;&gt; 0).</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The compiler now supports an (optional) THEN keyword for the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_IF" styleclass="Normal">IF </link><text styleclass="Normal">statement</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added support for the FoxPro CURRENCY type.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The Value keyword is always compiled in lower case in PROPERTY SET methods</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Unterminated strings are now detected at the end of the line.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added ENDTRY UDC for FoxPro</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added support for #pragma warning(s). See the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Pragma-Warnings" styleclass="Normal">#pragma warnings</link><text styleclass="Normal"> topic in the help file for more info.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added support for #pragma options. See the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Pragma-Options" styleclass="Normal">#pragma options</link><text styleclass="Normal"> topic in the help file for more info.</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:24px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:avoid; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Heading2">Runtime</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added XSharp.Data.DLL which contains support code for .Net SQL based data access used by the RDD system and the new Unicode SQL classes.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">DbEval() was throwing an exception when no FOR block or no WHILE block was passed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">DbEval() was throwing an exception when the block that is evaluated was not returning a logical expression</text></li>
      <li styleclass="List">The workarea event for OrdSetFocus() had an error which would result in an &quot;Operation Failed&quot; error for this event, even when the event succeeded.</li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The index operator on USUALs containing STRINGS (which is only supported in the Xbase++ dialect) was not taking into account that the indices were already ZERO based,</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Calling DbCreate() with incorrect lengths for Date or Logic fields was throwing an exception, these are now automatically corrected</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added a fix for converting USUAL values of type STRING with NULL to STRING</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem in __FIeldSetWa() when the area was NIL or &quot;M&quot;.</text></li>
    </list>
    <list id="69" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added the FoxPro CURRENCY type. These are also supported in USUAL variables. Internally the values of a CURRENCY variable are stored as Decimal but rounded to 4 decimal places.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Most runtime DLLs are now compiled in Case Sensitive mode.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem in the STOD() function, so it allows strings that are longer than 8 characters.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">We have added some VFP functions to the runtime, such as the Just..() functions and AddBs(). Several other functions are there but not implemented. They are marked with an [Obsolete] attribute and will throw a NotImplementedException when called. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">When running on windows the low level File IO system now uses native windows File access in stead of the managed access. This also affects the RDD system.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed problems in ACopy(), Transform(), Str()</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">VOSDK Classes</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added DbServer:FieldGetBytes() and DbServer:FieldPutBytes() to read the &apos;raw&apos; bytes of a string field. Please note that (in ccOptimistic mode) the bytes value is NOT cached and that you have to manually lock and unlock the server when calling FieldPutBytes().</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Added several missing defines</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Synchronized the VO SDK to the VO 2.8 SP4 SDK. The only changes that are not included are the ones from the DateTimePicker class. These changes were causing conflicts with the existing code in the X# VOSDK.</text></li>
    </list>
    <para styleclass="Heading1"><text styleclass="Heading2">RDD System</text></para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Querying the header size for the Advantage RDD would cause an exception. This has been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem with DbRlockList() and the advantage RDD</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Skipping in a cursor for the Advantage RDDs was not refreshing the EOF and BOF flags for related tables</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem writing strings in FPT files</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The AX_Get.. Handle() functions were not properly returning the handles</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">We have added several missing Advantage related functions.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The </text><text styleclass="Body Text">DBFVFP </text><text styleclass="Normal">driver was not writing the block for DBC backlinks to the file header when creating a new file, which resulted in negative record numbers.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">We have added (temporary) support for reading field names from DBC files for the DBFVFP driver. As a result CDX files which use the long field names in index expressions are now also opened correctly</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem in the CopyDb() code for the DBF RDD</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The DBFCDX RDD now implements the BLOB_GET and also BlobExport() and BlobImport()</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Packing, Zapping or Rebuilding a CDX index with a Custom or Unique flag would not keep these flags. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">When you create a file with the DBFVFP driver you can now include Field Flags in the field type of the DbCreate() array by following the type with a colon and one or more flags, where flags is one of:</text><br/><text styleclass="Normal">N or 0:</text><tab /><text styleclass="Normal">Nullable</text><br/><text styleclass="Normal">B</text><tab /><tab /><text styleclass="Normal">Binary</text><br/><text styleclass="Normal">+</text><tab /><tab /><text styleclass="Normal">AutoIncrement</text><br/><text styleclass="Normal">U</text><tab /><tab /><text styleclass="Normal">Unicode. &#160;(not supported by FoxPro)</text><br/><text styleclass="Normal">Other flags may follow ( for example Harbour also has E = Encrypted and C = Compressed)</text><br/><text styleclass="Normal">Note:</text></li>
      <list id="67" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Please note that the size of the field is the # of bytes, so {&quot;NAME&quot;,&quot;C:U&quot;,20,0} declares a Unicode character field of 10 Unicode characters and 20 bytes.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">We do not validate combinations of flags. For example AutoIncrement is only working for fields of type Integer. </text></li>
      </list>
    </list>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">DbFieldInfo(DBS_PROPERTIES) returns 5 for all RDDs with the exception of the DBFVFP driver. That driver returns 6. The 6th property is the FLAGS field. This field is a combination of the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_RDD_Enums_DBFFieldFlags.htm" domain="XSharpRef.chm" styleclass="Normal">DBFFieldFlags</link><text styleclass="Normal"> enum values.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem with AppendDb() and CopyDb() for the Advantage RDD</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">Fixed a problem in the Append() code of the DBF RDD. When Append() was called and no data was written then the record that was written to disk could be corrupted. The Append() method now directly writes the new record with blanks..</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">The Fully qualified names of the Advantage RDDs inside XSharp.RDD.DLL are now the same as in the AdvantageRDD.DLL for Vulcan.</text></li>
    </list>
    <list id="70" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="Normal">We have added a FileCommit event to the notifications. This sent when a workarea is committed.</text></li>
    </list>
    <para styleclass="Heading2">Macro compiler</para>
    <list id="71" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="List">The macro compiler now also recognizes the Array(), Date() and DateTime() functions.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="List">Fixed problems with Aliased expressions</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:48px left,96px left,144px left,192px left,240px left ;"><text styleclass="List">On the place where the macro compiler expects a single expression you can now also have an expression list between parentheses. The last expression in the list is seen as the return value of the expression list</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="72" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">The option to compile case sensitive has been enabled in the VS project system</text></li>
    </list>
    <list id="73" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">The speed of &apos;Format Document&apos; has improved a lot.</text></li>
      <li styleclass="Body Text"><text styleclass="List1">The XSharp Intellisense Optionspage in Tools/Options now has a scroll bar when needed</text></li>
      <li styleclass="Body Text"><text styleclass="List1">The ToolPalette in the VO Window editor now has icons</text></li>
    </list>
    <list id="74" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">We have added templates for VO MDI windows and VO SDI windows. </text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:24px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:avoid; border:none; tabstops:none;"><text styleclass="Heading2">Build System</text></para>
    <list id="75" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">When compiling native resources the resource compiler now automatically includes a file with some defines such as VS_VERSION_INFO</text></li>
    </list>
    <para styleclass="Heading2">Debugger</para>
    <list id="76" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">When you enter a watch expression in the debugger or a breakpoint condition, you can now use 1 based array indices. Our debugger will now automatically subtract 1 when evaluating the expression.</text></li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <list id="77" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">Fixed a problem in the Windows Forms code generation</text></li>
    </list>
    <list id="78" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">You can now also export single MEF files, single PRG files and data from the Clipboard.</text></li>
      <li styleclass="Body Text"><text styleclass="List1">Code between #ifdef .. #endif is not touched by VOXPorter</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.2.1.0 (Bandol GA 2.2a)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">When compiling code that contained an assign and not an access then trying to read the access could lead to a compiler exception. This has been fixed.</text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">Added a missing _Run() function</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration / Build system</para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text"><text styleclass="List1">Fixed a problem that caused a dialog to be shown with the message </text>&quot;The &apos;XSharp Project System&apos; package did not load correctly.&quot;</li>
      <li styleclass="Body Text"><text styleclass="List1">Fixed a problem with writing response files for the resource compiler when the source file names contained ASCII characters with accents or other &#160;characters &gt; 128. Even though this is now fixed we still recommend not go to crazy with file names, because these names have to be converted from Unicode to Ansi, since the resource compiler can only read response files in Ansi format.</text></li>
      <li styleclass="Body Text"><text styleclass="List1">Fixed a problem for certain QuickInfo / Tooltip windows</text></li>
      <li styleclass="Body Text"><text styleclass="List1">The VO item templates now have a condition around the #include statements for the Vulcan include files, since these are no longer needed when compiling for the X# runtime.</text></li>
      <li styleclass="Body Text"><text styleclass="List1">Added Support for the &quot;Auto&quot; window in the debugger</text></li>
      <li styleclass="Body Text"><text styleclass="List1">Expressions in the Watch window, Breakpoint conditions etc may now contain SELF, SUPER and a colon separator. Unfortunately they are still case sensitive.</text></li>
    </list>
    <para styleclass="Heading2">VOXPorter</para>
    <list id="67" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">we now detect that a class has fieldnames and accesses/assigns with the same name. This was allowed in VO but no longer in .Net. The field names will be prefixed with an underscore inside the class. </li>
      <li styleclass="Body Text">We now prefix the name &quot;Trace&quot; with @@ because this is quite often used to conditional compile tracing code in VS.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.2.0.0 (Bandol GA 2.2)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler now recognizes the functions Date(), DateTime() and Array(), even though their names are the same as type names.<br/>Date() with 1 parameter will still be seen as a cast from that parameter to a Date(), like in the following example<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> dwJulianDate </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DWORD</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> dJulianDate &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DATE</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">dwJulianDate &#160; &#160; &#160; := </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DWORD</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">( 1901.01.01)</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">dJulianDate &#160; &#160; &#160; &#160;:= </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DATE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(dwJulianDate) </text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// This is still a cast from Date to DWORD</text><br/>However when Date is called with 0 or 3 parameters then either the current date is returned (like with Today()) or a date is constructed from the 3 parameters (like in ConDate())<br/>The DateTime() function takes 3 or more parameters and constructs a DateTime() value.<br/>The Array() function takes the same parameters as the ArrayNew() function.</li>
      <li styleclass="List1">When choosing overloads for String.Format() and a usual expression is passed as first reference we no longer allow the compiler to choose one of the overloads that expects an IFormatProvider interface.</li>
      <li styleclass="List">Parameters passed by reference to untyped methods/functions now have the IsByRef flag set. You can query for &quot;By Reference&quot; parameters by checking the parameter with IsByRef(uParameter). Please note that after assigning a new value to a parameter, this flag will be cleared.</li>
      <li styleclass="List">The compiler now also allows to pass aliased fields and memvars by reference to untyped functions. Even undeclared memvars are allowed.<br/>Please note that the assignment back to the field and memvar will happen after the call to the function returns. So inside the function the field or memvar will still have its original value.</li>
      <li styleclass="List">Using &apos;:&apos; &#160;as send operator in Interpolated strings is ambiguous because &apos;:&apos; is also used add format specifiers to interpolated strings. The compiler now detects and allows &quot;SELF:&quot;, &quot;SUPER:&quot; and &quot;THIS:&quot;. <br/>If you want to be safe use the &apos;.&apos; as send operator inside interpolated strings for other variables, or simply don&apos;t use interpolated strings, but use String.Format like in:<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">? String.Format(&quot;{0} {1}&quot;, oObject:Property1, oObject:Property2)</text><br/><text styleclass="Body Text">in stead of </text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">? i&quot;{oObject:Property1} {oObject:Property2}&quot;</text><br/><text styleclass="Body Text">This is the code that the compiler will produce anyway</text></li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="Heading2">Macrocompiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The macro compiler now recognizes and compiles nested codeblocks, such as <br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> cb := {|e| </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IIF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(e, {||SomeFunc()}, {||SomeOtherFunc}) } </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">cb := Eval(cb, TRUE) &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// cb will now contain {||SomeFunc()}</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb) </text></li>
      <li styleclass="List1">In the FoxPro dialect the macro compiler now recognizes AND, OR, NOT and XOR as logical operators</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added some Xbase++ compatible functions, such as DbCargo(), DbDescend() and DbSetDescend().</li>
      <li styleclass="List1">The DateCountry Enum now also the values System and Windows, which both read the date format from the Regional settings in the System.</li>
      <li styleclass="List1">We have added a WrapperRDD class that you can inherit from. This allows you to wrap an existing RDD and subclass methods of your choice. See the documentation of WrapperRDD for an example.</li>
      <li styleclass="List1">We had added a XPP member to the CollationMode enum with the same number as Clipper. This was confusing to some users. We have now give the XPP member a new number.</li>
      <li styleclass="List1">OleAutoObject:NoMethod() now behaves different in the Vulcan dialect (to be compatible with Vulcan). In the Vulcan dialect the method name is inserted at the beginning of the list of arguments. In the other dialects the arguments are unchanged, and you need to call the NoMethod() function to retrieve the name of the method that was originally called.</li>
      <li styleclass="List1">All settings in the runtime state are now initialized with a default value, so the Settings() dictionary in the runtimestate will have values for all Set enum values.</li>
      <li styleclass="List1">The previous change has fixed a problem with the Set() function when setting values for logical settings with a string &quot;On&quot; or &quot;Off&quot;. Because some settings were not initialized with a logic this was not working. </li>
      <li styleclass="List1">When creating indexes with SetCollation(#Ordinal) the speed is a bit better now.</li>
      <li styleclass="List1">The runtimestate now has a setting EOF. When this is TRUE (which is done automatically for the FoxPro dialect) then MemoWrit() will write a ^Z (chr(26)) after a text file, and MemoRead() will remove that character when it finds it.</li>
      <li styleclass="List1">The runtimestate now has a setting EOL. This defaults to CR - LF (chr(13+chr(10)). This setting is used for line delimiters when writing files with FWriteLine().</li>
    </list>
    <para styleclass="Heading2">RDD system</para>
    <para styleclass="Normal"></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed locking problems in the DBFCDX RDD that were causing problems when opening files shared between multiple apps but also between multiple threads. The RDD now should properly detect that the CDX was updated by another process or thread.</li>
      <li styleclass="List1">Fixed a problem with the File IO system when running multiple threads</li>
      <li styleclass="List1">Fixed a problem with the File() and FPathName() functions when running multiple threads</li>
      <li styleclass="List1">Added support for Workarea Cargo (See DbCargo())</li>
      <li styleclass="List1">Numeric columns with trailing spaces were returned as 0. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem in the DBFCDX driver that was happening when many keys were deleted / updated and index pages were deleted.</li>
      <li styleclass="List1">Fix a read error at EOF for the DBF RDD.</li>
    </list>
    <para styleclass="Heading2">VOSDK</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem in the DbServer destructor when called at application shutdown for a server that was already closed.</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed speed problem in the &quot;Brace Matching&quot; code with the help of a user (thanks Fergus!)</li>
      <li styleclass="List1">You should no longer be able to edit source code when the debugger is running.</li>
      <li styleclass="List1">We have added a property &quot;Register for COM Interop&quot; to the build options of the Project Properties.</li>
      <li styleclass="List1">We have updated the assembly info templates . They now have a GUID and Comvisible attribute.</li>
      <li styleclass="List1">Empty lines in the editor buffer could sometimes trigger an exception. This has been fixed</li>
      <li styleclass="List1">Text between TEXT .. ENDTEXT is no longer changed by formatting options in the editor, such as indenting or case synchronization.</li>
      <li styleclass="List1">Incomplete strings will have the color of normal strings in the editor.</li>
      <li styleclass="List1">QuickInfo and Completion lists will follow the &quot;format case&quot; setting of the editor for keywords.</li>
      <li styleclass="List1">If a certain option from the Tools/Options was not set then loading a project that was saved with files open in the editor could result in an exception, causing the project to be loaded with no visible items. Unload and Reload would fix that. This will no longer happen.</li>
      <li styleclass="List1">We have made some changes to make solutions open and close faster.</li>
      <li styleclass="List1">Some colors were difficult to read when the Visual Studio Dark theme was selected. This has been fixed.</li>
      <li styleclass="List1">Brace matching was sometimes incorrectly matching an END CLASS with the BEGIN NAMESPACE. This should no longer happen.</li>
      <li styleclass="List1">Fixed an exception when opening a solution under certain circumstances which would display an error inside VS that the XSharp Project System was not loaded correctly.</li>
      <li styleclass="List1">The Code Generator for Windows Forms, Settings and Resources now respect the keyword case setting from the Tools - Options TextEditor/XSharp page.</li>
    </list>
    <para styleclass="Heading2">VOXPorter</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Folder names ending with a backslash could confuse VOXPorter</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.1.1.0 (Bandol GA 2.11)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added new syntaxes for OUT parameters. You can now use one of the following syntaxes</li>
    </list>
    <para styleclass="List1"><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> cString </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; cString := &quot;12345&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Int32.TryParse(cString, </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OUT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> result) &#160; &#160; &#160;</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// this declares the out variable inline, the type is derived from the method call</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Parsing succeeded, result is &quot;, result</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Int32.TryParse(cString, </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OUT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> result2 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Int32) &#160; </text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// this declares the out variable inline, the type is specified by us</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Parsing succeeded, result is &quot;, result2</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Int32.TryParse(cString, </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OUT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">NULL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">) &#160; &#160; &#160;</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// this tells the compiler to generate an out variable, we are not interested in the result</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Parsing succeeded&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Int32.TryParse(cString, </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OUT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VAR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> _) &#160; &#160; &#160;</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// this tells the compiler to generate an out variable, we are not interested in the result. </text></para>
    <para styleclass="List1"><tab /><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// The name &quot;_&quot; has a special meaning &quot;ignore this&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Parsing succeeded&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler now allows the function names Date(), DateTime() and Array(). The runtime has these functions (see below)</li>
      <li styleclass="List1">Fixed a preprocessor problem where the &lt;token&gt; match marker inside UDCs was stopping matching tokens when the .not. or ! operator was found after another logical operator such as .AND. or .OR..</li>
      <li styleclass="List1">Added support for &lt;usualValue&gt; IS &lt;SomeType&gt;. The compiler will automatically extract the contents of the USUAL and wrap it in an object and then apply the normal IS &lt;SomeType&gt; operation.</li>
      <li styleclass="List1">Fixed a problem with Interpolated strings where the &apos;/&apos; character was not properly recognized. </li>
      <li styleclass="List1">The compiler now supports the FoxPro syntax for cursor access. When dynamic memory variables are disabled this always gets translated to reading a field from the current cursor/workarea.<br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Customer</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SCAN</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? Customer.LastName</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SCAN</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USE</text></li>
    </list>
    <para styleclass="List1"><tab />When memory variables are enabled then this code could also mean that you are trying to read the Lastname property of a variable with the name &quot;Customer&quot; like in the example below:</para>
    <para styleclass="List1"><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Invoices</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; Customer = MyCustomerObject{}</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SCAN</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? Customer.LastName, Invoice.Total</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SCAN</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USE</text></para>
    <para styleclass="List1"><tab />You can also use the M prefix to indicate a local variable or memory variable. The compiler will try to resolve the variable to the local first and when that fails it will try to resolve the variable to a memory variable (when dynamic memory variables are enabled).</para>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added support functions for the FoxPro cursor access syntax.</li>
      <li styleclass="List1">In the Vulcan dialect the NoMethod() method now receives the methodname as first parameter (this is NOT compatible with VO)</li>
      <li styleclass="List1">Added functions Date() (can have 0 or 3 parameters, equivalent to Today() and ConDate()), DateTime() and Array().</li>
      <li styleclass="List1">Added fixes and optimizations for functions such that take an area parameter such as Used(uArea) and Eof(uArea).</li>
      <li styleclass="List1">AScan() and AScanExact() now return 0 when a NULL_ARRAY is passed.</li>
    </list>
    <para styleclass="List1"></para>
    <para styleclass="Heading2">RDD</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">There was a problem reading negative numbers from DBFs. This has been fixed</li>
      <li styleclass="List1">Fixed an exception when FPT drivers were writing data blocks in the FPT file with a 0 byte length.</li>
      <li styleclass="List1">The DBF() function returns the Full filename in the FoxPro dialect and the alias in the other dialects.</li>
      <li styleclass="List1">When creating an CDX index for a completely empy DBF file then an index key would be inserted for the phantom record. This has been fixed.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.1.0.0 (Bandol GA 2.1)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added support for parameters by reference to function and method calls for untyped parameters</li>
      <li styleclass="List1">In the Xbase++ and FoxPro dialect arguments passed with &apos;@&apos; are always treated as BY REF arguments because these dialects do not support the &apos;AddressOf&apos; functionality</li>
      <li styleclass="List1">When /undeclared was used and an entity added a new private then this private was not cleared when the entity went out of scope. This has been fixed.</li>
      <li styleclass="List1">Compiling oObject?:Variable was not handled correctly by the compiler</li>
      <li styleclass="List1">Fixed an internal compiler error when calling SELF:Axit() </li>
      <li styleclass="List1">Parameters for the DO statement are now passed by reference</li>
      <li styleclass="List1">Changed the order of &apos;necessary&apos; assembly names when compiling for not core dialect. </li>
      <li styleclass="List1">We have added support for several SET commands, such as SET DEFAULT, SET PATH, SET DATE, SET EXACT etc.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">We have made some changes to get XSharp.Core to run on Linux</li>
      <li styleclass="List">We have fixed a problem in the Subtract operator for the Date type. This changes the signature of the Subtract operator which has forced us to increase the Assemblyversion of the runtime.</li>
      <li styleclass="List">The Xbase++ dialect now allows the [] operator on a string inside a usual. This returns a substring of 1 character for the given position.</li>
      <li styleclass="List">We have fixed an incorrect event for the OrderChanged event</li>
      <li styleclass="List">CoreDb.BuffRefresh was sending an incorrect enumerator value to the IRDD.RecInfo() method.</li>
      <li styleclass="List">The IVarList() function was including protected Fields and Properties. This has been fixed.</li>
      <li styleclass="List">IsInstanceOfUsual() could not be used if an objects was of a subclass of CodeBlock. This has now been fixed.</li>
      <li styleclass="List">We have added many overloads of workarea related functions with an extra parameter to indicate a workarea number or workarea name. For example for the EoF(), Recno(), Found() and Deleted() functions</li>
      <li styleclass="List">We have added Xbase++ collation tables. The SetCollationTable() function now selects the right collation.</li>
      <li styleclass="List">Several Array related functions now have better checks for NULL arrays</li>
      <li styleclass="List">The SubcodeText property in the error class is now Read/Write. When the value has not been written then the subcode number is used to lookup the value of the property.</li>
      <li styleclass="List">MExec() was not always evaluating the compiled codeblock. This has been fixed.</li>
      <li styleclass="List">We have added some missing Goniometric functions, such as ACos(), ASin() and more.</li>
      <li styleclass="List">In the Xbase++ dialect the FieldGet() and FieldPut() functions no longer throw an error for incorrect field numbers</li>
      <li styleclass="List">We have added a missing MakeShort() function and SEvalA() function.</li>
      <li styleclass="List">The DateCountry settings now include a System setting which will read the date format from the settings for the current culture.</li>
    </list>
    <para styleclass="Heading2">Macrocompiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">When the macro compiler detects an ambiguous method or constructor it now includes the signatures of these in the error message</li>
      <li styleclass="List">We have added a new IMacroCompiler2 interface that adds an extra property &quot;Resolver&quot;. This property will may receive a Delegate of type &quot;MacroCompilerResolveAmbiguousMatch&quot;. This delegate has the following prototype:<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DELEGATE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MacroCompilerResolveAmbiguousMatch(m1 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MemberInfo, m2 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> MemberInfo, args </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> System.Type[]) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LONG</text></li>
      <li styleclass="List"><text styleclass="Body Text">The delegate will be called when the macro compiler detects an ambiguous match and receives the System.Reflection.MemberInfo for possible candidates and an array of the detected types of the arguments (detected at c</text><text styleclass="Body Text" style="text-decoration:underline;">ompile</text><text styleclass="Body Text"> time). The delegate can return 1 or 2 to choose between either candidate. Any other value means that the delegate does not know which of the ambiguous members to choose.</text><br/><text styleclass="Body Text">If the macro compiler finds more than 2 alternatives, it first calls the delegate with alternatives 1 &amp; 2, and then the selected delegate from these 2 and alternative 3 etc.</text></li>
      <li styleclass="List"><text styleclass="Body Text">You can register a function or method as delegate with the new function</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">SetMacroDuplicatesResolver()</text></li>
      <li styleclass="List"><text styleclass="Body Text">We are now handling (one level of) nested Macros. So the macro compiler correctly compiles a codeblock like </text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">{|e| </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">iif</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(e, {||TRUE}, {||FALSE})}</text></li>
      <li styleclass="List"><text styleclass="Body Text">The macrocompiler now allows comparisons between Integers and Logics (just like the Usual type in the runtime). This is still not recommended !</text></li>
      <li styleclass="List"><text styleclass="Body Text">The macrocompiler now allows the use of &apos;[&apos; and &apos;]&apos; as string delimiters. This is NOT allowed in the normal compiler because these delimiters will be impossible to differentiate from attributes.</text></li>
      <li styleclass="List">We have fixed <text styleclass="Body Text">a problem when a late bound call was needed for method names that were matching method names or property names in the Usual type (such as a method with the name Item()).</text></li>
      <li styleclass="List"><text styleclass="Body Text">PCount() for macro compiled codeblocks was always returning 1. This has been fixed.</text></li>
    </list>
    <para styleclass="Heading2">VOSDK</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixes a problem with DbServer objects that were not closed in code. <br/>The existing code was trying to close the workarea from the destructor. But in .Net the destructor runs in a separate thread and in that GC Thread there where no files open...</li>
      <li styleclass="List">Removed unneeded calls to DbfDebug()</li>
      <li styleclass="List">The AdsSqlServer class is now added to the VORDDClasses assembly</li>
    </list>
    <para styleclass="Heading2">RDD</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">We have fixed a problem with parsing incorrect or empty dates</li>
      <li styleclass="List">We have fixed a problem with reading Dates in the Advantage RDD that could cause a Heap error when reading dates.</li>
      <li styleclass="List">We have added several &apos;missing&apos; functions for Advantage support that were in the &apos;Ace.Aef&apos; for VO</li>
      <li styleclass="List">We have added support for Character fields &gt; 255 characters</li>
      <li styleclass="List">DbSetScope() now moves the record pointer to the first record that matches the new scope.</li>
      <li styleclass="List">DbCreate() for the DBFNTX driver with SetAnsi(TRUE) was creating a file with a first byte of 0x07 (or 0x87) . <br/>This no longer happens in the Xbase++, FoxPro and Harbour dialects because this first byte is VO specific only</li>
      <li styleclass="List">Some FoxPro memo values are written with an extra 0 byte at the end. This extra byte is now suppressed when reading these values.</li>
      <li styleclass="List">We have fixed a problem with the version numbers in CDX files not being updated and also improved CDX locking.</li>
      <li styleclass="List">Xbase++ was not recognizing NTX indices when the tag name in the index header was not in uppercase. This has been fixed.</li>
      <li styleclass="List">We have fixed a (performance and size) problem when creating CDX indexes.</li>
      <li styleclass="List">When opening a DBF file that does not have a codepage byte, we default to the current Windows or DOS codepage, depending on the current SetAnsi() setting.</li>
      <li styleclass="List">Optimized reading numeric, date and logical columns</li>
      <li styleclass="List"></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The WCF Service template has been fixed</li>
      <li styleclass="List">We have migrated the project system to the Asynchronous API. This should make loading of solutions with a large number of X# projects a bit faster.</li>
      <li styleclass="List">Fixed a problem in the Keyword Case synchronization that could lock up the UI for several seconds</li>
      <li styleclass="List">Fixed an exception in the BraceMatching code.</li>
      <li styleclass="List">Uncommenting a block of lines was sometimes leaving the comments in front of empty lines. This has been fixed.</li>
      <li styleclass="List">We have improved the (XML) documentation lookup for types, methods, fields, properties and parameters.</li>
      <li styleclass="List">We have improved the type lookup between X# projects.</li>
    </list>
    <para styleclass="Heading2">VOXPorter</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">DbServer and FieldSpec entities are now also exported</li>
      <li styleclass="List">VOXPorter now also can genarate a separate project/application that contains Windows Forms versions of the VO GUI windows found in the VO Applications.</li>
      <li styleclass="List">When running VOXPorter you now can choose to export to XIDE, Visual Studio or Both.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.8.1 (Bandol GA 2.08a)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a recursion problem in the preprocessor</li>
      <li styleclass="List1">MEMVAR-&gt; and FIELD-&gt; were no longer correcty detected This has been fixed.</li>
      <li styleclass="List1">We have fixed several issues in &#160;dbcmd.xh </li>
      <li styleclass="List1">Fixed a problem with return statements inside Lambda expressions.</li>
      <li styleclass="List1">The = Expression() statements (FoxPro dialect) was not generating any code. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">XPP.Abstract.NoMethod() and XPP.DataObject.NoMethod() were still expecting the method name as 1st parameter.This has been fixed.</li>
      <li styleclass="List">StretchBitmap() was doing the same as ShowBitmap() because of an incorrect parameter. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Improved the Format-Document code</li>
      <li styleclass="List">Fixed a problem in the VS Parser when looking up the type for variables defined with the VAR keyword which could send VS in an endless loop.</li>
      <li styleclass="List">The contents of the TEXT .. ENDTEXT block and the line after the \ and \\ tokens now has its own color</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.8 (Bandol GA 2.08)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler had a problem with the &quot;return&quot; attribute target</li>
      <li styleclass="List1">Errors inside the &quot;statementblock&quot; rule are now better detected and the compiler will no longer report many errors after these for correct lines of code.</li>
      <li styleclass="List1">Fixed a problem with Casts to logic</li>
      <li styleclass="List1">Fixed a problem with undeclared variables used as counter for For Loops</li>
      <li styleclass="List1">Improved the code generation for FIELDs, MEMVARs and undeclared variables for prefix operation, postfix operations and assignments.</li>
      <li styleclass="List1">Improved the code generation for method calls where the parameter is a ref or out variable when default parameters are involved. The compiler now generates extra temporary variables for these calls.</li>
    </list>
    <list id="80" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">In the dialects where this relevant the compiler now also supports ENDFOR as alias for NEXT and FOR EACH as alias for FOREACH.</li>
      <li styleclass="List1">Added support for the DO &lt;proc&gt; [WITH arguments] syntax</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The DbCreate() function now creates a unique alias when the base filename of the file to create is already opened as an alias</li>
      <li styleclass="List">The Numeric overflow checking for USUAL values now follows the overflow checks of the main app</li>
      <li styleclass="List">DbUnLock() now accepts an (optional) record number as parameter</li>
      <li styleclass="List">XMLGetChild() was throwing an exception when no elements were found </li>
      <li styleclass="List">XMLGetChildren() was throwing an exception</li>
      <li styleclass="List">Fixed a problem in 2 rules inside &quot;dbcmds.xh&quot;</li>
      <li styleclass="List">The XSharpDefs.xh &#160;file now automatically includes &quot;dbcmd.xh&quot;</li>
      <li styleclass="List">Some datatype errors were reported incorrectly.</li>
      <li styleclass="List">The &quot;NoMethod&quot; method for late bound code was called with incorrect parameters. This has been fixed.</li>
      <li styleclass="List">Fixed some problems with translating usuals with a NIL value to string or object.</li>
      <li styleclass="List">In Xbase++ the Set() function also accepts strings with the value &quot;ON&quot; or &quot;OFF&quot; for logical settings. We are now allowing this too.</li>
      <li styleclass="List">Set(_SET_AUTOORDER) now accepts a numeric second parameter just like in VO (Vulcan was using a Logic parameter)</li>
      <li styleclass="List">We have added some support classes to the FoxPro class hierarchy for the FoxPro class support (Abstract, Custom and Collection). More classes will follow later.</li>
      <li styleclass="List">Fixed a problem with transform and &quot;@ez&quot; picture.</li>
    </list>
    <para styleclass="Heading2">VOSDK</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem in the SQLSelect class when re-opening a cursor.</li>
    </list>
    <para styleclass="Heading2">RDD System</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem reading Advantage MEMO fields</li>
      <li styleclass="List">Improved the error messages when an index cannot be opened due to an index expression with an error (for example a missing function)</li>
      <li styleclass="List">We have added the option to install an event handler in the RDD system. See the topic <link displaytype="text" defaultstyle="true" type="topiclink" href="Workarea-Events">Workarea Events</link> for more information.</li>
      <li styleclass="List">Skip, Gobottom and other workarea operations that change the current record will no longer set EOF to FALSE for workareas with 0 records.</li>
      <li styleclass="List">Clearing the scope in an Advantage workarea would throw an exception when there was no scope set. This has been fixed.</li>
      <li styleclass="List">Unlocking a record in an Advantage workarea would throw an exception when there was no record locked. This has been fixed.</li>
      <li styleclass="List">DbSetRelation() was not working correctly. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">VS Integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem with the code generation for DbServer and FieldSpec entities</li>
      <li styleclass="List">Added support for the Import and Export buttons in the DbServer Editor</li>
      <li styleclass="List">Improved entity parsing inside the editor in the Xbase++ dialect.</li>
      <li styleclass="List">The VS Parser was not colorizing the UDC tokens (including ENDFOR) unless the source file had preprocessor tokens itself. This has been fixed.</li>
      <li styleclass="List">Improved block detection for new END keywords.</li>
      <li styleclass="List">The VS Integration now recognized the class syntax for VFP type classes.</li>
      <li styleclass="List">Fixed a problem in the code that was checking to see which project system &quot;owns&quot; the PRG extension.</li>
      <li styleclass="List">Added compiler option to the Project Property pages to suppress generating a default Win32 manifest.</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">VOXPorter was ignoring entities that were not properly prototyped in VO. This has been fixed</text></li>
    </list>
    <para styleclass="Heading2">FoxPro dialect</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">We have added a compiler option /fox1 that controls the class hierarchy for objects. With /fox1 enabled (the default in the FoxPro dialect) all classes must inherit from the Custom class. The code generation for properties stores the values for properties in a collection inside the Custom class. With /fox1- properties will be generated as &quot;auto&quot; properties with a backing field.</li>
      <li styleclass="List">We have added support for FoxPro classes. See the topic <link displaytype="text" defaultstyle="true" type="topiclink" href="command_CLASS_Fox">FoxPro class</link> syntax for more information about what works and what doesn&apos;t work.</li>
      <li styleclass="List">We have added support for DIMENSION and DECLARE statements (which create a MEMVAR initialized with an array)</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.7 (Bandol GA 2.07)</para>
    <para styleclass="Heading2">Possible breaking change</para>
    <list id="81" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1"><text style="font-weight:normal; font-style:normal; color:#000000;">We have removed the #define CRLF from the standard header file. There is a DEFINE CRLF in XSharp.Core now. If you are compiling against Vulcan and you are seeing an error about a missing CRLF then you may want to add the following to your code:</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DEFINE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> CRLF := e”\r\n”</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="81" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">UDCs that were resulting in an empty list of tokens were triggering a compiler error in the preprocessor. This has been fixed.</text></li>
    </list>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Calling a method on an array would be translated to a ASend() with the method name as parameter when the method does not exist in the underlying array class.</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler will generate a warning now when this happens,. </text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler was producing incorrect code for (USUAL) casts. This has been fixed. In rare cases this may produce a compilation error. If that happens to you then simply create a usual by calling the USUAL constructor: &#160;USUAL{somevalue}</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed several problems with methods declared outside of a CLASS .. END CLASS</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">In the FoxPro dialect NOT, AND, OR and XOR are now allowed as alternate syntax for .NOT.,.AND., .OR. and .XOR.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">In the FoxPro dialect you can now include statements before the first entity in the file. The compiler will recognize these and will automatically create a function with the name of the source file and will add the code in these statements a body of this function.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler now allows to cast an integer expression to logic when /vo7 is enabled. The LOGIC(_CAST is always supported for expressions of type integer</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Incorrect use of language features (such as using a VOSTRUCT in the Core or FoxPro dialect) is now detected earlier by the compiler leading to somewhat faster compile times for incorrect code.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler now also initialized multi dimensional string arrays with an empty string when /vo2 is enabled, like in the code below:</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> TestClass</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">EXPORT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">DIM</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> aDim[3,3] </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text></li>
    </list>
    <list id="82" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1"><text style="font-weight:normal; font-style:normal; color:#000000;">In previous builds you could not set breakpoints on the source code line with a SELF() or SUPER() call if this line was immediately after the CONSTRUCTOR(). This has been fixed.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">When a project contains &quot;_DLL METHOD&quot;, &quot;_DLL ASSIGN&quot; or &quot;_DLL ACCESS&quot; (after exporting from VO) then the compiler will now generate a more meaningful errormessage.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler will no longer produce hundreds of the same error messages when a source file contains many of the same error. After 10 errors per source file the compiler will only report unique error numbers. So if your source code has 20 different error messages then you will still see 20 errors reported, but if your source contains the same error type 100 times then the list will be truncated after 10 errors.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compiler no longer allows code behind end tokens such as ENDIF or NEXT. The standard header file &apos;XSharpDefs.xh&apos; now includes rules that will eliminate these tokens. </text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The ++ and -- operators for the usualtype were not working for Date and Datetime values</li>
      <li styleclass="List">FErase() and FRename() now set FError() to 2 when the source file does not exist</li>
      <li styleclass="List">The File() function was throwing an exception for paths with invalid characters. It now returns FALSE and sets the Ferror() </li>
      <li styleclass="List">Several specific numbers were producing incorrect Str() results. This has been fixed.</li>
      <li styleclass="List">The case of the name of the Value property for several types was changed from Value to VALUE. This caused problems for people that were interfacing with X# code from C# code. The original case has been restored. This change has been reversed.</li>
      <li styleclass="List">Under certain situations the error stack would not contain the complete list of frames. This has been fixed.</li>
      <li styleclass="List">The size of the Close and Copy buttons of the Error Dialog has been enlarged so there is more space for translated strings</li>
      <li styleclass="List">The Pad..() functions were returning a padded version of &quot;NIL&quot; for NIL values. This was not compatible with Xbase++. They now return a string with all spaces. Btw: VO throw an exception when you call Pad..() with a NIL value.</li>
      <li styleclass="List">Fixed a problem with the PadC() function for values &gt; 1 character.</li>
      <li styleclass="List">We have changed the Val() function to be more compatible with Visual Objects</li>
      <li styleclass="List">The runtime contained a second overload for the Space() function that accepted an Int parameter. This was causing problems in the macro compiler. This overload has been removed. You may have to change your code because of that.</li>
      <li styleclass="List">Fixed a problem in EnforceType() and EmptyUsual() with the STRING type</li>
      <li styleclass="List">AEval and AEvalOld() now both pass the array index as second parameter to the codeblock that is evaluated</li>
    </list>
    <para styleclass="Heading2">RDD System</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem that EOF and BOF were not both set to true when opening an empty DBF with an index </text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem with DbSeek() and Found() for DBFNTX and DBFCDX</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The DBF class was not properly decoding field names and/or index expressions that contain Ascii characters &gt; 127 (field names like STRAßE)</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">File dates were updated when a dbf was closed even when nothing was changed. This has been fixed.</text></li>
      <li styleclass="List">The runtime now contains code that closes all open workareas at shutdown. This should help to prevent DBF or index corruption.</li>
      <li styleclass="List">The Advantage RDD was automatically doing a GoTop after the index order was changed. This no longer happens.</li>
      <li styleclass="List">The Advantage RDD now retries opening DBF and Index files a couple of times before failing.</li>
      <li styleclass="List">Fixed a small incompatibility between DBFCDX and AXDBFCDX</li>
    </list>
    <para styleclass="Heading2">VS Integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The Core Classlibrary template had a typo in a file name which caused it not to be loaded correctly</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The code generator for the Windows Forms editor was duplicating USING statements. This has been fixed. Duplicate using statements will be deleted when a form is opened and saved in the designer.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The compilation messages on the output window for the compile time and the number of warnings and errors is now only shown for the build verbosity normal and higher. The warnings and errors message is also shown for lower build verbosity if there are compiler errors.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The project system will no longer update the version number in the project file if the project file was created with build 2.0.1 or later.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem with setting and clearing the &quot;Specific version&quot; property for Assembly References.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The default templates for the VO compatible editors are now installed in the XSharp\Templates folder and the editor uses this location as &apos;fallback&apos; when you don&apos;t have templates in your project</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The Properties folder is now placed as first child in the tree of a Project, and the VO Binaries items are placed before resource items in the list of children of a source item in the tree.</text></li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">VOXPorter now prefixes Debug tokens with @@</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">VOXPorter now removes INSTANCE declaration for properties that are also declared as ACCESS/ASSIGN</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">VOXPorter now adds spaces between variable names that are delimited with .AND. or .OR.. So &#160;</text><text styleclass="Code Example">&quot;a.and.b&quot;</text><text style="font-weight:normal; font-style:normal; color:#000000;"> becomes </text><text styleclass="Code Example">&quot;a .and. b&quot;</text></li>
    </list>
    <para styleclass="Heading2">Documentation</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">We have &quot;lifted&quot; some of the documentation of the Visual Objects runtime functions and added these to our runtime documentation. This is &apos;work in progress&apos;, some topics will need some extra work.</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.6.0 (Bandol GA 2.06)</para>
    <para styleclass="Heading2">General</para>
    <list id="83" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1"><text style="font-weight:normal; font-style:normal; color:#000000;">We received a request to keep the version numbering simpler. For that reason this new build is called Bandol 2.06 and the file versions for this build are also 2.06. The assembly versions for the runtime assemblies are all 2.0, and we intend to keep those stable as long as possible, so you will not be forced to recompile code that depends on the runtime assemblies.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Several fixes that were meant to be included in 2.0.5.0 were not included in that build. This has been corrected in 2.0 6.0</text></li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">A missing ENDTEXT keyword now produces an error </text><link displaytype="text" defaultstyle="true" type="topiclink" href="XS9086" style="font-weight:normal; font-style:normal; color:#000000;">XS9086</link></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Unbalanced textmerge delimiters produce a warning </text><link displaytype="text" defaultstyle="true" type="topiclink" href="XS9085" style="font-weight:normal; font-style:normal; color:#000000;">XS9085</link></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The TEXT keyword in the FoxPro dialect is now only recognized when it is the first non whitespace token on a line. As a result of this you can use tokens like &lt;text&gt; in Preprocessor commands again.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The VO cast operations on literal strings no longer produce a compiler warning about possible memory leaks. </text></li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="List"><text styleclass="Heading2">Runtime</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Runtime errors in late bound code were always shown as TargetInvocationException. The true cause of the error was hidden that way. We are now unpacking the error and rethrowing the original error, including the callstack that was leading to that error</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Some texts in the string resources were updated</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Calling the Str() function with a -1 value for length and/or decimals produced results that were not compatible with VO. This was fixed.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem with </text><link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Functions_DbZap.htm" domain="XSharpRef.chm" styleclass="Normal">DBZap()</link><text style="font-weight:normal; font-style:normal; color:#000000;"> and files with a DBT memo.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">In some situations EOF and BOF were not set to TRUE when opening an empty DBF file. This has been fixed.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">PSZ values with an incorrect internal pointer are now displayed as &quot;&lt;Invalid PSZ&gt;(..)&quot;</text></li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="List"><text styleclass="Heading2">RDD System</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The code to read and write to columns in an Advantage workarea now uses separate column objects, just like the code for the DBF RDD. This makes the code a bit easier to understand and should make the code a bit faster.</text></li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="List"><text styleclass="Heading2">VS Integration</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The text block between TEXT and ENDTEXT is now displayed in the same color as literal strings</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The VO compatible Project Item templates no longer automatically add references to your project </text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Project files from version 2.01.0 and later will no longer be &quot;touched&quot; when opening with this version of the X# project system, since there have been no changes to the project file format since that build.</text></li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="List"><text styleclass="Heading2">VOXporter</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The CATCH block in the generated Start function now calls ErrorDialog() to show the errors. This uses the new language resources to display the full error with VO compatible error information (Gencode, Subcode etc)</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.5.0 (Bandol GA 2.01)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Blank lines after an END PROPERTY could confuse the compiler. This has been fixed</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The TEXT .. ENDTEXT command has been implemented in the compiler (FoxPro dialect only)</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The \ and \\ commands have been implemented (FoxPro dialect only)</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Procedures in the FoxPro dialect may now return values. Also the /vo9 options is now enabled by default in the FoxPro dialect. The default return value for a FUNCTION and PROCEDURE is now TRUE in the foxpro dialect and NIL in the other dialects.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Error messages no longer refer to Xbase types by their internal names (XSharp.__Usual) but by their normal name (USUAL).</text></li>
    </list>
    <para styleclass="Heading2">MacroCompiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Creating classes with a namespace prefix was not working. This has been fixed.</text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem with ArrayNew() and multiple dimensions</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">When calling constructor of the Array class with a number the elements were already initialized. This was not compatible with Vulcan.NET. There is now an extra constructor whtich takes a logical parameter lFill which can be used to automatically fill the array</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">The text for the ERROR_STACK language resource has been updated</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Calling Str() with integer numbers was returning a slightly different result from VO. This has been fixed.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Added support functions for TEXT .. ENDTEXT and TextMerge and an output text file.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem in the DTOC() function</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">You can now add multiple ImplicitNamespace attributes to an assembly</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">We have added several FoxPro system variables (only _TEXT does something at this moment)</text></li>
    </list>
    <para styleclass="Heading2">RDDs</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Zap and Pack operations were not properly setting the DBF file size</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">An Append() in shared mode was not properly setting the RecCount</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Opening a file with one of the Advantage SQL RDDs was not working. This has been fixed. </text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Writing DateTime.Minvalue to a DBF would not write an empty date but the date 1.1.1 This has been fixed.</text></li>
    </list>
    <para styleclass="Heading2">VO SDK</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Fixed a problem in ListView:EnsureVisible(). </text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Some questionable casts (such as the one that cause the previous problem) have been cleaned up</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">Parameter tips for constructor calls were off by one parameter. This has been fixed.</text></li>
      <li styleclass="List"><text style="font-weight:normal; font-style:normal; color:#000000;">When looking for types, the XSharp namespace is now the first namespace that is searched. </text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.4.0 (Bandol GA)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fix a problem in assignment expressions where the Left side is an aliased expression with a workarea in parentheses:<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(nArea)-&gt;LastName := AnotherArea-&gt;LastName</text></li>
      <li styleclass="List"><text styleclass="Body Text">Multiline statements, such as FOR blocks, no longer generate Multiline breakpoints in the debugger.</text></li>
      <li styleclass="List"><text styleclass="Body Text">Fixed a problem where blank lines or lines with &apos;inactive&apos; preprocessor comments after a class definition would generate a compiler error.</text></li>
      <li styleclass="List"><text styleclass="Body Text">Errors for implicit conversions between INT/DWORD and PTR now produce a better error message when they are not supported.</text></li>
      <li styleclass="List"><text styleclass="Body Text">USUAL.ToObject() could not be called with the latebinding compiler option was enabled. This has been fixed.</text></li>
      <li styleclass="List"><text styleclass="Body Text">Fixed an internal compiler error with untyped STATIC LOCALs.</text></li>
      <li styleclass="List"><text styleclass="Body Text">Fixed a problem with aliased expressions.</text></li>
      <li styleclass="List"><text styleclass="Body Text">Indexing PSZ values is no longer affected by the /az compiler option</text></li>
    </list>
    <para styleclass="Heading2">MacroCompiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem with some aliased expressions</li>
      <li styleclass="List">The macro compiler now detects that you are overriding a built-in function in your own code and will no longer throw an &quot;ambigous method&quot; exception but will choose function from your code over functions defined in the X# runtime</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">FIxed several problems in the Directory() function</li>
      <li styleclass="List">Fixed problem with indexing PSZ values</li>
      <li styleclass="List">Added StackTrace property on the Error object so also errors caught in a BEGIN SEQUENCE will have stack information.</li>
      <li styleclass="List">Fixed problems with &quot;special&quot; float values and ToString(), such as NaN, PositiveInfinity</li>
      <li styleclass="List">Fixed a problem with RddSetDefault() with a null parameter</li>
      <li styleclass="List">DbInfo(DBI_RDD_LIST) was not returning a value. This has been fixed.</li>
      <li styleclass="List">We have updated many of the language resources, Also the Error:ToString() now uses the language resources for captions like &apos;Arguments&apos; and &apos;Description&apos;.</li>
      <li styleclass="List">Low level file errors now include the callstack</li>
      <li styleclass="List">Fixed some problems in AsHexString()</li>
      <li styleclass="List">The DosErrString() no longer gets its messages from the language string tables. The messages have been removed and also the related members in the XSharp.VOErrors enum.</li>
      <li styleclass="List">Added a Turkish language resource.</li>
    </list>
    <para styleclass="Heading2">RDD System</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fix locking problem in FPT files</li>
      <li styleclass="List">Fixed several problems with OrdKeyCount() and filters, scopes and <link displaytype="text" defaultstyle="true" type="topiclink" href="html\Overload_XSharp_Core_Functions_SetDeleted.htm" domain="XSharpRef.chm" styleclass="Normal">SetDeleted()</link><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">&#32;</text> setting</li>
      <li styleclass="List">Some DBF files have a value in the Decimals byte for field definitions for field types that do not support decimals. This was causing problems. These decimals are now ignored.</li>
      <li styleclass="List">Opening and closing a DBF without making changes was updating the time stamp. This has been fixed.</li>
      <li styleclass="List">Fixed problems in Pack() and Zap()</li>
      <li styleclass="List">Fixed a problem where custom indexes were accidentally updated.</li>
      <li styleclass="List">Fixed several problems with OrdKeyCount() in combination with Filters, SetDeleted() and scopes.</li>
    </list>
    <para styleclass="Heading2">VO SDK Classes</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Most of the libraries now compile with &quot;Late Binding&quot; disabled for better performance. <br/>To help in doing this some typed properties have been added such as SqlStatement:__Connection which is typed as SQLConnection. </li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem in the Brace matching code</li>
      <li styleclass="List">Improved Brace matching for keywords. Several BEGIN .. END constructs have now been included as well as CASE statements inside DO CASE and <text styleclass="Body Text">SWITCH</text>, RECOVER, FINALLY, ELSE, ELSEIF and OTHERWISE</li>
      <li styleclass="List">Fix a problem with adding and deleting references when unloaded or unavailable references existed.</li>
    </list>
    <para styleclass="Heading2">VOXPorter</para>
    <list id="84" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1"><text styleclass="List">The program is now able to comment, uncomment and delete source code lines from the VO code when exporting to XSharp. </text><br/>You have to add comments at the end of the line. The following comments are supported:</li>
    </list>
    <para styleclass="Code Example" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; white-space:nowrap; border:none; tabstops:none;"><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">// VXP-COM : comments the line when exporting it</text><br/><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">// VXP-UNC : uncomments the line</text><br/><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">// VXP-DEL : deletes the line contents</text><br/><br/><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">example:</text><br/><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">// METHOD ThisMethodDoesNotGetDefinedInVOcode() // VXP-UNC</text><br/><tab /><tab /><text style="font-family:&apos;Courier New&apos;; vertical-align:baseline; color:#000000;">// RETURN NIL // VXP-UNC</text></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.3.0 (Bandol RC3)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Code generation for STATIC LOCALs of type STRING was not initializing the variables to an empty string when /vo2 was selected. We have also improved code generation for STATIC LOCALs when they are initialized with a compile time constant</li>
      <li styleclass="List">In preparation for the support for variables passed by reference to functions/methods with clipper calling convention we are now assigning back the locals variables to the parameter array at the end of a function/method with clipper calling convention.</li>
      <li styleclass="List">The compiler would not complain if you were assigning a value of one enum to a variable of another enum. This has been fixed.</li>
      <li styleclass="List">Added support for the FoxPro &apos;=&apos; assignment operators. Other dialects also allow the assignment operator but a warning is generated in the other dialects.</li>
      <li styleclass="List">Xbase++ classes inside BEGIN NAMESPACE .. END NAMESPACE were not recognized. This has been fixed.</li>
      <li styleclass="List">Statements inside WITH blocks are no longer constrained to assignment expressions and method calls. You can now use the WITH syntax for expressions anywhere inside a WITH block. If the compiler can&apos;t find the WITH variable then it will output a new error message (<link displaytype="text" defaultstyle="true" type="topiclink" href="XS9082" styleclass="Body Text">XS</link><link displaytype="text" defaultstyle="true" type="topiclink" href="XS9082">9082</link>)</li>
      <li styleclass="List">Updated the Aliased Expression rules to make sure that compound expressions properly respect the parentheses.</li>
      <li styleclass="List">The __DEBUG__ macro was not always set correctly. We have changed the algorithm that sets this macro. When the DEBUG define is set then this macro gets defined. When the NDEBUG define is set then this macro is not defined. When both defines are absent then __DEBUG__ is NOT set. </li>
      <li styleclass="List">The compiler was allowing you to use the &apos;+&apos; operator between variables/ expressions of type string and logic. This is now flagged as an error.</li>
    </list>
    <para styleclass="Heading2">MacroCompiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a problem with resolving Field names that were identical to keywords or keyword abbreviations (for example DATE and CODE) and for Field names that are equal to built-in function names (such as SET)</li>
      <li styleclass="List">Fixed a problem where a complicated expression evaluated with an alias prefix was not evaluated correctly. </li>
      <li styleclass="List">The macro compiler initializes itself from the Dialect option in the runtime to enable/disable certain behavior.</li>
      <li styleclass="List">The macro compiler now recognizes the &quot;.&quot; operator for workarea access and memvar access when running in the FoxPro dialect.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Added functions FieldPutBytes() and FieldGetBytes()</li>
      <li styleclass="List">Added function ShowArray()</li>
      <li styleclass="List">Added several defines that were missing, such as MAX_ALLOC and ASC_A.</li>
      <li styleclass="List">Added Crypt() overloads that accept BYTE[] arguments</li>
      <li styleclass="List">The ClassDescribe() method for DataObject classes (XPP dialect) now includes properties and methods that were dynamically added.</li>
      <li styleclass="List">Fixed a problem with the RELEASE command for MemVars. This was also releasing variables defined outside the current function / method.</li>
      <li styleclass="List">There is now also a difference between the FoxPro dialect and other dialects in the behavior of the RELEASE command. <br/>FoxPro completely deletes the variables, the other dialect set the value of the variables to NIL.</li>
      <li styleclass="List">New PRIVATE memvars are initialized to FALSE in the FoxPro dialect. In the other dialects they are initialized to NIL.</li>
      <li styleclass="List">Some numeric properties in the RuntimeState were giving a problem when a numeric of one type was written and another numeric type was expected when reading. This has been fixed.</li>
      <li styleclass="List">Fixed a problem with return NIL values from Macro compiled codeblocks.</li>
      <li styleclass="List">The parameter to DbClearScope() is now optional</li>
      <li styleclass="List">The USUAL type now allows to compare between values of type PTR and LONG/INT64 The PTR value is converted to the appropriate Integral type and then an Integral comparison is done.</li>
      <li styleclass="List">The USUAL type now also allows comparisons between any type and NIL. </li>
      <li styleclass="List">Casts from USUAL values to SHORT, WORD, BYTE and SBYTE are no longer checked to be compatible with VO. </li>
    </list>
    <para styleclass="Heading2">RDD System</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Added support for different block sizes in DBFFPT. </li>
      <li styleclass="List">DBFFPT now allows to override the block size (when creating) from the users code. Please note that block sizes &lt; 32 bytes prevent the FPT from opening in Visual FoxPro.</li>
      <li styleclass="List">Added support for reading various Flexfile memo field types, including arrays.</li>
      <li styleclass="List">Added support for writing to FPT files</li>
      <li styleclass="List">When creating FPT files we now also write the FlexFile header. Please note that our FPT driver does not support &quot;record recycling&quot; for deleted blocks like FlexFile does. We also only support writing STRING values to FPT files and Byte[] values.</li>
      <li styleclass="List">Added support for Visual FoxPro created CDX files that were created with the COLLATE option. The RDD dll now contains collation tables for all possible combinations of collation and CodePage.</li>
      <li styleclass="List">Added support for USUALs with a NIL value and the comparison operators (&gt;, &gt;=, &lt;, &lt;=). These operators return FALSE, except the &gt;= and &lt;= operators which return TRUE when both sides of the comparison are NIL.</li>
      <li styleclass="List">We exposed several Advantage related function and types. Also the function AdsConnect60() was defined. We have not created functions for all available functions in Ace32 and Ace64, but only the ones needed in the RDD.</li>
      <li styleclass="List">If you are missing a function in the ACE class, please let us know. All functions should be available and accessible now in the Ace32 and Ace64 classes or in the ACEUNPUB32 or ACEUNPUB64 classes.</li>
      <li styleclass="List">The ADS RDD was returning incorrect values for LOGIC fields.</li>
      <li styleclass="List">Fixed some problems with skipping in CDX indexes and scopes and filters.</li>
      <li styleclass="List">Executing DbGoTop() twice or DbGoBottom() twice for DBFCDX would confuse the RDD. This has been fixed.</li>
      <li styleclass="List">Fixed a problem with Seeking() in an empty DBF file</li>
      <li styleclass="List">FieldPut for STRING fields in the Advantage RDD now truncates the fields to the maximum length of the field before assigning the value</li>
      <li styleclass="List">Fixed a problem with UNIQUE CDX Indexes.</li>
      <li styleclass="List">You can now create VFP compatible DBF files with DBCreate(). To do so use the following field types (apart from the normal CDLMN):</li>
    </list>
    <para styleclass="Body Text" style="margin-left:104px;">W<tab />Blob<br/>Y<tab />Currency<br/>B<tab />Double<br/>T<tab />DateTime<br/>F<tab />Float<br/>G<tab />General<br/>I<tab />Integer<br/>P<tab />Picture<br/>Q<tab />Varbinary<br/>V<tab />Varchar</para>
    <para styleclass="Body Text" style="margin-left:104px;">Special field flags can be indicated by adding a suffix to the type:</para>
    <para styleclass="Body Text" style="margin-left:104px;">&quot;0&quot; = Nullable<br/>&quot;B&quot; = Binary<br/>&quot;+&quot; = AutoIncrement</para>
    <para styleclass="Body Text" style="margin-left:104px;">So this creates a nullable date: &quot;D0&quot; and this creates an autoincremental integer &quot;I+&quot;.</para>
    <para styleclass="Body Text" style="margin-left:104px;">Auto increment columns are initialized with a counter that starts with 1 and a step size of 1. You can change that by calling DbFieldInfo:</para>
    <para styleclass="Normal"><tab /><tab /><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">DbFieldInfo(DBS_COUNTER, 1, 100) </text><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// sets the counter for field 1 to 100</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; </text><tab /><tab /><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">DbFieldInfo(DBS_STEP, 1, 2) &#160; </text><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:italic; color:#339966;">// sets the step size for field 1 to 2</text></para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Fixed a locking problem with FPT files opened in shared mode</li>
      <li styleclass="List">Fixed several problems related to OrderKeyCount() and various settings of Scopes and SetDeleted() &#160;in the DBFCDX RDD.</li>
    </list>
    <para styleclass="Heading2">VO SDK Classes</para>
    <list id="85" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem in the DateTimePicker class when assigning only a time value.</li>
      <li styleclass="List">System classes and RDD classes have been cleaned up somewhat and now compile in AnyCPU mode. So this means that you can use the DbServer class in a 64 bit program !<br/>The projects for these two libraries also no longer have the &quot;Late Binding&quot; compiler option enabled. There is still some late bound code in these libraries but this code now uses explicit late bound calls such as Send(), IVarGet() and IVarPut().</li>
      <li styleclass="List">Because of the change in the handling of __DEBUG__ some SDK assemblies are not better optimized.</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Added support for WITH .. END WITH blocks in the editor</li>
      <li styleclass="List">When generating Native Resources (RC files) the BuildSystem now sets a #define __VERSION__. This will have the fileversion number of the XSharp.Build.DLL without the dots. (2.1.0.0 will be written as &quot;2100&quot;)</li>
      <li styleclass="List" style="text-indent:-100px; margin-left:100px;">The XSharp help item in the VS Help menu now opens the local Help (CHM) file</li>
      <li styleclass="List">Fixed a problem in the WCF service template</li>
      <li styleclass="List">Correction to the multi line indenting for code that uses attributes</li>
      <li styleclass="List">Code generation for new Event handlers now includes a RETURN statement, even when VS does not add one to the statement list</li>
      <li styleclass="List">The intellisense option &quot;Show completionlist after every character&quot; has been disabled since it was having a negative impact on performance and would also insert keywords with @@ characters in front of them.</li>
      <li styleclass="List">Several changes to the code parsing for the Windows Forms editor. Comments and Regions should now be saved and regenerated as well as attributes on classes. Also code generation for images from project resources has been fixed as well as parsing of static fields and enumerators declared in the same assembly.<br/><text style="font-weight:bold;">Please note</text>. If you are using values from types defined in the same assembly as the form then the assembly needs to be (re)compiled first before the form can be successfully opened in the Windows Forms Editor.</li>
      <li styleclass="List">New methods generated from the Windows forms editors will now be generated with a closing RETURN statement.</li>
      <li styleclass="List">We have made some improvements to the presentation of QuickInfo in the source code editor.</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">VOXporter now also exports VERSIONINFO resources</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.2.0 (Bandol RC 2)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">File wide PUBLIC declarations (for MEMVARs) were incorrectly parsed as GLOBALs. Therefore they were initialized with NIL and not with FALSE. They are now generated correctly as public Memvars. The creation of the memvars and the initialization is done in after the Init3 procedures in the assembly have run.</li>
      <li styleclass="List">Instance variable initializers now can refer other fields and are allowed to use the SELF keyword. This is still not recommended. The order in which fields are initialized is the order in which they are found in the source code. So make sure the field initializers are defined in the right order in your code. </li>
      <li styleclass="List">AUTO properties are now also initialized with an empty string when /vo2 is enabled.</li>
      <li styleclass="List">The compiler was allowing you to define instance variables for Interfaces. They were ignored during code generation. Now an error message is produced when the compiler detects fields on interfaces.</li>
      <li styleclass="List">When the compiler detects 2 ambiguous symbols with different types (for example a LOCAL and a CLASS with the same name) then the error message now clearly indicates the type for each of these symbols.</li>
      <li styleclass="List">Fixed an exception in the Preprocessor</li>
    </list>
    <list id="86" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">Added support for the FoxPro runtime DLL.</li>
    </list>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">The ANY keyword (an alias for USUAL) is no longer supported.</li>
      <li styleclass="List">Keywords that appear after a COLON (&quot;:&quot;) DOT (&quot;.&quot;) or ALIAS (-&gt;) operator are no longer parsed as keyword but as identifier. This should solve issues with parsing code that for example accesses the Date property of a DateTime class. </li>
      <li styleclass="Body Text"><text styleclass="List">We have added support for the </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">WITH</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> .. </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">WITH</text><text styleclass="List"> statement block:</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> oPerson </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">oPerson := Person{}</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">WITH</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> oPerson</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; :FirstName := &quot;John&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; :LastName := &quot;Doe&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; :Speak()</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">WITH</text><br/>You can also use the DOT (.) as prefix for the names. The only expressions allowed inside WITH .. ENDWITH are assignments and method calls (like you can see above)</li>
      <li styleclass="List"><text styleclass="Body Text">Added support for the FoxPro LPARAMETERS statement. Please not that a function or procedure can only have a PARAMETERS keyword OR a LPARAMETERS keyword OR declared parameters (names between parentheses on the FUNCTION/PROCEDURE line)</text></li>
      <li styleclass="List"><text styleclass="Body Text">Added support for the FoxPro THIS keyword and .NULL. keyword</text></li>
      <li styleclass="List">We have added support for the FoxPro Date Literal format {^2019-06-21} and FoxPro DateTime Literals {^2019-06-21 23:59:59}.</li>
      <li styleclass="List">Date literals and DateTime literals are now also supported in the Core dialect. Date Literals will be represented as DateTime values in the Core dialect.</li>
      <li styleclass="List">The standard header file xsharpdefs.xh now conditionally includes header files for the Xbase++ dialect and FoxPro dialect. These header files do not have much content at this moment, but that will change in the coming months.</li>
      <li styleclass="List">When the compiler detects that some header files are included but that the defines in these header files are also available as constants in references assemblies then a warning will be generated and the include file will be skipped (<link displaytype="text" defaultstyle="true" type="topiclink" href="XS9081">XS9081</link>)</li>
      <li styleclass="List">The compiler now supports an implicit function _ARGS(). This will be resolved to the arguments array that is passed to functions/methods with clipper calling convention. This can be used to pass all the arguments of a function/method to another function/method.</li>
      <li styleclass="List">We have added the TEXT ... ENDTEXT command for the FoxPro dialect. The string inbetween the TEXT and ENDTEXT lines is passed to a special runtime function __TextSupport that will receive 5 parameters: the string, the merge, NoShow, Flags and Pretext arguments. You will have to define this function yourself for now. it will be included in the XSharp Foxpro runtime in a future version. </li>
      <li styleclass="List"><text styleclass="Body Text">We have added support for END keywords for all entity types that did not have one yet. The new end keywords are </text><text styleclass="Body Text" style="font-weight:bold;">optional</text><text styleclass="Body Text">. They are listed in the table below. The FoxPro ENDPROC and ENDFUNC keywords will be mapped to END PROCEDURE and END FUNCTION with a UDC.</text></li>
    </list>
    <para styleclass="List1"><table styleclass="Default" rowcount="10" colcount="2" style="width:auto; page-break-inside:avoid;">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">Start</para>
        </td>
        <td>
          <para styleclass="List1">End</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">PROCEDURE</para>
        </td>
        <td>
          <para styleclass="List1">END PROCEDURE</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">PROC</para>
        </td>
        <td>
          <para styleclass="List1">END PROC</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">FUNCTION</para>
        </td>
        <td>
          <para styleclass="List1">END FUNCTION</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">FUNC</para>
        </td>
        <td>
          <para styleclass="List1">END FUNC</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">METHOD</para>
        </td>
        <td>
          <para styleclass="List1">END METHOD</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">ASSIGN</para>
        </td>
        <td>
          <para styleclass="List1">END ASSIGN</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">ACCESS</para>
        </td>
        <td>
          <para styleclass="List1">END ACCESS</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">VOSTRUCT</para>
        </td>
        <td>
          <para styleclass="List1">END VOSTRUCT</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="List1">UNION</para>
        </td>
        <td>
          <para styleclass="List1">END UNION</para>
        </td>
      </tr>
    </table></para>
    <list id="87" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler now registers the Dialect of the main in the Dialect property of the RuntimeState (Non Core dialects only)</li>
    </list>
    <para styleclass="Heading2">MacroCompiler</para>
    <list id="88" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with escaped literal strings</li>
    </list>
    <list id="89" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with implicit narrowing conversions</li>
      <li styleclass="List1">Fixed a problem with macro compiled alias operations &#160;(Customer)-&gt;&amp;fieldName</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="90" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem in the Round() function.</li>
      <li styleclass="List1">Fixed a problem in the ExecName() function.</li>
      <li styleclass="List1">Added FoxPro runtime DLL.</li>
      <li styleclass="List1">Added XML support functions in the Xbase++ dialect runtime</li>
      <li styleclass="List1">Added support for dynamic class creation in the Xbase++ dialect runtime.</li>
      <li styleclass="List1">Fixed a problem in the Push-Pop workarea code for aliased expressions.</li>
      <li styleclass="List1">converting a NULL to a symbol would cause an exception. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">RDD system</para>
    <list id="91" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed several problems in the ADS RDD</li>
      <li styleclass="List1">The DBFCDX RDD is now included</li>
      <li styleclass="List1">The DBFVFP RDD is now included. This RDD can be used to access files with DBF/FPT/CDX extension and support the Visual Foxpro field types, such as Integer, Double, DateTime and VarChar. Reading files should be fully supported. Writing should also work with the exception of the Picture and General formats and with the exception of the AutoIncremental Integer fields. You can also use the RDD to open the various &quot;definition&quot; files from VFP such as projects, forms and reports. The RDD &apos;knows&apos; about the different extensions for indexes and memos. You can also open DBC files as normal tables. In a future version we will support the VFP database functionality.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="92" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">You can now specify that multi line statements should indent on the 2nd and subsequent lines.</li>
      <li styleclass="List1">Type lookup for functions inside a BEGIN NAMESPACE .. END NAMESPACE did not include the types in this namespace.</li>
      <li styleclass="List1">Started intellisense for INLINE methods in the Xbase++ dialect</li>
      <li styleclass="List1">Fixed several problems in intellisense</li>
      <li styleclass="List1">Improved intellisense for VAR keywords declared in a FOREACH loop</li>
      <li styleclass="List1">Several other (smaller) improvements.</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="93" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">VOXporter now writes DEFINES in the RC files and no longer literal values.</li>
      <li styleclass="List1">VOXporter: fix for module names with invalid chars for filenames</li>
    </list>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.1.0 (Bandol RC 1)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for the so called IF Pattern Expression syntax, which consists of an IS test and an assignment to a variable, prefixed with the VAR keyword:<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> x </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">is</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Foo </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VAR </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">oFoo</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oFoo:DoSomething()</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/><br/><text styleclass="Body Text">The variable oFoo introduced in the expression will only be visible inside the IF statement.</text><br/><text styleclass="Body Text">Of course you can also use the pattern on other places, such as ELSEIF blocks, CASE statements, WHILE expressions etc:</text><br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> x </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">is</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Foo </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VAR </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">oFoo</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oFoo:DoSomething()</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ELSEIF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> x </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">is</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Bar </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VAR </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">oBar</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oBar:DoSomethingElse()</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><br/></li>
      <li styleclass="List1">Fixed a problem with method modifiers and generic methods</li>
      <li styleclass="List1">Fixed a problem with partial classes with different casing and destructors</li>
      <li styleclass="List1">Fixed a problem with Interfaces and methods with CLIPPER calling convention</li>
      <li styleclass="List1">The compiler now generates an error (9077) when an ACCESS or ASSIGN method has Type Parameters and/or Constraint clauses</li>
      <li styleclass="List1">Fixed a problem with DEFINEs with specific binary numeric values. Also overflow checking is now always of when calculating the result of numeric operations for the values of a DEFINE.</li>
      <li styleclass="List1">When a constant value was added or subtracted to a numeric value &lt; 32 bits then the result was seen as 32 bits by the compiler. This sometimes forced you to use casts in your code. With this change that cast is no longer necessary.</li>
      <li styleclass="List1">The compiler allowed you to concatenate non string values and strings and was automatically calling ToString() on the non strings. This is no longer possible. The compiler now generates an error (9078)when it detects this.</li>
      <li styleclass="List1">We have added error trapping code to the compiler that should route internal errors to compiler error <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9999">XS9999</link>. If you see such an error, please let us know.</li>
      <li styleclass="List1">DIM arrays of literal strings are now initialized properly.</li>
      <li styleclass="List1">There was a problem when switching between dialects when using the shared compiler. It would sometimes no longer detect dialect specific keywords. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem where incorrect code was producing an error &quot;Failure to emit assembly&quot;</li>
      <li styleclass="List1">Fixed a problem in code that uses _CAST to cast a 32 bits value to 16 bits</li>
      <li styleclass="List1">Fixed a problem with overloaded indexed properties where the index parameter in a subclass has a different type than the index parameter in the super class.</li>
      <li styleclass="List1">Changed implementation of several aliased operations (ALIAS-&gt;FIELD and (ALIAS)-&gt;(Expression))</li>
      <li styleclass="List1">Changed preprocessor handling of extended strings ( (&lt;token&gt;) )</li>
      <li styleclass="List1">The Roslyn code was not marking some variables as &apos;assigned but not read&apos; to be compatible with the old C# compiler. We are now flagging these assignments with a warning. This may produce a lot of warnings in your code that were not detected before.<br/>To support this we have received some requests to &quot;open up&quot; the support for 1 based indexes in the compiler. In the past the compiler would only allow 1 based indexing for variables of type System.Array or of the XBase ARRAY Type. <br/>We have now added a couple of interfaces to the runtime. If your type implements one of these interfaces then the compiler will recognize this and allow you to use 1 based indexes in your code and then the compiler will automatically subtract 1 from the numeric index parameter. The XSharp ARRAY type and ARRAY OF type now also implement (one of) these interfaces/<br/>The interfaces are:<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> IIndexer</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PROPERTY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SELF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">[index </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PARAMS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">[]] </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">GET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> IIndexedProperties</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PROPERTY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SELF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">[index </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ] </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">GET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PROPERTY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SELF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">[name &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">] </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">GET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> INamedIndexer</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PROPERTY</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SELF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">[index </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, name </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">] </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">USUAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">GET</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">SET</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed some problems in the OrderInfo() function</li>
      <li styleclass="List1">Fixed several problems with DB..() functions in the runtime</li>
      <li styleclass="List1">Fixed several problems with the macro compiler</li>
      <li styleclass="List1">Fixed a problem with the handling of default parameters in late bound calls to methods</li>
      <li styleclass="List1">Improved error messages for missing methods and/or properties in late bound code.</li>
      <li styleclass="List1">The Select() function was changing the current workarea. This has been fixed.</li>
      <li styleclass="List1">Converting a USUAL to a STRING was not throwing the same exceptions as VO. It was always calling ToString() on the USUAL. Now the behavior is the same as in VO.</li>
      <li styleclass="List1">F_ERROR has been defined as a PTR now and no longer as numeric</li>
      <li styleclass="List1">CreateInstance can now also find classes defined in namespaces</li>
      <li styleclass="List1">Fix problems with missing parameters in late bound code. Also added (limited) support for calling overloaded methods and constructors in late bound code.</li>
      <li styleclass="List1">Fixed problems with TransForm(), and several of the Str() functions.</li>
      <li styleclass="List1">XSharp.Core is now fully compiled as Safe code.</li>
      <li styleclass="List1">Fixed a problem with late bound assigns and access</li>
      <li styleclass="List1">NIL&lt;-&gt; STRING comparisons are now compatible with Visual Objects</li>
      <li styleclass="List1">Fixed problem with AEval() and missing parameters</li>
      <li styleclass="List1">Added Set() function. Please be careful when using header files for _SET defines. There are subtle differences between the definitions in Harbour, Xbase++ and VO/Vulcan.<br/>We recommend NOT to use the defines from the header file but to use the defines that are defined inside the X# runtime DLLs</li>
      <li styleclass="List1">Changed implementation of the functions used by the compiler for Aliased operations</li>
    </list>
    <para styleclass="Heading2">RDD system</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for DBF character fields up to 64K.</li>
      <li styleclass="List1">Implemented the DBFCDX RDD</li>
      <li styleclass="List1">Fixed several problems related to the DBFNTX RDD </li>
      <li styleclass="List1">The DBF RDD was using the incorrect locking scheme for Ansi DBF files. It now uses the same scheme as VO and Vulcan.</li>
      <li styleclass="List1">Macro compiled index expressions are not of the type _CodeBlock and not of the type RuntimeCodeBlock (the RuntimeCodeblock is encapsulated inside the _CodeBlock object). <br/>That prevents problems when storing these expressions inside a USUAL</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed an exception that could occur when typing a VAR expression</li>
      <li styleclass="List1">When the project system makes a backup of a project file, we are now making sure that Readonly flags are cleared before writing to or deleting existing files.</li>
      <li styleclass="List1">Reading intellisense data from C++ projects could send the intellisense engine into an infinite loop. This has been fixed.</li>
      <li styleclass="List1">The changes to the Form.Designer.prg are now written to disk immediately, to make sure that changes to the form are recompiled if you press &apos;Run&apos; or &apos;Debug&apos; from the window of the form editor</li>
      <li styleclass="List1">Improved support for intellisense for the VAR keyword.</li>
      <li styleclass="List1">Added support for FoxPro on the Project Properties page to prepare for the Compiler and Runtime changes for FoxPro.</li>
      <li styleclass="List1">.CH files are now also recognized as &quot;X#&quot; files in Visual Studio.</li>
      <li styleclass="List1">You can now control the characters that select an entry from a Completion List. For example the DOT and COLON now also select the current selected element. The complete list can be found on the Tools-Options-TextEditor-XSharp-Intellisense page.</li>
      <li styleclass="List1">Assemblies added to a project would not be properly resolved until the next time the project was loaded. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem in the codedom parser which feeds the windows form editor. You can now inherit a form from another form in the same assembly. You will have to compile the project first (of course).</li>
      <li styleclass="List1">The .CH extension is now also registered as relevant for the X# project system.</li>
      <li styleclass="List1">Changed auto indentation for #ifdef commands</li>
      <li styleclass="List1">Fixed an exception that could occur during loading of project files with COM references.</li>
      <li styleclass="List1">Added templates for class libraries in XPP and VO Dialect</li>
      <li styleclass="List1">Sometimes a type lookup for intellisense was triggered inside a comments region. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">VOXPorter was not removing calling conventions when creating delegates. This has been fixed</li>
      <li styleclass="List1">VOXporter was sometimes generating project files with many duplicates of resource items. This has been fixed.</li>
      <li styleclass="List1">VOXporter now marks prefix identifiers that conflict with one of the new keywords with &quot;@@&quot;</li>
      <li styleclass="List1">The delay for the VOXporter welcome screen has been shortened.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.9 (Bandol Beta 9)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="79" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The Lexer (the part of the compiler that recognizes keywords, literals etc) has been rewritten and is slightly faster.</li>
      <li styleclass="List1">The compiler now supports digit separators for numeric literals. So you can now write 1 million as:<br/><text styleclass="Code Example">1_000_000</text></li>
    </list>
    <list id="94" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed problem where static local variables were not initialized with &quot;&quot; even when compiler option -vo2 was selected</li>
      <li styleclass="List1">#ifdef commands using preprocessor macros such as __XSHARP_RT__ were not working correctly.</li>
      <li styleclass="List1">The Xbase++ dialect now also supports the &apos;normal&apos; class syntax.</li>
      <li styleclass="List1">We had changed the &apos;Entrypoint&apos; algorithm in Beta 8. This has been restored now and the <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-main"> -main</link> command line option now works again as well. In stead the &quot;body&quot; of the Start method is now encapsulated in an anonymous function.</li>
    </list>
    <list id="95" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Duplicate include files no longer produce an error but a warning</li>
      <li styleclass="List1">Fix for problem with default parameter values with &apos;L&apos; or &apos;U&apos; suffix</li>
      <li styleclass="List1">Added compiler error when specifying default parameter values for methods/functions with clipper calling convention</li>
      <li styleclass="List1">DIM arrays of STRING were not initialized with &quot;&quot; when /vo2 was specified. This has been fixed.</li>
      <li styleclass="List1">Added support for Dbase style memory variables (MEMVAR, PUBLIC, PRIVATE, PARAMETERS). See the <link displaytype="text" defaultstyle="true" type="topiclink" href="Memory-Variables">MEMVAR</link> topic in the help file for more information. This is only available for certain dialects and also requires the<link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar"> /memvar</link> commandline option</li>
      <li styleclass="List1">Added support for undeclared variables (this is NOT recommended!). This is only available for certain dialects and requires the<link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar"> /memvar</link> AND the <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-undeclared">/undeclared</link> commandline options </li>
      <li styleclass="List1">Fixed a problem for comparisons between USUAL variables and STRING variables</li>
      <li styleclass="List1">Fixed a problem with partial classes where the classname had different casing in the various declarations</li>
      <li styleclass="List1">Fixed a problem with numeric default parameters with L or U suffixes</li>
      <li styleclass="List1">Fixed a problem with line continuation semi colons followed by a single line comment with the multiline comments style.</li>
      <li styleclass="List1">Fixed a problem with methods containing <link displaytype="text" defaultstyle="true" type="topiclink" href="command_YIELD">YIELD</link> statements in combination with compiler option <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo9">/vo9</link></li>
      <li styleclass="List1">When a visibility modifier was missing on a generic method then this method was created as a private method. This has been fixed.</li>
      <li styleclass="List1">When choosing between overloaded functions in XSharp.RT and XSharp.Core the function in the XSharp.RT assembly would sometimes be chosen although the overload in XSharp.Core was better</li>
      <li styleclass="List1">CASE statements without CASE block but only a OTHERWISE block would crash the compiler. This has been fixed and an warning about an empty CASE statement has been added.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="96" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Several changes to the Macro compiler, such as the parsing of Hex literals, case sensitivity of parameters (they are no longer case sensitive) and limited support for function overloading.</li>
      <li styleclass="List1">Several missing functions have been added, such as _Quit(), </li>
      <li styleclass="List1">The return value of several Ord..() functions was incorrect. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem with CurDir() for the root directory of a drive</li>
      <li styleclass="List1">Fixed a problem with calling Send() with a single parameter with the value NULL_OBJECT.</li>
      <li styleclass="List1">Solved problem with incorrect parameters for DiskFree() and DiskSpace()</li>
      <li styleclass="List1">MemoRead() and MemoWrit() and FRead..() and FWrite..() now respect the SetAnsi() setting like the functions in the VO Runtime. </li>
      <li styleclass="List1">We have added 2 new functions to read/write binary files: MemoReadBinary() and MemoWritBinary()</li>
      <li styleclass="List1">Not all DBOI_ enum values had the same value as in Vulcan. This has been solved.</li>
      <li styleclass="List1">SetDecimalSep() and SetThousandSep() now also set the numeric separators in the current culture.</li>
      <li styleclass="List1">The USUAL -&gt; STRING conversion now calls AsString() </li>
    </list>
    <list id="95" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">Added support for Dbase style </text><text styleclass="" style="font-family:&apos;Calibri Light&apos;; font-size:12pt; color:#000000;">dynamic </text><text styleclass="Body Text">memory variables (MEMVAR, PUBLIC, PRIVATE, PARAMETERS). See the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Memory-Variables" styleclass="Body Text">Memory Variables</link><text styleclass="Body Text"> topic in the help file for more information.</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">The IsDate() function now also returns TRUE for USUALs of type DateTIme. There is also a separate IsDateTime() function. We have also added IsFractional() (FLOAT or DECIMAL) and IsInteger (LONG or INT64) and IsInt64()</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Added missing Cargo slot to the Error class. Also improved Error:ToString() </text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fix for problem in W2String()</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">And many more small changes.</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="97" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added a new tab page in the Project Properties dialog: Dialect. This contains dialect specific language options.</li>
      <li styleclass="List1">2 options from the Build options page (which is configuration dependent) have been moved to the Language page (which is build INdepedent), because that makes more sense: </li>
      <list id="97" level="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
        <li styleclass="List1">Include Path</li>
        <li styleclass="List1">NoStdDef</li>
      </list>
    </list>
    <list id="97" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have also added a project property on the Language page to specify an alternative standard header file (in stead of XSharpDefs.xh)</li>
      <li styleclass="List1">The XSharp.__Array type was shown in the intellisense with the wrong name</li>
      <li styleclass="List1">We have added entries on the Project Properties dialog pages to enable MEMVAR support and to enable Undeclared variables</li>
      <li styleclass="List1">Fixed a problem in the CodeDom provider (used by the Windows Form editor) where fields with array types were losing their array brackets when writing back to the source.</li>
      <li styleclass="List1">When writing changes from the windows form editor we are no longer writing to disk but to the opened (sometimes invisible) windows of the .designer.prg. This should prevent warning messages about the .designer.prg file that was changed outside Visual Studio</li>
      <li styleclass="List1">Fixed a problem parsing source code where identifier names were starting with &apos;@@&apos;</li>
      <li styleclass="List1">The Debugger was showing UINT64 as typename for ARRAYs. This has been fixed.</li>
      <li styleclass="List1">Renaming forms in the Windows Forms editor was not working for forms with a separate .designer.prg. This has been fixed.</li>
      <li styleclass="List1">Fixed a (very old) problem where the OutPutPath property in the xsproj file was sometimes set to $(OutputPath).</li>
      <li styleclass="List1">Fixed an exception in the editor for empty source files or header files.</li>
      <li styleclass="List1">Fixed an exception when the error list was created for errors without errorcode</li>
      <li styleclass="List1">Commenting a single line in the editor will now always use the // comment format</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="98" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="List1">No changes in this release.</text></li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.8 (Bandol Beta 8)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler source code has been upgraded to Roslyn 2.10 (C# 7.3). As a result of that there are some new compiler options, such as <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-refout">/refout</link> and we also support the combination of the &quot;PRIVATE PROTECTED&quot; modifier that defines a type member as accessible for subclasses in the same assembly but not for subclasses in other assemblies</li>
      <li styleclass="List1">We have added support for Xbase++ class declarations. See the Xbase++ class declaration topic for more information about the syntax and what is supported and what not.</li>
      <li styleclass="List1">We have added support for simple macros with the &amp;Identifier syntax</li>
      <li styleclass="List1">We have added support for late bound property access:</li>
      <list id="99" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">The &lt;Expression&gt;:&amp;&lt;Identifier&gt; syntax. <br/>This translates to IVarGet(&lt;Expression&gt;, &lt;Identifier&gt;).</li>
        <li styleclass="List1">The &lt;Expression&gt;:&amp;(&lt;Expression2&gt;) syntax. <br/>This translates to IVarGet(&lt;Expression&gt;, &lt;Expression2&gt;).</li>
        <li styleclass="List1">Both of these can also be used for assignments and will be translated to IVarPut: <br/>&lt;Expression&gt;:&amp;&lt;Identifier&gt; := &lt;Value&gt; <br/>This becomes IVarPut(&lt;Expression&gt;, &lt;Identifier&gt;, &lt;Value&gt;)</li>
        <li styleclass="List1">All of these will work even when Late Binding is not enabled.</li>
      </list>
    </list>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added a new compiler options <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-stddefs">/stddefs</link> that allows you to change the standard header file (which defaults to <text styleclass="Body Text">XSharpDefs.xh)</text></li>
      <li styleclass="List1"><text styleclass="Body Text">We have added a new preprocessor Match marker &lt;#idMarker&gt; which matches a single token (all characters until the first whitespace character)</text></li>
      <li styleclass="List1"><text styleclass="Body Text">When you select a dialect now, then the compiler will automatically add some compiler macros. The VO dialect declares the macro __VO__, the Vulcan dialect declares the macro __VULCAN__ the harbour dialect declares the macro __HARBOUR__ and the Xbase++ dialect declares the macro __XPP__. </text></li>
      <li styleclass="List1"><text styleclass="Body Text">When compiling against the X# runtime then also the macro __XSHARP_RT__ will be defined.</text></li>
      <li styleclass="List1"><text styleclass="Body Text">We have added a new warning when you pass a parameter without &apos;ref&apos; modifier (or @ prefix) to a method or function that expects a parameter by reference or an out parameter.</text></li>
      <li styleclass="List1"><text styleclass="Body Text">We have also added a warning that will be shown when you assign a value from a larger integral type into a smaller integral type to warn you about possible overflow problems.</text></li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">This build includes a <text style="font-weight:bold;">new faster macro compiler</text>. It should be fully compatible with the VO macro compiler. Some of the .Net features are not available yet in the macro compiler.</li>
      <li styleclass="List1">We moved most of the generic XBase code to XSharp.RT.DLL. XSharp.VO.DLL now only has VO specific code. We have also added XSharp.XPP.DLL for XPP</li>
      <li styleclass="List1">Fix Ansi2OEM problem with FRead3(), FWrite3() and FReadStr</li>
      <li styleclass="List1">Added &#160;missing functions EnableLBOptimizations() and property Array:Count</li>
      <li styleclass="List1">Fixed problem with latebound assign with CodeBlock values</li>
      <li styleclass="List1">Fixed problem with AScan() and AEval() with missing parameters</li>
      <li styleclass="List1">Changed error return codes for DirChange(), DirMake() and DirRemove()</li>
      <li styleclass="List1">Send() was &quot;swallowing&quot; errors. This has been fixed</li>
      <li styleclass="List1">Fixed a problem with assigning to multi dimensional arrays</li>
      <li styleclass="List1">Fixed a problem with creating objects with CreateInstance() where objects are not in the &quot;global&quot; namespace</li>
      <li styleclass="List1">Fixed several problems in the RDD system and support functions.</li>
      <li styleclass="List1">Fixed several problems in the late binding support, such as IsMethod, IsAccess, IVarPut, IVarPutSelf etc.</li>
      <li styleclass="List1">Fixed several problems with TransForm()</li>
      <li styleclass="List1">Integer divisions for usuals containing integers now return either integers or else fractional numbers depending on the compiler setting of the main app.</li>
      <li styleclass="List1">We fixed several conversions problems during late bound calls</li>
      <li styleclass="List1">We have fixed several problems with the Val() and Str() functions.</li>
      <li styleclass="List1">The internal type names for DATE and FLOAT have been changed to __Date and __Float. If you rely on these type names please check your code !</li>
      <li styleclass="List1">DebOut32 was not outputting data to the debug terminal if the runtime was compiled in release mode. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed filtering on &apos;current project&apos; in the error list</li>
      <li styleclass="List1">Type lookup for local variables was sometimes failing. This has been fixed</li>
      <li styleclass="List1">Fixed a problem with Brace Matching that could cause an exception in VS</li>
      <li styleclass="List1">Fixed a problem with Tooltips that could cause an exception in VS</li>
      <li styleclass="List1">Fixed a problem with uncommenting that could cause an exception in VS</li>
      <li styleclass="List1">New references added in VS would not always be included in the type search in the editor. This has been fixed.</li>
      <li styleclass="List1">Member prototypes for constructors now include the type name and curly braces</li>
      <li styleclass="List1">We have started work on improved code completion for variables declared with VAR</li>
      <li styleclass="List1">We have started with support for code completion for members of Generic types. This is not finished yet.</li>
      <li styleclass="List1">PRG files that are not part of a X# project and not part of a Vulcan project are now also colorized in the editor.</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">VulcanXPorter was always adjusting the referenced VO libraries and &#160;was ignoring the &quot;Use X# Runtime&quot; checkbox</li>
      <li styleclass="List1">VOXPorter now has an option to copy the resources referenced in the AEF files to the Resources subfolder in the project</li>
      <li styleclass="List1">VOXPorter now also copies the cavowed, cavofed and cavoded template files to the properties folders in your project.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.7 (Bandol Beta 7)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">When calling a runtime function with a USUAL parameter the compiler now automatically prefers methods or functions with &quot;traditional&apos; VO types over the ones with enhanced .Net types. For example when there are 2 overloads, one that takes a byte[] and another that takes a string, then the overload that takes a string will get preference over the overload that takes a byte[].</li>
      <li styleclass="List1">Resolved a problem with .NOT. expressions inside IIF() expressions</li>
      <li styleclass="List1">Improved debugger break point generation for Invoke expressions ( like String.Compare())</li>
      <li styleclass="List1">Fixed a pre-processor error for parameters for macros defined in a #define. These parameters must have the right case now. Parameters with a different case will not be resolved any longer.</li>
      <li styleclass="List1">Fixed a pre-processor error where optional match patterns in pre-processor rules were repeated. This is too complicated to explain here in detail &lt;g&gt;.</li>
      <li styleclass="List1">The code generated by the compiler for Array operations now uses the new interfaces declared in the X# runtime (see below).</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added several missing functions, such as _GetCmdLine, Oem2AnsiA() and XSharpLoadLibrary</li>
      <li styleclass="List1">Fixed problems in CreateInstance, IVarGet, IVarPut(), CtoDAnsi() and more.</li>
      <li styleclass="List1">Added VO Compatible overload for FRead4() </li>
      <li styleclass="List1">No longer (cathed) exceptions are produced for empty dates </li>
      <li styleclass="List1">Ferror() was not always return the error of a file operation. This has been fixed</li>
      <li styleclass="List1">We have added a new FException() function that returns the last exception that occurred for a low level file operation</li>
      <li styleclass="List1">Casting a usual containing a PTR to a LONG or DWORD is now supported </li>
      <li styleclass="List1">Some new interfaces have been added related to array handling. The compiler no longer inserts a cast to Array inside the code, but inserts a cast to one of these interfaces depending on the type of the index parameter. The USUAL type implements IIndexer and IIndexProperties and dispatches the call to the objects inside the usual when this objects exposes the interface. This is used for indexed access of properties when using AEval or AScan on an ARRAY OF &lt;type&gt;</li>
      <list id="99" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">XSharp.IIndexer</li>
        <li styleclass="List1">XSharp.INamedIndexer<tab /></li>
        <li styleclass="List1">XSharp.IIndexedProperties<br/></li>
      </list>
    </list>
    <para styleclass="Heading2">SDK Classes</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added the Hybrid UI classes from Paul Piko (with permission from Paul)</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The Vulcan XPorter now also has an option to replace the runtime and SDK references with references to the X# runtime</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.6 (Bandol Beta 6)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler was sometimes still generating warnings for unused variables generated by the compiler. This has been fixed.</li>
      <li styleclass="List1">The compiler will now produce a warning that #pragmas are not supported yet (9006)</li>
      <li styleclass="List1">Added compiler macro __FUNCTION__ that returns the current function/method name in original casing.</li>
      <li styleclass="List1">Literal sub arrays for multidimensional arrays no longer need a type prefix when compiling in the Core dialect</li>
      <li styleclass="List1">Fixed problem with the Global class name that would happen when building the runtime assemblies (these have a special convention for the global class names)</li>
      <li styleclass="List1">When the calling convention of a method in an interface is different from the calling convention of the implementation (CLIPPER vs Not CLIPPER) then a new error (<link displaytype="text" defaultstyle="true" type="topiclink" href="XS9067">9067</link>) will be generated by the compiler.</li>
      <li styleclass="List1">The calling convention for _DLL functions and procedures is now optional and defaults to PASCAL (stdcall)</li>
      <li styleclass="List1">The namespace alias for using statements was not working in all cases.</li>
      <li styleclass="List1">The compiler will now generate an error for code that incorrectly uses the VIRTUAL and OVERRIDE modifiers.</li>
      <li styleclass="List1">The compiler was throwing an exception for a specific kind of incorrect local variable initializer with generic arguments. This has been fixed.</li>
      <li styleclass="List1">Visibility modifiers on GET or SET accessors for properties were not working correctly (INTERNAL, PRIVATE etc). This has been fixed.</li>
      <li styleclass="List1">The compiler now handles PSZ(_CAST,...) and PSZ(..) differently. When the argument is a literal string, then the PSZ will only be allocated once and stored in a &quot;PSZ Table&quot; in your assembly. The lifetime of this PSZ is then the lifetime of your app. When this happens then the new compiler warning <link displaytype="text" defaultstyle="true" type="topiclink" href="XS9068">XS9068</link> will be shown.<br/>When the argument is a string stored in a local or global (or define) then the compiler can&apos;t know the lifetime of the PSZ. It will therefore allocate the memory for the PSZ with the StringAlloc() function. This ensures that the PSZ will not go out of scope and be freed. If you use this a lot in your application then you may be repeatedly allocating memory. We recommend that you avoid the use of the cast and conversion operators for PSZs and take control of the lifetime of the PSZ variables by allocating and freeing the PSZ manually. PSZ casts on non strings (numerics or pointers) simply call the PSZ constructor that takes an intptr (this is used on several spots in the Win32API library for &apos;special&apos; PSZ values).</li>
      <li styleclass="List1">Named arguments are now also supported in the Vulcan dialect. This may lead to compiler errors if your code looks like the code below, because the compiler will think that aValue is a named argument of the Empty() function.<br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Empty(aValue := SomeExpression())</text><br/></li>
      <li styleclass="List1"><text styleclass="Normal">If you were inheriting a static class from another class then you would get a compiler warning before. This is now a compiler error, because this had a side effect where the resulting assembly contained a corrupted reference.</text></li>
      <li styleclass="List1"><text styleclass="Normal">The overload resolution code now chooses a type method/function over a method/function with clipper calling convention.</text></li>
      <li styleclass="List1"><text styleclass="Normal">The Xbase++ dialect is now recognized by the compiler. For the time being it behaves the same as Harbour. We have also added the compiler macro </text><text styleclass="Normal" style="font-weight:bold;">__DIALECT_XBASEPP__ </text><text styleclass="Normal">that will be automatically define to TRUE when compiling in Xbase++ mode.</text></li>
      <li styleclass="List1"><text styleclass="Normal">Fixed a problem in the PDB line number generation that would cause incorrect line numbers in the debugger</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The source code editor was not always showing the correct &apos;active&apos; region for #defines defined in #include files.</li>
      <li styleclass="List1">Opening a source file without entities (e.g. a header file) could result in an error message inside VS.</li>
      <li styleclass="List1">Fixed a null reference exception in the editor</li>
      <li styleclass="List1">Fixed a problem when un-commenting code in the editor</li>
      <li styleclass="List1">Improved load time performance for large solutions with many dependencies.</li>
      <li styleclass="List1">Fixed a problem where the intellisense engine could lock a DLL that was used by a project reference or assembly reference.</li>
      <li styleclass="List1">Fixed a problem where missing references (for example COM references that were not installed on the developers machine) could cause problems with the type lookup when opening forms in the windows forms editor.</li>
      <li styleclass="List1">Added an option to select the Harbour dialect on the project properties page.</li>
    </list>
    <para styleclass="Heading2">The Build System</para>
    <list id="100" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The Build system did not recognize that begin NAMESPACE lines in source code were commented out. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">VOXporter</para>
    <list id="100" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added an option to sort the entities in alphabetical order in the output file.</li>
      <li styleclass="List1">We have added an option so you can choose to add the X# Runtime as reference to your application (otherwise the Vulcan runtime is used)</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The SetCentury setting was incorrect after calling SetInternational(#Windows). This has been fixed.</li>
      <li styleclass="List1">The Descend function for dates now returns a number just like in VO</li>
      <li styleclass="List1">The functions ChrA and AscA have been renamed to Chr() and Asc() and the original functions Chr() and Asc() have been removed. The original functions were using the DOS (Oem) codepage and this is not compatible with Visual Objects.</li>
      <li styleclass="List1">On several places in the runtime characters were converted from 8 bit to 16 bit using the System.Encoding.Default codepage. This has been changed. We use the codepage that matches the WinCodePage in the Runtimestate now. So by setting the Windows codepage in the runtime state you now also control the conversions from Unicode to Ansi and back</li>
      <li styleclass="List1">The Oem2Ansi conversion was incorrect for some low level file functions.</li>
      <li styleclass="List1">We have changed several things in the Late Binding support </li>
      <li styleclass="List1">All String - PSZ routines (String2PSz(), StringAlloc() etc) now use the Windows Codepage to convert the unicode strings to ansi. </li>
      <li styleclass="List1">If you library is compiled with &apos;Compatible String comparisons&apos; but the main app isn&apos;t, then the string comparisons in the library will follow the same rules as the main app because the main app registers the /vo13 &#160;setting with the runtime. The &quot;compatible&quot; stringcomparison routines in the runtime now detect that the main app does not want to do VO compatible string comparisons and will simply call the normal .Net comparison routines.<br/>We therefore recommend that 3rd party products always use the Compatible String comparisons in their code. </li>
    </list>
    <list id="101" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Preliminary documentation for the runtime was generated from source code comments and has been included as chapter in this documentation.</li>
    </list>
    <para styleclass="Heading2">The VO SDK</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">This build includes the first version of the VO SDK compiled against the X# runtime. We have included the following class libraries</li>
      <list id="99" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">Win32API</li>
        <li styleclass="List1">System Classes</li>
        <li styleclass="List1">RDD Classes</li>
        <li styleclass="List1">SQL Classes</li>
        <li styleclass="List1">GUI Classes</li>
        <li styleclass="List1">Internet Classes</li>
        <li styleclass="List1">Console Classes</li>
        <li styleclass="List1">Report Classes</li>
      </list>
    </list>
    <list id="101" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">All assemblies are named VO&lt;Name&gt;.DLL and the classes in these assemblies are in the VO namespace.</li>
      <li styleclass="List1">This SDK is based on the VO 2.8 SP3 source code. The differences between VO 2.8 SP3 and VO 2.8 SP4 will be merged in the source later,</li>
      <li styleclass="List1">The Libraries for OLE, OleServer and Internet Server are not included. The OleAutoObject class and its support classes is included in the XSharp.VO library. OleControl and OleObject are not included.</li>
      <li styleclass="List1">Preliminary documentation for these classes was generated from source code comments and has been included as chapter in this documentation.</li>
    </list>
    <para styleclass="Heading2">The RDD system</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">This build includes the first version of the RDD system. DBF-DBT is ready now. Other RDDs will follow in the next builds. Also most of the RDD related functions are working in this build.</li>
      <li styleclass="List1">This build also includes the first version of the Advantage RDD. With this RDD you can access DBF/DBT/NTX files , DBF/FPT/CDX files and ADT/ADM/ADI files. The RDD names are the same as the RDD names for Vulcan. (AXDBFCDX, AXDBFNTX, ADSADT). We also support the AXDBFVFP format and the AXSQLCDX, AXSQLNTX, AXSQLVFP. For more information about the differences and possibilities of these RDD look in the Advantage documentation.<br/>We have coded the Advantage RDD on top of the Advantage Client Engine. Our RDD system detects if you are running in x86 or x64 mode and calls functions in Ace32 or Ace64 accordingly. <br/>To use Advantage you copy the support DLLs from an Advantage Vulcan RDD to the folder of your application. Look at the Advantage docs for Vulcan to see the list of the DLLs. The Advantage RDD is part of the standard XSharp.RDD.DLL which therefore replaces the AdvantageRDD.Dll for Vulcan.</li>
      <li styleclass="List1">The XSharp.Core DLL now also has RDD support. We have chosen NOT to implement this in functions, but as static methods inside the CoreDb class. Old code that uses the VoDb..() functions can be simply ported by changing &quot;VoDb&quot; to &quot;CoreDb.&quot; <br/>The parameters and return values that are USUAL in VO and Vulcan are implemented as OBJECT in the CoreDb class. <br/>The ..Info() methods have 2 overloads. One that takes an Object and one that takes a reference to an object. <br/>The methods inside CoreDb return success or failure with a logical value like the VODB..() functions in VO. If you want to know what the error was during the last operation then you can access that with the method CoreDb._ErrInfoPtr() . This returns the last exception that occurred in a RDD operation.</li>
      <li styleclass="List1">At this moment the CoreDb class only has a FieldGet() that returns an object. We will add some extra methods that return values in a specified type in the next build (such as FieldGetString(), FieldGetBytes() etc). We will also add overloads for FieldPut() that take different parameter types.</li>
      <li styleclass="List1">The XSharp.VO DLL has the VoDb..() functions and the higher level functions such as DbAppend(), EOF(), DbSkip() etc. <br/>The VoDb..() functions return success or failure with a logical value. If you want to know what the error was during the last operation then you can access that with the method _VoDbErrInfoPtr() . This returns the last exception that occurred in a RDD operation.</li>
      <li styleclass="List1">You can mix calls to the VoDb..() functions and CoreDb...() methods. Under the hood the VoDb..() functions also call the CoreDb methods.</li>
      <li styleclass="List1">The higher level functions may throw an exception just like in VO. For example when you call them on a workarea where no table is opened. Some functions simply return an empty value (like Dbf(), Recno()). Others will throw an exception. When you have registered an error handler with ErrorBlock() then this error handler will be called with the error object. Otherwise the system will throw an exception.</li>
      <li styleclass="List1">Date values are returned by the RDD system in a DbDate structure, Float values are returned in a DbFloat structure. These structures have no implicit conversion methods. They do however implement IDate and IFloat and they can and will be converted to the Date and Float types when they are stored in a USUAL inside the XSharp.VO DLL. The DbDate structure is simply a combination of a year, month and date. The DbFloat structure holds the value of fields in a Real8, combined with length and the number of decimals.</li>
      <li styleclass="List1">More documentation about the RDD system will follow later. Of course you can also look at the help file and source code on GitHub.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.5 (Bandol Beta 5)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The strong named key for assemblies with native resources was invalid. This has been fixed</li>
      <li styleclass="List1">When an include file was included twice for the same source (PRG) file then a large number of compiler warnings for duplicate #defines would be generated. Especially when the Vulcan VOWin32APILibrary.vh was included twice then over 15000 compiler warnings would be generated per source file where this happened. This large number of warnings could lead to excessive memory usage by the compiler. We are now outputting a compilation error when we detect that the same file was included twice. We have also added a limit of 500 preprocessor errors per source (PRG) file.</li>
      <li styleclass="List1">A change in Beta 4 could result in compiler warnings about unused variables that were introduced automatically by the X# compiler. This warning will no longer be generated.</li>
      <li styleclass="List1">The compiler now correctly stores some compiler options in the runtime state of XSharp.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem in the Ansi2OEM and OEM2Ansi functions.</li>
      <li styleclass="List1">Fixed a problem in the sorting for SetCollation(#Windows)</li>
      <li styleclass="List1">Fixed a problem with string comparisons in runtime functions like ASort(). This now also respects the new runtime property CompilerOptionVO13 to control the sorting</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The sorting of the members in the editor dropdown for members was on methodname and propertyname and did not include the typename. When a source file contained more than one type then the members would be mixed in the members dropdown</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The default value for VO15 has been changed back from false to undefined. </li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.4 (Bandol Beta 4)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1"><text style="font-weight:bold;">POSSIBLY BREAKING CHANGE: Functions now always take precedence over same named methods</text>. If you want to call a method inside the same class you need to either prefix it with the typename (for static methods) or with the SELF: prefix. If there is no conflicting function name then you can still call the method with just its name. We recommend to prefix the method calls to make your code easier to read.</li>
      <li styleclass="List1">The compiler was accepting just an identifier without a INSTANCE, EXPORT or other prefix and without a type inside a class declaration. It would create a public field of type USUAL. That is no longer possible.</li>
      <li styleclass="List1"><text styleclass="Body Text">Improved the positional keyword detection algorithm (this also affects the source code editor)</text></li>
      <li styleclass="List1">The || operator now maps to the logical or &#160;(a .OR. b) and not to the binary or (_OR(a,b))</li>
      <li styleclass="List1">The VAR statement now also correctly parses <br/><br/><text styleclass="Code Example">VAR x = SomeFunction()</text><br/></li>
    </list>
    <para styleclass="List1"><tab />And will compile this with a warning that you should use the assignment operator (:=).</para>
    <para styleclass="List1"><tab />We have added this because many people (including we) copy examples from VB and C# where the operator is a single equals token.</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Error messages about conflicting types now include the fully qualified type name.</li>
      <li styleclass="List1">The compiler no longer includes the width for literal Floats. This is compatible with VO.</li>
      <li styleclass="List1">A Default parameter of type Enum is now allowed. </li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added several functions that were missing, such as __Str() and DoEvents()</li>
      <li styleclass="List1">Fixed a problem in the macro compiler with non-english culctures.</li>
      <li styleclass="List1">Added several overloads for Is..() functions that take a PSZ instead of a string, such as IsAlpha() and IsUpper().</li>
      <li styleclass="List1">Added some missing error defines, such as E_DEFAULT and E_RETRY.</li>
      <li styleclass="List1">Fix for a problem with SubStr() and a negative argument</li>
      <li styleclass="List1">Fix for a problem with IsInstanceOf()</li>
      <li styleclass="List1">Fix for a problem with Val() and a hex value with an embedded &apos;E&apos; character</li>
      <li styleclass="List1">Added implicit conversions from ARRAY to OBJECT[] and back. </li>
      <li styleclass="List1">Several changes to the code for Transform() and Unformat() to cover several exotic picture formats</li>
      <li styleclass="List1">Changes to the code for SetCentury() to automatically also adjust the date format (SetDateFormat())</li>
      <li styleclass="List1">Fixes for the Str() family of functions in combination with SetFixed() and SetDigitFixed().</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem when building projects in the latest build of Visual Studio</li>
      <li styleclass="List1">Several &apos;keywords&apos; were not case synchronized before, such as TRUE, FALSE, NULL_STRING etc,</li>
      <li styleclass="List1">Keywords are not case synchronized on the current line as long as the user has the cursor on them or immediately after them. That means that when you type String and want to continue to change it to StringComparer then the formatter will no longer kick in and change &quot;String&quot; to the keyword case before you have the chance to complete the word.</li>
      <li styleclass="List1">The Control Order dialog inside the form editor was not saving its changes.</li>
      <li styleclass="List1">Added an option to include all entities from the editor, or just the members from the current selected type in the right dropdown of the editor</li>
      <li styleclass="List1">The editor was also matching braces inside literal strings and comments. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem with the CodeDom parser where extended strings (strings containing CRLF tokens or other special tokens) were parsed incorrectly. This resulted in problems in the windows forms editor.</li>
      <li styleclass="List1">The member resolution code in the editor was not following the same logic as the compiler: When a function and a method with the same name exist it was resolving to the method in stead of the function. This has been fixed.</li>
      <li styleclass="List1">Fixed a problem when debugging in X64 mode.</li>
      <li styleclass="List1">Fixed an exception when comparing source code files with SCC integration.</li>
      <li styleclass="List1">Fixed several problems w.r.t. the XAML editor:</li>
      <list id="99" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">Code is now generated with STRICT calling convention to avoid problems when compiler option &quot;Impliciting CLIPPER calling convention&quot; is enabled</li>
        <li styleclass="List1">WPF and other templates now include STRICT calling convention for the same reason</li>
        <li styleclass="List1">The XAML editor could not properly load the current DLL or EXE and had therefore problems resolving namespaces and adding user controls to the tool palette. This has been fixed.</li>
      </list>
    </list>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added an option to the Tools/Editor/XSharp/Intellisense options that allow you to control how the member combobox in the editor works. You can choose to only show methods &amp; properties of the current type or all entities in the right combobox. The left combobox always shows all types in the file.</li>
      <li styleclass="List1">Some of the project and item templates have been updated. Methods and constructors without parameters now have a STRICT calling convention. Also the compiler option /vo15 has been explicitly disabled in templates for the Core dialect.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.3 (Bandol Beta 3)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">When 2 method overloads have matching prototypes the compiler now prefers the non generic one over the generic one</li>
      <li styleclass="List1">Fixed an exception that could occur when compiling a single line of source code with a preprocessor command in it.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added Mod() function</li>
      <li styleclass="List1">Added ArrayNew() overload with no parameters</li>
    </list>
    <list id="102" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed problem in __StringNotEquals() when length(RHS) &gt; length(LHS) and SetExact() == FALSE</li>
      <li styleclass="List1">Added missing string resource for USUAL overflow errors</li>
    </list>
    <para styleclass="Heading2">Visual Studio integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Improved keyword case synchronization and indenting. Also a source file is &apos;Keyword Case&apos; synchronized when opened.</li>
      <li styleclass="List1">Opening a source file by double clicking the find results window no longer opens a new window for the same source file</li>
      <li styleclass="List1">Improved type lookup speed for intellisense</li>
      <li styleclass="List1">Fixed a problem that would prevent type lookup for types in the same namespace</li>
      <li styleclass="List1">Fix for QuickInfo problem introduced in the latest Visual Studio 2017 builds</li>
      <li styleclass="List1">QuickInfo tips are no longer shown in the debugger where they were overlapping with debugger tooltips</li>
      <li styleclass="List1">The comboboxes with methods and functions in the editor window no longer shows parameter names and full type names. Now it shows the shortened type names for the parameters</li>
      <li styleclass="List1">These same comboboxes now show the file name for methods and properties defined in another source file</li>
      <li styleclass="List1">Fixed problem in the window editor with generating code for tab pages</li>
    </list>
    <para styleclass="Heading2">Vulcan XPorter</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Project dependencies defined in the solution file were not properly converted</li>
    </list>
    <para styleclass="Heading2">VO XPorter</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem where resource names were replaced with the value of a define </li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.2 (Bandol Beta 2)</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler now transparently accepts both Int and Dword parameters for XBase Array indices</li>
      <li styleclass="List1">When the compiler finds a weakly typed function in XSharp.VO and a strongly typed version in XSharp.Core then it will choose the strongly typed version in XSharp.Core now.</li>
      <li styleclass="List1">In the VO and Vulcan dialect sometimes an (incorrect) warning &apos;duplicate usings&apos; was displayed. This is now suppressed.</li>
      <li styleclass="List1">The debugger information for the Start function has been improved to avoid unnecessary step back to line 1 at the end of the code</li>
      <li styleclass="List1">The debugger break point information for BEGIN LOCK and BEGIN SCOPE has been improved</li>
      <li styleclass="List1">The debugger break point information for multi line properties has been improved</li>
      <li styleclass="List1">/vo6, /vo7 and /vo11 are now only supported in the VO/Vulcan dialect</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Removed DWORD overloads for Array indexers</li>
      <li styleclass="List1">Fixed overload problem for ErrString()</li>
      <li styleclass="List1">Fixed overload problem for _DebOut()</li>
      <li styleclass="List1">Fixed problems in DTOC() and Date:ToString() </li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed ASort() incompatibilities with VO</text></li>
      <li styleclass="Normal"><text styleclass="Body Text">Fixed memory blocks now get filled with 0xFF when they are released to help detect problems </text></li>
    </list>
    <para styleclass="Heading2">Visual Studio</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fix &apos;Hang&apos; in VS2017 when building</li>
      <li styleclass="List1">Fix &apos;Hang&apos; in VS2017 when a tooltip (QuickInfo) was displayed</li>
      <li styleclass="List1">Fixed problem with debugging x64 apps</li>
      <li styleclass="List1">You can no longer rename or delete the Properties folder</li>
      <li styleclass="List1">Selecting &apos;Open&apos; from the context menu on the the Properties folder now opens the project properties screen</li>
      <li styleclass="List1">Updated several icons in the Project Tree </li>
      <li styleclass="List1">Enhancements in the Goto Definition</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fix problem with CRLF in embedded resource commandline option</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 2.0.0.1 (Bandol Beta 1)</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">New features</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for <text style="font-weight:bold;">ARRAY OF </text>language construct. See the <link displaytype="text" defaultstyle="true" type="topiclink" href="The-X-Runtime">Runtime chapter</link> &#160;for more information about this.</li>
      <li styleclass="List1">Added support for the X# Runtime assemblies when compiling in the VO or Vulcan dialects.</li>
      <li styleclass="List1">Added support for the &quot;Pseudo&quot; function ARGCOUNT() that returns the # of declared parameters in a function/method compiled with clipper calling convention.</li>
      <li styleclass="List1">Added a new warning number for assigning values to a foreach local variable. Assigning to USING and FIXED locals will generate an error. </li>
    </list>
    <para styleclass="Heading3">Optimizations</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Optimized the code generation for Clipper calling convention functions/methods</li>
      <li styleclass="List1">The /cf and /norun compiler options are no longer supported</li>
      <li styleclass="List1">The preprocessor no longer strips white space. This should result in better error messages when compiling code that uses the preprocessor.</li>
      <li styleclass="List1">Some parser errors are now more descriptive</li>
      <li styleclass="List1">Changed the method that is used to determine if we compile against CLR2 or CLR4. The compiler checks at the location either system.dll or mscorlib.dll. When this location is in a path that contains &quot;v2&quot;, &quot;2.&quot;, &quot;v3&quot; or &quot;3.&quot; then we assume we are compiling for CLR2. A path that contains &quot;V4&quot; or &quot;4.&quot; is considered CLR4. The /clr commandline option for the compiler is NOT supported.</li>
      <li styleclass="List1">The preprocessor now generates an error when it detects recursive #include files. </li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem when using the [CallerMemberAttribute] on parameters when compiling in Vulcan or VO Dialect</li>
      <li styleclass="List1">Abstract properties should no longer generate a warning about a body</li>
      <li styleclass="List1">You can now correctly use ENUM values as array indexes. </li>
      <li styleclass="List1">Fixed a problem for Properties with PUBLIC GET and PRIVATE SET accessors.</li>
      <li styleclass="List1">Fixed an issue where assigning an Interface to a USUAL required a cast to Object</li>
      <li styleclass="List1">Fixed an issue where IIF expressions with literal types were returning the wrong type (the L or U suffix was ignored)</li>
      <li styleclass="List1">Fixed an issue where the declaration LOCAL x[10] was not compiled correctly. This now compiles into a local VO Array with 10 elements.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Build 1.2.1 introduced a problem that could cause output files to be locked by the intellisense engine. This has been fixed</li>
      <li styleclass="List1">The editor parser had problems with nested types. This has been fixed</li>
      <li styleclass="List1">Enum members were not included in code completion for enums inside X# projects</li>
      <li styleclass="List1">Some improvements in the code reformatting</li>
      <li styleclass="List1">Added option on the Tools/Options for the editor to include keywords in the &quot;All tokens&quot; completion list</li>
    </list>
    <list id="103" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem where assemblies that could not be loaded to retrieve meta information would be retried &apos;for ever&apos;</li>
      <li styleclass="Normal">Fixed a problem with retrieving type information from assemblies that contained both managed and unmanaged code. </li>
      <li styleclass="Normal">Added some properties for referenced assemblies to the IDE Properties window</li>
      <li styleclass="Normal">Fixed a problem with assembly references and the Windows Forms editor, introduced in one of the latest Visual Studio 2017 updates</li>
      <li styleclass="Normal">When enabling XML output on the Project Properties window an incorrect filename was shown for assemblies that contain a &apos;.&apos;in the assembly name.</li>
      <li styleclass="Normal">The editor parser now has better support for parameters of type REF and OUT</li>
      <li styleclass="Normal">Added support for &apos;Embed Interop Types&apos; in the property windows for Assembly References and COM references</li>
      <li styleclass="Normal">Fixed a problem where the codemodel was sometimes locking output DLLs for Project references</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="104" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with the naming of the XML documentation file.</li>
    </list>
    <para styleclass="Heading2">Runtime</para>
    <list id="105" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added XSharp.Core.DLL, XSharp.VO.DLL and XSharp.Macrocompiler.DLL.<br/>Most runtime functions are implemented and supported. See the <link displaytype="text" defaultstyle="true" type="topiclink" href="The-X-Runtime">X# Runtime chapter</link> for more information<br/></li>
    </list>
    <para styleclass="Heading2">VO XPorter</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">SDK related options have been removed. They will be moved to a new tool later.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.2.1</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem where a compilation error resulted in the message &quot;Failed to emit module&quot; without further information</li>
      <li styleclass="List1">Fixed a problem with ++, -- += and similar operations in aliased expressions (like CUSTOMER-&gt;CUSTNO++)</li>
      <li styleclass="List1">Constructor initializers and Collection initializers were not working after a constructor with parameters. That has been fixed.</li>
      <li styleclass="List1">Fixed an issue with negative literal values stored in a USUAL when overflow checking was enabled.</li>
      <li styleclass="List1">For the CATCH clause now both the ID and the TypeName are optional. This means that there are 4 variations.<br/>You can only have one catch clause without type, since this defaults to the System.Exception type. However, you can have many catch clauses without ID.</li>
    </list>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ID </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ExceptionType</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ID &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// defaults to Exception type</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ExceptionType &#160; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// defaults to Exception type</text></para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Improved the speed of the background code scanning</li>
      <li styleclass="List1">Improved the speed of the background parser inside the editor</li>
      <li styleclass="List1">Fixed a problem in the codedom provider that is used by the windows forms editor</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.2.0</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">You can now pass NULL for parameters declared by reference for compatibility with VO &amp; Vulcan. <br/>We STRONGLY advise not to do this, unless you make sure that the function expects this and does not assign to the reference parameter without checking for a NULL reference first. This will only work when the /vo7 compiler option is enabled.</li>
      <li styleclass="List1">We have made some optimizations in the Lexer. The compiler should be a little faster because of that</li>
      <li styleclass="List1">We fixed a problem with the automatic constructor generation (/vo16) for classes that inherit from classes defined in an external DLL </li>
      <li styleclass="List1">When compiling with /vo2 any string fields assigned in a child class before the super constructor was called would be overwritten with an empty string. The generated code will now only assign an empty string when the string is NULL. <br/>Note: we do not recommend to assign parent fields in the child constructor before calling the super constructor. Manually coded default values for parent fields will still overwrite values assigned in the child constructor before the SUPER call</li>
      <li styleclass="List1">Fixed a problem with CHECKED() and UNCHECKED() syntax in the VO dialect</li>
      <li styleclass="List1">Fixed a problem with choosing overloads for methods where an overload exists with &#160;a single object parameter and also an overload with an object[] parameter. </li>
      <li styleclass="List1">Added support to the parser for LOCAL STATIC syntax</li>
      <li styleclass="List1">Fixed a problem with compiler option /vo9 (Allow missing return values) and procedures or methods that return VOID</li>
      <li styleclass="List1">Improved debugger sequence point generation. The compiler no longer generates &apos;hidden&apos; breakpoint information for startup and closedown code in the VO/Vulcan dialects, and for expression statements no longer a double step is necessary.</li>
      <li styleclass="List1">ACCESS and ASSIGN for partial classes could generate error messages without source file name. This has been solved. <br/>The compiler now generates slightly different code for these &quot;partial&quot; properties. <br/>The Access and Assign are implemented as compiler generated methods and the property getter and property setter now call these methods.</li>
      <li styleclass="List1">The compiler was not recognizing the _WINCALL calling convention. This has been fixed.</li>
      <li styleclass="List1">The compiler now generates a warning when the #pragma command is used</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">More performance improvements in the editor. Especially large source files with incorrect code could slow down the editor. </li>
      <li styleclass="List1">The editor parser no longer tries to parse include files repeatedly when these files contain #defines only (like the Vulcan header files)</li>
      <li styleclass="List1">The source code editor tried to show intellisense for words in a comment region. That has been fixed.</li>
      <li styleclass="List1">We have started work on Object Browser and Class Browser.</li>
      <li styleclass="List1">Opening and closing of projects should be slightly faster</li>
      <li styleclass="List1">The internal code model used by the editors now disposes its loaded information when projects are closed and no projects need this information anymore. This should reduce the memory usage of the X# project system</li>
      <li styleclass="List1">Matching keywords, such as IF .. ENDIF and FOR .. NEXT should now be highlighted in the editor</li>
      <li styleclass="List1">If you select an identifier in the editor then that identifier will be highlighted in the current method/function on all places where it is used</li>
      <li styleclass="List1">We have added several features that you need to enable/disable on the <text style="font-weight:bold;">Tools/Options/Text Editor/XSharp/Intellisens</text>e dialog:</li>
      <list id="99" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">The code completion in the editor also supports instance member completion when a dot is pressed.<br/>Please note that the compiler ONLY accepts this in the Core language, not in the VO &amp; Vulcan dialect. So the option has no effect inside projects with other dialects.</li>
        <li styleclass="List1">We have added some options to control the sorting of the DropDown comboboxes in the editor, as well as if fields/instance variables should be included in these comboboxes. When you do not sort, then the entries in the dropdown box will be shown in the order in which they are found in the source file.</li>
        <li styleclass="List1">We have added the option to autocomplete identifiers when typing. This includes locals, parameters, class fields, namespaces, types etc.</li>
      </list>
    </list>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Overridden methods in subclasses with the same signature as the parent methods they override are no longer counted as overloads in completionlists</li>
      <li styleclass="List1">A missing reference DLL could &quot;kill&quot; the intellisense engine. This no longer happens. Of course the type info from a missing referenced DLL is not included. </li>
      <li styleclass="List1">Properties and methods in the generated source files for XAML code (the .g.prg files in the OBJ folder) are now also parsed and included in the completion lists in intellisense and in the Class Browser and Object Browser windows. </li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">VOXPorter</text></para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The installer now includes the correct version of VOXPorter &lt;g&gt;</li>
      <li styleclass="List1">VOXporter now supports the following commandline options:<br/><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000;">/s:&lt;source folder or aef&gt;</text></li>
    </list>
    <para styleclass="Normal"><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000;">/d:&lt;destination folder&gt;</text></para>
    <para styleclass="Normal"><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000;">/r:&lt;runtime folder&gt;</text></para>
    <para styleclass="Normal"><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000;">/nowarning</text></para>
    <para styleclass="Normal"></para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Some code corrections were added for issues found in the GUI classes</li>
      <li styleclass="List1">The template files can now also be found when VOXPorter is run from a different working directory</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.1.2</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="99" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added compiler warning for code that contains a #pragma</li>
      <li styleclass="List1">Fixed a problem with iif() functions and negative literal values</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="106" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a slowness in the editor after typing a send (: ) operator</li>
      <li styleclass="List1">Enum values are now properly decoded in the debugger</li>
      <li styleclass="List1">Fixed the CodeDom provider for handling literal FALSE values and negative numbers. As a result, more (Vulcan created) winforms should open without problems</li>
      <li styleclass="List1">Some positional keywords (such as ADD and REMOVE) are no longer colored as keyword in the editor for incomplete code when they appear after a colon ‘:’ or dot ‘.’;</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">VOXPorter</text></para>
    <list id="107" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-47px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:47px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-47px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:47px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="List1">Fixes for exporting the VO RDD Classes from the SDK</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-47px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:47px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.1.1</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with Debugger Breakpoints for DO CASE and OTHERWISE</li>
      <li styleclass="List1">Fixed a problem with Debugger Breakpoints for sourcecode that is defined in #included files</li>
      <li styleclass="List1">Added support for the Harbour Global Syntax where the GLOBAL keyword is optional</li>
      <li styleclass="List1">Fixed a problem with FOR.. NEXT loops with negative step values</li>
      <li styleclass="List1">In some situations the @@ prefix to avoid keyword conflicts was not removed from workarea names or field names. This has been fixed</li>
      <li styleclass="List1">In the VO/Vulcan dialect a warning (XS9015) was generated when a default parameterless SUPER constructor call was automatically generated. This error message is now suppressed. However a generated SUPER constructor call with parameters still generates a warning.</li>
      <li styleclass="List1">Prepared the compiler for Xbase type names and function names in the XSharp Runtime</li>
    </list>
    <para styleclass="Heading2">Preprocessor</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a crash in the preprocessor</li>
      <li styleclass="List1">The preprocessor was generating an error &quot;<text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">Optional block does not contain a match marker</text>&quot; for blocks without match marker. This is now allowed.<br/>(for example for the ALL clause in some of the Database UDCs )</li>
      <li styleclass="List1">When the same include files was used by multiple source files, and different sections of this file were included because of different #ifdef conditions, then the preprocessor would get &quot;confused&quot;. This has been fixed.</li>
      <li styleclass="List1">Debugger file/line number information from source code imported from #include files is not processed correctly.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed several issues with the Windows Form Editor </li>
      <li styleclass="List1">The class declaration generated by the VO compatible editors now included the PARTIAL modifier.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.1</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with Codeblocks used in late bound code after the release of X# 1.0.3</li>
      <li styleclass="List1">Fixed a problem with overriding properties in a subclass that inherit from a class where only the Assign (Set) or Access (Get) are defined.</li>
      <li styleclass="List1">The compiler option /vo16: automatically generate VO Clipper constructors has been implemented.</li>
      <li styleclass="List1">Fixed a crash in the compiler for compiler errors that occur on line 1, column 1 of the source file</li>
      <li styleclass="List1">Fixed a problem where overflow checking was not following the /ovf compiler option</li>
      <li styleclass="List1">Fixed problem with public modifier for interface methods</li>
      <li styleclass="List1">Added proper error message with unreachable fields in external DLLs</li>
      <li styleclass="List1">Fixed a problem with debugger sequence points (debugger stepping)</li>
      <li styleclass="List1">X# generated pdb files are now marked with the X# language GUID so they are recognized as X# in the VS debugger</li>
      <li styleclass="List1">DATETIME (26) &#160;and DECIMAL (27) are added as UsualType to the compiler in preparation of the X# runtime that allows usuals of these types</li>
      <li styleclass="List1">Compiler options /VO15 and /VO16 now produce an error message when used outside the VO/Vulcan dialect</li>
      <li styleclass="List1">Methods declared outside a class (VO style code) would declare a private class and not a public class</li>
      <li styleclass="List1">ASTYPE has been changed to a positional keyword</li>
      <li styleclass="List1">Fixed a problem with the Chr() and _Chr() functions for literal numbers &gt; 127</li>
      <li styleclass="List1">Added support for the __CLR2__ and __CLR4__ compiler macros. The version is derived from the folder name of mscorlib.dll and/or system.dll</li>
      <li styleclass="List1">The Codeblock syntax was not working in the Core dialect.</li>
      <li styleclass="List1">Some new keywords, such as REPEAT, UNTIL, CATCH, FINALLY,VAR, IMPLIED, NAMESPACE, LOCK, SCOPE, YIELD, SWITCH etc are now also positional and will only be recognized as keyword when at the start of a line or after a matching other keyword. <br/>This should help prevent cryptic error messages when these keywords are used as function names.</li>
    </list>
    <para styleclass="Heading2">Visual Studio </para>
    <para styleclass="Heading3">Source code editor</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added Goto Definition for Functions and Procedures</li>
      <li styleclass="List1">Improved Info tips for Functions and Procedures</li>
      <li styleclass="List1">Improved case synchronization</li>
      <li styleclass="List1">Added first version of smart indenting</li>
      <li styleclass="List1">Fixed lookup problems in the intellisense engine that could lock up VS</li>
      <li styleclass="List1">Compiler Generated types are now suppressed from the completion lists.</li>
      <li styleclass="List1">Added partial support for intellisense for LOCAL IMPLIED and VAR variables</li>
      <li styleclass="List1">Added support for Format Document. This also sets the case for identifiers according to the tools defined in the Tools/Options menu</li>
      <li styleclass="List1">Performance improvements for the background file scanner. This scanner is also paused during the build process to improve the compilation speed. </li>
    </list>
    <para styleclass="Heading3">Project System and MsBuild</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem in the project files with conditioned property groups. Existing projects will be updated automatically</li>
      <li styleclass="List1">Added support for the /vo16 compiler option in MsBuild and the VS Project Property pages. </li>
      <li styleclass="List1">Fixed a problem with the /nostddef compiler option which was not working as expected.</li>
      <li styleclass="List1">Fixed a problem which would occur when entering resources or settings in the project property dialog</li>
      <li styleclass="List1">Fixed a problem with the /nostdlib compiler option</li>
      <li styleclass="List1">License.Licx files are now added as &quot;Embedded Resource&quot;</li>
      <li styleclass="List1">Fixed a problem with the automatic adding of License files</li>
      <li styleclass="List1">When a project has a &quot;broken reference&quot; and a new reference is added with the correct location, then the broken reference will be deleted and the new references will be added instead.</li>
      <li styleclass="List1">The MSBuild support DLL was unable to find the location of the compiler and native resource compiler when running inside a 64 bit process</li>
    </list>
    <para styleclass="Heading3">Form Editor</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Improved Windows Form Editor support for types defined in project references. We will now detect the location of the output files for these projects, like the C# and VB project systems.</li>
      <li styleclass="List1">The Code parser for the Form Editor was having problems with untyped methods. This has been fixed.</li>
    </list>
    <para styleclass="Heading3">VO Window and Menu Editor</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The code generator for the Window and Menu editor will delete old unused defines.</li>
      <li styleclass="List1">Changed the item template for VO windows to fix a problem when adding an event handler to a window that has not been saved yet</li>
      <li styleclass="List1">The code generator for the Window editor was not outputting a style for WS_VISIBLE. This has been fixed.</li>
    </list>
    <para styleclass="Heading3">Debugger</para>
    <para styleclass="List1">This build introduces a first version of the XSharp debugger support</para>
    <list id="109" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The Visual Studio debugger now shows the language X# in the callstack window and other places</li>
      <li styleclass="List1">Functions, Methods and procedures are now displayed in the X# language style in the callstack window</li>
      <li styleclass="List1">Compiler generated variables are no longer shown in the locals list</li>
      <li styleclass="List1">The locals list now shows SELF in stead of this</li>
      <li styleclass="List1">X# predefined types such as WORD, LOGIC etc are shown with their X# type names in the locals window</li>
    </list>
    <para styleclass="Heading3">Testing</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for the Test Explorer window</li>
      <li styleclass="List1">Added templates for unit testing with XUnit, NUnit and Microsoft Test</li>
    </list>
    <para styleclass="Heading3">Other</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added warning when Vulcan was (re)installed after XSharp, which could cause a problem in the Visual Studio integration</li>
      <li styleclass="List1">The VS Parser was marking Interfaces as structure in stead of interface. This has been fixed.</li>
      <li styleclass="List1">The tool XPorter tools have better names in the VS Tools Menu</li>
      <li styleclass="List1">The VS Background parser gets suspended while looking up type information to improve the intellisense speed</li>
      <li styleclass="List1">Several changes were made to the templates that come with X#</li>
    </list>
    <para styleclass="Heading2">XPorter</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fix problem in propertygroup conditions.</li>
    </list>
    <para styleclass="Heading2">VOXPorter</para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Generate clipper constructors is now disabled by default</li>
      <li styleclass="List1">Fixed a problem in the VS Template files.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.0.3</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with the index calculation for Vulcan Arrays indexed with a usual argument</li>
      <li styleclass="List1">Fixed a problem with the generation of automatic return values for code that ends with a begin sequence statement or a try statement</li>
      <li styleclass="List1">Optimized the runtime performance for literal symbols. <br/>The compiler now generates a symbol table for the literal symbols and each literal symbol used in your app is only created once.<br/>You may experience a little delay at startup if your app uses a LOT (thousands) of literal symbols. But the runtime performance should be better.</li>
      <li styleclass="List1">Added a compiler error for code where numerics are casted to an OBJECT with the VO compatible _CAST operator. <br/>This is no longer allowed:<br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> nValue </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> LONG</text><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> oObject </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> OBJECT</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">nValue := 123</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">oObject := OBJECT(_CAST, nValue)</text></li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 1.0.2</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for XML doc generation. We support the same tags that the C# compiler and other .Net compiler support. </li>
      <li styleclass="List1">Improved some parser errors.</li>
      <li styleclass="List1">Created separate projects for portable and non portable (.Net framework 4.6) for the compiler and scripting</li>
      <li styleclass="List1">Fixed the code generation for conversion from USUAL to a known type. Now the same error is generated that Vulcan produces when the object type in the usual does not match the type of the target variable</li>
      <li styleclass="List1">When declaring a type with the same name as the assembly now a compiler error is generated with a suggested work around.</li>
      <li styleclass="List1">Fixed a strange compiler message when using a PTR() operation on a method call</li>
      <li styleclass="List1">Indexed access to bytes in a PSZ is now 1 based like in VO when the VO dialect is used. The Vulcan dialect needs 0 based index access like Vulcan.</li>
      <li styleclass="List1">The error message for compound assignments of FLOAT and USUAL has been removed. The compiler now contains a workaround for the problem in the Vulcan Runtime</li>
      <li styleclass="List1">For ambiguous code where the compiler has to choose between a Function call and a static method call in any other class, the compiler now chooses the function call over the method call (Vo and Vulcan dialect). The warning will still be generated.</li>
      <li styleclass="List1">When passing a variable by reference with the @ sign the compiler will now check to see if the declared type of the function/method parameter matches the type of the local variable.</li>
      <li styleclass="List1">Some compiler warnings for unused variables were being suppressed in the VO/Vulcan dialect. They are activated again.</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Scripting</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The scripting was not working in release 1.01</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio Integration</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">QuickInfo could generate a &apos;hang&apos; in the VS editor. This has been fixed</li>
      <li styleclass="List1">Added quickinfo for globals and defines</li>
      <li styleclass="List1">Added completionlists for globals and defines</li>
      <li styleclass="List1">Added VO Form editor to edit vnfrm/xsfrm files and generate the code and resources</li>
      <li styleclass="List1">Added VO Menu editor to edit vnmnu/xsmnu files and generate the code and resources</li>
      <li styleclass="List1">Added VO DbServer editor and VO Fieldspec editor to edit vndbs/xsdbs and vnfs/xsfs files and generate the code and resources</li>
      <li styleclass="List1">Added keyword and identifier case synchronization. </li>
      <li styleclass="List1">Fixed a problem where typing SUPER( in the editor could throw an exception</li>
      <li styleclass="List1">Prebuild and Postbuild entries in the project file are now configuration specific</li>
      <li styleclass="List1">Added support for XML Doc generation in the project system</li>
      <li styleclass="List1">Fixed a &apos;hang&apos; that could occur with Visual Studio 2017 version 15.3 and later</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">VO Xporter</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem when importing certain VO 2.7 AEF files</li>
      <li styleclass="List1">Fixed a problem with acceptable characters in the solution folder name</li>
      <li styleclass="List1">VO Form and menu entities are also included in the xsproj file</li>
      <li styleclass="List1">Added an option to the INI files to specify the Vulcan Runtime files location (<tab /><tab />)</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in General Release (1.0.1.1)</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with VERY old versions of the Vulcan Runtime</li>
      <li styleclass="List1">Variables declared as DIM Byte[] and similar are now Pinned by the compiler</li>
      <li styleclass="List1">[Return] attribute was not properly handled by the compiler. This has been fixed</li>
      <li styleclass="List1">Compound Assignment (u+= f or -=) from USUAL and FLOAT were causing a stackoverflow at runtime caused by a problem in the Vulcan Runtime. These expressions now generate a compiler error with the suggestion to change to a simple assignment ( u := u + f)</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio Integration</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Project References between XSharp Projects were also loaded as assemblyreference when resolving types. This could lead to speed problems and unnecessary memory usage</li>
      <li styleclass="List1">Improved the speed of the construction of Completion Lists (such as methods and fields for a type). </li>
      <li styleclass="List1">We have also added Completion List Tabs, where you can see fields, properties, methods etc. on separate tabs. You can enable/disable this in the Tools/Options/Text Editor/XSharp/Intellisense options page.</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">VO XPorter</text></para>
    <list id="108" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added a check to make sure that the default namespace for a X# project cannot contain a whitespace character</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in General Release (1.0.1)</para>
    <para styleclass="Heading2">New Features</para>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added support for ENUM Basetypes (ENUM Foo AS WORD)</li>
      <li styleclass="List1">We have added a separate syntax for Lambda Expressions</li>
      <li styleclass="List1">We have added support for Anonymous Method Expressions</li>
      <li styleclass="List1">Typed local variables can now also be used for PCALL() calls</li>
      <li styleclass="List1">Methods with the ExtensionAttribute and Parameters with the ParamArrayAttribute attributes now compile correctly, but with a warning</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed a problem with a late bound assign of a literal codeblock</li>
      <li styleclass="Normal">Resolved several name conflicts </li>
      <li styleclass="Normal">Improved several of the error messages</li>
      <li styleclass="Normal">Fixed compilation problem for Properties with only a SET accessor</li>
      <li styleclass="Normal">Fixed a crash in a switch block with an if .. endif statement</li>
      <li styleclass="Normal">Fix problem with virtual instance methods and structures</li>
      <li styleclass="Normal">Fixed name conflict foreach variables used in Array Literals</li>
      <li styleclass="Normal">Changed resolution for Functions and static methods with the same name. <br/>In the VO/Vulcan dialect functions take precedence over static methods. If you want to call the static method then then you need to prefix the method call with the classname.</li>
      <li styleclass="Normal">There is a separate topic in this documentation now that describes the syntax differences and similarities between Codeblocks, Lambda Expressions and Anonymous Method Expressions.</li>
      <li styleclass="Normal">Fixed incorrect error message for Start() function with wrong prototype.</li>
      <li styleclass="Normal">When an ambiguity is detected between a function and a static method then a warning is displayed</li>
    </list>
    <para styleclass="Heading2">Visual Studio</para>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added parameter tips for Functions and methods from &quot;Using Static&quot; classes</li>
      <li styleclass="Normal">Added parameter tips for Clipper Calling Convention functions and methods</li>
      <li styleclass="Normal">Added support for generics in Intellisense</li>
      <li styleclass="Normal">Intellisense will show keywords in stead of native type names (WORD in stead of System.UInt16 for example)</li>
      <li styleclass="Normal">Parameter tips are now shown when a opening <text style="font-weight:bold;">&apos;(&apos;</text> or <text style="font-weight:bold;">&apos;{&apos;</text> is typed as well as when the user types a comma <text style="font-weight:bold;">&apos;,&apos;</text>.</li>
      <li styleclass="Normal">Parameter tips will show REF OUT and AS modifiers</li>
      <li styleclass="Normal">Added intellisense for COM references, both for normal COM references as well as for Primary Interop Assemblies. Also members from implemented interfaces are now included in intellisense code completion (this is very common for COM).</li>
      <li styleclass="Normal">Improved intellisense for Project References from other languages, such as C# and VB.</li>
      <li styleclass="Normal">Added intellisense for Functions in referenced projects and referenced Vulcan and/or X# assemblies</li>
      <li styleclass="Normal">Suppress &quot;special type names&quot; in intellisense lists</li>
      <li styleclass="Normal">Added support for &quot;VulcanClassLibrary&quot; attribute to help find types and functions</li>
      <li styleclass="Normal">Errors from the Native Resource compiler are now also included in the error list</li>
      <li styleclass="Normal">Fixed problem with parameter tips for Constructors</li>
      <li styleclass="Normal">Added memberlist support for X# type keywords such as STRING, REAL4 etc.</li>
      <li styleclass="Normal">Fixed several issues with the Windows Form editor in relation to ActiveX controls</li>
      <li styleclass="Normal">Added a menu option to start the VO Xporter tool</li>
      <li styleclass="Normal">Added background scanning for dependent items, to make sure that newly generated code is scanned and available for intellisense.</li>
      <li styleclass="Normal">Several changes to the Windows Forms editor and project system:</li>
      <list id="110" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="Normal">Added support for adding ActiveX controls</li>
        <li styleclass="Normal">Added support for Form Inheritance. Our forms are also visible in the C# Inherited form wizard</li>
        <li styleclass="Normal">Added support to add our Windows Forms Custom Controls to the ToolBox in Visual Studio</li>
        <li styleclass="Normal">Some performance enhancements in the Codedom Parser that is used by the Windows Form Editor. You should notice this for larger forms.</li>
      </list>
    </list>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Fixed several crashes reported by users</li>
      <li styleclass="Normal">Native Resource files (.rc) now open in the Source code editor</li>
      <li styleclass="Normal">Improved background parsing speed</li>
      <li styleclass="Normal">Improved keyword colorization speed</li>
      <li styleclass="Normal">Improved handling of Type and Member dropdowns in the editor</li>
    </list>
    <para styleclass="Heading2">Tools</para>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Added a first version of the VO Xporter tool</li>
      <li styleclass="Normal">The installer now registers .xsproj files, .prg, .ppo. .vh, .xh and .xs files so they will be opened with Visual Studio</li>
    </list>
    <para styleclass="Heading2">Documentation</para>
    <list id="110" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We have added some chapters on how to convert your VO AEF and/or PRG files to a XIDE project and/or a Visual Studio solution.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.12</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Scripting</text></para>
    <list id="111" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added the ability to use X# scripts. Some documentation about how this works </text><link displaytype="text" defaultstyle="true" type="topiclink" href="X-Scripting" styleclass="Normal">can be found here</link><text styleclass="Normal">. You can also find scripting examples in the </text><br/><text styleclass="Normal">c:\Users\Public\Documents\XSharp\Scripting folder</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <para styleclass="Heading2"><text style="font-weight:bold;">All dialects</text></para>
    <list id="112" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The compiler is now based on the Roslyn source code for C# 7.</li>
      <li styleclass="List1">Accesses and Assigns with the same name for the same (partial) class in separate source files are now merged into one property. This will slow down the compiler somewhat. We recommend that you define the ACCESS and ASSIGN in the same source file.</li>
      <li styleclass="List1">Added support for repeated result markers in the preprocessor</li>
      <li styleclass="List1">We have added the compiler macro <link displaytype="text" defaultstyle="true" type="topiclink" href="Compiler-Macros">__DIALECT_HARBOUR__</link></li>
      <li styleclass="List1">Fixed the name resolution between types, namespaces, fields, properties, methods, globals etc. The core dialect is very close to the C# rules, the other dialect follows the VO rules.</li>
      <li styleclass="List1">Some warnings for ambiguous code have been added</li>
      <li styleclass="List1">_Chr() with untyped numeric values would crash. This has been fixed.</li>
      <li styleclass="List1">We made some changes to the character literal rules. For the VO and Harbour dialect there are now other rules then for Core and Vulcan. See the <link displaytype="text" defaultstyle="true" type="topiclink" href="CharLiterals">help topic for more information</link></li>
    </list>
    <para styleclass="Heading2">VO and Vulcan Dialect</para>
    <list id="111" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Several VO compatibility issues have been fixed</li>
      <li styleclass="List1">The QUIT, ACCEPT, WAIT, DEFAULT TO and STORE command are now removed from the compiler and defined in our standard header file &quot;XSharpDefs.xh&quot; which is located in the \Program Files(x86)\XSharp\Include folder. These commands are not compiled in the core dialect</li>
      <li styleclass="List1">Added support for CONSTRUCTOR() CLASS MyClass and DESTRUCTOR CLASS MyClass (in other words, outside the CLASS .. ENDCLASS construct</li>
    </list>
    <list id="112" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The # (not equal) operator is now recognized when used without space before the keywords NIL, NULL_STRING, NULL_OBJECT etc. so #NIL is not seen as the symbol NIL but as Not Equal To NIL</li>
      <li styleclass="List1">SizeOf and _TypeOf were special tokens in VO and could not be abbreviated. We have changed the X# behavior to match this. This prevents name conflicts with variables such as _type.</li>
      <li styleclass="List1">We have added support for DLL entrypoints with embedded @ signs, such as &quot;CAVOADAM.AdamCleanupProtoType@12&quot;</li>
      <li styleclass="List1">(DWORD) (-1) would require the unchecked operator. This is now compatible with Vulcan and generates a DWORD with the value System.Uint32.MaxValue.</li>
      <li styleclass="List1">STATIC VOSTRUCT now gets compiled as INTERNAL VOSTRUCT. This means that you cannot have the same structure twice in your app. Why would you want to do that ?</li>
      <li styleclass="List1">Fixed several cases of &quot;incorrect&quot; code that would be compiled by VO, such as a codeblock that looks like: <br/><tab />cb := { |x|, x[1] == 1 }<br/>Note the extra comma.<br/>This now compiled into the same codeblock as:</li>
    </list>
    <para styleclass="List1"><tab /><tab />cb := { |x| x[1] == 1 }</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The /vo16 compiler option has been disabled for now (does not do anything) because it had too many side effects.</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="114" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Deleted files and folders are moved them to the Trash can.</li>
      <li styleclass="List1">Fixed an intellisense problem in the XAML editor</li>
      <li styleclass="List1">Added support for Code Completion between different X# projects</li>
      <li styleclass="List1">Added support for Code Completion and other intellisense features for source code in VB and C# projects</li>
      <li styleclass="List1">Added support for parameter info</li>
    </list>
    <para styleclass="Heading2">Documentation</para>
    <list id="115" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have added (generated) topics for all undocumented compiler errors. Some topics only contain the text that is shown by the compiler. More documentation will follow. Also some documentation for the X# Scripting has been added.</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.11</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3"><text style="font-weight:bold;">All dialects</text></para>
    <list id="116" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Improved some error messages, such as for unterminated strings</li>
      <li styleclass="List1">Added support for the /s (Syntax Check only) command line option</li>
      <li styleclass="List1">Added support for the /parseonly command line option which is used by the intellisense parser</li>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added some compiler errors and warnings for invalid code</li>
      <li styleclass="List1">The preprocessor did not properly handle 4 letter abbreviations for #command and #translate. This has been fixed</li>
      <li styleclass="List1">Fixed some problems found with the preprocessor</li>
      <li styleclass="List1">We switched to a new Antlr parser runtime. This should result in slightly better performance.</li>
      <li styleclass="List1">Changed the way literal characters and strings are defined:</li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">In the Vulcan dialect a literal string that is enclosed with single quotes is a char literal. Double quotes are string literals</li>
        <li styleclass="List1">In the Core and VO dialect a literal string that is enclosed with single quotes is a string literal. Double quotes are also string literals.<br/>To specify a char literal in Core and VO you need to prefix the literal with a &apos;c&apos;:</li>
      </list>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cChar </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;"> CHAR</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;cChar := c&apos;A&apos;</text><tab /></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Changed the way literal characters and strings are defined:</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">sizeof</text><text styleclass="Normal">() and </text><text styleclass="Normal" style="font-weight:bold;">_sizeof</text><text styleclass="Normal">() no longer generate a warning that they require &apos;unsafe&apos; code, when compiling for x86 or x64. When compiling for AnyCpu the warning is still produced.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When the includedir environment variable was not set then the XSharp\Include folder would also not be found automatically. </text></li>
    </list>
    <para styleclass="Heading3">VO/Vulcan Compatibility</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added /vo16 compiler option to automatically generate constructors with Clipper calling convention for classes without constructor</text></li>
    </list>
    <para styleclass="Heading3"><text style="font-weight:bold;">Harbour Compatibilty</text></para>
    <list id="117" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Started<text styleclass="Normal"> work on the Harbour dialect. This is identical with the VO/Vulcan dialect. The only difference so far is that the IIF() expressions are optional</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features / changed behavior:</text></para>
    <list id="118" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added Brace Matching</li>
      <li styleclass="List1">Added Peek definition (Alt-F12)</li>
      <li styleclass="List1">All keywords are not automatically part of the Completionlist</li>
      <li styleclass="List1">Fixed a member lookup problem with Functions and Procedures inside a Namespace</li>
      <li styleclass="List1">Increased background parser speed for large projects</li>
      <li styleclass="List1">Fixed type lookup for fields and properties from parent classes</li>
      <li styleclass="List1">Fixed problem where CSharp projects could not find the output of a XSharp project reference</li>
      <li styleclass="List1">The Intellisense parser now properly used all current projects compiler options.</li>
      <li styleclass="List1">Prevent crashes when the X# language buffer is fed with &quot;garbage&quot; such as C# code</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Installer</text></para>
    <list id="118" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The local template cache and components cache for VS2017 was not cleared properly this has been fixed.</li>
      <li styleclass="List1">Added code to properly unregister an existing CodeDomProvider when installing</li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Documentation</text></para>
    <list id="118" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Several empty chapters are now hidden. </li>
      <li styleclass="Normal">Added description of the templates</li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.10</para>
    <para styleclass="Normal"><text style="font-weight:normal;">This build focuses on the last remaining issues in the VO and Vulcan compatibility and adds a lot of new features to the Visual Studio integration.</text></para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">VO/Vulcan Compatibility</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have completed support for the </text><text styleclass="Normal" style="font-weight:bold;">DEFINE</text><text styleclass="Normal"> keyword. The type clause is now optional. The compiler will figure out the type of the define when no type is specified.</text><br/><text styleclass="Normal">The DEFINEs will be compiled to a Constant field of the Functions class, or a Readonly Static field, when the expression cannot be determined at compile time (such as for Literal dates or symbols).</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have extended the </text><text styleclass="Normal" style="font-weight:bold;">preprocessor </text><text styleclass="Normal">. It now has support for #command, #translate, #xcommand and #xtranslate. Also &quot;Pseudo function&quot; defines are supported, such as :</text><br/><br/><tab /><text styleclass="Code Example" style="font-weight:bold;">#define MAX(x,y) IIF((x) &gt; (y), (x), (y))</text><br/><br/><text styleclass="Normal">This works just like a #xtranslate, with the exception that the define is case sensitive (unless you have enabled the &quot;VO compatible preprocessor&quot; option (/</text><link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo8" styleclass="Normal">vo8</link><text styleclass="Normal">).</text><br/><text styleclass="Normal">The only thing that is </text><text styleclass="Normal" style="font-weight:bold; font-style:italic;">not working </text><text styleclass="Normal">in the preprocessor is the </text><text styleclass="Normal" style="font-weight:bold; font-style:italic;">repeated result marker</text><text styleclass="Normal">.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">In VO/Vulcan mode the compiler now accepts &quot;</text><text style="font-weight:bold;">garbage</text><text style="font-weight:normal;">&quot; between keywords such as ENDIF and NEXT and the end of the statement, just like the VO compiler.</text><br/><text style="font-weight:normal;">So you no longer have to remove &quot;comment&quot; tokens after a NEXT or ENDIF. This will compile without changes in the VO and Vulcan dialect:</text><br/><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> X == Y</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; DoSomething()</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">ENDIF</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> X == Y</text><br/>or<br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FOR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> I := 1 </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">to</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> 10</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;DoSomething()</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">NEXT</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> I</text><br/>We do not recommend this coding style, but this kind of code is very common...</li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed an issue with recognition of single quoted strings. These were always recognized as CHAR_CONST when the length of the string was 1. Now they are treated as STRING_CONST and the compiler backend has been adjusted to convert the STRING literals to CHAR literals when needed. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">In VO and Vulcan dialect when the compiler option /vo1 is used then RETURN statements without value or with a return value of SELF are allowed for the Init() and Axit() methods. Other return values will trigger a compiler warning and will be ignored. </text></li>
    </list>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features / changed behavior:</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The compiler now produces an error when a source file ends with an </text><text styleclass="Normal" style="font-weight:bold;">unterminated multi line comment</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added </text><text styleclass="Normal" style="font-weight:bold;">ASTYPE</text><text styleclass="Normal"> expression, similar to the AS construct in other languages. This will assign a value of the correct type or NULL when the expression is not of the correct type:</text><br/><tab /></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><tab /><text styleclass="Code Example" style="font-weight:bold;">VAR someVariable := &lt;AnExpression&gt; ASTYPE &lt;SomeType&gt;</text><br/></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">The </text><text styleclass="Normal" style="font-weight:bold;">Chr()</text><text styleclass="Normal"> and </text><text styleclass="Normal" style="font-weight:bold;">_Chr()</text><text styleclass="Normal"> functions are now converted to a string or character literal when the parameter is a compile time constant</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">Compilation speed</text><text styleclass="Normal"> for assemblies with larger numbers of functions, procedures, defines, globals or _dll functions has been improved.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">_DLL FUNCTIONS</text><text styleclass="Normal"> now automatically are marked with CharSet.Auto</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed some inconsistencies between Colon (:) and Point (.) interoperability and the super keyword</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed several compiler issues reported by FOX subscribers and other users.</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features / changed behavior:</text></para>
    <list id="119" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Tested and works with the release version of <text style="font-weight:bold;">Visual Studio 2017</text></li>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added support for </text><text styleclass="Normal" style="font-weight:bold;">regions</text><text styleclass="Normal" style="font-weight:normal;"> inside the VS editor. At this moment most &quot;entities&quot; are collapsible as well as statement blocks, regions and lists of usings, #includes and comments.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added support for </text><text styleclass="Normal" style="font-weight:bold;">member and type drop downs</text><text styleclass="Normal" style="font-weight:normal;"> in the VS Editor</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added support for </text><text styleclass="Normal" style="font-weight:bold;">Code completion </text><text styleclass="Normal" style="font-weight:normal;">in the VS editor</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added support for </text><text styleclass="Normal" style="font-weight:bold;">Goto definition</text><text styleclass="Normal" style="font-weight:normal;"> in the VS Editor</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Errors detected by the intellisense scanner are now also included in the </text><text styleclass="Normal" style="font-weight:bold;">VS error list.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added </text><text styleclass="Normal" style="font-weight:bold;">help links</text><text styleclass="Normal" style="font-weight:normal;"> to the errors in the VS error list. The help links will bring you to the appropriate page on the X# website. Not all the help pages are complete yet, but at least the infrastructure is working.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added support for </text><text styleclass="Normal" style="font-weight:bold;">snippets</text><text styleclass="Normal"> and included several code snippets in the installer</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have made several changes to the </text><text styleclass="Normal" style="font-weight:bold;">project properties dialogs</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The </text><text styleclass="Normal" style="font-weight:bold;">pre</text><text styleclass="Normal"> and </text><text styleclass="Normal" style="font-weight:bold;">post build </text><text styleclass="Normal">events are now on a separate page for the Project Properties. These are now also </text><text styleclass="Normal" style="text-decoration:underline;">not</text><text styleclass="Normal"> defined </text><text styleclass="Normal" style="text-decoration:underline;">per configuration</text><text styleclass="Normal"> but are shared between the various configurations. </text><br/><text styleclass="Normal">If you want to copy output results to different folders for &#160;different configurations you should use the $(Configuration) and $(Platform) variables</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have &#160;moved the </text><text styleclass="Normal" style="font-weight:bold;">Platform</text><text styleclass="Normal"> and </text><text styleclass="Normal" style="font-weight:bold;">Prefer32Bits</text><text styleclass="Normal"> properties to the Build page to make them configuration dependent</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with casing of the </text><text styleclass="Normal" style="font-weight:bold;">AnyCPU</text><text styleclass="Normal"> platform which would result in duplicate items in the VS Platform combobox</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for </text><text styleclass="Normal" style="font-weight:bold;">ARM</text><text styleclass="Normal"> and </text><text styleclass="Normal" style="font-weight:bold;">Itanium</text><text styleclass="Normal"> platform types</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Some properties were saved in project file groups without a </text><text styleclass="Normal" style="font-weight:bold;">platform identifier</text><text styleclass="Normal">. This has been fixed</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added a project property to control how Managed file resources are included: &#160;</text><text styleclass="Normal" style="font-weight:bold;">Use Vulcan Compatible Managed Resources</text><br/><text styleclass="Normal">When &apos;True&apos; then resources files are included in the assembly without namespace prefix. When &apos;False&apos; then the resource files are prefixed with the namespace of the app, just like in other .Net languages, such as C#</text></li>
      </list>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have fixed some </text><text styleclass="Normal" style="font-weight:bold;">code generation</text><text styleclass="Normal"> problems</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The parser that is used in the Windows Forms editor now also properly handles </text><text styleclass="Normal" style="font-weight:bold;">background images</text><text styleclass="Normal">. Both images in the resx for the form and also background images in the shared project resources</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added </text><text styleclass="Normal" style="font-weight:bold;">Nuget</text><text styleclass="Normal"> support for our project system.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have made several changes to fix problems in project files</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The project system now silently fixes problems with </text><text styleclass="Normal" style="font-weight:bold;">duplicate items</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed a problem with </text><text styleclass="Normal" style="font-weight:bold;">dependencies</text><text styleclass="Normal" style="font-weight:normal;"> between xaml files and their dependent designer.prg files and other dependent files</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed a problem with </text><text styleclass="Normal" style="font-weight:bold;">dependent items</text><text styleclass="Normal" style="font-weight:normal;"> in </text><text styleclass="Normal" style="font-weight:bold;">sub folders </text><text styleclass="Normal" style="font-weight:normal;">or in a folder tree that includes a dot in a folder name.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed a problem in the </text><text styleclass="Normal" style="font-weight:bold;">WPF template</text></li>
      </list>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed a refresh problem when </text><text styleclass="Normal" style="font-weight:bold;">deleting</text><text styleclass="Normal" style="font-weight:normal;"> a </text><text styleclass="Normal" style="font-weight:bold;">references</text><text styleclass="Normal" style="font-weight:normal;"> node</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Added implementation of the OAProject.Imports property, which is used by </text><text styleclass="Normal" style="font-weight:bold;">JetBrains</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">XPorter</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">Fixed a problem converting </text><text styleclass="Normal" style="font-weight:bold;">WPF style projects</text></li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.9</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <para styleclass="Body Text"><text style="font-weight:bold; font-style:italic;">With this build you can compile the Vulcan SDK without changes, except for some obvious errors in the Vulcan SDK that Vulcan did not find!</text><br/><text style="font-weight:bold; font-style:italic;">We consider the Vulcan Compatibility of the compiler finished with the current state of the compiler. All Vulcan code should compile without proble now.</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">VO/Vulcan Compatibility</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features / changed behavior:</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">All Init procedures are now properly called at startup. So not only the init procedures in the VOSDK libraries but also init procedures in other libraries and the main exe</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Changed the method and type resolution code:</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">A method with a single object parameter is now preferred over a method with an Object[] parameter</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When both a function (static method) exists and an instance method we will now call the static method in code inside methods that does not have a SELF: or SUPER: prefix.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">In situations where the @ operator is used to pass variables by reference.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">To make it more compatible with Vulcan for overloads with different numeric types.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">To prefer a method with specific parameters over a method with usual parameters</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">To avoid problems with Types and Namespaces with the same name.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">To prefer a method with an OBJECT parameter over the one with OBJECT[] parameters when only 1 argument is passed</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When 2 identical functions or types are detected in referenced assemblies we now choose the one in the first referenced assembly like Vulcan does, and generate warning 9043</text></li>
      </list>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The </text><text styleclass="Normal" style="font-weight:bold;">sizeof</text><text styleclass="Normal"> operator now returns a DWORD to be compatible with VO and Vulcan.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for</text><text styleclass="Normal" style="font-weight:bold;"> EXIT PROCEDURES</text><text styleclass="Normal"> (PROCEDURE MyProcedure EXIT). These procedures will automatically be called during program shutdown, just before all the global variables are cleared.</text><br/><text styleclass="Normal">The compiler now generates an $Exit function for each assembly in which the exit procedures will be called and the reference globals in an assembly will be cleared. In the main app a $AppExit() function is created that will call the $Exit functions in all references X# assemblies. When a Vulcan compiled assembly is referenced, then all the public reference globals will be cleared from the $AppExit() function.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for </text><text styleclass="Normal" style="font-weight:bold;">PCALL</text><text styleclass="Normal"> and </text><text styleclass="Normal" style="font-weight:bold;">PCALLNATIVE</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for several Vulcan compatible compiler options:</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">/vo1 </text><text styleclass="Normal" style="font-weight:normal;">Allow Init() and Axit() for constructor and destruction</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">/vo6 </text><text styleclass="Normal" style="font-weight:normal;">Allow (global) function pointers. DotNet does not &quot;know&quot; these. They are compiled to IntPtr. The function information is preserved so you can use these pointer in a PCALL()</text></li>
        <li styleclass="Normal"><text style="font-weight:bold;">/ppo</text>. Save the preprocessed compiler output to a file</li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">/Showdefs </text><text styleclass="Normal" style="font-weight:normal;">Show a list of the defines and their values on the console</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">/showincludes </text><text styleclass="Normal" style="font-weight:normal;">Show a list of the included header files on the console</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">/verbose </text><text styleclass="Normal" style="font-weight:normal;">Shows includes, source file names, defines and more. on the console</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">DEFAULT TO</text><text styleclass="Normal" style="font-weight:normal;"> command</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">ACCEPT</text><text styleclass="Normal" style="font-weight:normal;"> command</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:bold;">WAIT </text><text styleclass="Normal" style="font-weight:normal;">command</text></li>
      </list>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Several code generation changes:</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Changed the code generation for DIM elements inside VOStruct arrays because the Vulcan compiler depends on a specific naming scheme and did not recognize our names.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Improved the code generation inside methods with CLIPPER calling convention.</text></li>
      </list>
    </list>
    <para styleclass="Heading3"><text style="font-weight:bold;">Bug fixes</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Implicit namespaces are now only used when the /ins compiler option is enabled. In Vulcan dialect the namespace Vulcan is always included.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with the @ operator and VOSTRUCT types</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with DIM arrays of VOSTRUCT types</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with LOGIC values inside VOSTRUCT and UNION types</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with the VOStyle _CAST and Conversion operators. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several numeric conversion problems</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems when mixing NULL, NULL_PTR and NULL_PSZ</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with the _CAST operator</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with PSZ Comparisons. X# now works just like Vulcan and VO and produces the same (sometimes useless) results</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with USUAL array indexes for multi dimensional XBase Arrays</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed codeblock problems for codeblocks where the last expression was VOID</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Changed code generation for NULL_SYMBOL</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Preprocessor #defines were sometimes conflicting with class or namespace names. For example when /vo8 was selected the method System.Diagnostics.Debug.WriteLine() could not be called because the DEBUG define was removing the &#160;classname. We have changed the preprocessor so it will no longer replace words immediately before or after a DOT or COLON operator.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a compiler crash when calling static methods in the System.Object class when Late Binding was enabled</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed String2Psz() problem inside PROPERTY GET and PROPERTY SET</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">And many more changes.</text></li>
    </list>
    <para styleclass="Heading3"><text style="font-weight:bold;">All dialects</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features / changed behavior:</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Several code generation changes:</text></li>
      <list id="113" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The code generation for ACCESS and ASSIGN has changed. There are no longer separate methods in the class, but the content of these methods is now inlined in the generated Get and Set methods for the generated property.</text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Optimized the code generation for </text><text styleclass="Normal" style="font-weight:bold;">IIF</text><text styleclass="Normal"> statements. </text></li>
        <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The </text><text styleclass="Normal" style="font-weight:bold;">debugger/step</text><text styleclass="Normal"> information has been improved. The debugger should now also stop on IF statements, FOR statements, CASE statements etc.</text></li>
      </list>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Indexed access to properties defined with the SELF keyword can now also use the &quot;</text><text styleclass="Normal" style="font-weight:bold;">Index</text><text styleclass="Normal">&quot; property name</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Functions and Procedures inside classes are not allowed (for now)</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">RETURN &lt;LiteralValue&gt; inside an ASSIGN method will no longer allocate a variable and produce an warning</text></li>
      <li styleclass="Body Text">Several keywords are now also allowed as Identifier (and will no longer have to be prefixed with @@ ):<br/><text styleclass="Code Example" style="font-weight:bold;">Delegate, Enum, Event, Field, Func, Instance, Interface, Operator, Proc, Property, Structure, Union, VOStruct </text>and many more<br/>As a result the following is now valid code (but not recommended):<br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Start </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OPERATOR</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> LONG</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">INTERFACE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">, </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">OPERATOR</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></li>
    </list>
    <para styleclass="Body Text">You can see that the Visual Studio language support also recognizes that INTERFACE and OPERATOR are not used as keywords in this context</para>
    <para styleclass="Heading3"><text style="font-weight:bold;">Bug fixes</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with the REPEAT UNTIL statement</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a crash for code with a DO CASE without a matching END CASE</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several issues for the code generation for _DLL FUNCTIONs and _DLL PROCEDUREs</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem (in the Roslyn code) with embedding Native Resources in the Assembly.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with the _OR() and _AND() operators with more than 2 arguments.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for Pointer dereferencing using the VO/Vulcan Syntax : DWORD(p) =&gt; p[1]</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with the @ operator</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When two partial classes had the same name and a different casing the compiler would not properly merge the class definitions.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a crash when a #define in code was the same as a define passed on the commandline</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Indexed pointer access was not respecting the /AZ compiler option (and always assumed 0 based arrays). This has been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with the caching of preprocessed files, especially files that contain #ifdef constructs.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem which could occur when 2 partial classes had the same name but a different case</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a compiler crash when a referenced assembly had duplicate namespaces that were only different in Case</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed problems with Functions that have a [DllImport] attribute. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Error messages for ACCESS/ASSIGN methods would sometimes point to a strange location in the source file. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with Init Procedures that had a STATIC modifier</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem in the preprocessor when detecting the codepage for a header file. This could cause problems reading header files with special characters (such as the copyright sign ©) </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">And many more changes.</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio Integration</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for all compiler options in the UI and the build system</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed problems with dependent file items in subfolders</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The Optimize compiler option was not working</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The &apos;Clean&apos; build option now also cleans the error list</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Under certain conditions the error list would remain empty even though there were messages in the output pane. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The &lt;Documentationfile&gt; property inside the xsproj file would cause a rebuild from the project even when the source was not changed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Earlier versions of XPorter could create xsproj files that would not build properly. The project system now fixes this automatically</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with the build system and certain kind of embedded managed resources</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Documentation</text></para>
    <list id="120" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added many descriptions to the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="X-Compiler-Options-Listed-Alph" styleclass="Normal" style="font-weight:normal;">commandline options</link></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal" style="font-weight:normal;">We have added a list of the most common </text><link displaytype="text" defaultstyle="true" type="topiclink" href="X-Compiler-Errors" styleclass="Normal" style="font-weight:normal;">compiler errors and warnings</link><text styleclass="Normal" style="font-weight:normal;">. </text></li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.8</para>
    <para styleclass="Heading2">Compiler</para>
    <para styleclass="Heading3">VO/Vulcan Compatibility</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Default Parameters are now handled like VO and Vulcan do. This means that you can also have date constants, symbolic constants etc as default parameter</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">String Single Equals rules are now 100% identical with Visual Objects. We found one case where Vulcan does not return the same result as Visual Objects. We have chosen to be compatible with VO.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When compiling in VO/Vulcan mode then the init procedures in the VO SDK libraries are automatically called. You do not have to call these in your code anymore</text><br/><text styleclass="Normal">Also Init procedures in the main assembly are called at startup.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The /vo7 compiler option (Implicit casts and conversions) has been implemented. This also includes support to use the @ sign for REF parameters</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">You can now use the DOT operator to access members in VOSTRUCT variables</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have fixed several USUAL - Other type conversion problems that required casts in previous builds</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The compiler now correctly parses VO code that contains DECLARE METHOD, DECLARE ACCESS and DECLARE ASSIGN statements and ignores these</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The compiler now parses &quot;VO Style&quot; compiler pragma&apos;s (~&quot;keyword&quot; as white-space and ignores these.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem where arrays declared with the &quot;LOCAL aSomething[10] AS ARRAY&quot; syntax would not be initialized with the proper number of elements</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem when calling Clipper Calling Convention constructors with a single USUAL parameter</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Attributes on _DLL entities would not be properly compiled. These are recognized for now but ignored. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several numeric conversion problems</text></li>
    </list>
    <para styleclass="Heading3">New features</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added support for</text><link displaytype="text" defaultstyle="true" type="topiclink" href="new-feat-Collection-Initializers" styleclass="Normal"> Collection Initializers</link><text styleclass="Normal"> and </text><link displaytype="text" defaultstyle="true" type="topiclink" href="new-feat-Object-Initializers" styleclass="Normal">Object Initializers</link></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Anonymous type members no longer have to be named. If you select a property as an anonymous type member then the same property name will be used for the anonymous type as well.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Missing closing keywords (such as NEXT, ENDIF, ENDCASE and ENDDO) now produce better error messages</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">IIF() Expressions are now also allowed as Expression statement. The generated code will be the same as if an IF statement was used</text></li>
    </list>
    <para styleclass="Code Example" style="margin-left:52px;"><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> IsEven(nValue </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;"> LONG) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> LOGIC</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> lEven </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; color:#000000;"> LOGIC</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; IIF( nValue %2 == 0, lEven := TRUE, lEven := FALSE)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> lEven</text></para>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="Normal">We really do not encourage to hide assignments like this, but in case you have used this coding style,it works now &lt;g&gt;.</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">AS VOID is now allowed as (the only) type specification for PROCEDUREs</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have added a .config file to the exe for the shared compiler that should make it faster</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The XSharpStdDefs.xh file in the XSharp is now automatically included when compiling. This file declares the CRLF constant for now.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Include files are now cached by the compiler. This should increase the compilation speed for projects that depend on large included files, such as the Win32APILibrary header file from Vulcan</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">When a function is found in an external assembly and a function with the same name and arguments is found in the current assembly, then the function in the current assembly is used by the compiler</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Compiler error messages for missing closing symbols should have been improved</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Compiler error messages for unexpected tokens have been improved</text></li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Several command-line options with a minus sign were not properly handled by the compiler</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several crashes related to assigning NULL_OBJECT or NULL to late bound properties have been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Partial class no longer are required to specify the parent type on every source code location. When specified, the parent type must be the same of course. Parent interfaces implemented by a class can also be spread over multiple locations</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We have fixed a crash that could happen with errors/warnings in large include files </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Abstract methods no longer get a Virtual Modifier with /vo3 </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with virtual methods in child classes that would hide parent class methods</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Automatic return value generation was also generating return values for ASSIGN methods. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">We fixed a problem with the Join Clauses for LINQ Expressions that would cause a compiler exception</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The /vo10 (compatible iif) compiler option no longer adds casts in the Core dialect. It only does that for the VO/Vulcan dialect</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <para styleclass="Normal"><text style="font-weight:normal;">We have changed the way the error list and output window are updated. In previous version some lines could be missing on the output window, and the error code column was empty. This should work as expected now.</text></para>
    <list id="121" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have merged some code from some other MPF based project systems, such as WIX (called Votive), NodeJS and Python (PTVS) to help extend our project system. As a result:</li>
      <list id="121" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">Our project system now has support for Linked files</li>
        <li styleclass="List1">Our project system now has support for &apos;Show All Files&apos; and you can now Include and Exclude files. This setting is persisted in a .user file, so you can exclude this from SCC if you want.</li>
        <li styleclass="List1">We have made some changes to support better &apos;Drag and Drop&apos;</li>
      </list>
    </list>
    <list id="121" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have fixed several issues with regard to dependent items</li>
      <li styleclass="List1">When you include a file that contains a form or user control, this is now recognized and the appropriate subtype is set in the project file, so you can open the windows forms editor</li>
      <li styleclass="List1">We are now supporting source code generation for code behind files for .Settings and .Resx files</li>
      <li styleclass="List1">The combobox in the Managed Resource editor and Managed Settings tool to choose between internal code and public code is now enabled. Selecting a different value in the combobox will change the tool in the files properties.</li>
      <li styleclass="List1">The last response file for the compiler and native resource compiler are now saved in the users Temp folder to aid in debugging problems.</li>
    </list>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The response file now has each compiler option to a new line to make it easier to read and debug when this is necessary.</li>
      <li styleclass="List1">The code generation now preserves comments between entities (methods) </li>
      <li styleclass="List1">We fixed several minor issues in the templates</li>
      <li styleclass="List1">When the # of errors and warnings is larger than the built-in limit of 500, then a message will be shown that the error list was truncated</li>
      <li styleclass="List1">At the end of the build process a line will be written to the output window with the total # of warnings and errors found </li>
      <li styleclass="List1">The colors in the Source Code Editor are now shared with the source code editors for standard languages such as C# and VB</li>
      <li styleclass="List1">When you have an inactive code section in your source code, embedded in an #ifdef that evaluates to FALSE then that section will be visibly colored gray and there will be no keyword highlighting. The source code parser for the editor picks up the include files and respects the path settings. Defines in the application properties dialog and the active configuration are not respected yet. That will follow in the next build.</li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.7.1</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The compiler was not accepting wildcard strings for the AssemblyFileVersion Attribute and the AssemblyInformationVersion attribute. This has been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The #Pragma commands #Pragma Warnings(Push) and #Pragma Warnings(Pop) were not recognized. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The compiler was not recognizing expressions like global::System.String.Compare(..). This has been fixed</text></li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Dependent items in subfolders of a project were not recognized properly and could produce an error when opening a project</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem in the VulcanApp Template</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The Windows Forms Editor would not open forms in a file without begin namespace .. end namespace. This has been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Source code comments between &apos;entities&apos; in a source file is now properly saved and restored when the source is regenerated by the form editor</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Unnecessary blank lines in the generate source code are being suppressed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The XPorter tool is now part of the Installation</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Comments after a line continuation character were not properly colored</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Changed the XSharp VS Editor Color scheme to make certain items easier to read</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">New managed resource files would not be marked with the proper item type. As a result the resources would not be available at runtime. This has been fixed.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added &apos;Copy to Output Directory&apos; property to the properties window</text></li>
    </list>
    <para styleclass="Heading2">Setup</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The installer, exe files and documentation are now signed with a certificate</text></li>
    </list>
    <para styleclass="Normal"><line style="height:1px; color:#000000;" /></para>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.7</para>
    <para styleclass="Heading2"><text style="font-weight:bold;">Compiler</text></para>
    <para styleclass="Heading3"><text style="font-weight:bold;">New features:</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for the VOSTRUCT and UNION types</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for Types as Numeric values, such as in the construct </text><br/><tab /><text styleclass="Code Example">IF UsualType(uValue) == LONG</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added a FIXED statement and FIXED modifier for variables</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for </text><link displaytype="text" defaultstyle="true" type="topiclink" href="new-feat-Interpolated-Strings" styleclass="Normal">Interpolated Strings</link></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Empty switch labels inside </text><link displaytype="text" defaultstyle="true" type="topiclink" href="command_SWITCH" styleclass="Normal">SWITCH</link><text styleclass="Normal"> statements are now allowed. They can share the implementation with the next label. </text><br/><text styleclass="Normal">Error 9024 (EXIT inside SWITCH statement not allowed) has been added and will be thrown if you try to exit out of a loop around the switch statement. </text><br/><text styleclass="Normal">This is not allowed. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for several /vo compiler options:</text><br/><text styleclass="Normal">- vo8 (Compatible preprocessor behavior). This makes the preprocessor defines case insensitive. Also a define with the value FALSE or 0 is seen as &apos;undefined&apos;</text><br/><text styleclass="Normal">- vo9 (Allow missing return statements) compiler option. Missing return values are also allowed when /vo9 is used. &#160;</text><br/><text styleclass="Normal">Warnings 9025 (Missing RETURN statement) and 9026 (Missing RETURN value) have been added.</text><br/><text styleclass="Normal">- vo12 (Clipper Integer divisions)</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The preprocessor now automatically defines the </text><link displaytype="text" defaultstyle="true" type="topiclink" href="Compiler-Macros" styleclass="Body Text">macros</link><text styleclass="Normal"> __VO1__ until __VO15__ with a value of TRUE or FALSE depending on the setting of the compiler option</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">The FOX version of the compiler is now distributed in Release mode and much faster. A debug version of the compiler is also installed in case it is needed to aid in finding compiler problems.</text></li>
    </list>
    <para styleclass="Heading3">Changed behavior</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">The compiler generated Globals class for the Core dialect is now called <text style="font-weight:bold;">Functions</text><text style="font-weight:normal;"> and no longer Xs$Globals. </text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Overriding functions in VulcanRTFuncs can now be done without specifying the namespace: </text><br/><text styleclass="Normal">When the compiler finds two candidate functions and one of them is inside VulcanRTFuncs then the function that is not in VulcanRTFuncs is chosen.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Warning 9001 (unsafe modifier implied) is now suppressed for the VO/Vulcan dialect. You MUST pass the /unsafe compiler option if you are compiling unsafe code though!</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Improved the error messages for the Release mode of the compiler</text></li>
    </list>
    <para styleclass="Heading3">Bug fixes</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">RETURN and THROW statements inside a Switch statement would generate an &apos;unreachable code&apos; warning. This has been fixed</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with mixing signed and unsigned Array Indexes</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several problems with the FOR .. NEXT statement. The &quot;To&quot; expression will now be evaluated for every iteration of the loop, just like in VO and Vulcan.</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed several compiler crashes</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with implicit code generation for constructors</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a visibility problem with static variables inside static functions</text></li>
    </list>
    <para styleclass="Heading2"><text style="font-weight:bold;">Visual Studio Integration</text></para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem that the wrong Language Service was selected when XSharp and Vulcan.NET were used in the same Visual Studio and when files were opened from the output window or the Find Results window</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed some problems with &apos;abnormal&apos; line endings in generated code</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem in the Class Library template</text></li>
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Fixed a problem with non standard command lines to Start the debugger</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.6</para>
    <para styleclass="Heading2">Compiler</para>
    <list id="122" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added alternative syntax for event definition. See <link displaytype="text" defaultstyle="true" type="topiclink" href="new-feat-EVENT-(Add-and-Remove)">EVENT</link> keyword in the documentation</li>
      <li styleclass="List1">Added Code Block Support</li>
      <li styleclass="List1">Implemented /vo13 (VO compatible string comparisons)</li>
      <li styleclass="List1">Added support for /vo4 (VO compatible implicit numeric conversions)</li>
      <li styleclass="List1">Aliased expressions are now fully supported</li>
      <li styleclass="List1">Fixed a problem with the &amp;= operator</li>
      <li styleclass="List1">Fixed several crashes for incorrect source code.</li>
      <li styleclass="List1">Fixed several problems related to implicit conversions from/to usual, float and date</li>
      <li styleclass="List1">Indexed properties (such as String:Chars) can now be used by name</li>
      <li styleclass="List1">Indexed properties can now have overloads with different parameter types</li>
      <li styleclass="List1">Added support for indexed ACCESS and ASSIGN</li>
      <li styleclass="List1">Fixed a problem when calling Clipper Calling Convention functions and/or methods with a single parameter</li>
      <li styleclass="List1">Fixed a crash with defines in the preprocessor</li>
      <li styleclass="List1">_CODEBLOCK is now an alias for the CODEBLOCK type</li>
      <li styleclass="List1">Fixed a crash for properties defined with parentheses or square brackets, but without actual parameters</li>
    </list>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="123" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Completed support for .designer.prg for Windows.Forms</li>
      <li styleclass="List1">Fixed an issue in the CodeDom generator for generating wrappers for Services</li>
      <li styleclass="List1">The XSharp Language service will no longer be used for Vulcan PRG files in a Side by Side installation</li>
      <li styleclass="List1">Editor performance for large source files has been improved.</li>
      <li styleclass="List1">All generated files are now stored in UTF, to make sure that special characters are stored correctly. If you are seeing warnings about code page conversions when generating code, then save files as UTF by choosing &quot;File - Advanced Save Options&quot;, and select a Unicode file format, from the Visual Studio Menu.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.51</para>
    <para styleclass="Heading2">Visual Studio Integration &amp; Build System</para>
    <list id="124" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The Native Resource compiler now &quot;finds&quot; header files, such as &quot;VOWin32APILibrary.vh&quot; in the Vulcan.NET include folder. Also the output of the resource compiler is now less verbose when running in &quot;normal&quot; message mode. When running in &quot;detailed&quot; or &quot;diagnostics&quot; mode the output now also includes the verbose output of the resource compiler.</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="125" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem that would make PDB files unusable</li>
      <li styleclass="List1">The error &quot;Duplicate define with different value&quot; (9012) has been changed to warning, because our preprocessor does a textual comparison and does not &quot;see&quot; that &quot;10&quot; and &quot;(10)&quot; are equal as well as &quot;0xA&quot; and &quot;0xa&quot;. It is your responsibility of course to make sure that the values are indeed the same. </li>
      <li styleclass="List1">Exponential REAL constants were only working with a lower case &apos;e&apos;. This is now case insensitive</li>
      <li styleclass="List1">Made several changes to the _DLL FUNCTION and _DLL PROCEDURE rules for the parser. Now we correctly recognize the &quot;DLL Hints &quot; (#123) and also allow extensions in these definitions. Ordinals are parsed correctly as well, but produce an error (9018) because the .Net runtime does not support these anymore. Also the Calling convention is now mandatory and the generated IL code includes SetLastError = true and ExactSpelling = true.</li>
      <li styleclass="List1">Fixed a problem with the ~ operator. VO and Vulcan (and therefore X#) use this operator as unary operator and as binary operator. <br/>The unary operator does a bitwise negation (Ones complement), and the binary operator does an XOR. <br/>This is different than C# where the ~ operator is Bitwise Negation and the ^ operator is an XOR (and our Roslyn backend uses the C# syntax of course).</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.5</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="126" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem where the output file name would contain a pipe symbol when building for WPF</li>
      <li styleclass="List1">Fixed a problem with the Item type for WPF forms, pages and user controls</li>
      <li styleclass="List1">The installer now has an option to not take away the association for PRG, VH and PPO items from an installed Vulcan project system.</li>
      <li styleclass="List1">Added support for several new item types in the projects</li>
      <li styleclass="List1">Added support for nested items</li>
      <li styleclass="List1">Added several item templates for WPF, RC, ResX, Settings, Bitmap, Cursor etc.</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="127" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for the new /vo15 command line switch.</li>
      <li styleclass="List1">Added support for compiling native resources.</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="128" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">A reference to VulcanRT and VulcanRTFuncs is now mandatory when compiling in VO/Vulcan dialect</li>
      <li styleclass="List1">Added support for indexed access for VO/Vulcan Arrays</li>
      <li styleclass="List1">Added support for VO/Vulcan style Constructor chaining (where SUPER() or SELF() call is not the first call inside the constructor body)</li>
      <li styleclass="List1">Added support for the &amp;() macro operator in the VO/Vulcan dialect</li>
      <li styleclass="List1">Added support for the FIELD statement in the VO/Vulcan dialect</li>
    </list>
    <list id="129" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <list id="129" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">The statement is recognized by the compiler</li>
        <li styleclass="List1">Fields listed in the FIELD statement now take precedence over local variables or instance variables with the same name</li>
      </list>
    </list>
    <list id="130" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for the ALIAS operator (-&gt;) in the VO/Vulcan dialect, with the exception of the aliased expressions (AREA-&gt;(&lt;Expression&gt;))</li>
      <li styleclass="List1">Added support for Late bound code (in the VO/Vulcan dialect)</li>
    </list>
    <list id="131" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <list id="131" level="1" type="ul" listtype="bullet" formatstring="&#111;" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:&apos;Courier New&apos;; font-size:11pt; color:#000000;">
        <li styleclass="List1">Late bound method calls</li>
        <li styleclass="List1">Late bound property get</li>
        <li styleclass="List1">Late bound property set</li>
        <li styleclass="List1">Late bound delegate invocation</li>
      </list>
    </list>
    <list id="132" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added a new <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-vo15">/vo15</link> command line option (Allow untyped Locals and return types): <br/>By default in the VO/Vulcan dialect missing types are allowed and replaced with the USUAL type. <br/>When you specify /vo15- then untyped locals and return types are not allowed and you must specify them. <br/>Of course you can also specify them as USUAL</li>
    </list>
    <list id="133" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The ? and ?? statement are now directly mapped to the appropriate VO/Vulcan runtime function when compiling for the VO/Vulcan dialect</li>
      <li styleclass="List1">We now also support the VulcanClassLibrary attribute and VulcanCompilerVersion attribute for the VO &amp; Vulcan dialect. <br/>With this support the Vulcan macro compiler and Vulcan Runtime should be able to find our functions and classes </li>
      <li styleclass="List1">The generated static class name is now more in par with the class name that Vulcan generates in the VO &amp; Vulcan dialect.</li>
      <li styleclass="List1">Added several implicit conversion operations for the USUAL type.</li>
      <li styleclass="List1">When accessing certain features in the VO &amp; Vulcan dialect (such as the USUAL type) the compiler now checks to see if VulcanRTFuncs.DLL and/or VulcanRT.DLL are included. <br/>When not then a meaningful error message is shown.</li>
      <li styleclass="List1">Added support for the intrinsic function _GetInst()</li>
      <li styleclass="List1">Fixed a problem with case sensitive namespace comparisons</li>
      <li styleclass="List1">Fixed a problem with operator methods</li>
    </list>
    <list id="134" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added preprocessor <link displaytype="text" defaultstyle="true" type="topiclink" href="Compiler-Macros">macros</link> __DIALECT__, __DIALECT_CORE__, __DIALECT_VO__ and __DIALECT_VULCAN__</li>
      <li styleclass="List1">The _Chr() pseudo function will now be mapped to the Chr() function</li>
    </list>
    <list id="135" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for missing arguments in arguments lists (VO &amp; Vulcan dialect only)</li>
      <li styleclass="List1">Fixed a crash when calculating the position of tokens in header files</li>
      <li styleclass="List1">The installer now offers to copy the Vulcan Header files to the XSharp Include folder</li>
      <li styleclass="List1">Added support for skipping arguments in (VO) literal array constructors</li>
    </list>
    <para styleclass="Heading2">Documentation</para>
    <list id="136" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added the XSharp documentation to the Visual Studio Help collection</li>
      <li styleclass="List1">Added reference documentation for the Vulcan Runtime</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.4</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="137" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Double clicking errors in the error browser now correctly opens the source file and positions the cursor</li>
      <li styleclass="List1">Fixed several problems in the project and item templates</li>
      <li styleclass="List1">The installer now also detects Visual Studio 15 Preview and installs our project system in this environment.</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="138" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed a problem with the /unsafe compiler option</li>
      <li styleclass="List1">Fixed a problem with the /doc compiler option</li>
      <li styleclass="List1">Treat warnings as error was always enabled. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="132" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for Lambda expressions with an expression list</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:26px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">LOCAL</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> dfunc </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">AS</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> System</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Func</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">&lt;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Double</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">,</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Double</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">&gt;</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:26px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">dfunc </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">:=</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> {</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">|</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">x</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">|</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> x </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">:=</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> x </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">+</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">10</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">,</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> x</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">^</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">2</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">}</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:26px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">?</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> dfunc(</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">2</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">)</text></para>
    <list id="132" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:-13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for Lambda expressions with a statement list</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">LOCAL</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> dfunc </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">AS</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> System</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Func</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">&lt;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Double</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">,</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">Double</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">&gt;</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">dfunc </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">:=</text><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">{</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">|</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">x</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">|</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><tab /><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">?</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">&apos;square of&apos;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">,</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> x</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><tab /><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">RETURN</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> x</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">^</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">2</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">}</text></para>
    <list id="132" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for the NAMEOF intrinsic function</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Calibri; font-size:11pt; color:#000000;">FUNCTION Test(cFirstName AS STRING) AS VOID</text></para>
    <para styleclass="Normal"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">FUNCTION</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> Test(cFirstName </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">AS</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">STRING</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">) </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">AS</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">VOID</text></para>
    <para styleclass="Normal"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">IF</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> String</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">IsNullOrEmpty(cFirstName)</text></para>
    <para styleclass="Normal"><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">THROW</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> ArgumentException{</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#b22222; background-color:#ffffff;">&quot;Empty argument&quot;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">,</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> nameof(cFirstName)}</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">ENDIF</text></para>
    <list id="139" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for creating methods and functions with Clipper calling convention (VO and Vulcan dialect only)</text></li>
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Using Statement now can contain a Variable declaration:</text></li>
    </list>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:26px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Calibri; font-size:11pt; color:#000000;">Instead of:</text></para>
    <para styleclass="" style="text-align:left; text-indent:26px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#800000; background-color:#ffffff;"> &#160; &#160;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">VAR</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> ms </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">:=</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> System</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">IO</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">MemoryStream{}</text></para>
    <para styleclass="" style="text-align:left; text-indent:48px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> &#160; &#160;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">BEGIN</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">USING</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> ms</text></para>
    <para styleclass="Normal"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> &#160; &#160; &#160; &#160; </text><text styleclass="" style="font-family:Consolas; font-size:9pt; font-style:italic; color:#008000; background-color:#ffffff;">// do the work</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="" style="text-align:left; text-indent:48px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">END</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">USING</text></para>
    <para styleclass="" style="text-align:left; text-indent:13px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Calibri; font-size:11pt; color:#000000;">You can now write</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">BEGIN</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">USING</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">VAR</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> ms </text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">:=</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;"> System</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">IO</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#a9a9a9; background-color:#ffffff;">.</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">MemoryStream{}</text></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><tab /><text styleclass="" style="font-family:Consolas; font-size:9pt; font-style:italic; color:#008000; background-color:#ffffff;">// do the work</text></para>
    <para styleclass="" style="text-align:left; text-indent:35px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">END</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#000000; background-color:#ffffff;">&#32;</text><text styleclass="" style="font-family:Consolas; font-size:9pt; color:#0000ff; background-color:#ffffff;">USING</text></para>
    <list id="132" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:13px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><text styleclass="Normal">Added support for /vo10 (Compatible IIF behavior). In the VO and Vulcan dialect the expressions are cast to USUAL. In the core dialect the expressions are cast to OBJECT.</text></li>
    </list>
    <para styleclass="Heading2">New language features for the VO and Vulcan dialect</para>
    <list id="140" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Calling the SELF() or SUPER() constructor is now allowed anywhere inside a constructor (VO and Vulcan dialect only). The Core dialect still requires constructor chaining as the first expression inside the constructor body</li>
      <li styleclass="List1">Added support for the PCOUNT, _GETFPARAM and _GETMPARAM intrinsic functions </li>
      <li styleclass="List1">Added support for String2Psz() and Cast2Psz() </li>
      <li styleclass="List1">Added support for BEGIN SEQUENCE … END </li>
      <li styleclass="List1">Added support for BREAK </li>
    </list>
    <para styleclass="Heading2">Fixed several problems:</para>
    <list id="141" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Nested array initializers</li>
      <li styleclass="List1">Crash for BREAK statements</li>
      <li styleclass="List1">Assertion error for generic arguments</li>
      <li styleclass="List1">Assertion on const implicit reference</li>
      <li styleclass="List1">Allow ClipperCallingConvention Attribute on Constructors, even when it is marked as ‘for methods only’</li>
      <li styleclass="List1">Fixed a problem with Global Const declarations</li>
      <li styleclass="List1">__ENTITY__ preprocessor macro inside indexed properties</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.3</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="142" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have changed to use the MPF style of Visual Studio Integration. </li>
      <li styleclass="List1">We have added support for the Windows Forms Editor</li>
      <li styleclass="List1">We have added support for the WPF Editor</li>
      <li styleclass="List1">We have added support for the Codedom Provider, which means a parser and code generator that are used by the two editors above</li>
      <li styleclass="List1">The project property pages have been elaborated. Many more features are available now.</li>
      <li styleclass="List1">We have added several templates</li>
    </list>
    <para styleclass="Heading2">Build System</para>
    <list id="143" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added support for several new commandline options, such as /dialect</li>
      <li styleclass="List1">The commandline options were not reset properly when running the shared compiler. This has been fixed.</li>
    </list>
    <list id="144" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The build system will limit the # of errors passed to Visual Studio to max. 500 per project. The commandline compiler will still show all errors.</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="144" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">We have started work on the Bring Your Own Runtime support for Vulcan. See separate heading below.</li>
      <li styleclass="List1">The __SIG__ and __ENTITY__ macros are now also supported, as well as the __WINDIR__, __SYSDIR__ and __WINDRIVE__ macros</li>
      <li styleclass="List1">The debugger instructions have been improved. You should have a much better debugging experience with this build</li>
      <li styleclass="List1">Several errors that indicated that there are visibility differences between types and method arguments, return types or property types have been changed into warnings. Of course you should consider to fix these problems in your code.</li>
      <li styleclass="List1">The #Error and #warning preprocessor command no longer require the argument to be a string</li>
      <li styleclass="List1">The SLen() function call is now inlined by the compiler (just like in Vulcan)</li>
      <li styleclass="List1">The AltD() function will insert a call to &quot;System.Diagnostics.Debugger.Break&quot; within a IF System.Diagnostics.Debugger.IsAttached check</li>
      <li styleclass="List1">Several compiler crashes have been fixed</li>
      <li styleclass="List1">Added support for the PARAMS keyword for method and function parameters.</li>
      <li styleclass="List1">Fixed a problem for the DYNAMIC type.</li>
    </list>
    <para styleclass="Heading2">BYOR</para>
    <list id="144" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">XBase type names are resolved properly (ARRAY, DATE, SYMBOL, USUAL etc)</li>
      <li styleclass="List1">Literal values are now resolved properly (ARRAY, DATE, SYMBOL)</li>
      <li styleclass="List1">NULL_ literals are resolved properly (NULL_STRING follows the /vo2 compiler option, NULL_DATE, NULL_SYMBOL)</li>
      <li styleclass="List1">The /vo14 compiler option (Float literals) has been implemented</li>
      <li styleclass="List1">The compiler automatically inserts a &quot;Using Vulcan&quot; and &quot;using static VulcanRtFuncs.Functions&quot; in each program</li>
      <li styleclass="List1">You MUST add a reference to the VulcanRTFuncs and VulcanRT assembly to your project. This may be a Vulcan 3 and also a Vulcan 4 version of the Runtime. Maybe Vulcan 2 works as well, we have not tested it.</li>
      <li styleclass="List1">Calling methods with Clipper calling convention works as expected.</li>
      <li styleclass="List1">Methods/Functions without return type are seen as methods that return a USUAL</li>
      <li styleclass="List1">If a method/function contains typed and typed parameters then the untyped parameters are seen as USUAL parameters</li>
      <li styleclass="List1">Methods with only untyped parameters (Clipper calling convention) are not supported yet</li>
      <li styleclass="List1">The ? command will call AsString() on the arguments</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.2</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="145" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added more project properties. One new property is the &quot;Use Shared Compiler&quot; option. This will improve compilation speed, but may have a side effect that some compiler (parser) errors are not shown in details. <br/>If you experience this, then please disable this option.</li>
      <li styleclass="List1">Added more properties to the Build System. All C# properties should now also be supported for X#, even though some of them are not visible in the property dialogs inside VS.</li>
      <li styleclass="List1">Added a CreateManifest task to the Build System so you will not get an error anymore for projects that contain managed resources</li>
      <li styleclass="List1">The performance of the editor should be better with this release.</li>
      <li styleclass="List1">Marking and unmarking text blocks as comment would not always be reflected in the editor colors. This has been fixed.</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="145" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">We have added a first version of the <text style="font-weight:bold;">preprocessor</text>. This preprocessor supports the #define command, #ifdef, #ifndef, #else, #endif, #include, #error and #warning. #command and #translate (to add user defined commands) are not supported yet.</li>
      <li styleclass="Normal">Missing types (in parameter lists, field definitions etc) were sometimes producing unclear error messages. We have changed the compiler to produce a &quot;Missing Type&quot; error message.</li>
      <li styleclass="Normal">We rolled the underlying Roslyn code forward to VS 2015 Update 1. Not that you see much of this from the outside &lt;g&gt;, but several fixes and enhancements have made their way into the compiler.</li>
      <li styleclass="Normal">Added a <text style="font-weight:bold;">YIELD EXIT</text><text style="font-weight:normal;"> statement (You can also use </text><text style="font-weight:bold;">YIELD BREAK).</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">Added an (optional) </text><text style="font-weight:bold;">OVERRIDE </text><text style="font-weight:normal;">keyword which can be used as modifier on virtual methods which are overridden in a subclass.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">Added a </text><text style="font-weight:bold;">NOP </text><text style="font-weight:normal;">keyword</text><text style="font-weight:bold;">&#32;</text><text style="font-weight:normal;">which you can use in code which is intentionally empty (for example the otherwise branch of a case statement. The compiler will no longer warn about an empty block when you insert a NOP keyword there.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">The </text><text style="font-weight:bold;">On</text><text style="font-weight:normal;"> and </text><text style="font-weight:bold;">Off</text><text style="font-weight:normal;"> keywords could cause problems, because they were not positional (these are part of the pragma statement). This has been fixed.</text></li>
      <li styleclass="Normal"><text style="font-weight:bold;">_AND() </text><text style="font-weight:normal;">and </text><text style="font-weight:bold;">_OR()</text><text style="font-weight:normal;"> expressions with one argument now throw a compiler error.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">The compiler now recognizes the /VO14 (store literals as float) compiler switch (it has not been implemented yet).</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">Added a </text><text style="font-weight:bold;">**</text><text style="font-weight:normal;"> operator as alias for the </text><text style="font-weight:bold;">^</text><text style="font-weight:normal;"> (Exponent) operator.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">Added an &quot;unsupported&quot; error when using the Minus operator on strings.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">Fixed a &quot;Stack overflow&quot; error in the compiler that could occur for very long expressions.</text></li>
      <li styleclass="Normal"><text style="font-weight:normal;">The right shift operator no longer conflicts with two Greater Than operators, which allows you to declare or create generics without having to put a space between them.</text><br/><text style="font-weight:normal;">(</text><text styleclass="Code Example">var x := List&lt;Tuple&lt;int,int&gt;&gt;{}</text></li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.2.1</para>
    <para styleclass="Heading2">Visual Studio Integration</para>
    <list id="145" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added and improved several project properties</li>
      <li styleclass="List1">Fix a problem with the &quot;Additional Compiler Options&quot;</li>
      <li styleclass="List1">Improved coloring in the editor for Keywords, Comments etc. You can set the colors from the Tools/Options dialog under General/Fonts &amp; Colors. Look for the entries with the name &quot;XSharp Keyword&quot; etc.</li>
      <li styleclass="List1">Added Windows Forms Template</li>
    </list>
    <para styleclass="Heading2">Compiler</para>
    <list id="146" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Several errors have been demoted to warnings to be more compatible with VO/Vulcan</li>
      <li styleclass="List1">Added support for Comment lines that start with an asterisk</li>
      <li styleclass="List1">Added support for the DEFINE statement. For now the DEFINE statement MUST have a type <br/>DEFINE WM_USER := 0x0400 AS DWORD</li>
      <li styleclass="List1">Fixed problem with Single Line Properties with GET and SET reversed</li>
      <li styleclass="List1">Several fixes for Virtual and Non virtual methods in combination with the /VO3 compatibility option</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.7</para>
    <list id="113" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">The &quot;ns&quot; (add default namespace to classes without namespace) has been implemented</li>
      <li styleclass="List1">The &quot;vo3&quot; compiler option (to make all methods virtual ) has been implemented</li>
      <li styleclass="List1">Fixed an issue where the send operator on an expression between parentheses was not compiling properly</li>
      <li styleclass="List1">Relational operators for strings (&gt;, &gt;=, &lt;, &lt;=) are now supported. They are implemented using the String.Compare() method.</li>
      <li styleclass="List1">Fixed a problem with local variables declared on the start line from FOR .. NEXT statements</li>
      <li styleclass="List1">Added first version of the documentation in CHM &amp; PDF format</li>
      <li styleclass="List1">Added several properties to the Visual Studio Project properties dialog to allow setting the new compiler options</li>
      <li styleclass="List1">Fixed a problem in the Targets files used by MsBuild because some standard macros such as $(TargetPath) were not working properly</li>
      <li styleclass="List1">XIDE 0.1.7 is included. This version of XIDE is completely compiled with XSharp !</li>
      <li styleclass="List1">The name of some of the MsBuild support files have changed. This may lead to problems loading a VS project if you have used the VS support from the previous build. If that is the case then please edit the xsproj file inside Visual Studio and replace all references of &quot;XSharpProject&quot; with &quot;XSharp&quot; . Then safe the xsproj file and try to reload the project again</li>
      <li styleclass="List1">The WHILE.. ENDDO (a DO WHILE without the leading DO) is now recognized properly</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.6</para>
    <list id="147" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">This version now comes with an installer</li>
      <li styleclass="List1">This version includes a first version of the Visual Studio Integration. You can edit, build, run and debug inside Visual Studio. There is no &quot;intellisense&quot; available.</li>
      <li styleclass="List1">The compiler now uses 1-based arrays and the “az” compiler option has been implemented to switch the compiler to use 0-based arrays. </li>
      <li styleclass="List1">The &quot;vo2&quot; compiler option (to initialize string variables with String.Empty) has been implemented</li>
      <li styleclass="List1">Please note that there is no option in the VS project properties dialog yet for the az and vo2 compiler options. You can use the &quot;additional compiler options&quot; option to specify these compiler options.</li>
      <li styleclass="List1">The text &quot;this&quot; and &quot;base&quot; in error messages has been changed to &quot;SELF&quot; and &quot;SUPER&quot;</li>
      <li styleclass="List1">Error of type “visibility” (for example public properties that expose private or internal types) have been changed to warnings</li>
      <li styleclass="List1">Fixed a problem with TRY … ENDTRY statements without CATCH clause</li>
      <li styleclass="List1">The compiler now has a better resolution for functions that reside in other (X#) assemblies</li>
      <li styleclass="List1">Fixed a problem which could lead to an &quot;ambiguous operator&quot; message when mixing different numeric types.</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.5</para>
    <list id="148" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">When an error occurs in the parsing stage, X# no longer enters the following stages of the compiler to prevent crashes. In addition to the errors from the parser also an error 9002 is displayed.</li>
      <li styleclass="List1">Parser errors now also include the source file name in the error message and have the same format as other error messages. Please note that we are not finished yet with handling these error messages. There will be improvements in the format of these error messages in the upcoming builds.</li>
      <li styleclass="List1">The compiler will display a “feature not available” (8022) error when a program uses one of the Xbase types (ARRAY, DATE, FLOAT, PSZ, SYMBOL, USUAL).</li>
      <li styleclass="List1">Fixed an error with VOSTRUCT and UNION types</li>
      <li styleclass="List1">Fixed a problem with the exclamation mark (!) NOT operator </li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.4</para>
    <list id="149" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Several changes to allow calculations with integers and enums</li>
      <li styleclass="List1">Several changes to allow VO compatible _OR, _AND, _NOT an _XOR operations</li>
      <li styleclass="List1">Fix interface/abstract VO properties</li>
      <li styleclass="List1">Insert an implicit “USING System” only if not explicitly declared</li>
      <li styleclass="List1">Error 542 turned to warning (members cannot have the same name as their enclosing type)</li>
      <li styleclass="List1">Changes in the .XOR. expression definition</li>
      <li styleclass="List1">Fix double quote in CHAR_CONST lexer rule</li>
      <li styleclass="List1">Allow namespace declaration in class/struct/etc. name (CLASS Foo.Bar)</li>
      <li styleclass="List1">Fix access/assign crash where identifier name was a (positional) keword: ACCESS Value</li>
      <li styleclass="List1">Preprocessor keywords were not recognized after spaces, but only at the start of the line. This has been fixed.</li>
      <li styleclass="List1">Prevent property GET SET from being parsed as expression body</li>
      <li styleclass="List1">Fix default visibility for interface event</li>
      <li styleclass="List1">Unsafe errors become warnings with /unsafe option, PTR is void*</li>
      <li styleclass="List1">Fix dim array field declaration</li>
      <li styleclass="List1">Initial support of VO cast and VO Conversion rules (TYPE(_CAST, Expression) and TYPE(Expression)). _CAST is always unchecked (LONG(_CAST, dwValue)) and convert follows the checked/unchecked rules (LONG(dwValue))</li>
      <li styleclass="List1">Fixed problem with codeblock with empty parameter list</li>
      <li styleclass="List1">Fixed problems with GlobalAttributes.</li>
      <li styleclass="List1">An AUTO property without GET SET now automatically adds a GET and SET block</li>
      <li styleclass="List1">Allow implicit constant double-to-single conversion</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.3</para>
    <list id="150" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Change inconsistent field accessibility error to warning and other similar errors</li>
      <li styleclass="List1">Added commandline support for Vulcan arguments. These arguments no longer result in an error message, but are not really implemented, unless an equivalent argument exists for the Roslyn (C#) compiler. For example: /ovf and /fovf are both mapped to /checked, /wx is mapped to /warnaserror. /w should not be used because that has a different meaning /warning level). /nowarn:nnnn should be used in stead</li>
      <li styleclass="List1">Fixed problem where the PUBLIC modifier was assigned to Interface Members or Destructors</li>
      <li styleclass="List1">Prevent expression statements from starting with CONSTRUCTOR() or DESTRUCTOR()</li>
      <li styleclass="List1">Added support for ? statement without parameters</li>
      <li styleclass="List1">The default return type for assigns is now VOID when not specified</li>
      <li styleclass="List1">Added support for “old Style” delegate instantiation</li>
      <li styleclass="List1">Added support for Enum addition</li>
      <li styleclass="List1">Added an implicit empty catch block for TRY .. END TRY without catch and finally</li>
      <li styleclass="List1">Added support for the DESCENDING keyword in LINQ statements</li>
      <li styleclass="List1">Added support for VIRTUAL and OVERRIDE for Properties and Events</li>
      <li styleclass="List1">Prevent implied override insertion for abstract interface members</li>
      <li styleclass="List1">Fixed a problem where System.Void could not be resolved</li>
      <li styleclass="List1">Fixed problem with Property Generation for ACCESS/ASSIGN</li>
      <li styleclass="List1">Fixed problem with Abstract method handling</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.2.1</para>
    <list id="151" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Added default expression</li>
      <li styleclass="List1">Fixed problem with events</li>
      <li styleclass="List1">Fixed some small lexer problems</li>
      <li styleclass="List1">Fixed problem with _DLL FUNCTION and _DLL PROCEDURE</li>
    </list>
    <para styleclass="Heading1"></para>
    <para styleclass="Heading1">Changes in 0.1.2</para>
    <list id="152" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="0" styleclass="List1" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List1">Fixed problem with handling escape sequences in extended strings</li>
      <li styleclass="List1">Fixed issue in FOR.. NEXT statements</li>
      <li styleclass="List1">Fixed a problem with SWITCH statements</li>
      <li styleclass="List1">Fixed a problem with the sizeof() operator</li>
      <li styleclass="List1">Fixed a problem in the REPEAT .. UNTIL statement</li>
      <li styleclass="List1">Fixed a problem in TRY .. CATCH .. FINALLY .. END TRY statements. </li>
      <li styleclass="List1">Fixed issue in Conditional Access Expression ( Expr ? Expr)</li>
      <li styleclass="List1">Allow bound member access of name with type args</li>
      <li styleclass="List1">Fixed problem in LOCAL statement with multiple locals</li>
      <li styleclass="List1">Fixed a problem when compiling with debug info for methods without a body</li>
      <li styleclass="List1">Optimized the Lexer. This should increase the compile speed a lot</li>
      <li styleclass="List1">Fixed a problem in the code that reports that a feature is not supported yet</li>
      <li styleclass="List1">Fixed a problem when defining Generic types with a STRUCTURE constraint</li>
      <li styleclass="List1">Compiler macros (__ENTITY__, __LINE__ etc) were causing a crash. For now the compiler inserts a literal string with the name of the macro.</li>
      <li styleclass="List1">Build 0.1.1 did not contain XSC.RSP</li>
      <li styleclass="List1">Fixed a problem where identifiers were not recognized when they were matching a (new) keyword</li>
    </list>
    <para styleclass="Body Text"></para>
  </body>
</topic>
