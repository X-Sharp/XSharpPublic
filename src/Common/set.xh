///////////////////////////////////////////////////////////////////////////
// XSharp Standard Preprocessor Directives
//
// Copyright (c) XSharp BV.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.
// See License.txt in the project root for license information.
//
// Caution: do not modify this file. It will be overwritten during product updates
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
//
// This header file contains the SET commands for various global settings
// We map to the typed Set..() functions and not to the SET(_SET_<somedefine> ) because
// that will produce slightly better code.
//
///////////////////////////////////////////////////////////////////////////

#ifndef SET_XH

#define SET_XH

///////////////////////////////////////////////////////////////////////////
// SET commands for directories
///////////////////////////////////////////////////////////////////////////

#command  SET DEFAULT TO <*path*>   =>  Set( Set.Default, <(path)> )
#command  SET DEFAULT TO            =>  Set( Set.Default, "" )

#command  SET PATH TO <*path*>      =>  Set( Set.Path, iif(<.path.>, <(path)> ,""))
#command  SET PATH TO               =>  Set( Set.Path, "" )

///////////////////////////////////////////////////////////////////////////
// SET commands for string comparison, date and numeric formats
///////////////////////////////////////////////////////////////////////////

#command  SET EXACT <x:ON,OFF,&>      =>  Set( Set.Exact, <(x)> )
#command  SET FIXED <x:ON,OFF,&>      =>  Set( Set.Fixed, <(x)> )
#command  SET DECIMALS TO <x>         =>  Set( Set.Decimals, <x>)
#command  SET DECIMALS TO             =>  Set( Set.Decimals, 0)
#command  SET DIGITFIXED <x:ON,OFF,&> =>  Set( Set.DigitFixed, <(x)> )
#command  SET DIGITS TO <x>           =>  Set( Set.Digits, <x>)
#command  SET DIGITS TO               =>  Set( Set.Digits, 10)

#command  SET INTERNATIONAL TO <id>   => SetInternational(#<id>)
#command  SET COLLATION TO <id>       => SetCollation(#<id>)

#command  SET DATE [TO] <x:AMERICAN,MDY>        =>  SetDateCountry(DateCountry.American)
#command  SET DATE [TO] ANSI                    =>  SetDateCountry(DateCountry.Ansi)
#command  SET DATE [TO] <x:BRITISH,FRENCH,DMY>  =>  SetDateCountry(DateCountry.British)
#command  SET DATE [TO] GERMAN                  =>  SetDateCountry(DateCountry.German)
#command  SET DATE [TO] <x:ITALIAN,DUTCH>       =>  SetDateCountry(DateCountry.Italian)
#command  SET DATE [TO] <x:JAPANESE,TAIWAN,YMD> =>  SetDateCountry(DateCountry.Japanese)
#command  SET DATE [TO] USA                     =>  SetDateCountry(DateCountry.USA)
#command  SET DATE [TO] <x:SYSTEM,WINDOWS>      =>  SetDateCountry(DateCountry.System)

// Next one is used to restore the date
#command  SET DATE [TO] <x:&>                   =>  SetDateFormat(<(x)>)

// The next settings calls a runtime function because they set more than just the format.
// Date format also sets the DateCountry
// Time format also sets the AmPm extension and the Time Separator
#command  SET DATE FORMAT [TO] <c>   =>  SetDateFormat( <c> )
#command  SET DATE FORMAT [TO] <x:&> =>  SetDateFormat(<(x)>)
#command  SET TIME TO <*x*>          =>  SetTimeFormat( <(x)> )
#command  SET TIME TO SYSTEM         =>  SetTimeFormat( "" )

#command  SET CENTURY <x:ON,OFF,&>   =>  Set(Set.Century, <(x)> )
#command  SET EPOCH TO <year>        =>  Set(Set.Epoch, <year> )

///////////////////////////////////////////////////////////////////////////
//  DB SETs
///////////////////////////////////////////////////////////////////////////

#ifndef __DIALECT_FOXPRO__
  // FoxPro maps SET ANSI to Set.SqlAnsi
  #command SET ANSI <x:ON,OFF,&>          =>  Set(Set.Ansi, <(x)> )
#endif

#command SET EXCLUSIVE <x:ON,OFF,&>     =>  Set(Set.Exclusive, <(x)> )
#command SET SOFTSEEK <x:ON,OFF,&>      =>  Set(Set.SoftSeek, <(x)> )
#command SET UNIQUE <x:ON,OFF,&>        =>  Set(Set.Unique, <(x)> )
#command SET DELETED <x:ON,OFF,&>       =>  Set(Set.Deleted, <(x)> )
#command SET REFRESH TO [<x>]           =>  Set(Set.Refresh, iif( <.x.>, (REAL8) (<!x!>), 5.0) ) )
#command SET DIRTYREAD <x:ON,OFF,&>     =>  Set(Set.StrictRead, ! <(x)> )
#command SET STRICTREAD <x:ON,OFF,&>    =>  Set(Set.StrictRead, <(x)> )

///////////////////////////////////////////////////////////////////////////
//  Console SETs
///////////////////////////////////////////////////////////////////////////

#command  SET CONSOLE <x:ON,OFF,&>                    =>  Set( Set.Console, <(x)> )
#command  SET ALTERNATE <x:ON,OFF,&>                  =>  Set( Set.Alternate, <(x)> )
#command  SET ALTERNATE TO                            =>  SetAltFile( "" , FALSE)
#command  SET ALTERNATE TO <(file)> [<add: ADDITIVE>] =>  SetAltFile( <(file)>, <.add.> )
#command  CLOSE ALTERNATE                             =>  SetAltFile( "" , FALSE)
#command  SET PRINTER <x:ON,OFF,&>                    =>  Set( Set.Printer, <(x)> )

// SET PRINTER TO is not supported yet.
//#command  SET PRINTER TO                              =>  SetPrintfile( "" , FALSE)
//#command  SET PRINTER TO <(file)> [<add: ADDITIVE>]   =>  SetPrintfile( <(file)>, <.add.> )

#command  SET MARGIN TO [<x>]                         =>   Set( Set.Margin, iif( <.x.>, <!x!>, 0) )

#command  SET COLOR TO [<*spec*>]                     =>  SetColor( #<spec> )
#command  SET COLOR TO ( <c> )                        =>  SetColor( <c> )
#command  SET COLOUR TO [<*spec*>]                    =>  SET COLOR TO [<spec>]

#command CLEAR SCREEN                                 =>  Cls(); SetPos(0,0)

#command CLEAR ALL                                    =>  CLOSE ALL ; _MClear(); SET ALTERNATE TO ; CLOSE ALTERNATE


#ifdef __DIALECT_FOXPRO__
#include "FoxProSet.xh"
#endif


#endif
// EOF