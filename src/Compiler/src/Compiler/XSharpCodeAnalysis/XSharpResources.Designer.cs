//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LanguageService.CodeAnalysis.XSharp {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class XSharpResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal XSharpResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.CodeAnalysis.CSharp.XSharpResources", typeof(XSharpResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A language name cannot be specified for this option..
        /// </summary>
        public static string A_language_name_cannot_be_specified_for_this_option {
            get {
                return ResourceManager.GetString("A_language_name_cannot_be_specified_for_this_option", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A language name must be specified for this option..
        /// </summary>
        public static string A_language_name_must_be_specified_for_this_option {
            get {
                return ResourceManager.GetString("A_language_name_must_be_specified_for_this_option", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Absolute path expected..
        /// </summary>
        public static string AbsolutePathExpected {
            get {
                return ResourceManager.GetString("AbsolutePathExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer Driver Failure.
        /// </summary>
        public static string AnalyzerDriverFailure {
            get {
                return ResourceManager.GetString("AnalyzerDriverFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer driver threw an exception of type &apos;{0}&apos; with message &apos;{1}&apos;.
        ///{2}.
        /// </summary>
        public static string AnalyzerDriverThrows {
            get {
                return ResourceManager.GetString("AnalyzerDriverThrows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Time (s).
        /// </summary>
        public static string AnalyzerExecutionTimeColumnHeader {
            get {
                return ResourceManager.GetString("AnalyzerExecutionTimeColumnHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer.
        /// </summary>
        public static string AnalyzerNameColumnHeader {
            get {
                return ResourceManager.GetString("AnalyzerNameColumnHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total analyzer execution time: {0} seconds..
        /// </summary>
        public static string AnalyzerTotalExecutionTime {
            get {
                return ResourceManager.GetString("AnalyzerTotalExecutionTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} must either be &apos;default&apos; or have the same length as {1}..
        /// </summary>
        public static string AnonymousTypeArgumentCountMismatch2 {
            get {
                return ResourceManager.GetString("AnonymousTypeArgumentCountMismatch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} and {1} must have the same length..
        /// </summary>
        public static string AnonymousTypeMemberAndNamesCountMismatch2 {
            get {
                return ResourceManager.GetString("AnonymousTypeMemberAndNamesCountMismatch2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument cannot be empty..
        /// </summary>
        public static string ArgumentCannotBeEmpty {
            get {
                return ResourceManager.GetString("ArgumentCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument cannot have a null element..
        /// </summary>
        public static string ArgumentElementCannotBeNull {
            get {
                return ResourceManager.GetString("ArgumentElementCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arrays with more than one dimension cannot be serialized..
        /// </summary>
        public static string Arrays_with_more_than_one_dimension_cannot_be_serialized {
            get {
                return ResourceManager.GetString("Arrays_with_more_than_one_dimension_cannot_be_serialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to assembly.
        /// </summary>
        public static string Assembly {
            get {
                return ResourceManager.GetString("Assembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly file not found.
        /// </summary>
        public static string AssemblyFileNotFound {
            get {
                return ResourceManager.GetString("AssemblyFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly must have at least one module..
        /// </summary>
        public static string AssemblyMustHaveAtLeastOneModule {
            get {
                return ResourceManager.GetString("AssemblyMustHaveAtLeastOneModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly containing type &apos;{0}&apos; references .NET Framework, which is not supported..
        /// </summary>
        public static string AssemblyReferencesNetFramework {
            get {
                return ResourceManager.GetString("AssemblyReferencesNetFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly signing not supported..
        /// </summary>
        public static string AssemblySigningNotSupported {
            get {
                return ResourceManager.GetString("AssemblySigningNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal built-in operator name &apos;{0}&apos;.
        /// </summary>
        public static string BadBuiltInOps1 {
            get {
                return ResourceManager.GetString("BadBuiltInOps1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported built-in operator: {0}.
        /// </summary>
        public static string BadBuiltInOps2 {
            get {
                return ResourceManager.GetString("BadBuiltInOps2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; was not a valid built-in operator name.
        /// </summary>
        public static string BadBuiltInOps3 {
            get {
                return ResourceManager.GetString("BadBuiltInOps3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;{0}&apos; as a calling convention modifier..
        /// </summary>
        public static string CallingConventionTypeIsInvalid {
            get {
                return ResourceManager.GetString("CallingConventionTypeIsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Passing &apos;{0}&apos; is not valid unless &apos;{1}&apos; is &apos;SignatureCallingConvention.Unmanaged&apos;..
        /// </summary>
        public static string CallingConventionTypesRequireUnmanaged {
            get {
                return ResourceManager.GetString("CallingConventionTypesRequireUnmanaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot deserialize type &apos;{0}&apos;..
        /// </summary>
        public static string Cannot_deserialize_type_0 {
            get {
                return ResourceManager.GetString("Cannot_deserialize_type_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot serialize type &apos;{0}&apos;..
        /// </summary>
        public static string Cannot_serialize_type_0 {
            get {
                return ResourceManager.GetString("Cannot_serialize_type_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t alias a module..
        /// </summary>
        public static string CannotAliasModule {
            get {
                return ResourceManager.GetString("CannotAliasModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create constructed generic type from another constructed generic type..
        /// </summary>
        public static string CannotCreateConstructedFromConstructed {
            get {
                return ResourceManager.GetString("CannotCreateConstructedFromConstructed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create constructed generic type from non-generic type..
        /// </summary>
        public static string CannotCreateConstructedFromNongeneric {
            get {
                return ResourceManager.GetString("CannotCreateConstructedFromNongeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create a reference to a module..
        /// </summary>
        public static string CannotCreateReferenceToModule {
            get {
                return ResourceManager.GetString("CannotCreateReferenceToModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create a reference to a submission..
        /// </summary>
        public static string CannotCreateReferenceToSubmission {
            get {
                return ResourceManager.GetString("CannotCreateReferenceToSubmission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t embed interop types from module..
        /// </summary>
        public static string CannotEmbedInteropTypesFromModule {
            get {
                return ResourceManager.GetString("CannotEmbedInteropTypesFromModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot target net module when emitting ref assembly..
        /// </summary>
        public static string CannotTargetNetModuleWhenEmittingRefAssembly {
            get {
                return ResourceManager.GetString("CannotTargetNetModuleWhenEmittingRefAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create a module reference to an assembly..
        /// </summary>
        public static string CantCreateModuleReferenceToAssembly {
            get {
                return ResourceManager.GetString("CantCreateModuleReferenceToAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create a metadata reference to an assembly without location..
        /// </summary>
        public static string CantCreateReferenceToAssemblyWithoutLocation {
            get {
                return ResourceManager.GetString("CantCreateReferenceToAssemblyWithoutLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t create a metadata reference to a dynamic assembly..
        /// </summary>
        public static string CantCreateReferenceToDynamicAssembly {
            get {
                return ResourceManager.GetString("CantCreateReferenceToDynamicAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t reference compilation of type &apos;{0}&apos; from {1} compilation..
        /// </summary>
        public static string CantReferenceCompilationOf {
            get {
                return ResourceManager.GetString("CantReferenceCompilationOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Chaining speculative semantic model is not supported. You should create a speculative model from the non-speculative ParentModel..
        /// </summary>
        public static string ChainingSpeculativeModelIsNotSupported {
            get {
                return ResourceManager.GetString("ChainingSpeculativeModelIsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changes must be within bounds of SourceText.
        /// </summary>
        public static string ChangesMustBeWithinBoundsOfSourceText {
            get {
                return ResourceManager.GetString("ChangesMustBeWithinBoundsOfSourceText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The changes must not overlap..
        /// </summary>
        public static string ChangesMustNotOverlap {
            get {
                return ResourceManager.GetString("ChangesMustNotOverlap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changing the version of an assembly reference is not allowed during debugging: &apos;{0}&apos; changed version to &apos;{1}&apos;..
        /// </summary>
        public static string ChangingVersionOfAssemblyReferenceIsNotAllowedDuringDebugging {
            get {
                return ResourceManager.GetString("ChangingVersionOfAssemblyReferenceIsNotAllowedDuringDebugging", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to class.
        /// </summary>
        public static string Class1 {
            get {
                return ResourceManager.GetString("Class1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Win32 resources, assumed to be in COFF object format, have one or more invalid relocation header values..
        /// </summary>
        public static string CoffResourceInvalidRelocation {
            get {
                return ResourceManager.GetString("CoffResourceInvalidRelocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Win32 resources, assumed to be in COFF object format, have an invalid section size..
        /// </summary>
        public static string CoffResourceInvalidSectionSize {
            get {
                return ResourceManager.GetString("CoffResourceInvalidSectionSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Win32 resources, assumed to be in COFF object format, have one or more invalid symbol values..
        /// </summary>
        public static string CoffResourceInvalidSymbol {
            get {
                return ResourceManager.GetString("CoffResourceInvalidSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Win32 resources, assumed to be in COFF object format, are missing one or both of sections &apos;.rsrc$01&apos; and &apos;.rsrc$02&apos;.
        /// </summary>
        public static string CoffResourceMissingSection {
            get {
                return ResourceManager.GetString("CoffResourceMissingSection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation (C#): .
        /// </summary>
        public static string CompilationC {
            get {
                return ResourceManager.GetString("CompilationC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation options must not have errors..
        /// </summary>
        public static string CompilationOptionsMustNotHaveErrors {
            get {
                return ResourceManager.GetString("CompilationOptionsMustNotHaveErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compilation references multiple assemblies whose versions only differ in auto-generated build and/or revision numbers..
        /// </summary>
        public static string CompilationReferencesAssembliesWithDifferentAutoGeneratedVersion {
            get {
                return ResourceManager.GetString("CompilationReferencesAssembliesWithDifferentAutoGeneratedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer Failure.
        /// </summary>
        public static string CompilerAnalyzerFailure {
            get {
                return ResourceManager.GetString("CompilerAnalyzerFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer &apos;{0}&apos; threw an exception of type &apos;{1}&apos; with message &apos;{2}&apos;.
        ///{3}.
        /// </summary>
        public static string CompilerAnalyzerThrows {
            get {
                return ResourceManager.GetString("CompilerAnalyzerThrows", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constructor.
        /// </summary>
        public static string Constructor {
            get {
                return ResourceManager.GetString("Constructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find file..
        /// </summary>
        public static string CouldNotFindFile {
            get {
                return ResourceManager.GetString("CouldNotFindFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///	The XSharp development team:
        ///
        ///		Fabrice Foray (France)
        ///		Nikos Kokkalis (Greece)
        ///		Chris Pyrgas (Greece)
        ///		Robert van der Hulst (The Netherlands)
        ///
        ///	More info on www.xsharp.info
        ///    .
        /// </summary>
        public static string Credits {
            get {
                return ResourceManager.GetString("Credits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to delegate.
        /// </summary>
        public static string Delegate1 {
            get {
                return ResourceManager.GetString("Delegate1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deserialization reader for &apos;{0}&apos; read incorrect number of values..
        /// </summary>
        public static string Deserialization_reader_for_0_read_incorrect_number_of_values {
            get {
                return ResourceManager.GetString("Deserialization_reader_for_0_read_incorrect_number_of_values", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A DiagnosticDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space..
        /// </summary>
        public static string DiagnosticIdCantBeNullOrWhitespace {
            get {
                return ResourceManager.GetString("DiagnosticIdCantBeNullOrWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppress the following diagnostics to disable this analyzer: {0}.
        /// </summary>
        public static string DisableAnalyzerDiagnosticsMessage {
            get {
                return ResourceManager.GetString("DisableAnalyzerDiagnosticsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument contains duplicate analyzer instances..
        /// </summary>
        public static string DuplicateAnalyzerInstances {
            get {
                return ResourceManager.GetString("DuplicateAnalyzerInstances", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to element is expected.
        /// </summary>
        public static string ElementIsExpected {
            get {
                return ResourceManager.GetString("ElementIsExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elements cannot be null..
        /// </summary>
        public static string ElementsCannotBeNull {
            get {
                return ResourceManager.GetString("ElementsCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedded texts are only supported when emitting a PDB..
        /// </summary>
        public static string EmbeddedTextsRequirePdb {
            get {
                return ResourceManager.GetString("EmbeddedTextsRequirePdb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedding PDB is not allowed when emitting metadata..
        /// </summary>
        public static string EmbeddingPdbUnexpectedWhenEmittingMetadata {
            get {
                return ResourceManager.GetString("EmbeddingPdbUnexpectedWhenEmittingMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A key in the pathMap is empty..
        /// </summary>
        public static string EmptyKeyInPathMap {
            get {
                return ResourceManager.GetString("EmptyKeyInPathMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty or invalid file name.
        /// </summary>
        public static string EmptyOrInvalidFileName {
            get {
                return ResourceManager.GetString("EmptyOrInvalidFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty or invalid resource name.
        /// </summary>
        public static string EmptyOrInvalidResourceName {
            get {
                return ResourceManager.GetString("EmptyOrInvalidResourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit and Continue can&apos;t resume suspended asynchronous method since the corresponding await expression has been deleted.
        /// </summary>
        public static string EncCannotResumeSuspendedAsyncMethod {
            get {
                return ResourceManager.GetString("EncCannotResumeSuspendedAsyncMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Edit and Continue can&apos;t resume suspended iterator since the corresponding yield return statement has been deleted.
        /// </summary>
        public static string EncCannotResumeSuspendedIteratorMethod {
            get {
                return ResourceManager.GetString("EncCannotResumeSuspendedIteratorMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to invoke a deleted lambda or local function implementation. This can happen when lambda or local function is deleted while the application is running..
        /// </summary>
        public static string EncDeletedLambdaInvoked {
            get {
                return ResourceManager.GetString("EncDeletedLambdaInvoked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to invoke a deleted method implementation. This can happen when a method is deleted or its name or signature is changed while the application is running..
        /// </summary>
        public static string EncDeletedMethodInvoked {
            get {
                return ResourceManager.GetString("EncDeletedMethodInvoked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to invoke lambda or local function with an unsupported change made while the application is running: {0}.
        /// </summary>
        public static string EncLambdaRudeEdit {
            get {
                return ResourceManager.GetString("EncLambdaRudeEdit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempted to invoke lambda or local function that has an unsupported change to captured variables made while the application is running.
        /// </summary>
        public static string EncLambdaRudeEdit_CapturedVariables {
            get {
                return ResourceManager.GetString("EncLambdaRudeEdit_CapturedVariables", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;end&apos; must not be less than &apos;start&apos;. start=&apos;{0}&apos; end=&apos;{1}&apos;..
        /// </summary>
        public static string EndMustNotBeLessThanStart {
            get {
                return ResourceManager.GetString("EndMustNotBeLessThanStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enum.
        /// </summary>
        public static string Enum1 {
            get {
                return ResourceManager.GetString("Enum1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be both extern and abstract.
        /// </summary>
        public static string ERR_AbstractAndExtern {
            get {
                return ResourceManager.GetString("ERR_AbstractAndExtern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be both abstract and sealed.
        /// </summary>
        public static string ERR_AbstractAndSealed {
            get {
                return ResourceManager.GetString("ERR_AbstractAndSealed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot apply attribute class &apos;{0}&apos; because it is abstract.
        /// </summary>
        public static string ERR_AbstractAttributeClass {
            get {
                return ResourceManager.GetString("ERR_AbstractAttributeClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot call an abstract base member: &apos;{0}&apos;.
        /// </summary>
        public static string ERR_AbstractBaseCall {
            get {
                return ResourceManager.GetString("ERR_AbstractBaseCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined conversion in an interface must convert to or from a type parameter on the enclosing type constrained to the enclosing type.
        /// </summary>
        public static string ERR_AbstractConversionNotInvolvingContainedType {
            get {
                return ResourceManager.GetString("ERR_AbstractConversionNotInvolvingContainedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: abstract event cannot use event accessor syntax.
        /// </summary>
        public static string ERR_AbstractEventHasAccessors {
            get {
                return ResourceManager.GetString("ERR_AbstractEventHasAccessors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: abstract event cannot have initializer.
        /// </summary>
        public static string ERR_AbstractEventInitializer {
            get {
                return ResourceManager.GetString("ERR_AbstractEventInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifier &apos;abstract&apos; is not valid on fields. Try using a property instead..
        /// </summary>
        public static string ERR_AbstractField {
            get {
                return ResourceManager.GetString("ERR_AbstractField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot declare a body because it is marked abstract.
        /// </summary>
        public static string ERR_AbstractHasBody {
            get {
                return ResourceManager.GetString("ERR_AbstractHasBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is abstract but it is contained in non-abstract type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AbstractInConcreteClass {
            get {
                return ResourceManager.GetString("ERR_AbstractInConcreteClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The abstract {0} &apos;{1}&apos; cannot be marked virtual.
        /// </summary>
        public static string ERR_AbstractNotVirtual {
            get {
                return ResourceManager.GetString("ERR_AbstractNotVirtual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: an abstract type cannot be sealed or static.
        /// </summary>
        public static string ERR_AbstractSealedStatic {
            get {
                return ResourceManager.GetString("ERR_AbstractSealedStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameters for the ACCESS and ASSIGN declarations must match by name, type and number. There must be one more ASSIGN parameter than ACCESS parameter. The first ASSIGN parameter is the value, the other parameters are the indexers and must be have the same name and type as the ACCESS parameters..
        /// </summary>
        public static string ERR_AccessAssignParametersMutchMatch {
            get {
                return ResourceManager.GetString("ERR_AccessAssignParametersMutchMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the first ASSIGN parameter must match the returntype of the ACCESS..
        /// </summary>
        public static string ERR_AccessAssignTypesMutchMatch {
            get {
                return ResourceManager.GetString("ERR_AccessAssignTypesMutchMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: accessibility modifiers on accessors may only be used if the property or indexer has both a get and a set accessor.
        /// </summary>
        public static string ERR_AccessModMissingAccessor {
            get {
                return ResourceManager.GetString("ERR_AccessModMissingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accessor &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; for type &apos;{2}&apos;. Use an explicit interface implementation..
        /// </summary>
        public static string ERR_AccessorImplementingMethod {
            get {
                return ResourceManager.GetString("ERR_AccessorImplementingMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be added to this assembly because it already is an assembly.
        /// </summary>
        public static string ERR_AddModuleAssembly {
            get {
                return ResourceManager.GetString("ERR_AddModuleAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An add or remove accessor expected.
        /// </summary>
        public static string ERR_AddOrRemoveExpected {
            get {
                return ResourceManager.GetString("ERR_AddOrRemoveExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An add or remove accessor must have a body.
        /// </summary>
        public static string ERR_AddRemoveMustHaveBody {
            get {
                return ResourceManager.GetString("ERR_AddRemoveMustHaveBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;&amp;&apos; operator cannot be used on parameters or local variables in iterator methods..
        /// </summary>
        public static string ERR_AddressOfInIterator {
            get {
                return ResourceManager.GetString("ERR_AddressOfInIterator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;&amp;&apos; on method groups cannot be used in expression trees.
        /// </summary>
        public static string ERR_AddressOfMethodGroupInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_AddressOfMethodGroupInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert &amp;method group &apos;{0}&apos; to non-function pointer type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_AddressOfToNonFunctionPointer {
            get {
                return ResourceManager.GetString("ERR_AddressOfToNonFunctionPointer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Agnostic assembly cannot have a processor specific module &apos;{0}&apos;..
        /// </summary>
        public static string ERR_AgnosticToMachineModule {
            get {
                return ResourceManager.GetString("ERR_AgnosticToMachineModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid reference alias option: &apos;{0}=&apos; -- missing filename.
        /// </summary>
        public static string ERR_AliasMissingFile {
            get {
                return ResourceManager.GetString("ERR_AliasMissingFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alias &apos;{0}&apos; not found.
        /// </summary>
        public static string ERR_AliasNotFound {
            get {
                return ResourceManager.GetString("ERR_AliasNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace alias qualifier &apos;::&apos; always resolves to a type or namespace so is illegal here. Consider using &apos;.&apos; instead..
        /// </summary>
        public static string ERR_AliasQualAsExpression {
            get {
                return ResourceManager.GetString("ERR_AliasQualAsExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An alias-qualified name is not an expression..
        /// </summary>
        public static string ERR_AliasQualifiedNameNotAnExpression {
            get {
                return ResourceManager.GetString("ERR_AliasQualifiedNameNotAnExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;allows&apos; constraint clause must be the last constraint specified.
        /// </summary>
        public static string ERR_AllowsClauseMustBeLast {
            get {
                return ResourceManager.GetString("ERR_AllowsClauseMustBeLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use &apos;@$&apos; instead of &apos;$@&apos; for an interpolated verbatim string, please use language version &apos;{0}&apos; or greater..
        /// </summary>
        public static string ERR_AltInterpolatedVerbatimStringsNotAvailable {
            get {
                return ResourceManager.GetString("ERR_AltInterpolatedVerbatimStringsNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; is ambiguous on operands of type &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_AmbigBinaryOps {
            get {
                return ResourceManager.GetString("ERR_AmbigBinaryOps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; is ambiguous on operands &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_AmbigBinaryOpsOnDefault {
            get {
                return ResourceManager.GetString("ERR_AmbigBinaryOpsOnDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to &apos;default&apos; and operand of type &apos;{1}&apos; because it is a type parameter that is not known to be a reference type.
        /// </summary>
        public static string ERR_AmbigBinaryOpsOnUnconstrainedDefault {
            get {
                return ResourceManager.GetString("ERR_AmbigBinaryOpsOnUnconstrainedDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call is ambiguous between the following methods or properties: &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AmbigCall {
            get {
                return ResourceManager.GetString("ERR_AmbigCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is an ambiguous reference between &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_AmbigContext {
            get {
                return ResourceManager.GetString("ERR_AmbigContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguity between &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AmbigMember {
            get {
                return ResourceManager.GetString("ERR_AmbigMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The inherited members &apos;{0}&apos; and &apos;{1}&apos; have the same signature in type &apos;{2}&apos;, so they cannot be overridden.
        /// </summary>
        public static string ERR_AmbigOverride {
            get {
                return ResourceManager.GetString("ERR_AmbigOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of conditional expression cannot be determined because &apos;{0}&apos; and &apos;{1}&apos; implicitly convert to one another.
        /// </summary>
        public static string ERR_AmbigQM {
            get {
                return ResourceManager.GetString("ERR_AmbigQM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous user defined conversions &apos;{0}&apos; and &apos;{1}&apos; when converting from &apos;{2}&apos; to &apos;{3}&apos;.
        /// </summary>
        public static string ERR_AmbigUDConv {
            get {
                return ResourceManager.GetString("ERR_AmbigUDConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; is ambiguous on an operand of type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AmbigUnaryOp {
            get {
                return ResourceManager.GetString("ERR_AmbigUnaryOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is ambiguous between &apos;{1}&apos; and &apos;{2}&apos;. Either use &apos;@{0}&apos; or explicitly include the &apos;Attribute&apos; suffix..
        /// </summary>
        public static string ERR_AmbiguousAttribute {
            get {
                return ResourceManager.GetString("ERR_AmbiguousAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous case between &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AmbiguousCase {
            get {
                return ResourceManager.GetString("ERR_AmbiguousCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier &apos;{0}&apos; is ambiguous between type &apos;{1}&apos; and parameter &apos;{2}&apos; in this context..
        /// </summary>
        public static string ERR_AmbiguousPrimaryConstructorParameterAsColorColorReceiver {
            get {
                return ResourceManager.GetString("ERR_AmbiguousPrimaryConstructorParameterAsColorColorReceiver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a nullable reference type in object creation..
        /// </summary>
        public static string ERR_AnnotationDisallowedInObjectCreation {
            get {
                return ResourceManager.GetString("ERR_AnnotationDisallowedInObjectCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use ref, out, or in parameter &apos;{0}&apos; inside an anonymous method, lambda expression, query expression, or local function.
        /// </summary>
        public static string ERR_AnonDelegateCantUse {
            get {
                return ResourceManager.GetString("ERR_AnonDelegateCantUse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use ref local &apos;{0}&apos; inside an anonymous method, lambda expression, or query expression.
        /// </summary>
        public static string ERR_AnonDelegateCantUseLocal {
            get {
                return ResourceManager.GetString("ERR_AnonDelegateCantUseLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use parameter &apos;{0}&apos; that has ref-like type inside an anonymous method, lambda expression, query expression, or local function.
        /// </summary>
        public static string ERR_AnonDelegateCantUseRefLike {
            get {
                return ResourceManager.GetString("ERR_AnonDelegateCantUseRefLike", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymous methods, lambda expressions, query expressions, and local functions inside a struct cannot access primary constructor parameter also used inside an instance member.
        /// </summary>
        public static string ERR_AnonDelegateCantUseStructPrimaryConstructorParameterCaptured {
            get {
                return ResourceManager.GetString("ERR_AnonDelegateCantUseStructPrimaryConstructorParameterCaptured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymous methods, lambda expressions, query expressions, and local functions inside an instance member of a struct cannot access primary constructor parameter.
        /// </summary>
        public static string ERR_AnonDelegateCantUseStructPrimaryConstructorParameterInMember {
            get {
                return ResourceManager.GetString("ERR_AnonDelegateCantUseStructPrimaryConstructorParameterInMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Foreach cannot operate on a &apos;{0}&apos;. Did you intend to invoke the &apos;{0}&apos;?.
        /// </summary>
        public static string ERR_AnonMethGrpInForEach {
            get {
                return ResourceManager.GetString("ERR_AnonMethGrpInForEach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert {0} to type &apos;{1}&apos; because it is not a delegate type.
        /// </summary>
        public static string ERR_AnonMethToNonDel {
            get {
                return ResourceManager.GetString("ERR_AnonMethToNonDel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An anonymous method expression cannot be converted to an expression tree.
        /// </summary>
        public static string ERR_AnonymousMethodToExpressionTree {
            get {
                return ResourceManager.GetString("ERR_AnonymousMethodToExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all code paths return a value in {0} of type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AnonymousReturnExpected {
            get {
                return ResourceManager.GetString("ERR_AnonymousReturnExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An anonymous type cannot have multiple properties with the same name.
        /// </summary>
        public static string ERR_AnonymousTypeDuplicatePropertyName {
            get {
                return ResourceManager.GetString("ERR_AnonymousTypeDuplicatePropertyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use anonymous type in a constant expression.
        /// </summary>
        public static string ERR_AnonymousTypeNotAvailable {
            get {
                return ResourceManager.GetString("ERR_AnonymousTypeNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign &apos;{0}&apos; to anonymous type property.
        /// </summary>
        public static string ERR_AnonymousTypePropertyAssignedBadValue {
            get {
                return ResourceManager.GetString("ERR_AnonymousTypePropertyAssignedBadValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The __arglist construct is valid only within a variable argument method.
        /// </summary>
        public static string ERR_ArgsInvalid {
            get {
                return ResourceManager.GetString("ERR_ArgsInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element names are not permitted when pattern-matching via &apos;System.Runtime.CompilerServices.ITuple&apos;..
        /// </summary>
        public static string ERR_ArgumentNameInITuplePattern {
            get {
                return ResourceManager.GetString("ERR_ArgumentNameInITuplePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array elements cannot be of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ArrayElementCantBeRefAny {
            get {
                return ResourceManager.GetString("ERR_ArrayElementCantBeRefAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A nested array initializer is expected.
        /// </summary>
        public static string ERR_ArrayInitializerExpected {
            get {
                return ResourceManager.GetString("ERR_ArrayInitializerExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array initializer of length &apos;{0}&apos; is expected.
        /// </summary>
        public static string ERR_ArrayInitializerIncorrectLength {
            get {
                return ResourceManager.GetString("ERR_ArrayInitializerIncorrectLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array initializers can only be used in a variable or field initializer. Try using a new expression instead..
        /// </summary>
        public static string ERR_ArrayInitInBadPlace {
            get {
                return ResourceManager.GetString("ERR_ArrayInitInBadPlace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can only use array initializer expressions to assign to array types. Try using a new expression instead..
        /// </summary>
        public static string ERR_ArrayInitToNonArrayType {
            get {
                return ResourceManager.GetString("ERR_ArrayInitToNonArrayType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: array elements cannot be of static type.
        /// </summary>
        public static string ERR_ArrayOfStaticClass {
            get {
                return ResourceManager.GetString("ERR_ArrayOfStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array size cannot be specified in a variable declaration (try initializing with a &apos;new&apos; expression).
        /// </summary>
        public static string ERR_ArraySizeInDeclaration {
            get {
                return ResourceManager.GetString("ERR_ArraySizeInDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The as operator must be used with a reference type or nullable type (&apos;{0}&apos; is a non-nullable value type).
        /// </summary>
        public static string ERR_AsMustHaveReferenceType {
            get {
                return ResourceManager.GetString("ERR_AsMustHaveReferenceType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not legal to use nullable reference type &apos;{0}?&apos; in an as expression; use the underlying type &apos;{0}&apos; instead..
        /// </summary>
        public static string ERR_AsNullableType {
            get {
                return ResourceManager.GetString("ERR_AsNullableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly &apos;{0}&apos; with identity &apos;{1}&apos; uses &apos;{2}&apos; which has a higher version than referenced assembly &apos;{3}&apos; with identity &apos;{4}&apos;.
        /// </summary>
        public static string ERR_AssemblyMatchBadVersion {
            get {
                return ResourceManager.GetString("ERR_AssemblyMatchBadVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /moduleassemblyname option may only be specified when building a target type of &apos;module&apos;.
        /// </summary>
        public static string ERR_AssemblyNameOnNonModule {
            get {
                return ResourceManager.GetString("ERR_AssemblyNameOnNonModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assemblies &apos;{0}&apos; and &apos;{1}&apos; refer to the same metadata but only one is a linked reference (specified using /link option); consider removing one of the references..
        /// </summary>
        public static string ERR_AssemblySpecifiedForLinkAndRef {
            get {
                return ResourceManager.GetString("ERR_AssemblySpecifiedForLinkAndRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The left-hand side of an assignment must be a variable, property or indexer.
        /// </summary>
        public static string ERR_AssgLvalueExpected {
            get {
                return ResourceManager.GetString("ERR_AssgLvalueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A readonly field cannot be assigned to (except in a constructor or init-only setter of the type in which the field is defined or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonly {
            get {
                return ResourceManager.GetString("ERR_AssgReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of readonly field &apos;{0}&apos; cannot be modified (except in a constructor or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonly2 {
            get {
                return ResourceManager.GetString("ERR_AssgReadonly2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to &apos;{0}&apos; because it is read-only.
        /// </summary>
        public static string ERR_AssgReadonlyLocal {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify members of &apos;{0}&apos; because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AssgReadonlyLocal2Cause {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyLocal2Cause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to &apos;{0}&apos; because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AssgReadonlyLocalCause {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyLocalCause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A primary constructor parameter of a readonly type cannot be assigned to (except in init-only setter of the type or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonlyPrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyPrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of primary constructor parameter &apos;{0}&apos; of a readonly type cannot be modified (except in init-only setter of the type or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonlyPrimaryConstructorParameter2 {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyPrimaryConstructorParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property or indexer &apos;{0}&apos; cannot be assigned to -- it is read only.
        /// </summary>
        public static string ERR_AssgReadonlyProp {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyProp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static readonly field cannot be assigned to (except in a static constructor or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonlyStatic {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of static readonly field &apos;{0}&apos; cannot be assigned to (except in a static constructor or a variable initializer).
        /// </summary>
        public static string ERR_AssgReadonlyStatic2 {
            get {
                return ResourceManager.GetString("ERR_AssgReadonlyStatic2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Init-only property or indexer &apos;{0}&apos; can only be assigned in an object initializer, or on &apos;this&apos; or &apos;base&apos; in an instance constructor or an &apos;init&apos; accessor..
        /// </summary>
        public static string ERR_AssignmentInitOnly {
            get {
                return ResourceManager.GetString("ERR_AssignmentInitOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment operator &apos;:=&apos; expected..
        /// </summary>
        public static string ERR_AssignmentOperatorExpected {
            get {
                return ResourceManager.GetString("ERR_AssignmentOperatorExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ASSIGN methods must have at least one parameter.
        /// </summary>
        public static string ERR_AssignMethodsMustHaveAParameter {
            get {
                return ResourceManager.GetString("ERR_AssignMethodsMustHaveAParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to {0} &apos;{1}&apos; or use it as the right hand side of a ref assignment because it is a readonly variable.
        /// </summary>
        public static string ERR_AssignReadonlyNotField {
            get {
                return ResourceManager.GetString("ERR_AssignReadonlyNotField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to a member of {0} &apos;{1}&apos; or use it as the right hand side of a ref assignment because it is a readonly variable.
        /// </summary>
        public static string ERR_AssignReadonlyNotField2 {
            get {
                return ResourceManager.GetString("ERR_AssignReadonlyNotField2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type parameter &apos;{0}&apos; cannot be used with the &apos;as&apos; operator because it does not have a class type constraint nor a &apos;class&apos; constraint.
        /// </summary>
        public static string ERR_AsWithTypeVar {
            get {
                return ResourceManager.GetString("ERR_AsWithTypeVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: an attribute argument cannot use type parameters.
        /// </summary>
        public static string ERR_AttrArgWithTypeVars {
            get {
                return ResourceManager.GetString("ERR_AttrArgWithTypeVars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be used in this context because it cannot be represented in metadata..
        /// </summary>
        public static string ERR_AttrDependentTypeNotAllowed {
            get {
                return ResourceManager.GetString("ERR_AttrDependentTypeNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use attribute constructor &apos;{0}&apos; because it has &apos;in&apos; or &apos;ref readonly&apos; parameters..
        /// </summary>
        public static string ERR_AttributeCtorInParameter {
            get {
                return ResourceManager.GetString("ERR_AttributeCtorInParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is not valid on property or event accessors. It is only valid on &apos;{1}&apos; declarations..
        /// </summary>
        public static string ERR_AttributeNotOnAccessor {
            get {
                return ResourceManager.GetString("ERR_AttributeNotOnAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is not valid on event accessors. It is only valid on &apos;{1}&apos; declarations..
        /// </summary>
        public static string ERR_AttributeNotOnEventAccessor {
            get {
                return ResourceManager.GetString("ERR_AttributeNotOnEventAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is not valid on this declaration type. It is only valid on &apos;{1}&apos; declarations..
        /// </summary>
        public static string ERR_AttributeOnBadSymbolType {
            get {
                return ResourceManager.GetString("ERR_AttributeOnBadSymbolType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute parameter &apos;{0}&apos; must be specified..
        /// </summary>
        public static string ERR_AttributeParameterRequired1 {
            get {
                return ResourceManager.GetString("ERR_AttributeParameterRequired1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute parameter &apos;{0}&apos; or &apos;{1}&apos; must be specified..
        /// </summary>
        public static string ERR_AttributeParameterRequired2 {
            get {
                return ResourceManager.GetString("ERR_AttributeParameterRequired2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes are not valid in this context..
        /// </summary>
        public static string ERR_AttributesNotAllowed {
            get {
                return ResourceManager.GetString("ERR_AttributesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attributes on lambda expressions require a parenthesized parameter list..
        /// </summary>
        public static string ERR_AttributesRequireParenthesizedLambdaExpression {
            get {
                return ResourceManager.GetString("ERR_AttributesRequireParenthesizedLambdaExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is only valid on classes derived from System.Attribute.
        /// </summary>
        public static string ERR_AttributeUsageOnNonAttributeClass {
            get {
                return ResourceManager.GetString("ERR_AttributeUsageOnNonAttributeClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: an attribute type argument cannot use type parameters.
        /// </summary>
        public static string ERR_AttrTypeArgCannotBeTypeVar {
            get {
                return ResourceManager.GetString("ERR_AttrTypeArgCannotBeTypeVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented properties cannot return by reference.
        /// </summary>
        public static string ERR_AutoPropertyCannotBeRefReturning {
            get {
                return ResourceManager.GetString("ERR_AutoPropertyCannotBeRefReturning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented properties must have get accessors..
        /// </summary>
        public static string ERR_AutoPropertyMustHaveGetAccessor {
            get {
                return ResourceManager.GetString("ERR_AutoPropertyMustHaveGetAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented properties must override all accessors of the overridden property..
        /// </summary>
        public static string ERR_AutoPropertyMustOverrideSet {
            get {
                return ResourceManager.GetString("ERR_AutoPropertyMustOverrideSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexed properties cannot be an AUTO property..
        /// </summary>
        public static string ERR_AutoPropertyParameters {
            get {
                return ResourceManager.GetString("ERR_AutoPropertyParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented property &apos;{0}&apos; cannot be marked &apos;readonly&apos; because it has a &apos;set&apos; accessor..
        /// </summary>
        public static string ERR_AutoPropertyWithSetterCantBeReadOnly {
            get {
                return ResourceManager.GetString("ERR_AutoPropertyWithSetterCantBeReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented instance properties in readonly structs must be readonly..
        /// </summary>
        public static string ERR_AutoPropsInRoStruct {
            get {
                return ResourceManager.GetString("ERR_AutoPropsInRoStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented &apos;set&apos; accessor &apos;{0}&apos; cannot be marked &apos;readonly&apos;..
        /// </summary>
        public static string ERR_AutoSetterCantBeReadOnly {
            get {
                return ResourceManager.GetString("ERR_AutoSetterCantBeReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous foreach statement cannot operate on variables of type &apos;{0}&apos; because &apos;{0}&apos; does not contain a suitable public instance or extension definition for &apos;{1}&apos;.
        /// </summary>
        public static string ERR_AwaitForEachMissingMember {
            get {
                return ResourceManager.GetString("ERR_AwaitForEachMissingMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous foreach statement cannot operate on variables of type &apos;{0}&apos; because &apos;{0}&apos; does not contain a public instance or extension definition for &apos;{1}&apos;. Did you mean &apos;foreach&apos; rather than &apos;await foreach&apos;?.
        /// </summary>
        public static string ERR_AwaitForEachMissingMemberWrongAsync {
            get {
                return ResourceManager.GetString("ERR_AwaitForEachMissingMemberWrongAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await in an unsafe context.
        /// </summary>
        public static string ERR_AwaitInUnsafeContext {
            get {
                return ResourceManager.GetString("ERR_AwaitInUnsafeContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the parameters of a binary operator must be the containing type, or its type parameter constrained to it..
        /// </summary>
        public static string ERR_BadAbstractBinaryOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadAbstractBinaryOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the parameters of an equality, or inequality operator declared in interface &apos;{0}&apos; must be a type parameter on &apos;{0}&apos; constrained to &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadAbstractEqualityOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadAbstractEqualityOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type for ++ or -- operator must either match the parameter type, or be derived from the parameter type, or be the containing type&apos;s type parameter constrained to it unless the parameter type is a different type parameter..
        /// </summary>
        public static string ERR_BadAbstractIncDecRetType {
            get {
                return ResourceManager.GetString("ERR_BadAbstractIncDecRetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter type for ++ or -- operator must be the containing type, or its type parameter constrained to it..
        /// </summary>
        public static string ERR_BadAbstractIncDecSignature {
            get {
                return ResourceManager.GetString("ERR_BadAbstractIncDecSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand of an overloaded shift operator must have the same type as the containing type or its type parameter constrained to it.
        /// </summary>
        public static string ERR_BadAbstractShiftOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadAbstractShiftOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static virtual or abstract interface member can be accessed only on a type parameter..
        /// </summary>
        public static string ERR_BadAbstractStaticMemberAccess {
            get {
                return ResourceManager.GetString("ERR_BadAbstractStaticMemberAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter of a unary operator must be the containing type, or its type parameter constrained to it..
        /// </summary>
        public static string ERR_BadAbstractUnaryOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadAbstractUnaryOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is inaccessible due to its protection level.
        /// </summary>
        public static string ERR_BadAccess {
            get {
                return ResourceManager.GetString("ERR_BadAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} may not be passed with the &apos;@&apos; prefix.
        /// </summary>
        public static string ERR_BadAddressOfArg {
            get {
                return ResourceManager.GetString("ERR_BadAddressOfArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement cannot operate on enumerators of type &apos;{0}&apos; because it is a type parameter that allows ref struct and it is not known at compile time to implement IDisposable..
        /// </summary>
        public static string ERR_BadAllowByRefLikeEnumerator {
            get {
                return ResourceManager.GetString("ERR_BadAllowByRefLikeEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to AppConfigPath must be absolute..
        /// </summary>
        public static string ERR_BadAppConfigPath {
            get {
                return ResourceManager.GetString("ERR_BadAppConfigPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No overload for method &apos;{0}&apos; takes {1} arguments.
        /// </summary>
        public static string ERR_BadArgCount {
            get {
                return ResourceManager.GetString("ERR_BadArgCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} may not be passed with the &apos;{1}&apos; keyword.
        /// </summary>
        public static string ERR_BadArgExtraRef {
            get {
                return ResourceManager.GetString("ERR_BadArgExtraRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} may not be passed with the &apos;ref&apos; keyword in language version {1}. To pass &apos;ref&apos; arguments to &apos;in&apos; parameters, upgrade to language version {2} or greater..
        /// </summary>
        public static string ERR_BadArgExtraRefLangVersion {
            get {
                return ResourceManager.GetString("ERR_BadArgExtraRefLangVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} must be passed with the &apos;{1}&apos; keyword.
        /// </summary>
        public static string ERR_BadArgRef {
            get {
                return ResourceManager.GetString("ERR_BadArgRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0}: cannot convert from &apos;{1}&apos; to &apos;{2}&apos;.
        /// </summary>
        public static string ERR_BadArgType {
            get {
                return ResourceManager.GetString("ERR_BadArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has no applicable method named &apos;{1}&apos; but appears to have an extension method by that name. Extension methods cannot be dynamically dispatched. Consider casting the dynamic arguments or calling the extension method without the extension method syntax..
        /// </summary>
        public static string ERR_BadArgTypeDynamicExtension {
            get {
                return ResourceManager.GetString("ERR_BadArgTypeDynamicExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method &apos;{0}&apos; for the collection initializer has some invalid arguments.
        /// </summary>
        public static string ERR_BadArgTypesForCollectionAdd {
            get {
                return ResourceManager.GetString("ERR_BadArgTypesForCollectionAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The argument to the &apos;{0}&apos; attribute must be a valid identifier.
        /// </summary>
        public static string ERR_BadArgumentToAttribute {
            get {
                return ResourceManager.GetString("ERR_BadArgumentToAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using the generic {1} &apos;{0}&apos; requires {2} type arguments.
        /// </summary>
        public static string ERR_BadArity {
            get {
                return ResourceManager.GetString("ERR_BadArity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array type specifier, [], must appear before parameter name.
        /// </summary>
        public static string ERR_BadArraySyntax {
            get {
                return ResourceManager.GetString("ERR_BadArraySyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid assembly name: {0}.
        /// </summary>
        public static string ERR_BadAssemblyName {
            get {
                return ResourceManager.GetString("ERR_BadAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async methods cannot have ref, in or out parameters.
        /// </summary>
        public static string ERR_BadAsyncArgType {
            get {
                return ResourceManager.GetString("ERR_BadAsyncArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async lambda expressions cannot be converted to expression trees.
        /// </summary>
        public static string ERR_BadAsyncExpressionTree {
            get {
                return ResourceManager.GetString("ERR_BadAsyncExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;async&apos; modifier can only be used in methods that have a body..
        /// </summary>
        public static string ERR_BadAsyncLacksBody {
            get {
                return ResourceManager.GetString("ERR_BadAsyncLacksBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For type &apos;{0}&apos; to be used as an AsyncMethodBuilder for type &apos;{1}&apos;, its Task property should return type &apos;{1}&apos; instead of type &apos;{2}&apos;..
        /// </summary>
        public static string ERR_BadAsyncMethodBuilderTaskProperty {
            get {
                return ResourceManager.GetString("ERR_BadAsyncMethodBuilderTaskProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of an async method must be void, Task, Task&lt;T&gt;, a task-like type, IAsyncEnumerable&lt;T&gt;, or IAsyncEnumerator&lt;T&gt;.
        /// </summary>
        public static string ERR_BadAsyncReturn {
            get {
                return ResourceManager.GetString("ERR_BadAsyncReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since this is an async method, the return expression must be of type &apos;{0}&apos; rather than &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadAsyncReturnExpression {
            get {
                return ResourceManager.GetString("ERR_BadAsyncReturnExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attribute argument must be a constant expression, typeof expression or array creation expression of an attribute parameter type.
        /// </summary>
        public static string ERR_BadAttributeArgument {
            get {
                return ResourceManager.GetString("ERR_BadAttributeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute constructor parameter &apos;{0}&apos; is optional, but no default parameter value was specified..
        /// </summary>
        public static string ERR_BadAttributeParamDefaultArgument {
            get {
                return ResourceManager.GetString("ERR_BadAttributeParamDefaultArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute constructor parameter &apos;{0}&apos; has type &apos;{1}&apos;, which is not a valid attribute parameter type.
        /// </summary>
        public static string ERR_BadAttributeParamType {
            get {
                return ResourceManager.GetString("ERR_BadAttributeParamType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;await&apos; requires that the type {0} have a suitable &apos;GetAwaiter&apos; method.
        /// </summary>
        public static string ERR_BadAwaitArg {
            get {
                return ResourceManager.GetString("ERR_BadAwaitArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;await&apos; requires that the type &apos;{0}&apos; have a suitable &apos;GetAwaiter&apos; method. Are you missing a using directive for &apos;System&apos;?.
        /// </summary>
        public static string ERR_BadAwaitArg_NeedSystem {
            get {
                return ResourceManager.GetString("ERR_BadAwaitArg_NeedSystem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadAwaitArgIntrinsic {
            get {
                return ResourceManager.GetString("ERR_BadAwaitArgIntrinsic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await &apos;void&apos;.
        /// </summary>
        public static string ERR_BadAwaitArgVoidCall {
            get {
                return ResourceManager.GetString("ERR_BadAwaitArgVoidCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;await&apos; cannot be used as an identifier within an async method or lambda expression.
        /// </summary>
        public static string ERR_BadAwaitAsIdentifier {
            get {
                return ResourceManager.GetString("ERR_BadAwaitAsIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;await&apos; requires that the return type &apos;{0}&apos; of &apos;{1}.GetAwaiter()&apos; have suitable &apos;IsCompleted&apos;, &apos;OnCompleted&apos;, and &apos;GetResult&apos; members, and implement &apos;INotifyCompletion&apos; or &apos;ICriticalNotifyCompletion&apos;.
        /// </summary>
        public static string ERR_BadAwaiterPattern {
            get {
                return ResourceManager.GetString("ERR_BadAwaiterPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await in a catch clause.
        /// </summary>
        public static string ERR_BadAwaitInCatch {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await in the filter expression of a catch clause.
        /// </summary>
        public static string ERR_BadAwaitInCatchFilter {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInCatchFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await in the body of a finally clause.
        /// </summary>
        public static string ERR_BadAwaitInFinally {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot await in the body of a lock statement.
        /// </summary>
        public static string ERR_BadAwaitInLock {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator may only be used in a query expression within the first collection expression of the initial &apos;from&apos; clause or within the collection expression of a &apos;join&apos; clause.
        /// </summary>
        public static string ERR_BadAwaitInQuery {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator cannot be used in a static script variable initializer..
        /// </summary>
        public static string ERR_BadAwaitInStaticVariableInitializer {
            get {
                return ResourceManager.GetString("ERR_BadAwaitInStaticVariableInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator can only be used when contained within a method or lambda expression marked with the &apos;async&apos; modifier.
        /// </summary>
        public static string ERR_BadAwaitWithoutAsync {
            get {
                return ResourceManager.GetString("ERR_BadAwaitWithoutAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator can only be used within an async {0}. Consider marking this {0} with the &apos;async&apos; modifier..
        /// </summary>
        public static string ERR_BadAwaitWithoutAsyncLambda {
            get {
                return ResourceManager.GetString("ERR_BadAwaitWithoutAsyncLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator can only be used within an async method. Consider marking this method with the &apos;async&apos; modifier and changing its return type to &apos;Task&lt;{0}&gt;&apos;..
        /// </summary>
        public static string ERR_BadAwaitWithoutAsyncMethod {
            get {
                return ResourceManager.GetString("ERR_BadAwaitWithoutAsyncMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;await&apos; operator can only be used within an async method. Consider marking this method with the &apos;async&apos; modifier and changing its return type to &apos;Task&apos;..
        /// </summary>
        public static string ERR_BadAwaitWithoutVoidAsyncMethod {
            get {
                return ResourceManager.GetString("ERR_BadAwaitWithoutVoidAsyncMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid image base number &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadBaseNumber {
            get {
                return ResourceManager.GetString("ERR_BadBaseNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid base type.
        /// </summary>
        public static string ERR_BadBaseType {
            get {
                return ResourceManager.GetString("ERR_BadBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the parameters of a binary operator must be the containing type.
        /// </summary>
        public static string ERR_BadBinaryOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadBinaryOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operands of type &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_BadBinaryOps {
            get {
                return ResourceManager.GetString("ERR_BadBinaryOps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operands of type &apos;{1}&apos; and &apos;{2}&apos; that are not UTF-8 byte representations.
        /// </summary>
        public static string ERR_BadBinaryReadOnlySpanConcatenation {
            get {
                return ResourceManager.GetString("ERR_BadBinaryReadOnlySpanConcatenation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded binary operator &apos;{0}&apos; takes two parameters.
        /// </summary>
        public static string ERR_BadBinOpArgs {
            get {
                return ResourceManager.GetString("ERR_BadBinOpArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order to be applicable as a short circuit operator a user-defined logical operator (&apos;{0}&apos;) must have the same return type and parameter types.
        /// </summary>
        public static string ERR_BadBoolOp {
            get {
                return ResourceManager.GetString("ERR_BadBoolOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid constraint. A type used as a constraint must be an interface, a non-sealed class or a type parameter..
        /// </summary>
        public static string ERR_BadBoundType {
            get {
                return ResourceManager.GetString("ERR_BadBoundType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute may only be applied to parameters with default values.
        /// </summary>
        public static string ERR_BadCallerArgumentExpressionParamWithoutDefaultValue {
            get {
                return ResourceManager.GetString("ERR_BadCallerArgumentExpressionParamWithoutDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerFilePathAttribute may only be applied to parameters with default values.
        /// </summary>
        public static string ERR_BadCallerFilePathParamWithoutDefaultValue {
            get {
                return ResourceManager.GetString("ERR_BadCallerFilePathParamWithoutDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerLineNumberAttribute may only be applied to parameters with default values.
        /// </summary>
        public static string ERR_BadCallerLineNumberParamWithoutDefaultValue {
            get {
                return ResourceManager.GetString("ERR_BadCallerLineNumberParamWithoutDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute may only be applied to parameters with default values.
        /// </summary>
        public static string ERR_BadCallerMemberNameParamWithoutDefaultValue {
            get {
                return ResourceManager.GetString("ERR_BadCallerMemberNameParamWithoutDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch expression arm does not begin with a &apos;case&apos; keyword..
        /// </summary>
        public static string ERR_BadCaseInSwitchArm {
            get {
                return ResourceManager.GetString("ERR_BadCaseInSwitchArm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The right hand side of a fixed statement assignment may not be a cast expression.
        /// </summary>
        public static string ERR_BadCastInFixed {
            get {
                return ResourceManager.GetString("ERR_BadCastInFixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed coclass wrapper class signature &apos;{0}&apos; for interface &apos;{1}&apos; is not a valid class name signature.
        /// </summary>
        public static string ERR_BadCoClassSig {
            get {
                return ResourceManager.GetString("ERR_BadCoClassSig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &apos;{0}&apos; for /langversion. Use &apos;/langversion:?&apos; to list supported values..
        /// </summary>
        public static string ERR_BadCompatMode {
            get {
                return ResourceManager.GetString("ERR_BadCompatMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid &apos;{0}&apos; value: &apos;{1}&apos;..
        /// </summary>
        public static string ERR_BadCompilationOptionValue {
            get {
                return ResourceManager.GetString("ERR_BadCompilationOptionValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid constraint type. A type used as a constraint must be an interface, a non-sealed class or a type parameter..
        /// </summary>
        public static string ERR_BadConstraintType {
            get {
                return ResourceManager.GetString("ERR_BadConstraintType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; cannot be declared const.
        /// </summary>
        public static string ERR_BadConstType {
            get {
                return ResourceManager.GetString("ERR_BadConstType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a constructor that takes {1} arguments.
        /// </summary>
        public static string ERR_BadCtorArgCount {
            get {
                return ResourceManager.GetString("ERR_BadCtorArgCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &apos;{0}&apos; for /debug; must be &apos;portable&apos;, &apos;embedded&apos;, &apos;full&apos; or &apos;pdbonly&apos;.
        /// </summary>
        public static string ERR_BadDebugType {
            get {
                return ResourceManager.GetString("ERR_BadDebugType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delegate &apos;{0}&apos; does not take {1} arguments.
        /// </summary>
        public static string ERR_BadDelArgCount {
            get {
                return ResourceManager.GetString("ERR_BadDelArgCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegate &apos;{0}&apos; does not have a valid constructor.
        /// </summary>
        public static string ERR_BadDelegateConstructor {
            get {
                return ResourceManager.GetString("ERR_BadDelegateConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control cannot leave the body of an anonymous method or lambda expression.
        /// </summary>
        public static string ERR_BadDelegateLeave {
            get {
                return ResourceManager.GetString("ERR_BadDelegateLeave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of destructor must match name of type.
        /// </summary>
        public static string ERR_BadDestructorName {
            get {
                return ResourceManager.GetString("ERR_BadDestructorName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preprocessor directives must appear as the first non-whitespace character on a line.
        /// </summary>
        public static string ERR_BadDirectivePlacement {
            get {
                return ResourceManager.GetString("ERR_BadDirectivePlacement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided documentation mode is unsupported or invalid: &apos;{0}&apos;..
        /// </summary>
        public static string ERR_BadDocumentationMode {
            get {
                return ResourceManager.GetString("ERR_BadDocumentationMode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a collection of dynamic type in an asynchronous foreach.
        /// </summary>
        public static string ERR_BadDynamicAwaitForEach {
            get {
                return ResourceManager.GetString("ERR_BadDynamicAwaitForEach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: user-defined conversions to or from the dynamic type are not allowed.
        /// </summary>
        public static string ERR_BadDynamicConversion {
            get {
                return ResourceManager.GetString("ERR_BadDynamicConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use an expression of type &apos;{0}&apos; as an argument to a dynamically dispatched operation..
        /// </summary>
        public static string ERR_BadDynamicMethodArg {
            get {
                return ResourceManager.GetString("ERR_BadDynamicMethodArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a lambda expression as an argument to a dynamically dispatched operation without first casting it to a delegate or expression tree type..
        /// </summary>
        public static string ERR_BadDynamicMethodArgLambda {
            get {
                return ResourceManager.GetString("ERR_BadDynamicMethodArgLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a method group as an argument to a dynamically dispatched operation. Did you intend to invoke the method?.
        /// </summary>
        public static string ERR_BadDynamicMethodArgMemgrp {
            get {
                return ResourceManager.GetString("ERR_BadDynamicMethodArgMemgrp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Query expressions over source type &apos;dynamic&apos; or with a join sequence of type &apos;dynamic&apos; are not allowed.
        /// </summary>
        public static string ERR_BadDynamicQuery {
            get {
                return ResourceManager.GetString("ERR_BadDynamicQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The typeof operator cannot be used on the dynamic type.
        /// </summary>
        public static string ERR_BadDynamicTypeof {
            get {
                return ResourceManager.GetString("ERR_BadDynamicTypeof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedded statement cannot be a declaration or labeled statement.
        /// </summary>
        public static string ERR_BadEmbeddedStmt {
            get {
                return ResourceManager.GetString("ERR_BadEmbeddedStmt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A throw statement with no arguments is not allowed outside of a catch clause.
        /// </summary>
        public static string ERR_BadEmptyThrow {
            get {
                return ResourceManager.GetString("ERR_BadEmptyThrow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A throw statement with no arguments is not allowed in a finally clause that is nested inside the nearest enclosing catch clause.
        /// </summary>
        public static string ERR_BadEmptyThrowInFinally {
            get {
                return ResourceManager.GetString("ERR_BadEmptyThrowInFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event &apos;{0}&apos; can only appear on the left hand side of += or -= (except when used from within the type &apos;{1}&apos;).
        /// </summary>
        public static string ERR_BadEventUsage {
            get {
                return ResourceManager.GetString("ERR_BadEventUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event &apos;{0}&apos; can only appear on the left hand side of += or -=.
        /// </summary>
        public static string ERR_BadEventUsageNoField {
            get {
                return ResourceManager.GetString("ERR_BadEventUsageNoField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type caught or thrown must be derived from System.Exception.
        /// </summary>
        public static string ERR_BadExceptionType {
            get {
                return ResourceManager.GetString("ERR_BadExceptionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension method must be defined in a non-generic static class.
        /// </summary>
        public static string ERR_BadExtensionAgg {
            get {
                return ResourceManager.GetString("ERR_BadExtensionAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension method must be static.
        /// </summary>
        public static string ERR_BadExtensionMeth {
            get {
                return ResourceManager.GetString("ERR_BadExtensionMeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The extern alias &apos;{0}&apos; was not specified in a /reference option.
        /// </summary>
        public static string ERR_BadExternAlias {
            get {
                return ResourceManager.GetString("ERR_BadExternAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid extern alias for &apos;/reference&apos;; &apos;{0}&apos; is not a valid identifier.
        /// </summary>
        public static string ERR_BadExternIdentifier {
            get {
                return ResourceManager.GetString("ERR_BadExternIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; may not be used for a field of a record..
        /// </summary>
        public static string ERR_BadFieldTypeInRecord {
            get {
                return ResourceManager.GetString("ERR_BadFieldTypeInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control cannot leave the body of a finally clause.
        /// </summary>
        public static string ERR_BadFinallyLeave {
            get {
                return ResourceManager.GetString("ERR_BadFinallyLeave", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of a local declared in a fixed statement must be a pointer type.
        /// </summary>
        public static string ERR_BadFixedInitType {
            get {
                return ResourceManager.GetString("ERR_BadFixedInitType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type and identifier are both required in a foreach statement.
        /// </summary>
        public static string ERR_BadForeachDecl {
            get {
                return ResourceManager.GetString("ERR_BadForeachDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Function pointer &apos;{0}&apos; does not take {1} arguments.
        /// </summary>
        public static string ERR_BadFuncPointerArgCount {
            get {
                return ResourceManager.GetString("ERR_BadFuncPointerArgCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be used as a modifier on a function pointer parameter..
        /// </summary>
        public static string ERR_BadFuncPointerParamModifier {
            get {
                return ResourceManager.GetString("ERR_BadFuncPointerParamModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous foreach requires that the return type &apos;{0}&apos; of &apos;{1}&apos; must have a suitable public &apos;MoveNextAsync&apos; method and public &apos;Current&apos; property.
        /// </summary>
        public static string ERR_BadGetAsyncEnumerator {
            get {
                return ResourceManager.GetString("ERR_BadGetAsyncEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach requires that the return type &apos;{0}&apos; of &apos;{1}&apos; must have a suitable public &apos;MoveNext&apos; method and public &apos;Current&apos; property.
        /// </summary>
        public static string ERR_BadGetEnumerator {
            get {
                return ResourceManager.GetString("ERR_BadGetEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type for ++ or -- operator must match the parameter type or be derived from the parameter type.
        /// </summary>
        public static string ERR_BadIncDecRetType {
            get {
                return ResourceManager.GetString("ERR_BadIncDecRetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter type for ++ or -- operator must be the containing type.
        /// </summary>
        public static string ERR_BadIncDecSignature {
            get {
                return ResourceManager.GetString("ERR_BadIncDecSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong number of indices inside []; expected {0}.
        /// </summary>
        public static string ERR_BadIndexCount {
            get {
                return ResourceManager.GetString("ERR_BadIndexCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; attribute is valid only on an indexer that is not an explicit interface member declaration.
        /// </summary>
        public static string ERR_BadIndexerNameAttr {
            get {
                return ResourceManager.GetString("ERR_BadIndexerNameAttr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot apply indexing with [] to an expression of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadIndexLHS {
            get {
                return ResourceManager.GetString("ERR_BadIndexLHS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only records may inherit from records..
        /// </summary>
        public static string ERR_BadInheritanceFromRecord {
            get {
                return ResourceManager.GetString("ERR_BadInheritanceFromRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;init&apos; accessor is not valid on static members.
        /// </summary>
        public static string ERR_BadInitAccessor {
            get {
                return ResourceManager.GetString("ERR_BadInitAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a definition for &apos;{1}&apos; and the best extension method overload &apos;{2}&apos; requires a receiver of type &apos;{3}&apos;.
        /// </summary>
        public static string ERR_BadInstanceArgType {
            get {
                return ResourceManager.GetString("ERR_BadInstanceArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Iterators cannot have ref, in or out parameters.
        /// </summary>
        public static string ERR_BadIteratorArgType {
            get {
                return ResourceManager.GetString("ERR_BadIteratorArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of &apos;{0}&apos; cannot be an iterator block because &apos;{1}&apos; is not an iterator interface type.
        /// </summary>
        public static string ERR_BadIteratorReturn {
            get {
                return ResourceManager.GetString("ERR_BadIteratorReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of &apos;{0}&apos; cannot be an iterator block because &apos;{0}&apos; returns by reference.
        /// </summary>
        public static string ERR_BadIteratorReturnRef {
            get {
                return ResourceManager.GetString("ERR_BadIteratorReturnRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided language version is unsupported or invalid: &apos;{0}&apos;..
        /// </summary>
        public static string ERR_BadLanguageVersion {
            get {
                return ResourceManager.GetString("ERR_BadLanguageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifier &apos;{0}&apos; is not valid for this item.
        /// </summary>
        public static string ERR_BadMemberFlag {
            get {
                return ResourceManager.GetString("ERR_BadMemberFlag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to More than one protection modifier.
        /// </summary>
        public static string ERR_BadMemberProtection {
            get {
                return ResourceManager.GetString("ERR_BadMemberProtection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member modifier &apos;{0}&apos; must precede the member type and name.
        /// </summary>
        public static string ERR_BadModifierLocation {
            get {
                return ResourceManager.GetString("ERR_BadModifierLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A namespace declaration cannot have modifiers or attributes.
        /// </summary>
        public static string ERR_BadModifiersOnNamespace {
            get {
                return ResourceManager.GetString("ERR_BadModifiersOnNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid module name: {0}.
        /// </summary>
        public static string ERR_BadModuleName {
            get {
                return ResourceManager.GetString("ERR_BadModuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overload for &apos;{0}&apos; does not have a parameter named &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadNamedArgument {
            get {
                return ResourceManager.GetString("ERR_BadNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegate &apos;{0}&apos; does not have a parameter named &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadNamedArgumentForDelegateInvoke {
            get {
                return ResourceManager.GetString("ERR_BadNamedArgumentForDelegateInvoke", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid named attribute argument. Named attribute arguments must be fields which are not readonly, static, or const, or read-write properties which are public and not static..
        /// </summary>
        public static string ERR_BadNamedAttributeArgument {
            get {
                return ResourceManager.GetString("ERR_BadNamedAttributeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid named attribute argument because it is not a valid attribute parameter type.
        /// </summary>
        public static string ERR_BadNamedAttributeArgumentType {
            get {
                return ResourceManager.GetString("ERR_BadNamedAttributeArgumentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A new expression requires an argument list or (), [], or {} after type.
        /// </summary>
        public static string ERR_BadNewExpr {
            get {
                return ResourceManager.GetString("ERR_BadNewExpr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named argument &apos;{0}&apos; is used out-of-position but is followed by an unnamed argument.
        /// </summary>
        public static string ERR_BadNonTrailingNamedArgument {
            get {
                return ResourceManager.GetString("ERR_BadNonTrailingNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non-virtual instance interface member cannot be accessed on a type parameter that allows ref struct..
        /// </summary>
        public static string ERR_BadNonVirtualInterfaceMemberAccessOnAllowsRefLike {
            get {
                return ResourceManager.GetString("ERR_BadNonVirtualInterfaceMemberAccessOnAllowsRefLike", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &apos;{0}&apos; for /nullable; must be &apos;disable&apos;, &apos;enable&apos;, &apos;warnings&apos; or &apos;annotations&apos;.
        /// </summary>
        public static string ERR_BadNullableContextOption {
            get {
                return ResourceManager.GetString("ERR_BadNullableContextOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using alias cannot be a nullable reference type..
        /// </summary>
        public static string ERR_BadNullableReferenceTypeInUsingAlias {
            get {
                return ResourceManager.GetString("ERR_BadNullableReferenceTypeInUsingAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The typeof operator cannot be used on a nullable reference type.
        /// </summary>
        public static string ERR_BadNullableTypeof {
            get {
                return ResourceManager.GetString("ERR_BadNullableTypeof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declaration is not valid; use &apos;{0} operator &lt;dest-type&gt; (...&apos; instead.
        /// </summary>
        public static string ERR_BadOperatorSyntax {
            get {
                return ResourceManager.GetString("ERR_BadOperatorSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operand &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadOpOnNullOrDefaultOrNew {
            get {
                return ResourceManager.GetString("ERR_BadOpOnNullOrDefaultOrNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  The parameter modifier &apos;{0}&apos; cannot be used with &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadParameterModifiers {
            get {
                return ResourceManager.GetString("ERR_BadParameterModifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} should not be declared with the &apos;{1}&apos; keyword.
        /// </summary>
        public static string ERR_BadParamExtraRef {
            get {
                return ResourceManager.GetString("ERR_BadParamExtraRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parameter array cannot be used with &apos;this&apos; modifier on an extension method.
        /// </summary>
        public static string ERR_BadParamModThis {
            get {
                return ResourceManager.GetString("ERR_BadParamModThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} must be declared with the &apos;{1}&apos; keyword.
        /// </summary>
        public static string ERR_BadParamRef {
            get {
                return ResourceManager.GetString("ERR_BadParamRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} is declared as type &apos;{1}{2}&apos; but should be &apos;{3}{4}&apos;.
        /// </summary>
        public static string ERR_BadParamType {
            get {
                return ResourceManager.GetString("ERR_BadParamType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid operand for pattern match; value required, but found &apos;{0}&apos;..
        /// </summary>
        public static string ERR_BadPatternExpression {
            get {
                return ResourceManager.GetString("ERR_BadPatternExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading debug information for &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadPdbData {
            get {
                return ResourceManager.GetString("ERR_BadPdbData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &apos;{0}&apos; for /platform; must be anycpu, x86, Itanium, arm, arm64 or x64.
        /// </summary>
        public static string ERR_BadPlatformType {
            get {
                return ResourceManager.GetString("ERR_BadPlatformType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /platform:anycpu32bitpreferred can only be used with /t:exe, /t:winexe and /t:appcontainerexe.
        /// </summary>
        public static string ERR_BadPrefer32OnLib {
            get {
                return ResourceManager.GetString("ERR_BadPrefer32OnLib", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access protected member &apos;{0}&apos; via a qualifier of type &apos;{1}&apos;; the qualifier must be of type &apos;{2}&apos; (or derived from it).
        /// </summary>
        public static string ERR_BadProtectedAccess {
            get {
                return ResourceManager.GetString("ERR_BadProtectedAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Records may only inherit from object or another record.
        /// </summary>
        public static string ERR_BadRecordBase {
            get {
                return ResourceManager.GetString("ERR_BadRecordBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; must be a readable instance property or field of type &apos;{1}&apos; to match positional parameter &apos;{2}&apos;..
        /// </summary>
        public static string ERR_BadRecordMemberForPositionalParameter {
            get {
                return ResourceManager.GetString("ERR_BadRecordMemberForPositionalParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using alias cannot be a &apos;ref&apos; type..
        /// </summary>
        public static string ERR_BadRefInUsingAlias {
            get {
                return ResourceManager.GetString("ERR_BadRefInUsingAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lambda expressions that return by reference cannot be converted to expression trees.
        /// </summary>
        public static string ERR_BadRefReturnExpressionTree {
            get {
                return ResourceManager.GetString("ERR_BadRefReturnExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option &apos;{0}&apos;; Resource visibility must be either &apos;public&apos; or &apos;private&apos;.
        /// </summary>
        public static string ERR_BadResourceVis {
            get {
                return ResourceManager.GetString("ERR_BadResourceVis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{1} {0}&apos; has the wrong return type.
        /// </summary>
        public static string ERR_BadRetType {
            get {
                return ResourceManager.GetString("ERR_BadRetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand of an overloaded shift operator must have the same type as the containing type.
        /// </summary>
        public static string ERR_BadShiftOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadShiftOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a {1} but is used like a {2}.
        /// </summary>
        public static string ERR_BadSKknown {
            get {
                return ResourceManager.GetString("ERR_BadSKknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a {1}, which is not valid in the given context.
        /// </summary>
        public static string ERR_BadSKunknown {
            get {
                return ResourceManager.GetString("ERR_BadSKunknown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provided source code kind is unsupported or invalid: &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadSourceCodeKind {
            get {
                return ResourceManager.GetString("ERR_BadSourceCodeKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement cannot operate on enumerators of type &apos;{0}&apos; in async or iterator methods because &apos;{0}&apos; is a ref struct or a type parameter that allows ref struct..
        /// </summary>
        public static string ERR_BadSpecialByRefIterator {
            get {
                return ResourceManager.GetString("ERR_BadSpecialByRefIterator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters of type &apos;{0}&apos; cannot be declared in async methods or async lambda expressions..
        /// </summary>
        public static string ERR_BadSpecialByRefParameter {
            get {
                return ResourceManager.GetString("ERR_BadSpecialByRefParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A stackalloc expression requires [] after type.
        /// </summary>
        public static string ERR_BadStackAllocExpr {
            get {
                return ResourceManager.GetString("ERR_BadStackAllocExpr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;static&apos; modifier must precede &apos;unsafe&apos; modifier..
        /// </summary>
        public static string ERR_BadStaticAfterUnsafe {
            get {
                return ResourceManager.GetString("ERR_BadStaticAfterUnsafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized option: &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadSwitch {
            get {
                return ResourceManager.GetString("ERR_BadSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line syntax error: &apos;{0}&apos; is not a valid value for the &apos;{1}&apos; option. The value must be of the form &apos;{2}&apos;..
        /// </summary>
        public static string ERR_BadSwitchValue {
            get {
                return ResourceManager.GetString("ERR_BadSwitchValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; has a parameter modifier &apos;this&apos; which is not on the first parameter.
        /// </summary>
        public static string ERR_BadThisParam {
            get {
                return ResourceManager.GetString("ERR_BadThisParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; may not be used as a type argument.
        /// </summary>
        public static string ERR_BadTypeArgument {
            get {
                return ResourceManager.GetString("ERR_BadTypeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first parameter of an extension method cannot be of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadTypeforThis {
            get {
                return ResourceManager.GetString("ERR_BadTypeforThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot reference a type through an expression; try &apos;{1}&apos; instead.
        /// </summary>
        public static string ERR_BadTypeReference {
            get {
                return ResourceManager.GetString("ERR_BadTypeReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be applied to operand of type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BadUnaryOp {
            get {
                return ResourceManager.GetString("ERR_BadUnaryOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter of a unary operator must be the containing type.
        /// </summary>
        public static string ERR_BadUnaryOperatorSignature {
            get {
                return ResourceManager.GetString("ERR_BadUnaryOperatorSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded unary operator &apos;{0}&apos; takes one parameter.
        /// </summary>
        public static string ERR_BadUnOpArgs {
            get {
                return ResourceManager.GetString("ERR_BadUnOpArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a &apos;using static&apos; or &apos;using alias&apos; can be &apos;unsafe&apos;..
        /// </summary>
        public static string ERR_BadUnsafeInUsingDirective {
            get {
                return ResourceManager.GetString("ERR_BadUnsafeInUsingDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;using namespace&apos; directive can only be applied to namespaces; &apos;{0}&apos; is a type not a namespace. Consider a &apos;using static&apos; directive instead.
        /// </summary>
        public static string ERR_BadUsingNamespace {
            get {
                return ResourceManager.GetString("ERR_BadUsingNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; type is not valid for &apos;using static&apos;. Only a class, struct, interface, enum, delegate, or namespace can be used..
        /// </summary>
        public static string ERR_BadUsingStaticType {
            get {
                return ResourceManager.GetString("ERR_BadUsingStaticType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;using static&apos; directive can only be applied to types; &apos;{0}&apos; is a namespace not a type. Consider a &apos;using namespace&apos; directive instead.
        /// </summary>
        public static string ERR_BadUsingType {
            get {
                return ResourceManager.GetString("ERR_BadUsingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method with vararg cannot be generic, be in a generic type, or have a params parameter.
        /// </summary>
        public static string ERR_BadVarargs {
            get {
                return ResourceManager.GetString("ERR_BadVarargs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected ; or = (cannot specify constructor arguments in declaration).
        /// </summary>
        public static string ERR_BadVarDecl {
            get {
                return ResourceManager.GetString("ERR_BadVarDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: base class &apos;{1}&apos; is less accessible than class &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisBaseClass {
            get {
                return ResourceManager.GetString("ERR_BadVisBaseClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: base interface &apos;{1}&apos; is less accessible than interface &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisBaseInterface {
            get {
                return ResourceManager.GetString("ERR_BadVisBaseInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: constraint type &apos;{1}&apos; is less accessible than &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisBound {
            get {
                return ResourceManager.GetString("ERR_BadVisBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: parameter type &apos;{1}&apos; is less accessible than delegate &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisDelegateParam {
            get {
                return ResourceManager.GetString("ERR_BadVisDelegateParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: return type &apos;{1}&apos; is less accessible than delegate &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisDelegateReturn {
            get {
                return ResourceManager.GetString("ERR_BadVisDelegateReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: event type &apos;{1}&apos; is less accessible than event &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisEventType {
            get {
                return ResourceManager.GetString("ERR_BadVisEventType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: field type &apos;{1}&apos; is less accessible than field &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisFieldType {
            get {
                return ResourceManager.GetString("ERR_BadVisFieldType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: parameter type &apos;{1}&apos; is less accessible than indexer &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisIndexerParam {
            get {
                return ResourceManager.GetString("ERR_BadVisIndexerParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: indexer return type &apos;{1}&apos; is less accessible than indexer &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisIndexerReturn {
            get {
                return ResourceManager.GetString("ERR_BadVisIndexerReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: parameter type &apos;{1}&apos; is less accessible than operator &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisOpParam {
            get {
                return ResourceManager.GetString("ERR_BadVisOpParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: return type &apos;{1}&apos; is less accessible than operator &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisOpReturn {
            get {
                return ResourceManager.GetString("ERR_BadVisOpReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: parameter type &apos;{1}&apos; is less accessible than method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisParamType {
            get {
                return ResourceManager.GetString("ERR_BadVisParamType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: property type &apos;{1}&apos; is less accessible than property &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisPropertyType {
            get {
                return ResourceManager.GetString("ERR_BadVisPropertyType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent accessibility: return type &apos;{1}&apos; is less accessible than method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_BadVisReturnType {
            get {
                return ResourceManager.GetString("ERR_BadVisReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning level must be zero or greater.
        /// </summary>
        public static string ERR_BadWarningLevel {
            get {
                return ResourceManager.GetString("ERR_BadWarningLevel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading Win32 resources -- {0}.
        /// </summary>
        public static string ERR_BadWin32Res {
            get {
                return ResourceManager.GetString("ERR_BadWin32Res", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot yield a value in the body of a catch clause.
        /// </summary>
        public static string ERR_BadYieldInCatch {
            get {
                return ResourceManager.GetString("ERR_BadYieldInCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot yield in the body of a finally clause.
        /// </summary>
        public static string ERR_BadYieldInFinally {
            get {
                return ResourceManager.GetString("ERR_BadYieldInFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot yield a value in the body of a try block with a catch clause.
        /// </summary>
        public static string ERR_BadYieldInTryOfCatch {
            get {
                return ResourceManager.GetString("ERR_BadYieldInTryOfCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;yield return&apos; in an &apos;unsafe&apos; block.
        /// </summary>
        public static string ERR_BadYieldInUnsafe {
            get {
                return ResourceManager.GetString("ERR_BadYieldInUnsafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base class &apos;{0}&apos; must come before any interfaces.
        /// </summary>
        public static string ERR_BaseClassMustBeFirst {
            get {
                return ResourceManager.GetString("ERR_BaseClassMustBeFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{0}&apos; inherits conflicting constraints &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_BaseConstraintConflict {
            get {
                return ResourceManager.GetString("ERR_BaseConstraintConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of keyword &apos;base&apos; is not valid in this context.
        /// </summary>
        public static string ERR_BaseIllegal {
            get {
                return ResourceManager.GetString("ERR_BaseIllegal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;base&apos; is not available in the current context.
        /// </summary>
        public static string ERR_BaseInBadContext {
            get {
                return ResourceManager.GetString("ERR_BaseInBadContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;base&apos; is not available in a static method.
        /// </summary>
        public static string ERR_BaseInStaticMeth {
            get {
                return ResourceManager.GetString("ERR_BaseInStaticMeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a binary file instead of a text file.
        /// </summary>
        public static string ERR_BinaryFile {
            get {
                return ResourceManager.GetString("ERR_BinaryFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not supported by the language.
        /// </summary>
        public static string ERR_BindToBogus {
            get {
                return ResourceManager.GetString("ERR_BindToBogus", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property, indexer, or event &apos;{0}&apos; is not supported by the language; try directly calling accessor method &apos;{1}&apos;.
        /// </summary>
        public static string ERR_BindToBogusProp1 {
            get {
                return ResourceManager.GetString("ERR_BindToBogusProp1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property, indexer, or event &apos;{0}&apos; is not supported by the language; try directly calling accessor methods &apos;{1}&apos; or &apos;{2}&apos;.
        /// </summary>
        public static string ERR_BindToBogusProp2 {
            get {
                return ResourceManager.GetString("ERR_BindToBogusProp2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Block bodies and expression bodies cannot both be provided..
        /// </summary>
        public static string ERR_BlockBodyAndExpressionBody {
            get {
                return ResourceManager.GetString("ERR_BlockBodyAndExpressionBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement &apos;{1}&apos; because it is not supported by the language.
        /// </summary>
        public static string ERR_BogusExplicitImpl {
            get {
                return ResourceManager.GetString("ERR_BogusExplicitImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a type not supported by the language.
        /// </summary>
        public static string ERR_BogusType {
            get {
                return ResourceManager.GetString("ERR_BogusType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AsyncMethodBuilder attribute is disallowed on anonymous methods without an explicit return type..
        /// </summary>
        public static string ERR_BuilderAttributeDisallowed {
            get {
                return ResourceManager.GetString("ERR_BuilderAttributeDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A declaration of a by-reference variable must have an initializer.
        /// </summary>
        public static string ERR_ByReferenceVariableMustBeInitialized {
            get {
                return ResourceManager.GetString("ERR_ByReferenceVariableMustBeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a ref, in or out parameter.
        /// </summary>
        public static string ERR_ByRefParameterInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_ByRefParameterInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance of type &apos;{0}&apos; cannot be preserved across &apos;await&apos; or &apos;yield&apos; boundary..
        /// </summary>
        public static string ERR_ByRefTypeAndAwait {
            get {
                return ResourceManager.GetString("ERR_ByRefTypeAndAwait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This combination of arguments to &apos;{0}&apos; is disallowed because it may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string ERR_CallArgMixing {
            get {
                return ResourceManager.GetString("ERR_CallArgMixing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not directly call your base type Finalize method. It is called automatically from your destructor..
        /// </summary>
        public static string ERR_CallingBaseFinalizeDeprecated {
            get {
                return ResourceManager.GetString("ERR_CallingBaseFinalizeDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Destructors and object.Finalize cannot be called directly. Consider calling IDisposable.Dispose if available..
        /// </summary>
        public static string ERR_CallingFinalizeDeprecated {
            get {
                return ResourceManager.GetString("ERR_CallingFinalizeDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign to &apos;{0}&apos; because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CannotAssignToMethod {
            get {
                return ResourceManager.GetString("ERR_CannotAssignToMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input string cannot be converted into the equivalent UTF-8 byte representation. {0}.
        /// </summary>
        public static string ERR_CannotBeConvertedToUtf8 {
            get {
                return ResourceManager.GetString("ERR_CannotBeConvertedToUtf8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be made nullable..
        /// </summary>
        public static string ERR_CannotBeMadeNullable {
            get {
                return ResourceManager.GetString("ERR_CannotBeMadeNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receiver type &apos;{0}&apos; is not a valid record type and is not a struct type..
        /// </summary>
        public static string ERR_CannotClone {
            get {
                return ResourceManager.GetString("ERR_CannotClone", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert &amp;method group &apos;{0}&apos; to delegate type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_CannotConvertAddressOfToDelegate {
            get {
                return ResourceManager.GetString("ERR_CannotConvertAddressOfToDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert Array Index from &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_CannotConvertArrayIndexAccess {
            get {
                return ResourceManager.GetString("ERR_CannotConvertArrayIndexAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot deconstruct dynamic objects..
        /// </summary>
        public static string ERR_CannotDeconstructDynamic {
            get {
                return ResourceManager.GetString("ERR_CannotDeconstructDynamic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot perform a dynamic invocation on an expression with type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_CannotDynamicInvokeOnExpression {
            get {
                return ResourceManager.GetString("ERR_CannotDynamicInvokeOnExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /embed switch is only supported when emitting a PDB..
        /// </summary>
        public static string ERR_CannotEmbedWithoutPdb {
            get {
                return ResourceManager.GetString("ERR_CannotEmbedWithoutPdb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The delegate type could not be inferred..
        /// </summary>
        public static string ERR_CannotInferDelegateType {
            get {
                return ResourceManager.GetString("ERR_CannotInferDelegateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a numeric constant or relational pattern on &apos;{0}&apos; because it inherits from or extends &apos;INumberBase&lt;T&gt;&apos;. Consider using a type pattern to narrow to a specifc numeric type..
        /// </summary>
        public static string ERR_CannotMatchOnINumberBase {
            get {
                return ResourceManager.GetString("ERR_CannotMatchOnINumberBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot pass null for friend assembly name.
        /// </summary>
        public static string ERR_CannotPassNullForFriendAssembly {
            get {
                return ResourceManager.GetString("ERR_CannotPassNullForFriendAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;managed&apos; calling convention cannot be combined with unmanaged calling convention specifiers..
        /// </summary>
        public static string ERR_CannotSpecifyManagedWithUnmanagedSpecifiers {
            get {
                return ResourceManager.GetString("ERR_CannotSpecifyManagedWithUnmanagedSpecifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot take the address of an aliased expression..
        /// </summary>
        public static string ERR_CannotTakeAddressOfAliasedExpression {
            get {
                return ResourceManager.GetString("ERR_CannotTakeAddressOfAliasedExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In .Net you cannot take the address of a method or a function. For callback functions you need to use a delegate instead..
        /// </summary>
        public static string ERR_CannotTakeAddressOfFunctionOrMethod {
            get {
                return ResourceManager.GetString("ERR_CannotTakeAddressOfFunctionOrMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of a local declared in a fixed statement cannot be a function pointer type..
        /// </summary>
        public static string ERR_CannotUseFunctionPointerAsFixedLocal {
            get {
                return ResourceManager.GetString("ERR_CannotUseFunctionPointerAsFixedLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;{0}&apos; as a {1} type on a method attributed with &apos;UnmanagedCallersOnly&apos;..
        /// </summary>
        public static string ERR_CannotUseManagedTypeInUnmanagedCallersOnly {
            get {
                return ResourceManager.GetString("ERR_CannotUseManagedTypeInUnmanagedCallersOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use an extension method with a receiver as the target of a &apos;&amp;&apos; operator..
        /// </summary>
        public static string ERR_CannotUseReducedExtensionMethodInAddressOf {
            get {
                return ResourceManager.GetString("ERR_CannotUseReducedExtensionMethodInAddressOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;ref&apos;, &apos;in&apos;, or &apos;out&apos; in the signature of a method attributed with &apos;UnmanagedCallersOnly&apos;..
        /// </summary>
        public static string ERR_CannotUseRefInUnmanagedCallersOnly {
            get {
                return ResourceManager.GetString("ERR_CannotUseRefInUnmanagedCallersOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InterpolatedStringHandlerArgumentAttribute arguments cannot refer to the parameter the attribute is used on..
        /// </summary>
        public static string ERR_CannotUseSelfAsInterpolatedStringHandlerArgument {
            get {
                return ResourceManager.GetString("ERR_CannotUseSelfAsInterpolatedStringHandlerArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot explicitly call operator or accessor.
        /// </summary>
        public static string ERR_CantCallSpecialMethod {
            get {
                return ResourceManager.GetString("ERR_CantCallSpecialMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot implicitly convert between &apos;{0}&apos; and &apos;PTR&apos; in platform &apos;{1}&apos; because the size of &apos;PTR&apos; cannot be determined at compile time..
        /// </summary>
        public static string ERR_CantCastPtrInAnyCpu {
            get {
                return ResourceManager.GetString("ERR_CantCastPtrInAnyCpu", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot implicitly convert between &apos;{0}&apos; and &apos;PTR&apos; in platform &apos;{1}&apos; because the size of &apos;{0}&apos; does not match the size of &apos;PTR&apos; for the target platform..
        /// </summary>
        public static string ERR_CantCastPtrInPlatform {
            get {
                return ResourceManager.GetString("ERR_CantCastPtrInPlatform", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot change access modifiers when overriding &apos;{1}&apos; inherited member &apos;{2}&apos;.
        /// </summary>
        public static string ERR_CantChangeAccessOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeAccessOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must match by init-only of overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantChangeInitOnlyOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeInitOnlyOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must match by reference return of overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantChangeRefReturnOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeRefReturnOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: return type must be &apos;{2}&apos; to match overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantChangeReturnTypeOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeReturnTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot change tuple element names when overriding inherited member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantChangeTupleNamesOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeTupleNamesOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: type must be &apos;{2}&apos; to match overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantChangeTypeOnOverride {
            get {
                return ResourceManager.GetString("ERR_CantChangeTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert anonymous method block without a parameter list to delegate type &apos;{0}&apos; because it has one or more out parameters.
        /// </summary>
        public static string ERR_CantConvAnonMethNoParams {
            get {
                return ResourceManager.GetString("ERR_CantConvAnonMethNoParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert {0} to type &apos;{1}&apos; because the parameter types do not match the delegate parameter types.
        /// </summary>
        public static string ERR_CantConvAnonMethParams {
            get {
                return ResourceManager.GetString("ERR_CantConvAnonMethParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert {0} to intended delegate type because some of the return types in the block are not implicitly convertible to the delegate return type.
        /// </summary>
        public static string ERR_CantConvAnonMethReturns {
            get {
                return ResourceManager.GetString("ERR_CantConvAnonMethReturns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert {0} to type &apos;{1}&apos; because the return type does not match the delegate return type.
        /// </summary>
        public static string ERR_CantConvAnonMethReturnType {
            get {
                return ResourceManager.GetString("ERR_CantConvAnonMethReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert async {0} to delegate type &apos;{1}&apos;. An async {0} may return void, Task or Task&lt;T&gt;, none of which are convertible to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_CantConvAsyncAnonFuncReturns {
            get {
                return ResourceManager.GetString("ERR_CantConvAsyncAnonFuncReturns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot derive from sealed type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantDeriveFromSealedType {
            get {
                return ResourceManager.GetString("ERR_CantDeriveFromSealedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicting options specified: Win32 resource file; Win32 icon.
        /// </summary>
        public static string ERR_CantHaveWin32ResAndIcon {
            get {
                return ResourceManager.GetString("ERR_CantHaveWin32ResAndIcon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicting options specified: Win32 resource file; Win32 manifest.
        /// </summary>
        public static string ERR_CantHaveWin32ResAndManifest {
            get {
                return ResourceManager.GetString("ERR_CantHaveWin32ResAndManifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type arguments for method &apos;{0}&apos; cannot be inferred from the usage. Try specifying the type arguments explicitly..
        /// </summary>
        public static string ERR_CantInferMethTypeArgs {
            get {
                return ResourceManager.GetString("ERR_CantInferMethTypeArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create temporary file -- {0}.
        /// </summary>
        public static string ERR_CantMakeTempFile {
            get {
                return ResourceManager.GetString("ERR_CantMakeTempFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot open &apos;{0}&apos; for writing -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantOpenFileWrite {
            get {
                return ResourceManager.GetString("ERR_CantOpenFileWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening icon file {0} -- {1}.
        /// </summary>
        public static string ERR_CantOpenIcon {
            get {
                return ResourceManager.GetString("ERR_CantOpenIcon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening Win32 manifest file {0} -- {1}.
        /// </summary>
        public static string ERR_CantOpenWin32Manifest {
            get {
                return ResourceManager.GetString("ERR_CantOpenWin32Manifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening Win32 resource file &apos;{0}&apos; -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantOpenWin32Res {
            get {
                return ResourceManager.GetString("ERR_CantOpenWin32Res", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override &apos;{1}&apos; because it is not supported by the language.
        /// </summary>
        public static string ERR_CantOverrideBogusMethod {
            get {
                return ResourceManager.GetString("ERR_CantOverrideBogusMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override; &apos;{1}&apos; is not an event.
        /// </summary>
        public static string ERR_CantOverrideNonEvent {
            get {
                return ResourceManager.GetString("ERR_CantOverrideNonEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override because &apos;{1}&apos; is not a function.
        /// </summary>
        public static string ERR_CantOverrideNonFunction {
            get {
                return ResourceManager.GetString("ERR_CantOverrideNonFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override because &apos;{1}&apos; is not a property.
        /// </summary>
        public static string ERR_CantOverrideNonProperty {
            get {
                return ResourceManager.GetString("ERR_CantOverrideNonProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override inherited member &apos;{1}&apos; because it is not marked virtual, abstract, or override.
        /// </summary>
        public static string ERR_CantOverrideNonVirtual {
            get {
                return ResourceManager.GetString("ERR_CantOverrideNonVirtual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override inherited member &apos;{1}&apos; because it is sealed.
        /// </summary>
        public static string ERR_CantOverrideSealed {
            get {
                return ResourceManager.GetString("ERR_CantOverrideSealed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot read config file &apos;{0}&apos; -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantReadConfigFile {
            get {
                return ResourceManager.GetString("ERR_CantReadConfigFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading resource &apos;{0}&apos; -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantReadResource {
            get {
                return ResourceManager.GetString("ERR_CantReadResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading ruleset file {0} - {1}.
        /// </summary>
        public static string ERR_CantReadRulesetFile {
            get {
                return ResourceManager.GetString("ERR_CantReadRulesetFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot link resource files when building a module.
        /// </summary>
        public static string ERR_CantRefResource {
            get {
                return ResourceManager.GetString("ERR_CantRefResource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return an expression of type &apos;void&apos;.
        /// </summary>
        public static string ERR_CantReturnVoid {
            get {
                return ResourceManager.GetString("ERR_CantReturnVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading Win32 manifest file &apos;{0}&apos; -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CantSetWin32Manifest {
            get {
                return ResourceManager.GetString("ERR_CantSetWin32Manifest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to __arglist cannot have an argument passed by &apos;in&apos; or &apos;out&apos;.
        /// </summary>
        public static string ERR_CantUseInOrOutInArglist {
            get {
                return ResourceManager.GetString("ERR_CantUseInOrOutInArglist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The RequiredAttribute attribute is not permitted on C# types.
        /// </summary>
        public static string ERR_CantUseRequiredAttribute {
            get {
                return ResourceManager.GetString("ERR_CantUseRequiredAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to __arglist cannot have an argument of void type.
        /// </summary>
        public static string ERR_CantUseVoidInArglist {
            get {
                return ResourceManager.GetString("ERR_CantUseVoidInArglist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base class &apos;{0}&apos; declares a {1} &apos;{2}&apos; that differs from this {1} &apos;{3}&apos; only in case..
        /// </summary>
        public static string ERR_CaseDifference {
            get {
                return ResourceManager.GetString("ERR_CaseDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This constructor must add &apos;SetsRequiredMembers&apos; because it chains to a constructor that has that attribute..
        /// </summary>
        public static string ERR_ChainingToSetsRequiredMembersRequiresSetsRequiredMembers {
            get {
                return ResourceManager.GetString("ERR_ChainingToSetsRequiredMembersRequiresSetsRequiredMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operator &apos;{0}&apos; requires a matching non-checked version of the operator to also be defined.
        /// </summary>
        public static string ERR_CheckedOperatorNeedsMatch {
            get {
                return ResourceManager.GetString("ERR_CheckedOperatorNeedsMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation overflows at compile time in checked mode.
        /// </summary>
        public static string ERR_CheckedOverflow {
            get {
                return ResourceManager.GetString("ERR_CheckedOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The evaluation of the constant value for &apos;{0}&apos; involves a circular definition.
        /// </summary>
        public static string ERR_CircConstValue {
            get {
                return ResourceManager.GetString("ERR_CircConstValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circular base type dependency involving &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CircularBase {
            get {
                return ResourceManager.GetString("ERR_CircularBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Circular constraint dependency involving &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_CircularConstraint {
            get {
                return ResourceManager.GetString("ERR_CircularConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class type constraint &apos;{0}&apos; must come before any other constraints.
        /// </summary>
        public static string ERR_ClassBoundNotFirst {
            get {
                return ResourceManager.GetString("ERR_ClassBoundNotFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: containing type does not implement interface &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ClassDoesntImplementInterface {
            get {
                return ResourceManager.GetString("ERR_ClassDoesntImplementInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot allow ref structs for a type parameter known from other constraints to be a class.
        /// </summary>
        public static string ERR_ClassIsCombinedWithRefStruct {
            get {
                return ResourceManager.GetString("ERR_ClassIsCombinedWithRefStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object, string, or class type expected.
        /// </summary>
        public static string ERR_ClassTypeExpected {
            get {
                return ResourceManager.GetString("ERR_ClassTypeExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override of virtual method &apos;{0}&apos; in child class has STRICT calling convention but overridden method in parent class is CLIPPER..
        /// </summary>
        public static string ERR_ClipperInParentClass {
            get {
                return ResourceManager.GetString("ERR_ClipperInParentClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Override of virtual method &apos;{0}&apos; in child class has CLIPPER calling convention but overridden method in parent class is STRICT..
        /// </summary>
        public static string ERR_ClipperInSubClass {
            get {
                return ResourceManager.GetString("ERR_ClipperInSubClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot have an overloaded method &apos;{1}&apos; because one of the overloads has the CLIPPER calling convention..
        /// </summary>
        public static string ERR_ClipperOverloaded {
            get {
                return ResourceManager.GetString("ERR_ClipperOverloaded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members named &apos;Clone&apos; are disallowed in records..
        /// </summary>
        public static string ERR_CloneDisallowedInRecord {
            get {
                return ResourceManager.GetString("ERR_CloneDisallowedInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ) expected.
        /// </summary>
        public static string ERR_CloseParenExpected {
            get {
                return ResourceManager.GetString("ERR_CloseParenExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement an interface member because it is not public..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberNotPublic {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberNotPublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement static interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement the interface member because it is not static..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberNotStatic {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberNotStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement instance interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement the interface member because it is static..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberStatic {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement &apos;{1}&apos;..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberWrongInitOnly {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberWrongInitOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement &apos;{1}&apos; because it does not have matching return by reference..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberWrongRefReturn {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberWrongRefReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implement &apos;{1}&apos; because it does not have the matching return type of &apos;{3}&apos;..
        /// </summary>
        public static string ERR_CloseUnimplementedInterfaceMemberWrongReturnType {
            get {
                return ResourceManager.GetString("ERR_CloseUnimplementedInterfaceMemberWrongReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; given in a source file conflicts with option &apos;{1}&apos;..
        /// </summary>
        public static string ERR_CmdOptionConflictsSource {
            get {
                return ResourceManager.GetString("ERR_CmdOptionConflictsSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Codeblocks cannot be declared with the Lambda Expression Syntax..
        /// </summary>
        public static string ERR_CodeblockWithLambdaSyntax {
            get {
                return ResourceManager.GetString("ERR_CodeblockWithLambdaSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typed parameters in codeblocks are not supported by the runtime..
        /// </summary>
        public static string ERR_CodeBlockWithTypeParameters {
            get {
                return ResourceManager.GetString("ERR_CodeBlockWithTypeParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use alias &apos;{0}&apos; with &apos;::&apos; since the alias references a type. Use &apos;.&apos; instead..
        /// </summary>
        public static string ERR_ColColWithTypeAlias {
            get {
                return ResourceManager.GetString("ERR_ColColWithTypeAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CollectionBuilderAttribute method name is invalid..
        /// </summary>
        public static string ERR_CollectionBuilderAttributeInvalidMethodName {
            get {
                return ResourceManager.GetString("ERR_CollectionBuilderAttributeInvalidMethodName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CollectionBuilderAttribute builder type must be a non-generic class or struct..
        /// </summary>
        public static string ERR_CollectionBuilderAttributeInvalidType {
            get {
                return ResourceManager.GetString("ERR_CollectionBuilderAttributeInvalidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an accessible &apos;{0}&apos; method with the expected signature: a static method with a single parameter of type &apos;ReadOnlySpan&lt;{1}&gt;&apos; and return type &apos;{2}&apos;..
        /// </summary>
        public static string ERR_CollectionBuilderAttributeMethodNotFound {
            get {
                return ResourceManager.GetString("ERR_CollectionBuilderAttributeMethodNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has a CollectionBuilderAttribute but no element type..
        /// </summary>
        public static string ERR_CollectionBuilderNoElementType {
            get {
                return ResourceManager.GetString("ERR_CollectionBuilderNoElementType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A collection expression of type &apos;{0}&apos; cannot be used in this context because it may be exposed outside of the current scope..
        /// </summary>
        public static string ERR_CollectionExpressionEscape {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This version of &apos;{0}&apos; cannot be used with collection expressions..
        /// </summary>
        public static string ERR_CollectionExpressionImmutableArray {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionImmutableArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression type &apos;{0}&apos; must have an instance or extension method &apos;Add&apos; that can be called with a single argument..
        /// </summary>
        public static string ERR_CollectionExpressionMissingAdd {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionMissingAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression type must have an applicable constructor that can be called with no arguments..
        /// </summary>
        public static string ERR_CollectionExpressionMissingConstructor {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionMissingConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no target type for the collection expression..
        /// </summary>
        public static string ERR_CollectionExpressionNoTargetType {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionNoTargetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression target &apos;{0}&apos; has no element type..
        /// </summary>
        public static string ERR_CollectionExpressionTargetNoElementType {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionTargetNoElementType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot initialize type &apos;{0}&apos; with a collection expression because the type is not constructible..
        /// </summary>
        public static string ERR_CollectionExpressionTargetTypeNotConstructible {
            get {
                return ResourceManager.GetString("ERR_CollectionExpressionTargetTypeNotConstructible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot initialize type &apos;{0}&apos; with a collection initializer because it does not implement &apos;System.Collections.IEnumerable&apos;.
        /// </summary>
        public static string ERR_CollectionInitRequiresIEnumerable {
            get {
                return ResourceManager.GetString("ERR_CollectionInitRequiresIEnumerable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t access the static member &apos;{0}&apos; with the {1} operator &apos;{2}&apos;..
        /// </summary>
        public static string ERR_ColonForStaticMember {
            get {
                return ResourceManager.GetString("ERR_ColonForStaticMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t use the COLON operator &apos;:&apos; as delimiter in the {0} &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ColonForTypeOrNs {
            get {
                return ResourceManager.GetString("ERR_ColonForTypeOrNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a class with the ComImport attribute cannot specify a base class.
        /// </summary>
        public static string ERR_ComImportWithBase {
            get {
                return ResourceManager.GetString("ERR_ComImportWithBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since &apos;{1}&apos; has the ComImport attribute, &apos;{0}&apos; must be extern or abstract.
        /// </summary>
        public static string ERR_ComImportWithImpl {
            get {
                return ResourceManager.GetString("ERR_ComImportWithImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a class with the ComImport attribute cannot specify field initializers..
        /// </summary>
        public static string ERR_ComImportWithInitializers {
            get {
                return ResourceManager.GetString("ERR_ComImportWithInitializers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Guid attribute must be specified with the ComImport attribute.
        /// </summary>
        public static string ERR_ComImportWithoutUuidAttribute {
            get {
                return ResourceManager.GetString("ERR_ComImportWithoutUuidAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A class with the ComImport attribute cannot have a user-defined constructor.
        /// </summary>
        public static string ERR_ComImportWithUserCtor {
            get {
                return ResourceManager.GetString("ERR_ComImportWithUserCtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation cancelled by user.
        /// </summary>
        public static string ERR_CompileCancelled {
            get {
                return ResourceManager.GetString("ERR_CompileCancelled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiler version: &apos;{0}&apos;. Language version: {1}..
        /// </summary>
        public static string ERR_CompilerAndLanguageVersion {
            get {
                return ResourceManager.GetString("ERR_CompilerAndLanguageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiler option &apos;{0}&apos; ({1}) is not supported for dialect {2}.
        /// </summary>
        public static string ERR_CompilerOptionNotSupportedForDialect {
            get {
                return ResourceManager.GetString("ERR_CompilerOptionNotSupportedForDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a COM call with ref omitted on arguments.
        /// </summary>
        public static string ERR_ComRefCallInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_ComRefCallInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must declare a body because it is not marked abstract, extern, or partial.
        /// </summary>
        public static string ERR_ConcreteMissingBody {
            get {
                return ResourceManager.GetString("ERR_ConcreteMissingBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conditional expression cannot be used directly in a string interpolation because the &apos;:&apos; ends the interpolation. Parenthesize the conditional expression..
        /// </summary>
        public static string ERR_ConditionalInInterpolation {
            get {
                return ResourceManager.GetString("ERR_ConditionalInInterpolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Conditional attribute is not valid on &apos;{0}&apos; because its return type is not void.
        /// </summary>
        public static string ERR_ConditionalMustReturnVoid {
            get {
                return ResourceManager.GetString("ERR_ConditionalMustReturnVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Conditional attribute is not valid on interface members.
        /// </summary>
        public static string ERR_ConditionalOnInterfaceMethod {
            get {
                return ResourceManager.GetString("ERR_ConditionalOnInterfaceMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function &apos;{0}&apos; must be &apos;static&apos; in order to use the Conditional attribute.
        /// </summary>
        public static string ERR_ConditionalOnLocalFunction {
            get {
                return ResourceManager.GetString("ERR_ConditionalOnLocalFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is only valid on methods or attribute classes.
        /// </summary>
        public static string ERR_ConditionalOnNonAttributeClass {
            get {
                return ResourceManager.GetString("ERR_ConditionalOnNonAttributeClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Conditional attribute is not valid on &apos;{0}&apos; because it is an override method.
        /// </summary>
        public static string ERR_ConditionalOnOverride {
            get {
                return ResourceManager.GetString("ERR_ConditionalOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Conditional attribute is not valid on &apos;{0}&apos; because it is a constructor, destructor, operator, lambda expression, or explicit interface implementation.
        /// </summary>
        public static string ERR_ConditionalOnSpecialMethod {
            get {
                return ResourceManager.GetString("ERR_ConditionalOnSpecialMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional member &apos;{0}&apos; cannot have an out parameter.
        /// </summary>
        public static string ERR_ConditionalWithOutParam {
            get {
                return ResourceManager.GetString("ERR_ConditionalWithOutParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace &apos;{1}&apos; contains a definition conflicting with alias &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ConflictAliasAndMember {
            get {
                return ResourceManager.GetString("ERR_ConflictAliasAndMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alias &apos;{0}&apos; conflicts with {1} definition.
        /// </summary>
        public static string ERR_ConflictingAliasAndDefinition {
            get {
                return ResourceManager.GetString("ERR_ConflictingAliasAndDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conflicting commandline options &apos;{0}&apos; and &apos;{1}&apos; are not allowed (both are internally mapped to /checked).
        /// </summary>
        public static string ERR_ConflictingCommandLineOptions {
            get {
                return ResourceManager.GetString("ERR_ConflictingCommandLineOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly and module &apos;{0}&apos; cannot target different processors..
        /// </summary>
        public static string ERR_ConflictingMachineModule {
            get {
                return ResourceManager.GetString("ERR_ConflictingMachineModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A constant value is expected.
        /// </summary>
        public static string ERR_ConstantExpected {
            get {
                return ResourceManager.GetString("ERR_ConstantExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; cannot be handled by a pattern of type &apos;{1}&apos;. Please use language version &apos;{2}&apos; or greater to match an open type with a constant pattern..
        /// </summary>
        public static string ERR_ConstantPatternVsOpenType {
            get {
                return ResourceManager.GetString("ERR_ConstantPatternVsOpenType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Length of String constant resulting from concatenation exceeds System.Int32.MaxValue.  Try splitting the string into multiple constants..
        /// </summary>
        public static string ERR_ConstantStringTooLong {
            get {
                return ResourceManager.GetString("ERR_ConstantStringTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A constant value of type &apos;{0}&apos; is expected.
        /// </summary>
        public static string ERR_ConstantValueOfTypeExpected {
            get {
                return ResourceManager.GetString("ERR_ConstantValueOfTypeExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constant value &apos;{0}&apos; cannot be converted to a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ConstOutOfRange {
            get {
                return ResourceManager.GetString("ERR_ConstOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constant value &apos;{0}&apos; cannot be converted to a &apos;{1}&apos; (use &apos;unchecked&apos; syntax to override).
        /// </summary>
        public static string ERR_ConstOutOfRangeChecked {
            get {
                return ResourceManager.GetString("ERR_ConstOutOfRangeChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static classes cannot be used as constraints.
        /// </summary>
        public static string ERR_ConstraintIsStaticClass {
            get {
                return ResourceManager.GetString("ERR_ConstraintIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraints are not allowed on non-generic declarations.
        /// </summary>
        public static string ERR_ConstraintOnlyAllowedOnGenericDecl {
            get {
                return ResourceManager.GetString("ERR_ConstraintOnlyAllowedOnGenericDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint cannot be a dynamic type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ConstructedDynamicTypeAsBound {
            get {
                return ResourceManager.GetString("ERR_ConstructedDynamicTypeAsBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static classes cannot have instance constructors.
        /// </summary>
        public static string ERR_ConstructorInStaticClass {
            get {
                return ResourceManager.GetString("ERR_ConstructorInStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A const field requires a value to be provided.
        /// </summary>
        public static string ERR_ConstValueRequired {
            get {
                return ResourceManager.GetString("ERR_ConstValueRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined conversion must convert to or from the enclosing type.
        /// </summary>
        public static string ERR_ConversionNotInvolvingContainedType {
            get {
                return ResourceManager.GetString("ERR_ConversionNotInvolvingContainedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple with {0} elements cannot be converted to type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_ConversionNotTupleCompatible {
            get {
                return ResourceManager.GetString("ERR_ConversionNotTupleCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: user-defined conversions to or from a base type are not allowed.
        /// </summary>
        public static string ERR_ConversionWithBase {
            get {
                return ResourceManager.GetString("ERR_ConversionWithBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: user-defined conversions to or from a derived type are not allowed.
        /// </summary>
        public static string ERR_ConversionWithDerived {
            get {
                return ResourceManager.GetString("ERR_ConversionWithDerived", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: user-defined conversions to or from an interface are not allowed.
        /// </summary>
        public static string ERR_ConversionWithInterface {
            get {
                return ResourceManager.GetString("ERR_ConversionWithInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert to static type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ConvertToStaticClass {
            get {
                return ResourceManager.GetString("ERR_ConvertToStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{1}&apos; has the &apos;unmanaged&apos; constraint so &apos;{1}&apos; cannot be used as a constraint for &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ConWithUnmanagedCon {
            get {
                return ResourceManager.GetString("ERR_ConWithUnmanagedCon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{1}&apos; has the &apos;struct&apos; constraint so &apos;{1}&apos; cannot be used as a constraint for &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ConWithValCon {
            get {
                return ResourceManager.GetString("ERR_ConWithValCon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A copy constructor in a record must call a copy constructor of the base, or a parameterless object constructor if the record inherits from object..
        /// </summary>
        public static string ERR_CopyConstructorMustInvokeBaseCopyConstructor {
            get {
                return ResourceManager.GetString("ERR_CopyConstructorMustInvokeBaseCopyConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A copy constructor &apos;{0}&apos; must be public or protected because the record is not sealed..
        /// </summary>
        public static string ERR_CopyConstructorWrongAccessibility {
            get {
                return ResourceManager.GetString("ERR_CopyConstructorWrongAccessibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cryptographic failure while creating hashes..
        /// </summary>
        public static string ERR_CryptoHashFailed {
            get {
                return ResourceManager.GetString("ERR_CryptoHashFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bad array declarator: To declare a managed array the rank specifier precedes the variable&apos;s identifier. To declare a fixed size buffer field, use the fixed keyword before the field type..
        /// </summary>
        public static string ERR_CStyleArray {
            get {
                return ResourceManager.GetString("ERR_CStyleArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CURRENCY Type requires a reference to the X# runtime and is not supported by the Vulcan runtime..
        /// </summary>
        public static string ERR_CurrencyTypeNotSupported {
            get {
                return ResourceManager.GetString("ERR_CurrencyTypeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inherited interface &apos;{1}&apos; causes a cycle in the interface hierarchy of &apos;{0}&apos;.
        /// </summary>
        public static string ERR_CycleInInterfaceInheritance {
            get {
                return ResourceManager.GetString("ERR_CycleInInterfaceInheritance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type forwarder for type &apos;{0}&apos; in assembly &apos;{1}&apos; causes a cycle.
        /// </summary>
        public static string ERR_CycleInTypeForwarder {
            get {
                return ResourceManager.GetString("ERR_CycleInTypeForwarder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Debug entry point must be a definition of a method declared in the current compilation..
        /// </summary>
        public static string ERR_DebugEntryPointNotSourceMethodDefinition {
            get {
                return ResourceManager.GetString("ERR_DebugEntryPointNotSourceMethodDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Evaluation of the decimal constant expression failed.
        /// </summary>
        public static string ERR_DecConstError {
            get {
                return ResourceManager.GetString("ERR_DecConstError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A declaration is not allowed in this context..
        /// </summary>
        public static string ERR_DeclarationExpressionNotPermitted {
            get {
                return ResourceManager.GetString("ERR_DeclarationExpressionNotPermitted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deconstruction &apos;var (...)&apos; form disallows a specific type for &apos;var&apos;..
        /// </summary>
        public static string ERR_DeconstructionVarFormDisallowsSpecificType {
            get {
                return ResourceManager.GetString("ERR_DeconstructionVarFormDisallowsSpecificType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; does not match the corresponding &apos;Deconstruct&apos; parameter &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DeconstructParameterNameMismatch {
            get {
                return ResourceManager.GetString("ERR_DeconstructParameterNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deconstruct assignment requires an expression with a type on the right-hand-side..
        /// </summary>
        public static string ERR_DeconstructRequiresExpression {
            get {
                return ResourceManager.GetString("ERR_DeconstructRequiresExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deconstruction must contain at least two variables..
        /// </summary>
        public static string ERR_DeconstructTooFewElements {
            get {
                return ResourceManager.GetString("ERR_DeconstructTooFewElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A deconstruction variable cannot be declared as a ref local.
        /// </summary>
        public static string ERR_DeconstructVariableCannotBeByRef {
            get {
                return ResourceManager.GetString("ERR_DeconstructVariableCannotBeByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot deconstruct a tuple of &apos;{0}&apos; elements into &apos;{1}&apos; variables..
        /// </summary>
        public static string ERR_DeconstructWrongCardinality {
            get {
                return ResourceManager.GetString("ERR_DeconstructWrongCardinality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;default&apos; constraint is valid on override and explicit interface implementation methods only..
        /// </summary>
        public static string ERR_DefaultConstraintOverrideOnly {
            get {
                return ResourceManager.GetString("ERR_DefaultConstraintOverrideOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be embedded because it has a non-abstract member. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_DefaultInterfaceImplementationInNoPIAType {
            get {
                return ResourceManager.GetString("ERR_DefaultInterfaceImplementationInNoPIAType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no target type for the default literal..
        /// </summary>
        public static string ERR_DefaultLiteralNoTargetType {
            get {
                return ResourceManager.GetString("ERR_DefaultLiteralNoTargetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of default literal is not valid in this context.
        /// </summary>
        public static string ERR_DefaultLiteralNotValid {
            get {
                return ResourceManager.GetString("ERR_DefaultLiteralNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify the DefaultMember attribute on a type containing an indexer.
        /// </summary>
        public static string ERR_DefaultMemberOnIndexedType {
            get {
                return ResourceManager.GetString("ERR_DefaultMemberOnIndexedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameters with CLIPPER calling convention cannot have default values..
        /// </summary>
        public static string ERR_DefaultParameterValueWithClipperCallingConvention {
            get {
                return ResourceManager.GetString("ERR_DefaultParameterValueWithClipperCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A default literal &apos;default&apos; is not valid as a pattern. Use another literal (e.g. &apos;0&apos; or &apos;null&apos;) as appropriate. To match everything, use a discard pattern &apos;_&apos;..
        /// </summary>
        public static string ERR_DefaultPattern {
            get {
                return ResourceManager.GetString("ERR_DefaultPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument of type &apos;{0}&apos; is not applicable for the DefaultParameterValue attribute.
        /// </summary>
        public static string ERR_DefaultValueBadValueType {
            get {
                return ResourceManager.GetString("ERR_DefaultValueBadValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Optional parameters must appear after all required parameters.
        /// </summary>
        public static string ERR_DefaultValueBeforeRequiredValue {
            get {
                return ResourceManager.GetString("ERR_DefaultValueBeforeRequiredValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify a default value for the &apos;this&apos; parameter.
        /// </summary>
        public static string ERR_DefaultValueForExtensionParameter {
            get {
                return ResourceManager.GetString("ERR_DefaultValueForExtensionParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify a default value for a parameter collection.
        /// </summary>
        public static string ERR_DefaultValueForParamsParameter {
            get {
                return ResourceManager.GetString("ERR_DefaultValueForParamsParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default parameter value for &apos;{0}&apos; must be a compile-time constant.
        /// </summary>
        public static string ERR_DefaultValueMustBeConstant {
            get {
                return ResourceManager.GetString("ERR_DefaultValueMustBeConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Default values are not valid in this context..
        /// </summary>
        public static string ERR_DefaultValueNotAllowed {
            get {
                return ResourceManager.GetString("ERR_DefaultValueNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the argument to the DefaultParameterValue attribute must match the parameter type.
        /// </summary>
        public static string ERR_DefaultValueTypeMustMatch {
            get {
                return ResourceManager.GetString("ERR_DefaultValueTypeMustMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify default parameter value in conjunction with DefaultParameterAttribute or OptionalAttribute.
        /// </summary>
        public static string ERR_DefaultValueUsedWithAttributes {
            get {
                return ResourceManager.GetString("ERR_DefaultValueUsedWithAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The error is most likely related to the token &apos;{0}&apos; that was used at this location..
        /// </summary>
        public static string ERR_DefineIncorrectValue {
            get {
                return ResourceManager.GetString("ERR_DefineIncorrectValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create delegate with &apos;{0}&apos; because it or a method it overrides has a Conditional attribute.
        /// </summary>
        public static string ERR_DelegateOnConditional {
            get {
                return ResourceManager.GetString("ERR_DelegateOnConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot bind delegate to &apos;{0}&apos; because it is a member of &apos;System.Nullable&lt;T&gt;&apos;.
        /// </summary>
        public static string ERR_DelegateOnNullable {
            get {
                return ResourceManager.GetString("ERR_DelegateOnNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ref mismatch between &apos;{0}&apos; and delegate &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DelegateRefMismatch {
            get {
                return ResourceManager.GetString("ERR_DelegateRefMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method &apos;{0}&apos; for the collection initializer element is obsolete. {1}.
        /// </summary>
        public static string ERR_DeprecatedCollectionInitAddStr {
            get {
                return ResourceManager.GetString("ERR_DeprecatedCollectionInitAddStr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is obsolete: &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DeprecatedSymbolStr {
            get {
                return ResourceManager.GetString("ERR_DeprecatedSymbolStr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot implement a dynamic interface &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DeriveFromConstructedDynamic {
            get {
                return ResourceManager.GetString("ERR_DeriveFromConstructedDynamic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot derive from the dynamic type.
        /// </summary>
        public static string ERR_DeriveFromDynamic {
            get {
                return ResourceManager.GetString("ERR_DeriveFromDynamic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot derive from special class &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DeriveFromEnumOrValueType {
            get {
                return ResourceManager.GetString("ERR_DeriveFromEnumOrValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot derive from &apos;{0}&apos; because it is a type parameter.
        /// </summary>
        public static string ERR_DerivingFromATyVar {
            get {
                return ResourceManager.GetString("ERR_DerivingFromATyVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A variable may not be declared within a &apos;not&apos; or &apos;or&apos; pattern..
        /// </summary>
        public static string ERR_DesignatorBeneathPatternCombinator {
            get {
                return ResourceManager.GetString("ERR_DesignatorBeneathPatternCombinator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static classes cannot contain destructors.
        /// </summary>
        public static string ERR_DestructorInStaticClass {
            get {
                return ResourceManager.GetString("ERR_DestructorInStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dialect &apos;{0}&apos; requires a reference to the runtime DLLs {1}..
        /// </summary>
        public static string ERR_DialectRequiresReferenceToRuntime {
            get {
                return ResourceManager.GetString("ERR_DialectRequiresReferenceToRuntime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a dictionary initializer..
        /// </summary>
        public static string ERR_DictionaryInitializerInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_DictionaryInitializerInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The discard pattern is not permitted as a case label in a switch statement. Use &apos;case var _:&apos; for a discard pattern, or &apos;case @_:&apos; for a constant named &apos;_&apos;..
        /// </summary>
        public static string ERR_DiscardPatternInSwitchStatement {
            get {
                return ResourceManager.GetString("ERR_DiscardPatternInSwitchStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot infer the type of implicitly-typed discard..
        /// </summary>
        public static string ERR_DiscardTypeInferenceFailed {
            get {
                return ResourceManager.GetString("ERR_DiscardTypeInferenceFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DllImport attribute cannot be applied to a method that is generic or contained in a generic method or type..
        /// </summary>
        public static string ERR_DllImportOnGenericMethod {
            get {
                return ResourceManager.GetString("ERR_DllImportOnGenericMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The DllImport attribute must be specified on a method marked &apos;static&apos; and &apos;extern&apos;.
        /// </summary>
        public static string ERR_DllImportOnInvalidMethod {
            get {
                return ResourceManager.GetString("ERR_DllImportOnInvalidMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The _DLL syntax for Methods, Accesses and Assigns is not supported and not needed in .Net. You should add a reference to the assembly..
        /// </summary>
        public static string ERR_DLLMethodNotSupported {
            get {
                return ResourceManager.GetString("ERR_DLLMethodNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error writing to XML documentation file: {0}.
        /// </summary>
        public static string ERR_DocFileGen {
            get {
                return ResourceManager.GetString("ERR_DocFileGen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not override expected property from &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DoesNotOverrideBaseEqualityContract {
            get {
                return ResourceManager.GetString("ERR_DoesNotOverrideBaseEqualityContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not override expected method from &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DoesNotOverrideBaseMethod {
            get {
                return ResourceManager.GetString("ERR_DoesNotOverrideBaseMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not override expected method from &apos;object&apos;..
        /// </summary>
        public static string ERR_DoesNotOverrideMethodFromObject {
            get {
                return ResourceManager.GetString("ERR_DoesNotOverrideMethodFromObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DoesntImplementAwaitInterface {
            get {
                return ResourceManager.GetString("ERR_DoesntImplementAwaitInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.FixedBuffer&apos; attribute. Use the &apos;fixed&apos; field modifier instead..
        /// </summary>
        public static string ERR_DoNotUseFixedBufferAttr {
            get {
                return ResourceManager.GetString("ERR_DoNotUseFixedBufferAttr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.FixedBuffer&apos; attribute on a property.
        /// </summary>
        public static string ERR_DoNotUseFixedBufferAttrOnProperty {
            get {
                return ResourceManager.GetString("ERR_DoNotUseFixedBufferAttrOnProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Can&apos;t access the instance member &apos;{0}&apos; with the {1} operator &apos;{2}&apos;..
        /// </summary>
        public static string ERR_DotForInstanceMember {
            get {
                return ResourceManager.GetString("ERR_DotForInstanceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; does not exist in the type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DottedTypeNameNotFoundInAgg {
            get {
                return ResourceManager.GetString("ERR_DottedTypeNameNotFoundInAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type or namespace name &apos;{0}&apos; does not exist in the namespace &apos;{1}&apos; (are you missing an assembly reference?).
        /// </summary>
        public static string ERR_DottedTypeNameNotFoundInNS {
            get {
                return ResourceManager.GetString("ERR_DottedTypeNameNotFoundInNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; could not be found in the namespace &apos;{1}&apos;. This type has been forwarded to assembly &apos;{2}&apos; Consider adding a reference to that assembly..
        /// </summary>
        public static string ERR_DottedTypeNameNotFoundInNSFwd {
            get {
                return ResourceManager.GetString("ERR_DottedTypeNameNotFoundInNSFwd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property accessor already defined.
        /// </summary>
        public static string ERR_DuplicateAccessor {
            get {
                return ResourceManager.GetString("ERR_DuplicateAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The using alias &apos;{0}&apos; appeared previously in this namespace.
        /// </summary>
        public static string ERR_DuplicateAlias {
            get {
                return ResourceManager.GetString("ERR_DuplicateAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate &apos;{0}&apos; attribute.
        /// </summary>
        public static string ERR_DuplicateAttribute {
            get {
                return ResourceManager.GetString("ERR_DuplicateAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate &apos;{0}&apos; attribute in &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DuplicateAttributeInNetModule {
            get {
                return ResourceManager.GetString("ERR_DuplicateAttributeInNetModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate constraint &apos;{0}&apos; for type parameter &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DuplicateBound {
            get {
                return ResourceManager.GetString("ERR_DuplicateBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch statement contains multiple cases with the label value &apos;{0}&apos;.
        /// </summary>
        public static string ERR_DuplicateCaseLabel {
            get {
                return ResourceManager.GetString("ERR_DuplicateCaseLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A constraint clause has already been specified for type parameter &apos;{0}&apos;. All of the constraints for a type parameter must be specified in a single where clause..
        /// </summary>
        public static string ERR_DuplicateConstraintClause {
            get {
                return ResourceManager.GetString("ERR_DuplicateConstraintClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate user-defined conversion in type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_DuplicateConversionInClass {
            get {
                return ResourceManager.GetString("ERR_DuplicateConversionInClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is explicitly implemented more than once..
        /// </summary>
        public static string ERR_DuplicateExplicitImpl {
            get {
                return ResourceManager.GetString("ERR_DuplicateExplicitImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter name &apos;{0}&apos; conflicts with an automatically-generated parameter name.
        /// </summary>
        public static string ERR_DuplicateGeneratedName {
            get {
                return ResourceManager.GetString("ERR_DuplicateGeneratedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple assemblies with equivalent identity have been imported: &apos;{0}&apos; and &apos;{1}&apos;. Remove one of the duplicate references..
        /// </summary>
        public static string ERR_DuplicateImport {
            get {
                return ResourceManager.GetString("ERR_DuplicateImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An assembly with the same simple name &apos;{0}&apos; has already been imported. Try removing one of the references (e.g. &apos;{1}&apos;) or sign them to enable side-by-side..
        /// </summary>
        public static string ERR_DuplicateImportSimple {
            get {
                return ResourceManager.GetString("ERR_DuplicateImportSimple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The indicated call is intercepted multiple times..
        /// </summary>
        public static string ERR_DuplicateInterceptor {
            get {
                return ResourceManager.GetString("ERR_DuplicateInterceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is already listed in interface list.
        /// </summary>
        public static string ERR_DuplicateInterfaceInBaseList {
            get {
                return ResourceManager.GetString("ERR_DuplicateInterfaceInBaseList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is already listed in the interface list on type &apos;{2}&apos; as &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DuplicateInterfaceWithDifferencesInBaseList {
            get {
                return ResourceManager.GetString("ERR_DuplicateInterfaceWithDifferencesInBaseList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is already listed in the interface list on type &apos;{2}&apos; with different tuple element names, as &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DuplicateInterfaceWithTupleNamesInBaseList {
            get {
                return ResourceManager.GetString("ERR_DuplicateInterfaceWithTupleNamesInBaseList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The label &apos;{0}&apos; is a duplicate.
        /// </summary>
        public static string ERR_DuplicateLabel {
            get {
                return ResourceManager.GetString("ERR_DuplicateLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate &apos;{0}&apos; modifier.
        /// </summary>
        public static string ERR_DuplicateModifier {
            get {
                return ResourceManager.GetString("ERR_DuplicateModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named argument &apos;{0}&apos; cannot be specified multiple times.
        /// </summary>
        public static string ERR_DuplicateNamedArgument {
            get {
                return ResourceManager.GetString("ERR_DuplicateNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; duplicate named attribute argument.
        /// </summary>
        public static string ERR_DuplicateNamedAttributeArgument {
            get {
                return ResourceManager.GetString("ERR_DuplicateNamedAttributeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; already contains a definition for &apos;{1}&apos;.
        /// </summary>
        public static string ERR_DuplicateNameInClass {
            get {
                return ResourceManager.GetString("ERR_DuplicateNameInClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace &apos;{1}&apos; already contains a definition for &apos;{0}&apos;.
        /// </summary>
        public static string ERR_DuplicateNameInNS {
            get {
                return ResourceManager.GetString("ERR_DuplicateNameInNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate null suppression operator (&apos;!&apos;).
        /// </summary>
        public static string ERR_DuplicateNullSuppression {
            get {
                return ResourceManager.GetString("ERR_DuplicateNullSuppression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter name &apos;{0}&apos; is a duplicate.
        /// </summary>
        public static string ERR_DuplicateParamName {
            get {
                return ResourceManager.GetString("ERR_DuplicateParamName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify accessibility modifiers for both accessors of the property or indexer &apos;{0}&apos;.
        /// </summary>
        public static string ERR_DuplicatePropertyAccessMods {
            get {
                return ResourceManager.GetString("ERR_DuplicatePropertyAccessMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify &apos;readonly&apos; modifiers on both accessors of property or indexer &apos;{0}&apos;. Instead, put a &apos;readonly&apos; modifier on the property itself..
        /// </summary>
        public static string ERR_DuplicatePropertyReadOnlyMods {
            get {
                return ResourceManager.GetString("ERR_DuplicatePropertyReadOnlyMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; duplicate TypeForwardedToAttribute.
        /// </summary>
        public static string ERR_DuplicateTypeForwarder {
            get {
                return ResourceManager.GetString("ERR_DuplicateTypeForwarder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate type parameter &apos;{0}&apos;.
        /// </summary>
        public static string ERR_DuplicateTypeParameter {
            get {
                return ResourceManager.GetString("ERR_DuplicateTypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A parameter can only have one &apos;{0}&apos; modifier.
        /// </summary>
        public static string ERR_DupParamMod {
            get {
                return ResourceManager.GetString("ERR_DupParamMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A return type can only have one &apos;{0}&apos; modifier..
        /// </summary>
        public static string ERR_DupReturnTypeMod {
            get {
                return ResourceManager.GetString("ERR_DupReturnTypeMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot define a class or member that utilizes &apos;dynamic&apos; because the compiler required type &apos;{0}&apos; cannot be found. Are you missing a reference?.
        /// </summary>
        public static string ERR_DynamicAttributeMissing {
            get {
                return ResourceManager.GetString("ERR_DynamicAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is applicable only with expanded form of non-array params collection which is not supported during dynamic dispatch..
        /// </summary>
        public static string ERR_DynamicDispatchToParamsCollection {
            get {
                return ResourceManager.GetString("ERR_DynamicDispatchToParamsCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot pass argument with dynamic type to params parameter &apos;{0}&apos; of local function &apos;{1}&apos;..
        /// </summary>
        public static string ERR_DynamicLocalFunctionParamsParameter {
            get {
                return ResourceManager.GetString("ERR_DynamicLocalFunctionParamsParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot pass argument with dynamic type to generic local function &apos;{0}&apos; with inferred type arguments..
        /// </summary>
        public static string ERR_DynamicLocalFunctionTypeParameter {
            get {
                return ResourceManager.GetString("ERR_DynamicLocalFunctionTypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One or more types required to compile a dynamic expression cannot be found. Are you missing a reference?.
        /// </summary>
        public static string ERR_DynamicRequiredTypesMissing {
            get {
                return ResourceManager.GetString("ERR_DynamicRequiredTypesMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint cannot be the dynamic type.
        /// </summary>
        public static string ERR_DynamicTypeAsBound {
            get {
                return ResourceManager.GetString("ERR_DynamicTypeAsBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To use Dynamic variables (PUBLIC, PRIVATE, MEMVAR, DECLARE, DIMENSION) you will have to pass the /memvar commandline option..
        /// </summary>
        public static string ERR_DynamicVariablesNotAllowed {
            get {
                return ResourceManager.GetString("ERR_DynamicVariablesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;else&apos; cannot start a statement..
        /// </summary>
        public static string ERR_ElseCannotStartStatement {
            get {
                return ResourceManager.GetString("ERR_ElseCannotStartStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty character literal.
        /// </summary>
        public static string ERR_EmptyCharConst {
            get {
                return ResourceManager.GetString("ERR_EmptyCharConst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Element initializer cannot be empty.
        /// </summary>
        public static string ERR_EmptyElementInitializer {
            get {
                return ResourceManager.GetString("ERR_EmptyElementInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty format specifier..
        /// </summary>
        public static string ERR_EmptyFormatSpecifier {
            get {
                return ResourceManager.GetString("ERR_EmptyFormatSpecifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression expected after yield return.
        /// </summary>
        public static string ERR_EmptyYield {
            get {
                return ResourceManager.GetString("ERR_EmptyYield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot continue since the edit includes a reference to an embedded type: &apos;{0}&apos;..
        /// </summary>
        public static string ERR_EncNoPIAReference {
            get {
                return ResourceManager.GetString("ERR_EncNoPIAReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot emit debug information for a source text without encoding..
        /// </summary>
        public static string ERR_EncodinglessSyntaxTree {
            get {
                return ResourceManager.GetString("ERR_EncodinglessSyntaxTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; added during the current debug session can only be accessed from within its declaring assembly &apos;{1}&apos;..
        /// </summary>
        public static string ERR_EncReferenceToAddedMember {
            get {
                return ResourceManager.GetString("ERR_EncReferenceToAddedMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot update &apos;{0}&apos;; attribute &apos;{1}&apos; is missing..
        /// </summary>
        public static string ERR_EncUpdateFailedMissingAttribute {
            get {
                return ResourceManager.GetString("ERR_EncUpdateFailedMissingAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #endif directive expected.
        /// </summary>
        public static string ERR_EndifDirectiveExpected {
            get {
                return ResourceManager.GetString("ERR_EndifDirectiveExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single-line comment or end-of-line expected.
        /// </summary>
        public static string ERR_EndOfPPLineExpected {
            get {
                return ResourceManager.GetString("ERR_EndOfPPLineExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #endregion directive expected.
        /// </summary>
        public static string ERR_EndRegionDirectiveExpected {
            get {
                return ResourceManager.GetString("ERR_EndRegionDirectiveExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Application entry points cannot be attributed with &apos;UnmanagedCallersOnly&apos;..
        /// </summary>
        public static string ERR_EntryPointCannotBeUnmanagedCallersOnly {
            get {
                return ResourceManager.GetString("ERR_EntryPointCannotBeUnmanagedCallersOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: the enumerator value is too large to fit in its type.
        /// </summary>
        public static string ERR_EnumeratorOverflow {
            get {
                return ResourceManager.GetString("ERR_EnumeratorOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enums cannot contain explicit parameterless constructors.
        /// </summary>
        public static string ERR_EnumsCantContainDefaultConstructor {
            get {
                return ResourceManager.GetString("ERR_EnumsCantContainDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or namespace definition, or end-of-file expected.
        /// </summary>
        public static string ERR_EOFExpected {
            get {
                return ResourceManager.GetString("ERR_EOFExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record equality contract property &apos;{0}&apos; must have a get accessor..
        /// </summary>
        public static string ERR_EqualityContractRequiresGetter {
            get {
                return ResourceManager.GetString("ERR_EqualityContractRequiresGetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error building Win32 resources -- {0}.
        /// </summary>
        public static string ERR_ErrorBuildingWin32Resources {
            get {
                return ResourceManager.GetString("ERR_ErrorBuildingWin32Resources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #error: &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ErrorDirective {
            get {
                return ResourceManager.GetString("ERR_ErrorDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is an error in a referenced assembly &apos;{0}&apos;..
        /// </summary>
        public static string ERR_ErrorInReferencedAssembly {
            get {
                return ResourceManager.GetString("ERR_ErrorInReferencedAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a result of &apos;{0}&apos; in this context because it may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string ERR_EscapeCall {
            get {
                return ResourceManager.GetString("ERR_EscapeCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a member of result of &apos;{0}&apos; in this context because it may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string ERR_EscapeCall2 {
            get {
                return ResourceManager.GetString("ERR_EscapeCall2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;{0}&apos; character may only be escaped by doubling &apos;{0}{0}&apos; in an interpolated string..
        /// </summary>
        public static string ERR_EscapedCurly {
            get {
                return ResourceManager.GetString("ERR_EscapedCurly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression cannot be used in this context because it may indirectly expose variables outside of their declaration scope.
        /// </summary>
        public static string ERR_EscapeOther {
            get {
                return ResourceManager.GetString("ERR_EscapeOther", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A result of a stackalloc expression of type &apos;{0}&apos; cannot be used in this context because it may be exposed outside of the containing method.
        /// </summary>
        public static string ERR_EscapeStackAlloc {
            get {
                return ResourceManager.GetString("ERR_EscapeStackAlloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use variable &apos;{0}&apos; in this context because it may expose referenced variables outside of their declaration scope.
        /// </summary>
        public static string ERR_EscapeVariable {
            get {
                return ResourceManager.GetString("ERR_EscapeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: event property must have both add and remove accessors.
        /// </summary>
        public static string ERR_EventNeedsBothAccessors {
            get {
                return ResourceManager.GetString("ERR_EventNeedsBothAccessors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: event must be of a delegate type.
        /// </summary>
        public static string ERR_EventNotDelegate {
            get {
                return ResourceManager.GetString("ERR_EventNotDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EXIT statement is not allowed inside a SWITCH statement.
        /// </summary>
        public static string ERR_ExitInsideSwitchStatementNotAllowed {
            get {
                return ResourceManager.GetString("ERR_ExitInsideSwitchStatementNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected contextual keyword &apos;by&apos;.
        /// </summary>
        public static string ERR_ExpectedContextualKeywordBy {
            get {
                return ResourceManager.GetString("ERR_ExpectedContextualKeywordBy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected contextual keyword &apos;equals&apos;.
        /// </summary>
        public static string ERR_ExpectedContextualKeywordEquals {
            get {
                return ResourceManager.GetString("ERR_ExpectedContextualKeywordEquals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected contextual keyword &apos;on&apos;.
        /// </summary>
        public static string ERR_ExpectedContextualKeywordOn {
            get {
                return ResourceManager.GetString("ERR_ExpectedContextualKeywordOn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expecting &apos;end of statement&apos;, found &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ExpectedEndOfStatement {
            get {
                return ResourceManager.GetString("ERR_ExpectedEndOfStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected catch or finally.
        /// </summary>
        public static string ERR_ExpectedEndTry {
            get {
                return ResourceManager.GetString("ERR_ExpectedEndTry", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected interpolated string.
        /// </summary>
        public static string ERR_ExpectedInterpolatedString {
            get {
                return ResourceManager.GetString("ERR_ExpectedInterpolatedString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoted file name expected.
        /// </summary>
        public static string ERR_ExpectedPPFile {
            get {
                return ResourceManager.GetString("ERR_ExpectedPPFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A query body must end with a select clause or a group clause.
        /// </summary>
        public static string ERR_ExpectedSelectOrGroup {
            get {
                return ResourceManager.GetString("ERR_ExpectedSelectOrGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected a script (.csx file) but none specified.
        /// </summary>
        public static string ERR_ExpectedSingleScript {
            get {
                return ResourceManager.GetString("ERR_ExpectedSingleScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword, identifier, or string expected after verbatim specifier: @.
        /// </summary>
        public static string ERR_ExpectedVerbatimLiteral {
            get {
                return ResourceManager.GetString("ERR_ExpectedVerbatimLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.DynamicAttribute&apos;. Use the &apos;dynamic&apos; keyword instead..
        /// </summary>
        public static string ERR_ExplicitDynamicAttr {
            get {
                return ResourceManager.GetString("ERR_ExplicitDynamicAttr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An explicit interface implementation of an event must use event accessor syntax.
        /// </summary>
        public static string ERR_ExplicitEventFieldImpl {
            get {
                return ResourceManager.GetString("ERR_ExplicitEventFieldImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.ExtensionAttribute&apos;. Use the &apos;this&apos; keyword instead..
        /// </summary>
        public static string ERR_ExplicitExtension {
            get {
                return ResourceManager.GetString("ERR_ExplicitExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot inherit interface &apos;{0}&apos; with the specified type parameters because it causes method &apos;{1}&apos; to contain overloads which differ only on ref and out.
        /// </summary>
        public static string ERR_ExplicitImplCollisionOnRefOut {
            get {
                return ResourceManager.GetString("ERR_ExplicitImplCollisionOnRefOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit implementation of a user-defined operator &apos;{0}&apos; must be declared static.
        /// </summary>
        public static string ERR_ExplicitImplementationOfOperatorsMustBeStatic {
            get {
                return ResourceManager.GetString("ERR_ExplicitImplementationOfOperatorsMustBeStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; should not have a params parameter since &apos;{1}&apos; does not.
        /// </summary>
        public static string ERR_ExplicitImplParams {
            get {
                return ResourceManager.GetString("ERR_ExplicitImplParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: explicit interface declaration can only be declared in a class, record, struct or interface.
        /// </summary>
        public static string ERR_ExplicitInterfaceImplementationInNonClassOrStruct {
            get {
                return ResourceManager.GetString("ERR_ExplicitInterfaceImplementationInNonClassOrStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; in explicit interface declaration is not an interface.
        /// </summary>
        public static string ERR_ExplicitInterfaceImplementationNotInterface {
            get {
                return ResourceManager.GetString("ERR_ExplicitInterfaceImplementationNotInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; explicit method implementation cannot implement &apos;{1}&apos; because it is an accessor.
        /// </summary>
        public static string ERR_ExplicitMethodImplAccessor {
            get {
                return ResourceManager.GetString("ERR_ExplicitMethodImplAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit application of &apos;System.Runtime.CompilerServices.NullableAttribute&apos; is not allowed..
        /// </summary>
        public static string ERR_ExplicitNullableAttribute {
            get {
                return ResourceManager.GetString("ERR_ExplicitNullableAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.ParamArrayAttribute&apos;/&apos;System.Runtime.CompilerServices.ParamCollectionAttribute&apos;. Use the &apos;params&apos; keyword instead..
        /// </summary>
        public static string ERR_ExplicitParamArrayOrCollection {
            get {
                return ResourceManager.GetString("ERR_ExplicitParamArrayOrCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; adds an accessor not found in interface member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ExplicitPropertyAddingAccessor {
            get {
                return ResourceManager.GetString("ERR_ExplicitPropertyAddingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accessors &apos;{0}&apos; and &apos;{1}&apos; should both be init-only or neither.
        /// </summary>
        public static string ERR_ExplicitPropertyMismatchInitOnly {
            get {
                return ResourceManager.GetString("ERR_ExplicitPropertyMismatchInitOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit interface implementation &apos;{0}&apos; is missing accessor &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ExplicitPropertyMissingAccessor {
            get {
                return ResourceManager.GetString("ERR_ExplicitPropertyMissingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.RequiredMemberAttribute&apos;. Use the &apos;required&apos; keyword on required fields and properties instead..
        /// </summary>
        public static string ERR_ExplicitRequiredMember {
            get {
                return ResourceManager.GetString("ERR_ExplicitRequiredMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;{0}&apos;. This is reserved for compiler usage..
        /// </summary>
        public static string ERR_ExplicitReservedAttr {
            get {
                return ResourceManager.GetString("ERR_ExplicitReservedAttr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;System.Runtime.CompilerServices.ScopedRefAttribute&apos;. Use the &apos;scoped&apos; keyword instead..
        /// </summary>
        public static string ERR_ExplicitScopedRef {
            get {
                return ResourceManager.GetString("ERR_ExplicitScopedRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot reference &apos;System.Runtime.CompilerServices.TupleElementNamesAttribute&apos; explicitly. Use the tuple syntax to define tuple names..
        /// </summary>
        public static string ERR_ExplicitTupleElementNamesAttribute {
            get {
                return ResourceManager.GetString("ERR_ExplicitTupleElementNamesAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; exported from module &apos;{1}&apos; conflicts with type declared in primary module of this assembly..
        /// </summary>
        public static string ERR_ExportedTypeConflictsWithDeclaration {
            get {
                return ResourceManager.GetString("ERR_ExportedTypeConflictsWithDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; exported from module &apos;{1}&apos; conflicts with type &apos;{2}&apos; exported from module &apos;{3}&apos;..
        /// </summary>
        public static string ERR_ExportedTypesConflict {
            get {
                return ResourceManager.GetString("ERR_ExportedTypesConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression cannot be used in a fixed statement.
        /// </summary>
        public static string ERR_ExprCannotBeFixed {
            get {
                return ResourceManager.GetString("ERR_ExprCannotBeFixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An Expression Body is not supported for methods / functions with CLIPPER calling convention..
        /// </summary>
        public static string ERR_ExpressionBodyClipperCallingConvention {
            get {
                return ResourceManager.GetString("ERR_ExpressionBodyClipperCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected expression.
        /// </summary>
        public static string ERR_ExpressionExpected {
            get {
                return ResourceManager.GetString("ERR_ExpressionExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression does not have a name..
        /// </summary>
        public static string ERR_ExpressionHasNoName {
            get {
                return ResourceManager.GetString("ERR_ExpressionHasNoName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression or declaration statement expected..
        /// </summary>
        public static string ERR_ExpressionOrDeclarationExpected {
            get {
                return ResourceManager.GetString("ERR_ExpressionOrDeclarationExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a null coalescing assignment.
        /// </summary>
        public static string ERR_ExpressionTreeCantContainNullCoalescingAssignment {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeCantContainNullCoalescingAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression tree cannot contain value of ref struct or restricted type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_ExpressionTreeCantContainRefStruct {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeCantContainRefStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an access of static virtual or abstract interface member.
        /// </summary>
        public static string ERR_ExpressionTreeContainsAbstractStaticMemberAccess {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsAbstractStaticMemberAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an anonymous method expression.
        /// </summary>
        public static string ERR_ExpressionTreeContainsAnonymousMethod {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsAnonymousMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an assignment operator.
        /// </summary>
        public static string ERR_ExpressionTreeContainsAssignment {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a coalescing operator with a null or default literal left-hand side.
        /// </summary>
        public static string ERR_ExpressionTreeContainsBadCoalesce {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsBadCoalesce", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a base access.
        /// </summary>
        public static string ERR_ExpressionTreeContainsBaseAccess {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsBaseAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a collection expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsCollectionExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsCollectionExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a discard..
        /// </summary>
        public static string ERR_ExpressionTreeContainsDiscard {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsDiscard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a dynamic operation.
        /// </summary>
        public static string ERR_ExpressionTreeContainsDynamicOperation {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsDynamicOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a from-end index (&apos;^&apos;) expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsFromEndIndexExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsFromEndIndexExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an indexed property.
        /// </summary>
        public static string ERR_ExpressionTreeContainsIndexedProperty {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsIndexedProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an inline array access or conversion.
        /// </summary>
        public static string ERR_ExpressionTreeContainsInlineArrayOperation {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsInlineArrayOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an interpolated string handler conversion..
        /// </summary>
        public static string ERR_ExpressionTreeContainsInterpolatedStringHandlerConversion {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsInterpolatedStringHandlerConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an &apos;is&apos; pattern-matching operator..
        /// </summary>
        public static string ERR_ExpressionTreeContainsIsMatch {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsIsMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a reference to a local function.
        /// </summary>
        public static string ERR_ExpressionTreeContainsLocalFunction {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsLocalFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a multidimensional array initializer.
        /// </summary>
        public static string ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsMultiDimensionalArrayInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a named argument specification.
        /// </summary>
        public static string ERR_ExpressionTreeContainsNamedArgument {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a call or invocation that uses optional arguments.
        /// </summary>
        public static string ERR_ExpressionTreeContainsOptionalArgument {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsOptionalArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an out argument variable declaration..
        /// </summary>
        public static string ERR_ExpressionTreeContainsOutVariable {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsOutVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a pattern System.Index or System.Range indexer access.
        /// </summary>
        public static string ERR_ExpressionTreeContainsPatternImplicitIndexer {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsPatternImplicitIndexer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an unsafe pointer operation.
        /// </summary>
        public static string ERR_ExpressionTreeContainsPointerOp {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsPointerOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a range (&apos;..&apos;) expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsRangeExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsRangeExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a switch expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsSwitchExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsSwitchExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a throw-expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsThrowExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsThrowExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a tuple == or != operator.
        /// </summary>
        public static string ERR_ExpressionTreeContainsTupleBinOp {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsTupleBinOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a tuple conversion..
        /// </summary>
        public static string ERR_ExpressionTreeContainsTupleConversion {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsTupleConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a tuple literal..
        /// </summary>
        public static string ERR_ExpressionTreeContainsTupleLiteral {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsTupleLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain UTF-8 string conversion or literal..
        /// </summary>
        public static string ERR_ExpressionTreeContainsUtf8StringLiterals {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsUtf8StringLiterals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain a with-expression..
        /// </summary>
        public static string ERR_ExpressionTreeContainsWithExpression {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeContainsWithExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert lambda to an expression tree whose type argument &apos;{0}&apos; is not a delegate type.
        /// </summary>
        public static string ERR_ExpressionTreeMustHaveDelegate {
            get {
                return ResourceManager.GetString("ERR_ExpressionTreeMustHaveDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot define a new extension method because the compiler required type &apos;{0}&apos; cannot be found. Are you missing a reference to System.Core.dll?.
        /// </summary>
        public static string ERR_ExtensionAttrNotFound {
            get {
                return ResourceManager.GetString("ERR_ExtensionAttrNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extension Add method is not supported for a collection initializer in an expression lambda..
        /// </summary>
        public static string ERR_ExtensionCollectionElementInitializerInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_ExtensionCollectionElementInitializerInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension methods must be defined in a top level static class; {0} is a nested class.
        /// </summary>
        public static string ERR_ExtensionMethodsDecl {
            get {
                return ResourceManager.GetString("ERR_ExtensionMethodsDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An extern alias declaration must precede all other elements defined in the namespace.
        /// </summary>
        public static string ERR_ExternAfterElements {
            get {
                return ResourceManager.GetString("ERR_ExternAfterElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;extern alias&apos; is not valid in this context.
        /// </summary>
        public static string ERR_ExternAliasNotAllowed {
            get {
                return ResourceManager.GetString("ERR_ExternAliasNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: extern event cannot have initializer.
        /// </summary>
        public static string ERR_ExternEventInitializer {
            get {
                return ResourceManager.GetString("ERR_ExternEventInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be extern and declare a body.
        /// </summary>
        public static string ERR_ExternHasBody {
            get {
                return ResourceManager.GetString("ERR_ExternHasBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be extern and have a constructor initializer.
        /// </summary>
        public static string ERR_ExternHasConstructorInitializer {
            get {
                return ResourceManager.GetString("ERR_ExternHasConstructorInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The feature &apos;{0}&apos; is currently in Preview and *unsupported*. To use Preview features, use the &apos;preview&apos; language version..
        /// </summary>
        public static string ERR_FeatureInPreview {
            get {
                return ResourceManager.GetString("ERR_FeatureInPreview", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is experimental and unsupported; use &apos;/features:{1}&apos; to enable..
        /// </summary>
        public static string ERR_FeatureIsExperimental {
            get {
                return ResourceManager.GetString("ERR_FeatureIsExperimental", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in the selected dialect {1}.
        /// </summary>
        public static string ERR_FeatureNotAvailableInDialect {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 1. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion1 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 10.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion10 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion10", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 11.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion11 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion11", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 12.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion12 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion12", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 2. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion2 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 3. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion3 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 4. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion4 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion4", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 5. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion5 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion5", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 6. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion6 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion6", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 7.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion7 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion7", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 7.1. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion7_1 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion7_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 7.2. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion7_2 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion7_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 7.3. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion7_3 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion7_3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 8.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion8 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 8.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion8_0 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion8_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not available in C# 9.0. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_FeatureNotAvailableInVersion9 {
            get {
                return ResourceManager.GetString("ERR_FeatureNotAvailableInVersion9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain &apos;{0}&apos;.
        /// </summary>
        public static string ERR_FeatureNotValidInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_FeatureNotValidInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field or auto-implemented property cannot be of type &apos;{0}&apos; unless it is an instance member of a ref struct..
        /// </summary>
        public static string ERR_FieldAutoPropCantBeByRefLike {
            get {
                return ResourceManager.GetString("ERR_FieldAutoPropCantBeByRefLike", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field or property cannot be of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_FieldCantBeRefAny {
            get {
                return ResourceManager.GetString("ERR_FieldCantBeRefAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field cannot have void type.
        /// </summary>
        public static string ERR_FieldCantHaveVoidType {
            get {
                return ResourceManager.GetString("ERR_FieldCantHaveVoidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field has multiple distinct constant values..
        /// </summary>
        public static string ERR_FieldHasMultipleDistinctConstantValues {
            get {
                return ResourceManager.GetString("ERR_FieldHasMultipleDistinctConstantValues", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A field initializer cannot reference the non-static field, method, or property &apos;{0}&apos;.
        /// </summary>
        public static string ERR_FieldInitRefNonstatic {
            get {
                return ResourceManager.GetString("ERR_FieldInitRefNonstatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field-like event &apos;{0}&apos; cannot be &apos;readonly&apos;..
        /// </summary>
        public static string ERR_FieldLikeEventCantBeReadOnly {
            get {
                return ResourceManager.GetString("ERR_FieldLikeEventCantBeReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field-like events are not allowed in readonly structs..
        /// </summary>
        public static string ERR_FieldlikeEventsInRoStruct {
            get {
                return ResourceManager.GetString("ERR_FieldlikeEventsInRoStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance fields of readonly structs must be readonly..
        /// </summary>
        public static string ERR_FieldsInRoStruct {
            get {
                return ResourceManager.GetString("ERR_FieldsInRoStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace &apos;{1}&apos; already contains a definition for &apos;{0}&apos; in this file..
        /// </summary>
        public static string ERR_FileLocalDuplicateNameInNS {
            get {
                return ResourceManager.GetString("ERR_FileLocalDuplicateNameInNS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file &apos;{0}&apos; could not be found..
        /// </summary>
        public static string ERR_FileNotFound {
            get {
                return ResourceManager.GetString("ERR_FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; cannot be used because the containing file path cannot be converted into the equivalent UTF-8 byte representation. {1}.
        /// </summary>
        public static string ERR_FilePathCannotBeConvertedToUtf8 {
            get {
                return ResourceManager.GetString("ERR_FilePathCannotBeConvertedToUtf8", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file can not contain both file-scoped and normal namespace declarations..
        /// </summary>
        public static string ERR_FileScopedAndNormalNamespace {
            get {
                return ResourceManager.GetString("ERR_FileScopedAndNormalNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-scoped namespace must precede all other members in a file..
        /// </summary>
        public static string ERR_FileScopedNamespaceNotBeforeAllMembers {
            get {
                return ResourceManager.GetString("ERR_FileScopedNamespaceNotBeforeAllMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; cannot be used as a base type of non-file-local type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_FileTypeBase {
            get {
                return ResourceManager.GetString("ERR_FileTypeBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; cannot be used in a member signature in non-file-local type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_FileTypeDisallowedInSignature {
            get {
                return ResourceManager.GetString("ERR_FileTypeDisallowedInSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types and aliases cannot be named &apos;file&apos;..
        /// </summary>
        public static string ERR_FileTypeNameDisallowed {
            get {
                return ResourceManager.GetString("ERR_FileTypeNameDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; must be defined in a top level type; &apos;{0}&apos; is a nested type..
        /// </summary>
        public static string ERR_FileTypeNested {
            get {
                return ResourceManager.GetString("ERR_FileTypeNested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; cannot use accessibility modifiers..
        /// </summary>
        public static string ERR_FileTypeNoExplicitAccessibility {
            get {
                return ResourceManager.GetString("ERR_FileTypeNoExplicitAccessibility", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; must be declared in a file with a unique path. Path &apos;{1}&apos; is used in multiple files..
        /// </summary>
        public static string ERR_FileTypeNonUniquePath {
            get {
                return ResourceManager.GetString("ERR_FileTypeNonUniquePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot use fixed size buffers contained in unfixed expressions. Try using the fixed statement..
        /// </summary>
        public static string ERR_FixedBufferNotFixed {
            get {
                return ResourceManager.GetString("ERR_FixedBufferNotFixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fixed buffer may only have one dimension..
        /// </summary>
        public static string ERR_FixedBufferTooManyDimensions {
            get {
                return ResourceManager.GetString("ERR_FixedBufferTooManyDimensions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fixed size buffer field must have the array size specifier after the field name.
        /// </summary>
        public static string ERR_FixedDimsRequired {
            get {
                return ResourceManager.GetString("ERR_FixedDimsRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A fixed field must not be a ref field..
        /// </summary>
        public static string ERR_FixedFieldMustNotBeRef {
            get {
                return ResourceManager.GetString("ERR_FixedFieldMustNotBeRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use fixed local &apos;{0}&apos; inside an anonymous method, lambda expression, or query expression.
        /// </summary>
        public static string ERR_FixedLocalInLambda {
            get {
                return ResourceManager.GetString("ERR_FixedLocalInLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must provide an initializer in a fixed or using statement declaration.
        /// </summary>
        public static string ERR_FixedMustInit {
            get {
                return ResourceManager.GetString("ERR_FixedMustInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You can only take the address of an unfixed expression inside of a fixed statement initializer.
        /// </summary>
        public static string ERR_FixedNeeded {
            get {
                return ResourceManager.GetString("ERR_FixedNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed size buffers can only be accessed through locals or fields.
        /// </summary>
        public static string ERR_FixedNeedsLvalue {
            get {
                return ResourceManager.GetString("ERR_FixedNeedsLvalue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed size buffer fields may only be members of structs.
        /// </summary>
        public static string ERR_FixedNotInStruct {
            get {
                return ResourceManager.GetString("ERR_FixedNotInStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot use the fixed statement to take the address of an already fixed expression.
        /// </summary>
        public static string ERR_FixedNotNeeded {
            get {
                return ResourceManager.GetString("ERR_FixedNotNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed size buffer of length {0} and type &apos;{1}&apos; is too big.
        /// </summary>
        public static string ERR_FixedOverflow {
            get {
                return ResourceManager.GetString("ERR_FixedOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Floating-point constant is outside the range of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_FloatOverflow {
            get {
                return ResourceManager.GetString("ERR_FloatOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement cannot operate on variables of type &apos;{0}&apos; because &apos;{0}&apos; does not contain a public instance or extension definition for &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ForEachMissingMember {
            get {
                return ResourceManager.GetString("ERR_ForEachMissingMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement cannot operate on variables of type &apos;{0}&apos; because &apos;{0}&apos; does not contain a public instance or extension definition for &apos;{1}&apos;. Did you mean &apos;await foreach&apos; rather than &apos;foreach&apos;?.
        /// </summary>
        public static string ERR_ForEachMissingMemberWrongAsync {
            get {
                return ResourceManager.GetString("ERR_ForEachMissingMemberWrongAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Forwarded type &apos;{0}&apos; conflicts with type declared in primary module of this assembly..
        /// </summary>
        public static string ERR_ForwardedTypeConflictsWithDeclaration {
            get {
                return ResourceManager.GetString("ERR_ForwardedTypeConflictsWithDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; forwarded to assembly &apos;{1}&apos; conflicts with type &apos;{2}&apos; exported from module &apos;{3}&apos;..
        /// </summary>
        public static string ERR_ForwardedTypeConflictsWithExportedType {
            get {
                return ResourceManager.GetString("ERR_ForwardedTypeConflictsWithExportedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is defined in this assembly, but a type forwarder is specified for it.
        /// </summary>
        public static string ERR_ForwardedTypeInThisAssembly {
            get {
                return ResourceManager.GetString("ERR_ForwardedTypeInThisAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot forward type &apos;{0}&apos; because it is a nested type of &apos;{1}&apos;.
        /// </summary>
        public static string ERR_ForwardedTypeIsNested {
            get {
                return ResourceManager.GetString("ERR_ForwardedTypeIsNested", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; forwarded to assembly &apos;{1}&apos; conflicts with type &apos;{2}&apos; forwarded to assembly &apos;{3}&apos;..
        /// </summary>
        public static string ERR_ForwardedTypesConflict {
            get {
                return ResourceManager.GetString("ERR_ForwardedTypesConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;AS BaseType&apos; clause is mandatory in the FoxPro dialect, unless you compile with /fox1-..
        /// </summary>
        public static string ERR_FoxAsClauseMandatory {
            get {
                return ResourceManager.GetString("ERR_FoxAsClauseMandatory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CONSTRUCTOR and DESTRUCTOR are only allowed in the FoxPro dialect, when you compile with /fox1-..
        /// </summary>
        public static string ERR_FoxCtorDtor {
            get {
                return ResourceManager.GetString("ERR_FoxCtorDtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DECLARE DLL Statements in .Net cannot have a STRING parameter by reference because .Net strings are immutable. Use a System.Text.StringBuilder argument instead..
        /// </summary>
        public static string ERR_FoxDeclareDLLStringByReference {
            get {
                return ResourceManager.GetString("ERR_FoxDeclareDLLStringByReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FoxPro DIMENSION statement or LOCAL ARRAY statement supports 1 or 2 dimensions, not more..
        /// </summary>
        public static string ERR_FoxDimensionDeclaration {
            get {
                return ResourceManager.GetString("ERR_FoxDimensionDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FoxPro Array support requires the /memvar compiler option..
        /// </summary>
        public static string ERR_FoxDimensionNeedsMemvars {
            get {
                return ResourceManager.GetString("ERR_FoxDimensionNeedsMemvars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot locate WITH block for member access expression without left hand side. Enable &apos;Late Binding&apos; to allow resolving the WITH expression at runtime..
        /// </summary>
        public static string ERR_FoxMissingWithStatement {
            get {
                return ResourceManager.GetString("ERR_FoxMissingWithStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Friend assembly reference &apos;{0}&apos; is invalid. InternalsVisibleTo declarations cannot have a version, culture, public key token, or processor architecture specified..
        /// </summary>
        public static string ERR_FriendAssemblyBadArgs {
            get {
                return ResourceManager.GetString("ERR_FriendAssemblyBadArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Friend assembly reference &apos;{0}&apos; is invalid. Strong-name signed assemblies must specify a public key in their InternalsVisibleTo declarations..
        /// </summary>
        public static string ERR_FriendAssemblySNReq {
            get {
                return ResourceManager.GetString("ERR_FriendAssemblySNReq", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Friend access was granted by &apos;{0}&apos;, but the public key of the output assembly (&apos;{1}&apos;) does not match that specified by the InternalsVisibleTo attribute in the granting assembly..
        /// </summary>
        public static string ERR_FriendRefNotEqualToThis {
            get {
                return ResourceManager.GetString("ERR_FriendRefNotEqualToThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Friend access was granted by &apos;{0}&apos;, but the strong name signing state of the output assembly does not match that of the granting assembly..
        /// </summary>
        public static string ERR_FriendRefSigningMismatch {
            get {
                return ResourceManager.GetString("ERR_FriendRefSigningMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create a function pointer for &apos;{0}&apos; because it is not a static method.
        /// </summary>
        public static string ERR_FuncPtrMethMustBeStatic {
            get {
                return ResourceManager.GetString("ERR_FuncPtrMethMustBeStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ref mismatch between &apos;{0}&apos; and function pointer &apos;{1}&apos;.
        /// </summary>
        public static string ERR_FuncPtrRefMismatch {
            get {
                return ResourceManager.GetString("ERR_FuncPtrRefMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A function pointer cannot be called with named arguments..
        /// </summary>
        public static string ERR_FunctionPointersCannotBeCalledWithNamedArguments {
            get {
                return ResourceManager.GetString("ERR_FunctionPointersCannotBeCalledWithNamedArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using a function pointer type in this context is not supported..
        /// </summary>
        public static string ERR_FunctionPointerTypesInAttributeNotSupported {
            get {
                return ResourceManager.GetString("ERR_FunctionPointerTypesInAttributeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Functions cannot have an INIT or EXIT clause..
        /// </summary>
        public static string ERR_FunctionsCannotHaveInitExit {
            get {
                return ResourceManager.GetString("ERR_FunctionsCannotHaveInitExit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static types cannot be used as type arguments.
        /// </summary>
        public static string ERR_GenericArgIsStaticClass {
            get {
                return ResourceManager.GetString("ERR_GenericArgIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interface &apos;{0}&apos; cannot be used as type argument. Static member &apos;{1}&apos; does not have a most specific implementation in the interface..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedInterfaceWithStaticAbstractMembers {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedInterfaceWithStaticAbstractMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. The nullable type &apos;{3}&apos; does not satisfy the constraint of &apos;{1}&apos;..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedNullableEnum {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedNullableEnum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. The nullable type &apos;{3}&apos; does not satisfy the constraint of &apos;{1}&apos;. Nullable types can not satisfy any interface constraints..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedNullableInterface {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedNullableInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. There is no implicit reference conversion from &apos;{3}&apos; to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedRefType {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedRefType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. There is no boxing conversion or type parameter conversion from &apos;{3}&apos; to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedTyVar {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedTyVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. There is no boxing conversion from &apos;{3}&apos; to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_GenericConstraintNotSatisfiedValType {
            get {
                return ResourceManager.GetString("ERR_GenericConstraintNotSatisfiedValType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; from assembly &apos;{1}&apos; cannot be used across assembly boundaries because it has a generic type argument that is an embedded interop type..
        /// </summary>
        public static string ERR_GenericsUsedAcrossAssemblies {
            get {
                return ResourceManager.GetString("ERR_GenericsUsedAcrossAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be embedded because it has a generic argument. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_GenericsUsedInNoPIAType {
            get {
                return ResourceManager.GetString("ERR_GenericsUsedInNoPIAType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A get or set accessor expected.
        /// </summary>
        public static string ERR_GetOrSetExpected {
            get {
                return ResourceManager.GetString("ERR_GetOrSetExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly and module attributes are not allowed in this context.
        /// </summary>
        public static string ERR_GlobalAttributesNotAllowed {
            get {
                return ResourceManager.GetString("ERR_GlobalAttributesNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly and module attributes must precede all other elements defined in a file except using clauses and extern alias declarations.
        /// </summary>
        public static string ERR_GlobalAttributesNotFirst {
            get {
                return ResourceManager.GetString("ERR_GlobalAttributesNotFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member definition, statement, or end-of-file expected.
        /// </summary>
        public static string ERR_GlobalDefinitionOrStatementExpected {
            get {
                return ResourceManager.GetString("ERR_GlobalDefinitionOrStatementExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot redefine the global extern alias.
        /// </summary>
        public static string ERR_GlobalExternAlias {
            get {
                return ResourceManager.GetString("ERR_GlobalExternAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type or namespace name &apos;{0}&apos; could not be found in the global namespace (are you missing an assembly reference?).
        /// </summary>
        public static string ERR_GlobalSingleTypeNameNotFound {
            get {
                return ResourceManager.GetString("ERR_GlobalSingleTypeNameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; could not be found in the global namespace. This type has been forwarded to assembly &apos;{1}&apos; Consider adding a reference to that assembly..
        /// </summary>
        public static string ERR_GlobalSingleTypeNameNotFoundFwd {
            get {
                return ResourceManager.GetString("ERR_GlobalSingleTypeNameNotFoundFwd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expressions and statements can only occur in a method body.
        /// </summary>
        public static string ERR_GlobalStatement {
            get {
                return ResourceManager.GetString("ERR_GlobalStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A global using directive cannot be used in a namespace declaration..
        /// </summary>
        public static string ERR_GlobalUsingInNamespace {
            get {
                return ResourceManager.GetString("ERR_GlobalUsingInNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A global using directive must precede all non-global using directives..
        /// </summary>
        public static string ERR_GlobalUsingOutOfOrder {
            get {
                return ResourceManager.GetString("ERR_GlobalUsingOutOfOrder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File-local type &apos;{0}&apos; cannot be used in a &apos;global using static&apos; directive..
        /// </summary>
        public static string ERR_GlobalUsingStaticFileType {
            get {
                return ResourceManager.GetString("ERR_GlobalUsingStaticFileType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A goto cannot jump to a location before a using declaration within the same block..
        /// </summary>
        public static string ERR_GoToBackwardJumpOverUsingVar {
            get {
                return ResourceManager.GetString("ERR_GoToBackwardJumpOverUsingVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A goto cannot jump to a location after a using declaration..
        /// </summary>
        public static string ERR_GoToForwardJumpOverUsingVar {
            get {
                return ResourceManager.GetString("ERR_GoToForwardJumpOverUsingVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The non-generic {1} &apos;{0}&apos; cannot be used with type arguments.
        /// </summary>
        public static string ERR_HasNoTypeVars {
            get {
                return ResourceManager.GetString("ERR_HasNoTypeVars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The positional member &apos;{0}&apos; found corresponding to this parameter is hidden..
        /// </summary>
        public static string ERR_HiddenPositionalMember {
            get {
                return ResourceManager.GetString("ERR_HiddenPositionalMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; hides inherited abstract member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_HidingAbstractMethod {
            get {
                return ResourceManager.GetString("ERR_HidingAbstractMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier expected.
        /// </summary>
        public static string ERR_IdentifierExpected {
            get {
                return ResourceManager.GetString("ERR_IdentifierExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier expected; &apos;{1}&apos; is a keyword.
        /// </summary>
        public static string ERR_IdentifierExpectedKW {
            get {
                return ResourceManager.GetString("ERR_IdentifierExpectedKW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined operator cannot convert a type to itself.
        /// </summary>
        public static string ERR_IdentityConversion {
            get {
                return ResourceManager.GetString("ERR_IdentityConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An __arglist expression may only appear inside of a call or new expression.
        /// </summary>
        public static string ERR_IllegalArglist {
            get {
                return ResourceManager.GetString("ERR_IllegalArglist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sequence of &apos;@&apos; characters is not allowed. A verbatim string or identifier can only have one &apos;@&apos; character and a raw string cannot have any..
        /// </summary>
        public static string ERR_IllegalAtSequence {
            get {
                return ResourceManager.GetString("ERR_IllegalAtSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal combination of commandline options: {0}..
        /// </summary>
        public static string ERR_IllegalCombinationOfCommandLineOptions {
            get {
                return ResourceManager.GetString("ERR_IllegalCombinationOfCommandLineOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized escape sequence.
        /// </summary>
        public static string ERR_IllegalEscape {
            get {
                return ResourceManager.GetString("ERR_IllegalEscape", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed size buffer type must be one of the following: bool, byte, short, int, long, char, sbyte, ushort, uint, ulong, float or double.
        /// </summary>
        public static string ERR_IllegalFixedType {
            get {
                return ResourceManager.GetString("ERR_IllegalFixedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to params is not valid in this context.
        /// </summary>
        public static string ERR_IllegalParams {
            get {
                return ResourceManager.GetString("ERR_IllegalParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref and out are not valid in this context.
        /// </summary>
        public static string ERR_IllegalRefParam {
            get {
                return ResourceManager.GetString("ERR_IllegalRefParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only assignment, call, increment, decrement, await, and new object expressions can be used as a statement.
        /// </summary>
        public static string ERR_IllegalStatement {
            get {
                return ResourceManager.GetString("ERR_IllegalStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The suppression operator is not allowed in this context.
        /// </summary>
        public static string ERR_IllegalSuppression {
            get {
                return ResourceManager.GetString("ERR_IllegalSuppression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsafe code may only appear if compiling with /unsafe.
        /// </summary>
        public static string ERR_IllegalUnsafe {
            get {
                return ResourceManager.GetString("ERR_IllegalUnsafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to __arglist is not valid in this context.
        /// </summary>
        public static string ERR_IllegalVarArgs {
            get {
                return ResourceManager.GetString("ERR_IllegalVarArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid variance modifier. Only interface and delegate type parameters can be specified as variant..
        /// </summary>
        public static string ERR_IllegalVarianceSyntax {
            get {
                return ResourceManager.GetString("ERR_IllegalVarianceSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid member type. Supported types are: LOGIC, BYTE, SHORT, INT, WORD, DWORD, INT64, UINT64, CHAR, SBYTE, REAL8, REAL4, PTR, PSZ, DATE, UNION or VOSTRUCT.
        /// </summary>
        public static string ERR_IllegalVoStructMemberType {
            get {
                return ResourceManager.GetString("ERR_IllegalVoStructMemberType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constraints for type parameter &apos;{0}&apos; of method &apos;{1}&apos; must match the constraints for type parameter &apos;{2}&apos; of interface method &apos;{3}&apos;. Consider using an explicit interface implementation instead..
        /// </summary>
        public static string ERR_ImplBadConstraints {
            get {
                return ResourceManager.GetString("ERR_ImplBadConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tuple element names in the signature of method &apos;{0}&apos; must match the tuple element names of interface method &apos;{1}&apos; (including on the return type)..
        /// </summary>
        public static string ERR_ImplBadTupleNames {
            get {
                return ResourceManager.GetString("ERR_ImplBadTupleNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An &apos;implicit&apos; user-defined conversion operator cannot be declared checked.
        /// </summary>
        public static string ERR_ImplicitConversionOperatorCantBeChecked {
            get {
                return ResourceManager.GetString("ERR_ImplicitConversionOperatorCantBeChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implicitly implement an inaccessible member..
        /// </summary>
        public static string ERR_ImplicitImplementationOfInaccessibleInterfaceMember {
            get {
                return ResourceManager.GetString("ERR_ImplicitImplementationOfInaccessibleInterfaceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; cannot implicitly implement a non-public member in C# {3}. Please use language version &apos;{4}&apos; or greater..
        /// </summary>
        public static string ERR_ImplicitImplementationOfNonPublicInterfaceMember {
            get {
                return ResourceManager.GetString("ERR_ImplicitImplementationOfNonPublicInterfaceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invocation of implicit Index Indexer cannot name the argument..
        /// </summary>
        public static string ERR_ImplicitIndexIndexerWithName {
            get {
                return ResourceManager.GetString("ERR_ImplicitIndexIndexerWithName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No best type found for implicitly-typed array.
        /// </summary>
        public static string ERR_ImplicitlyTypedArrayNoBestType {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedArrayNoBestType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly typed lambda parameter &apos;{0}&apos; cannot have a default value..
        /// </summary>
        public static string ERR_ImplicitlyTypedDefaultParameter {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedDefaultParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly-typed local variables cannot be fixed.
        /// </summary>
        public static string ERR_ImplicitlyTypedLocalCannotBeFixed {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedLocalCannotBeFixed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference to an implicitly-typed out variable &apos;{0}&apos; is not permitted in the same argument list..
        /// </summary>
        public static string ERR_ImplicitlyTypedOutVariableUsedInTheSameArgumentList {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedOutVariableUsedInTheSameArgumentList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot initialize an implicitly-typed variable with an array initializer.
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableAssignedArrayInitializer {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableAssignedArrayInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign {0} to an implicitly-typed variable.
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableAssignedBadValue {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableAssignedBadValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly-typed variables cannot be constant.
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableCannotBeConst {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableCannotBeConst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly-typed variables cannot be STATIC..
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableCannotBeStatic {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableCannotBeStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly-typed variables cannot have multiple declarators.
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableMultipleDeclarator {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableMultipleDeclarator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Implicitly-typed variables must be initialized.
        /// </summary>
        public static string ERR_ImplicitlyTypedVariableWithNoInitializer {
            get {
                return ResourceManager.GetString("ERR_ImplicitlyTypedVariableWithNoInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; may not be used as the target type of new().
        /// </summary>
        public static string ERR_ImplicitObjectCreationIllegalTargetType {
            get {
                return ResourceManager.GetString("ERR_ImplicitObjectCreationIllegalTargetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no target type for &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ImplicitObjectCreationNoTargetType {
            get {
                return ResourceManager.GetString("ERR_ImplicitObjectCreationNoTargetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of new() is not valid in this context.
        /// </summary>
        public static string ERR_ImplicitObjectCreationNotValid {
            get {
                return ResourceManager.GetString("ERR_ImplicitObjectCreationNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invocation of implicit Range Indexer cannot name the argument..
        /// </summary>
        public static string ERR_ImplicitRangeIndexerWithName {
            get {
                return ResourceManager.GetString("ERR_ImplicitRangeIndexerWithName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Imported type &apos;{0}&apos; is invalid. It contains a circular base type dependency..
        /// </summary>
        public static string ERR_ImportedCircularBase {
            get {
                return ResourceManager.GetString("ERR_ImportedCircularBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The referenced file &apos;{0}&apos; is not an assembly.
        /// </summary>
        public static string ERR_ImportNonAssembly {
            get {
                return ResourceManager.GetString("ERR_ImportNonAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property or indexer &apos;{0}&apos; cannot be used in this context because the get accessor is inaccessible.
        /// </summary>
        public static string ERR_InaccessibleGetter {
            get {
                return ResourceManager.GetString("ERR_InaccessibleGetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property or indexer &apos;{0}&apos; cannot be used in this context because the set accessor is inaccessible.
        /// </summary>
        public static string ERR_InaccessibleSetter {
            get {
                return ResourceManager.GetString("ERR_InaccessibleSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An out parameter cannot have the In attribute.
        /// </summary>
        public static string ERR_InAttrOnOutParam {
            get {
                return ResourceManager.GetString("ERR_InAttrOnOutParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Two indexers have different names; the IndexerName attribute must be used with the same name on every indexer within a type.
        /// </summary>
        public static string ERR_InconsistentIndexerNames {
            get {
                return ResourceManager.GetString("ERR_InconsistentIndexerNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent lambda parameter usage; parameter types must be all explicit or all implicit.
        /// </summary>
        public static string ERR_InconsistentLambdaParameterUsage {
            get {
                return ResourceManager.GetString("ERR_InconsistentLambdaParameterUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operand of an increment or decrement operator must be a variable, property or indexer.
        /// </summary>
        public static string ERR_IncrementLvalueExpected {
            get {
                return ResourceManager.GetString("ERR_IncrementLvalueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexed property &apos;{0}&apos; must have all arguments optional.
        /// </summary>
        public static string ERR_IndexedPropertyMustHaveAllOptionalParams {
            get {
                return ResourceManager.GetString("ERR_IndexedPropertyMustHaveAllOptionalParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexed property &apos;{0}&apos; has non-optional arguments which must be provided.
        /// </summary>
        public static string ERR_IndexedPropertyRequiresParams {
            get {
                return ResourceManager.GetString("ERR_IndexedPropertyRequiresParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexers cannot have void type.
        /// </summary>
        public static string ERR_IndexerCantHaveVoidType {
            get {
                return ResourceManager.GetString("ERR_IndexerCantHaveVoidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot declare indexers in a static class.
        /// </summary>
        public static string ERR_IndexerInStaticClass {
            get {
                return ResourceManager.GetString("ERR_IndexerInStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexers must have at least one parameter.
        /// </summary>
        public static string ERR_IndexerNeedsParam {
            get {
                return ResourceManager.GetString("ERR_IndexerNeedsParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexed properties cannot be declared with single line GET/SET Accessors..
        /// </summary>
        public static string ERR_IndexPropertyLineAccessors {
            get {
                return ResourceManager.GetString("ERR_IndexPropertyLineAccessors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor &apos;{0}&apos; cannot call itself through another constructor.
        /// </summary>
        public static string ERR_IndirectRecursiveConstructorCall {
            get {
                return ResourceManager.GetString("ERR_IndirectRecursiveConstructorCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments with &apos;in&apos; modifier cannot be used in dynamically dispatched expressions..
        /// </summary>
        public static string ERR_InDynamicMethodArg {
            get {
                return ResourceManager.GetString("ERR_InDynamicMethodArg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;in&apos; expected.
        /// </summary>
        public static string ERR_InExpected {
            get {
                return ResourceManager.GetString("ERR_InExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first &apos;in&apos; or &apos;ref readonly&apos; parameter of the extension method &apos;{0}&apos; must be a concrete (non-generic) value type..
        /// </summary>
        public static string ERR_InExtensionMustBeValueType {
            get {
                return ResourceManager.GetString("ERR_InExtensionMustBeValueType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inheriting from a record with a sealed &apos;Object.ToString&apos; is not supported in C# {0}. Please use language version &apos;{1}&apos; or greater..
        /// </summary>
        public static string ERR_InheritingFromRecordWithSealedToString {
            get {
                return ResourceManager.GetString("ERR_InheritingFromRecordWithSealedToString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;init&apos; accessors cannot be marked &apos;readonly&apos;. Mark &apos;{0}&apos; readonly instead..
        /// </summary>
        public static string ERR_InitCannotBeReadonly {
            get {
                return ResourceManager.GetString("ERR_InitCannotBeReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot initialize a by-reference variable with a value.
        /// </summary>
        public static string ERR_InitializeByReferenceVariableWithValue {
            get {
                return ResourceManager.GetString("ERR_InitializeByReferenceVariableWithValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot initialize a by-value variable with a reference.
        /// </summary>
        public static string ERR_InitializeByValueVariableWithReference {
            get {
                return ResourceManager.GetString("ERR_InitializeByValueVariableWithReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded method match &apos;{0}&apos; for the collection initializer element cannot be used. Collection initializer &apos;Add&apos; methods cannot have ref or out parameters..
        /// </summary>
        public static string ERR_InitializerAddHasParamModifiers {
            get {
                return ResourceManager.GetString("ERR_InitializerAddHasParamModifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded method match for &apos;{0}&apos; has wrong signature for the initializer element. The initializable Add must be an accessible instance method..
        /// </summary>
        public static string ERR_InitializerAddHasWrongSignature {
            get {
                return ResourceManager.GetString("ERR_InitializerAddHasWrongSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Structs without explicit constructors cannot contain members with initializers..
        /// </summary>
        public static string ERR_InitializerInStructWithoutExplicitConstructor {
            get {
                return ResourceManager.GetString("ERR_InitializerInStructWithoutExplicitConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only auto-implemented properties can have initializers..
        /// </summary>
        public static string ERR_InitializerOnNonAutoProperty {
            get {
                return ResourceManager.GetString("ERR_InitializerOnNonAutoProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Init and Exit procedures cannot define parameters..
        /// </summary>
        public static string ERR_InitProceduresCannotDefineParameters {
            get {
                return ResourceManager.GetString("ERR_InitProceduresCannotDefineParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;System.Runtime.CompilerServices.InlineArray&apos; cannot be applied to a record struct..
        /// </summary>
        public static string ERR_InlineArrayAttributeOnRecord {
            get {
                return ResourceManager.GetString("ERR_InlineArrayAttributeOnRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elements of an inline array type can be accessed only with a single argument implicitly convertible to &apos;int&apos;, &apos;System.Index&apos;, or &apos;System.Range&apos;..
        /// </summary>
        public static string ERR_InlineArrayBadIndex {
            get {
                return ResourceManager.GetString("ERR_InlineArrayBadIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert expression to &apos;{0}&apos; because it may not be passed or returned by reference.
        /// </summary>
        public static string ERR_InlineArrayConversionToReadOnlySpanNotSupported {
            get {
                return ResourceManager.GetString("ERR_InlineArrayConversionToReadOnlySpanNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert expression to &apos;{0}&apos; because it is not an assignable variable.
        /// </summary>
        public static string ERR_InlineArrayConversionToSpanNotSupported {
            get {
                return ResourceManager.GetString("ERR_InlineArrayConversionToSpanNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement on an inline array of type &apos;{0}&apos; is not supported.
        /// </summary>
        public static string ERR_InlineArrayForEachNotSupported {
            get {
                return ResourceManager.GetString("ERR_InlineArrayForEachNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Index is outside the bounds of the inline array.
        /// </summary>
        public static string ERR_InlineArrayIndexOutOfRange {
            get {
                return ResourceManager.GetString("ERR_InlineArrayIndexOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array element field cannot be declared as required, readonly, volatile, or as a fixed size buffer..
        /// </summary>
        public static string ERR_InlineArrayUnsupportedElementFieldModifier {
            get {
                return ResourceManager.GetString("ERR_InlineArrayUnsupportedElementFieldModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot declare instance members in a static class.
        /// </summary>
        public static string ERR_InstanceMemberInStaticClass {
            get {
                return ResourceManager.GetString("ERR_InstanceMemberInStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance properties in interfaces cannot have initializers..
        /// </summary>
        public static string ERR_InstancePropertyInitializerInInterface {
            get {
                return ResourceManager.GetString("ERR_InstancePropertyInitializerInInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an instance of the static class &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InstantiatingStaticClass {
            get {
                return ResourceManager.GetString("ERR_InstantiatingStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression is too long or complex to compile.
        /// </summary>
        public static string ERR_InsufficientStack {
            get {
                return ResourceManager.GetString("ERR_InsufficientStack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Division by constant zero.
        /// </summary>
        public static string ERR_IntDivByZero {
            get {
                return ResourceManager.GetString("ERR_IntDivByZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type byte, sbyte, short, ushort, int, uint, long, or ulong expected.
        /// </summary>
        public static string ERR_IntegralTypeExpected {
            get {
                return ResourceManager.GetString("ERR_IntegralTypeExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of an integral type expected.
        /// </summary>
        public static string ERR_IntegralTypeValueExpected {
            get {
                return ResourceManager.GetString("ERR_IntegralTypeValueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept &apos;{0}&apos; because it is not an invocation of an ordinary member method..
        /// </summary>
        public static string ERR_InterceptableMethodMustBeOrdinary {
            get {
                return ResourceManager.GetString("ERR_InterceptableMethodMustBeOrdinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; must be non-generic or have arity {1} to match &apos;{2}&apos;..
        /// </summary>
        public static string ERR_InterceptorArityNotCompatible {
            get {
                return ResourceManager.GetString("ERR_InterceptorArityNotCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; must be non-generic to match &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorCannotBeGeneric {
            get {
                return ResourceManager.GetString("ERR_InterceptorCannotBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A nameof operator cannot be intercepted..
        /// </summary>
        public static string ERR_InterceptorCannotInterceptNameof {
            get {
                return ResourceManager.GetString("ERR_InterceptorCannotInterceptNameof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interceptor cannot be marked with &apos;UnmanagedCallersOnlyAttribute&apos;..
        /// </summary>
        public static string ERR_InterceptorCannotUseUnmanagedCallersOnly {
            get {
                return ResourceManager.GetString("ERR_InterceptorCannotUseUnmanagedCallersOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given line is &apos;{0}&apos; characters long, which is fewer than the provided character number &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorCharacterOutOfRange {
            get {
                return ResourceManager.GetString("ERR_InterceptorCharacterOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; cannot be used as an interceptor because its containing type has type parameters..
        /// </summary>
        public static string ERR_InterceptorContainingTypeCannotBeGeneric {
            get {
                return ResourceManager.GetString("ERR_InterceptorContainingTypeCannotBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interceptor cannot have a &apos;null&apos; file path..
        /// </summary>
        public static string ERR_InterceptorFilePathCannotBeNull {
            get {
                return ResourceManager.GetString("ERR_InterceptorFilePathCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interceptor cannot be declared in the global namespace..
        /// </summary>
        public static string ERR_InterceptorGlobalNamespace {
            get {
                return ResourceManager.GetString("ERR_InterceptorGlobalNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line and character numbers provided to InterceptsLocationAttribute must be positive..
        /// </summary>
        public static string ERR_InterceptorLineCharacterMustBePositive {
            get {
                return ResourceManager.GetString("ERR_InterceptorLineCharacterMustBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given file has &apos;{0}&apos; lines, which is fewer than the provided line number &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorLineOutOfRange {
            get {
                return ResourceManager.GetString("ERR_InterceptorLineOutOfRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interceptor method must be an ordinary member method..
        /// </summary>
        public static string ERR_InterceptorMethodMustBeOrdinary {
            get {
                return ResourceManager.GetString("ERR_InterceptorMethodMustBeOrdinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interceptor must have a &apos;this&apos; parameter matching parameter &apos;{0}&apos; on &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorMustHaveMatchingThisParameter {
            get {
                return ResourceManager.GetString("ERR_InterceptorMustHaveMatchingThisParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interceptor must not have a &apos;this&apos; parameter because &apos;{0}&apos; does not have a &apos;this&apos; parameter..
        /// </summary>
        public static string ERR_InterceptorMustNotHaveThisParameter {
            get {
                return ResourceManager.GetString("ERR_InterceptorMustNotHaveThisParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided line and character number does not refer to the start of token &apos;{0}&apos;. Did you mean to use line &apos;{1}&apos; and character &apos;{2}&apos;?.
        /// </summary>
        public static string ERR_InterceptorMustReferToStartOfTokenPosition {
            get {
                return ResourceManager.GetString("ERR_InterceptorMustReferToStartOfTokenPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible method name &apos;{0}&apos; cannot be intercepted because it is not being invoked..
        /// </summary>
        public static string ERR_InterceptorNameNotInvoked {
            get {
                return ResourceManager.GetString("ERR_InterceptorNameNotInvoked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept a call in file with path &apos;{0}&apos; because multiple files in the compilation have this path..
        /// </summary>
        public static string ERR_InterceptorNonUniquePath {
            get {
                return ResourceManager.GetString("ERR_InterceptorNonUniquePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept call with &apos;{0}&apos; because it is not accessible within &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorNotAccessible {
            get {
                return ResourceManager.GetString("ERR_InterceptorNotAccessible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept: compilation does not contain a file with path &apos;{0}&apos;..
        /// </summary>
        public static string ERR_InterceptorPathNotInCompilation {
            get {
                return ResourceManager.GetString("ERR_InterceptorPathNotInCompilation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept: compilation does not contain a file with path &apos;{0}&apos;. Did you mean to use path &apos;{1}&apos;?.
        /// </summary>
        public static string ERR_InterceptorPathNotInCompilationWithCandidate {
            get {
                return ResourceManager.GetString("ERR_InterceptorPathNotInCompilationWithCandidate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept: Path &apos;{0}&apos; is unmapped. Expected mapped path &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterceptorPathNotInCompilationWithUnmappedCandidate {
            get {
                return ResourceManager.GetString("ERR_InterceptorPathNotInCompilationWithUnmappedCandidate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided line and character number does not refer to an interceptable method name, but rather to token &apos;{0}&apos;..
        /// </summary>
        public static string ERR_InterceptorPositionBadToken {
            get {
                return ResourceManager.GetString("ERR_InterceptorPositionBadToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept call to &apos;{0}&apos; with &apos;{1}&apos; because of a difference in &apos;scoped&apos; modifiers or &apos;[UnscopedRef]&apos; attributes..
        /// </summary>
        public static string ERR_InterceptorScopedMismatch {
            get {
                return ResourceManager.GetString("ERR_InterceptorScopedMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;interceptors&apos; experimental feature is not enabled in this namespace. Add &apos;{0}&apos; to your project..
        /// </summary>
        public static string ERR_InterceptorsFeatureNotEnabled {
            get {
                return ResourceManager.GetString("ERR_InterceptorsFeatureNotEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept method &apos;{0}&apos; with interceptor &apos;{1}&apos; because the signatures do not match..
        /// </summary>
        public static string ERR_InterceptorSignatureMismatch {
            get {
                return ResourceManager.GetString("ERR_InterceptorSignatureMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data argument to InterceptsLocationAttribute is not in the correct format..
        /// </summary>
        public static string ERR_InterceptsLocationDataInvalidFormat {
            get {
                return ResourceManager.GetString("ERR_InterceptsLocationDataInvalidFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data argument to InterceptsLocationAttribute refers to an invalid position in file &apos;{0}&apos;..
        /// </summary>
        public static string ERR_InterceptsLocationDataInvalidPosition {
            get {
                return ResourceManager.GetString("ERR_InterceptsLocationDataInvalidPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept a call in file &apos;{0}&apos; because it is duplicated elsewhere in the compilation..
        /// </summary>
        public static string ERR_InterceptsLocationDuplicateFile {
            get {
                return ResourceManager.GetString("ERR_InterceptsLocationDuplicateFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot intercept a call in file &apos;{0}&apos; because a matching file was not found in the compilation..
        /// </summary>
        public static string ERR_InterceptsLocationFileNotFound {
            get {
                return ResourceManager.GetString("ERR_InterceptsLocationFileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version &apos;{0}&apos; of the interceptors format is not supported. The latest supported version is &apos;1&apos;..
        /// </summary>
        public static string ERR_InterceptsLocationUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_InterceptsLocationUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: instance event in interface cannot have initializer.
        /// </summary>
        public static string ERR_InterfaceEventInitializer {
            get {
                return ResourceManager.GetString("ERR_InterfaceEventInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface method {0} and implementation {1} have different calling conventions..
        /// </summary>
        public static string ERR_InterfaceImplementationDifferentCallingConvention {
            get {
                return ResourceManager.GetString("ERR_InterfaceImplementationDifferentCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional member &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos;.
        /// </summary>
        public static string ERR_InterfaceImplementedByConditional {
            get {
                return ResourceManager.GetString("ERR_InterfaceImplementedByConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;UnmanagedCallersOnly&apos; method &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos;.
        /// </summary>
        public static string ERR_InterfaceImplementedByUnmanagedCallersOnlyMethod {
            get {
                return ResourceManager.GetString("ERR_InterfaceImplementedByUnmanagedCallersOnlyMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos; because it has an __arglist parameter.
        /// </summary>
        public static string ERR_InterfaceImplementedImplicitlyByVariadic {
            get {
                return ResourceManager.GetString("ERR_InterfaceImplementedImplicitlyByVariadic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; in explicit interface declaration is not found among members of the interface that can be implemented.
        /// </summary>
        public static string ERR_InterfaceMemberNotFound {
            get {
                return ResourceManager.GetString("ERR_InterfaceMemberNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interfaces cannot contain instance constructors.
        /// </summary>
        public static string ERR_InterfacesCantContainConstructors {
            get {
                return ResourceManager.GetString("ERR_InterfacesCantContainConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conversion, equality, or inequality operators declared in interfaces must be abstract or virtual.
        /// </summary>
        public static string ERR_InterfacesCantContainConversionOrEqualityOperators {
            get {
                return ResourceManager.GetString("ERR_InterfacesCantContainConversionOrEqualityOperators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interfaces cannot contain instance fields.
        /// </summary>
        public static string ERR_InterfacesCantContainFields {
            get {
                return ResourceManager.GetString("ERR_InterfacesCantContainFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal compiler error has occurred: &apos;{0}&apos;, {1}.
        /// </summary>
        public static string ERR_Internal {
            get {
                return ResourceManager.GetString("ERR_Internal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error in the C# compiler..
        /// </summary>
        public static string ERR_InternalError {
            get {
                return ResourceManager.GetString("ERR_InternalError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedded interop method &apos;{0}&apos; contains a body..
        /// </summary>
        public static string ERR_InteropMethodWithBody {
            get {
                return ResourceManager.GetString("ERR_InteropMethodWithBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedded interop struct &apos;{0}&apos; can contain only public instance fields..
        /// </summary>
        public static string ERR_InteropStructContainsMethods {
            get {
                return ResourceManager.GetString("ERR_InteropStructContainsMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interop type &apos;{0}&apos; cannot be embedded because it is missing the required &apos;{1}&apos; attribute..
        /// </summary>
        public static string ERR_InteropTypeMissingAttribute {
            get {
                return ResourceManager.GetString("ERR_InteropTypeMissingAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot embed interop type &apos;{0}&apos; found in both assembly &apos;{1}&apos; and &apos;{2}&apos;. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_InteropTypesWithSameNameAndGuid {
            get {
                return ResourceManager.GetString("ERR_InteropTypesWithSameNameAndGuid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The InterpolatedStringHandlerArgumentAttribute applied to parameter &apos;{0}&apos; is malformed and cannot be interpreted. Construct an instance of &apos;{1}&apos; manually..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerArgumentAttributeMalformed {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerArgumentAttributeMalformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is an argument to the interpolated string handler conversion on parameter &apos;{1}&apos;, but the corresponding argument is specified after the interpolated string expression. Reorder the arguments to move &apos;{0}&apos; before &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerArgumentLocatedAfterInterpolatedString {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerArgumentLocatedAfterInterpolatedString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is not explicitly provided, but is used as an argument to the interpolated string handler conversion on parameter &apos;{1}&apos;. Specify the value of &apos;{0}&apos; before &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerArgumentOptionalNotSpecified {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerArgumentOptionalNotSpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An interpolated string handler construction cannot use dynamic. Manually construct an instance of &apos;{0}&apos;..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerCreationCannotUseDynamic {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerCreationCannotUseDynamic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolated string handler method &apos;{0}&apos; has inconsistent return type. Expected to return &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerMethodReturnInconsistent {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerMethodReturnInconsistent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolated string handler method &apos;{0}&apos; is malformed. It does not return &apos;void&apos; or &apos;bool&apos;..
        /// </summary>
        public static string ERR_InterpolatedStringHandlerMethodReturnMalformed {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringHandlerMethodReturnMalformed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interpolated string handler conversions that reference the instance being indexed cannot be used in indexer member initializers..
        /// </summary>
        public static string ERR_InterpolatedStringsReferencingInstanceCannotBeInObjectInitializers {
            get {
                return ResourceManager.GetString("ERR_InterpolatedStringsReferencingInstanceCannotBeInObjectInitializers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Integral constant is too large.
        /// </summary>
        public static string ERR_IntOverflow {
            get {
                return ResourceManager.GetString("ERR_IntOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot take the address of the given expression.
        /// </summary>
        public static string ERR_InvalidAddrOp {
            get {
                return ResourceManager.GetString("ERR_InvalidAddrOp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid anonymous type member declarator. Anonymous type members must be declared with a member assignment, simple name or member access..
        /// </summary>
        public static string ERR_InvalidAnonymousTypeMemberDeclarator {
            get {
                return ResourceManager.GetString("ERR_InvalidAnonymousTypeMemberDeclarator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid rank specifier: expected &apos;,&apos; or &apos;]&apos;.
        /// </summary>
        public static string ERR_InvalidArray {
            get {
                return ResourceManager.GetString("ERR_InvalidArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly culture strings may not contain embedded NUL characters..
        /// </summary>
        public static string ERR_InvalidAssemblyCulture {
            get {
                return ResourceManager.GetString("ERR_InvalidAssemblyCulture", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Executables cannot be satellite assemblies; culture should always be empty.
        /// </summary>
        public static string ERR_InvalidAssemblyCultureForExe {
            get {
                return ResourceManager.GetString("ERR_InvalidAssemblyCultureForExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly reference &apos;{0}&apos; is invalid and cannot be resolved.
        /// </summary>
        public static string ERR_InvalidAssemblyName {
            get {
                return ResourceManager.GetString("ERR_InvalidAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for argument to &apos;{0}&apos; attribute.
        /// </summary>
        public static string ERR_InvalidAttributeArgument {
            get {
                return ResourceManager.GetString("ERR_InvalidAttributeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is of type &apos;{1}&apos;. The type specified in a constant declaration must be sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool, string, an enum-type, or a reference-type..
        /// </summary>
        public static string ERR_InvalidConstantDeclarationType {
            get {
                return ResourceManager.GetString("ERR_InvalidConstantDeclarationType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read debug information of method &apos;{0}&apos; (token 0x{1:X8}) from assembly &apos;{2}&apos;.
        /// </summary>
        public static string ERR_InvalidDebugInfo {
            get {
                return ResourceManager.GetString("ERR_InvalidDebugInfo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid debug information format: {0}.
        /// </summary>
        public static string ERR_InvalidDebugInformationFormat {
            get {
                return ResourceManager.GetString("ERR_InvalidDebugInformationFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delegate &apos;{0}&apos; has no invoke method or an invoke method with a return type or parameter types that are not supported..
        /// </summary>
        public static string ERR_InvalidDelegateType {
            get {
                return ResourceManager.GetString("ERR_InvalidDelegateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid dialect {0}. Must be &apos;Core&apos;, &apos;Vo&apos;, &apos;Vulcan&apos;, &apos;dBase&apos;, &apos;FoxPro&apos;, &apos;Harbour&apos; or &apos;XBasepp&apos;.
        /// </summary>
        public static string ERR_InvalidDialect {
            get {
                return ResourceManager.GetString("ERR_InvalidDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid DLL entrypoint &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InvalidDLLEntryPoint {
            get {
                return ResourceManager.GetString("ERR_InvalidDLLEntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression must be implicitly convertible to Boolean or its type &apos;{0}&apos; must define operator &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InvalidDynamicCondition {
            get {
                return ResourceManager.GetString("ERR_InvalidDynamicCondition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The diagnosticId argument to the &apos;Experimental&apos; attribute must be a valid identifier.
        /// </summary>
        public static string ERR_InvalidExperimentalDiagID {
            get {
                return ResourceManager.GetString("ERR_InvalidExperimentalDiagID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid expression term &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InvalidExprTerm {
            get {
                return ResourceManager.GetString("ERR_InvalidExprTerm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid file section alignment &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InvalidFileAlignment {
            get {
                return ResourceManager.GetString("ERR_InvalidFileAlignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fixed size buffers must have a length greater than zero.
        /// </summary>
        public static string ERR_InvalidFixedArraySize {
            get {
                return ResourceManager.GetString("ERR_InvalidFixedArraySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line syntax error: Invalid Guid format &apos;{0}&apos; for option &apos;{1}&apos;.
        /// </summary>
        public static string ERR_InvalidFormatForGuidForOption {
            get {
                return ResourceManager.GetString("ERR_InvalidFormatForGuidForOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid function pointer return type modifier. Valid modifiers are &apos;ref&apos; and &apos;ref readonly&apos;..
        /// </summary>
        public static string ERR_InvalidFuncPointerReturnTypeModifier {
            get {
                return ResourceManager.GetString("ERR_InvalidFuncPointerReturnTypeModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid calling convention specifier for a function pointer..
        /// </summary>
        public static string ERR_InvalidFunctionPointerCallingConvention {
            get {
                return ResourceManager.GetString("ERR_InvalidFunctionPointerCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type specified as an argument for TypeForwardedTo attribute.
        /// </summary>
        public static string ERR_InvalidFwdType {
            get {
                return ResourceManager.GetString("ERR_InvalidFwdType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A goto case is only valid inside a switch statement.
        /// </summary>
        public static string ERR_InvalidGotoCase {
            get {
                return ResourceManager.GetString("ERR_InvalidGotoCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid hash algorithm name: &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InvalidHashAlgorithmName {
            get {
                return ResourceManager.GetString("ERR_InvalidHashAlgorithmName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid initializer member declarator.
        /// </summary>
        public static string ERR_InvalidInitializerElementInitializer {
            get {
                return ResourceManager.GetString("ERR_InvalidInitializerElementInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array struct must declare one and only one instance field..
        /// </summary>
        public static string ERR_InvalidInlineArrayFields {
            get {
                return ResourceManager.GetString("ERR_InvalidInlineArrayFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array struct must not have explicit layout..
        /// </summary>
        public static string ERR_InvalidInlineArrayLayout {
            get {
                return ResourceManager.GetString("ERR_InvalidInlineArrayLayout", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array length must be greater than 0..
        /// </summary>
        public static string ERR_InvalidInlineArrayLength {
            get {
                return ResourceManager.GetString("ERR_InvalidInlineArrayLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid instrumentation kind: {0}.
        /// </summary>
        public static string ERR_InvalidInstrumentationKind {
            get {
                return ResourceManager.GetString("ERR_InvalidInstrumentationKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid parameter name from &apos;{1}&apos;..
        /// </summary>
        public static string ERR_InvalidInterpolatedStringHandlerArgumentName {
            get {
                return ResourceManager.GetString("ERR_InvalidInterpolatedStringHandlerArgumentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The line number specified for #line directive is missing or invalid.
        /// </summary>
        public static string ERR_InvalidLineNumber {
            get {
                return ResourceManager.GetString("ERR_InvalidLineNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid {0} literal &apos;{1}&apos;: {2}..
        /// </summary>
        public static string ERR_InvalidLiteral {
            get {
                return ResourceManager.GetString("ERR_InvalidLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid token &apos;{0}&apos; in class, record, struct, or interface member declaration.
        /// </summary>
        public static string ERR_InvalidMemberDecl {
            get {
                return ResourceManager.GetString("ERR_InvalidMemberDecl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The modifier &apos;{0}&apos; is not valid for this item in C# {1}. Please use language version &apos;{2}&apos; or greater..
        /// </summary>
        public static string ERR_InvalidModifierForLanguageVersion {
            get {
                return ResourceManager.GetString("ERR_InvalidModifierForLanguageVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid value for named attribute argument &apos;{0}&apos;.
        /// </summary>
        public static string ERR_InvalidNamedArgument {
            get {
                return ResourceManager.GetString("ERR_InvalidNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier or a simple member access expected..
        /// </summary>
        public static string ERR_InvalidNameInSubpattern {
            get {
                return ResourceManager.GetString("ERR_InvalidNameInSubpattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number.
        /// </summary>
        public static string ERR_InvalidNumber {
            get {
                return ResourceManager.GetString("ERR_InvalidNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid object creation.
        /// </summary>
        public static string ERR_InvalidObjectCreation {
            get {
                return ResourceManager.GetString("ERR_InvalidObjectCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid output name: {0}.
        /// </summary>
        public static string ERR_InvalidOutputName {
            get {
                return ResourceManager.GetString("ERR_InvalidOutputName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pathmap option was incorrectly formatted..
        /// </summary>
        public static string ERR_InvalidPathMap {
            get {
                return ResourceManager.GetString("ERR_InvalidPathMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid name for a preprocessing symbol; &apos;{0}&apos; is not a valid identifier.
        /// </summary>
        public static string ERR_InvalidPreprocessingSymbol {
            get {
                return ResourceManager.GetString("ERR_InvalidPreprocessingSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid preprocessor expression.
        /// </summary>
        public static string ERR_InvalidPreprocExpr {
            get {
                return ResourceManager.GetString("ERR_InvalidPreprocExpr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use primary constructor parameter &apos;{0}&apos; in this context..
        /// </summary>
        public static string ERR_InvalidPrimaryConstructorParameterReference {
            get {
                return ResourceManager.GetString("ERR_InvalidPrimaryConstructorParameterReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The accessibility modifier of the &apos;{0}&apos; accessor must be more restrictive than the property or indexer &apos;{1}&apos;.
        /// </summary>
        public static string ERR_InvalidPropertyAccessMod {
            get {
                return ResourceManager.GetString("ERR_InvalidPropertyAccessMod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify &apos;readonly&apos; modifiers on both property or indexer &apos;{0}&apos; and its accessor. Remove one of them..
        /// </summary>
        public static string ERR_InvalidPropertyReadOnlyMods {
            get {
                return ResourceManager.GetString("ERR_InvalidPropertyReadOnlyMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of conditional expression cannot be determined because there is no implicit conversion between &apos;{0}&apos; and &apos;{1}&apos;.
        /// </summary>
        public static string ERR_InvalidQM {
            get {
                return ResourceManager.GetString("ERR_InvalidQM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid real literal..
        /// </summary>
        public static string ERR_InvalidReal {
            get {
                return ResourceManager.GetString("ERR_InvalidReal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid signature public key specified in AssemblySignatureKeyAttribute..
        /// </summary>
        public static string ERR_InvalidSignaturePublicKey {
            get {
                return ResourceManager.GetString("ERR_InvalidSignaturePublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid format specifier.
        /// </summary>
        public static string ERR_InvalidSpecifier {
            get {
                return ResourceManager.GetString("ERR_InvalidSpecifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The STACKALLOC keyword needs to be followed by a literal array or an array creation expression..
        /// </summary>
        public static string ERR_InvalidStackAlloc {
            get {
                return ResourceManager.GetString("ERR_InvalidStackAlloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &quot;Invalid rank specifier: expected &apos;]&apos;.
        /// </summary>
        public static string ERR_InvalidStackAllocArray {
            get {
                return ResourceManager.GetString("ERR_InvalidStackAllocArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid version {0} for /subsystemversion. The version must be 6.02 or greater for ARM or AppContainerExe, and 4.00 or greater otherwise.
        /// </summary>
        public static string ERR_InvalidSubsystemVersion {
            get {
                return ResourceManager.GetString("ERR_InvalidSubsystemVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid calling convention type for &apos;UnmanagedCallersOnly&apos;..
        /// </summary>
        public static string ERR_InvalidUnmanagedCallersOnlyCallConv {
            get {
                return ResourceManager.GetString("ERR_InvalidUnmanagedCallersOnlyCallConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version string &apos;{0}&apos; does not conform to the required format - major[.minor[.build[.revision]]].
        /// </summary>
        public static string ERR_InvalidVersionFormat {
            get {
                return ResourceManager.GetString("ERR_InvalidVersionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version string &apos;{0}&apos; does not conform to the required format - major.minor.build.revision (without wildcards).
        /// </summary>
        public static string ERR_InvalidVersionFormat2 {
            get {
                return ResourceManager.GetString("ERR_InvalidVersionFormat2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version string &apos;{0}&apos; contains wildcards, which are not compatible with determinism. Either remove wildcards from the version string, or disable determinism for this compilation.
        /// </summary>
        public static string ERR_InvalidVersionFormatDeterministic {
            get {
                return ResourceManager.GetString("ERR_InvalidVersionFormatDeterministic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The receiver of a `with` expression must have a non-void type..
        /// </summary>
        public static string ERR_InvalidWithReceiverType {
            get {
                return ResourceManager.GetString("ERR_InvalidWithReceiverType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not legal to use nullable reference type &apos;{0}?&apos; in an is-type expression; use the underlying type &apos;{0}&apos; instead..
        /// </summary>
        public static string ERR_IsNullableType {
            get {
                return ResourceManager.GetString("ERR_IsNullableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; can never match the provided pattern..
        /// </summary>
        public static string ERR_IsPatternImpossible {
            get {
                return ResourceManager.GetString("ERR_IsPatternImpossible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; with an iterator block must be &apos;async&apos; to return &apos;{1}&apos;.
        /// </summary>
        public static string ERR_IteratorMustBeAsync {
            get {
                return ResourceManager.GetString("ERR_IteratorMustBeAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword {0} missing.
        /// </summary>
        public static string ERR_KeywordExpected {
            get {
                return ResourceManager.GetString("ERR_KeywordExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No such label &apos;{0}&apos; within the scope of the goto statement.
        /// </summary>
        public static string ERR_LabelNotFound {
            get {
                return ResourceManager.GetString("ERR_LabelNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The label &apos;{0}&apos; shadows another label by the same name in a contained scope.
        /// </summary>
        public static string ERR_LabelShadow {
            get {
                return ResourceManager.GetString("ERR_LabelShadow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert from Lambda Expression to {0}..
        /// </summary>
        public static string ERR_LambdaConversionNotPossible {
            get {
                return ResourceManager.GetString("ERR_LambdaConversionNotPossible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contextual keyword &apos;var&apos; cannot be used as an explicit lambda return type.
        /// </summary>
        public static string ERR_LambdaExplicitReturnTypeVar {
            get {
                return ResourceManager.GetString("ERR_LambdaExplicitReturnTypeVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand of an &apos;is&apos; or &apos;as&apos; operator may not be a lambda expression, anonymous method, or method group..
        /// </summary>
        public static string ERR_LambdaInIsAs {
            get {
                return ResourceManager.GetString("ERR_LambdaInIsAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A lambda expression with attributes cannot be converted to an expression tree.
        /// </summary>
        public static string ERR_LambdaWithAttributesToExpressionTree {
            get {
                return ResourceManager.GetString("ERR_LambdaWithAttributesToExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot assign an untyped codeblock to a delegate of type {0}. Use the Lambda Expression syntax (=&gt;) in stead..
        /// </summary>
        public static string ERR_LamdaWithCodeblockSyntax {
            get {
                return ResourceManager.GetString("ERR_LamdaWithCodeblockSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specified language version &apos;{0}&apos; cannot have leading zeroes.
        /// </summary>
        public static string ERR_LanguageVersionCannotHaveLeadingZeroes {
            get {
                return ResourceManager.GetString("ERR_LanguageVersionCannotHaveLeadingZeroes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos; because feature &apos;{3}&apos; is not available in C# {4}. Please use language version &apos;{5}&apos; or greater..
        /// </summary>
        public static string ERR_LanguageVersionDoesNotSupportInterfaceImplementationForMember {
            get {
                return ResourceManager.GetString("ERR_LanguageVersionDoesNotSupportInterfaceImplementationForMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to { expected.
        /// </summary>
        public static string ERR_LbraceExpected {
            get {
                return ResourceManager.GetString("ERR_LbraceExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;id#&apos; syntax is no longer supported. Use &apos;$id&apos; instead..
        /// </summary>
        public static string ERR_LegacyObjectIdSyntax {
            get {
                return ResourceManager.GetString("ERR_LegacyObjectIdSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line contains different whitespace than the closing line of the raw string literal: &apos;{0}&apos; versus &apos;{1}&apos;.
        /// </summary>
        public static string ERR_LineContainsDifferentWhitespace {
            get {
                return ResourceManager.GetString("ERR_LineContainsDifferentWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Line does not start with the same whitespace as the closing line of the raw string literal..
        /// </summary>
        public static string ERR_LineDoesNotStartWithSameWhitespace {
            get {
                return ResourceManager.GetString("ERR_LineDoesNotStartWithSameWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The #line directive end position must be greater than or equal to the start position.
        /// </summary>
        public static string ERR_LineSpanDirectiveEndLessThanStart {
            get {
                return ResourceManager.GetString("ERR_LineSpanDirectiveEndLessThanStart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The #line directive value is missing or out of range.
        /// </summary>
        public static string ERR_LineSpanDirectiveInvalidValue {
            get {
                return ResourceManager.GetString("ERR_LineSpanDirectiveInvalidValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The #line span directive requires space before the first parenthesis, before the character offset, and before the file name.
        /// </summary>
        public static string ERR_LineSpanDirectiveRequiresSpace {
            get {
                return ResourceManager.GetString("ERR_LineSpanDirectiveRequiresSpace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Linked netmodule metadata must provide a full PE image: &apos;{0}&apos;..
        /// </summary>
        public static string ERR_LinkedNetmoduleMetadataMustProvideFullPEImage {
            get {
                return ResourceManager.GetString("ERR_LinkedNetmoduleMetadataMustProvideFullPEImage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List patterns may not be used for a value of type &apos;{0}&apos;. No suitable &apos;Length&apos; or &apos;Count&apos; property was found..
        /// </summary>
        public static string ERR_ListPatternRequiresLength {
            get {
                return ResourceManager.GetString("ERR_ListPatternRequiresLength", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Literal of type double cannot be implicitly converted to type &apos;{1}&apos;; use an &apos;{0}&apos; suffix to create a literal of this type.
        /// </summary>
        public static string ERR_LiteralDoubleCast {
            get {
                return ResourceManager.GetString("ERR_LiteralDoubleCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #load is only allowed in scripts.
        /// </summary>
        public static string ERR_LoadDirectiveOnlyAllowedInScripts {
            get {
                return ResourceManager.GetString("ERR_LoadDirectiveOnlyAllowedInScripts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local &apos;{0}&apos; or its members cannot have their address taken and be used inside an anonymous method or lambda expression.
        /// </summary>
        public static string ERR_LocalCantBeFixedAndHoisted {
            get {
                return ResourceManager.GetString("ERR_LocalCantBeFixedAndHoisted", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local variable or function named &apos;{0}&apos; is already defined in this scope.
        /// </summary>
        public static string ERR_LocalDuplicate {
            get {
                return ResourceManager.GetString("ERR_LocalDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function &apos;{0}&apos; must declare a body because it is not marked &apos;static extern&apos;..
        /// </summary>
        public static string ERR_LocalFunctionMissingBody {
            get {
                return ResourceManager.GetString("ERR_LocalFunctionMissingBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A local or parameter named &apos;{0}&apos; cannot be declared in this scope because that name is used in an enclosing local scope to define a local or parameter.
        /// </summary>
        public static string ERR_LocalIllegallyOverrides {
            get {
                return ResourceManager.GetString("ERR_LocalIllegallyOverrides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a parameter, local variable, or local function cannot have the same name as a method type parameter.
        /// </summary>
        public static string ERR_LocalSameNameAsTypeParam {
            get {
                return ResourceManager.GetString("ERR_LocalSameNameAsTypeParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Embedding the interop type &apos;{0}&apos; from assembly &apos;{1}&apos; causes a name clash in the current assembly. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_LocalTypeNameClash {
            get {
                return ResourceManager.GetString("ERR_LocalTypeNameClash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a reference type as required by the lock statement.
        /// </summary>
        public static string ERR_LockNeedsReference {
            get {
                return ResourceManager.GetString("ERR_LockNeedsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot do non-virtual member lookup in &apos;{0}&apos; because it is a type parameter.
        /// </summary>
        public static string ERR_LookupInTypeVariable {
            get {
                return ResourceManager.GetString("ERR_LookupInTypeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;{0}&apos; for Main method because it is imported.
        /// </summary>
        public static string ERR_MainClassIsImport {
            get {
                return ResourceManager.GetString("ERR_MainClassIsImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; specified for Main method must be a non-generic class, record, struct, or interface.
        /// </summary>
        public static string ERR_MainClassNotClass {
            get {
                return ResourceManager.GetString("ERR_MainClassNotClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find &apos;{0}&apos; specified for Main method.
        /// </summary>
        public static string ERR_MainClassNotFound {
            get {
                return ResourceManager.GetString("ERR_MainClassNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot take the address of, get the size of, or declare a pointer to a managed type (&apos;{0}&apos;).
        /// </summary>
        public static string ERR_ManagedAddr {
            get {
                return ResourceManager.GetString("ERR_ManagedAddr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unmanaged type &apos;{0}&apos; not valid for fields..
        /// </summary>
        public static string ERR_MarshalUnmanagedTypeNotValidForFields {
            get {
                return ResourceManager.GetString("ERR_MarshalUnmanagedTypeNotValidForFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unmanaged type &apos;{0}&apos; is only valid for fields..
        /// </summary>
        public static string ERR_MarshalUnmanagedTypeOnlyValidForFields {
            get {
                return ResourceManager.GetString("ERR_MarshalUnmanagedTypeOnlyValidForFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{1}&apos; already defines a member called &apos;{0}&apos; with the same parameter types.
        /// </summary>
        public static string ERR_MemberAlreadyExists {
            get {
                return ResourceManager.GetString("ERR_MemberAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate initialization of member &apos;{0}&apos;.
        /// </summary>
        public static string ERR_MemberAlreadyInitialized {
            get {
                return ResourceManager.GetString("ERR_MemberAlreadyInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; cannot be initialized. It is not a field or property..
        /// </summary>
        public static string ERR_MemberCannotBeInitialized {
            get {
                return ResourceManager.GetString("ERR_MemberCannotBeInitialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: member names cannot be the same as their enclosing type.
        /// </summary>
        public static string ERR_MemberNameSameAsType {
            get {
                return ResourceManager.GetString("ERR_MemberNameSameAsType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method must have a return type.
        /// </summary>
        public static string ERR_MemberNeedsType {
            get {
                return ResourceManager.GetString("ERR_MemberNeedsType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{1}&apos; already reserves a member called &apos;{0}&apos; with the same parameter types.
        /// </summary>
        public static string ERR_MemberReserved {
            get {
                return ResourceManager.GetString("ERR_MemberReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a method group.
        /// </summary>
        public static string ERR_MemGroupInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_MemGroupInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A MEMVAR or FIELD with the name &apos;{0}&apos; has already been defined..
        /// </summary>
        public static string ERR_MemvarFieldWithSameName {
            get {
                return ResourceManager.GetString("ERR_MemvarFieldWithSameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Memvar declarations cannot have both an declared dimension and an initialization value..
        /// </summary>
        public static string ERR_MemvarInit {
            get {
                return ResourceManager.GetString("ERR_MemvarInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Merge conflict marker encountered.
        /// </summary>
        public static string ERR_Merge_conflict_marker_encountered {
            get {
                return ResourceManager.GetString("ERR_Merge_conflict_marker_encountered", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name &apos;{0}&apos; exceeds the maximum length allowed in metadata..
        /// </summary>
        public static string ERR_MetadataNameTooLong {
            get {
                return ResourceManager.GetString("ERR_MetadataNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata references are not supported..
        /// </summary>
        public static string ERR_MetadataReferencesNotSupported {
            get {
                return ResourceManager.GetString("ERR_MetadataReferencesNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No overload for &apos;{0}&apos; matches delegate &apos;{1}&apos;.
        /// </summary>
        public static string ERR_MethDelegateMismatch {
            get {
                return ResourceManager.GetString("ERR_MethDelegateMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No overload for &apos;{0}&apos; matches function pointer &apos;{1}&apos;.
        /// </summary>
        public static string ERR_MethFuncPtrMismatch {
            get {
                return ResourceManager.GetString("ERR_MethFuncPtrMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert method group &apos;{0}&apos; to non-delegate type &apos;{1}&apos;. Did you intend to invoke the method?.
        /// </summary>
        public static string ERR_MethGrpToNonDel {
            get {
                return ResourceManager.GetString("ERR_MethGrpToNonDel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot make reference to variable of type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_MethodArgCantBeRefAny {
            get {
                return ResourceManager.GetString("ERR_MethodArgCantBeRefAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; cannot implement interface accessor &apos;{1}&apos; for type &apos;{2}&apos;. Use an explicit interface implementation..
        /// </summary>
        public static string ERR_MethodImplementingAccessor {
            get {
                return ResourceManager.GetString("ERR_MethodImplementingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name expected.
        /// </summary>
        public static string ERR_MethodNameExpected {
            get {
                return ResourceManager.GetString("ERR_MethodNameExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of a method, delegate, or function pointer cannot be &apos;{0}&apos;.
        /// </summary>
        public static string ERR_MethodReturnCantBeRefAny {
            get {
                return ResourceManager.GetString("ERR_MethodReturnCantBeRefAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: The method signature was changed in the method &apos;{1}&apos;. You will have to update the parameter types and/or return type in the method of the subclass too..
        /// </summary>
        public static string ERR_MethodSignatureChanged {
            get {
                return ResourceManager.GetString("ERR_MethodSignatureChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Branches of a ref conditional operator cannot refer to variables with incompatible declaration scopes.
        /// </summary>
        public static string ERR_MismatchedRefEscapeInTernary {
            get {
                return ResourceManager.GetString("ERR_MismatchedRefEscapeInTernary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected keyword &apos;record&apos;. Did you mean &apos;record struct&apos; or &apos;record class&apos;?.
        /// </summary>
        public static string ERR_MisplacedRecord {
            get {
                return ResourceManager.GetString("ERR_MisplacedRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Slice patterns may only be used once and directly inside a list pattern..
        /// </summary>
        public static string ERR_MisplacedSlicePattern {
            get {
                return ResourceManager.GetString("ERR_MisplacedSlicePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected keyword &apos;unchecked&apos;.
        /// </summary>
        public static string ERR_MisplacedUnchecked {
            get {
                return ResourceManager.GetString("ERR_MisplacedUnchecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert method group to function pointer (Are you missing a &apos;&amp;&apos;?).
        /// </summary>
        public static string ERR_MissingAddressOf {
            get {
                return ResourceManager.GetString("ERR_MissingAddressOf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument missing.
        /// </summary>
        public static string ERR_MissingArgument {
            get {
                return ResourceManager.GetString("ERR_MissingArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array creation must have array size or array initializer.
        /// </summary>
        public static string ERR_MissingArraySize {
            get {
                return ResourceManager.GetString("ERR_MissingArraySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The managed coclass wrapper class &apos;{0}&apos; for interface &apos;{1}&apos; cannot be found (are you missing an assembly reference?).
        /// </summary>
        public static string ERR_MissingCoClass {
            get {
                return ResourceManager.GetString("ERR_MissingCoClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /pdb option requires that the /debug option also be used.
        /// </summary>
        public static string ERR_MissingDebugSwitch {
            get {
                return ResourceManager.GetString("ERR_MissingDebugSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No suitable &apos;Deconstruct&apos; instance or extension method was found for type &apos;{0}&apos;, with {1} out parameters and a void return type..
        /// </summary>
        public static string ERR_MissingDeconstruct {
            get {
                return ResourceManager.GetString("ERR_MissingDeconstruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TEXT statement found without matching ENDTEXT..
        /// </summary>
        public static string ERR_MissingEndText {
            get {
                return ResourceManager.GetString("ERR_MissingEndText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line syntax error: Missing Guid for option &apos;{1}&apos;.
        /// </summary>
        public static string ERR_MissingGuidForOption {
            get {
                return ResourceManager.GetString("ERR_MissingGuidForOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source interface &apos;{0}&apos; is missing method &apos;{1}&apos; which is required to embed event &apos;{2}&apos;..
        /// </summary>
        public static string ERR_MissingMethodOnSourceInterface {
            get {
                return ResourceManager.GetString("ERR_MissingMethodOnSourceInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference to &apos;{0}&apos; netmodule missing..
        /// </summary>
        public static string ERR_MissingNetModuleReference {
            get {
                return ResourceManager.GetString("ERR_MissingNetModuleReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing partial modifier on declaration of type &apos;{0}&apos;; another partial declaration of this type exists.
        /// </summary>
        public static string ERR_MissingPartial {
            get {
                return ResourceManager.GetString("ERR_MissingPartial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern missing.
        /// </summary>
        public static string ERR_MissingPattern {
            get {
                return ResourceManager.GetString("ERR_MissingPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Quoted file name, single-line comment or end-of-line expected.
        /// </summary>
        public static string ERR_MissingPPFile {
            get {
                return ResourceManager.GetString("ERR_MissingPPFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing compiler required member &apos;{0}.{1}&apos;.
        /// </summary>
        public static string ERR_MissingPredefinedMember {
            get {
                return ResourceManager.GetString("ERR_MissingPredefinedMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface &apos;{0}&apos; has an invalid source interface which is required to embed event &apos;{1}&apos;..
        /// </summary>
        public static string ERR_MissingSourceInterface {
            get {
                return ResourceManager.GetString("ERR_MissingSourceInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: instance field in types marked with StructLayout(LayoutKind.Explicit) must have a FieldOffset attribute.
        /// </summary>
        public static string ERR_MissingStructOffset {
            get {
                return ResourceManager.GetString("ERR_MissingStructOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference to type &apos;{0}&apos; claims it is defined in &apos;{1}&apos;, but it could not be found.
        /// </summary>
        public static string ERR_MissingTypeInAssembly {
            get {
                return ResourceManager.GetString("ERR_MissingTypeInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference to type &apos;{0}&apos; claims it is defined in this assembly, but it is not defined in source or any added modules.
        /// </summary>
        public static string ERR_MissingTypeInSource {
            get {
                return ResourceManager.GetString("ERR_MissingTypeInSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot locate WITH block for member access expression without left hand side..
        /// </summary>
        public static string ERR_MissingWithStatement {
            get {
                return ResourceManager.GetString("ERR_MissingWithStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement &apos;{1}&apos; because &apos;{2}&apos; is a Windows Runtime event and &apos;{3}&apos; is a regular .NET event..
        /// </summary>
        public static string ERR_MixingWinRTEventWithRegular {
            get {
                return ResourceManager.GetString("ERR_MixingWinRTEventWithRegular", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to emit module &apos;{0}&apos;: {1}.
        /// </summary>
        public static string ERR_ModuleEmitFailure {
            get {
                return ResourceManager.GetString("ERR_ModuleEmitFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module initializer cannot be attributed with &apos;UnmanagedCallersOnly&apos;..
        /// </summary>
        public static string ERR_ModuleInitializerCannotBeUnmanagedCallersOnly {
            get {
                return ResourceManager.GetString("ERR_ModuleInitializerCannotBeUnmanagedCallersOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module initializer method &apos;{0}&apos; must not be generic and must not be contained in a generic type.
        /// </summary>
        public static string ERR_ModuleInitializerMethodAndContainingTypesMustNotBeGeneric {
            get {
                return ResourceManager.GetString("ERR_ModuleInitializerMethodAndContainingTypesMustNotBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module initializer method &apos;{0}&apos; must be accessible at the module level.
        /// </summary>
        public static string ERR_ModuleInitializerMethodMustBeAccessibleOutsideTopLevelType {
            get {
                return ResourceManager.GetString("ERR_ModuleInitializerMethodMustBeAccessibleOutsideTopLevelType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A module initializer must be an ordinary member method.
        /// </summary>
        public static string ERR_ModuleInitializerMethodMustBeOrdinary {
            get {
                return ResourceManager.GetString("ERR_ModuleInitializerMethodMustBeOrdinary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module initializer method &apos;{0}&apos; must be static, and non-virtual, must have no parameters, and must return &apos;void&apos;.
        /// </summary>
        public static string ERR_ModuleInitializerMethodMustBeStaticParameterlessVoid {
            get {
                return ResourceManager.GetString("ERR_ModuleInitializerMethodMustBeStaticParameterlessVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface member &apos;{0}&apos; does not have a most specific implementation. Neither &apos;{1}&apos;, nor &apos;{2}&apos; are most specific..
        /// </summary>
        public static string ERR_MostSpecificImplementationIsNotFound {
            get {
                return ResourceManager.GetString("ERR_MostSpecificImplementationIsNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple analyzer config files cannot be in the same directory (&apos;{0}&apos;)..
        /// </summary>
        public static string ERR_MultipleAnalyzerConfigsInSameDir {
            get {
                return ResourceManager.GetString("ERR_MultipleAnalyzerConfigsInSameDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Program has more than one entry point defined. Compile with /main to specify the type that contains the entry point..
        /// </summary>
        public static string ERR_MultipleEntryPoints {
            get {
                return ResourceManager.GetString("ERR_MultipleEntryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute [EnumeratorCancellation] cannot be used on multiple parameters.
        /// </summary>
        public static string ERR_MultipleEnumeratorCancellationAttributes {
            get {
                return ResourceManager.GetString("ERR_MultipleEnumeratorCancellationAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file can only contain one file-scoped namespace declaration..
        /// </summary>
        public static string ERR_MultipleFileScopedNamespace {
            get {
                return ResourceManager.GetString("ERR_MultipleFileScopedNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous foreach statement cannot operate on variables of type &apos;{0}&apos; because it implements multiple instantiations of &apos;{1}&apos;; try casting to a specific interface instantiation.
        /// </summary>
        public static string ERR_MultipleIAsyncEnumOfT {
            get {
                return ResourceManager.GetString("ERR_MultipleIAsyncEnumOfT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach statement cannot operate on variables of type &apos;{0}&apos; because it implements multiple instantiations of &apos;{1}&apos;; try casting to a specific interface instantiation.
        /// </summary>
        public static string ERR_MultipleIEnumOfT {
            get {
                return ResourceManager.GetString("ERR_MultipleIEnumOfT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a single partial type declaration may have a parameter list.
        /// </summary>
        public static string ERR_MultipleRecordParameterLists {
            get {
                return ResourceManager.GetString("ERR_MultipleRecordParameterLists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use more than one type in a for, using, fixed, or declaration statement.
        /// </summary>
        public static string ERR_MultiTypeInDeclaration {
            get {
                return ResourceManager.GetString("ERR_MultiTypeInDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A foreach loop must declare its iteration variables..
        /// </summary>
        public static string ERR_MustDeclareForeachIteration {
            get {
                return ResourceManager.GetString("ERR_MustDeclareForeachIteration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In order for &apos;{0}&apos; to be applicable as a short circuit operator, its declaring type &apos;{1}&apos; must define operator true and operator false.
        /// </summary>
        public static string ERR_MustHaveOpTF {
            get {
                return ResourceManager.GetString("ERR_MustHaveOpTF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By-value returns may only be used in methods that return by value.
        /// </summary>
        public static string ERR_MustHaveRefReturn {
            get {
                return ResourceManager.GetString("ERR_MustHaveRefReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to By-reference returns may only be used in methods that return by reference.
        /// </summary>
        public static string ERR_MustNotHaveRefReturn {
            get {
                return ResourceManager.GetString("ERR_MustNotHaveRefReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compilation options &apos;{0}&apos; and &apos;{1}&apos; can&apos;t both be specified at the same time..
        /// </summary>
        public static string ERR_MutuallyExclusiveOptions {
            get {
                return ResourceManager.GetString("ERR_MutuallyExclusiveOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named attribute argument expected.
        /// </summary>
        public static string ERR_NamedArgumentExpected {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An array access may not have a named argument specifier.
        /// </summary>
        public static string ERR_NamedArgumentForArray {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentForArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An inline array access may not have a named argument specifier.
        /// </summary>
        public static string ERR_NamedArgumentForInlineArray {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentForInlineArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named argument specifications must appear after all fixed arguments have been specified. Please use language version {0} or greater to allow non-trailing named arguments..
        /// </summary>
        public static string ERR_NamedArgumentSpecificationBeforeFixedArgument {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentSpecificationBeforeFixedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named argument specifications must appear after all fixed arguments have been specified in a dynamic invocation..
        /// </summary>
        public static string ERR_NamedArgumentSpecificationBeforeFixedArgumentInDynamicInvocation {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentSpecificationBeforeFixedArgumentInDynamicInvocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Named argument &apos;{0}&apos; specifies a parameter for which a positional argument has already been given.
        /// </summary>
        public static string ERR_NamedArgumentUsedInPositional {
            get {
                return ResourceManager.GetString("ERR_NamedArgumentUsedInPositional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; does not exist in the current context.
        /// </summary>
        public static string ERR_NameNotInContext {
            get {
                return ResourceManager.GetString("ERR_NameNotInContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; does not exist in the current context (are you missing a reference to assembly &apos;{1}&apos;?).
        /// </summary>
        public static string ERR_NameNotInContextPossibleMissingReference {
            get {
                return ResourceManager.GetString("ERR_NameNotInContextPossibleMissingReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension method groups are not allowed as an argument to &apos;nameof&apos;..
        /// </summary>
        public static string ERR_NameofExtensionMethod {
            get {
                return ResourceManager.GetString("ERR_NameofExtensionMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameters are not allowed on a method group as an argument to &apos;nameof&apos;..
        /// </summary>
        public static string ERR_NameofMethodGroupWithTypeParameters {
            get {
                return ResourceManager.GetString("ERR_NameofMethodGroupWithTypeParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot declare namespace in script code.
        /// </summary>
        public static string ERR_NamespaceNotAllowedInScript {
            get {
                return ResourceManager.GetString("ERR_NamespaceNotAllowedInScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A namespace cannot directly contain members such as fields, methods or statements.
        /// </summary>
        public static string ERR_NamespaceUnexpected {
            get {
                return ResourceManager.GetString("ERR_NamespaceUnexpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an array with a negative size.
        /// </summary>
        public static string ERR_NegativeArraySize {
            get {
                return ResourceManager.GetString("ERR_NegativeArraySize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use a negative size with stackalloc.
        /// </summary>
        public static string ERR_NegativeStackAllocSize {
            get {
                return ResourceManager.GetString("ERR_NegativeStackAllocSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class name {0} for method differs from parent class name {1}.
        /// </summary>
        public static string ERR_NestedMethodMustHaveSameNameAsParentClass {
            get {
                return ResourceManager.GetString("ERR_NestedMethodMustHaveSameNameAsParentClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module name &apos;{0}&apos; stored in &apos;{1}&apos; must match its filename..
        /// </summary>
        public static string ERR_NetModuleNameMismatch {
            get {
                return ResourceManager.GetString("ERR_NetModuleNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module &apos;{0}&apos; is already defined in this assembly. Each module must have a unique filename..
        /// </summary>
        public static string ERR_NetModuleNameMustBeUnique {
            get {
                return ResourceManager.GetString("ERR_NetModuleNameMustBeUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The new() constraint must be the last restrictive constraint specified.
        /// </summary>
        public static string ERR_NewBoundMustBeLast {
            get {
                return ResourceManager.GetString("ERR_NewBoundMustBeLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;new()&apos; constraint cannot be used with the &apos;unmanaged&apos; constraint.
        /// </summary>
        public static string ERR_NewBoundWithUnmanaged {
            get {
                return ResourceManager.GetString("ERR_NewBoundWithUnmanaged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;new()&apos; constraint cannot be used with the &apos;struct&apos; constraint.
        /// </summary>
        public static string ERR_NewBoundWithVal {
            get {
                return ResourceManager.GetString("ERR_NewBoundWithVal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interop type &apos;{0}&apos; cannot be embedded. Use the applicable interface instead..
        /// </summary>
        public static string ERR_NewCoClassOnLink {
            get {
                return ResourceManager.GetString("ERR_NewCoClassOnLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{2}&apos; cannot satisfy the &apos;new()&apos; constraint on parameter &apos;{1}&apos; in the generic type or or method &apos;{0}&apos; because &apos;{2}&apos; has required members..
        /// </summary>
        public static string ERR_NewConstraintCannotHaveRequiredMembers {
            get {
                return ResourceManager.GetString("ERR_NewConstraintCannotHaveRequiredMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{2}&apos; must be a non-abstract type with a public parameterless constructor in order to use it as parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_NewConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_NewConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Newline in constant.
        /// </summary>
        public static string ERR_NewlineInConst {
            get {
                return ResourceManager.GetString("ERR_NewlineInConst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Newlines inside a non-verbatim interpolated string are not supported in C# {0}. Please use language version {1} or greater..
        /// </summary>
        public static string ERR_NewlinesAreNotAllowedInsideANonVerbatimInterpolatedString {
            get {
                return ResourceManager.GetString("ERR_NewlinesAreNotAllowedInsideANonVerbatimInterpolatedString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot provide arguments when creating an instance of a variable type.
        /// </summary>
        public static string ERR_NewTyvarWithArgs {
            get {
                return ResourceManager.GetString("ERR_NewTyvarWithArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a new virtual member in sealed type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NewVirtualInSealed {
            get {
                return ResourceManager.GetString("ERR_NewVirtualInSealed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;new&apos; cannot be used with tuple type. Use a tuple literal expression instead..
        /// </summary>
        public static string ERR_NewWithTupleTypeSyntax {
            get {
                return ResourceManager.GetString("ERR_NewWithTupleTypeSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NIL value cannot be passed as an argument to a function or method declared with a REF or OUT parameter..
        /// </summary>
        public static string ERR_NILByRefOrOut {
            get {
                return ResourceManager.GetString("ERR_NILByRefOrOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;using static&apos; directive cannot be used to declare an alias.
        /// </summary>
        public static string ERR_NoAliasHere {
            get {
                return ResourceManager.GetString("ERR_NoAliasHere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base class is required for a &apos;base&apos; reference.
        /// </summary>
        public static string ERR_NoBaseClass {
            get {
                return ResourceManager.GetString("ERR_NoBaseClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No enclosing loop out of which to break or continue.
        /// </summary>
        public static string ERR_NoBreakOrCont {
            get {
                return ResourceManager.GetString("ERR_NoBreakOrCont", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find the interop type that matches the embedded interop type &apos;{0}&apos;. Are you missing an assembly reference?.
        /// </summary>
        public static string ERR_NoCanonicalView {
            get {
                return ResourceManager.GetString("ERR_NoCanonicalView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ACCESS and ASSIGN methods cannot have Clipper Calling Convention.
        /// </summary>
        public static string ERR_NoClipperCallingConventionForAccessAssign {
            get {
                return ResourceManager.GetString("ERR_NoClipperCallingConventionForAccessAssign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; has no constructors defined.
        /// </summary>
        public static string ERR_NoConstructors {
            get {
                return ResourceManager.GetString("ERR_NoConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallerArgumentExpressionAttribute cannot be applied because there are no standard conversions from type &apos;{0}&apos; to type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoConversionForCallerArgumentExpressionParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForCallerArgumentExpressionParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallerFilePathAttribute cannot be applied because there are no standard conversions from type &apos;{0}&apos; to type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoConversionForCallerFilePathParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForCallerFilePathParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallerLineNumberAttribute cannot be applied because there are no standard conversions from type &apos;{0}&apos; to type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoConversionForCallerLineNumberParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForCallerLineNumberParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CallerMemberNameAttribute cannot be applied because there are no standard conversions from type &apos;{0}&apos; to type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoConversionForCallerMemberNameParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForCallerMemberNameParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be used as a default parameter because there are no standard conversions to type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoConversionForDefaultParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForDefaultParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be used as default parameter for nullable parameter &apos;{1}&apos; because &apos;{0}&apos; is not a simple type.
        /// </summary>
        public static string ERR_NoConversionForNubDefaultParam {
            get {
                return ResourceManager.GetString("ERR_NoConversionForNubDefaultParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: type used in an asynchronous using statement must be implicitly convertible to &apos;System.IAsyncDisposable&apos; or implement a suitable &apos;DisposeAsync&apos; method..
        /// </summary>
        public static string ERR_NoConvToIAsyncDisp {
            get {
                return ResourceManager.GetString("ERR_NoConvToIAsyncDisp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: type used in an asynchronous using statement must be implicitly convertible to &apos;System.IAsyncDisposable&apos; or implement a suitable &apos;DisposeAsync&apos; method. Did you mean &apos;using&apos; rather than &apos;await using&apos;?.
        /// </summary>
        public static string ERR_NoConvToIAsyncDispWrongAsync {
            get {
                return ResourceManager.GetString("ERR_NoConvToIAsyncDispWrongAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: type used in a using statement must be implicitly convertible to &apos;System.IDisposable&apos;..
        /// </summary>
        public static string ERR_NoConvToIDisp {
            get {
                return ResourceManager.GetString("ERR_NoConvToIDisp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: type used in a using statement must be implicitly convertible to &apos;System.IDisposable&apos;. Did you mean &apos;await using&apos; rather than &apos;using&apos;?.
        /// </summary>
        public static string ERR_NoConvToIDispWrongAsync {
            get {
                return ResourceManager.GetString("ERR_NoConvToIDispWrongAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No accessible copy constructor found in base type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_NoCopyConstructorInBaseType {
            get {
                return ResourceManager.GetString("ERR_NoCopyConstructorInBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no argument given that corresponds to the required parameter &apos;{0}&apos; of &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoCorrespondingArgument {
            get {
                return ResourceManager.GetString("ERR_NoCorrespondingArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;delegate&apos; cannot be used as a constraint. Did you mean &apos;System.Delegate&apos;?.
        /// </summary>
        public static string ERR_NoDelegateConstraint {
            get {
                return ResourceManager.GetString("ERR_NoDelegateConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The call to method &apos;{0}&apos; needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access..
        /// </summary>
        public static string ERR_NoDynamicPhantomOnBase {
            get {
                return ResourceManager.GetString("ERR_NoDynamicPhantomOnBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constructor call needs to be dynamically dispatched, but cannot be because it is part of a constructor initializer. Consider casting the dynamic arguments..
        /// </summary>
        public static string ERR_NoDynamicPhantomOnBaseCtor {
            get {
                return ResourceManager.GetString("ERR_NoDynamicPhantomOnBaseCtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The indexer access needs to be dynamically dispatched, but cannot be because it is part of a base access expression. Consider casting the dynamic arguments or eliminating the base access..
        /// </summary>
        public static string ERR_NoDynamicPhantomOnBaseIndexer {
            get {
                return ResourceManager.GetString("ERR_NoDynamicPhantomOnBaseIndexer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Program does not contain a static &apos;Main&apos; method suitable for an entry point.
        /// </summary>
        public static string ERR_NoEntryPoint {
            get {
                return ResourceManager.GetString("ERR_NoEntryPoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;enum&apos; cannot be used as a constraint. Did you mean &apos;struct, System.Enum&apos;?.
        /// </summary>
        public static string ERR_NoEnumConstraint {
            get {
                return ResourceManager.GetString("ERR_NoEnumConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert type &apos;{0}&apos; to &apos;{1}&apos; via a reference conversion, boxing conversion, unboxing conversion, wrapping conversion, or null type conversion.
        /// </summary>
        public static string ERR_NoExplicitBuiltinConv {
            get {
                return ResourceManager.GetString("ERR_NoExplicitBuiltinConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot cast type &apos;{0}&apos; to &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoExplicitCast {
            get {
                return ResourceManager.GetString("ERR_NoExplicitCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert type &apos;{0}&apos; to &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoExplicitConv {
            get {
                return ResourceManager.GetString("ERR_NoExplicitConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing file specification for &apos;{0}&apos; option.
        /// </summary>
        public static string ERR_NoFileSpec {
            get {
                return ResourceManager.GetString("ERR_NoFileSpec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override because &apos;{1}&apos; does not have an overridable get accessor.
        /// </summary>
        public static string ERR_NoGetToOverride {
            get {
                return ResourceManager.GetString("ERR_NoGetToOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot implicitly convert type &apos;{0}&apos; to &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoImplicitConv {
            get {
                return ResourceManager.GetString("ERR_NoImplicitConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot implicitly convert type &apos;{0}&apos; to &apos;{1}&apos;. An explicit conversion exists (are you missing a cast?).
        /// </summary>
        public static string ERR_NoImplicitConvCast {
            get {
                return ResourceManager.GetString("ERR_NoImplicitConvCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conditional expression is not valid in language version {0} because a common type was not found between &apos;{1}&apos; and &apos;{2}&apos;. To use a target-typed conversion, upgrade to language version {3} or greater..
        /// </summary>
        public static string ERR_NoImplicitConvTargetTypedConditional {
            get {
                return ResourceManager.GetString("ERR_NoImplicitConvTargetTypedConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not have a suitable static &apos;Main&apos; method.
        /// </summary>
        public static string ERR_NoMainInClass {
            get {
                return ResourceManager.GetString("ERR_NoMainInClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify /main if building a module or library.
        /// </summary>
        public static string ERR_NoMainOnDLL {
            get {
                return ResourceManager.GetString("ERR_NoMainOnDLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata file &apos;{0}&apos; could not be found.
        /// </summary>
        public static string ERR_NoMetadataFile {
            get {
                return ResourceManager.GetString("ERR_NoMetadataFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifiers cannot be placed on event accessor declarations.
        /// </summary>
        public static string ERR_NoModifiersOnAccessor {
            get {
                return ResourceManager.GetString("ERR_NoModifiersOnAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Modifiers cannot be placed on using declarations.
        /// </summary>
        public static string ERR_NoModifiersOnUsing {
            get {
                return ResourceManager.GetString("ERR_NoModifiersOnUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Class &apos;{0}&apos; cannot have multiple base classes: &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_NoMultipleInheritance {
            get {
                return ResourceManager.GetString("ERR_NoMultipleInheritance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Elements defined in a namespace cannot be explicitly declared as private, protected, protected internal, or private protected.
        /// </summary>
        public static string ERR_NoNamespacePrivate {
            get {
                return ResourceManager.GetString("ERR_NoNamespacePrivate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot compile net modules when using /refout or /refonly..
        /// </summary>
        public static string ERR_NoNetModuleOutputWhenRefOutOrRefOnly {
            get {
                return ResourceManager.GetString("ERR_NoNetModuleOutputWhenRefOutOrRefOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an instance of the abstract type or interface &apos;{0}&apos;.
        /// </summary>
        public static string ERR_NoNewAbstract {
            get {
                return ResourceManager.GetString("ERR_NoNewAbstract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create an instance of the variable type &apos;{0}&apos; because it does not have the new() constraint.
        /// </summary>
        public static string ERR_NoNewTyvar {
            get {
                return ResourceManager.GetString("ERR_NoNewTyvar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; in interface list is not an interface.
        /// </summary>
        public static string ERR_NonInterfaceInInterfaceList {
            get {
                return ResourceManager.GetString("ERR_NonInterfaceInInterfaceList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-invocable member &apos;{0}&apos; cannot be used like a method..
        /// </summary>
        public static string ERR_NonInvocableMemberCalled {
            get {
                return ResourceManager.GetString("ERR_NonInvocableMemberCalled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; must be private..
        /// </summary>
        public static string ERR_NonPrivateAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_NonPrivateAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; must be protected..
        /// </summary>
        public static string ERR_NonProtectedAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_NonProtectedAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; must be public..
        /// </summary>
        public static string ERR_NonPublicAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_NonPublicAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameterless struct constructor must be &apos;public&apos;..
        /// </summary>
        public static string ERR_NonPublicParameterlessStructConstructor {
            get {
                return ResourceManager.GetString("ERR_NonPublicParameterlessStructConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A void or int returning entry point cannot be async.
        /// </summary>
        public static string ERR_NonTaskMainCantBeAsync {
            get {
                return ResourceManager.GetString("ERR_NonTaskMainCantBeAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output directory could not be determined.
        /// </summary>
        public static string ERR_NoOutputDirectory {
            get {
                return ResourceManager.GetString("ERR_NoOutputDirectory", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No overload for method &apos;{0}&apos; found with {1} arguments and default values for one or more arguments.
        /// </summary>
        public static string ERR_NoOverloadFoundThatAllowsMissingArguments {
            get {
                return ResourceManager.GetString("ERR_NoOverloadFoundThatAllowsMissingArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot embed interop types from assembly &apos;{0}&apos; because it is missing the &apos;{1}&apos; attribute..
        /// </summary>
        public static string ERR_NoPIAAssemblyMissingAttribute {
            get {
                return ResourceManager.GetString("ERR_NoPIAAssemblyMissingAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot embed interop types from assembly &apos;{0}&apos; because it is missing either the &apos;{1}&apos; attribute or the &apos;{2}&apos; attribute..
        /// </summary>
        public static string ERR_NoPIAAssemblyMissingAttributes {
            get {
                return ResourceManager.GetString("ERR_NoPIAAssemblyMissingAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be embedded because it is a nested type. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_NoPIANestedType {
            get {
                return ResourceManager.GetString("ERR_NoPIANestedType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use refout when using refonly..
        /// </summary>
        public static string ERR_NoRefOutWhenRefOnly {
            get {
                return ResourceManager.GetString("ERR_NoRefOutWhenRefOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot override because &apos;{1}&apos; does not have an overridable set accessor.
        /// </summary>
        public static string ERR_NoSetToOverride {
            get {
                return ResourceManager.GetString("ERR_NoSetToOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file &apos;{0}&apos; could not be opened -- {1}.
        /// </summary>
        public static string ERR_NoSourceFile {
            get {
                return ResourceManager.GetString("ERR_NoSourceFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a definition for &apos;{1}&apos;.
        /// </summary>
        public static string ERR_NoSuchMember {
            get {
                return ResourceManager.GetString("ERR_NoSuchMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a definition for &apos;{1}&apos; and no accessible extension method &apos;{1}&apos; accepting a first argument of type &apos;{0}&apos; could be found (are you missing a using directive or an assembly reference?).
        /// </summary>
        public static string ERR_NoSuchMemberOrExtension {
            get {
                return ResourceManager.GetString("ERR_NoSuchMemberOrExtension", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a definition for &apos;{1}&apos; and no extension method &apos;{1}&apos; accepting a first argument of type &apos;{0}&apos; could be found (are you missing a using directive for &apos;{2}&apos;?).
        /// </summary>
        public static string ERR_NoSuchMemberOrExtensionNeedUsing {
            get {
                return ResourceManager.GetString("ERR_NoSuchMemberOrExtensionNeedUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not an attribute class.
        /// </summary>
        public static string ERR_NotAnAttributeClass {
            get {
                return ResourceManager.GetString("ERR_NotAnAttributeClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression being assigned to &apos;{0}&apos; must be constant.
        /// </summary>
        public static string ERR_NotConstantExpression {
            get {
                return ResourceManager.GetString("ERR_NotConstantExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interpolation must end with the same number of closing braces as the number of &apos;$&apos; characters that the raw string literal started with..
        /// </summary>
        public static string ERR_NotEnoughCloseBracesForRawString {
            get {
                return ResourceManager.GetString("ERR_NotEnoughCloseBracesForRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough quotes for raw string literal..
        /// </summary>
        public static string ERR_NotEnoughQuotesForRawString {
            get {
                return ResourceManager.GetString("ERR_NotEnoughQuotesForRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not an instance method, the receiver cannot be an interpolated string handler argument..
        /// </summary>
        public static string ERR_NotInstanceInvalidInterpolatedStringHandlerArgumentName {
            get {
                return ResourceManager.GetString("ERR_NotInstanceInvalidInterpolatedStringHandlerArgumentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is of type &apos;{1}&apos;. A const field of a reference type other than string can only be initialized with null..
        /// </summary>
        public static string ERR_NotNullConstRefField {
            get {
                return ResourceManager.GetString("ERR_NotNullConstRefField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is of type &apos;{1}&apos;. A default parameter value of a reference type other than string can only be initialized with null.
        /// </summary>
        public static string ERR_NotNullRefDefaultParameter {
            get {
                return ResourceManager.GetString("ERR_NotNullRefDefaultParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must allow overriding because the containing record is not sealed..
        /// </summary>
        public static string ERR_NotOverridableAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_NotOverridableAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; may not be a ref struct or a type parameter allowing ref structs in order to use it as parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_NotRefStructConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_NotRefStructConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This language feature (&apos;{0}&apos;) is not yet implemented..
        /// </summary>
        public static string ERR_NotYetImplementedInRoslyn {
            get {
                return ResourceManager.GetString("ERR_NotYetImplementedInRoslyn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is defined in an assembly that is not referenced. You must add a reference to assembly &apos;{1}&apos;..
        /// </summary>
        public static string ERR_NoTypeDef {
            get {
                return ResourceManager.GetString("ERR_NoTypeDef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is defined in a module that has not been added. You must add the module &apos;{1}&apos;..
        /// </summary>
        public static string ERR_NoTypeDefFromModule {
            get {
                return ResourceManager.GetString("ERR_NoTypeDefFromModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;void&apos; cannot be used in this context.
        /// </summary>
        public static string ERR_NoVoidHere {
            get {
                return ResourceManager.GetString("ERR_NoVoidHere", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid parameter type &apos;void&apos;.
        /// </summary>
        public static string ERR_NoVoidParameter {
            get {
                return ResourceManager.GetString("ERR_NoVoidParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;enable&apos;, &apos;disable&apos;, or &apos;restore&apos;.
        /// </summary>
        public static string ERR_NullableDirectiveQualifierExpected {
            get {
                return ResourceManager.GetString("ERR_NullableDirectiveQualifierExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;warnings&apos;, &apos;annotations&apos;, or end of directive.
        /// </summary>
        public static string ERR_NullableDirectiveTargetExpected {
            get {
                return ResourceManager.GetString("ERR_NullableDirectiveTargetExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid &apos;{0}&apos; value: &apos;{1}&apos; for C# {2}. Please use language version &apos;{3}&apos; or greater..
        /// </summary>
        public static string ERR_NullableOptionNotAvailable {
            get {
                return ResourceManager.GetString("ERR_NullableOptionNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A nullable type parameter must be known to be a value type or non-nullable reference type unless language version &apos;{0}&apos; or greater is used. Consider changing the language version or adding a &apos;class&apos;, &apos;struct&apos;, or type constraint..
        /// </summary>
        public static string ERR_NullableUnconstrainedTypeParameter {
            get {
                return ResourceManager.GetString("ERR_NullableUnconstrainedTypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to null is not a valid parameter name. To get access to the receiver of an instance method, use the empty string as the parameter name..
        /// </summary>
        public static string ERR_NullInvalidInterpolatedStringHandlerArgumentName {
            get {
                return ResourceManager.GetString("ERR_NullInvalidInterpolatedStringHandlerArgumentName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of null is not valid in this context.
        /// </summary>
        public static string ERR_NullNotValid {
            get {
                return ResourceManager.GetString("ERR_NullNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a null propagating operator..
        /// </summary>
        public static string ERR_NullPropagatingOpInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_NullPropagatingOpInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has no base class and cannot call a base constructor.
        /// </summary>
        public static string ERR_ObjectCallingBaseConstructor {
            get {
                return ResourceManager.GetString("ERR_ObjectCallingBaseConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The class System.Object cannot have a base class or implement an interface.
        /// </summary>
        public static string ERR_ObjectCantHaveBases {
            get {
                return ResourceManager.GetString("ERR_ObjectCantHaveBases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object and collection initializer expressions may not be applied to a delegate creation expression.
        /// </summary>
        public static string ERR_ObjectOrCollectionInitializerWithDelegateCreation {
            get {
                return ResourceManager.GetString("ERR_ObjectOrCollectionInitializerWithDelegateCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; cannot be accessed with an instance reference; qualify it with a type name instead.
        /// </summary>
        public static string ERR_ObjectProhibited {
            get {
                return ResourceManager.GetString("ERR_ObjectProhibited", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object reference is required for the non-static field, method, or property &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ObjectRequired {
            get {
                return ResourceManager.GetString("ERR_ObjectRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Omitting the type argument is not allowed in the current context.
        /// </summary>
        public static string ERR_OmittedTypeArgument {
            get {
                return ResourceManager.GetString("ERR_OmittedTypeArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A /reference option that declares an extern alias can only have one filename. To specify multiple aliases or filenames, use multiple /reference options..
        /// </summary>
        public static string ERR_OneAliasPerReference {
            get {
                return ResourceManager.GetString("ERR_OneAliasPerReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only class types can contain destructors.
        /// </summary>
        public static string ERR_OnlyClassesCanContainDestructors {
            get {
                return ResourceManager.GetString("ERR_OnlyClassesCanContainDestructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function &apos;{0}&apos; is only supported in functions or methods with CLIPPER calling convention (and not in ACCESS or ASSIGN methods).
        /// </summary>
        public static string ERR_OnlySupportedForClipperCallingConvention {
            get {
                return ResourceManager.GetString("ERR_OnlySupportedForClipperCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End-of-file found, &apos;*/&apos; expected.
        /// </summary>
        public static string ERR_OpenEndedComment {
            get {
                return ResourceManager.GetString("ERR_OpenEndedComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error opening response file &apos;{0}&apos;.
        /// </summary>
        public static string ERR_OpenResponseFile {
            get {
                return ResourceManager.GetString("ERR_OpenResponseFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined operator &apos;{0}&apos; cannot be declared checked.
        /// </summary>
        public static string ERR_OperatorCantBeChecked {
            get {
                return ResourceManager.GetString("ERR_OperatorCantBeChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined operators cannot return void.
        /// </summary>
        public static string ERR_OperatorCantReturnVoid {
            get {
                return ResourceManager.GetString("ERR_OperatorCantReturnVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static classes cannot contain user-defined operators.
        /// </summary>
        public static string ERR_OperatorInStaticClass {
            get {
                return ResourceManager.GetString("ERR_OperatorInStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operator &apos;{0}&apos; requires a matching operator &apos;{1}&apos; to also be defined.
        /// </summary>
        public static string ERR_OperatorNeedsMatch {
            get {
                return ResourceManager.GetString("ERR_OperatorNeedsMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User-defined operator &apos;{0}&apos; must be declared static and public.
        /// </summary>
        public static string ERR_OperatorsMustBeStatic {
            get {
                return ResourceManager.GetString("ERR_OperatorsMustBeStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return type of operator True or False must be bool.
        /// </summary>
        public static string ERR_OpTFRetType {
            get {
                return ResourceManager.GetString("ERR_OpTFRetType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option &apos;{0}&apos; must be an absolute path..
        /// </summary>
        public static string ERR_OptionMustBeAbsolutePath {
            get {
                return ResourceManager.GetString("ERR_OptionMustBeAbsolutePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An in parameter cannot have the Out attribute..
        /// </summary>
        public static string ERR_OutAttrOnInParam {
            get {
                return ResourceManager.GetString("ERR_OutAttrOnInParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify the Out attribute on a ref parameter without also specifying the In attribute..
        /// </summary>
        public static string ERR_OutAttrOnRefParam {
            get {
                return ResourceManager.GetString("ERR_OutAttrOnRefParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ref readonly parameter cannot have the Out attribute..
        /// </summary>
        public static string ERR_OutAttrOnRefReadonlyParam {
            get {
                return ResourceManager.GetString("ERR_OutAttrOnRefReadonlyParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Outputs without source must have the /out option specified.
        /// </summary>
        public static string ERR_OutputNeedsName {
            get {
                return ResourceManager.GetString("ERR_OutputNeedsName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not write to output file &apos;{0}&apos; -- &apos;{1}&apos;.
        /// </summary>
        public static string ERR_OutputWriteFailed {
            get {
                return ResourceManager.GetString("ERR_OutputWriteFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An out variable cannot be declared as a ref local.
        /// </summary>
        public static string ERR_OutVariableCannotBeByRef {
            get {
                return ResourceManager.GetString("ERR_OutVariableCannotBeByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot define an overloaded {1} that differs only on parameter modifiers &apos;{2}&apos; and &apos;{3}&apos;.
        /// </summary>
        public static string ERR_OverloadRefKind {
            get {
                return ResourceManager.GetString("ERR_OverloadRefKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; specifies a &apos;default&apos; constraint for type parameter &apos;{1}&apos;, but corresponding type parameter &apos;{2}&apos; of overridden or explicitly implemented method &apos;{3}&apos; is constrained to a reference type or a value type..
        /// </summary>
        public static string ERR_OverrideDefaultConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_OverrideDefaultConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not override object.Finalize. Instead, provide a destructor..
        /// </summary>
        public static string ERR_OverrideFinalizeDeprecated {
            get {
                return ResourceManager.GetString("ERR_OverrideFinalizeDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; must be required because it overrides required member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_OverrideMustHaveRequired {
            get {
                return ResourceManager.GetString("ERR_OverrideMustHaveRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: no suitable method found to override.
        /// </summary>
        public static string ERR_OverrideNotExpected {
            get {
                return ResourceManager.GetString("ERR_OverrideNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A member &apos;{0}&apos; marked as override cannot be marked as new or virtual.
        /// </summary>
        public static string ERR_OverrideNotNew {
            get {
                return ResourceManager.GetString("ERR_OverrideNotNew", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; specifies a &apos;class&apos; constraint for type parameter &apos;{1}&apos;, but corresponding type parameter &apos;{2}&apos; of overridden or explicitly implemented method &apos;{3}&apos; is not a reference type..
        /// </summary>
        public static string ERR_OverrideRefConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_OverrideRefConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; specifies a &apos;struct&apos; constraint for type parameter &apos;{1}&apos;, but corresponding type parameter &apos;{2}&apos; of overridden or explicitly implemented method &apos;{3}&apos; is not a non-nullable value type..
        /// </summary>
        public static string ERR_OverrideValConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_OverrideValConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraints for override and explicit interface implementation methods are inherited from the base method, so they cannot be specified directly, except for either a &apos;class&apos;, or a &apos;struct&apos; constraint..
        /// </summary>
        public static string ERR_OverrideWithConstraints {
            get {
                return ResourceManager.GetString("ERR_OverrideWithConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloadable binary operator expected.
        /// </summary>
        public static string ERR_OvlBinaryOperatorExpected {
            get {
                return ResourceManager.GetString("ERR_OvlBinaryOperatorExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloadable operator expected.
        /// </summary>
        public static string ERR_OvlOperatorExpected {
            get {
                return ResourceManager.GetString("ERR_OvlOperatorExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloadable unary operator expected.
        /// </summary>
        public static string ERR_OvlUnaryOperatorExpected {
            get {
                return ResourceManager.GetString("ERR_OvlUnaryOperatorExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter has multiple distinct default values..
        /// </summary>
        public static string ERR_ParamDefaultValueDiffersFromAttribute {
            get {
                return ResourceManager.GetString("ERR_ParamDefaultValueDiffersFromAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} cannot have an initial value..
        /// </summary>
        public static string ERR_ParameterInit {
            get {
                return ResourceManager.GetString("ERR_ParameterInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static types cannot be used as parameters.
        /// </summary>
        public static string ERR_ParameterIsStaticClass {
            get {
                return ResourceManager.GetString("ERR_ParameterIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter not valid for the specified unmanaged type..
        /// </summary>
        public static string ERR_ParameterNotValidForType {
            get {
                return ResourceManager.GetString("ERR_ParameterNotValidForType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;parameter null-checking&apos; feature is not supported..
        /// </summary>
        public static string ERR_ParameterNullCheckingNotSupported {
            get {
                return ResourceManager.GetString("ERR_ParameterNullCheckingNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An entity can only have a single declaration of parameters with a PARAMETERS statement, LPARAMETERS statement or formal parameters..
        /// </summary>
        public static string ERR_ParametersWithDeclaredParameters {
            get {
                return ResourceManager.GetString("ERR_ParametersWithDeclaredParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The params parameter cannot be declared as {0}.
        /// </summary>
        public static string ERR_ParamsCantBeWithModifier {
            get {
                return ResourceManager.GetString("ERR_ParamsCantBeWithModifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor &apos;{0}&apos; leaves required member &apos;{1}&apos; uninitialized..
        /// </summary>
        public static string ERR_ParamsCollectionConstructorDoesntInitializeRequiredMember {
            get {
                return ResourceManager.GetString("ERR_ParamsCollectionConstructorDoesntInitializeRequiredMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree may not contain an expanded form of non-array params collection parameter..
        /// </summary>
        public static string ERR_ParamsCollectionExpressionTree {
            get {
                return ResourceManager.GetString("ERR_ParamsCollectionExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not contain a definition for a suitable instance &apos;Add&apos; method.
        /// </summary>
        public static string ERR_ParamsCollectionExtensionAddMethod {
            get {
                return ResourceManager.GetString("ERR_ParamsCollectionExtensionAddMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creation of params collection &apos;{0}&apos; results in an infinite chain of invocation of constructor &apos;{1}&apos;..
        /// </summary>
        public static string ERR_ParamsCollectionInfiniteChainOfConstructorCalls {
            get {
                return ResourceManager.GetString("ERR_ParamsCollectionInfiniteChainOfConstructorCalls", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-array params collection type must have an applicable constructor that can be called with no arguments..
        /// </summary>
        public static string ERR_ParamsCollectionMissingConstructor {
            get {
                return ResourceManager.GetString("ERR_ParamsCollectionMissingConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A params parameter must be the last parameter in a parameter list.
        /// </summary>
        public static string ERR_ParamsLast {
            get {
                return ResourceManager.GetString("ERR_ParamsLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; cannot be less visible than the member with params collection &apos;{1}&apos;..
        /// </summary>
        public static string ERR_ParamsMemberCannotBeLessVisibleThanDeclaringMember {
            get {
                return ResourceManager.GetString("ERR_ParamsMemberCannotBeLessVisibleThanDeclaringMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The params parameter must have a valid collection type.
        /// </summary>
        public static string ERR_ParamsMustBeCollection {
            get {
                return ResourceManager.GetString("ERR_ParamsMustBeCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The out parameter &apos;{0}&apos; must be assigned to before control leaves the current method.
        /// </summary>
        public static string ERR_ParamUnassigned {
            get {
                return ResourceManager.GetString("ERR_ParamUnassigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parenthesized Expression Lists are not supported when using the -modernsyntax compiler option..
        /// </summary>
        public static string ERR_ParenthesizedExpressionList {
            get {
                return ResourceManager.GetString("ERR_ParenthesizedExpressionList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parser: {0}.
        /// </summary>
        public static string ERR_ParserError {
            get {
                return ResourceManager.GetString("ERR_ParserError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must have identical accessibility modifiers..
        /// </summary>
        public static string ERR_PartialMemberAccessibilityDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberAccessibilityDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial member cannot have the &apos;abstract&apos; modifier.
        /// </summary>
        public static string ERR_PartialMemberCannotBeAbstract {
            get {
                return ResourceManager.GetString("ERR_PartialMemberCannotBeAbstract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must have identical combinations of &apos;virtual&apos;, &apos;override&apos;, &apos;sealed&apos;, and &apos;new&apos; modifiers..
        /// </summary>
        public static string ERR_PartialMemberExtendedModDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberExtendedModDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations, &apos;{0}&apos; and &apos;{1}&apos;, must use the same tuple element names..
        /// </summary>
        public static string ERR_PartialMemberInconsistentTupleNames {
            get {
                return ResourceManager.GetString("ERR_PartialMemberInconsistentTupleNames", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial member may not explicitly implement an interface member.
        /// </summary>
        public static string ERR_PartialMemberNotExplicit {
            get {
                return ResourceManager.GetString("ERR_PartialMemberNotExplicit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial member must be declared within a partial type.
        /// </summary>
        public static string ERR_PartialMemberOnlyInPartialClass {
            get {
                return ResourceManager.GetString("ERR_PartialMemberOnlyInPartialClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must use a params parameter or neither may use a params parameter.
        /// </summary>
        public static string ERR_PartialMemberParamsDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberParamsDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must be readonly or neither may be readonly.
        /// </summary>
        public static string ERR_PartialMemberReadOnlyDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberReadOnlyDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial member declarations must have matching ref return values..
        /// </summary>
        public static string ERR_PartialMemberRefReturnDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberRefReturnDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must be static or neither may be static.
        /// </summary>
        public static string ERR_PartialMemberStaticDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberStaticDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial member declarations must be unsafe or neither may be unsafe.
        /// </summary>
        public static string ERR_PartialMemberUnsafeDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMemberUnsafeDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial method declarations must be extension methods or neither may be an extension method.
        /// </summary>
        public static string ERR_PartialMethodExtensionDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMethodExtensionDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method declarations of &apos;{0}&apos; have inconsistent constraints for type parameter &apos;{1}&apos;.
        /// </summary>
        public static string ERR_PartialMethodInconsistentConstraints {
            get {
                return ResourceManager.GetString("ERR_PartialMethodInconsistentConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial methods with only a defining declaration or removed conditional methods cannot be used in expression trees.
        /// </summary>
        public static string ERR_PartialMethodInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_PartialMethodInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No defining declaration found for implementing declaration of partial method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_PartialMethodMustHaveLatent {
            get {
                return ResourceManager.GetString("ERR_PartialMethodMustHaveLatent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial method may not have multiple implementing declarations.
        /// </summary>
        public static string ERR_PartialMethodOnlyOneActual {
            get {
                return ResourceManager.GetString("ERR_PartialMethodOnlyOneActual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial method may not have multiple defining declarations.
        /// </summary>
        public static string ERR_PartialMethodOnlyOneLatent {
            get {
                return ResourceManager.GetString("ERR_PartialMethodOnlyOneLatent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial method declarations must have the same return type..
        /// </summary>
        public static string ERR_PartialMethodReturnTypeDifference {
            get {
                return ResourceManager.GetString("ERR_PartialMethodReturnTypeDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create delegate from method &apos;{0}&apos; because it is a partial method without an implementing declaration.
        /// </summary>
        public static string ERR_PartialMethodToDelegate {
            get {
                return ResourceManager.GetString("ERR_PartialMethodToDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method &apos;{0}&apos; must have an implementation part because it has accessibility modifiers..
        /// </summary>
        public static string ERR_PartialMethodWithAccessibilityModsMustHaveImplementation {
            get {
                return ResourceManager.GetString("ERR_PartialMethodWithAccessibilityModsMustHaveImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method &apos;{0}&apos; must have accessibility modifiers because it has a &apos;virtual&apos;, &apos;override&apos;, &apos;sealed&apos;, &apos;new&apos;, or &apos;extern&apos; modifier..
        /// </summary>
        public static string ERR_PartialMethodWithExtendedModMustHaveAccessMods {
            get {
                return ResourceManager.GetString("ERR_PartialMethodWithExtendedModMustHaveAccessMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method &apos;{0}&apos; must have accessibility modifiers because it has a non-void return type..
        /// </summary>
        public static string ERR_PartialMethodWithNonVoidReturnMustHaveAccessMods {
            get {
                return ResourceManager.GetString("ERR_PartialMethodWithNonVoidReturnMustHaveAccessMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method &apos;{0}&apos; must have accessibility modifiers because it has &apos;out&apos; parameters..
        /// </summary>
        public static string ERR_PartialMethodWithOutParamMustHaveAccessMods {
            get {
                return ResourceManager.GetString("ERR_PartialMethodWithOutParamMustHaveAccessMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;partial&apos; modifier can only appear immediately before &apos;class&apos;, &apos;record&apos;, &apos;struct&apos;, &apos;interface&apos;, or a method or property return type..
        /// </summary>
        public static string ERR_PartialMisplaced {
            get {
                return ResourceManager.GetString("ERR_PartialMisplaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; have conflicting accessibility modifiers.
        /// </summary>
        public static string ERR_PartialModifierConflict {
            get {
                return ResourceManager.GetString("ERR_PartialModifierConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; must not specify different base classes.
        /// </summary>
        public static string ERR_PartialMultipleBases {
            get {
                return ResourceManager.GetString("ERR_PartialMultipleBases", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial property may not have multiple defining declarations, and cannot be an auto-property..
        /// </summary>
        public static string ERR_PartialPropertyDuplicateDefinition {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyDuplicateDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A partial property may not have multiple implementing declarations.
        /// </summary>
        public static string ERR_PartialPropertyDuplicateImplementation {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyDuplicateImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property accessor &apos;{0}&apos; must be &apos;{1}&apos; to match the definition part.
        /// </summary>
        public static string ERR_PartialPropertyInitMismatch {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyInitMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property accessor &apos;{0}&apos; must be implemented because it is declared on the definition part.
        /// </summary>
        public static string ERR_PartialPropertyMissingAccessor {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyMissingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial property &apos;{0}&apos; must have a definition part..
        /// </summary>
        public static string ERR_PartialPropertyMissingDefinition {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyMissingDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial property &apos;{0}&apos; must have an implementation part..
        /// </summary>
        public static string ERR_PartialPropertyMissingImplementation {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyMissingImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial property declarations must be required or neither may be required.
        /// </summary>
        public static string ERR_PartialPropertyRequiredDifference {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyRequiredDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both partial property declarations must have the same type..
        /// </summary>
        public static string ERR_PartialPropertyTypeDifference {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyTypeDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property accessor &apos;{0}&apos; does not implement any accessor declared on the definition part.
        /// </summary>
        public static string ERR_PartialPropertyUnexpectedAccessor {
            get {
                return ResourceManager.GetString("ERR_PartialPropertyUnexpectedAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; must be all classes, all record classes, all structs, all record structs, or all interfaces.
        /// </summary>
        public static string ERR_PartialTypeKindConflict {
            get {
                return ResourceManager.GetString("ERR_PartialTypeKindConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; have inconsistent constraints for type parameter &apos;{1}&apos;.
        /// </summary>
        public static string ERR_PartialWrongConstraints {
            get {
                return ResourceManager.GetString("ERR_PartialWrongConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; must have the same type parameter names in the same order.
        /// </summary>
        public static string ERR_PartialWrongTypeParams {
            get {
                return ResourceManager.GetString("ERR_PartialWrongTypeParams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial declarations of &apos;{0}&apos; must have the same type parameter names and variance modifiers in the same order.
        /// </summary>
        public static string ERR_PartialWrongTypeParamsVariance {
            get {
                return ResourceManager.GetString("ERR_PartialWrongTypeParamsVariance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not legal to use the type &apos;dynamic&apos; in a pattern..
        /// </summary>
        public static string ERR_PatternDynamicType {
            get {
                return ResourceManager.GetString("ERR_PatternDynamicType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to It is not legal to use nullable type &apos;{0}?&apos; in a pattern; use the underlying type &apos;{0}&apos; instead..
        /// </summary>
        public static string ERR_PatternNullableType {
            get {
                return ResourceManager.GetString("ERR_PatternNullableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string &apos;null&apos; constant is not supported as a pattern for &apos;{0}&apos;. Use an empty string instead..
        /// </summary>
        public static string ERR_PatternSpanCharCannotBeStringNull {
            get {
                return ResourceManager.GetString("ERR_PatternSpanCharCannotBeStringNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; cannot be handled by a pattern of type &apos;{1}&apos; in C# {2}. Please use language version {3} or greater..
        /// </summary>
        public static string ERR_PatternWrongGenericTypeInVersion {
            get {
                return ResourceManager.GetString("ERR_PatternWrongGenericTypeInVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; cannot be handled by a pattern of type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_PatternWrongType {
            get {
                return ResourceManager.GetString("ERR_PatternWrongType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first argument to {0} must be a &apos;{1}&apos;..
        /// </summary>
        public static string ERR_PCallFirstArgument {
            get {
                return ResourceManager.GetString("ERR_PCallFirstArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0} pseudo function requires one generic type argument to describe its return type..
        /// </summary>
        public static string ERR_PCallNativeGenericType {
            get {
                return ResourceManager.GetString("ERR_PCallNativeGenericType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error locating the generated Delegate &apos;{1}&apos; for the pseudo function &apos;{0}&apos;..
        /// </summary>
        public static string ERR_PCallResolveGeneratedDelegate {
            get {
                return ResourceManager.GetString("ERR_PCallResolveGeneratedDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; pseudo function uses a typed pointer to the function &apos;{1}&apos; which cannot be found..
        /// </summary>
        public static string ERR_PCallTypedPointerName {
            get {
                return ResourceManager.GetString("ERR_PCallTypedPointerName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error reading file &apos;{0}&apos; specified for the named argument &apos;{1}&apos; for PermissionSet attribute: &apos;{2}&apos;.
        /// </summary>
        public static string ERR_PermissionSetAttributeFileReadError {
            get {
                return ResourceManager.GetString("ERR_PermissionSetAttributeFileReadError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to resolve file path &apos;{0}&apos; specified for the named argument &apos;{1}&apos; for PermissionSet attribute.
        /// </summary>
        public static string ERR_PermissionSetAttributeInvalidFile {
            get {
                return ResourceManager.GetString("ERR_PermissionSetAttributeInvalidFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while writing the output file: {0}..
        /// </summary>
        public static string ERR_PeWritingFailure {
            get {
                return ResourceManager.GetString("ERR_PeWritingFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Neither &apos;is&apos; nor &apos;as&apos; is valid on pointer types.
        /// </summary>
        public static string ERR_PointerInAsOrIs {
            get {
                return ResourceManager.GetString("ERR_PointerInAsOrIs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pattern-matching is not permitted for pointer types..
        /// </summary>
        public static string ERR_PointerTypeInPatternMatching {
            get {
                return ResourceManager.GetString("ERR_PointerTypeInPatternMatching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of an async-iterator method must contain a &apos;yield&apos; statement..
        /// </summary>
        public static string ERR_PossibleAsyncIteratorWithoutYield {
            get {
                return ResourceManager.GetString("ERR_PossibleAsyncIteratorWithoutYield", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The body of an async-iterator method must contain a &apos;yield&apos; statement. Consider removing &apos;async&apos; from the method declaration or adding a &apos;yield&apos; statement..
        /// </summary>
        public static string ERR_PossibleAsyncIteratorWithoutYieldOrAwait {
            get {
                return ResourceManager.GetString("ERR_PossibleAsyncIteratorWithoutYieldOrAwait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to To cast a negative value, you must enclose the value in parentheses..
        /// </summary>
        public static string ERR_PossibleBadNegCast {
            get {
                return ResourceManager.GetString("ERR_PossibleBadNegCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot define/undefine preprocessor symbols after first token in file.
        /// </summary>
        public static string ERR_PPDefFollowsToken {
            get {
                return ResourceManager.GetString("ERR_PPDefFollowsToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Preprocessor directive expected.
        /// </summary>
        public static string ERR_PPDirectiveExpected {
            get {
                return ResourceManager.GetString("ERR_PPDirectiveExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use #load after first token in file.
        /// </summary>
        public static string ERR_PPLoadFollowsToken {
            get {
                return ResourceManager.GetString("ERR_PPLoadFollowsToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use #r after first token in file.
        /// </summary>
        public static string ERR_PPReferenceFollowsToken {
            get {
                return ResourceManager.GetString("ERR_PPReferenceFollowsToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; was not found on type &apos;{1}&apos; from assembly &apos;{2}&apos;..
        /// </summary>
        public static string ERR_PredefinedTypeMemberNotFoundInAssembly {
            get {
                return ResourceManager.GetString("ERR_PredefinedTypeMemberNotFoundInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined type &apos;{0}&apos; is not defined or imported.
        /// </summary>
        public static string ERR_PredefinedTypeNotFound {
            get {
                return ResourceManager.GetString("ERR_PredefinedTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined type &apos;{0}&apos; is declared in multiple referenced assemblies: &apos;{1}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_PredefinedValueTupleTypeAmbiguous3 {
            get {
                return ResourceManager.GetString("ERR_PredefinedValueTupleTypeAmbiguous3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined type &apos;{0}&apos; must be a struct..
        /// </summary>
        public static string ERR_PredefinedValueTupleTypeMustBeStruct {
            get {
                return ResourceManager.GetString("ERR_PredefinedValueTupleTypeMustBeStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined type &apos;{0}&apos; is not defined or imported.
        /// </summary>
        public static string ERR_PredefinedValueTupleTypeNotFound {
            get {
                return ResourceManager.GetString("ERR_PredefinedValueTupleTypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pre-processor: {0}.
        /// </summary>
        public static string ERR_PreProcessorError {
            get {
                return ResourceManager.GetString("ERR_PreProcessorError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Recursive preprocessor rule &apos;#{0}&apos; detected.
        /// </summary>
        public static string ERR_PreProcessorRecursiveRule {
            get {
                return ResourceManager.GetString("ERR_PreProcessorRecursiveRule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityAction value &apos;{0}&apos; is invalid for PrincipalPermission attribute.
        /// </summary>
        public static string ERR_PrincipalPermissionInvalidAction {
            get {
                return ResourceManager.GetString("ERR_PrincipalPermissionInvalidAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: abstract properties cannot have private accessors.
        /// </summary>
        public static string ERR_PrivateAbstractAccessor {
            get {
                return ResourceManager.GetString("ERR_PrivateAbstractAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: property or indexer cannot have void type.
        /// </summary>
        public static string ERR_PropertyCantHaveVoidType {
            get {
                return ResourceManager.GetString("ERR_PropertyCantHaveVoidType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property or indexer &apos;{0}&apos; cannot be used in this context because it lacks the get accessor.
        /// </summary>
        public static string ERR_PropertyLacksGet {
            get {
                return ResourceManager.GetString("ERR_PropertyLacksGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A property subpattern requires a reference to the property or field to be matched, e.g. &apos;{{ Name: {0} }}&apos;.
        /// </summary>
        public static string ERR_PropertyPatternNameMissing {
            get {
                return ResourceManager.GetString("ERR_PropertyPatternNameMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: property or indexer must have at least one accessor.
        /// </summary>
        public static string ERR_PropertyWithNoAccessors {
            get {
                return ResourceManager.GetString("ERR_PropertyWithNoAccessors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static classes cannot contain protected members.
        /// </summary>
        public static string ERR_ProtectedInStatic {
            get {
                return ResourceManager.GetString("ERR_ProtectedInStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: new protected member declared in struct.
        /// </summary>
        public static string ERR_ProtectedInStruct {
            get {
                return ResourceManager.GetString("ERR_ProtectedInStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &quot;PTR(..) operation&quot; is not allowed for method or function calls. If the method or function returns a pointer then consider using the (&lt;Type&gt; PTR) syntax instead..
        /// </summary>
        public static string ERR_PtrCastNotAllowed {
            get {
                return ResourceManager.GetString("ERR_PtrCastNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The * or -&gt; operator must be applied to a pointer.
        /// </summary>
        public static string ERR_PtrExpected {
            get {
                return ResourceManager.GetString("ERR_PtrExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A pointer must be indexed by only one value.
        /// </summary>
        public static string ERR_PtrIndexSingle {
            get {
                return ResourceManager.GetString("ERR_PtrIndexSingle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error signing output with public key from container &apos;{0}&apos; -- {1}.
        /// </summary>
        public static string ERR_PublicKeyContainerFailure {
            get {
                return ResourceManager.GetString("ERR_PublicKeyContainerFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error signing output with public key from file &apos;{0}&apos; -- {1}.
        /// </summary>
        public static string ERR_PublicKeyFileFailure {
            get {
                return ResourceManager.GetString("ERR_PublicKeyFileFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public signing was specified and requires a public key, but no public key was specified..
        /// </summary>
        public static string ERR_PublicSignButNoKey {
            get {
                return ResourceManager.GetString("ERR_PublicSignButNoKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Public signing is not supported for netmodules..
        /// </summary>
        public static string ERR_PublicSignNetModule {
            get {
                return ResourceManager.GetString("ERR_PublicSignNetModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range variable &apos;{0}&apos; has already been declared.
        /// </summary>
        public static string ERR_QueryDuplicateRangeVariable {
            get {
                return ResourceManager.GetString("ERR_QueryDuplicateRangeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; is not in scope on the right side of &apos;equals&apos;.  Consider swapping the expressions on either side of &apos;equals&apos;..
        /// </summary>
        public static string ERR_QueryInnerKey {
            get {
                return ResourceManager.GetString("ERR_QueryInnerKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple implementations of the query pattern were found for source type &apos;{0}&apos;.  Ambiguous call to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_QueryMultipleProviders {
            get {
                return ResourceManager.GetString("ERR_QueryMultipleProviders", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an implementation of the query pattern for source type &apos;{0}&apos;.  &apos;{1}&apos; not found..
        /// </summary>
        public static string ERR_QueryNoProvider {
            get {
                return ResourceManager.GetString("ERR_QueryNoProvider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an implementation of the query pattern for source type &apos;{0}&apos;.  &apos;{1}&apos; not found.  Consider explicitly specifying the type of the range variable &apos;{2}&apos;..
        /// </summary>
        public static string ERR_QueryNoProviderCastable {
            get {
                return ResourceManager.GetString("ERR_QueryNoProviderCastable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find an implementation of the query pattern for source type &apos;{0}&apos;.  &apos;{1}&apos; not found.  Are you missing required assembly references or a using directive for &apos;System.Linq&apos;?.
        /// </summary>
        public static string ERR_QueryNoProviderStandard {
            get {
                return ResourceManager.GetString("ERR_QueryNoProviderStandard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; is not in scope on the left side of &apos;equals&apos;.  Consider swapping the expressions on either side of &apos;equals&apos;..
        /// </summary>
        public static string ERR_QueryOuterKey {
            get {
                return ResourceManager.GetString("ERR_QueryOuterKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot pass the range variable &apos;{0}&apos; as an out or ref parameter.
        /// </summary>
        public static string ERR_QueryOutRefRangeVariable {
            get {
                return ResourceManager.GetString("ERR_QueryOutRefRangeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot assign {0} to a range variable.
        /// </summary>
        public static string ERR_QueryRangeVariableAssignedBadValue {
            get {
                return ResourceManager.GetString("ERR_QueryRangeVariableAssignedBadValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range variable &apos;{0}&apos; conflicts with a previous declaration of &apos;{0}&apos;.
        /// </summary>
        public static string ERR_QueryRangeVariableOverrides {
            get {
                return ResourceManager.GetString("ERR_QueryRangeVariableOverrides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Range variable &apos;{0}&apos; cannot be assigned to -- it is read only.
        /// </summary>
        public static string ERR_QueryRangeVariableReadOnly {
            get {
                return ResourceManager.GetString("ERR_QueryRangeVariableReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The range variable &apos;{0}&apos; cannot have the same name as a method type parameter.
        /// </summary>
        public static string ERR_QueryRangeVariableSameAsTypeParam {
            get {
                return ResourceManager.GetString("ERR_QueryRangeVariableSameAsTypeParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of the expression in the {0} clause is incorrect.  Type inference failed in the call to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_QueryTypeInferenceFailed {
            get {
                return ResourceManager.GetString("ERR_QueryTypeInferenceFailed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type of one of the expressions in the {0} clause is incorrect.  Type inference failed in the call to &apos;{1}&apos;..
        /// </summary>
        public static string ERR_QueryTypeInferenceFailedMulti {
            get {
                return ResourceManager.GetString("ERR_QueryTypeInferenceFailedMulti", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; is not allowed in a subsequent from clause in a query expression with source type &apos;{1}&apos;.  Type inference failed in the call to &apos;{2}&apos;..
        /// </summary>
        public static string ERR_QueryTypeInferenceFailedSelectMany {
            get {
                return ResourceManager.GetString("ERR_QueryTypeInferenceFailedSelectMany", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raw string literal delimiter must be on its own line..
        /// </summary>
        public static string ERR_RawStringDelimiterOnOwnLine {
            get {
                return ResourceManager.GetString("ERR_RawStringDelimiterOnOwnLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-line raw string literals are only allowed in verbatim interpolated strings..
        /// </summary>
        public static string ERR_RawStringInVerbatimInterpolatedStrings {
            get {
                return ResourceManager.GetString("ERR_RawStringInVerbatimInterpolatedStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-line raw string literals must contain at least one line of content..
        /// </summary>
        public static string ERR_RawStringMustContainContent {
            get {
                return ResourceManager.GetString("ERR_RawStringMustContainContent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Raw string literals are not allowed in preprocessor directives..
        /// </summary>
        public static string ERR_RawStringNotInDirectives {
            get {
                return ResourceManager.GetString("ERR_RawStringNotInDirectives", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to } expected.
        /// </summary>
        public static string ERR_RbraceExpected {
            get {
                return ResourceManager.GetString("ERR_RbraceExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be embedded because it has a re-abstraction of a member from base interface. Consider setting the &apos;Embed Interop Types&apos; property to false..
        /// </summary>
        public static string ERR_ReAbstractionInNoPIAType {
            get {
                return ResourceManager.GetString("ERR_ReAbstractionInNoPIAType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: &apos;readonly&apos; can only be used on accessors if the property or indexer has both a get and a set accessor.
        /// </summary>
        public static string ERR_ReadOnlyModMissingAccessor {
            get {
                return ResourceManager.GetString("ERR_ReadOnlyModMissingAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of readonly field &apos;{0}&apos; of type &apos;{1}&apos; cannot be assigned with an object initializer because it is of a value type.
        /// </summary>
        public static string ERR_ReadonlyValueTypeInObjectInitializer {
            get {
                return ResourceManager.GetString("ERR_ReadonlyValueTypeInObjectInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary constructor conflicts with the synthesized copy constructor..
        /// </summary>
        public static string ERR_RecordAmbigCtor {
            get {
                return ResourceManager.GetString("ERR_RecordAmbigCtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A constructor declared in a &apos;struct&apos; with parameter list must have a &apos;this&apos; initializer that calls the primary constructor or an explicitly declared constructor..
        /// </summary>
        public static string ERR_RecordStructConstructorCallsDefaultConstructor {
            get {
                return ResourceManager.GetString("ERR_RecordStructConstructorCallsDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor &apos;{0}&apos; cannot call itself.
        /// </summary>
        public static string ERR_RecursiveConstructorCall {
            get {
                return ResourceManager.GetString("ERR_RecursiveConstructorCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of &apos;{0}&apos; cannot be inferred since its initializer directly or indirectly refers to the definition..
        /// </summary>
        public static string ERR_RecursivelyTypedVariable {
            get {
                return ResourceManager.GetString("ERR_RecursivelyTypedVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression must be of type &apos;{0}&apos; because it is being assigned by reference.
        /// </summary>
        public static string ERR_RefAssignmentMustHaveIdentityConversion {
            get {
                return ResourceManager.GetString("ERR_RefAssignmentMustHaveIdentityConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot ref-assign &apos;{1}&apos; to &apos;{0}&apos; because &apos;{1}&apos; has a narrower escape scope than &apos;{0}&apos;..
        /// </summary>
        public static string ERR_RefAssignNarrower {
            get {
                return ResourceManager.GetString("ERR_RefAssignNarrower", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot ref-assign &apos;{1}&apos; to &apos;{0}&apos; because &apos;{1}&apos; can only escape the current method through a return statement..
        /// </summary>
        public static string ERR_RefAssignReturnOnly {
            get {
                return ResourceManager.GetString("ERR_RefAssignReturnOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot ref-assign &apos;{1}&apos; to &apos;{0}&apos; because &apos;{1}&apos; has a wider value escape scope than &apos;{0}&apos; allowing assignment through &apos;{0}&apos; of values with narrower escapes scopes than &apos;{1}&apos;..
        /// </summary>
        public static string ERR_RefAssignValEscapeWider {
            get {
                return ResourceManager.GetString("ERR_RefAssignValEscapeWider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;await&apos; cannot be used in an expression containing a ref conditional operator.
        /// </summary>
        public static string ERR_RefConditionalAndAwait {
            get {
                return ResourceManager.GetString("ERR_RefConditionalAndAwait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The expression must be of type &apos;{0}&apos; to match the alternative ref value.
        /// </summary>
        public static string ERR_RefConditionalDifferentTypes {
            get {
                return ResourceManager.GetString("ERR_RefConditionalDifferentTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Both conditional operator values must be ref values or neither may be a ref value.
        /// </summary>
        public static string ERR_RefConditionalNeedsTwoRefs {
            get {
                return ResourceManager.GetString("ERR_RefConditionalNeedsTwoRefs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; must be a reference type in order to use it as parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_RefConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_RefConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #r is only allowed in scripts.
        /// </summary>
        public static string ERR_ReferenceDirectiveOnlyAllowedInScripts {
            get {
                return ResourceManager.GetString("ERR_ReferenceDirectiveOnlyAllowedInScripts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first parameter of a &apos;ref&apos; extension method &apos;{0}&apos; must be a value type or a generic type constrained to struct..
        /// </summary>
        public static string ERR_RefExtensionMustBeValueTypeOrConstrainedToOne {
            get {
                return ResourceManager.GetString("ERR_RefExtensionMustBeValueTypeOrConstrainedToOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ref field cannot refer to a ref struct..
        /// </summary>
        public static string ERR_RefFieldCannotReferToRefStruct {
            get {
                return ResourceManager.GetString("ERR_RefFieldCannotReferToRefStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ref field can only be declared in a ref struct..
        /// </summary>
        public static string ERR_RefFieldInNonRefStruct {
            get {
                return ResourceManager.GetString("ERR_RefFieldInNonRefStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;ref&apos; local cannot be preserved across &apos;await&apos; or &apos;yield&apos; boundary..
        /// </summary>
        public static string ERR_RefLocalAcrossAwait {
            get {
                return ResourceManager.GetString("ERR_RefLocalAcrossAwait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The left-hand side of a ref assignment must be a ref variable..
        /// </summary>
        public static string ERR_RefLocalOrParamExpected {
            get {
                return ResourceManager.GetString("ERR_RefLocalOrParamExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ref or out value must be an assignable variable.
        /// </summary>
        public static string ERR_RefLvalueExpected {
            get {
                return ResourceManager.GetString("ERR_RefLvalueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ref or out parameter cannot have a default value.
        /// </summary>
        public static string ERR_RefOutDefaultValue {
            get {
                return ResourceManager.GetString("ERR_RefOutDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A non ref-returning property or indexer may not be used as an out or ref value.
        /// </summary>
        public static string ERR_RefProperty {
            get {
                return ResourceManager.GetString("ERR_RefProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties which return by reference cannot have set accessors.
        /// </summary>
        public static string ERR_RefPropertyCannotHaveSetAccessor {
            get {
                return ResourceManager.GetString("ERR_RefPropertyCannotHaveSetAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Properties which return by reference must have a get accessor.
        /// </summary>
        public static string ERR_RefPropertyMustHaveGetAccessor {
            get {
                return ResourceManager.GetString("ERR_RefPropertyMustHaveGetAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A readonly field cannot be used as a ref or out value (except in a constructor).
        /// </summary>
        public static string ERR_RefReadonly {
            get {
                return ResourceManager.GetString("ERR_RefReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of readonly field &apos;{0}&apos; cannot be used as a ref or out value (except in a constructor).
        /// </summary>
        public static string ERR_RefReadonly2 {
            get {
                return ResourceManager.GetString("ERR_RefReadonly2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;{0}&apos; as a ref or out value because it is read-only.
        /// </summary>
        public static string ERR_RefReadonlyLocal {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use fields of &apos;{0}&apos; as a ref or out value because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_RefReadonlyLocal2Cause {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyLocal2Cause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;{0}&apos; as a ref or out value because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_RefReadonlyLocalCause {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyLocalCause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use {0} &apos;{1}&apos; as a ref or out value because it is a readonly variable.
        /// </summary>
        public static string ERR_RefReadonlyNotField {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyNotField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of {0} &apos;{1}&apos; cannot be used as a ref or out value because it is a readonly variable.
        /// </summary>
        public static string ERR_RefReadonlyNotField2 {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyNotField2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A primary constructor parameter of a readonly type cannot be used as a ref or out value (except in init-only setter of the type or a variable initializer).
        /// </summary>
        public static string ERR_RefReadonlyPrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyPrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of primary constructor parameter &apos;{0}&apos; of a readonly type cannot be used as a ref or out value (except in init-only setter of the type or a variable initializer).
        /// </summary>
        public static string ERR_RefReadonlyPrimaryConstructorParameter2 {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyPrimaryConstructorParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static readonly field cannot be used as a ref or out value (except in a static constructor).
        /// </summary>
        public static string ERR_RefReadonlyStatic {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of static readonly field &apos;{0}&apos; cannot be used as a ref or out value (except in a static constructor).
        /// </summary>
        public static string ERR_RefReadonlyStatic2 {
            get {
                return ResourceManager.GetString("ERR_RefReadonlyStatic2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;readonly&apos; modifier must be specified after &apos;ref&apos;..
        /// </summary>
        public static string ERR_RefReadOnlyWrongOrdering {
            get {
                return ResourceManager.GetString("ERR_RefReadOnlyWrongOrdering", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference returned by a call to &apos;{0}&apos; cannot be preserved across &apos;await&apos; or &apos;yield&apos; boundary..
        /// </summary>
        public static string ERR_RefReturningCallAndAwait {
            get {
                return ResourceManager.GetString("ERR_RefReturningCallAndAwait", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a call to a method, property, or indexer that returns by reference.
        /// </summary>
        public static string ERR_RefReturningCallInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_RefReturningCallInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ref returning properties cannot be required..
        /// </summary>
        public static string ERR_RefReturningPropertiesCannotBeRequired {
            get {
                return ResourceManager.GetString("ERR_RefReturningPropertiesCannotBeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return local &apos;{0}&apos; by reference because it is not a ref local.
        /// </summary>
        public static string ERR_RefReturnLocal {
            get {
                return ResourceManager.GetString("ERR_RefReturnLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return a member of local &apos;{0}&apos; by reference because it is not a ref local.
        /// </summary>
        public static string ERR_RefReturnLocal2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnLocal2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression cannot be used in this context because it may not be passed or returned by reference.
        /// </summary>
        public static string ERR_RefReturnLvalueExpected {
            get {
                return ResourceManager.GetString("ERR_RefReturnLvalueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The return expression must be of type &apos;{0}&apos; because this method returns by reference.
        /// </summary>
        public static string ERR_RefReturnMustHaveIdentityConversion {
            get {
                return ResourceManager.GetString("ERR_RefReturnMustHaveIdentityConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return &apos;{0}&apos; by reference because it was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string ERR_RefReturnNonreturnableLocal {
            get {
                return ResourceManager.GetString("ERR_RefReturnNonreturnableLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return by reference a member of &apos;{0}&apos; because it was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string ERR_RefReturnNonreturnableLocal2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnNonreturnableLocal2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return a parameter by reference &apos;{0}&apos; through a ref parameter; it can only be returned in a return statement.
        /// </summary>
        public static string ERR_RefReturnOnlyParameter {
            get {
                return ResourceManager.GetString("ERR_RefReturnOnlyParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return by reference a member of parameter &apos;{0}&apos; through a ref parameter; it can only be returned in a return statement.
        /// </summary>
        public static string ERR_RefReturnOnlyParameter2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnOnlyParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return a parameter by reference &apos;{0}&apos; because it is not a ref parameter.
        /// </summary>
        public static string ERR_RefReturnParameter {
            get {
                return ResourceManager.GetString("ERR_RefReturnParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return by reference a member of parameter &apos;{0}&apos; because it is not a ref or out parameter.
        /// </summary>
        public static string ERR_RefReturnParameter2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return primary constructor parameter &apos;{0}&apos; by reference..
        /// </summary>
        public static string ERR_RefReturnPrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("ERR_RefReturnPrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return the range variable &apos;{0}&apos; by reference.
        /// </summary>
        public static string ERR_RefReturnRangeVariable {
            get {
                return ResourceManager.GetString("ERR_RefReturnRangeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A readonly field cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonly {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of readonly field &apos;{0}&apos; cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonly2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonly2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return &apos;{0}&apos; by reference because it is read-only.
        /// </summary>
        public static string ERR_RefReturnReadonlyLocal {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return &apos;{0}&apos; by reference because it is a &apos;{1}&apos;.
        /// </summary>
        public static string ERR_RefReturnReadonlyLocalCause {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyLocalCause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return {0} &apos;{1}&apos; by writable reference because it is a readonly variable.
        /// </summary>
        public static string ERR_RefReturnReadonlyNotField {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyNotField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of {0} &apos;{1}&apos; cannot be returned by writable reference because it is a readonly variable.
        /// </summary>
        public static string ERR_RefReturnReadonlyNotField2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyNotField2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A primary constructor parameter of a readonly type cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonlyPrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyPrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of primary constructor parameter &apos;{0}&apos; of a readonly type cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonlyPrimaryConstructorParameter2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyPrimaryConstructorParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static readonly field cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonlyStatic {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of static readonly field &apos;{0}&apos; cannot be returned by writable reference.
        /// </summary>
        public static string ERR_RefReturnReadonlyStatic2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnReadonlyStatic2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return a parameter by reference &apos;{0}&apos; because it is scoped to the current method.
        /// </summary>
        public static string ERR_RefReturnScopedParameter {
            get {
                return ResourceManager.GetString("ERR_RefReturnScopedParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return by reference a member of parameter &apos;{0}&apos; because it is scoped to the current method.
        /// </summary>
        public static string ERR_RefReturnScopedParameter2 {
            get {
                return ResourceManager.GetString("ERR_RefReturnScopedParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Struct members cannot return &apos;this&apos; or other instance members by reference.
        /// </summary>
        public static string ERR_RefReturnStructThis {
            get {
                return ResourceManager.GetString("ERR_RefReturnStructThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return &apos;this&apos; by reference..
        /// </summary>
        public static string ERR_RefReturnThis {
            get {
                return ResourceManager.GetString("ERR_RefReturnThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;ref struct&apos; is already specified..
        /// </summary>
        public static string ERR_RefStructConstraintAlreadySpecified {
            get {
                return ResourceManager.GetString("ERR_RefStructConstraintAlreadySpecified", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; for ref struct &apos;{2}&apos;..
        /// </summary>
        public static string ERR_RefStructDoesNotSupportDefaultInterfaceImplementationForMember {
            get {
                return ResourceManager.GetString("ERR_RefStructDoesNotSupportDefaultInterfaceImplementationForMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot specify both a constraint class and the &apos;class&apos; or &apos;struct&apos; constraint.
        /// </summary>
        public static string ERR_RefValBoundWithClass {
            get {
                return ResourceManager.GetString("ERR_RefValBoundWithClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relational patterns may not be used for a floating-point NaN..
        /// </summary>
        public static string ERR_RelationalPatternWithNaN {
            get {
                return ResourceManager.GetString("ERR_RelationalPatternWithNaN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; cannot be hidden by &apos;{1}&apos;..
        /// </summary>
        public static string ERR_RequiredMemberCannotBeHidden {
            get {
                return ResourceManager.GetString("ERR_RequiredMemberCannotBeHidden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; cannot be less visible or have a setter less visible than the containing type &apos;{1}&apos;..
        /// </summary>
        public static string ERR_RequiredMemberCannotBeLessVisibleThanContainingType {
            get {
                return ResourceManager.GetString("ERR_RequiredMemberCannotBeLessVisibleThanContainingType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; must be set in the object initializer or attribute constructor..
        /// </summary>
        public static string ERR_RequiredMemberMustBeSet {
            get {
                return ResourceManager.GetString("ERR_RequiredMemberMustBeSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; must be settable..
        /// </summary>
        public static string ERR_RequiredMemberMustBeSettable {
            get {
                return ResourceManager.GetString("ERR_RequiredMemberMustBeSettable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required members list for the base type &apos;{0}&apos; is malformed and cannot be interpreted. To use this constructor, apply the &apos;SetsRequiredMembers&apos; attribute..
        /// </summary>
        public static string ERR_RequiredMembersBaseTypeInvalid {
            get {
                return ResourceManager.GetString("ERR_RequiredMembersBaseTypeInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The required members list for &apos;{0}&apos; is malformed and cannot be interpreted..
        /// </summary>
        public static string ERR_RequiredMembersInvalid {
            get {
                return ResourceManager.GetString("ERR_RequiredMembersInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; must be assigned a value, it cannot use a nested member or collection initializer..
        /// </summary>
        public static string ERR_RequiredMembersMustBeAssignedValue {
            get {
                return ResourceManager.GetString("ERR_RequiredMembersMustBeAssignedValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types and aliases cannot be named &apos;required&apos;..
        /// </summary>
        public static string ERR_RequiredNameDisallowed {
            get {
                return ResourceManager.GetString("ERR_RequiredNameDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly name &apos;{0}&apos; is reserved and cannot be used as a reference in an interactive session.
        /// </summary>
        public static string ERR_ReservedAssemblyName {
            get {
                return ResourceManager.GetString("ERR_ReservedAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The enumerator name &apos;{0}&apos; is reserved and cannot be used.
        /// </summary>
        public static string ERR_ReservedEnumerator {
            get {
                return ResourceManager.GetString("ERR_ReservedEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Each linked resource and module must have a unique filename. Filename &apos;{0}&apos; is specified more than once in this assembly.
        /// </summary>
        public static string ERR_ResourceFileNameNotUnique {
            get {
                return ResourceManager.GetString("ERR_ResourceFileNameNotUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource identifier &apos;{0}&apos; has already been used in this assembly.
        /// </summary>
        public static string ERR_ResourceNotUnique {
            get {
                return ResourceManager.GetString("ERR_ResourceNotUnique", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since &apos;{0}&apos; returns void, a return keyword must not be followed by an object expression.
        /// </summary>
        public static string ERR_RetNoObjectRequired {
            get {
                return ResourceManager.GetString("ERR_RetNoObjectRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymous function converted to a void returning delegate cannot return a value.
        /// </summary>
        public static string ERR_RetNoObjectRequiredLambda {
            get {
                return ResourceManager.GetString("ERR_RetNoObjectRequiredLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An object of a type convertible to &apos;{0}&apos; is required.
        /// </summary>
        public static string ERR_RetObjectRequired {
            get {
                return ResourceManager.GetString("ERR_RetObjectRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: not all code paths return a value.
        /// </summary>
        public static string ERR_ReturnExpected {
            get {
                return ResourceManager.GetString("ERR_ReturnExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot return a value from an iterator. Use the yield return statement to return a value, or yield break to end the iteration..
        /// </summary>
        public static string ERR_ReturnInIterator {
            get {
                return ResourceManager.GetString("ERR_ReturnInIterator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify the return value of &apos;{0}&apos; because it is not a variable.
        /// </summary>
        public static string ERR_ReturnNotLValue {
            get {
                return ResourceManager.GetString("ERR_ReturnNotLValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static types cannot be used as return types.
        /// </summary>
        public static string ERR_ReturnTypeIsStaticClass {
            get {
                return ResourceManager.GetString("ERR_ReturnTypeIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support by-ref-like generics..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportByRefLikeGenerics {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportByRefLikeGenerics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: Target runtime doesn&apos;t support covariant types in overrides. Type must be &apos;{2}&apos; to match overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportCovariantPropertiesOfClasses {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportCovariantPropertiesOfClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: Target runtime doesn&apos;t support covariant return types in overrides. Return type must be &apos;{2}&apos; to match overridden member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportCovariantReturnsOfClasses {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportCovariantReturnsOfClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support default interface implementation..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportDefaultInterfaceImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos; because the target runtime doesn&apos;t support default interface implementation..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportDefaultInterfaceImplementationForMember {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportDefaultInterfaceImplementationForMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support inline array types..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportInlineArrayTypes {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportInlineArrayTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support &apos;protected&apos;, &apos;protected internal&apos;, or &apos;private protected&apos; accessibility for a member of an interface..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportProtectedAccessForInterfaceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support ref fields..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportRefFields {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportRefFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Target runtime doesn&apos;t support static abstract members in interfaces..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportStaticAbstractMembersInInterfaces {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportStaticAbstractMembersInInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement interface member &apos;{1}&apos; in type &apos;{2}&apos; because the target runtime doesn&apos;t support static abstract members in interfaces..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportStaticAbstractMembersInInterfacesForMember {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportStaticAbstractMembersInInterfacesForMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target runtime doesn&apos;t support extensible or runtime-environment default calling conventions..
        /// </summary>
        public static string ERR_RuntimeDoesNotSupportUnmanagedDefaultCallConv {
            get {
                return ResourceManager.GetString("ERR_RuntimeDoesNotSupportUnmanagedDefaultCallConv", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{1}&apos; exists in both &apos;{0}&apos; and &apos;{2}&apos;.
        /// </summary>
        public static string ERR_SameFullNameAggAgg {
            get {
                return ResourceManager.GetString("ERR_SameFullNameAggAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace &apos;{1}&apos; in &apos;{0}&apos; conflicts with the type &apos;{3}&apos; in &apos;{2}&apos;.
        /// </summary>
        public static string ERR_SameFullNameNsAgg {
            get {
                return ResourceManager.GetString("ERR_SameFullNameNsAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{1}&apos; in &apos;{0}&apos; conflicts with the namespace &apos;{3}&apos; in &apos;{2}&apos;.
        /// </summary>
        public static string ERR_SameFullNameThisAggThisNs {
            get {
                return ResourceManager.GetString("ERR_SameFullNameThisAggThisNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier cannot be used with discard..
        /// </summary>
        public static string ERR_ScopedDiscard {
            get {
                return ResourceManager.GetString("ERR_ScopedDiscard", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter &apos;{0}&apos; doesn&apos;t match overridden or implemented member..
        /// </summary>
        public static string ERR_ScopedMismatchInParameterOfOverrideOrImplementation {
            get {
                return ResourceManager.GetString("ERR_ScopedMismatchInParameterOfOverrideOrImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter &apos;{0}&apos; doesn&apos;t match partial definition..
        /// </summary>
        public static string ERR_ScopedMismatchInParameterOfPartial {
            get {
                return ResourceManager.GetString("ERR_ScopedMismatchInParameterOfPartial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter &apos;{0}&apos; doesn&apos;t match target &apos;{1}&apos;..
        /// </summary>
        public static string ERR_ScopedMismatchInParameterOfTarget {
            get {
                return ResourceManager.GetString("ERR_ScopedMismatchInParameterOfTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier can be used for refs and ref struct values only..
        /// </summary>
        public static string ERR_ScopedRefAndRefStructOnly {
            get {
                return ResourceManager.GetString("ERR_ScopedRefAndRefStructOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types and aliases cannot be named &apos;scoped&apos;..
        /// </summary>
        public static string ERR_ScopedTypeNameDisallowed {
            get {
                return ResourceManager.GetString("ERR_ScopedTypeNameDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required members are not allowed on the top level of a script or submission..
        /// </summary>
        public static string ERR_ScriptsAndSubmissionsCannotHaveRequiredMembers {
            get {
                return ResourceManager.GetString("ERR_ScriptsAndSubmissionsCannotHaveRequiredMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be sealed because containing record is not sealed..
        /// </summary>
        public static string ERR_SealedAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_SealedAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be sealed because it is not an override.
        /// </summary>
        public static string ERR_SealedNonOverride {
            get {
                return ResourceManager.GetString("ERR_SealedNonOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a type cannot be both static and sealed.
        /// </summary>
        public static string ERR_SealedStaticClass {
            get {
                return ResourceManager.GetString("ERR_SealedStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security attribute &apos;{0}&apos; has an invalid SecurityAction value &apos;{1}&apos;.
        /// </summary>
        public static string ERR_SecurityAttributeInvalidAction {
            get {
                return ResourceManager.GetString("ERR_SecurityAttributeInvalidAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityAction value &apos;{0}&apos; is invalid for security attributes applied to an assembly.
        /// </summary>
        public static string ERR_SecurityAttributeInvalidActionAssembly {
            get {
                return ResourceManager.GetString("ERR_SecurityAttributeInvalidActionAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SecurityAction value &apos;{0}&apos; is invalid for security attributes applied to a type or a method.
        /// </summary>
        public static string ERR_SecurityAttributeInvalidActionTypeOrMethod {
            get {
                return ResourceManager.GetString("ERR_SecurityAttributeInvalidActionTypeOrMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security attribute &apos;{0}&apos; is not valid on this declaration type. Security attributes are only valid on assembly, type and method declarations..
        /// </summary>
        public static string ERR_SecurityAttributeInvalidTarget {
            get {
                return ResourceManager.GetString("ERR_SecurityAttributeInvalidTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to First argument to a security attribute must be a valid SecurityAction.
        /// </summary>
        public static string ERR_SecurityAttributeMissingAction {
            get {
                return ResourceManager.GetString("ERR_SecurityAttributeMissingAction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Security attribute &apos;{0}&apos; cannot be applied to an Async method..
        /// </summary>
        public static string ERR_SecurityCriticalOrSecuritySafeCriticalOnAsync {
            get {
                return ResourceManager.GetString("ERR_SecurityCriticalOrSecuritySafeCriticalOnAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async methods are not allowed in an Interface, Class, or Structure which has the &apos;SecurityCritical&apos; or &apos;SecuritySafeCritical&apos; attribute..
        /// </summary>
        public static string ERR_SecurityCriticalOrSecuritySafeCriticalOnAsyncInClassOrStruct {
            get {
                return ResourceManager.GetString("ERR_SecurityCriticalOrSecuritySafeCriticalOnAsyncInClassOrStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ; expected.
        /// </summary>
        public static string ERR_SemicolonExpected {
            get {
                return ResourceManager.GetString("ERR_SemicolonExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to { or ; expected.
        /// </summary>
        public static string ERR_SemiOrLBraceExpected {
            get {
                return ResourceManager.GetString("ERR_SemiOrLBraceExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to { or ; or =&gt; expected.
        /// </summary>
        public static string ERR_SemiOrLBraceOrArrowExpected {
            get {
                return ResourceManager.GetString("ERR_SemiOrLBraceOrArrowExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; must return &apos;{1}&apos;..
        /// </summary>
        public static string ERR_SignatureMismatchInRecord {
            get {
                return ResourceManager.GetString("ERR_SignatureMismatchInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key file &apos;{0}&apos; is missing the private key needed for signing.
        /// </summary>
        public static string ERR_SignButNoPrivateKey {
            get {
                return ResourceManager.GetString("ERR_SignButNoPrivateKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot specify /main if there is a compilation unit with top-level statements..
        /// </summary>
        public static string ERR_SimpleProgramDisallowsMainType {
            get {
                return ResourceManager.GetString("ERR_SimpleProgramDisallowsMainType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to At least one top-level statement must be non-empty..
        /// </summary>
        public static string ERR_SimpleProgramIsEmpty {
            get {
                return ResourceManager.GetString("ERR_SimpleProgramIsEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use local variable or local function &apos;{0}&apos; declared in a top-level statement in this context..
        /// </summary>
        public static string ERR_SimpleProgramLocalIsReferencedOutsideOfTopLevelStatement {
            get {
                return ResourceManager.GetString("ERR_SimpleProgramLocalIsReferencedOutsideOfTopLevelStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one compilation unit can have top-level statements..
        /// </summary>
        public static string ERR_SimpleProgramMultipleUnitsWithTopLevelStatements {
            get {
                return ResourceManager.GetString("ERR_SimpleProgramMultipleUnitsWithTopLevelStatements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Program using top-level statements must be an executable..
        /// </summary>
        public static string ERR_SimpleProgramNotAnExecutable {
            get {
                return ResourceManager.GetString("ERR_SimpleProgramNotAnExecutable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A single-element deconstruct pattern requires some other syntax for disambiguation. It is recommended to add a discard designator &apos;_&apos; after the close paren &apos;)&apos;..
        /// </summary>
        public static string ERR_SingleElementPositionalPatternRequiresDisambiguation {
            get {
                return ResourceManager.GetString("ERR_SingleElementPositionalPatternRequiresDisambiguation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A single-line comment may not be used in an interpolated string..
        /// </summary>
        public static string ERR_SingleLineCommentInExpressionHole {
            get {
                return ResourceManager.GetString("ERR_SingleLineCommentInExpressionHole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type or namespace name &apos;{0}&apos; could not be found (are you missing a using directive or an assembly reference?).
        /// </summary>
        public static string ERR_SingleTypeNameNotFound {
            get {
                return ResourceManager.GetString("ERR_SingleTypeNameNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; could not be found. This type has been forwarded to assembly &apos;{1}&apos;. Consider adding a reference to that assembly..
        /// </summary>
        public static string ERR_SingleTypeNameNotFoundFwd {
            get {
                return ResourceManager.GetString("ERR_SingleTypeNameNotFoundFwd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not have a predefined size, therefore sizeof can only be used in an unsafe context.
        /// </summary>
        public static string ERR_SizeofUnsafe {
            get {
                return ResourceManager.GetString("ERR_SizeofUnsafe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file references are not supported..
        /// </summary>
        public static string ERR_SourceFileReferencesNotSupported {
            get {
                return ResourceManager.GetString("ERR_SourceFileReferencesNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /sourcelink switch is only supported when emitting PDB..
        /// </summary>
        public static string ERR_SourceLinkRequiresPdb {
            get {
                return ResourceManager.GetString("ERR_SourceLinkRequiresPdb", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Instance of type &apos;{0}&apos; cannot be used inside a nested function, query expression, iterator block or async method.
        /// </summary>
        public static string ERR_SpecialByRefInLambda {
            get {
                return ResourceManager.GetString("ERR_SpecialByRefInLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint cannot be special class &apos;{0}&apos;.
        /// </summary>
        public static string ERR_SpecialTypeAsBound {
            get {
                return ResourceManager.GetString("ERR_SpecialTypeAsBound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Spread operator &apos;..&apos; cannot operate on variables of type &apos;{0}&apos; because &apos;{0}&apos; does not contain a public instance or extension definition for &apos;{1}&apos;.
        /// </summary>
        public static string ERR_SpreadMissingMember {
            get {
                return ResourceManager.GetString("ERR_SpreadMissingMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conversion of a stackalloc expression of type &apos;{0}&apos; to type &apos;{1}&apos; is not possible..
        /// </summary>
        public static string ERR_StackAllocConversionNotPossible {
            get {
                return ResourceManager.GetString("ERR_StackAllocConversionNotPossible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stackalloc may not be used in a catch or finally block.
        /// </summary>
        public static string ERR_StackallocInCatchFinally {
            get {
                return ResourceManager.GetString("ERR_StackallocInCatchFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A lambda expression with a statement body cannot be converted to an expression tree.
        /// </summary>
        public static string ERR_StatementLambdaToExpressionTree {
            get {
                return ResourceManager.GetString("ERR_StatementLambdaToExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static anonymous function cannot contain a reference to &apos;this&apos; or &apos;base&apos;..
        /// </summary>
        public static string ERR_StaticAnonymousFunctionCannotCaptureThis {
            get {
                return ResourceManager.GetString("ERR_StaticAnonymousFunctionCannotCaptureThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static anonymous function cannot contain a reference to &apos;{0}&apos;..
        /// </summary>
        public static string ERR_StaticAnonymousFunctionCannotCaptureVariable {
            get {
                return ResourceManager.GetString("ERR_StaticAnonymousFunctionCannotCaptureVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record member &apos;{0}&apos; may not be static..
        /// </summary>
        public static string ERR_StaticAPIInRecord {
            get {
                return ResourceManager.GetString("ERR_StaticAPIInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{1}&apos;: cannot derive from static class &apos;{0}&apos;.
        /// </summary>
        public static string ERR_StaticBaseClass {
            get {
                return ResourceManager.GetString("ERR_StaticBaseClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static classes cannot implement interfaces.
        /// </summary>
        public static string ERR_StaticClassInterfaceImpl {
            get {
                return ResourceManager.GetString("ERR_StaticClassInterfaceImpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The constant &apos;{0}&apos; cannot be marked static.
        /// </summary>
        public static string ERR_StaticConstant {
            get {
                return ResourceManager.GetString("ERR_StaticConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a static constructor must be parameterless.
        /// </summary>
        public static string ERR_StaticConstParam {
            get {
                return ResourceManager.GetString("ERR_StaticConstParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: access modifiers are not allowed on static constructors.
        /// </summary>
        public static string ERR_StaticConstructorWithAccessModifiers {
            get {
                return ResourceManager.GetString("ERR_StaticConstructorWithAccessModifiers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static constructor cannot have an explicit &apos;this&apos; or &apos;base&apos; constructor call.
        /// </summary>
        public static string ERR_StaticConstructorWithExplicitConstructorCall {
            get {
                return ResourceManager.GetString("ERR_StaticConstructorWithExplicitConstructorCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static class &apos;{0}&apos; cannot derive from type &apos;{1}&apos;. Static classes must derive from object..
        /// </summary>
        public static string ERR_StaticDerivedFromNonObject {
            get {
                return ResourceManager.GetString("ERR_StaticDerivedFromNonObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static local function cannot contain a reference to &apos;this&apos; or &apos;base&apos;..
        /// </summary>
        public static string ERR_StaticLocalFunctionCannotCaptureThis {
            get {
                return ResourceManager.GetString("ERR_StaticLocalFunctionCannotCaptureThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static local function cannot contain a reference to &apos;{0}&apos;..
        /// </summary>
        public static string ERR_StaticLocalFunctionCannotCaptureVariable {
            get {
                return ResourceManager.GetString("ERR_StaticLocalFunctionCannotCaptureVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use static local &apos;{0}&apos; in a codeblock or lambda expression..
        /// </summary>
        public static string ERR_StaticLocalInCodeBlock {
            get {
                return ResourceManager.GetString("ERR_StaticLocalInCodeBlock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static member &apos;{0}&apos; cannot be marked &apos;readonly&apos;..
        /// </summary>
        public static string ERR_StaticMemberCantBeReadOnly {
            get {
                return ResourceManager.GetString("ERR_StaticMemberCantBeReadOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static field or property &apos;{0}&apos; cannot be assigned in an object initializer.
        /// </summary>
        public static string ERR_StaticMemberInObjectInitializer {
            get {
                return ResourceManager.GetString("ERR_StaticMemberInObjectInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A static member cannot be marked as &apos;{0}&apos;.
        /// </summary>
        public static string ERR_StaticNotVirtual {
            get {
                return ResourceManager.GetString("ERR_StaticNotVirtual", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stdin argument &apos;-&apos; is specified, but input has not been redirected from the standard input stream..
        /// </summary>
        public static string ERR_StdInOptionProvidedButConsoleInputIsNotRedirected {
            get {
                return ResourceManager.GetString("ERR_StdInOptionProvidedButConsoleInputIsNotRedirected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All elements of a string concatenation must be of type &apos;string&apos;. Element {0} is of type &apos;{1}&apos; .
        /// </summary>
        public static string Err_StringConcat {
            get {
                return ResourceManager.GetString("Err_StringConcat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String must start with quote character: &quot;.
        /// </summary>
        public static string ERR_StringMustStartWithQuoteCharacter {
            get {
                return ResourceManager.GetString("ERR_StringMustStartWithQuoteCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;struct&apos; with field initializers must include an explicitly declared constructor..
        /// </summary>
        public static string ERR_StructHasInitializersAndNoDeclaredConstructor {
            get {
                return ResourceManager.GetString("ERR_StructHasInitializersAndNoDeclaredConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Struct member &apos;{0}&apos; of type &apos;{1}&apos; causes a cycle in the struct layout.
        /// </summary>
        public static string ERR_StructLayoutCycle {
            get {
                return ResourceManager.GetString("ERR_StructLayoutCycle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Struct primary constructor parameter &apos;{0}&apos; of type &apos;{1}&apos; causes a cycle in the struct layout.
        /// </summary>
        public static string ERR_StructLayoutCyclePrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("ERR_StructLayoutCyclePrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FieldOffset attribute is not allowed on static or const fields.
        /// </summary>
        public static string ERR_StructOffsetOnBadField {
            get {
                return ResourceManager.GetString("ERR_StructOffsetOnBadField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FieldOffset attribute can only be placed on members of types marked with the StructLayout(LayoutKind.Explicit).
        /// </summary>
        public static string ERR_StructOffsetOnBadStruct {
            get {
                return ResourceManager.GetString("ERR_StructOffsetOnBadStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: structs cannot call base class constructors.
        /// </summary>
        public static string ERR_StructWithBaseConstructorCall {
            get {
                return ResourceManager.GetString("ERR_StructWithBaseConstructorCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sub-expression cannot be used in an argument to nameof..
        /// </summary>
        public static string ERR_SubexpressionNotInNameof {
            get {
                return ResourceManager.GetString("ERR_SubexpressionNotInNameof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pattern is unreachable. It has already been handled by a previous arm of the switch expression or it is impossible to match..
        /// </summary>
        public static string ERR_SwitchArmSubsumed {
            get {
                return ResourceManager.GetString("ERR_SwitchArmSubsumed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch case is unreachable. It has already been handled by a previous case or it is impossible to match..
        /// </summary>
        public static string ERR_SwitchCaseSubsumed {
            get {
                return ResourceManager.GetString("ERR_SwitchCaseSubsumed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No best type was found for the switch expression..
        /// </summary>
        public static string ERR_SwitchExpressionNoBestType {
            get {
                return ResourceManager.GetString("ERR_SwitchExpressionNoBestType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression must be a value; found &apos;{0}&apos;..
        /// </summary>
        public static string ERR_SwitchExpressionValueExpected {
            get {
                return ResourceManager.GetString("ERR_SwitchExpressionValueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control cannot fall out of switch from final case label (&apos;{0}&apos;).
        /// </summary>
        public static string ERR_SwitchFallOut {
            get {
                return ResourceManager.GetString("ERR_SwitchFallOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control cannot fall through from one case label (&apos;{0}&apos;) to another.
        /// </summary>
        public static string ERR_SwitchFallThrough {
            get {
                return ResourceManager.GetString("ERR_SwitchFallThrough", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parentheses are required around the switch governing expression..
        /// </summary>
        public static string ERR_SwitchGoverningExpressionRequiresParens {
            get {
                return ResourceManager.GetString("ERR_SwitchGoverningExpressionRequiresParens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line syntax error: Missing &apos;:&lt;number&gt;&apos; for &apos;{0}&apos; option.
        /// </summary>
        public static string ERR_SwitchNeedsNumber {
            get {
                return ResourceManager.GetString("ERR_SwitchNeedsNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command-line syntax error: Missing &apos;{0}&apos; for &apos;{1}&apos; option.
        /// </summary>
        public static string ERR_SwitchNeedsString {
            get {
                return ResourceManager.GetString("ERR_SwitchNeedsString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is defined in assembly &apos;{1}&apos;..
        /// </summary>
        public static string ERR_SymbolDefinedInAssembly {
            get {
                return ResourceManager.GetString("ERR_SymbolDefinedInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;MethodImplOptions.Synchronized&apos; cannot be applied to an async method.
        /// </summary>
        public static string ERR_SynchronizedAsyncMethod {
            get {
                return ResourceManager.GetString("ERR_SynchronizedAsyncMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax error, &apos;{0}&apos; expected.
        /// </summary>
        public static string ERR_SyntaxError {
            get {
                return ResourceManager.GetString("ERR_SyntaxError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to System.Void cannot be used from C# -- use typeof(void) to get the void type object.
        /// </summary>
        public static string ERR_SystemVoid {
            get {
                return ResourceManager.GetString("ERR_SystemVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Since &apos;{0}&apos; is an async method that returns &apos;{1}&apos;, a return keyword must not be followed by an object expression.
        /// </summary>
        public static string ERR_TaskRetNoObjectRequired {
            get {
                return ResourceManager.GetString("ERR_TaskRetNoObjectRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async lambda expression converted to a &apos;{0}&apos; returning delegate cannot return a value.
        /// </summary>
        public static string ERR_TaskRetNoObjectRequiredLambda {
            get {
                return ResourceManager.GetString("ERR_TaskRetNoObjectRequiredLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;this&apos; is not available in the current context.
        /// </summary>
        public static string ERR_ThisInBadContext {
            get {
                return ResourceManager.GetString("ERR_ThisInBadContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;this&apos; is not valid in a static property, static method, or static field initializer.
        /// </summary>
        public static string ERR_ThisInStaticMeth {
            get {
                return ResourceManager.GetString("ERR_ThisInStaticMeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Keyword &apos;this&apos; or &apos;base&apos; expected.
        /// </summary>
        public static string ERR_ThisOrBaseExpected {
            get {
                return ResourceManager.GetString("ERR_ThisOrBaseExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymous methods, lambda expressions, query expressions, and local functions inside structs cannot access instance members of &apos;this&apos;. Consider copying &apos;this&apos; to a local variable outside the anonymous method, lambda expression, query expression, or local function and using the local instead..
        /// </summary>
        public static string ERR_ThisStructNotInAnonMeth {
            get {
                return ResourceManager.GetString("ERR_ThisStructNotInAnonMeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A throw expression is not allowed in this context..
        /// </summary>
        public static string ERR_ThrowMisplaced {
            get {
                return ResourceManager.GetString("ERR_ThrowMisplaced", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Catch clauses cannot follow the general catch clause of a try statement.
        /// </summary>
        public static string ERR_TooManyCatches {
            get {
                return ResourceManager.GetString("ERR_TooManyCatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many characters in character literal.
        /// </summary>
        public static string ERR_TooManyCharsInConst {
            get {
                return ResourceManager.GetString("ERR_TooManyCharsInConst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interpolated raw string literal does not start with enough &apos;$&apos; characters to allow this many consecutive closing braces as content..
        /// </summary>
        public static string ERR_TooManyCloseBracesForRawString {
            get {
                return ResourceManager.GetString("ERR_TooManyCloseBracesForRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 65534 locals, including those generated by the compiler, are allowed.
        /// </summary>
        public static string ERR_TooManyLocals {
            get {
                return ResourceManager.GetString("ERR_TooManyLocals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The interpolated raw string literal does not start with enough &apos;$&apos; characters to allow this many consecutive opening braces as content..
        /// </summary>
        public static string ERR_TooManyOpenBracesForRawString {
            get {
                return ResourceManager.GetString("ERR_TooManyOpenBracesForRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The raw string literal does not start with enough quote characters to allow this many consecutive quote characters as content..
        /// </summary>
        public static string ERR_TooManyQuotesForRawString {
            get {
                return ResourceManager.GetString("ERR_TooManyQuotesForRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Combined length of user strings used by the program exceeds allowed limit. Try to decrease use of string literals..
        /// </summary>
        public static string ERR_TooManyUserStrings {
            get {
                return ResourceManager.GetString("ERR_TooManyUserStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Top-level statements must precede namespace and type declarations..
        /// </summary>
        public static string ERR_TopLevelStatementAfterNamespaceOrType {
            get {
                return ResourceManager.GetString("ERR_TopLevelStatementAfterNamespaceOrType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A format specifier may not contain trailing whitespace..
        /// </summary>
        public static string ERR_TrailingWhitespaceInFormatSpecifier {
            get {
                return ResourceManager.GetString("ERR_TrailingWhitespaceInFormatSpecifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected character sequence &apos;...&apos;.
        /// </summary>
        public static string ERR_TripleDotNotAllowed {
            get {
                return ResourceManager.GetString("ERR_TripleDotNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element names must be unique..
        /// </summary>
        public static string ERR_TupleDuplicateElementName {
            get {
                return ResourceManager.GetString("ERR_TupleDuplicateElementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;{0}&apos; does not identify tuple element &apos;{1}&apos;..
        /// </summary>
        public static string ERR_TupleElementNameMismatch {
            get {
                return ResourceManager.GetString("ERR_TupleElementNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot define a class or member that utilizes tuples because the compiler required type &apos;{0}&apos; cannot be found. Are you missing a reference?.
        /// </summary>
        public static string ERR_TupleElementNamesAttributeMissing {
            get {
                return ResourceManager.GetString("ERR_TupleElementNamesAttributeMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element names are not permitted on the left of a deconstruction..
        /// </summary>
        public static string ERR_TupleElementNamesInDeconstruction {
            get {
                return ResourceManager.GetString("ERR_TupleElementNamesInDeconstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element name &apos;{0}&apos; is inferred. Please use language version {1} or greater to access an element by its inferred name..
        /// </summary>
        public static string ERR_TupleInferredNamesNotAvailable {
            get {
                return ResourceManager.GetString("ERR_TupleInferredNamesNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element name &apos;{0}&apos; is only allowed at position {1}..
        /// </summary>
        public static string ERR_TupleReservedElementName {
            get {
                return ResourceManager.GetString("ERR_TupleReservedElementName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element name &apos;{0}&apos; is disallowed at any position..
        /// </summary>
        public static string ERR_TupleReservedElementNameAnyPosition {
            get {
                return ResourceManager.GetString("ERR_TupleReservedElementNameAnyPosition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple types used as operands of an == or != operator must have matching cardinalities. But this operator has tuple types of cardinality {0} on the left and {1} on the right..
        /// </summary>
        public static string ERR_TupleSizesMismatchForBinOps {
            get {
                return ResourceManager.GetString("ERR_TupleSizesMismatchForBinOps", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple must contain at least two elements..
        /// </summary>
        public static string ERR_TupleTooFewElements {
            get {
                return ResourceManager.GetString("ERR_TupleTooFewElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {1} &apos;{0}&apos; cannot be used with type arguments.
        /// </summary>
        public static string ERR_TypeArgsNotAllowed {
            get {
                return ResourceManager.GetString("ERR_TypeArgsNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;class&apos;, &apos;struct&apos;, &apos;unmanaged&apos;, &apos;notnull&apos;, and &apos;default&apos; constraints cannot be combined or duplicated, and must be specified first in the constraints list..
        /// </summary>
        public static string ERR_TypeConstraintsMustBeUniqueAndFirst {
            get {
                return ResourceManager.GetString("ERR_TypeConstraintsMustBeUniqueAndFirst", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Typed Parameters are not supported in combination with CLIPPER calling convention.
        /// </summary>
        public static string ERR_TypedParametersWithClipperCallingConvention {
            get {
                return ResourceManager.GetString("ERR_TypedParametersWithClipperCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type expected.
        /// </summary>
        public static string ERR_TypeExpected {
            get {
                return ResourceManager.GetString("ERR_TypeExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module &apos;{0}&apos; in assembly &apos;{1}&apos; is forwarding the type &apos;{2}&apos; to multiple assemblies: &apos;{3}&apos; and &apos;{4}&apos;..
        /// </summary>
        public static string ERR_TypeForwardedToMultipleAssemblies {
            get {
                return ResourceManager.GetString("ERR_TypeForwardedToMultipleAssemblies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot infer the type of implicitly-typed deconstruction variable &apos;{0}&apos;..
        /// </summary>
        public static string ERR_TypeInferenceFailedForImplicitlyTypedDeconstructionVariable {
            get {
                return ResourceManager.GetString("ERR_TypeInferenceFailedForImplicitlyTypedDeconstructionVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot infer the type of implicitly-typed out variable &apos;{0}&apos;..
        /// </summary>
        public static string ERR_TypeInferenceFailedForImplicitlyTypedOutVariable {
            get {
                return ResourceManager.GetString("ERR_TypeInferenceFailedForImplicitlyTypedOutVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not an interpolated string handler type..
        /// </summary>
        public static string ERR_TypeIsNotAnInterpolatedStringHandlerType {
            get {
                return ResourceManager.GetString("ERR_TypeIsNotAnInterpolatedStringHandlerType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The first operand of an &apos;as&apos; operator may not be a tuple literal without a natural type..
        /// </summary>
        public static string ERR_TypelessTupleInAs {
            get {
                return ResourceManager.GetString("ERR_TypelessTupleInAs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; must be public to be used as a calling convention..
        /// </summary>
        public static string ERR_TypeMustBePublic {
            get {
                return ResourceManager.GetString("ERR_TypeMustBePublic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} name &apos;{1}&apos; conflicts with the compiler generated globals class name &apos;{2}&apos;. You should either rename the type or the output assembly..
        /// </summary>
        public static string ERR_TypeNameMatchesGlobalNamespace {
            get {
                return ResourceManager.GetString("ERR_TypeNameMatchesGlobalNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is not defined..
        /// </summary>
        public static string ERR_TypeNotFound {
            get {
                return ResourceManager.GetString("ERR_TypeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameters or constraints are not allowed on ACCESS and ASSIGN methods.
        /// </summary>
        public static string Err_TypeParametersAccessAssign {
            get {
                return ResourceManager.GetString("Err_TypeParametersAccessAssign", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter declaration must be an identifier not a type.
        /// </summary>
        public static string ERR_TypeParamMustBeIdentifier {
            get {
                return ResourceManager.GetString("ERR_TypeParamMustBeIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; is reserved to be used by the compiler..
        /// </summary>
        public static string ERR_TypeReserved {
            get {
                return ResourceManager.GetString("ERR_TypeReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert null to type parameter &apos;{0}&apos; because it could be a non-nullable value type. Consider using &apos;default({0})&apos; instead..
        /// </summary>
        public static string ERR_TypeVarCantBeNull {
            get {
                return ResourceManager.GetString("ERR_TypeVarCantBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{0}&apos; has the same name as the containing type, or method.
        /// </summary>
        public static string ERR_TypeVariableSameAsParent {
            get {
                return ResourceManager.GetString("ERR_TypeVariableSameAsParent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contextual keyword &apos;var&apos; may only appear within a local variable declaration or in script code.
        /// </summary>
        public static string ERR_TypeVarNotFound {
            get {
                return ResourceManager.GetString("ERR_TypeVarNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The contextual keyword &apos;var&apos; cannot be used in a range variable declaration.
        /// </summary>
        public static string ERR_TypeVarNotFoundRangeVariable {
            get {
                return ResourceManager.GetString("ERR_TypeVarNotFoundRangeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{1}&apos; does not define type parameter &apos;{0}&apos;.
        /// </summary>
        public static string ERR_TyVarNotFoundInConstraint {
            get {
                return ResourceManager.GetString("ERR_TyVarNotFoundInConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented property &apos;{0}&apos; must be fully assigned before control is returned to the caller. Consider updating to language version &apos;{1}&apos; to auto-default the property..
        /// </summary>
        public static string ERR_UnassignedThisAutoPropertyUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_UnassignedThisAutoPropertyUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; must be fully assigned before control is returned to the caller. Consider updating to language version &apos;{1}&apos; to auto-default the field..
        /// </summary>
        public static string ERR_UnassignedThisUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_UnassignedThisUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot modify the result of an unboxing conversion.
        /// </summary>
        public static string ERR_UnboxNotLValue {
            get {
                return ResourceManager.GetString("ERR_UnboxNotLValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing close delimiter &apos;}&apos; for interpolated expression started with &apos;{&apos;..
        /// </summary>
        public static string ERR_UnclosedExpressionHole {
            get {
                return ResourceManager.GetString("ERR_UnclosedExpressionHole", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A &apos;{0}&apos; character must be escaped (by doubling) in an interpolated string..
        /// </summary>
        public static string ERR_UnescapedCurly {
            get {
                return ResourceManager.GetString("ERR_UnescapedCurly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected use of an aliased name.
        /// </summary>
        public static string ERR_UnexpectedAliasedName {
            get {
                return ResourceManager.GetString("ERR_UnexpectedAliasedName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected argument list..
        /// </summary>
        public static string ERR_UnexpectedArgumentList {
            get {
                return ResourceManager.GetString("ERR_UnexpectedArgumentList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type arguments are not allowed in the nameof operator..
        /// </summary>
        public static string ERR_UnexpectedBoundGenericName {
            get {
                return ResourceManager.GetString("ERR_UnexpectedBoundGenericName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected character &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UnexpectedCharacter {
            get {
                return ResourceManager.GetString("ERR_UnexpectedCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected Command or Statement..
        /// </summary>
        public static string ERR_UnexpectedCommand {
            get {
                return ResourceManager.GetString("ERR_UnexpectedCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected preprocessor directive.
        /// </summary>
        public static string ERR_UnexpectedDirective {
            get {
                return ResourceManager.GetString("ERR_UnexpectedDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected token &apos;{0}&apos;, expected &apos;{1}&apos;..
        /// </summary>
        public static string ERR_UnExpectedExpected {
            get {
                return ResourceManager.GetString("ERR_UnExpectedExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected use of a generic name.
        /// </summary>
        public static string ERR_UnexpectedGenericName {
            get {
                return ResourceManager.GetString("ERR_UnexpectedGenericName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The named argument &apos;{0}&apos; is not supported when creating typed arrays..
        /// </summary>
        public static string ERR_UnexpectedNamedArgument {
            get {
                return ResourceManager.GetString("ERR_UnexpectedNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A constructor declared in a type with parameter list must have &apos;this&apos; constructor initializer..
        /// </summary>
        public static string ERR_UnexpectedOrMissingConstructorInitializerInRecord {
            get {
                return ResourceManager.GetString("ERR_UnexpectedOrMissingConstructorInitializerInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected parameter list..
        /// </summary>
        public static string ERR_UnexpectedParameterList {
            get {
                return ResourceManager.GetString("ERR_UnexpectedParameterList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Semicolon after method or accessor block is not valid.
        /// </summary>
        public static string ERR_UnexpectedSemicolon {
            get {
                return ResourceManager.GetString("ERR_UnexpectedSemicolon", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected token &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UnexpectedToken {
            get {
                return ResourceManager.GetString("ERR_UnexpectedToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected use of an unbound generic name.
        /// </summary>
        public static string ERR_UnexpectedUnboundGenericName {
            get {
                return ResourceManager.GetString("ERR_UnexpectedUnboundGenericName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid variance: The type parameter &apos;{1}&apos; must be {3} valid on &apos;{0}&apos;. &apos;{1}&apos; is {2}..
        /// </summary>
        public static string ERR_UnexpectedVariance {
            get {
                return ResourceManager.GetString("ERR_UnexpectedVariance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid variance: The type parameter &apos;{1}&apos; must be {3} valid on &apos;{0}&apos; unless language version &apos;{4}&apos; or greater is used. &apos;{1}&apos; is {2}..
        /// </summary>
        public static string ERR_UnexpectedVarianceStaticMember {
            get {
                return ResourceManager.GetString("ERR_UnexpectedVarianceStaticMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot implement both &apos;{1}&apos; and &apos;{2}&apos; because they may unify for some type parameter substitutions.
        /// </summary>
        public static string ERR_UnifyingInterfaceInstantiations {
            get {
                return ResourceManager.GetString("ERR_UnifyingInterfaceInstantiations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement inherited abstract member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_UnimplementedAbstractMethod {
            get {
                return ResourceManager.GetString("ERR_UnimplementedAbstractMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. &apos;{2}&apos; is not public..
        /// </summary>
        public static string ERR_UnimplementedInterfaceAccessor {
            get {
                return ResourceManager.GetString("ERR_UnimplementedInterfaceAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;.
        /// </summary>
        public static string ERR_UnimplementedInterfaceMember {
            get {
                return ResourceManager.GetString("ERR_UnimplementedInterfaceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown Literal Typename {0} found in VOTypeNameExpression.
        /// </summary>
        public static string ERR_UnknownLiteralTypeName {
            get {
                return ResourceManager.GetString("ERR_UnknownLiteralTypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: cannot specify both a constraint class and the &apos;unmanaged&apos; constraint.
        /// </summary>
        public static string ERR_UnmanagedBoundWithClass {
            get {
                return ResourceManager.GetString("ERR_UnmanagedBoundWithClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods attributed with &apos;UnmanagedCallersOnly&apos; cannot have generic type parameters and cannot be declared in a generic type..
        /// </summary>
        public static string ERR_UnmanagedCallersOnlyMethodOrTypeCannotBeGeneric {
            get {
                return ResourceManager.GetString("ERR_UnmanagedCallersOnlyMethodOrTypeCannotBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is attributed with &apos;UnmanagedCallersOnly&apos; and cannot be called directly. Obtain a function pointer to this method..
        /// </summary>
        public static string ERR_UnmanagedCallersOnlyMethodsCannotBeCalledDirectly {
            get {
                return ResourceManager.GetString("ERR_UnmanagedCallersOnlyMethodsCannotBeCalledDirectly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is attributed with &apos;UnmanagedCallersOnly&apos; and cannot be converted to a delegate type. Obtain a function pointer to this method..
        /// </summary>
        public static string ERR_UnmanagedCallersOnlyMethodsCannotBeConvertedToDelegate {
            get {
                return ResourceManager.GetString("ERR_UnmanagedCallersOnlyMethodsCannotBeConvertedToDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;UnmanagedCallersOnly&apos; can only be applied to ordinary static non-abstract, non-virtual methods or static local functions..
        /// </summary>
        public static string ERR_UnmanagedCallersOnlyRequiresStatic {
            get {
                return ResourceManager.GetString("ERR_UnmanagedCallersOnlyRequiresStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; must be a non-nullable value type, along with all fields at any level of nesting, in order to use it as parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UnmanagedConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_UnmanagedConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous catch clause already catches all exceptions of this or of a super type (&apos;{0}&apos;).
        /// </summary>
        public static string ERR_UnreachableCatch {
            get {
                return ResourceManager.GetString("ERR_UnreachableCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is defined in a module with an unrecognized RefSafetyRulesAttribute version, expecting &apos;11&apos;..
        /// </summary>
        public static string ERR_UnrecognizedRefSafetyRulesAttributeVersion {
            get {
                return ResourceManager.GetString("ERR_UnrecognizedRefSafetyRulesAttributeVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async methods cannot have pointer type parameters.
        /// </summary>
        public static string ERR_UnsafeAsyncArgType {
            get {
                return ResourceManager.GetString("ERR_UnsafeAsyncArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Iterators cannot have pointer type parameters.
        /// </summary>
        public static string ERR_UnsafeIteratorArgType {
            get {
                return ResourceManager.GetString("ERR_UnsafeIteratorArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pointers and fixed size buffers may only be used in an unsafe context.
        /// </summary>
        public static string ERR_UnsafeNeeded {
            get {
                return ResourceManager.GetString("ERR_UnsafeNeeded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsafe type &apos;{0}&apos; cannot be used in object creation.
        /// </summary>
        public static string ERR_UnsafeTypeInObjectCreation {
            get {
                return ResourceManager.GetString("ERR_UnsafeTypeInObjectCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UnscopedRefAttribute cannot be applied to an interface implementation because implemented member &apos;{0}&apos; doesn&apos;t have this attribute..
        /// </summary>
        public static string ERR_UnscopedRefAttributeInterfaceImplementation {
            get {
                return ResourceManager.GetString("ERR_UnscopedRefAttributeInterfaceImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UnscopedRefAttribute can only be applied to struct or virtual interface instance methods and properties, and cannot be applied to constructors or init-only members..
        /// </summary>
        public static string ERR_UnscopedRefAttributeUnsupportedMemberTarget {
            get {
                return ResourceManager.GetString("ERR_UnscopedRefAttributeUnsupportedMemberTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UnscopedRefAttribute cannot be applied to this parameter because it is unscoped by default..
        /// </summary>
        public static string ERR_UnscopedRefAttributeUnsupportedTarget {
            get {
                return ResourceManager.GetString("ERR_UnscopedRefAttributeUnsupportedTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UnscopedRefAttribute cannot be applied to parameters that have a &apos;scoped&apos; modifier..
        /// </summary>
        public static string ERR_UnscopedScoped {
            get {
                return ResourceManager.GetString("ERR_UnscopedScoped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The calling convention of &apos;{0}&apos; is not supported by the language..
        /// </summary>
        public static string ERR_UnsupportedCallingConvention {
            get {
                return ResourceManager.GetString("ERR_UnsupportedCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; requires compiler feature &apos;{1}&apos;, which is not supported by this version of the C# compiler..
        /// </summary>
        public static string ERR_UnsupportedCompilerFeature {
            get {
                return ResourceManager.GetString("ERR_UnsupportedCompilerFeature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use ref, out, or in primary constructor parameter &apos;{0}&apos; inside an instance member.
        /// </summary>
        public static string ERR_UnsupportedPrimaryConstructorParameterCapturingRef {
            get {
                return ResourceManager.GetString("ERR_UnsupportedPrimaryConstructorParameterCapturingRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use primary constructor parameter of type &apos;{0}&apos; inside an instance member.
        /// </summary>
        public static string ERR_UnsupportedPrimaryConstructorParameterCapturingRefAny {
            get {
                return ResourceManager.GetString("ERR_UnsupportedPrimaryConstructorParameterCapturingRefAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use primary constructor parameter &apos;{0}&apos; that has ref-like type inside an instance member.
        /// </summary>
        public static string ERR_UnsupportedPrimaryConstructorParameterCapturingRefLike {
            get {
                return ResourceManager.GetString("ERR_UnsupportedPrimaryConstructorParameterCapturingRefLike", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Transparent identifier member access failed for field &apos;{0}&apos; of &apos;{1}&apos;.  Does the data being queried implement the query pattern?.
        /// </summary>
        public static string ERR_UnsupportedTransparentIdentifierAccess {
            get {
                return ResourceManager.GetString("ERR_UnsupportedTransparentIdentifierAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List patterns may not be used for a value of type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_UnsupportedTypeForListPattern {
            get {
                return ResourceManager.GetString("ERR_UnsupportedTypeForListPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Relational patterns may not be used for a value of type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_UnsupportedTypeForRelationalPattern {
            get {
                return ResourceManager.GetString("ERR_UnsupportedTypeForRelationalPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Slice patterns may not be used for a value of type &apos;{0}&apos;..
        /// </summary>
        public static string ERR_UnsupportedTypeForSlicePattern {
            get {
                return ResourceManager.GetString("ERR_UnsupportedTypeForSlicePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unterminated raw string literal..
        /// </summary>
        public static string ERR_UnterminatedRawString {
            get {
                return ResourceManager.GetString("ERR_UnterminatedRawString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unterminated string literal.
        /// </summary>
        public static string ERR_UnterminatedStringLit {
            get {
                return ResourceManager.GetString("ERR_UnterminatedStringLit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Untyped arrays are not available in the selected dialect &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UntypedArrayNotAvailableInDialect {
            get {
                return ResourceManager.GetString("ERR_UntypedArrayNotAvailableInDialect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned local variable &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UseDefViolation {
            get {
                return ResourceManager.GetString("ERR_UseDefViolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UseDefViolationField {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field &apos;{0}&apos;. Consider updating to language version &apos;{1}&apos; to auto-default the field..
        /// </summary>
        public static string ERR_UseDefViolationFieldUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationFieldUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned out parameter &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UseDefViolationOut {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property &apos;{0}&apos;.
        /// </summary>
        public static string ERR_UseDefViolationProperty {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property &apos;{0}&apos;. Consider updating to language version &apos;{1}&apos; to auto-default the property..
        /// </summary>
        public static string ERR_UseDefViolationPropertyUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationPropertyUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; object cannot be used before all of its fields have been assigned. Consider updating to language version &apos;{0}&apos; to auto-default the unassigned fields..
        /// </summary>
        public static string ERR_UseDefViolationThisUnsupportedVersion {
            get {
                return ResourceManager.GetString("ERR_UseDefViolationThisUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A using clause must precede all other elements defined in the namespace except extern alias declarations.
        /// </summary>
        public static string ERR_UsingAfterElements {
            get {
                return ResourceManager.GetString("ERR_UsingAfterElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A using variable cannot be used directly within a switch section (consider using braces). .
        /// </summary>
        public static string ERR_UsingVarInSwitchCase {
            get {
                return ResourceManager.GetString("ERR_UsingVarInSwitchCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A switch expression or case label must be a bool, char, string, integral, enum, or corresponding nullable type in C# 6 and earlier..
        /// </summary>
        public static string ERR_V6SwitchGoverningTypeValueExpected {
            get {
                return ResourceManager.GetString("ERR_V6SwitchGoverningTypeValueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; must be a non-nullable value type in order to use it as parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;.
        /// </summary>
        public static string ERR_ValConstraintNotSatisfied {
            get {
                return ResourceManager.GetString("ERR_ValConstraintNotSatisfied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert null to &apos;{0}&apos; because it is a non-nullable value type.
        /// </summary>
        public static string ERR_ValueCantBeNull {
            get {
                return ResourceManager.GetString("ERR_ValueCantBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax error; value expected.
        /// </summary>
        public static string ERR_ValueExpected {
            get {
                return ResourceManager.GetString("ERR_ValueExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extension method &apos;{0}&apos; defined on value type &apos;{1}&apos; cannot be used to create delegates.
        /// </summary>
        public static string ERR_ValueTypeExtDelegate {
            get {
                return ResourceManager.GetString("ERR_ValueTypeExtDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members of property &apos;{0}&apos; of type &apos;{1}&apos; cannot be assigned with an object initializer because it is of a value type.
        /// </summary>
        public static string ERR_ValueTypePropertyInObjectInitializer {
            get {
                return ResourceManager.GetString("ERR_ValueTypePropertyInObjectInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to __arglist is not allowed in the parameter list of async methods.
        /// </summary>
        public static string ERR_VarargsAsync {
            get {
                return ResourceManager.GetString("ERR_VarargsAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression tree lambda may not contain a method with variable arguments.
        /// </summary>
        public static string ERR_VarArgsInExpressionTree {
            get {
                return ResourceManager.GetString("ERR_VarArgsInExpressionTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to __arglist is not allowed in the parameter list of iterators.
        /// </summary>
        public static string ERR_VarargsIterator {
            get {
                return ResourceManager.GetString("ERR_VarargsIterator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An __arglist parameter must be the last parameter in a parameter list.
        /// </summary>
        public static string ERR_VarargsLast {
            get {
                return ResourceManager.GetString("ERR_VarargsLast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot declare a variable of static type &apos;{0}&apos;.
        /// </summary>
        public static string ERR_VarDeclIsStaticClass {
            get {
                return ResourceManager.GetString("ERR_VarDeclIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use local variable &apos;{0}&apos; before it is declared.
        /// </summary>
        public static string ERR_VariableUsedBeforeDeclaration {
            get {
                return ResourceManager.GetString("ERR_VariableUsedBeforeDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use local variable &apos;{0}&apos; before it is declared. The declaration of the local variable hides the field &apos;{1}&apos;..
        /// </summary>
        public static string ERR_VariableUsedBeforeDeclarationAndHidesField {
            get {
                return ResourceManager.GetString("ERR_VariableUsedBeforeDeclarationAndHidesField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enums, classes, and structures cannot be declared in an interface that has an &apos;in&apos; or &apos;out&apos; type parameter..
        /// </summary>
        public static string ERR_VarianceInterfaceNesting {
            get {
                return ResourceManager.GetString("ERR_VarianceInterfaceNesting", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syntax &apos;var (...)&apos; as an lvalue is reserved..
        /// </summary>
        public static string ERR_VarInvocationLvalueReserved {
            get {
                return ResourceManager.GetString("ERR_VarInvocationLvalueReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The syntax &apos;var&apos; for a pattern is not permitted to refer to a type, but &apos;{0}&apos; is in scope here..
        /// </summary>
        public static string ERR_VarMayNotBindToType {
            get {
                return ResourceManager.GetString("ERR_VarMayNotBindToType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: virtual or abstract members cannot be private.
        /// </summary>
        public static string ERR_VirtualPrivate {
            get {
                return ResourceManager.GetString("ERR_VirtualPrivate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;void&apos; may not be assigned..
        /// </summary>
        public static string ERR_VoidAssignment {
            get {
                return ResourceManager.GetString("ERR_VoidAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation in question is undefined on void pointers.
        /// </summary>
        public static string ERR_VoidError {
            get {
                return ResourceManager.GetString("ERR_VoidError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A tuple may not contain a value of type &apos;void&apos;..
        /// </summary>
        public static string ERR_VoidInTuple {
            get {
                return ResourceManager.GetString("ERR_VoidInTuple", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a field cannot be both volatile and readonly.
        /// </summary>
        public static string ERR_VolatileAndReadonly {
            get {
                return ResourceManager.GetString("ERR_VolatileAndReadonly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a volatile field cannot be of the type &apos;{1}&apos;.
        /// </summary>
        public static string ERR_VolatileStruct {
            get {
                return ResourceManager.GetString("ERR_VolatileStruct", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Array initializers cannot be combined with initial dimensions..
        /// </summary>
        public static string ERR_VulcanArrayDimAndInit {
            get {
                return ResourceManager.GetString("ERR_VulcanArrayDimAndInit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Windows Runtime event may not be passed as an out or ref parameter..
        /// </summary>
        public static string ERR_WinRtEventPassedByRef {
            get {
                return ResourceManager.GetString("ERR_WinRtEventPassedByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A generic task-like return type was expected, but the type &apos;{0}&apos; found in &apos;AsyncMethodBuilder&apos; attribute was not suitable. It must be an unbound generic type of arity one, and its containing type (if any) must be non-generic..
        /// </summary>
        public static string ERR_WrongArityAsyncReturn {
            get {
                return ResourceManager.GetString("ERR_WrongArityAsyncReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Calling convention of &apos;{0}&apos; is not compatible with &apos;{1}&apos;..
        /// </summary>
        public static string ERR_WrongFuncPtrCallingConvention {
            get {
                return ResourceManager.GetString("ERR_WrongFuncPtrCallingConvention", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Matching the tuple type &apos;{0}&apos; requires &apos;{1}&apos; subpatterns, but &apos;{2}&apos; subpatterns are present..
        /// </summary>
        public static string ERR_WrongNumberOfSubpatterns {
            get {
                return ResourceManager.GetString("ERR_WrongNumberOfSubpatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP: Accessor &apos;{0}&apos; should not be declared more than once..
        /// </summary>
        public static string ERR_XPPAccessorCount {
            get {
                return ResourceManager.GetString("ERR_XPPAccessorCount", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP: Class &apos;{0}&apos; has not been declared..
        /// </summary>
        public static string ERR_XPPClassNotFound {
            get {
                return ResourceManager.GetString("ERR_XPPClassNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .Net Classes cannot have a field and a property with the same name {0}..
        /// </summary>
        public static string ERR_XPPFieldPropertySameName {
            get {
                return ResourceManager.GetString("ERR_XPPFieldPropertySameName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP Multiple Inheritance is not supported by the .Net Runtime..
        /// </summary>
        public static string ERR_XPPMultipleInheritance {
            get {
                return ResourceManager.GetString("ERR_XPPMultipleInheritance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP: The type for the &apos;{0}&apos; property declaration does not match the returntype of the method that implemens the property..
        /// </summary>
        public static string ERR_XPPPropertyDeclarationTypeMismatch {
            get {
                return ResourceManager.GetString("ERR_XPPPropertyDeclarationTypeMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The yield statement cannot be used inside an anonymous method or lambda expression.
        /// </summary>
        public static string ERR_YieldInAnonMeth {
            get {
                return ResourceManager.GetString("ERR_YieldInAnonMeth", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot use &apos;yield&apos; in top-level script code.
        /// </summary>
        public static string ERR_YieldNotAllowedInScript {
            get {
                return ResourceManager.GetString("ERR_YieldNotAllowedInScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to event.
        /// </summary>
        public static string Event1 {
            get {
                return ResourceManager.GetString("Event1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Exception occurred with following context:
        ///{0}.
        /// </summary>
        public static string ExceptionContext {
            get {
                return ResourceManager.GetString("ExceptionContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning: Could not enable multicore JIT due to exception: {0}..
        /// </summary>
        public static string ExceptionEnablingMulticoreJit {
            get {
                return ResourceManager.GetString("ExceptionEnablingMulticoreJit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected non-empty public key.
        /// </summary>
        public static string ExpectedNonEmptyPublicKey {
            get {
                return ResourceManager.GetString("ExpectedNonEmptyPublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not locate the rule set file &apos;{0}&apos;..
        /// </summary>
        public static string FailedToResolveRuleSetName {
            get {
                return ResourceManager.GetString("FailedToResolveRuleSetName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to field.
        /// </summary>
        public static string Field {
            get {
                return ResourceManager.GetString("Field", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File not found..
        /// </summary>
        public static string FileNotFound {
            get {
                return ResourceManager.GetString("FileNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File size exceeds maximum allowed size of a valid metadata file..
        /// </summary>
        public static string FileSizeExceedsMaximumAllowed {
            get {
                return ResourceManager.GetString("FileSizeExceedsMaximumAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Algorithm &apos;{0}&apos; is not supported.
        /// </summary>
        public static string FTL_BadChecksumAlgorithm {
            get {
                return ResourceManager.GetString("FTL_BadChecksumAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Code page &apos;{0}&apos; is invalid or not installed.
        /// </summary>
        public static string FTL_BadCodepage {
            get {
                return ResourceManager.GetString("FTL_BadCodepage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected error writing debug information -- &apos;{0}&apos;.
        /// </summary>
        public static string FTL_DebugEmitFailure {
            get {
                return ResourceManager.GetString("FTL_DebugEmitFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File name &apos;{0}&apos; is empty, contains invalid characters, has a drive specification without an absolute path, or is too long.
        /// </summary>
        public static string FTL_InvalidInputFileName {
            get {
                return ResourceManager.GetString("FTL_InvalidInputFileName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid target type for /target: must specify &apos;exe&apos;, &apos;winexe&apos;, &apos;library&apos;, or &apos;module&apos;.
        /// </summary>
        public static string FTL_InvalidTarget {
            get {
                return ResourceManager.GetString("FTL_InvalidTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata file &apos;{0}&apos; could not be opened -- {1}.
        /// </summary>
        public static string FTL_MetadataCantOpenFile {
            get {
                return ResourceManager.GetString("FTL_MetadataCantOpenFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create short filename &apos;{0}&apos; when a long filename with the same short filename already exists.
        /// </summary>
        public static string FTL_OutputFileExists {
            get {
                return ResourceManager.GetString("FTL_OutputFileExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generator.
        /// </summary>
        public static string GeneratorNameColumnHeader {
            get {
                return ResourceManager.GetString("GeneratorNameColumnHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Total generator execution time: {0} seconds..
        /// </summary>
        public static string GeneratorTotalExecutionTime {
            get {
                return ResourceManager.GetString("GeneratorTotalExecutionTime", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generic parameter is definition when expected to be reference {0}.
        /// </summary>
        public static string GenericParameterDefinition {
            get {
                return ResourceManager.GetString("GenericParameterDefinition", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}.GetMetadata() must return an instance of {1}..
        /// </summary>
        public static string GetMetadataMustReturnInstance {
            get {
                return ResourceManager.GetString("GetMetadataMustReturnInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The using directive for &apos;{0}&apos; appeared previously as global using.
        /// </summary>
        public static string HDN_DuplicateWithGlobalUsing {
            get {
                return ResourceManager.GetString("HDN_DuplicateWithGlobalUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The using directive appeared previously as global using.
        /// </summary>
        public static string HDN_DuplicateWithGlobalUsing_Title {
            get {
                return ResourceManager.GetString("HDN_DuplicateWithGlobalUsing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused extern alias..
        /// </summary>
        public static string HDN_UnusedExternAlias {
            get {
                return ResourceManager.GetString("HDN_UnusedExternAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unused extern alias.
        /// </summary>
        public static string HDN_UnusedExternAlias_Title {
            get {
                return ResourceManager.GetString("HDN_UnusedExternAlias_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnecessary using directive..
        /// </summary>
        public static string HDN_UnusedUsingDirective {
            get {
                return ResourceManager.GetString("HDN_UnusedUsingDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unnecessary using directive.
        /// </summary>
        public static string HDN_UnusedUsingDirective_Title {
            get {
                return ResourceManager.GetString("HDN_UnusedUsingDirective_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hintName &apos;{0}&apos; contains an invalid character &apos;{1}&apos; at position {2}..
        /// </summary>
        public static string HintNameInvalidChar {
            get {
                return ResourceManager.GetString("HintNameInvalidChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hintName &apos;{0}&apos; contains an invalid segment &apos;{1}&apos; at position {2}..
        /// </summary>
        public static string HintNameInvalidSegment {
            get {
                return ResourceManager.GetString("HintNameInvalidSegment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hintName &apos;{0}&apos; of the added source file must be unique within a generator..
        /// </summary>
        public static string HintNameUniquePerGenerator {
            get {
                return ResourceManager.GetString("HintNameUniquePerGenerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid C# compound assignment operation.
        /// </summary>
        public static string ICompoundAssignmentOperationIsNotCSharpCompoundAssignment {
            get {
                return ResourceManager.GetString("ICompoundAssignmentOperationIsNotCSharpCompoundAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Icon stream is not in the expected format..
        /// </summary>
        public static string IconStreamUnexpectedFormat {
            get {
                return ResourceManager.GetString("IconStreamUnexpectedFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid C# conversion expression.
        /// </summary>
        public static string IConversionExpressionIsNotCSharpConversion {
            get {
                return ResourceManager.GetString("IConversionExpressionIsNotCSharpConversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &amp;method group.
        /// </summary>
        public static string IDS_AddressOfMethodGroup {
            get {
                return ResourceManager.GetString("IDS_AddressOfMethodGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to anonymous method.
        /// </summary>
        public static string IDS_AnonMethod {
            get {
                return ResourceManager.GetString("IDS_AnonMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to array access.
        /// </summary>
        public static string IDS_ArrayAccess {
            get {
                return ResourceManager.GetString("IDS_ArrayAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to async method builder override.
        /// </summary>
        public static string IDS_AsyncMethodBuilderOverride {
            get {
                return ResourceManager.GetString("IDS_AsyncMethodBuilderOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to await in catch blocks and finally blocks.
        /// </summary>
        public static string IDS_AwaitInCatchAndFinally {
            get {
                return ResourceManager.GetString("IDS_AwaitInCatchAndFinally", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to collection.
        /// </summary>
        public static string IDS_Collection {
            get {
                return ResourceManager.GetString("IDS_Collection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to contravariant.
        /// </summary>
        public static string IDS_Contravariant {
            get {
                return ResourceManager.GetString("IDS_Contravariant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to contravariantly.
        /// </summary>
        public static string IDS_Contravariantly {
            get {
                return ResourceManager.GetString("IDS_Contravariantly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to covariant.
        /// </summary>
        public static string IDS_Covariant {
            get {
                return ResourceManager.GetString("IDS_Covariant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to covariantly.
        /// </summary>
        public static string IDS_Covariantly {
            get {
                return ResourceManager.GetString("IDS_Covariantly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 
        ///                             Visual C# Compiler Options
        ///
        ///                       - OUTPUT FILES -
        ///-out:&lt;file&gt;                   Specify output file name (default: base name of
        ///                              file with main class or first file)
        ///-target:exe                   Build a console executable (default) (Short
        ///                              form: -t:exe)
        ///-target:winexe                Build a Windows executable (Short form:
        ///                              -t:winexe)
        ///-target:library               B [rest of string was truncated]&quot;;.
        /// </summary>
        public static string IDS_CSCHelp {
            get {
                return ResourceManager.GetString("IDS_CSCHelp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to default interface implementation.
        /// </summary>
        public static string IDS_DefaultInterfaceImplementation {
            get {
                return ResourceManager.GetString("IDS_DefaultInterfaceImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to directory does not exist.
        /// </summary>
        public static string IDS_DirectoryDoesNotExist {
            get {
                return ResourceManager.GetString("IDS_DirectoryDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to path is too long or invalid.
        /// </summary>
        public static string IDS_DirectoryHasInvalidPath {
            get {
                return ResourceManager.GetString("IDS_DirectoryHasInvalidPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to disposable.
        /// </summary>
        public static string IDS_Disposable {
            get {
                return ResourceManager.GetString("IDS_Disposable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to allows ref struct constraint.
        /// </summary>
        public static string IDS_FeatureAllowsRefStructConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureAllowsRefStructConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to alternative interpolated verbatim strings.
        /// </summary>
        public static string IDS_FeatureAltInterpolatedVerbatimStrings {
            get {
                return ResourceManager.GetString("IDS_FeatureAltInterpolatedVerbatimStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to and pattern.
        /// </summary>
        public static string IDS_FeatureAndPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureAndPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to anonymous methods.
        /// </summary>
        public static string IDS_FeatureAnonDelegates {
            get {
                return ResourceManager.GetString("IDS_FeatureAnonDelegates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to anonymous types.
        /// </summary>
        public static string IDS_FeatureAnonymousTypes {
            get {
                return ResourceManager.GetString("IDS_FeatureAnonymousTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to async function.
        /// </summary>
        public static string IDS_FeatureAsync {
            get {
                return ResourceManager.GetString("IDS_FeatureAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to async main.
        /// </summary>
        public static string IDS_FeatureAsyncMain {
            get {
                return ResourceManager.GetString("IDS_FeatureAsyncMain", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to async streams.
        /// </summary>
        public static string IDS_FeatureAsyncStreams {
            get {
                return ResourceManager.GetString("IDS_FeatureAsyncStreams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to asynchronous using.
        /// </summary>
        public static string IDS_FeatureAsyncUsing {
            get {
                return ResourceManager.GetString("IDS_FeatureAsyncUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to auto default struct fields.
        /// </summary>
        public static string IDS_FeatureAutoDefaultStructs {
            get {
                return ResourceManager.GetString("IDS_FeatureAutoDefaultStructs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to automatically implemented properties.
        /// </summary>
        public static string IDS_FeatureAutoImplementedProperties {
            get {
                return ResourceManager.GetString("IDS_FeatureAutoImplementedProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to auto property initializer.
        /// </summary>
        public static string IDS_FeatureAutoPropertyInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureAutoPropertyInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to binary literals.
        /// </summary>
        public static string IDS_FeatureBinaryLiteral {
            get {
                return ResourceManager.GetString("IDS_FeatureBinaryLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to checked user-defined operators.
        /// </summary>
        public static string IDS_FeatureCheckedUserDefinedOperators {
            get {
                return ResourceManager.GetString("IDS_FeatureCheckedUserDefinedOperators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to coalescing assignment.
        /// </summary>
        public static string IDS_FeatureCoalesceAssignmentExpression {
            get {
                return ResourceManager.GetString("IDS_FeatureCoalesceAssignmentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to collection expressions.
        /// </summary>
        public static string IDS_FeatureCollectionExpressions {
            get {
                return ResourceManager.GetString("IDS_FeatureCollectionExpressions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to collection initializer.
        /// </summary>
        public static string IDS_FeatureCollectionInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureCollectionInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constant interpolated strings.
        /// </summary>
        public static string IDS_FeatureConstantInterpolatedStrings {
            get {
                return ResourceManager.GetString("IDS_FeatureConstantInterpolatedStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to covariant returns.
        /// </summary>
        public static string IDS_FeatureCovariantReturnsForOverrides {
            get {
                return ResourceManager.GetString("IDS_FeatureCovariantReturnsForOverrides", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to default operator.
        /// </summary>
        public static string IDS_FeatureDefault {
            get {
                return ResourceManager.GetString("IDS_FeatureDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to default literal.
        /// </summary>
        public static string IDS_FeatureDefaultLiteral {
            get {
                return ResourceManager.GetString("IDS_FeatureDefaultLiteral", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to default type parameter constraints.
        /// </summary>
        public static string IDS_FeatureDefaultTypeParameterConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureDefaultTypeParameterConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to delegate generic type constraints.
        /// </summary>
        public static string IDS_FeatureDelegateGenericTypeConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureDelegateGenericTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dictionary initializer.
        /// </summary>
        public static string IDS_FeatureDictionaryInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureDictionaryInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to digit separators.
        /// </summary>
        public static string IDS_FeatureDigitSeparator {
            get {
                return ResourceManager.GetString("IDS_FeatureDigitSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to discards.
        /// </summary>
        public static string IDS_FeatureDiscards {
            get {
                return ResourceManager.GetString("IDS_FeatureDiscards", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pattern-based disposal.
        /// </summary>
        public static string IDS_FeatureDisposalPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureDisposalPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dynamic.
        /// </summary>
        public static string IDS_FeatureDynamic {
            get {
                return ResourceManager.GetString("IDS_FeatureDynamic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to enum generic type constraints.
        /// </summary>
        public static string IDS_FeatureEnumGenericTypeConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureEnumGenericTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to exception filter.
        /// </summary>
        public static string IDS_FeatureExceptionFilter {
            get {
                return ResourceManager.GetString("IDS_FeatureExceptionFilter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expression body property accessor.
        /// </summary>
        public static string IDS_FeatureExpressionBodiedAccessor {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionBodiedAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expression body constructor and destructor.
        /// </summary>
        public static string IDS_FeatureExpressionBodiedDeOrConstructor {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionBodiedDeOrConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expression-bodied indexer.
        /// </summary>
        public static string IDS_FeatureExpressionBodiedIndexer {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionBodiedIndexer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expression-bodied method.
        /// </summary>
        public static string IDS_FeatureExpressionBodiedMethod {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionBodiedMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to expression-bodied property.
        /// </summary>
        public static string IDS_FeatureExpressionBodiedProperty {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionBodiedProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to declaration of expression variables in member initializers and queries.
        /// </summary>
        public static string IDS_FeatureExpressionVariablesInQueriesAndInitializers {
            get {
                return ResourceManager.GetString("IDS_FeatureExpressionVariablesInQueriesAndInitializers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extended partial methods.
        /// </summary>
        public static string IDS_FeatureExtendedPartialMethods {
            get {
                return ResourceManager.GetString("IDS_FeatureExtendedPartialMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extended property patterns.
        /// </summary>
        public static string IDS_FeatureExtendedPropertyPatterns {
            get {
                return ResourceManager.GetString("IDS_FeatureExtendedPropertyPatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extensible fixed statement.
        /// </summary>
        public static string IDS_FeatureExtensibleFixedStatement {
            get {
                return ResourceManager.GetString("IDS_FeatureExtensibleFixedStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extension GetAsyncEnumerator.
        /// </summary>
        public static string IDS_FeatureExtensionGetAsyncEnumerator {
            get {
                return ResourceManager.GetString("IDS_FeatureExtensionGetAsyncEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extension GetEnumerator.
        /// </summary>
        public static string IDS_FeatureExtensionGetEnumerator {
            get {
                return ResourceManager.GetString("IDS_FeatureExtensionGetEnumerator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extension method.
        /// </summary>
        public static string IDS_FeatureExtensionMethod {
            get {
                return ResourceManager.GetString("IDS_FeatureExtensionMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extern alias.
        /// </summary>
        public static string IDS_FeatureExternAlias {
            get {
                return ResourceManager.GetString("IDS_FeatureExternAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extern local functions.
        /// </summary>
        public static string IDS_FeatureExternLocalFunctions {
            get {
                return ResourceManager.GetString("IDS_FeatureExternLocalFunctions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to field and value keywords.
        /// </summary>
        public static string IDS_FeatureFieldAndValueKeywords {
            get {
                return ResourceManager.GetString("IDS_FeatureFieldAndValueKeywords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to file-scoped namespace.
        /// </summary>
        public static string IDS_FeatureFileScopedNamespace {
            get {
                return ResourceManager.GetString("IDS_FeatureFileScopedNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to file types.
        /// </summary>
        public static string IDS_FeatureFileTypes {
            get {
                return ResourceManager.GetString("IDS_FeatureFileTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to fixed size buffers.
        /// </summary>
        public static string IDS_FeatureFixedBuffer {
            get {
                return ResourceManager.GetString("IDS_FeatureFixedBuffer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function pointers.
        /// </summary>
        public static string IDS_FeatureFunctionPointers {
            get {
                return ResourceManager.GetString("IDS_FeatureFunctionPointers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to generic attributes.
        /// </summary>
        public static string IDS_FeatureGenericAttributes {
            get {
                return ResourceManager.GetString("IDS_FeatureGenericAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to generics.
        /// </summary>
        public static string IDS_FeatureGenerics {
            get {
                return ResourceManager.GetString("IDS_FeatureGenerics", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to namespace alias qualifier.
        /// </summary>
        public static string IDS_FeatureGlobalNamespace {
            get {
                return ResourceManager.GetString("IDS_FeatureGlobalNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to global using directive.
        /// </summary>
        public static string IDS_FeatureGlobalUsing {
            get {
                return ResourceManager.GetString("IDS_FeatureGlobalUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to implicitly typed array.
        /// </summary>
        public static string IDS_FeatureImplicitArray {
            get {
                return ResourceManager.GetString("IDS_FeatureImplicitArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to implicit indexer initializer.
        /// </summary>
        public static string IDS_FeatureImplicitIndexerInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureImplicitIndexerInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to implicitly typed local variable.
        /// </summary>
        public static string IDS_FeatureImplicitLocal {
            get {
                return ResourceManager.GetString("IDS_FeatureImplicitLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to target-typed object creation.
        /// </summary>
        public static string IDS_FeatureImplicitObjectCreation {
            get {
                return ResourceManager.GetString("IDS_FeatureImplicitObjectCreation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to interpolated string handlers.
        /// </summary>
        public static string IDS_FeatureImprovedInterpolatedStrings {
            get {
                return ResourceManager.GetString("IDS_FeatureImprovedInterpolatedStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to indexing movable fixed buffers.
        /// </summary>
        public static string IDS_FeatureIndexingMovableFixedBuffers {
            get {
                return ResourceManager.GetString("IDS_FeatureIndexingMovableFixedBuffers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to index operator.
        /// </summary>
        public static string IDS_FeatureIndexOperator {
            get {
                return ResourceManager.GetString("IDS_FeatureIndexOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to inferred delegate type.
        /// </summary>
        public static string IDS_FeatureInferredDelegateType {
            get {
                return ResourceManager.GetString("IDS_FeatureInferredDelegateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to init-only setters.
        /// </summary>
        public static string IDS_FeatureInitOnlySetters {
            get {
                return ResourceManager.GetString("IDS_FeatureInitOnlySetters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to inline arrays.
        /// </summary>
        public static string IDS_FeatureInlineArrays {
            get {
                return ResourceManager.GetString("IDS_FeatureInlineArrays", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to instance member in &apos;nameof&apos;.
        /// </summary>
        public static string IDS_FeatureInstanceMemberInNameof {
            get {
                return ResourceManager.GetString("IDS_FeatureInstanceMemberInNameof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to interpolated strings.
        /// </summary>
        public static string IDS_FeatureInterpolatedStrings {
            get {
                return ResourceManager.GetString("IDS_FeatureInterpolatedStrings", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to iterators.
        /// </summary>
        public static string IDS_FeatureIterators {
            get {
                return ResourceManager.GetString("IDS_FeatureIterators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda expression.
        /// </summary>
        public static string IDS_FeatureLambda {
            get {
                return ResourceManager.GetString("IDS_FeatureLambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda attributes.
        /// </summary>
        public static string IDS_FeatureLambdaAttributes {
            get {
                return ResourceManager.GetString("IDS_FeatureLambdaAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda discard parameters.
        /// </summary>
        public static string IDS_FeatureLambdaDiscardParameters {
            get {
                return ResourceManager.GetString("IDS_FeatureLambdaDiscardParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda optional parameters.
        /// </summary>
        public static string IDS_FeatureLambdaOptionalParameters {
            get {
                return ResourceManager.GetString("IDS_FeatureLambdaOptionalParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda params array.
        /// </summary>
        public static string IDS_FeatureLambdaParamsArray {
            get {
                return ResourceManager.GetString("IDS_FeatureLambdaParamsArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda return type.
        /// </summary>
        public static string IDS_FeatureLambdaReturnType {
            get {
                return ResourceManager.GetString("IDS_FeatureLambdaReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to leading digit separator.
        /// </summary>
        public static string IDS_FeatureLeadingDigitSeparator {
            get {
                return ResourceManager.GetString("IDS_FeatureLeadingDigitSeparator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to list pattern.
        /// </summary>
        public static string IDS_FeatureListPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureListPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to local function attributes.
        /// </summary>
        public static string IDS_FeatureLocalFunctionAttributes {
            get {
                return ResourceManager.GetString("IDS_FeatureLocalFunctionAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to local functions.
        /// </summary>
        public static string IDS_FeatureLocalFunctions {
            get {
                return ResourceManager.GetString("IDS_FeatureLocalFunctions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lock object.
        /// </summary>
        public static string IDS_FeatureLockObject {
            get {
                return ResourceManager.GetString("IDS_FeatureLockObject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MemberNotNull attribute.
        /// </summary>
        public static string IDS_FeatureMemberNotNull {
            get {
                return ResourceManager.GetString("IDS_FeatureMemberNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Mixed declarations and expressions in deconstruction.
        /// </summary>
        public static string IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction {
            get {
                return ResourceManager.GetString("IDS_FeatureMixedDeclarationsAndExpressionsInDeconstruction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to module as an attribute target specifier.
        /// </summary>
        public static string IDS_FeatureModuleAttrLoc {
            get {
                return ResourceManager.GetString("IDS_FeatureModuleAttrLoc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to module initializers.
        /// </summary>
        public static string IDS_FeatureModuleInitializers {
            get {
                return ResourceManager.GetString("IDS_FeatureModuleInitializers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to named argument.
        /// </summary>
        public static string IDS_FeatureNamedArgument {
            get {
                return ResourceManager.GetString("IDS_FeatureNamedArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nameof operator.
        /// </summary>
        public static string IDS_FeatureNameof {
            get {
                return ResourceManager.GetString("IDS_FeatureNameof", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to name shadowing in nested functions.
        /// </summary>
        public static string IDS_FeatureNameShadowingInNestedFunctions {
            get {
                return ResourceManager.GetString("IDS_FeatureNameShadowingInNestedFunctions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to native-sized integers.
        /// </summary>
        public static string IDS_FeatureNativeInt {
            get {
                return ResourceManager.GetString("IDS_FeatureNativeInt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stackalloc in nested expressions.
        /// </summary>
        public static string IDS_FeatureNestedStackalloc {
            get {
                return ResourceManager.GetString("IDS_FeatureNestedStackalloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to newlines in interpolations.
        /// </summary>
        public static string IDS_FeatureNewLinesInInterpolations {
            get {
                return ResourceManager.GetString("IDS_FeatureNewLinesInInterpolations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to notnull generic type constraint.
        /// </summary>
        public static string IDS_FeatureNotNullGenericTypeConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureNotNullGenericTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to not pattern.
        /// </summary>
        public static string IDS_FeatureNotPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureNotPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nullable types.
        /// </summary>
        public static string IDS_FeatureNullable {
            get {
                return ResourceManager.GetString("IDS_FeatureNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nullable reference types.
        /// </summary>
        public static string IDS_FeatureNullableReferenceTypes {
            get {
                return ResourceManager.GetString("IDS_FeatureNullableReferenceTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to null pointer constant pattern.
        /// </summary>
        public static string IDS_FeatureNullPointerConstantPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureNullPointerConstantPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to null propagating operator.
        /// </summary>
        public static string IDS_FeatureNullPropagatingOperator {
            get {
                return ResourceManager.GetString("IDS_FeatureNullPropagatingOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to object initializer.
        /// </summary>
        public static string IDS_FeatureObjectInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureObjectInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to obsolete on property accessor.
        /// </summary>
        public static string IDS_FeatureObsoleteOnPropertyAccessor {
            get {
                return ResourceManager.GetString("IDS_FeatureObsoleteOnPropertyAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to optional parameter.
        /// </summary>
        public static string IDS_FeatureOptionalParameter {
            get {
                return ResourceManager.GetString("IDS_FeatureOptionalParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to or pattern.
        /// </summary>
        public static string IDS_FeatureOrPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureOrPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to out variable declaration.
        /// </summary>
        public static string IDS_FeatureOutVar {
            get {
                return ResourceManager.GetString("IDS_FeatureOutVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to parameterless struct constructors.
        /// </summary>
        public static string IDS_FeatureParameterlessStructConstructors {
            get {
                return ResourceManager.GetString("IDS_FeatureParameterlessStructConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to params collections.
        /// </summary>
        public static string IDS_FeatureParamsCollections {
            get {
                return ResourceManager.GetString("IDS_FeatureParamsCollections", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to parenthesized pattern.
        /// </summary>
        public static string IDS_FeatureParenthesizedPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureParenthesizedPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to partial method.
        /// </summary>
        public static string IDS_FeaturePartialMethod {
            get {
                return ResourceManager.GetString("IDS_FeaturePartialMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to partial types.
        /// </summary>
        public static string IDS_FeaturePartialTypes {
            get {
                return ResourceManager.GetString("IDS_FeaturePartialTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pattern matching.
        /// </summary>
        public static string IDS_FeaturePatternMatching {
            get {
                return ResourceManager.GetString("IDS_FeaturePatternMatching", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to positional fields in records.
        /// </summary>
        public static string IDS_FeaturePositionalFieldsInRecords {
            get {
                return ResourceManager.GetString("IDS_FeaturePositionalFieldsInRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #pragma.
        /// </summary>
        public static string IDS_FeaturePragma {
            get {
                return ResourceManager.GetString("IDS_FeaturePragma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to warning action enable.
        /// </summary>
        public static string IDS_FeaturePragmaWarningEnable {
            get {
                return ResourceManager.GetString("IDS_FeaturePragmaWarningEnable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to primary constructors.
        /// </summary>
        public static string IDS_FeaturePrimaryConstructors {
            get {
                return ResourceManager.GetString("IDS_FeaturePrimaryConstructors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to private protected.
        /// </summary>
        public static string IDS_FeaturePrivateProtected {
            get {
                return ResourceManager.GetString("IDS_FeaturePrivateProtected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to access modifiers on properties.
        /// </summary>
        public static string IDS_FeaturePropertyAccessorMods {
            get {
                return ResourceManager.GetString("IDS_FeaturePropertyAccessorMods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to query expression.
        /// </summary>
        public static string IDS_FeatureQueryExpression {
            get {
                return ResourceManager.GetString("IDS_FeatureQueryExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to range operator.
        /// </summary>
        public static string IDS_FeatureRangeOperator {
            get {
                return ResourceManager.GetString("IDS_FeatureRangeOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to raw string literals.
        /// </summary>
        public static string IDS_FeatureRawStringLiterals {
            get {
                return ResourceManager.GetString("IDS_FeatureRawStringLiterals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readonly automatically implemented properties.
        /// </summary>
        public static string IDS_FeatureReadonlyAutoImplementedProperties {
            get {
                return ResourceManager.GetString("IDS_FeatureReadonlyAutoImplementedProperties", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readonly members.
        /// </summary>
        public static string IDS_FeatureReadOnlyMembers {
            get {
                return ResourceManager.GetString("IDS_FeatureReadOnlyMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readonly references.
        /// </summary>
        public static string IDS_FeatureReadOnlyReferences {
            get {
                return ResourceManager.GetString("IDS_FeatureReadOnlyReferences", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to readonly structs.
        /// </summary>
        public static string IDS_FeatureReadOnlyStructs {
            get {
                return ResourceManager.GetString("IDS_FeatureReadOnlyStructs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to records.
        /// </summary>
        public static string IDS_FeatureRecords {
            get {
                return ResourceManager.GetString("IDS_FeatureRecords", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to record structs.
        /// </summary>
        public static string IDS_FeatureRecordStructs {
            get {
                return ResourceManager.GetString("IDS_FeatureRecordStructs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to recursive patterns.
        /// </summary>
        public static string IDS_FeatureRecursivePatterns {
            get {
                return ResourceManager.GetString("IDS_FeatureRecursivePatterns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref conditional expression.
        /// </summary>
        public static string IDS_FeatureRefConditional {
            get {
                return ResourceManager.GetString("IDS_FeatureRefConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref extension methods.
        /// </summary>
        public static string IDS_FeatureRefExtensionMethods {
            get {
                return ResourceManager.GetString("IDS_FeatureRefExtensionMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref fields.
        /// </summary>
        public static string IDS_FeatureRefFields {
            get {
                return ResourceManager.GetString("IDS_FeatureRefFields", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref for-loop variables.
        /// </summary>
        public static string IDS_FeatureRefFor {
            get {
                return ResourceManager.GetString("IDS_FeatureRefFor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref foreach iteration variables.
        /// </summary>
        public static string IDS_FeatureRefForEach {
            get {
                return ResourceManager.GetString("IDS_FeatureRefForEach", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to byref locals and returns.
        /// </summary>
        public static string IDS_FeatureRefLocalsReturns {
            get {
                return ResourceManager.GetString("IDS_FeatureRefLocalsReturns", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref readonly parameters.
        /// </summary>
        public static string IDS_FeatureRefReadonlyParameters {
            get {
                return ResourceManager.GetString("IDS_FeatureRefReadonlyParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref reassignment.
        /// </summary>
        public static string IDS_FeatureRefReassignment {
            get {
                return ResourceManager.GetString("IDS_FeatureRefReassignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref struct interfaces.
        /// </summary>
        public static string IDS_FeatureRefStructInterfaces {
            get {
                return ResourceManager.GetString("IDS_FeatureRefStructInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref structs.
        /// </summary>
        public static string IDS_FeatureRefStructs {
            get {
                return ResourceManager.GetString("IDS_FeatureRefStructs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ref and unsafe in async and iterator methods.
        /// </summary>
        public static string IDS_FeatureRefUnsafeInIteratorAsync {
            get {
                return ResourceManager.GetString("IDS_FeatureRefUnsafeInIteratorAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to relational pattern.
        /// </summary>
        public static string IDS_FeatureRelationalPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureRelationalPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to relaxed shift operator.
        /// </summary>
        public static string IDS_FeatureRelaxedShiftOperator {
            get {
                return ResourceManager.GetString("IDS_FeatureRelaxedShiftOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to required members.
        /// </summary>
        public static string IDS_FeatureRequiredMembers {
            get {
                return ResourceManager.GetString("IDS_FeatureRequiredMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to sealed ToString in record.
        /// </summary>
        public static string IDS_FeatureSealedToStringInRecord {
            get {
                return ResourceManager.GetString("IDS_FeatureSealedToStringInRecord", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pattern matching ReadOnly/Span&lt;char&gt; on constant string.
        /// </summary>
        public static string IDS_FeatureSpanCharConstantPattern {
            get {
                return ResourceManager.GetString("IDS_FeatureSpanCharConstantPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to stackalloc initializer.
        /// </summary>
        public static string IDS_FeatureStackAllocInitializer {
            get {
                return ResourceManager.GetString("IDS_FeatureStackAllocInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static abstract members in interfaces.
        /// </summary>
        public static string IDS_FeatureStaticAbstractMembersInInterfaces {
            get {
                return ResourceManager.GetString("IDS_FeatureStaticAbstractMembersInInterfaces", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static anonymous function.
        /// </summary>
        public static string IDS_FeatureStaticAnonymousFunction {
            get {
                return ResourceManager.GetString("IDS_FeatureStaticAnonymousFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static classes.
        /// </summary>
        public static string IDS_FeatureStaticClasses {
            get {
                return ResourceManager.GetString("IDS_FeatureStaticClasses", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to static local functions.
        /// </summary>
        public static string IDS_FeatureStaticLocalFunctions {
            get {
                return ResourceManager.GetString("IDS_FeatureStaticLocalFunctions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to string escape character.
        /// </summary>
        public static string IDS_FeatureStringEscapeCharacter {
            get {
                return ResourceManager.GetString("IDS_FeatureStringEscapeCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to struct field initializers.
        /// </summary>
        public static string IDS_FeatureStructFieldInitializers {
            get {
                return ResourceManager.GetString("IDS_FeatureStructFieldInitializers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;switch expression&gt;.
        /// </summary>
        public static string IDS_FeatureSwitchExpression {
            get {
                return ResourceManager.GetString("IDS_FeatureSwitchExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to switch on boolean type.
        /// </summary>
        public static string IDS_FeatureSwitchOnBool {
            get {
                return ResourceManager.GetString("IDS_FeatureSwitchOnBool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to target-typed conditional expression.
        /// </summary>
        public static string IDS_FeatureTargetTypedConditional {
            get {
                return ResourceManager.GetString("IDS_FeatureTargetTypedConditional", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to throw expression.
        /// </summary>
        public static string IDS_FeatureThrowExpression {
            get {
                return ResourceManager.GetString("IDS_FeatureThrowExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tuple equality.
        /// </summary>
        public static string IDS_FeatureTupleEquality {
            get {
                return ResourceManager.GetString("IDS_FeatureTupleEquality", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tuples.
        /// </summary>
        public static string IDS_FeatureTuples {
            get {
                return ResourceManager.GetString("IDS_FeatureTuples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type pattern.
        /// </summary>
        public static string IDS_FeatureTypePattern {
            get {
                return ResourceManager.GetString("IDS_FeatureTypePattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type variance.
        /// </summary>
        public static string IDS_FeatureTypeVariance {
            get {
                return ResourceManager.GetString("IDS_FeatureTypeVariance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unconstrained type parameters in null coalescing operator.
        /// </summary>
        public static string IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator {
            get {
                return ResourceManager.GetString("IDS_FeatureUnconstrainedTypeParameterInNullCoalescingOperator", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unmanaged constructed types.
        /// </summary>
        public static string IDS_FeatureUnmanagedConstructedTypes {
            get {
                return ResourceManager.GetString("IDS_FeatureUnmanagedConstructedTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unmanaged generic type constraints.
        /// </summary>
        public static string IDS_FeatureUnmanagedGenericTypeConstraint {
            get {
                return ResourceManager.GetString("IDS_FeatureUnmanagedGenericTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to unsigned right shift.
        /// </summary>
        public static string IDS_FeatureUnsignedRightShift {
            get {
                return ResourceManager.GetString("IDS_FeatureUnsignedRightShift", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using declarations.
        /// </summary>
        public static string IDS_FeatureUsingDeclarations {
            get {
                return ResourceManager.GetString("IDS_FeatureUsingDeclarations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using static.
        /// </summary>
        public static string IDS_FeatureUsingStatic {
            get {
                return ResourceManager.GetString("IDS_FeatureUsingStatic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using type alias.
        /// </summary>
        public static string IDS_FeatureUsingTypeAlias {
            get {
                return ResourceManager.GetString("IDS_FeatureUsingTypeAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UTF-8 string literals.
        /// </summary>
        public static string IDS_FeatureUtf8StringLiterals {
            get {
                return ResourceManager.GetString("IDS_FeatureUtf8StringLiterals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to variance safety for static interface members.
        /// </summary>
        public static string IDS_FeatureVarianceSafetyForStaticInterfaceMembers {
            get {
                return ResourceManager.GetString("IDS_FeatureVarianceSafetyForStaticInterfaceMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with on anonymous types.
        /// </summary>
        public static string IDS_FeatureWithOnAnonymousTypes {
            get {
                return ResourceManager.GetString("IDS_FeatureWithOnAnonymousTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to with on structs.
        /// </summary>
        public static string IDS_FeatureWithOnStructs {
            get {
                return ResourceManager.GetString("IDS_FeatureWithOnStructs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to fixed variable.
        /// </summary>
        public static string IDS_FIXEDLOCAL {
            get {
                return ResourceManager.GetString("IDS_FIXEDLOCAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to foreach iteration variable.
        /// </summary>
        public static string IDS_FOREACHLOCAL {
            get {
                return ResourceManager.GetString("IDS_FOREACHLOCAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;global namespace&gt;.
        /// </summary>
        public static string IDS_GlobalNamespace {
            get {
                return ResourceManager.GetString("IDS_GlobalNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to invariantly.
        /// </summary>
        public static string IDS_Invariantly {
            get {
                return ResourceManager.GetString("IDS_Invariantly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to lambda expression.
        /// </summary>
        public static string IDS_Lambda {
            get {
                return ResourceManager.GetString("IDS_Lambda", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Supported language versions:.
        /// </summary>
        public static string IDS_LangVersions {
            get {
                return ResourceManager.GetString("IDS_LangVersions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LIB environment variable.
        /// </summary>
        public static string IDS_LIB_ENV {
            get {
                return ResourceManager.GetString("IDS_LIB_ENV", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /LIB option.
        /// </summary>
        public static string IDS_LIB_OPTION {
            get {
                return ResourceManager.GetString("IDS_LIB_OPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} version {1}.
        /// </summary>
        public static string IDS_LogoLine1 {
            get {
                return ResourceManager.GetString("IDS_LogoLine1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Copyright (C) Microsoft Corporation. All rights reserved..
        /// </summary>
        public static string IDS_LogoLine2 {
            get {
                return ResourceManager.GetString("IDS_LogoLine2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to method group.
        /// </summary>
        public static string IDS_MethodGroup {
            get {
                return ResourceManager.GetString("IDS_MethodGroup", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;missing&gt;.
        /// </summary>
        public static string IDS_Missing {
            get {
                return ResourceManager.GetString("IDS_Missing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;namespace&gt;.
        /// </summary>
        public static string IDS_Namespace1 {
            get {
                return ResourceManager.GetString("IDS_Namespace1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;null&gt;.
        /// </summary>
        public static string IDS_NULL {
            get {
                return ResourceManager.GetString("IDS_NULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation caused a stack overflow..
        /// </summary>
        public static string IDS_OperationCausedStackOverflow {
            get {
                return ResourceManager.GetString("IDS_OperationCausedStackOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constraints for override and explicit interface implementation methods.
        /// </summary>
        public static string IDS_OverrideWithConstraints {
            get {
                return ResourceManager.GetString("IDS_OverrideWithConstraints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to parameter.
        /// </summary>
        public static string IDS_Parameter {
            get {
                return ResourceManager.GetString("IDS_Parameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;path list&gt;.
        /// </summary>
        public static string IDS_PathList {
            get {
                return ResourceManager.GetString("IDS_PathList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pointer element access.
        /// </summary>
        public static string IDS_PointerElementAccess {
            get {
                return ResourceManager.GetString("IDS_PointerElementAccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /REFERENCEPATH option.
        /// </summary>
        public static string IDS_REFERENCEPATH_OPTION {
            get {
                return ResourceManager.GetString("IDS_REFERENCEPATH_OPTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Location of symbol related to previous error).
        /// </summary>
        public static string IDS_RELATEDERROR {
            get {
                return ResourceManager.GetString("IDS_RELATEDERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (Location of symbol related to previous warning).
        /// </summary>
        public static string IDS_RELATEDWARNING {
            get {
                return ResourceManager.GetString("IDS_RELATEDWARNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to return.
        /// </summary>
        public static string IDS_Return {
            get {
                return ResourceManager.GetString("IDS_Return", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using alias.
        /// </summary>
        public static string IDS_SK_ALIAS {
            get {
                return ResourceManager.GetString("IDS_SK_ALIAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to array.
        /// </summary>
        public static string IDS_SK_ARRAY {
            get {
                return ResourceManager.GetString("IDS_SK_ARRAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to constructor.
        /// </summary>
        public static string IDS_SK_CONSTRUCTOR {
            get {
                return ResourceManager.GetString("IDS_SK_CONSTRUCTOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to dynamic.
        /// </summary>
        public static string IDS_SK_DYNAMIC {
            get {
                return ResourceManager.GetString("IDS_SK_DYNAMIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to event.
        /// </summary>
        public static string IDS_SK_EVENT {
            get {
                return ResourceManager.GetString("IDS_SK_EVENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to extern alias.
        /// </summary>
        public static string IDS_SK_EXTERNALIAS {
            get {
                return ResourceManager.GetString("IDS_SK_EXTERNALIAS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to field.
        /// </summary>
        public static string IDS_SK_FIELD {
            get {
                return ResourceManager.GetString("IDS_SK_FIELD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function pointer.
        /// </summary>
        public static string IDS_SK_FUNCTION_POINTER {
            get {
                return ResourceManager.GetString("IDS_SK_FUNCTION_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to label.
        /// </summary>
        public static string IDS_SK_LABEL {
            get {
                return ResourceManager.GetString("IDS_SK_LABEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to method.
        /// </summary>
        public static string IDS_SK_METHOD {
            get {
                return ResourceManager.GetString("IDS_SK_METHOD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to namespace.
        /// </summary>
        public static string IDS_SK_NAMESPACE {
            get {
                return ResourceManager.GetString("IDS_SK_NAMESPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to pointer.
        /// </summary>
        public static string IDS_SK_POINTER {
            get {
                return ResourceManager.GetString("IDS_SK_POINTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to property.
        /// </summary>
        public static string IDS_SK_PROPERTY {
            get {
                return ResourceManager.GetString("IDS_SK_PROPERTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type.
        /// </summary>
        public static string IDS_SK_TYPE {
            get {
                return ResourceManager.GetString("IDS_SK_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type parameter.
        /// </summary>
        public static string IDS_SK_TYVAR {
            get {
                return ResourceManager.GetString("IDS_SK_TYVAR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to element.
        /// </summary>
        public static string IDS_SK_UNKNOWN {
            get {
                return ResourceManager.GetString("IDS_SK_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to variable.
        /// </summary>
        public static string IDS_SK_VARIABLE {
            get {
                return ResourceManager.GetString("IDS_SK_VARIABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;text&gt;.
        /// </summary>
        public static string IDS_Text {
            get {
                return ResourceManager.GetString("IDS_Text", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;throw expression&gt;.
        /// </summary>
        public static string IDS_ThrowExpression {
            get {
                return ResourceManager.GetString("IDS_ThrowExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Microsoft (R) Visual C# Compiler.
        /// </summary>
        public static string IDS_ToolName {
            get {
                return ResourceManager.GetString("IDS_ToolName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to top-level statements.
        /// </summary>
        public static string IDS_TopLevelStatements {
            get {
                return ResourceManager.GetString("IDS_TopLevelStatements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to using variable.
        /// </summary>
        public static string IDS_USINGLOCAL {
            get {
                return ResourceManager.GetString("IDS_USINGLOCAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;experimental&apos;.
        /// </summary>
        public static string IDS_VersionExperimental {
            get {
                return ResourceManager.GetString("IDS_VersionExperimental", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Include tag is invalid .
        /// </summary>
        public static string IDS_XMLBADINCLUDE {
            get {
                return ResourceManager.GetString("IDS_XMLBADINCLUDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Failed to insert some or all of included XML .
        /// </summary>
        public static string IDS_XMLFAILEDINCLUDE {
            get {
                return ResourceManager.GetString("IDS_XMLFAILEDINCLUDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;!-- Badly formed XML comment ignored for member &quot;{0}&quot; --&gt;.
        /// </summary>
        public static string IDS_XMLIGNORED {
            get {
                return ResourceManager.GetString("IDS_XMLIGNORED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  Badly formed XML file &quot;{0}&quot; cannot be included .
        /// </summary>
        public static string IDS_XMLIGNORED2 {
            get {
                return ResourceManager.GetString("IDS_XMLIGNORED2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing file attribute.
        /// </summary>
        public static string IDS_XMLMISSINGINCLUDEFILE {
            get {
                return ResourceManager.GetString("IDS_XMLMISSINGINCLUDEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing path attribute.
        /// </summary>
        public static string IDS_XMLMISSINGINCLUDEPATH {
            get {
                return ResourceManager.GetString("IDS_XMLMISSINGINCLUDEPATH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to  No matching elements were found for the following include tag .
        /// </summary>
        public static string IDS_XMLNOINCLUDE {
            get {
                return ResourceManager.GetString("IDS_XMLNOINCLUDE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Including private members should not be used when emitting to the secondary assembly output..
        /// </summary>
        public static string IncludingPrivateMembersUnexpectedWhenEmittingToMetadataPeStream {
            get {
                return ResourceManager.GetString("IncludingPrivateMembersUnexpectedWhenEmittingToMetadataPeStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent language versions.
        /// </summary>
        public static string InconsistentLanguageVersions {
            get {
                return ResourceManager.GetString("InconsistentLanguageVersions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inconsistent syntax tree features.
        /// </summary>
        public static string InconsistentSyntaxTreeFeature {
            get {
                return ResourceManager.GetString("InconsistentSyntaxTreeFeature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is a contextual keyword in property accessors starting in language version {1}. Use &apos;@{0}&apos; instead..
        /// </summary>
        public static string INF_IdentifierConflictWithContextualKeyword {
            get {
                return ResourceManager.GetString("INF_IdentifierConflictWithContextualKeyword", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier is a contextual keyword, with a specific meaning, in a later language version..
        /// </summary>
        public static string INF_IdentifierConflictWithContextualKeyword_Title {
            get {
                return ResourceManager.GetString("INF_IdentifierConflictWithContextualKeyword_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiling requires binding the lambda expression at least {0} times. Consider declaring the lambda expression with explicit parameter types, or if the containing method call is generic, consider using explicit type arguments..
        /// </summary>
        public static string INF_TooManyBoundLambdas {
            get {
                return ResourceManager.GetString("INF_TooManyBoundLambdas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiling requires binding the lambda expression many times. Consider declaring the lambda expression with explicit parameter types, or if the containing method call is generic, consider using explicit type arguments..
        /// </summary>
        public static string INF_TooManyBoundLambdas_Title {
            get {
                return ResourceManager.GetString("INF_TooManyBoundLambdas_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skipping some types in analyzer assembly {0} due to a ReflectionTypeLoadException : {1}..
        /// </summary>
        public static string INF_UnableToLoadSomeTypesInAnalyzer {
            get {
                return ResourceManager.GetString("INF_UnableToLoadSomeTypesInAnalyzer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Skip loading types in analyzer assembly that fail due to a ReflectionTypeLoadException.
        /// </summary>
        public static string INF_UnableToLoadSomeTypesInAnalyzer_Title {
            get {
                return ResourceManager.GetString("INF_UnableToLoadSomeTypesInAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;in-memory assembly&gt;.
        /// </summary>
        public static string InMemoryAssembly {
            get {
                return ResourceManager.GetString("InMemoryAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;in-memory module&gt;.
        /// </summary>
        public static string InMemoryModule {
            get {
                return ResourceManager.GetString("InMemoryModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to interface.
        /// </summary>
        public static string Interface1 {
            get {
                return ResourceManager.GetString("Interface1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current assembly: &apos;{0}&apos;.
        /// </summary>
        public static string InternalsVisibleToCurrentAssembly {
            get {
                return ResourceManager.GetString("InternalsVisibleToCurrentAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Printing &apos;InternalsVisibleToAttribute&apos; information for the current compilation and all referenced assemblies..
        /// </summary>
        public static string InternalsVisibleToHeaderSummary {
            get {
                return ResourceManager.GetString("InternalsVisibleToHeaderSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly reference: &apos;{0}&apos;
        ///  Grants IVT to current assembly: {1}
        ///  Grants IVTs to:.
        /// </summary>
        public static string InternalsVisibleToReferencedAssembly {
            get {
                return ResourceManager.GetString("InternalsVisibleToReferencedAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Assembly name: &apos;{0}&apos;
        ///    Public Keys:.
        /// </summary>
        public static string InternalsVisibleToReferencedAssemblyDetails {
            get {
                return ResourceManager.GetString("InternalsVisibleToReferencedAssemblyDetails", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Additional file doesn&apos;t belong to the underlying &apos;CompilationWithAnalyzers&apos;..
        /// </summary>
        public static string InvalidAdditionalFile {
            get {
                return ResourceManager.GetString("InvalidAdditionalFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid alias..
        /// </summary>
        public static string InvalidAlias {
            get {
                return ResourceManager.GetString("InvalidAlias", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid assembly name: &apos;{0}&apos;.
        /// </summary>
        public static string InvalidAssemblyName {
            get {
                return ResourceManager.GetString("InvalidAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid characters in assembly culture name.
        /// </summary>
        public static string InvalidCharactersInAssemblyCultureName {
            get {
                return ResourceManager.GetString("InvalidCharactersInAssemblyCultureName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid characters in assembly name.
        /// </summary>
        public static string InvalidCharactersInAssemblyName {
            get {
                return ResourceManager.GetString("InvalidCharactersInAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid compilation options -- submission can&apos;t be signed..
        /// </summary>
        public static string InvalidCompilationOptions {
            get {
                return ResourceManager.GetString("InvalidCompilationOptions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid content type.
        /// </summary>
        public static string InvalidContentType {
            get {
                return ResourceManager.GetString("InvalidContentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid culture name: &apos;{0}&apos;.
        /// </summary>
        public static string InvalidCultureName {
            get {
                return ResourceManager.GetString("InvalidCultureName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid data at offset {0}: {1}{2}*{3}{4}.
        /// </summary>
        public static string InvalidDataAtOffset {
            get {
                return ResourceManager.GetString("InvalidDataAtOffset", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reported diagnostic has an ID &apos;{0}&apos;, which is not a valid identifier..
        /// </summary>
        public static string InvalidDiagnosticIdReported {
            get {
                return ResourceManager.GetString("InvalidDiagnosticIdReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reported diagnostic &apos;{0}&apos; has a source location in file &apos;{1}&apos;, which is not part of the compilation being analyzed..
        /// </summary>
        public static string InvalidDiagnosticLocationReported {
            get {
                return ResourceManager.GetString("InvalidDiagnosticLocationReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reported diagnostic &apos;{0}&apos; has a source location &apos;{1}&apos; in file &apos;{2}&apos;, which is outside of the given file..
        /// </summary>
        public static string InvalidDiagnosticSpanReported {
            get {
                return ResourceManager.GetString("InvalidDiagnosticSpanReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Suppressed diagnostic ID &apos;{0}&apos; does not match suppressable ID &apos;{1}&apos; for the given suppression descriptor..
        /// </summary>
        public static string InvalidDiagnosticSuppressionReported {
            get {
                return ResourceManager.GetString("InvalidDiagnosticSuppressionReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Called GetDeclarationName for a declaration node that can possibly contain multiple variable declarators..
        /// </summary>
        public static string InvalidGetDeclarationNameMultipleDeclarators {
            get {
                return ResourceManager.GetString("InvalidGetDeclarationNameMultipleDeclarators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid hash..
        /// </summary>
        public static string InvalidHash {
            get {
                return ResourceManager.GetString("InvalidHash", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid instrumentation kind: {0}.
        /// </summary>
        public static string InvalidInstrumentationKind {
            get {
                return ResourceManager.GetString("InvalidInstrumentationKind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid module name specified in metadata module &apos;{0}&apos;: &apos;{1}&apos;.
        /// </summary>
        public static string InvalidModuleName {
            get {
                return ResourceManager.GetString("InvalidModuleName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Node to track is not a descendant of the root..
        /// </summary>
        public static string InvalidNodeToTrack {
            get {
                return ResourceManager.GetString("InvalidNodeToTrack", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given operation block does not belong to the current analysis context..
        /// </summary>
        public static string InvalidOperationBlockForAnalysisContext {
            get {
                return ResourceManager.GetString("InvalidOperationBlockForAnalysisContext", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid output kind for submission. DynamicallyLinkedLibrary expected..
        /// </summary>
        public static string InvalidOutputKindForSubmission {
            get {
                return ResourceManager.GetString("InvalidOutputKindForSubmission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid public key..
        /// </summary>
        public static string InvalidPublicKey {
            get {
                return ResourceManager.GetString("InvalidPublicKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid public key token..
        /// </summary>
        public static string InvalidPublicKeyToken {
            get {
                return ResourceManager.GetString("InvalidPublicKeyToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while loading the included rule set file {0} - {1}.
        /// </summary>
        public static string InvalidRuleSetInclude {
            get {
                return ResourceManager.GetString("InvalidRuleSetInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid size of public key token..
        /// </summary>
        public static string InvalidSizeOfPublicKeyToken {
            get {
                return ResourceManager.GetString("InvalidSizeOfPublicKeyToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax tree doesn&apos;t belong to the underlying &apos;Compilation&apos;..
        /// </summary>
        public static string InvalidTree {
            get {
                return ResourceManager.GetString("InvalidTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is not a valid C# spread operation.
        /// </summary>
        public static string ISpreadOperationIsNotCSharpSpread {
            get {
                return ResourceManager.GetString("ISpreadOperationIsNotCSharpSpread", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; must be an &apos;INamedTypeSymbol&apos; or an &apos;IAssemblySymbol&apos;..
        /// </summary>
        public static string IsSymbolAccessibleBadWithin {
            get {
                return ResourceManager.GetString("IsSymbolAccessibleBadWithin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; must be a symbol from this compilation or some referenced assembly..
        /// </summary>
        public static string IsSymbolAccessibleWrongAssembly {
            get {
                return ResourceManager.GetString("IsSymbolAccessibleWrongAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to items: must be non-empty.
        /// </summary>
        public static string ItemsMustBeNonEmpty {
            get {
                return ResourceManager.GetString("ItemsMustBeNonEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument to &apos;/keepalive&apos; option is not a 32-bit integer..
        /// </summary>
        public static string KeepAliveIsNotAnInteger {
            get {
                return ResourceManager.GetString("KeepAliveIsNotAnInteger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arguments to &apos;/keepalive&apos; option below -1 are invalid..
        /// </summary>
        public static string KeepAliveIsTooSmall {
            get {
                return ResourceManager.GetString("KeepAliveIsTooSmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;/keepalive&apos; option is only valid with &apos;/shared&apos; option..
        /// </summary>
        public static string KeepAliveWithoutShared {
            get {
                return ResourceManager.GetString("KeepAliveWithoutShared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested line number {0} must be less than the number of lines {1}..
        /// </summary>
        public static string LineCannotBeGreaterThanEnd {
            get {
                return ResourceManager.GetString("LineCannotBeGreaterThanEnd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location must be provided in order to provide minimal type qualification..
        /// </summary>
        public static string LocationMustBeProvided {
            get {
                return ResourceManager.GetString("LocationMustBeProvided", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to LookupOptions has an invalid combination of options.
        /// </summary>
        public static string LookupOptionsHasInvalidCombo {
            get {
                return ResourceManager.GetString("LookupOptionsHasInvalidCombo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Metadata PE stream should not be given when emitting metadata only..
        /// </summary>
        public static string MetadataPeStreamUnexpectedWhenEmittingMetadataOnly {
            get {
                return ResourceManager.GetString("MetadataPeStreamUnexpectedWhenEmittingMetadataOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to MetadataReference &apos;{0}&apos; not found to remove..
        /// </summary>
        public static string MetadataRefNotFoundToRemove1 {
            get {
                return ResourceManager.GetString("MetadataRefNotFoundToRemove1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to method.
        /// </summary>
        public static string Method {
            get {
                return ResourceManager.GetString("Method", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method symbol expected.
        /// </summary>
        public static string MethodSymbolExpected {
            get {
                return ResourceManager.GetString("MethodSymbolExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Roslyn compiler server reports different protocol version than build task..
        /// </summary>
        public static string MismatchedVersion {
            get {
                return ResourceManager.GetString("MismatchedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing argument for &apos;/keepalive&apos; option..
        /// </summary>
        public static string MissingKeepAlive {
            get {
                return ResourceManager.GetString("MissingKeepAlive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The item specified is not the element of a list..
        /// </summary>
        public static string MissingListItem {
            get {
                return ResourceManager.GetString("MissingListItem", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to module.
        /// </summary>
        public static string Module {
            get {
                return ResourceManager.GetString("Module", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module copy can&apos;t be used to create an assembly metadata..
        /// </summary>
        public static string ModuleCopyCannotBeUsedToCreateAssemblyMetadata {
            get {
                return ResourceManager.GetString("ModuleCopyCannotBeUsedToCreateAssemblyMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Module has invalid attributes..
        /// </summary>
        public static string ModuleHasInvalidAttributes {
            get {
                return ResourceManager.GetString("ModuleHasInvalidAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NOTE: Elapsed time may be less than analyzer execution time because analyzers can run concurrently..
        /// </summary>
        public static string MultithreadedAnalyzerExecutionNote {
            get {
                return ResourceManager.GetString("MultithreadedAnalyzerExecutionNote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Must include private members unless emitting a ref assembly..
        /// </summary>
        public static string MustIncludePrivateMembersUnlessRefAssembly {
            get {
                return ResourceManager.GetString("MustIncludePrivateMembersUnlessRefAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name cannot be empty..
        /// </summary>
        public static string NameCannotBeEmpty {
            get {
                return ResourceManager.GetString("NameCannotBeEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name cannot be null..
        /// </summary>
        public static string NameCannotBeNull {
            get {
                return ResourceManager.GetString("NameCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name cannot start with whitespace..
        /// </summary>
        public static string NameCannotStartWithWhitespace {
            get {
                return ResourceManager.GetString("NameCannotStartWithWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name conflict for name {0}.
        /// </summary>
        public static string NameConflictForName {
            get {
                return ResourceManager.GetString("NameConflictForName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name contains invalid characters..
        /// </summary>
        public static string NameContainsInvalidCharacter {
            get {
                return ResourceManager.GetString("NameContainsInvalidCharacter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No analyzers found.
        /// </summary>
        public static string NoAnalyzersFound {
            get {
                return ResourceManager.GetString("NoAnalyzersFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A node or token is out of sequence..
        /// </summary>
        public static string NodeOrTokenOutOfSequence {
            get {
                return ResourceManager.GetString("NodeOrTokenOutOfSequence", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SearchCriteria is expected..
        /// </summary>
        public static string NoNoneSearchCriteria {
            get {
                return ResourceManager.GetString("NoNoneSearchCriteria", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-reported diagnostic with ID &apos;{0}&apos; cannot be suppressed..
        /// </summary>
        public static string NonReportedDiagnosticCannotBeSuppressed {
            get {
                return ResourceManager.GetString("NonReportedDiagnosticCannotBeSuppressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a C# symbol..
        /// </summary>
        public static string NotACSharpSymbol {
            get {
                return ResourceManager.GetString("NotACSharpSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given operation has a non-null parent..
        /// </summary>
        public static string NotARootOperation {
            get {
                return ResourceManager.GetString("NotARootOperation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nothing.
        /// </summary>
        public static string Nothing {
            get {
                return ResourceManager.GetString("Nothing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given {0} parameter types and {1} parameter ref kinds. These arrays must have the same length..
        /// </summary>
        public static string NotSameNumberParameterTypesAndRefKinds {
            get {
                return ResourceManager.GetString("NotSameNumberParameterTypesAndRefKinds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value in the pathMap is null..
        /// </summary>
        public static string NullValueInPathMap {
            get {
                return ResourceManager.GetString("NullValueInPathMap", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given operation has a null semantic model..
        /// </summary>
        public static string OperationHasNullSemanticModel {
            get {
                return ResourceManager.GetString("OperationHasNullSemanticModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provided operation must not be part of a Control Flow Graph..
        /// </summary>
        public static string OperationMustNotBeControlFlowGraphPart {
            get {
                return ResourceManager.GetString("OperationMustNotBeControlFlowGraphPart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;RefKind.Out&apos; is not a valid ref kind for a return type..
        /// </summary>
        public static string OutIsNotValidForReturn {
            get {
                return ResourceManager.GetString("OutIsNotValidForReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output kind not supported..
        /// </summary>
        public static string OutputKindNotSupported {
            get {
                return ResourceManager.GetString("OutputKindNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to parameter.
        /// </summary>
        public static string Parameter {
            get {
                return ResourceManager.GetString("Parameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path returned by {0}.ResolveMetadataFile must be absolute: &apos;{1}&apos;.
        /// </summary>
        public static string PathReturnedByResolveMetadataFileMustBeAbsolute {
            get {
                return ResourceManager.GetString("PathReturnedByResolveMetadataFileMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path returned by {0}.ResolveStrongNameKeyFile must be absolute: &apos;{1}&apos;.
        /// </summary>
        public static string PathReturnedByResolveStrongNameKeyFileMustBeAbsolute {
            get {
                return ResourceManager.GetString("PathReturnedByResolveStrongNameKeyFileMustBeAbsolute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PDB stream should not be given when embedding PDB into the PE stream..
        /// </summary>
        public static string PdbStreamUnexpectedWhenEmbedding {
            get {
                return ResourceManager.GetString("PdbStreamUnexpectedWhenEmbedding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PDB stream should not be given when emitting metadata only..
        /// </summary>
        public static string PdbStreamUnexpectedWhenEmittingMetadataOnly {
            get {
                return ResourceManager.GetString("PdbStreamUnexpectedWhenEmittingMetadataOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PE image doesn&apos;t contain managed metadata..
        /// </summary>
        public static string PEImageDoesntContainManagedMetadata {
            get {
                return ResourceManager.GetString("PEImageDoesntContainManagedMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PE image not available..
        /// </summary>
        public static string PEImageNotAvailable {
            get {
                return ResourceManager.GetString("PEImageNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position is not within syntax tree with full span {0}.
        /// </summary>
        public static string PositionIsNotWithinSyntax {
            get {
                return ResourceManager.GetString("PositionIsNotWithinSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Position must be within span of the syntax tree..
        /// </summary>
        public static string PositionNotWithinTree {
            get {
                return ResourceManager.GetString("PositionNotWithinTree", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Previous submission has errors..
        /// </summary>
        public static string PreviousSubmissionHasErrors {
            get {
                return ResourceManager.GetString("PreviousSubmissionHasErrors", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to property, indexer.
        /// </summary>
        public static string Property {
            get {
                return ResourceManager.GetString("Property", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference of type &apos;{0}&apos; is not valid for this compilation..
        /// </summary>
        public static string ReferenceOfTypeIsInvalid1 {
            get {
                return ResourceManager.GetString("ReferenceOfTypeIsInvalid1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference resolver should return readable non-null stream..
        /// </summary>
        public static string ReferenceResolverShouldReturnReadableNonNullStream {
            get {
                return ResourceManager.GetString("ReferenceResolverShouldReturnReadableNonNullStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource data provider should return non-null stream.
        /// </summary>
        public static string ResourceDataProviderShouldReturnNonNullStream {
            get {
                return ResourceManager.GetString("ResourceDataProviderShouldReturnNonNullStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource stream ended at {0} bytes, expected {1} bytes..
        /// </summary>
        public static string ResourceStreamEndedUnexpectedly {
            get {
                return ResourceManager.GetString("ResourceStreamEndedUnexpectedly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Resource stream provider should return non-null stream..
        /// </summary>
        public static string ResourceStreamProviderShouldReturnNonNullStream {
            get {
                return ResourceManager.GetString("ResourceStreamProviderShouldReturnNonNullStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to return.
        /// </summary>
        public static string Return1 {
            get {
                return ResourceManager.GetString("Return1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return type can&apos;t be a value type, pointer, by-ref or open generic type.
        /// </summary>
        public static string ReturnTypeCannotBeValuePointerbyRefOrOpen {
            get {
                return ResourceManager.GetString("ReturnTypeCannotBeValuePointerbyRefOrOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return type can&apos;t be void, by-ref or open generic type.
        /// </summary>
        public static string ReturnTypeCannotBeVoidByRefOrOpen {
            get {
                return ResourceManager.GetString("ReturnTypeCannotBeVoidByRefOrOpen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attribute {0} has an invalid value of {1}..
        /// </summary>
        public static string RuleSetBadAttributeValue {
            get {
                return ResourceManager.GetString("RuleSetBadAttributeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The rule set file has duplicate rules for &apos;{0}&apos; with differing actions &apos;{1}&apos; and &apos;{2}&apos;..
        /// </summary>
        public static string RuleSetHasDuplicateRules {
            get {
                return ResourceManager.GetString("RuleSetHasDuplicateRules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The element {0} is missing an attribute named {1}..
        /// </summary>
        public static string RuleSetMissingAttribute {
            get {
                return ResourceManager.GetString("RuleSetMissingAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to separator is expected.
        /// </summary>
        public static string SeparatorIsExpected {
            get {
                return ResourceManager.GetString("SeparatorIsExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value for argument &apos;/shared:&apos; must not be empty.
        /// </summary>
        public static string SharedArgumentMissing {
            get {
                return ResourceManager.GetString("SharedArgumentMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The temporary path for legacy file signing is unavailable..
        /// </summary>
        public static string SigningTempPathUnavailable {
            get {
                return ResourceManager.GetString("SigningTempPathUnavailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only a single {0} can be registered per generator..
        /// </summary>
        public static string Single_type_per_generator_0 {
            get {
                return ResourceManager.GetString("Single_type_per_generator_0", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Size has to be positive..
        /// </summary>
        public static string SizeHasToBePositive {
            get {
                return ResourceManager.GetString("SizeHasToBePositive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SourceText cannot be embedded. Provide encoding or canBeEmbedded=true at construction..
        /// </summary>
        public static string SourceTextCannotBeEmbedded {
            get {
                return ResourceManager.GetString("SourceTextCannotBeEmbedded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SourceText with hintName &apos;{0}&apos; must have an explicit encoding set..
        /// </summary>
        public static string SourceTextRequiresEncoding {
            get {
                return ResourceManager.GetString("SourceTextRequiresEncoding", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The span does not include the end of a line..
        /// </summary>
        public static string SpanDoesNotIncludeEndOfLine {
            get {
                return ResourceManager.GetString("SpanDoesNotIncludeEndOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The span does not include the start of a line..
        /// </summary>
        public static string SpanDoesNotIncludeStartOfLine {
            get {
                return ResourceManager.GetString("SpanDoesNotIncludeStartOfLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax node to be speculated cannot belong to a syntax tree from the current compilation..
        /// </summary>
        public static string SpeculatedSyntaxNodeCannotBelongToCurrentCompilation {
            get {
                return ResourceManager.GetString("SpeculatedSyntaxNodeCannotBelongToCurrentCompilation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;start&apos; must not be negative.
        /// </summary>
        public static string StartMustNotBeNegative {
            get {
                return ResourceManager.GetString("StartMustNotBeNegative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream contains invalid data.
        /// </summary>
        public static string Stream_contains_invalid_data {
            get {
                return ResourceManager.GetString("Stream_contains_invalid_data", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream is too long..
        /// </summary>
        public static string StreamIsTooLong {
            get {
                return ResourceManager.GetString("StreamIsTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream must be readable..
        /// </summary>
        public static string StreamMustSupportRead {
            get {
                return ResourceManager.GetString("StreamMustSupportRead", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream must support read and seek operations..
        /// </summary>
        public static string StreamMustSupportReadAndSeek {
            get {
                return ResourceManager.GetString("StreamMustSupportReadAndSeek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream must be writable..
        /// </summary>
        public static string StreamMustSupportWrite {
            get {
                return ResourceManager.GetString("StreamMustSupportWrite", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to struct.
        /// </summary>
        public static string Struct1 {
            get {
                return ResourceManager.GetString("Struct1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submission can have at most one syntax tree..
        /// </summary>
        public static string SubmissionCanHaveAtMostOne {
            get {
                return ResourceManager.GetString("SubmissionCanHaveAtMostOne", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Submission can only include script code..
        /// </summary>
        public static string SubmissionCanOnlyInclude {
            get {
                return ResourceManager.GetString("SubmissionCanOnlyInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer &apos;{0}&apos; contains a null descriptor in its &apos;SupportedDiagnostics&apos;..
        /// </summary>
        public static string SupportedDiagnosticsHasNullDescriptor {
            get {
                return ResourceManager.GetString("SupportedDiagnosticsHasNullDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer &apos;{0}&apos; contains a null descriptor in its &apos;SupportedSuppressions&apos;..
        /// </summary>
        public static string SupportedSuppressionsHasNullDescriptor {
            get {
                return ResourceManager.GetString("SupportedSuppressionsHasNullDescriptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Diagnostic &apos;{0}: {1}&apos; was programmatically suppressed by a DiagnosticSuppressor with suppression ID &apos;{2}&apos; and justification &apos;{3}&apos;.
        /// </summary>
        public static string SuppressionDiagnosticDescriptorMessage {
            get {
                return ResourceManager.GetString("SuppressionDiagnosticDescriptorMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Programmatic suppression of an analyzer diagnostic.
        /// </summary>
        public static string SuppressionDiagnosticDescriptorTitle {
            get {
                return ResourceManager.GetString("SuppressionDiagnosticDescriptorTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A SuppressionDescriptor must have an Id that is neither null nor an empty string nor a string that only contains white space..
        /// </summary>
        public static string SuppressionIdCantBeNullOrWhitespace {
            get {
                return ResourceManager.GetString("SuppressionIdCantBeNullOrWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows PDB writer doesn&apos;t support SourceLink feature: &apos;{0}&apos;.
        /// </summary>
        public static string SymWriterDoesNotSupportSourceLink {
            get {
                return ResourceManager.GetString("SymWriterDoesNotSupportSourceLink", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Windows PDB writer doesn&apos;t support deterministic compilation: &apos;{0}&apos;.
        /// </summary>
        public static string SymWriterNotDeterministic {
            get {
                return ResourceManager.GetString("SymWriterNotDeterministic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of Windows PDB writer is older than required: &apos;{0}&apos;.
        /// </summary>
        public static string SymWriterOlderVersionThanRequired {
            get {
                return ResourceManager.GetString("SymWriterOlderVersionThanRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax node is not within syntax tree.
        /// </summary>
        public static string SyntaxNodeIsNotWithinSynt {
            get {
                return ResourceManager.GetString("SyntaxNodeIsNotWithinSynt", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax tree already present.
        /// </summary>
        public static string SyntaxTreeAlreadyPresent {
            get {
                return ResourceManager.GetString("SyntaxTreeAlreadyPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTree resulted from a #load directive and cannot be removed or replaced directly..
        /// </summary>
        public static string SyntaxTreeFromLoadNoRemoveReplace {
            get {
                return ResourceManager.GetString("SyntaxTreeFromLoadNoRemoveReplace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Syntax tree should be created from a submission..
        /// </summary>
        public static string SyntaxTreeIsNotASubmission {
            get {
                return ResourceManager.GetString("SyntaxTreeIsNotASubmission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTree is not part of the compilation.
        /// </summary>
        public static string SyntaxTreeNotFound {
            get {
                return ResourceManager.GetString("SyntaxTreeNotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTree is not part of the compilation, so it cannot be removed.
        /// </summary>
        public static string SyntaxTreeNotFoundToRemove {
            get {
                return ResourceManager.GetString("SyntaxTreeNotFoundToRemove", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SyntaxTreeSemanticModel must be provided in order to provide minimal type qualification..
        /// </summary>
        public static string SyntaxTreeSemanticModelMust {
            get {
                return ResourceManager.GetString("SyntaxTreeSemanticModelMust", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; is not understood by the serialization binder..
        /// </summary>
        public static string The_type_0_is_not_understood_by_the_serialization_binder {
            get {
                return ResourceManager.GetString("The_type_0_is_not_understood_by_the_serialization_binder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream cannot be read from..
        /// </summary>
        public static string TheStreamCannotBeReadFrom {
            get {
                return ResourceManager.GetString("TheStreamCannotBeReadFrom", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream cannot be written to..
        /// </summary>
        public static string TheStreamCannotBeWrittenTo {
            get {
                return ResourceManager.GetString("TheStreamCannotBeWrittenTo", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This method can only be used to create tokens - {0} is not a token kind..
        /// </summary>
        public static string ThisMethodCanOnlyBeUsedToCreateTokens {
            get {
                return ResourceManager.GetString("ThisMethodCanOnlyBeUsedToCreateTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tree must have a root node with SyntaxKind.CompilationUnit.
        /// </summary>
        public static string TreeMustHaveARootNodeWith {
            get {
                return ResourceManager.GetString("TreeMustHaveARootNodeWith", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If tuple element locations are specified, the number of locations must match the cardinality of the tuple..
        /// </summary>
        public static string TupleElementLocationCountMismatch {
            get {
                return ResourceManager.GetString("TupleElementLocationCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If tuple element names are specified, the number of element names must match the cardinality of the tuple..
        /// </summary>
        public static string TupleElementNameCountMismatch {
            get {
                return ResourceManager.GetString("TupleElementNameCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuple element name cannot be an empty string..
        /// </summary>
        public static string TupleElementNameEmpty {
            get {
                return ResourceManager.GetString("TupleElementNameEmpty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If tuple element nullable annotations are specified, the number of annotations must match the cardinality of the tuple..
        /// </summary>
        public static string TupleElementNullableAnnotationCountMismatch {
            get {
                return ResourceManager.GetString("TupleElementNullableAnnotationCountMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tuples must have at least two elements..
        /// </summary>
        public static string TuplesNeedAtLeastTwoElements {
            get {
                return ResourceManager.GetString("TuplesNeedAtLeastTwoElements", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The underlying type for a tuple must be tuple-compatible..
        /// </summary>
        public static string TupleUnderlyingTypeMustBeTupleCompatible {
            get {
                return ResourceManager.GetString("TupleUnderlyingTypeMustBeTupleCompatible", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type argument cannot be null.
        /// </summary>
        public static string TypeArgumentCannotBeNull {
            get {
                return ResourceManager.GetString("TypeArgumentCannotBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type must be a subclass of SyntaxAnnotation..
        /// </summary>
        public static string TypeMustBeASubclassOfSyntaxAnnotation {
            get {
                return ResourceManager.GetString("TypeMustBeASubclassOfSyntaxAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type must be same as host object type of previous submission..
        /// </summary>
        public static string TypeMustBeSameAsHostObjectTypeOfPreviousSubmission {
            get {
                return ResourceManager.GetString("TypeMustBeSameAsHostObjectTypeOfPreviousSubmission", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to type parameter.
        /// </summary>
        public static string TypeParameter {
            get {
                return ResourceManager.GetString("TypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to determine specific cause of the failure..
        /// </summary>
        public static string UnableToDetermineSpecificCauseOfFailure {
            get {
                return ResourceManager.GetString("UnableToDetermineSpecificCauseOfFailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A node in the list is not of the expected type..
        /// </summary>
        public static string UnexpectedTypeOfNodeInList {
            get {
                return ResourceManager.GetString("UnexpectedTypeOfNodeInList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized resource file format..
        /// </summary>
        public static string UnrecognizedResourceFileFormat {
            get {
                return ResourceManager.GetString("UnrecognizedResourceFileFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unresolved: .
        /// </summary>
        public static string Unresolved {
            get {
                return ResourceManager.GetString("Unresolved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument contains an analyzer instance that does not belong to the &apos;Analyzers&apos; for this CompilationWithAnalyzers instance..
        /// </summary>
        public static string UnsupportedAnalyzerInstance {
            get {
                return ResourceManager.GetString("UnsupportedAnalyzerInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reported diagnostic with ID &apos;{0}&apos; is not supported by the analyzer..
        /// </summary>
        public static string UnsupportedDiagnosticReported {
            get {
                return ResourceManager.GetString("UnsupportedDiagnosticReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported hash algorithm..
        /// </summary>
        public static string UnsupportedHashAlgorithm {
            get {
                return ResourceManager.GetString("UnsupportedHashAlgorithm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reported suppression with ID &apos;{0}&apos; is not supported by the suppressor..
        /// </summary>
        public static string UnsupportedSuppressionReported {
            get {
                return ResourceManager.GetString("UnsupportedSuppressionReported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create numeric literal tokens..
        /// </summary>
        public static string UseLiteralForNumeric {
            get {
                return ResourceManager.GetString("UseLiteralForNumeric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Literal to create character literal tokens..
        /// </summary>
        public static string UseLiteralForTokens {
            get {
                return ResourceManager.GetString("UseLiteralForTokens", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Microsoft.CodeAnalysis.CSharp.SyntaxFactory.Identifier or Microsoft.CodeAnalysis.CSharp.SyntaxFactory.VerbatimIdentifier to create identifier tokens..
        /// </summary>
        public static string UseVerbatimIdentifier {
            get {
                return ResourceManager.GetString("UseVerbatimIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value too large to be represented as a 30 bit unsigned integer..
        /// </summary>
        public static string Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer {
            get {
                return ResourceManager.GetString("Value_too_large_to_be_represented_as_a_30_bit_unsigned_integer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WindowsRuntime identity can&apos;t be retargetable.
        /// </summary>
        public static string WinRTIdentityCantBeRetargetable {
            get {
                return ResourceManager.GetString("WinRTIdentityCantBeRetargetable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;&amp;&apos; operator should not be used on parameters or local variables in async methods..
        /// </summary>
        public static string WRN_AddressOfInAsync {
            get {
                return ResourceManager.GetString("WRN_AddressOfInAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;&amp;&apos; operator should not be used on parameters or local variables in async methods..
        /// </summary>
        public static string WRN_AddressOfInAsync_Title {
            get {
                return ResourceManager.GetString("WRN_AddressOfInAsync_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You are taking the address of an unfixed expression.
        /// </summary>
        public static string WRN_AddrOfMovable {
            get {
                return ResourceManager.GetString("WRN_AddrOfMovable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alignment value {0} has a magnitude greater than {1} and may result in a large formatted string..
        /// </summary>
        public static string WRN_AlignmentMagnitude {
            get {
                return ResourceManager.GetString("WRN_AlignmentMagnitude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Alignment value has a magnitude that may result in a large formatted string.
        /// </summary>
        public static string WRN_AlignmentMagnitude_Title {
            get {
                return ResourceManager.GetString("WRN_AlignmentMagnitude_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always &apos;null&apos; of type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_AlwaysNull {
            get {
                return ResourceManager.GetString("WRN_AlwaysNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always &apos;null&apos;.
        /// </summary>
        public static string WRN_AlwaysNull_Title {
            get {
                return ResourceManager.GetString("WRN_AlwaysNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous reference in cref attribute: &apos;{0}&apos;. Assuming &apos;{1}&apos;, but could have also matched other overloads including &apos;{2}&apos;..
        /// </summary>
        public static string WRN_AmbiguousXMLReference {
            get {
                return ResourceManager.GetString("WRN_AmbiguousXMLReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous reference in cref attribute.
        /// </summary>
        public static string WRN_AmbiguousXMLReference_Title {
            get {
                return ResourceManager.GetString("WRN_AmbiguousXMLReference_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An instance of analyzer {0} cannot be created from {1} : {2}..
        /// </summary>
        public static string WRN_AnalyzerCannotBeCreated {
            get {
                return ResourceManager.GetString("WRN_AnalyzerCannotBeCreated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An analyzer instance cannot be created.
        /// </summary>
        public static string WRN_AnalyzerCannotBeCreated_Title {
            get {
                return ResourceManager.GetString("WRN_AnalyzerCannotBeCreated_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly &apos;{0}&apos; containing type &apos;{1}&apos; references .NET Framework, which is not supported..
        /// </summary>
        public static string WRN_AnalyzerReferencesFramework {
            get {
                return ResourceManager.GetString("WRN_AnalyzerReferencesFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The loaded assembly references .NET Framework, which is not supported..
        /// </summary>
        public static string WRN_AnalyzerReferencesFramework_Title {
            get {
                return ResourceManager.GetString("WRN_AnalyzerReferencesFramework_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The analyzer assembly &apos;{0}&apos; references version &apos;{1}&apos; of the compiler, which is newer than the currently running version &apos;{2}&apos;..
        /// </summary>
        public static string WRN_AnalyzerReferencesNewerCompiler {
            get {
                return ResourceManager.GetString("WRN_AnalyzerReferencesNewerCompiler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The analyzer assembly references a newer version of the compiler than the currently running version..
        /// </summary>
        public static string WRN_AnalyzerReferencesNewerCompiler_Title {
            get {
                return ResourceManager.GetString("WRN_AnalyzerReferencesNewerCompiler_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} should be passed with the &apos;in&apos; keyword.
        /// </summary>
        public static string WRN_ArgExpectedIn {
            get {
                return ResourceManager.GetString("WRN_ArgExpectedIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument should be passed with the &apos;in&apos; keyword.
        /// </summary>
        public static string WRN_ArgExpectedIn_Title {
            get {
                return ResourceManager.GetString("WRN_ArgExpectedIn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} should be passed with &apos;ref&apos; or &apos;in&apos; keyword.
        /// </summary>
        public static string WRN_ArgExpectedRefOrIn {
            get {
                return ResourceManager.GetString("WRN_ArgExpectedRefOrIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument should be passed with &apos;ref&apos; or &apos;in&apos; keyword.
        /// </summary>
        public static string WRN_ArgExpectedRefOrIn_Title {
            get {
                return ResourceManager.GetString("WRN_ArgExpectedRefOrIn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible conflict between assignment to local variable {0} and named argument syntax. The compiler will assume the named argument syntax. Surround the expression with parentheses to resolve the problem..
        /// </summary>
        public static string WRN_ArgumentNameLocalNamePossibleConflict {
            get {
                return ResourceManager.GetString("WRN_ArgumentNameLocalNamePossibleConflict", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} is passed with REF keyword but should be passed with the &apos;{1}&apos; keyword.
        /// </summary>
        public static string WRN_ArgumentRefParameterOut {
            get {
                return ResourceManager.GetString("WRN_ArgumentRefParameterOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;ARRAY&apos; does not have a method &apos;{0}&apos;. This code is converted to an &apos;ASend()&apos; function call..
        /// </summary>
        public static string WRN_ASend {
            get {
                return ResourceManager.GetString("WRN_ASend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; from module &apos;{1}&apos; will be ignored in favor of the instance appearing in source.
        /// </summary>
        public static string WRN_AssemblyAttributeFromModuleIsOverridden {
            get {
                return ResourceManager.GetString("WRN_AssemblyAttributeFromModuleIsOverridden", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute will be ignored in favor of the instance appearing in source.
        /// </summary>
        public static string WRN_AssemblyAttributeFromModuleIsOverridden_Title {
            get {
                return ResourceManager.GetString("WRN_AssemblyAttributeFromModuleIsOverridden_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Should not assign to &apos;{0}&apos; because it is a &apos;{1}&apos;.
        /// </summary>
        public static string WRN_AssgReadonlyLocalCause {
            get {
                return ResourceManager.GetString("WRN_AssgReadonlyLocalCause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possibly incorrect assignment to local &apos;{0}&apos; which is the argument to a using or lock statement. The Dispose call or unlocking will happen on the original value of the local..
        /// </summary>
        public static string WRN_AssignmentToLockOrDispose {
            get {
                return ResourceManager.GetString("WRN_AssignmentToLockOrDispose", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possibly incorrect assignment to local which is the argument to a using or lock statement.
        /// </summary>
        public static string WRN_AssignmentToLockOrDispose_Title {
            get {
                return ResourceManager.GetString("WRN_AssignmentToLockOrDispose_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment made to same variable; did you mean to assign something else?.
        /// </summary>
        public static string WRN_AssignmentToSelf {
            get {
                return ResourceManager.GetString("WRN_AssignmentToSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment made to same variable.
        /// </summary>
        public static string WRN_AssignmentToSelf_Title {
            get {
                return ResourceManager.GetString("WRN_AssignmentToSelf_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This async method lacks &apos;await&apos; operators and will run synchronously. Consider using the &apos;await&apos; operator to await non-blocking API calls, or &apos;await Task.Run(...)&apos; to do CPU-bound work on a background thread..
        /// </summary>
        public static string WRN_AsyncLacksAwaits {
            get {
                return ResourceManager.GetString("WRN_AsyncLacksAwaits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async method lacks &apos;await&apos; operators and will run synchronously.
        /// </summary>
        public static string WRN_AsyncLacksAwaits_Title {
            get {
                return ResourceManager.GetString("WRN_AsyncLacksAwaits_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be used in this context because it cannot be represented in metadata..
        /// </summary>
        public static string WRN_AttrDependentTypeNotAllowed {
            get {
                return ResourceManager.GetString("WRN_AttrDependentTypeNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type cannot be used in this context because it cannot be represented in metadata..
        /// </summary>
        public static string WRN_AttrDependentTypeNotAllowed_Title {
            get {
                return ResourceManager.GetString("WRN_AttrDependentTypeNotAllowed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute &apos;{0}&apos; is ignored when public signing is specified..
        /// </summary>
        public static string WRN_AttributeIgnoredWhenPublicSigning {
            get {
                return ResourceManager.GetString("WRN_AttributeIgnoredWhenPublicSigning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute is ignored when public signing is specified..
        /// </summary>
        public static string WRN_AttributeIgnoredWhenPublicSigning_Title {
            get {
                return ResourceManager.GetString("WRN_AttributeIgnoredWhenPublicSigning_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid attribute location for this declaration. Valid attribute locations for this declaration are &apos;{1}&apos;. All attributes in this block will be ignored..
        /// </summary>
        public static string WRN_AttributeLocationOnBadDeclaration {
            get {
                return ResourceManager.GetString("WRN_AttributeLocationOnBadDeclaration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a valid attribute location for this declaration.
        /// </summary>
        public static string WRN_AttributeLocationOnBadDeclaration_Title {
            get {
                return ResourceManager.GetString("WRN_AttributeLocationOnBadDeclaration_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field-targeted attributes on auto-properties are not supported in language version {0}. Please use language version {1} or greater..
        /// </summary>
        public static string WRN_AttributesOnBackingFieldsNotAvailable {
            get {
                return ResourceManager.GetString("WRN_AttributesOnBackingFieldsNotAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field-targeted attributes on auto-properties are not supported in this version of the language..
        /// </summary>
        public static string WRN_AttributesOnBackingFieldsNotAvailable_Title {
            get {
                return ResourceManager.GetString("WRN_AttributesOnBackingFieldsNotAvailable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} needs a(n) &apos;{1}&apos; modifier. This modifier was automatically added..
        /// </summary>
        public static string WRN_AutomaticRefGeneration {
            get {
                return ResourceManager.GetString("WRN_AutomaticRefGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;ref&apos; modifier for argument {0} corresponding to &apos;in&apos; parameter is equivalent to &apos;in&apos;. Consider using &apos;in&apos; instead..
        /// </summary>
        public static string WRN_BadArgRef {
            get {
                return ResourceManager.GetString("WRN_BadArgRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;ref&apos; modifier for an argument corresponding to &apos;in&apos; parameter is equivalent to &apos;in&apos;. Consider using &apos;in&apos; instead..
        /// </summary>
        public static string WRN_BadArgRef_Title {
            get {
                return ResourceManager.GetString("WRN_BadArgRef_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible unintended reference comparison; to get a value comparison, cast the left hand side to type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_BadRefCompareLeft {
            get {
                return ResourceManager.GetString("WRN_BadRefCompareLeft", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible unintended reference comparison; left hand side needs cast.
        /// </summary>
        public static string WRN_BadRefCompareLeft_Title {
            get {
                return ResourceManager.GetString("WRN_BadRefCompareLeft_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible unintended reference comparison; to get a value comparison, cast the right hand side to type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_BadRefCompareRight {
            get {
                return ResourceManager.GetString("WRN_BadRefCompareRight", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible unintended reference comparison; right hand side needs cast.
        /// </summary>
        public static string WRN_BadRefCompareRight_Title {
            get {
                return ResourceManager.GetString("WRN_BadRefCompareRight_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot restore warning &apos;CS{0}&apos; because it was disabled globally.
        /// </summary>
        public static string WRN_BadRestoreNumber {
            get {
                return ResourceManager.GetString("WRN_BadRestoreNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot restore warning because it was disabled globally.
        /// </summary>
        public static string WRN_BadRestoreNumber_Title {
            get {
                return ResourceManager.GetString("WRN_BadRestoreNumber_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The language name &apos;{0}&apos; is invalid..
        /// </summary>
        public static string WRN_BadUILang {
            get {
                return ResourceManager.GetString("WRN_BadUILang", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The language name is invalid.
        /// </summary>
        public static string WRN_BadUILang_Title {
            get {
                return ResourceManager.GetString("WRN_BadUILang_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a valid warning number.
        /// </summary>
        public static string WRN_BadWarningNumber {
            get {
                return ResourceManager.GetString("WRN_BadWarningNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A number that was passed to the #pragma warning preprocessor directive was not a valid warning number. Verify that the number represents a warning, not an error..
        /// </summary>
        public static string WRN_BadWarningNumber_Description {
            get {
                return ResourceManager.GetString("WRN_BadWarningNumber_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a valid warning number.
        /// </summary>
        public static string WRN_BadWarningNumber_Title {
            get {
                return ResourceManager.GetString("WRN_BadWarningNumber_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has cref attribute &apos;{0}&apos; that could not be resolved.
        /// </summary>
        public static string WRN_BadXMLRef {
            get {
                return ResourceManager.GetString("WRN_BadXMLRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has cref attribute that could not be resolved.
        /// </summary>
        public static string WRN_BadXMLRef_Title {
            get {
                return ResourceManager.GetString("WRN_BadXMLRef_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type for parameter {0} in XML comment cref attribute: &apos;{1}&apos;.
        /// </summary>
        public static string WRN_BadXMLRefParamType {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefParamType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid type for parameter in XML comment cref attribute.
        /// </summary>
        public static string WRN_BadXMLRefParamType_Title {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefParamType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid return type in XML comment cref attribute.
        /// </summary>
        public static string WRN_BadXMLRefReturnType {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid return type in XML comment cref attribute.
        /// </summary>
        public static string WRN_BadXMLRefReturnType_Title {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefReturnType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has syntactically incorrect cref attribute &apos;{0}&apos;.
        /// </summary>
        public static string WRN_BadXMLRefSyntax {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefSyntax", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has syntactically incorrect cref attribute.
        /// </summary>
        public static string WRN_BadXMLRefSyntax_Title {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefSyntax_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has cref attribute &apos;{0}&apos; that refers to a type parameter.
        /// </summary>
        public static string WRN_BadXMLRefTypeVar {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefTypeVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has cref attribute that refers to a type parameter.
        /// </summary>
        public static string WRN_BadXMLRefTypeVar_Title {
            get {
                return ResourceManager.GetString("WRN_BadXMLRefTypeVar_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bitwise-or operator used on a sign-extended operand; consider casting to a smaller unsigned type first.
        /// </summary>
        public static string WRN_BitwiseOrSignExtend {
            get {
                return ResourceManager.GetString("WRN_BitwiseOrSignExtend", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compiler implicitly widened and sign-extended a variable, and then used the resulting value in a bitwise OR operation. This can result in unexpected behavior..
        /// </summary>
        public static string WRN_BitwiseOrSignExtend_Description {
            get {
                return ResourceManager.GetString("WRN_BitwiseOrSignExtend_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Bitwise-or operator used on a sign-extended operand.
        /// </summary>
        public static string WRN_BitwiseOrSignExtend_Title {
            get {
                return ResourceManager.GetString("WRN_BitwiseOrSignExtend_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;{0}&apos; as a ref or out value or taking its address may cause a runtime exception because it is a field of a marshal-by-reference class.
        /// </summary>
        public static string WRN_ByRefNonAgileField {
            get {
                return ResourceManager.GetString("WRN_ByRefNonAgileField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using a field of a marshal-by-reference class as a ref or out value or taking its address may cause a runtime exception.
        /// </summary>
        public static string WRN_ByRefNonAgileField_Title {
            get {
                return ResourceManager.GetString("WRN_ByRefNonAgileField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute parameter &apos;SizeConst&apos; must be specified..
        /// </summary>
        public static string WRN_ByValArraySizeConstRequired {
            get {
                return ResourceManager.GetString("WRN_ByValArraySizeConstRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attribute parameter &apos;SizeConst&apos; must be specified..
        /// </summary>
        public static string WRN_ByValArraySizeConstRequired_Title {
            get {
                return ResourceManager.GetString("WRN_ByValArraySizeConstRequired_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call System.IDisposable.Dispose() on allocated instance of {0} before all references to it are out of scope..
        /// </summary>
        public static string WRN_CA2000_DisposeObjectsBeforeLosingScope1 {
            get {
                return ResourceManager.GetString("WRN_CA2000_DisposeObjectsBeforeLosingScope1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call System.IDisposable.Dispose() on allocated instance before all references to it are out of scope.
        /// </summary>
        public static string WRN_CA2000_DisposeObjectsBeforeLosingScope1_Title {
            get {
                return ResourceManager.GetString("WRN_CA2000_DisposeObjectsBeforeLosingScope1_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allocated instance of {0} is not disposed along all exception paths.  Call System.IDisposable.Dispose() before all references to it are out of scope..
        /// </summary>
        public static string WRN_CA2000_DisposeObjectsBeforeLosingScope2 {
            get {
                return ResourceManager.GetString("WRN_CA2000_DisposeObjectsBeforeLosingScope2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allocated instance is not disposed along all exception paths.
        /// </summary>
        public static string WRN_CA2000_DisposeObjectsBeforeLosingScope2_Title {
            get {
                return ResourceManager.GetString("WRN_CA2000_DisposeObjectsBeforeLosingScope2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object &apos;{0}&apos; can be disposed more than once..
        /// </summary>
        public static string WRN_CA2202_DoNotDisposeObjectsMultipleTimes {
            get {
                return ResourceManager.GetString("WRN_CA2202_DoNotDisposeObjectsMultipleTimes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object can be disposed more than once.
        /// </summary>
        public static string WRN_CA2202_DoNotDisposeObjectsMultipleTimes_Title {
            get {
                return ResourceManager.GetString("WRN_CA2202_DoNotDisposeObjectsMultipleTimes_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This combination of arguments to &apos;{0}&apos; may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string WRN_CallArgMixing {
            get {
                return ResourceManager.GetString("WRN_CallArgMixing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This combination of arguments may expose variables referenced by parameter outside of their declaration scope.
        /// </summary>
        public static string WRN_CallArgMixing_Title {
            get {
                return ResourceManager.GetString("WRN_CallArgMixing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect. It is applied with an invalid parameter name..
        /// </summary>
        public static string WRN_CallerArgumentExpressionAttributeHasInvalidParameterName {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionAttributeHasInvalidParameterName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute is applied with an invalid parameter name..
        /// </summary>
        public static string WRN_CallerArgumentExpressionAttributeHasInvalidParameterName_Title {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionAttributeHasInvalidParameterName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect because it&apos;s self-referential..
        /// </summary>
        public static string WRN_CallerArgumentExpressionAttributeSelfReferential {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionAttributeSelfReferential", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter will have no effect because it&apos;s self-refential..
        /// </summary>
        public static string WRN_CallerArgumentExpressionAttributeSelfReferential_Title {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionAttributeSelfReferential_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerArgumentExpressionParamForUnconsumedLocation {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionParamForUnconsumedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerArgumentExpressionParamForUnconsumedLocation_Title {
            get {
                return ResourceManager.GetString("WRN_CallerArgumentExpressionParamForUnconsumedLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerFilePathAttribute applied to parameter &apos;{0}&apos; will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerFilePathParamForUnconsumedLocation {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathParamForUnconsumedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerFilePathAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerFilePathParamForUnconsumedLocation_Title {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathParamForUnconsumedLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerFilePathAttribute..
        /// </summary>
        public static string WRN_CallerFilePathPreferredOverCallerArgumentExpression {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathPreferredOverCallerArgumentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerFilePathAttribute.
        /// </summary>
        public static string WRN_CallerFilePathPreferredOverCallerArgumentExpression_Title {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathPreferredOverCallerArgumentExpression_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerFilePathAttribute..
        /// </summary>
        public static string WRN_CallerFilePathPreferredOverCallerMemberName {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathPreferredOverCallerMemberName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute will have no effect; it is overridden by the CallerFilePathAttribute.
        /// </summary>
        public static string WRN_CallerFilePathPreferredOverCallerMemberName_Title {
            get {
                return ResourceManager.GetString("WRN_CallerFilePathPreferredOverCallerMemberName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerLineNumberAttribute applied to parameter &apos;{0}&apos; will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerLineNumberParamForUnconsumedLocation {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberParamForUnconsumedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerLineNumberAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerLineNumberParamForUnconsumedLocation_Title {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberParamForUnconsumedLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerLineNumberAttribute..
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerArgumentExpression {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerArgumentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerLineNumberAttribute.
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerArgumentExpression_Title {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerArgumentExpression_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerFilePathAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerLineNumberAttribute..
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerFilePath {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerFilePath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerFilePathAttribute will have no effect; it is overridden by the CallerLineNumberAttribute.
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerFilePath_Title {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerFilePath_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerLineNumberAttribute..
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerMemberName {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerMemberName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute will have no effect; it is overridden by the CallerLineNumberAttribute.
        /// </summary>
        public static string WRN_CallerLineNumberPreferredOverCallerMemberName_Title {
            get {
                return ResourceManager.GetString("WRN_CallerLineNumberPreferredOverCallerMemberName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute applied to parameter &apos;{0}&apos; will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerMemberNameParamForUnconsumedLocation {
            get {
                return ResourceManager.GetString("WRN_CallerMemberNameParamForUnconsumedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerMemberNameAttribute will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_CallerMemberNameParamForUnconsumedLocation_Title {
            get {
                return ResourceManager.GetString("WRN_CallerMemberNameParamForUnconsumedLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute applied to parameter &apos;{0}&apos; will have no effect. It is overridden by the CallerMemberNameAttribute..
        /// </summary>
        public static string WRN_CallerMemberNamePreferredOverCallerArgumentExpression {
            get {
                return ResourceManager.GetString("WRN_CallerMemberNamePreferredOverCallerArgumentExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CallerArgumentExpressionAttribute will have no effect; it is overridden by the CallerMemberNameAttribute.
        /// </summary>
        public static string WRN_CallerMemberNamePreferredOverCallerArgumentExpression_Title {
            get {
                return ResourceManager.GetString("WRN_CallerMemberNamePreferredOverCallerArgumentExpression_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accessing a member on &apos;{0}&apos; may cause a runtime exception because it is a field of a marshal-by-reference class.
        /// </summary>
        public static string WRN_CallOnNonAgileField {
            get {
                return ResourceManager.GetString("WRN_CallOnNonAgileField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning occurs when you try to call a method, property, or indexer on a member of a class that derives from MarshalByRefObject, and the member is a value type. Objects that inherit from MarshalByRefObject are typically intended to be marshaled by reference across an application domain. If any code ever attempts to directly access the value-type member of such an object across an application domain, a runtime exception will occur. To resolve the warning, first copy the member into a local variable and c [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WRN_CallOnNonAgileField_Description {
            get {
                return ResourceManager.GetString("WRN_CallOnNonAgileField_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accessing a member on a field of a marshal-by-reference class may cause a runtime exception.
        /// </summary>
        public static string WRN_CallOnNonAgileField_Title {
            get {
                return ResourceManager.GetString("WRN_CallOnNonAgileField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring /win32manifest for module because it only applies to assemblies.
        /// </summary>
        public static string WRN_CantHaveManifestForModule {
            get {
                return ResourceManager.GetString("WRN_CantHaveManifestForModule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring /win32manifest for module because it only applies to assemblies.
        /// </summary>
        public static string WRN_CantHaveManifestForModule_Title {
            get {
                return ResourceManager.GetString("WRN_CantHaveManifestForModule_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event..
        /// </summary>
        public static string WRN_CapturedPrimaryConstructorParameterInFieldInitializer {
            get {
                return ResourceManager.GetString("WRN_CapturedPrimaryConstructorParameterInFieldInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is captured into the state of the enclosing type and its value is also used to initialize a field, property, or event..
        /// </summary>
        public static string WRN_CapturedPrimaryConstructorParameterInFieldInitializer_Title {
            get {
                return ResourceManager.GetString("WRN_CapturedPrimaryConstructorParameterInFieldInitializer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is captured into the state of the enclosing type and its value is also passed to the base constructor. The value might be captured by the base class as well..
        /// </summary>
        public static string WRN_CapturedPrimaryConstructorParameterPassedToBase {
            get {
                return ResourceManager.GetString("WRN_CapturedPrimaryConstructorParameterPassedToBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is captured into the state of the enclosing type and its value is also passed to the base constructor. The value might be captured by the base class as well..
        /// </summary>
        public static string WRN_CapturedPrimaryConstructorParameterPassedToBase_Title {
            get {
                return ResourceManager.GetString("WRN_CapturedPrimaryConstructorParameterPassedToBase_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;_&apos; refers to the constant, not the discard pattern. Use &apos;var _&apos; to discard the value, or &apos;@_&apos; to refer to a constant by that name..
        /// </summary>
        public static string WRN_CaseConstantNamedUnderscore {
            get {
                return ResourceManager.GetString("WRN_CaseConstantNamedUnderscore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;_&apos; for a case constant..
        /// </summary>
        public static string WRN_CaseConstantNamedUnderscore_Title {
            get {
                return ResourceManager.GetString("WRN_CaseConstantNamedUnderscore_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Literal value for define has an Ansi character between 128 and 255 which depends on the current codepage. Consider to use a Unicode literal inside the string instead..
        /// </summary>
        public static string WRN_ChrInDefine {
            get {
                return ResourceManager.GetString("WRN_ChrInDefine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arrays as attribute arguments is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_ArrayArgumentToAttribute {
            get {
                return ResourceManager.GetString("WRN_CLS_ArrayArgumentToAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Arrays as attribute arguments is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_ArrayArgumentToAttribute_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_ArrayArgumentToAttribute_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute.
        /// </summary>
        public static string WRN_CLS_AssemblyNotCLS {
            get {
                return ResourceManager.GetString("WRN_CLS_AssemblyNotCLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or member cannot be marked as CLS-compliant because the assembly does not have a CLSCompliant attribute.
        /// </summary>
        public static string WRN_CLS_AssemblyNotCLS_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_AssemblyNotCLS_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute.
        /// </summary>
        public static string WRN_CLS_AssemblyNotCLS2 {
            get {
                return ResourceManager.GetString("WRN_CLS_AssemblyNotCLS2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or member does not need a CLSCompliant attribute because the assembly does not have a CLSCompliant attribute.
        /// </summary>
        public static string WRN_CLS_AssemblyNotCLS2_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_AssemblyNotCLS2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument type &apos;{0}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadArgType {
            get {
                return ResourceManager.GetString("WRN_CLS_BadArgType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument type is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadArgType_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadArgType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has no accessible constructors which use only CLS-compliant types.
        /// </summary>
        public static string WRN_CLS_BadAttributeType {
            get {
                return ResourceManager.GetString("WRN_CLS_BadAttributeType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type has no accessible constructors which use only CLS-compliant types.
        /// </summary>
        public static string WRN_CLS_BadAttributeType_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadAttributeType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: base type &apos;{1}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadBase {
            get {
                return ResourceManager.GetString("WRN_CLS_BadBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A base type was marked as not having to be compliant with the Common Language Specification (CLS) in an assembly that was marked as being CLS compliant. Either remove the attribute that specifies the assembly is CLS compliant or remove the attribute that indicates the type is not CLS compliant..
        /// </summary>
        public static string WRN_CLS_BadBase_Description {
            get {
                return ResourceManager.GetString("WRN_CLS_BadBase_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base type is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadBase_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadBase_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type of &apos;{0}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadFieldPropType {
            get {
                return ResourceManager.GetString("WRN_CLS_BadFieldPropType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A public, protected, or protected internal variable must be of a type that is compliant with the Common Language Specification (CLS)..
        /// </summary>
        public static string WRN_CLS_BadFieldPropType_Description {
            get {
                return ResourceManager.GetString("WRN_CLS_BadFieldPropType_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadFieldPropType_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadFieldPropType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier &apos;{0}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadIdentifier {
            get {
                return ResourceManager.GetString("WRN_CLS_BadIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadIdentifier_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadIdentifier_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier &apos;{0}&apos; differing only in case is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadIdentifierCase {
            get {
                return ResourceManager.GetString("WRN_CLS_BadIdentifierCase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Identifier differing only in case is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadIdentifierCase_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadIdentifierCase_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not CLS-compliant because base interface &apos;{1}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadInterface {
            get {
                return ResourceManager.GetString("WRN_CLS_BadInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is not CLS-compliant because base interface is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadInterface_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadInterface_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: CLS-compliant interfaces must have only CLS-compliant members.
        /// </summary>
        public static string WRN_CLS_BadInterfaceMember {
            get {
                return ResourceManager.GetString("WRN_CLS_BadInterfaceMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLS-compliant interfaces must have only CLS-compliant members.
        /// </summary>
        public static string WRN_CLS_BadInterfaceMember_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadInterfaceMember_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return type of &apos;{0}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadReturnType {
            get {
                return ResourceManager.GetString("WRN_CLS_BadReturnType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return type is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadReturnType_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadReturnType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint type &apos;{0}&apos; is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadTypeVar {
            get {
                return ResourceManager.GetString("WRN_CLS_BadTypeVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constraint type is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_BadTypeVar_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_BadTypeVar_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type &apos;{1}&apos;.
        /// </summary>
        public static string WRN_CLS_IllegalTrueInFalse {
            get {
                return ResourceManager.GetString("WRN_CLS_IllegalTrueInFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type cannot be marked as CLS-compliant because it is a member of non-CLS-compliant type.
        /// </summary>
        public static string WRN_CLS_IllegalTrueInFalse_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_IllegalTrueInFalse_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to parameters. Try putting it on the method instead..
        /// </summary>
        public static string WRN_CLS_MeaninglessOnParam {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnParam", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to parameters.
        /// </summary>
        public static string WRN_CLS_MeaninglessOnParam_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnParam_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLS compliance checking will not be performed on &apos;{0}&apos; because it is not visible from outside this assembly.
        /// </summary>
        public static string WRN_CLS_MeaninglessOnPrivateType {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnPrivateType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLS compliance checking will not be performed because it is not visible from outside this assembly.
        /// </summary>
        public static string WRN_CLS_MeaninglessOnPrivateType_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnPrivateType_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to return types. Try putting it on the method instead..
        /// </summary>
        public static string WRN_CLS_MeaninglessOnReturn {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLSCompliant attribute has no meaning when applied to return types.
        /// </summary>
        public static string WRN_CLS_MeaninglessOnReturn_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_MeaninglessOnReturn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added modules must be marked with the CLSCompliant attribute to match the assembly.
        /// </summary>
        public static string WRN_CLS_ModuleMissingCLS {
            get {
                return ResourceManager.GetString("WRN_CLS_ModuleMissingCLS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added modules must be marked with the CLSCompliant attribute to match the assembly.
        /// </summary>
        public static string WRN_CLS_ModuleMissingCLS_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_ModuleMissingCLS_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: only CLS-compliant members can be abstract.
        /// </summary>
        public static string WRN_CLS_NoAbstractMembers {
            get {
                return ResourceManager.GetString("WRN_CLS_NoAbstractMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only CLS-compliant members can be abstract.
        /// </summary>
        public static string WRN_CLS_NoAbstractMembers_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_NoAbstractMembers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking.
        /// </summary>
        public static string WRN_CLS_NotOnModules {
            get {
                return ResourceManager.GetString("WRN_CLS_NotOnModules", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must specify the CLSCompliant attribute on the assembly, not the module, to enable CLS compliance checking.
        /// </summary>
        public static string WRN_CLS_NotOnModules_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_NotOnModules_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly.
        /// </summary>
        public static string WRN_CLS_NotOnModules2 {
            get {
                return ResourceManager.GetString("WRN_CLS_NotOnModules2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot specify the CLSCompliant attribute on a module that differs from the CLSCompliant attribute on the assembly.
        /// </summary>
        public static string WRN_CLS_NotOnModules2_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_NotOnModules2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with variable arguments are not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_NoVarArgs {
            get {
                return ResourceManager.GetString("WRN_CLS_NoVarArgs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Methods with variable arguments are not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_NoVarArgs_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_NoVarArgs_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded method &apos;{0}&apos; differing only in ref or out, or in array rank, is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_OverloadRefOut {
            get {
                return ResourceManager.GetString("WRN_CLS_OverloadRefOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded method differing only in ref or out, or in array rank, is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_OverloadRefOut_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_OverloadRefOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded method &apos;{0}&apos; differing only by unnamed array types is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_OverloadUnnamed {
            get {
                return ResourceManager.GetString("WRN_CLS_OverloadUnnamed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurs if you have an overloaded method that takes a jagged array and the only difference between the method signatures is the element type of the array. To avoid this error, consider using a rectangular array rather than a jagged array; use an additional parameter to disambiguate the function call; rename one or more of the overloaded methods; or, if CLS Compliance is not needed, remove the CLSCompliantAttribute attribute..
        /// </summary>
        public static string WRN_CLS_OverloadUnnamed_Description {
            get {
                return ResourceManager.GetString("WRN_CLS_OverloadUnnamed_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overloaded method differing only by unnamed array types is not CLS-compliant.
        /// </summary>
        public static string WRN_CLS_OverloadUnnamed_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_OverloadUnnamed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLS-compliant field &apos;{0}&apos; cannot be volatile.
        /// </summary>
        public static string WRN_CLS_VolatileField {
            get {
                return ResourceManager.GetString("WRN_CLS_VolatileField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLS-compliant field cannot be volatile.
        /// </summary>
        public static string WRN_CLS_VolatileField_Title {
            get {
                return ResourceManager.GetString("WRN_CLS_VolatileField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option &apos;{0}&apos; overrides attribute &apos;{1}&apos; given in a source file or added module.
        /// </summary>
        public static string WRN_CmdOptionConflictsSource {
            get {
                return ResourceManager.GetString("WRN_CmdOptionConflictsSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning occurs if the assembly attributes AssemblyKeyFileAttribute or AssemblyKeyNameAttribute found in source conflict with the /keyfile or /keycontainer command line option or key file name or key container specified in the Project Properties..
        /// </summary>
        public static string WRN_CmdOptionConflictsSource_Description {
            get {
                return ResourceManager.GetString("WRN_CmdOptionConflictsSource_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option overrides attribute given in a source file or added module.
        /// </summary>
        public static string WRN_CmdOptionConflictsSource_Title {
            get {
                return ResourceManager.GetString("WRN_CmdOptionConflictsSource_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparing with null of type &apos;{0}&apos; always produces &apos;false&apos;.
        /// </summary>
        public static string WRN_CmpAlwaysFalse {
            get {
                return ResourceManager.GetString("WRN_CmpAlwaysFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparing with null of struct type always produces &apos;false&apos;.
        /// </summary>
        public static string WRN_CmpAlwaysFalse_Title {
            get {
                return ResourceManager.GetString("WRN_CmpAlwaysFalse_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; interface marked with &apos;CoClassAttribute&apos; not marked with &apos;ComImportAttribute&apos;.
        /// </summary>
        public static string WRN_CoClassWithoutComImport {
            get {
                return ResourceManager.GetString("WRN_CoClassWithoutComImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface marked with &apos;CoClassAttribute&apos; not marked with &apos;ComImportAttribute&apos;.
        /// </summary>
        public static string WRN_CoClassWithoutComImport_Title {
            get {
                return ResourceManager.GetString("WRN_CoClassWithoutComImport_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression of type &apos;{0}&apos; may incur unexpected heap allocations. Consider explicitly creating an array, then converting to &apos;{0}&apos; to make the allocation explicit..
        /// </summary>
        public static string WRN_CollectionExpressionRefStructMayAllocate {
            get {
                return ResourceManager.GetString("WRN_CollectionExpressionRefStructMayAllocate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression may incur unexpected heap allocations. Consider explicitly creating an array, then converting to the final type to make the allocation explicit..
        /// </summary>
        public static string WRN_CollectionExpressionRefStructMayAllocate_Title {
            get {
                return ResourceManager.GetString("WRN_CollectionExpressionRefStructMayAllocate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression of type &apos;{0}&apos; may incur unexpected heap allocations due to the use of &apos;..&apos; spreads. Consider explicitly creating an array, then converting to &apos;{0}&apos; to make the allocation explicit..
        /// </summary>
        public static string WRN_CollectionExpressionRefStructSpreadMayAllocate {
            get {
                return ResourceManager.GetString("WRN_CollectionExpressionRefStructSpreadMayAllocate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection expression may incur unexpected heap allocations due to use of &apos;..&apos; spreads. Consider explicitly creating an array, then converting to the final type to make the allocation explicit..
        /// </summary>
        public static string WRN_CollectionExpressionRefStructSpreadMayAllocate_Title {
            get {
                return ResourceManager.GetString("WRN_CollectionExpressionRefStructSpreadMayAllocate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison made to same variable; did you mean to compare something else?.
        /// </summary>
        public static string WRN_ComparisonToSelf {
            get {
                return ResourceManager.GetString("WRN_ComparisonToSelf", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison made to same variable.
        /// </summary>
        public static string WRN_ComparisonToSelf_Title {
            get {
                return ResourceManager.GetString("WRN_ComparisonToSelf_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compiler generated an automatic conversion to PSZ. This may create a memory leak in your application. Please use String2Psz() to let the compiler manage the lifetime of the PSZ or use StringAlloc() and manage the lifetime of the PSZ yourself..
        /// </summary>
        public static string WRN_CompilerGeneratedPSZConversionGeneratesMemoryleak {
            get {
                return ResourceManager.GetString("WRN_CompilerGeneratedPSZConversionGeneratesMemoryleak", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Compiler Option {0} ({1}) is recognized by the compiler but not yet implemented.
        /// </summary>
        public static string WRN_CompilerOptionNotImplementedYet {
            get {
                return ResourceManager.GetString("WRN_CompilerOptionNotImplementedYet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation may overflow &apos;{0}&apos; at runtime (use &apos;unchecked&apos; syntax to override).
        /// </summary>
        public static string WRN_CompileTimeCheckedOverflow {
            get {
                return ResourceManager.GetString("WRN_CompileTimeCheckedOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation may overflow at runtime (use &apos;unchecked&apos; syntax to override).
        /// </summary>
        public static string WRN_CompileTimeCheckedOverflow_Title {
            get {
                return ResourceManager.GetString("WRN_CompileTimeCheckedOverflow_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Different checksum values given for &apos;{0}&apos;.
        /// </summary>
        public static string WRN_ConflictingChecksum {
            get {
                return ResourceManager.GetString("WRN_ConflictingChecksum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Different #pragma checksum values given.
        /// </summary>
        public static string WRN_ConflictingChecksum_Title {
            get {
                return ResourceManager.GetString("WRN_ConflictingChecksum_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly &apos;{0}&apos; targets a different processor..
        /// </summary>
        public static string WRN_ConflictingMachineAssembly {
            get {
                return ResourceManager.GetString("WRN_ConflictingMachineAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly targets a different processor.
        /// </summary>
        public static string WRN_ConflictingMachineAssembly_Title {
            get {
                return ResourceManager.GetString("WRN_ConflictingMachineAssembly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constant value &apos;{0}&apos; may overflow &apos;{1}&apos; at runtime (use &apos;unchecked&apos; syntax to override).
        /// </summary>
        public static string WRN_ConstOutOfRangeChecked {
            get {
                return ResourceManager.GetString("WRN_ConstOutOfRangeChecked", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constant value may overflow at runtime (use &apos;unchecked&apos; syntax to override).
        /// </summary>
        public static string WRN_ConstOutOfRangeChecked_Title {
            get {
                return ResourceManager.GetString("WRN_ConstOutOfRangeChecked_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Conversion from &apos;{0}&apos; to &apos;{1}&apos; may lead to loss of data or overflow errors.
        /// </summary>
        public static string WRN_Conversion {
            get {
                return ResourceManager.GetString("WRN_Conversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A conversion from NIL to &apos;{0}&apos; is not supported and may have unwanted results..
        /// </summary>
        public static string WRN_ConversionFromNilNotSupported {
            get {
                return ResourceManager.GetString("WRN_ConversionFromNilNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Narrowing conversion from &apos;{0}&apos; to &apos;{1}&apos; may lead to loss of data or overflow errors.
        /// </summary>
        public static string WRN_ConversionMayLeadToLossOfData {
            get {
                return ResourceManager.GetString("WRN_ConversionMayLeadToLossOfData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;System.Threading.Lock&apos; converted to a different type will use likely unintended monitor-based locking in &apos;lock&apos; statement..
        /// </summary>
        public static string WRN_ConvertingLock {
            get {
                return ResourceManager.GetString("WRN_ConvertingLock", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A value of type &apos;System.Threading.Lock&apos; converted to a different type will use likely unintended monitor-based locking in &apos;lock&apos; statement..
        /// </summary>
        public static string WRN_ConvertingLock_Title {
            get {
                return ResourceManager.GetString("WRN_ConvertingLock_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Converting null literal or possible null value to non-nullable type..
        /// </summary>
        public static string WRN_ConvertingNullableToNonNullable {
            get {
                return ResourceManager.GetString("WRN_ConvertingNullableToNonNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Converting null literal or possible null value to non-nullable type..
        /// </summary>
        public static string WRN_ConvertingNullableToNonNullable_Title {
            get {
                return ResourceManager.GetString("WRN_ConvertingNullableToNonNullable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The fully qualified name for &apos;{0}&apos; is too long for debug information. Compile without &apos;/debug&apos; option..
        /// </summary>
        public static string WRN_DebugFullNameTooLong {
            get {
                return ResourceManager.GetString("WRN_DebugFullNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fully qualified name is too long for debug information.
        /// </summary>
        public static string WRN_DebugFullNameTooLong_Title {
            get {
                return ResourceManager.GetString("WRN_DebugFullNameTooLong_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default value specified for parameter &apos;{0}&apos; will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_DefaultValueForUnconsumedLocation {
            get {
                return ResourceManager.GetString("WRN_DefaultValueForUnconsumedLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default value specified will have no effect because it applies to a member that is used in contexts that do not allow optional arguments.
        /// </summary>
        public static string WRN_DefaultValueForUnconsumedLocation_Title {
            get {
                return ResourceManager.GetString("WRN_DefaultValueForUnconsumedLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid name for a preprocessing symbol; &apos;{0}&apos; is not a valid identifier.
        /// </summary>
        public static string WRN_DefineIdentifierRequired {
            get {
                return ResourceManager.GetString("WRN_DefineIdentifierRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid name for a preprocessing symbol; not a valid identifier.
        /// </summary>
        public static string WRN_DefineIdentifierRequired_Title {
            get {
                return ResourceManager.GetString("WRN_DefineIdentifierRequired_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay signing was specified and requires a public key, but no public key was specified.
        /// </summary>
        public static string WRN_DelaySignButNoKey {
            get {
                return ResourceManager.GetString("WRN_DelaySignButNoKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delay signing was specified and requires a public key, but no public key was specified.
        /// </summary>
        public static string WRN_DelaySignButNoKey_Title {
            get {
                return ResourceManager.GetString("WRN_DelaySignButNoKey_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method &apos;{0}&apos; for the collection initializer element is obsolete..
        /// </summary>
        public static string WRN_DeprecatedCollectionInitAdd {
            get {
                return ResourceManager.GetString("WRN_DeprecatedCollectionInitAdd", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method for the collection initializer element is obsolete.
        /// </summary>
        public static string WRN_DeprecatedCollectionInitAdd_Title {
            get {
                return ResourceManager.GetString("WRN_DeprecatedCollectionInitAdd_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method &apos;{0}&apos; for the collection initializer element is obsolete. {1}.
        /// </summary>
        public static string WRN_DeprecatedCollectionInitAddStr {
            get {
                return ResourceManager.GetString("WRN_DeprecatedCollectionInitAddStr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The best overloaded Add method for the collection initializer element is obsolete.
        /// </summary>
        public static string WRN_DeprecatedCollectionInitAddStr_Title {
            get {
                return ResourceManager.GetString("WRN_DeprecatedCollectionInitAddStr_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is obsolete.
        /// </summary>
        public static string WRN_DeprecatedSymbol {
            get {
                return ResourceManager.GetString("WRN_DeprecatedSymbol", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or member is obsolete.
        /// </summary>
        public static string WRN_DeprecatedSymbol_Title {
            get {
                return ResourceManager.GetString("WRN_DeprecatedSymbol_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is obsolete: &apos;{1}&apos;.
        /// </summary>
        public static string WRN_DeprecatedSymbolStr {
            get {
                return ResourceManager.GetString("WRN_DeprecatedSymbolStr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type or member is obsolete.
        /// </summary>
        public static string WRN_DeprecatedSymbolStr_Title {
            get {
                return ResourceManager.GetString("WRN_DeprecatedSymbolStr_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].
        /// </summary>
        public static string WRN_DisallowNullAttributeForbidsMaybeNullAssignment {
            get {
                return ResourceManager.GetString("WRN_DisallowNullAttributeForbidsMaybeNullAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A possible null value may not be used for a type marked with [NotNull] or [DisallowNull].
        /// </summary>
        public static string WRN_DisallowNullAttributeForbidsMaybeNullAssignment_Title {
            get {
                return ResourceManager.GetString("WRN_DisallowNullAttributeForbidsMaybeNullAssignment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; lacks `[DoesNotReturn]` annotation to match implemented or overridden member..
        /// </summary>
        public static string WRN_DoesNotReturnMismatch {
            get {
                return ResourceManager.GetString("WRN_DoesNotReturnMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method lacks `[DoesNotReturn]` annotation to match implemented or overridden member..
        /// </summary>
        public static string WRN_DoesNotReturnMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_DoesNotReturnMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison of function pointers might yield an unexpected result, since pointers to the same function may be distinct..
        /// </summary>
        public static string WRN_DoNotCompareFunctionPointers {
            get {
                return ResourceManager.GetString("WRN_DoNotCompareFunctionPointers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not compare function pointer values.
        /// </summary>
        public static string WRN_DoNotCompareFunctionPointers_Title {
            get {
                return ResourceManager.GetString("WRN_DoNotCompareFunctionPointers_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression will always cause a System.NullReferenceException because the default value of &apos;{0}&apos; is null.
        /// </summary>
        public static string WRN_DotOnDefault {
            get {
                return ResourceManager.GetString("WRN_DotOnDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expression will always cause a System.NullReferenceException because the type&apos;s default value is null.
        /// </summary>
        public static string WRN_DotOnDefault_Title {
            get {
                return ResourceManager.GetString("WRN_DotOnDefault_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer reference &apos;{0}&apos; specified multiple times.
        /// </summary>
        public static string WRN_DuplicateAnalyzerReference {
            get {
                return ResourceManager.GetString("WRN_DuplicateAnalyzerReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Analyzer reference specified multiple times.
        /// </summary>
        public static string WRN_DuplicateAnalyzerReference_Title {
            get {
                return ResourceManager.GetString("WRN_DuplicateAnalyzerReference_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate define with different value detected &apos;{0}&apos;, {1} &lt;=&gt; {2}.
        /// </summary>
        public static string WRN_DuplicateDefineDiff {
            get {
                return ResourceManager.GetString("WRN_DuplicateDefineDiff", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate define detected &apos;{0}&apos;.
        /// </summary>
        public static string WRN_DuplicateDefineSame {
            get {
                return ResourceManager.GetString("WRN_DuplicateDefineSame", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is already listed in the interface list on type &apos;{1}&apos; with different nullability of reference types..
        /// </summary>
        public static string WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList {
            get {
                return ResourceManager.GetString("WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Interface is already listed in the interface list with different nullability of reference types..
        /// </summary>
        public static string WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList_Title {
            get {
                return ResourceManager.GetString("WRN_DuplicateInterfaceWithNullabilityMismatchInBaseList_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a duplicate param tag for &apos;{0}&apos;.
        /// </summary>
        public static string WRN_DuplicateParamTag {
            get {
                return ResourceManager.GetString("WRN_DuplicateParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a duplicate param tag.
        /// </summary>
        public static string WRN_DuplicateParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_DuplicateParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a duplicate typeparam tag for &apos;{0}&apos;.
        /// </summary>
        public static string WRN_DuplicateTypeParamTag {
            get {
                return ResourceManager.GetString("WRN_DuplicateTypeParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a duplicate typeparam tag.
        /// </summary>
        public static string WRN_DuplicateTypeParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_DuplicateTypeParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The using directive for &apos;{0}&apos; appeared previously in this namespace.
        /// </summary>
        public static string WRN_DuplicateUsing {
            get {
                return ResourceManager.GetString("WRN_DuplicateUsing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using directive appeared previously in this namespace.
        /// </summary>
        public static string WRN_DuplicateUsing_Title {
            get {
                return ResourceManager.GetString("WRN_DuplicateUsing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dynamically dispatched call to method &apos;{0}&apos; may fail at runtime because one or more applicable overloads are conditional methods..
        /// </summary>
        public static string WRN_DynamicDispatchToConditionalMethod {
            get {
                return ResourceManager.GetString("WRN_DynamicDispatchToConditionalMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dynamically dispatched call may fail at runtime because one or more applicable overloads are conditional methods.
        /// </summary>
        public static string WRN_DynamicDispatchToConditionalMethod_Title {
            get {
                return ResourceManager.GetString("WRN_DynamicDispatchToConditionalMethod_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty {0}. Insert a NOP statement to suppress the warning, if this was intentional..
        /// </summary>
        public static string WRN_EmptyStatement {
            get {
                return ResourceManager.GetString("WRN_EmptyStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty switch block.
        /// </summary>
        public static string WRN_EmptySwitch {
            get {
                return ResourceManager.GetString("WRN_EmptySwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Empty switch block.
        /// </summary>
        public static string WRN_EmptySwitch_Title {
            get {
                return ResourceManager.GetString("WRN_EmptySwitch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single-line comment or end-of-line expected.
        /// </summary>
        public static string WRN_EndOfPPLineExpected {
            get {
                return ResourceManager.GetString("WRN_EndOfPPLineExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Single-line comment or end-of-line expected after #pragma directive.
        /// </summary>
        public static string WRN_EndOfPPLineExpected_Title {
            get {
                return ResourceManager.GetString("WRN_EndOfPPLineExpected_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; defines operator == or operator != but does not override Object.Equals(object o).
        /// </summary>
        public static string WRN_EqualityOpWithoutEquals {
            get {
                return ResourceManager.GetString("WRN_EqualityOpWithoutEquals", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type defines operator == or operator != but does not override Object.Equals(object o).
        /// </summary>
        public static string WRN_EqualityOpWithoutEquals_Title {
            get {
                return ResourceManager.GetString("WRN_EqualityOpWithoutEquals_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; defines operator == or operator != but does not override Object.GetHashCode().
        /// </summary>
        public static string WRN_EqualityOpWithoutGetHashCode {
            get {
                return ResourceManager.GetString("WRN_EqualityOpWithoutGetHashCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type defines operator == or operator != but does not override Object.GetHashCode().
        /// </summary>
        public static string WRN_EqualityOpWithoutGetHashCode_Title {
            get {
                return ResourceManager.GetString("WRN_EqualityOpWithoutGetHashCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; overrides Object.Equals(object o) but does not override Object.GetHashCode().
        /// </summary>
        public static string WRN_EqualsWithoutGetHashCode {
            get {
                return ResourceManager.GetString("WRN_EqualsWithoutGetHashCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type overrides Object.Equals(object o) but does not override Object.GetHashCode().
        /// </summary>
        public static string WRN_EqualsWithoutGetHashCode_Title {
            get {
                return ResourceManager.GetString("WRN_EqualsWithoutGetHashCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}. See also error CS{1}..
        /// </summary>
        public static string WRN_ErrorOverride {
            get {
                return ResourceManager.GetString("WRN_ErrorOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compiler emits this warning when it overrides an error with a warning. For information about the problem, search for the error code mentioned..
        /// </summary>
        public static string WRN_ErrorOverride_Description {
            get {
                return ResourceManager.GetString("WRN_ErrorOverride_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Warning is overriding an error.
        /// </summary>
        public static string WRN_ErrorOverride_Title {
            get {
                return ResourceManager.GetString("WRN_ErrorOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of result of &apos;{0}&apos; in this context may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeCall {
            get {
                return ResourceManager.GetString("WRN_EscapeCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of result in this context may expose variables referenced by parameter outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeCall_Title {
            get {
                return ResourceManager.GetString("WRN_EscapeCall_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of member of result of &apos;{0}&apos; in this context may expose variables referenced by parameter &apos;{1}&apos; outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeCall2 {
            get {
                return ResourceManager.GetString("WRN_EscapeCall2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of member of result in this context may expose variables referenced by parameter outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeCall2_Title {
            get {
                return ResourceManager.GetString("WRN_EscapeCall2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A result of a stackalloc expression of type &apos;{0}&apos; in this context may be exposed outside of the containing method.
        /// </summary>
        public static string WRN_EscapeStackAlloc {
            get {
                return ResourceManager.GetString("WRN_EscapeStackAlloc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A result of a stackalloc expression of this type in this context may be exposed outside of the containing method.
        /// </summary>
        public static string WRN_EscapeStackAlloc_Title {
            get {
                return ResourceManager.GetString("WRN_EscapeStackAlloc_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of variable &apos;{0}&apos; in this context may expose referenced variables outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeVariable {
            get {
                return ResourceManager.GetString("WRN_EscapeVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of variable in this context may expose referenced variables outside of their declaration scope.
        /// </summary>
        public static string WRN_EscapeVariable_Title {
            get {
                return ResourceManager.GetString("WRN_EscapeVariable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed..
        /// </summary>
        public static string WRN_Experimental {
            get {
                return ResourceManager.GetString("WRN_Experimental", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is for evaluation purposes only and is subject to change or removal in future updates. Suppress this diagnostic to proceed..
        /// </summary>
        public static string WRN_Experimental_Title {
            get {
                return ResourceManager.GetString("WRN_Experimental_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit interface implementation &apos;{0}&apos; matches more than one interface member. Which interface member is actually chosen is implementation-dependent. Consider using a non-explicit implementation instead..
        /// </summary>
        public static string WRN_ExplicitImplCollision {
            get {
                return ResourceManager.GetString("WRN_ExplicitImplCollision", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Explicit interface implementation matches more than one interface member.
        /// </summary>
        public static string WRN_ExplicitImplCollision_Title {
            get {
                return ResourceManager.GetString("WRN_ExplicitImplCollision_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor &apos;{0}&apos; is marked external.
        /// </summary>
        public static string WRN_ExternCtorNoImplementation {
            get {
                return ResourceManager.GetString("WRN_ExternCtorNoImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Constructor is marked external.
        /// </summary>
        public static string WRN_ExternCtorNoImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_ExternCtorNoImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method, operator, or accessor &apos;{0}&apos; is marked external and has no attributes on it. Consider adding a DllImport attribute to specify the external implementation..
        /// </summary>
        public static string WRN_ExternMethodNoImplementation {
            get {
                return ResourceManager.GetString("WRN_ExternMethodNoImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method, operator, or accessor is marked external and has no attributes on it.
        /// </summary>
        public static string WRN_ExternMethodNoImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_ExternMethodNoImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to include XML fragment &apos;{1}&apos; of file &apos;{0}&apos; -- {2}.
        /// </summary>
        public static string WRN_FailedInclude {
            get {
                return ResourceManager.GetString("WRN_FailedInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to include XML fragment.
        /// </summary>
        public static string WRN_FailedInclude_Title {
            get {
                return ResourceManager.GetString("WRN_FailedInclude_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file &apos;{0}&apos; specified multiple times.
        /// </summary>
        public static string WRN_FileAlreadyIncluded {
            get {
                return ResourceManager.GetString("WRN_FileAlreadyIncluded", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file specified multiple times.
        /// </summary>
        public static string WRN_FileAlreadyIncluded_Title {
            get {
                return ResourceManager.GetString("WRN_FileAlreadyIncluded_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid filename specified for preprocessor directive. Filename is too long or not a valid filename..
        /// </summary>
        public static string WRN_FileNameTooLong {
            get {
                return ResourceManager.GetString("WRN_FileNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid filename specified for preprocessor directive.
        /// </summary>
        public static string WRN_FileNameTooLong_Title {
            get {
                return ResourceManager.GetString("WRN_FileNameTooLong_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to FIELD or VARIABLE &apos;{0}&apos; has already been declared..
        /// </summary>
        public static string WRN_FileWideMemVarDuplicate {
            get {
                return ResourceManager.GetString("WRN_FileWideMemVarDuplicate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File Wide Memory Variable found with the same name &apos;{0}&apos;. You must use the MEMVAR or M prefix to access that variable..
        /// </summary>
        public static string WRN_FileWideMemVarName {
            get {
                return ResourceManager.GetString("WRN_FileWideMemVarName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;false&apos;, consider removing the catch clause.
        /// </summary>
        public static string WRN_FilterIsConstantFalse {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;false&apos;.
        /// </summary>
        public static string WRN_FilterIsConstantFalse_Title {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantFalse_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;false&apos;, consider removing the try-catch block.
        /// </summary>
        public static string WRN_FilterIsConstantFalseRedundantTryCatch {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantFalseRedundantTryCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;false&apos;. .
        /// </summary>
        public static string WRN_FilterIsConstantFalseRedundantTryCatch_Title {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantFalseRedundantTryCatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;true&apos;, consider removing the filter.
        /// </summary>
        public static string WRN_FilterIsConstantTrue {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Filter expression is a constant &apos;true&apos;.
        /// </summary>
        public static string WRN_FilterIsConstantTrue_Title {
            get {
                return ResourceManager.GetString("WRN_FilterIsConstantTrue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introducing a &apos;Finalize&apos; method can interfere with destructor invocation. Did you intend to declare a destructor?.
        /// </summary>
        public static string WRN_FinalizeMethod {
            get {
                return ResourceManager.GetString("WRN_FinalizeMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning occurs when you create a class with a method whose signature is public virtual void Finalize.
        ///
        ///If such a class is used as a base class and if the deriving class defines a destructor, the destructor will override the base class Finalize method, not Finalize..
        /// </summary>
        public static string WRN_FinalizeMethod_Description {
            get {
                return ResourceManager.GetString("WRN_FinalizeMethod_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Introducing a &apos;Finalize&apos; method can interfere with destructor invocation.
        /// </summary>
        public static string WRN_FinalizeMethod_Title {
            get {
                return ResourceManager.GetString("WRN_FinalizeMethod_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;{0}&apos; clause is not supported and ignored..
        /// </summary>
        public static string WRN_FoxUnsupportedClause {
            get {
                return ResourceManager.GetString("WRN_FoxUnsupportedClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Symbol &apos;{0}&apos; is ambiguous. Could be &apos;{1}&apos; or &apos;{2}&apos;. Using the function because in X# functions take precedence over methods. To call the method use the fully qualified name (for static methods) or prefix the call with &apos;SELF:&apos; for instance methods..
        /// </summary>
        public static string WRN_FunctionsTakePrecedenceOverMethods {
            get {
                return ResourceManager.GetString("WRN_FunctionsTakePrecedenceOverMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A get accessor is automatically generated for a set accessor without body..
        /// </summary>
        public static string WRN_GeneratingGetAccessor {
            get {
                return ResourceManager.GetString("WRN_GeneratingGetAccessor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generator &apos;{0}&apos; failed to generate source. It will not contribute to the output and compilation errors may occur as a result. Exception was of type &apos;{1}&apos; with message &apos;{2}&apos;.
        ///{3}.
        /// </summary>
        public static string WRN_GeneratorFailedDuringGeneration {
            get {
                return ResourceManager.GetString("WRN_GeneratorFailedDuringGeneration", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generator failed to generate source..
        /// </summary>
        public static string WRN_GeneratorFailedDuringGeneration_Title {
            get {
                return ResourceManager.GetString("WRN_GeneratorFailedDuringGeneration_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generator &apos;{0}&apos; failed to initialize. It will not contribute to the output and compilation errors may occur as a result. Exception was of type &apos;{1}&apos; with message &apos;{2}&apos;.
        ///{3}.
        /// </summary>
        public static string WRN_GeneratorFailedDuringInitialization {
            get {
                return ResourceManager.GetString("WRN_GeneratorFailedDuringInitialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generator failed to initialize..
        /// </summary>
        public static string WRN_GeneratorFailedDuringInitialization_Title {
            get {
                return ResourceManager.GetString("WRN_GeneratorFailedDuringInitialization_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A get or set accessor must have a body, an auto property will be generated.
        /// </summary>
        public static string WRN_GetSetMustHaveBody {
            get {
                return ResourceManager.GetString("WRN_GetSetMustHaveBody", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression always matches the provided constant..
        /// </summary>
        public static string WRN_GivenExpressionAlwaysMatchesConstant {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionAlwaysMatchesConstant", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression always matches the provided constant..
        /// </summary>
        public static string WRN_GivenExpressionAlwaysMatchesConstant_Title {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionAlwaysMatchesConstant_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression always matches the provided pattern..
        /// </summary>
        public static string WRN_GivenExpressionAlwaysMatchesPattern {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionAlwaysMatchesPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression always matches the provided pattern..
        /// </summary>
        public static string WRN_GivenExpressionAlwaysMatchesPattern_Title {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionAlwaysMatchesPattern_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression never matches the provided pattern..
        /// </summary>
        public static string WRN_GivenExpressionNeverMatchesPattern {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionNeverMatchesPattern", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression never matches the provided pattern..
        /// </summary>
        public static string WRN_GivenExpressionNeverMatchesPattern_Title {
            get {
                return ResourceManager.GetString("WRN_GivenExpressionNeverMatchesPattern_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defining an alias named &apos;global&apos; is ill-advised since &apos;global::&apos; always references the global namespace and not an alias.
        /// </summary>
        public static string WRN_GlobalAliasDefn {
            get {
                return ResourceManager.GetString("WRN_GlobalAliasDefn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Defining an alias named &apos;global&apos; is ill-advised.
        /// </summary>
        public static string WRN_GlobalAliasDefn_Title {
            get {
                return ResourceManager.GetString("WRN_GlobalAliasDefn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;goto case&apos; value is not implicitly convertible to type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_GotoCaseShouldConvert {
            get {
                return ResourceManager.GetString("WRN_GotoCaseShouldConvert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;goto case&apos; value is not implicitly convertible to the switch type.
        /// </summary>
        public static string WRN_GotoCaseShouldConvert_Title {
            get {
                return ResourceManager.GetString("WRN_GotoCaseShouldConvert_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter &apos;{0}&apos; doesn&apos;t match the corresponding parameter &apos;{1}&apos; in hidden member..
        /// </summary>
        public static string WRN_HidingDifferentRefness {
            get {
                return ResourceManager.GetString("WRN_HidingDifferentRefness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter doesn&apos;t match the corresponding parameter in hidden member..
        /// </summary>
        public static string WRN_HidingDifferentRefness_Title {
            get {
                return ResourceManager.GetString("WRN_HidingDifferentRefness_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected identifier or numeric literal..
        /// </summary>
        public static string WRN_IdentifierOrNumericLiteralExpected {
            get {
                return ResourceManager.GetString("WRN_IdentifierOrNumericLiteralExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected identifier or numeric literal.
        /// </summary>
        public static string WRN_IdentifierOrNumericLiteralExpected_Title {
            get {
                return ResourceManager.GetString("WRN_IdentifierOrNumericLiteralExpected_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid #pragma checksum syntax; should be #pragma checksum &quot;filename&quot; &quot;{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}&quot; &quot;XXXX...&quot;.
        /// </summary>
        public static string WRN_IllegalPPChecksum {
            get {
                return ResourceManager.GetString("WRN_IllegalPPChecksum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid #pragma checksum syntax.
        /// </summary>
        public static string WRN_IllegalPPChecksum_Title {
            get {
                return ResourceManager.GetString("WRN_IllegalPPChecksum_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized or unsupported #pragma option value &apos;{0}&apos;.
        /// </summary>
        public static string WRN_IllegalPPOption {
            get {
                return ResourceManager.GetString("WRN_IllegalPPOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;disable&apos; or &apos;restore&apos;.
        /// </summary>
        public static string WRN_IllegalPPWarning {
            get {
                return ResourceManager.GetString("WRN_IllegalPPWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;disable&apos; or &apos;restore&apos; after #pragma warning.
        /// </summary>
        public static string WRN_IllegalPPWarning_Title {
            get {
                return ResourceManager.GetString("WRN_IllegalPPWarning_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized #pragma directive.
        /// </summary>
        public static string WRN_IllegalPragma {
            get {
                return ResourceManager.GetString("WRN_IllegalPragma", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unrecognized #pragma directive.
        /// </summary>
        public static string WRN_IllegalPragma_Title {
            get {
                return ResourceManager.GetString("WRN_IllegalPragma_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The compiler generated an implicit cast to a smaller type from type &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        public static string WRN_ImplicitCast {
            get {
                return ResourceManager.GetString("WRN_ImplicitCast", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call to non-readonly member &apos;{0}&apos; from a &apos;readonly&apos; member results in an implicit copy of &apos;{1}&apos;..
        /// </summary>
        public static string WRN_ImplicitCopyInReadOnlyMember {
            get {
                return ResourceManager.GetString("WRN_ImplicitCopyInReadOnlyMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Call to non-readonly member from a &apos;readonly&apos; member results in an implicit copy..
        /// </summary>
        public static string WRN_ImplicitCopyInReadOnlyMember_Title {
            get {
                return ResourceManager.GetString("WRN_ImplicitCopyInReadOnlyMember_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No explicit constructor chaining; generating implicit call to super constructor..
        /// </summary>
        public static string WRN_ImplicitParentConstructorInitializer {
            get {
                return ResourceManager.GetString("WRN_ImplicitParentConstructorInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment in conditional expression is always constant; did you mean to use == instead of = ?.
        /// </summary>
        public static string WRN_IncorrectBooleanAssg {
            get {
                return ResourceManager.GetString("WRN_IncorrectBooleanAssg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assignment in conditional expression is always constant.
        /// </summary>
        public static string WRN_IncorrectBooleanAssg_Title {
            get {
                return ResourceManager.GetString("WRN_IncorrectBooleanAssg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array conversion operator will not be used for conversion from expression of the declaring type..
        /// </summary>
        public static string WRN_InlineArrayConversionOperatorNotUsed {
            get {
                return ResourceManager.GetString("WRN_InlineArrayConversionOperatorNotUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array conversion operator will not be used for conversion from expression of the declaring type..
        /// </summary>
        public static string WRN_InlineArrayConversionOperatorNotUsed_Title {
            get {
                return ResourceManager.GetString("WRN_InlineArrayConversionOperatorNotUsed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array indexer will not be used for element access expression..
        /// </summary>
        public static string WRN_InlineArrayIndexerNotUsed {
            get {
                return ResourceManager.GetString("WRN_InlineArrayIndexerNotUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array indexer will not be used for element access expression..
        /// </summary>
        public static string WRN_InlineArrayIndexerNotUsed_Title {
            get {
                return ResourceManager.GetString("WRN_InlineArrayIndexerNotUsed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Inline arrays&apos; language feature is not supported for an inline array type that is not valid as a type argument, or has element type that is not valid as a type argument..
        /// </summary>
        public static string WRN_InlineArrayNotSupportedByLanguage {
            get {
                return ResourceManager.GetString("WRN_InlineArrayNotSupportedByLanguage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;Inline arrays&apos; language feature is not supported for an inline array type that is not valid as a type argument, or has element type that is not valid as a type argument..
        /// </summary>
        public static string WRN_InlineArrayNotSupportedByLanguage_Title {
            get {
                return ResourceManager.GetString("WRN_InlineArrayNotSupportedByLanguage_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array &apos;Slice&apos; method will not be used for element access expression..
        /// </summary>
        public static string WRN_InlineArraySliceNotUsed {
            get {
                return ResourceManager.GetString("WRN_InlineArraySliceNotUsed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Inline array &apos;Slice&apos; method will not be used for element access expression..
        /// </summary>
        public static string WRN_InlineArraySliceNotUsed_Title {
            get {
                return ResourceManager.GetString("WRN_InlineArraySliceNotUsed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Intercepting a call to &apos;{0}&apos; with interceptor &apos;{1}&apos;, but the signatures do not match..
        /// </summary>
        public static string WRN_InterceptorSignatureMismatch {
            get {
                return ResourceManager.GetString("WRN_InterceptorSignatureMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Signatures of interceptable and interceptor methods do not match..
        /// </summary>
        public static string WRN_InterceptorSignatureMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_InterceptorSignatureMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InterpolatedStringHandlerArgument has no effect when applied to lambda parameters and will be ignored at the call site..
        /// </summary>
        public static string WRN_InterpolatedStringHandlerArgumentAttributeIgnoredOnLambdaParameters {
            get {
                return ResourceManager.GetString("WRN_InterpolatedStringHandlerArgumentAttributeIgnoredOnLambdaParameters", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to InterpolatedStringHandlerArgument has no effect when applied to lambda parameters and will be ignored at the call site..
        /// </summary>
        public static string WRN_InterpolatedStringHandlerArgumentAttributeIgnoredOnLambdaParameters_Title {
            get {
                return ResourceManager.GetString("WRN_InterpolatedStringHandlerArgumentAttributeIgnoredOnLambdaParameters_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly reference &apos;{0}&apos; is invalid and cannot be resolved.
        /// </summary>
        public static string WRN_InvalidAssemblyName {
            get {
                return ResourceManager.GetString("WRN_InvalidAssemblyName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning indicates that an attribute, such as InternalsVisibleToAttribute, was not specified correctly..
        /// </summary>
        public static string WRN_InvalidAssemblyName_Description {
            get {
                return ResourceManager.GetString("WRN_InvalidAssemblyName_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly reference is invalid and cannot be resolved.
        /// </summary>
        public static string WRN_InvalidAssemblyName_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidAssemblyName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is not a recognized attribute location. Valid attribute locations for this declaration are &apos;{1}&apos;. All attributes in this block will be ignored..
        /// </summary>
        public static string WRN_InvalidAttributeLocation {
            get {
                return ResourceManager.GetString("WRN_InvalidAttributeLocation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a recognized attribute location.
        /// </summary>
        public static string WRN_InvalidAttributeLocation_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidAttributeLocation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Global analyzer config section name &apos;{0}&apos; is invalid as it is not an absolute path. Section will be ignored. Section was declared in file: &apos;{1}&apos;.
        /// </summary>
        public static string WRN_InvalidGlobalSectionName {
            get {
                return ResourceManager.GetString("WRN_InvalidGlobalSectionName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Global analyzer config section name is invalid as it is not an absolute path. Section will be ignored..
        /// </summary>
        public static string WRN_InvalidGlobalSectionName_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidGlobalSectionName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid XML include element -- {0}.
        /// </summary>
        public static string WRN_InvalidInclude {
            get {
                return ResourceManager.GetString("WRN_InvalidInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid XML include element.
        /// </summary>
        public static string WRN_InvalidInclude_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidInclude_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has the wrong signature to be an entry point.
        /// </summary>
        public static string WRN_InvalidMainSig {
            get {
                return ResourceManager.GetString("WRN_InvalidMainSig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method has the wrong signature to be an entry point.
        /// </summary>
        public static string WRN_InvalidMainSig_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidMainSig_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number.
        /// </summary>
        public static string WRN_InvalidNumber {
            get {
                return ResourceManager.GetString("WRN_InvalidNumber", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid number.
        /// </summary>
        public static string WRN_InvalidNumber_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidNumber_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid search path &apos;{0}&apos; specified in &apos;{1}&apos; -- &apos;{2}&apos;.
        /// </summary>
        public static string WRN_InvalidSearchPathDir {
            get {
                return ResourceManager.GetString("WRN_InvalidSearchPathDir", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid search path specified.
        /// </summary>
        public static string WRN_InvalidSearchPathDir_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidSearchPathDir_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The diagnostic &apos;{0}&apos; was given an invalid severity &apos;{1}&apos; in the analyzer config file at &apos;{2}&apos;..
        /// </summary>
        public static string WRN_InvalidSeverityInAnalyzerConfig {
            get {
                return ResourceManager.GetString("WRN_InvalidSeverityInAnalyzerConfig", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid severity in analyzer config file..
        /// </summary>
        public static string WRN_InvalidSeverityInAnalyzerConfig_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidSeverityInAnalyzerConfig_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version string &apos;{0}&apos; does not conform to the recommended format - major.minor.build.revision.
        /// </summary>
        public static string WRN_InvalidVersionFormat {
            get {
                return ResourceManager.GetString("WRN_InvalidVersionFormat", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified version string does not conform to the recommended format - major.minor.build.revision.
        /// </summary>
        public static string WRN_InvalidVersionFormat_Title {
            get {
                return ResourceManager.GetString("WRN_InvalidVersionFormat_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression is never of the provided (&apos;{0}&apos;) type.
        /// </summary>
        public static string WRN_IsAlwaysFalse {
            get {
                return ResourceManager.GetString("WRN_IsAlwaysFalse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;is&apos; expression&apos;s given expression is never of the provided type.
        /// </summary>
        public static string WRN_IsAlwaysFalse_Title {
            get {
                return ResourceManager.GetString("WRN_IsAlwaysFalse_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given expression is always of the provided (&apos;{0}&apos;) type.
        /// </summary>
        public static string WRN_IsAlwaysTrue {
            get {
                return ResourceManager.GetString("WRN_IsAlwaysTrue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;is&apos; expression&apos;s given expression is always of the provided type.
        /// </summary>
        public static string WRN_IsAlwaysTrue_Title {
            get {
                return ResourceManager.GetString("WRN_IsAlwaysTrue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;{0}&apos; to test compatibility with &apos;{1}&apos; is essentially identical to testing compatibility with &apos;{2}&apos; and will succeed for all non-null values.
        /// </summary>
        public static string WRN_IsDynamicIsConfusing {
            get {
                return ResourceManager.GetString("WRN_IsDynamicIsConfusing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;is&apos; to test compatibility with &apos;dynamic&apos; is essentially identical to testing compatibility with &apos;Object&apos;.
        /// </summary>
        public static string WRN_IsDynamicIsConfusing_Title {
            get {
                return ResourceManager.GetString("WRN_IsDynamicIsConfusing_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An expression of type &apos;{0}&apos; always matches the provided pattern..
        /// </summary>
        public static string WRN_IsPatternAlways {
            get {
                return ResourceManager.GetString("WRN_IsPatternAlways", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The input always matches the provided pattern..
        /// </summary>
        public static string WRN_IsPatternAlways_Title {
            get {
                return ResourceManager.GetString("WRN_IsPatternAlways_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name &apos;_&apos; refers to the type &apos;{0}&apos;, not the discard pattern. Use &apos;@_&apos; for the type, or &apos;var _&apos; to discard..
        /// </summary>
        public static string WRN_IsTypeNamedUnderscore {
            get {
                return ResourceManager.GetString("WRN_IsTypeNamedUnderscore", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not use &apos;_&apos; to refer to the type in an is-type expression..
        /// </summary>
        public static string WRN_IsTypeNamedUnderscore_Title {
            get {
                return ResourceManager.GetString("WRN_IsTypeNamedUnderscore_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Lamda Expression should not contain pipe (&apos;|&apos;) characters around the parameters..
        /// </summary>
        public static string WRN_LamdaExpressionWithPipes {
            get {
                return ResourceManager.GetString("WRN_LamdaExpressionWithPipes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;l&apos; suffix is easily confused with the digit &apos;1&apos; -- use &apos;L&apos; for clarity.
        /// </summary>
        public static string WRN_LowercaseEllSuffix {
            get {
                return ResourceManager.GetString("WRN_LowercaseEllSuffix", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;l&apos; suffix is easily confused with the digit &apos;1&apos;.
        /// </summary>
        public static string WRN_LowercaseEllSuffix_Title {
            get {
                return ResourceManager.GetString("WRN_LowercaseEllSuffix_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name &apos;{0}&apos; only contains lower-cased ascii characters. Such names may become reserved for the language..
        /// </summary>
        public static string WRN_LowerCaseTypeName {
            get {
                return ResourceManager.GetString("WRN_LowerCaseTypeName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type name only contains lower-cased ascii characters. Such names may become reserved for the language..
        /// </summary>
        public static string WRN_LowerCaseTypeName_Title {
            get {
                return ResourceManager.GetString("WRN_LowerCaseTypeName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: an entry point cannot be generic or in a generic type.
        /// </summary>
        public static string WRN_MainCantBeGeneric {
            get {
                return ResourceManager.GetString("WRN_MainCantBeGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An entry point cannot be generic or in a generic type.
        /// </summary>
        public static string WRN_MainCantBeGeneric_Title {
            get {
                return ResourceManager.GetString("WRN_MainCantBeGeneric_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry point of the program is global code; ignoring &apos;{0}&apos; entry point..
        /// </summary>
        public static string WRN_MainIgnored {
            get {
                return ResourceManager.GetString("WRN_MainIgnored", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The entry point of the program is global code; ignoring entry point.
        /// </summary>
        public static string WRN_MainIgnored_Title {
            get {
                return ResourceManager.GetString("WRN_MainIgnored_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This takes the address of, gets the size of, or declares a pointer to a managed type (&apos;{0}&apos;).
        /// </summary>
        public static string WRN_ManagedAddr {
            get {
                return ResourceManager.GetString("WRN_ManagedAddr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This takes the address of, gets the size of, or declares a pointer to a managed type.
        /// </summary>
        public static string WRN_ManagedAddr_Title {
            get {
                return ResourceManager.GetString("WRN_ManagedAddr_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; must have a non-null value when exiting..
        /// </summary>
        public static string WRN_MemberNotNull {
            get {
                return ResourceManager.GetString("WRN_MemberNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member must have a non-null value when exiting..
        /// </summary>
        public static string WRN_MemberNotNull_Title {
            get {
                return ResourceManager.GetString("WRN_MemberNotNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; cannot be used in this attribute..
        /// </summary>
        public static string WRN_MemberNotNullBadMember {
            get {
                return ResourceManager.GetString("WRN_MemberNotNullBadMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member cannot be used in this attribute..
        /// </summary>
        public static string WRN_MemberNotNullBadMember_Title {
            get {
                return ResourceManager.GetString("WRN_MemberNotNullBadMember_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; must have a non-null value when exiting with &apos;{1}&apos;..
        /// </summary>
        public static string WRN_MemberNotNullWhen {
            get {
                return ResourceManager.GetString("WRN_MemberNotNullWhen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member must have a non-null value when exiting in some condition..
        /// </summary>
        public static string WRN_MemberNotNullWhen_Title {
            get {
                return ResourceManager.GetString("WRN_MemberNotNullWhen_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Converting method group &apos;{0}&apos; to non-delegate type &apos;{1}&apos;. Did you intend to invoke the method?.
        /// </summary>
        public static string WRN_MethGrpToNonDel {
            get {
                return ResourceManager.GetString("WRN_MethGrpToNonDel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Converting method group to non-delegate type.
        /// </summary>
        public static string WRN_MethGrpToNonDel_Title {
            get {
                return ResourceManager.GetString("WRN_MethGrpToNonDel_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The branches of the ref conditional operator refer to variables with incompatible declaration scopes.
        /// </summary>
        public static string WRN_MismatchedRefEscapeInTernary {
            get {
                return ResourceManager.GetString("WRN_MismatchedRefEscapeInTernary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The branches of the ref conditional operator refer to variables with incompatible declaration scopes.
        /// </summary>
        public static string WRN_MismatchedRefEscapeInTernary_Title {
            get {
                return ResourceManager.GetString("WRN_MismatchedRefEscapeInTernary_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation for nullable reference types should only be used in code within a &apos;#nullable&apos; annotations context..
        /// </summary>
        public static string WRN_MissingNonNullTypesContextForAnnotation {
            get {
                return ResourceManager.GetString("WRN_MissingNonNullTypesContextForAnnotation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation for nullable reference types should only be used in code within a &apos;#nullable&apos; annotations context..
        /// </summary>
        public static string WRN_MissingNonNullTypesContextForAnnotation_Title {
            get {
                return ResourceManager.GetString("WRN_MissingNonNullTypesContextForAnnotation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation for nullable reference types should only be used in code within a &apos;#nullable&apos; annotations context. Auto-generated code requires an explicit &apos;#nullable&apos; directive in source..
        /// </summary>
        public static string WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode {
            get {
                return ResourceManager.GetString("WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The annotation for nullable reference types should only be used in code within a &apos;#nullable&apos; annotations context. Auto-generated code requires an explicit &apos;#nullable&apos; directive in source..
        /// </summary>
        public static string WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode_Title {
            get {
                return ResourceManager.GetString("WRN_MissingNonNullTypesContextForAnnotationInGeneratedCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; has no matching param tag in the XML comment for &apos;{1}&apos; (but other parameters do).
        /// </summary>
        public static string WRN_MissingParamTag {
            get {
                return ResourceManager.GetString("WRN_MissingParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter has no matching param tag in the XML comment (but other parameters do).
        /// </summary>
        public static string WRN_MissingParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_MissingParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing RETURN statement. A statement with a default &apos;empty&apos; return value is returned..
        /// </summary>
        public static string WRN_MissingReturnStatement {
            get {
                return ResourceManager.GetString("WRN_MissingReturnStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing RETURN value. A default &apos;empty&apos; return value is returned.
        /// </summary>
        public static string WRN_MissingReturnValue {
            get {
                return ResourceManager.GetString("WRN_MissingReturnValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{0}&apos; has no matching typeparam tag in the XML comment on &apos;{1}&apos; (but other type parameters do).
        /// </summary>
        public static string WRN_MissingTypeParamTag {
            get {
                return ResourceManager.GetString("WRN_MissingTypeParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter has no matching typeparam tag in the XML comment (but other type parameters do).
        /// </summary>
        public static string WRN_MissingTypeParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_MissingTypeParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot locate WITH block for member access expression without left hand side. This will be resolved into a late bound call at runtime and may cause an exception when no active WITH block is found..
        /// </summary>
        public static string WRN_MissingWithStatement {
            get {
                return ResourceManager.GetString("WRN_MissingWithStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing XML comment for publicly visible type or member &apos;{0}&apos;.
        /// </summary>
        public static string WRN_MissingXMLComment {
            get {
                return ResourceManager.GetString("WRN_MissingXMLComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The /doc compiler option was specified, but one or more constructs did not have comments..
        /// </summary>
        public static string WRN_MissingXMLComment_Description {
            get {
                return ResourceManager.GetString("WRN_MissingXMLComment_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing XML comment for publicly visible type or member.
        /// </summary>
        public static string WRN_MissingXMLComment_Title {
            get {
                return ResourceManager.GetString("WRN_MissingXMLComment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple global analyzer config files set the same key &apos;{0}&apos; in section &apos;{1}&apos;. It has been unset. Key was set by the following files: &apos;{2}&apos;.
        /// </summary>
        public static string WRN_MultipleGlobalAnalyzerKeys {
            get {
                return ResourceManager.GetString("WRN_MultipleGlobalAnalyzerKeys", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple global analyzer config files set the same key. It has been unset..
        /// </summary>
        public static string WRN_MultipleGlobalAnalyzerKeys_Title {
            get {
                return ResourceManager.GetString("WRN_MultipleGlobalAnalyzerKeys_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The predefined type &apos;{0}&apos; is defined in multiple assemblies in the global alias; using definition from &apos;{1}&apos;.
        /// </summary>
        public static string WRN_MultiplePredefTypes {
            get {
                return ResourceManager.GetString("WRN_MultiplePredefTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This error occurs when a predefined system type such as System.Int32 is found in two assemblies. One way this can happen is if you are referencing mscorlib or System.Runtime.dll from two different places, such as trying to run two versions of the .NET Framework side-by-side..
        /// </summary>
        public static string WRN_MultiplePredefTypes_Description {
            get {
                return ResourceManager.GetString("WRN_MultiplePredefTypes_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Predefined type is defined in multiple assemblies in the global alias.
        /// </summary>
        public static string WRN_MultiplePredefTypes_Title {
            get {
                return ResourceManager.GetString("WRN_MultiplePredefTypes_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; implements interface member &apos;{1}&apos; in type &apos;{2}&apos;. There are multiple matches for the interface member at run-time. It is implementation dependent which method will be called..
        /// </summary>
        public static string WRN_MultipleRuntimeImplementationMatches {
            get {
                return ResourceManager.GetString("WRN_MultipleRuntimeImplementationMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning can be generated when two interface methods are differentiated only by whether a particular parameter is marked with ref or with out. It is best to change your code to avoid this warning because it is not obvious or guaranteed which method is called at runtime.
        ///
        ///Although C# distinguishes between out and ref, the CLR sees them as the same. When deciding which method implements the interface, the CLR just picks one.
        ///
        ///Give the compiler some way to differentiate the methods. For example, you ca [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WRN_MultipleRuntimeImplementationMatches_Description {
            get {
                return ResourceManager.GetString("WRN_MultipleRuntimeImplementationMatches_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member implements interface member with multiple matches at run-time.
        /// </summary>
        public static string WRN_MultipleRuntimeImplementationMatches_Title {
            get {
                return ResourceManager.GetString("WRN_MultipleRuntimeImplementationMatches_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{1}&apos; overrides &apos;{0}&apos;. There are multiple override candidates at run-time. It is implementation dependent which method will be called. Please use a newer runtime..
        /// </summary>
        public static string WRN_MultipleRuntimeOverrideMatches {
            get {
                return ResourceManager.GetString("WRN_MultipleRuntimeOverrideMatches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member overrides base member with multiple override candidates at run-time.
        /// </summary>
        public static string WRN_MultipleRuntimeOverrideMatches_Title {
            get {
                return ResourceManager.GetString("WRN_MultipleRuntimeOverrideMatches_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexing an array with a negative index (array indices always start at zero).
        /// </summary>
        public static string WRN_NegativeArrayIndex {
            get {
                return ResourceManager.GetString("WRN_NegativeArrayIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Indexing an array with a negative index.
        /// </summary>
        public static string WRN_NegativeArrayIndex_Title {
            get {
                return ResourceManager.GetString("WRN_NegativeArrayIndex_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The member &apos;{0}&apos; does not hide an accessible member. The new keyword is not required..
        /// </summary>
        public static string WRN_NewNotRequired {
            get {
                return ResourceManager.GetString("WRN_NewNotRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member does not hide an inherited member; new keyword is not required.
        /// </summary>
        public static string WRN_NewNotRequired_Title {
            get {
                return ResourceManager.GetString("WRN_NewNotRequired_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; hides inherited member &apos;{1}&apos;. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword..
        /// </summary>
        public static string WRN_NewOrOverrideExpected {
            get {
                return ResourceManager.GetString("WRN_NewOrOverrideExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member hides inherited member; missing override keyword.
        /// </summary>
        public static string WRN_NewOrOverrideExpected_Title {
            get {
                return ResourceManager.GetString("WRN_NewOrOverrideExpected_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; hides inherited member &apos;{1}&apos;. Use the new keyword if hiding was intended..
        /// </summary>
        public static string WRN_NewRequired {
            get {
                return ResourceManager.GetString("WRN_NewRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A variable was declared with the same name as a variable in a base type. However, the new keyword was not used. This warning informs you that you should use new; the variable is declared as if new had been used in the declaration..
        /// </summary>
        public static string WRN_NewRequired_Description {
            get {
                return ResourceManager.GetString("WRN_NewRequired_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member hides inherited member; missing new keyword.
        /// </summary>
        public static string WRN_NewRequired_Title {
            get {
                return ResourceManager.GetString("WRN_NewRequired_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The assembly {0} does not contain any analyzers..
        /// </summary>
        public static string WRN_NoAnalyzerInAssembly {
            get {
                return ResourceManager.GetString("WRN_NoAnalyzerInAssembly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly does not contain any analyzers.
        /// </summary>
        public static string WRN_NoAnalyzerInAssembly_Title {
            get {
                return ResourceManager.GetString("WRN_NoAnalyzerInAssembly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring /noconfig option because it was specified in a response file.
        /// </summary>
        public static string WRN_NoConfigNotOnCommandLine {
            get {
                return ResourceManager.GetString("WRN_NoConfigNotOnCommandLine", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ignoring /noconfig option because it was specified in a response file.
        /// </summary>
        public static string WRN_NoConfigNotOnCommandLine_Title {
            get {
                return ResourceManager.GetString("WRN_NoConfigNotOnCommandLine_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature &apos;{0}&apos; is not part of the standardized ISO C# language specification, and may not be accepted by other compilers.
        /// </summary>
        public static string WRN_NonECMAFeature {
            get {
                return ResourceManager.GetString("WRN_NonECMAFeature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Feature is not part of the standardized ISO C# language specification, and may not be accepted by other compilers.
        /// </summary>
        public static string WRN_NonECMAFeature_Title {
            get {
                return ResourceManager.GetString("WRN_NonECMAFeature_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}&apos; overrides obsolete member &apos;{1}&apos;. Add the Obsolete attribute to &apos;{0}&apos;..
        /// </summary>
        public static string WRN_NonObsoleteOverridingObsolete {
            get {
                return ResourceManager.GetString("WRN_NonObsoleteOverridingObsolete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member overrides obsolete member.
        /// </summary>
        public static string WRN_NonObsoleteOverridingObsolete_Title {
            get {
                return ResourceManager.GetString("WRN_NonObsoleteOverridingObsolete_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This entity type cannot return a value. Return value ignored..
        /// </summary>
        public static string WRN_NoReturnValueAllowed {
            get {
                return ResourceManager.GetString("WRN_NoReturnValueAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No value for RuntimeMetadataVersion found. No assembly containing System.Object was found nor was a value for RuntimeMetadataVersion specified through options..
        /// </summary>
        public static string WRN_NoRuntimeMetadataVersion {
            get {
                return ResourceManager.GetString("WRN_NoRuntimeMetadataVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No value for RuntimeMetadataVersion found.
        /// </summary>
        public static string WRN_NoRuntimeMetadataVersion_Title {
            get {
                return ResourceManager.GetString("WRN_NoRuntimeMetadataVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No source files specified..
        /// </summary>
        public static string WRN_NoSources {
            get {
                return ResourceManager.GetString("WRN_NoSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No source files specified.
        /// </summary>
        public static string WRN_NoSources_Title {
            get {
                return ResourceManager.GetString("WRN_NoSources_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always &apos;{0}&apos; since a value of type &apos;{1}&apos; is never equal to &apos;null&apos; of type &apos;{2}&apos;.
        /// </summary>
        public static string WRN_NubExprIsConstBool {
            get {
                return ResourceManager.GetString("WRN_NubExprIsConstBool", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always the same since a value of this type is never equal to &apos;null&apos;.
        /// </summary>
        public static string WRN_NubExprIsConstBool_Title {
            get {
                return ResourceManager.GetString("WRN_NubExprIsConstBool_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always &apos;{0}&apos; since a value of type &apos;{1}&apos; is never equal to &apos;null&apos; of type &apos;{2}&apos;.
        /// </summary>
        public static string WRN_NubExprIsConstBool2 {
            get {
                return ResourceManager.GetString("WRN_NubExprIsConstBool2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the expression is always the same since a value of this type is never equal to &apos;null&apos;.
        /// </summary>
        public static string WRN_NubExprIsConstBool2_Title {
            get {
                return ResourceManager.GetString("WRN_NubExprIsConstBool2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument of type &apos;{0}&apos; cannot be used for parameter &apos;{2}&apos; of type &apos;{1}&apos; in &apos;{3}&apos; due to differences in the nullability of reference types..
        /// </summary>
        public static string WRN_NullabilityMismatchInArgument {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument cannot be used for parameter due to differences in the nullability of reference types..
        /// </summary>
        public static string WRN_NullabilityMismatchInArgument_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInArgument_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument of type &apos;{0}&apos; cannot be used as an output of type &apos;{1}&apos; for parameter &apos;{2}&apos; in &apos;{3}&apos; due to differences in the nullability of reference types..
        /// </summary>
        public static string WRN_NullabilityMismatchInArgumentForOutput {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInArgumentForOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument cannot be used as an output for parameter due to differences in the nullability of reference types..
        /// </summary>
        public static string WRN_NullabilityMismatchInArgumentForOutput_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInArgumentForOutput_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in value of type &apos;{0}&apos; doesn&apos;t match target type &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInAssignment {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in value doesn&apos;t match target type..
        /// </summary>
        public static string WRN_NullabilityMismatchInAssignment_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInAssignment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability in constraints for type parameter &apos;{0}&apos; of method &apos;{1}&apos; doesn&apos;t match the constraints for type parameter &apos;{2}&apos; of interface method &apos;{3}&apos;. Consider using an explicit interface implementation instead..
        /// </summary>
        public static string WRN_NullabilityMismatchInConstraintsOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInConstraintsOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability in constraints for type parameter doesn&apos;t match the constraints for type parameter in implicitly implemented interface method&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInConstraintsOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInConstraintsOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method declarations of &apos;{0}&apos; have inconsistent nullability in constraints for type parameter &apos;{1}&apos;.
        /// </summary>
        public static string WRN_NullabilityMismatchInConstraintsOnPartialImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInConstraintsOnPartialImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method declarations have inconsistent nullability in constraints for type parameter.
        /// </summary>
        public static string WRN_NullabilityMismatchInConstraintsOnPartialImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInConstraintsOnPartialImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in explicit interface specifier doesn&apos;t match interface implemented by the type..
        /// </summary>
        public static string WRN_NullabilityMismatchInExplicitlyImplementedInterface {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInExplicitlyImplementedInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in explicit interface specifier doesn&apos;t match interface implemented by the type..
        /// </summary>
        public static string WRN_NullabilityMismatchInExplicitlyImplementedInterface_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInExplicitlyImplementedInterface_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement interface member &apos;{1}&apos;. Nullability of reference types in interface implemented by the base type doesn&apos;t match..
        /// </summary>
        public static string WRN_NullabilityMismatchInInterfaceImplementedByBase {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInInterfaceImplementedByBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type does not implement interface member. Nullability of reference types in interface implemented by the base type doesn&apos;t match..
        /// </summary>
        public static string WRN_NullabilityMismatchInInterfaceImplementedByBase_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInInterfaceImplementedByBase_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; of &apos;{1}&apos; doesn&apos;t match the target delegate &apos;{2}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOfTargetDelegate {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOfTargetDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match the target delegate (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOfTargetDelegate_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOfTargetDelegate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; doesn&apos;t match implemented member &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnExplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; of &apos;{1}&apos; doesn&apos;t match implicitly implemented member &apos;{2}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match implicitly implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; doesn&apos;t match interceptable method &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnInterceptor {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnInterceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match interceptable method..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnInterceptor_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnInterceptor_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnOverride {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnOverride_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; doesn&apos;t match partial method declaration..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnPartial {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnPartial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match partial method declaration..
        /// </summary>
        public static string WRN_NullabilityMismatchInParameterTypeOnPartial_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInParameterTypeOnPartial_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type of &apos;{0}&apos; doesn&apos;t match the target delegate &apos;{1}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOfTargetDelegate {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOfTargetDelegate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match the target delegate (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOfTargetDelegate_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOfTargetDelegate_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implemented member &apos;{0}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnExplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type of &apos;{0}&apos; doesn&apos;t match implicitly implemented member &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implicitly implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match interceptable method &apos;{0}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnInterceptor {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnInterceptor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match interceptable method..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnInterceptor_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnInterceptor_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnOverride {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnOverride_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match partial method declaration..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnPartial {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnPartial", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match partial method declaration..
        /// </summary>
        public static string WRN_NullabilityMismatchInReturnTypeOnPartial_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInReturnTypeOnPartial_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type doesn&apos;t match implemented member &apos;{0}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnExplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnExplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type doesn&apos;t match implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnExplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnExplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of &apos;{0}&apos; doesn&apos;t match implicitly implemented member &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type doesn&apos;t match implicitly implemented member..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnOverride {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type doesn&apos;t match overridden member..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeOnOverride_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeOnOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{3}&apos; cannot be used as type parameter &apos;{2}&apos; in the generic type or method &apos;{0}&apos;. Nullability of type argument &apos;{3}&apos; doesn&apos;t match constraint type &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterConstraint {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn&apos;t match constraint type..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterConstraint_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterConstraint_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; cannot be used as type parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;. Nullability of type argument &apos;{2}&apos; doesn&apos;t match &apos;notnull&apos; constraint..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterNotNullConstraint {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterNotNullConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn&apos;t match &apos;notnull&apos; constraint..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterNotNullConstraint_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterNotNullConstraint_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{2}&apos; cannot be used as type parameter &apos;{1}&apos; in the generic type or method &apos;{0}&apos;. Nullability of type argument &apos;{2}&apos; doesn&apos;t match &apos;class&apos; constraint..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type cannot be used as type parameter in the generic type or method. Nullability of type argument doesn&apos;t match &apos;class&apos; constraint..
        /// </summary>
        public static string WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint_Title {
            get {
                return ResourceManager.GetString("WRN_NullabilityMismatchInTypeParameterReferenceTypeConstraint_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullable value type may be null..
        /// </summary>
        public static string WRN_NullableValueTypeMayBeNull {
            get {
                return ResourceManager.GetString("WRN_NullableValueTypeMayBeNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullable value type may be null..
        /// </summary>
        public static string WRN_NullableValueTypeMayBeNull_Title {
            get {
                return ResourceManager.GetString("WRN_NullableValueTypeMayBeNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert null literal to non-nullable reference type..
        /// </summary>
        public static string WRN_NullAsNonNullable {
            get {
                return ResourceManager.GetString("WRN_NullAsNonNullable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot convert null literal to non-nullable reference type..
        /// </summary>
        public static string WRN_NullAsNonNullable_Title {
            get {
                return ResourceManager.GetString("WRN_NullAsNonNullable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Passing a NULL pointer to a REF variable is allowed (with /vo7) but strongly discouraged. You MUST make sure that the function being called does a check for NULL pointers for the REF parameter..
        /// </summary>
        public static string WRN_NullPointerForRefParameter {
            get {
                return ResourceManager.GetString("WRN_NullPointerForRefParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Passing a NULL_PSZ for an argument declared as &apos;string&apos; may have unexpected results when the code checks for a string with the value NULL..
        /// </summary>
        public static string WRN_NullPszForStringArgument {
            get {
                return ResourceManager.GetString("WRN_NullPszForStringArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference argument for parameter &apos;{0}&apos; in &apos;{1}&apos;..
        /// </summary>
        public static string WRN_NullReferenceArgument {
            get {
                return ResourceManager.GetString("WRN_NullReferenceArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference argument..
        /// </summary>
        public static string WRN_NullReferenceArgument_Title {
            get {
                return ResourceManager.GetString("WRN_NullReferenceArgument_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference assignment..
        /// </summary>
        public static string WRN_NullReferenceAssignment {
            get {
                return ResourceManager.GetString("WRN_NullReferenceAssignment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference assignment..
        /// </summary>
        public static string WRN_NullReferenceAssignment_Title {
            get {
                return ResourceManager.GetString("WRN_NullReferenceAssignment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object or collection initializer implicitly dereferences possibly null member &apos;{0}&apos;..
        /// </summary>
        public static string WRN_NullReferenceInitializer {
            get {
                return ResourceManager.GetString("WRN_NullReferenceInitializer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object or collection initializer implicitly dereferences possibly null member..
        /// </summary>
        public static string WRN_NullReferenceInitializer_Title {
            get {
                return ResourceManager.GetString("WRN_NullReferenceInitializer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dereference of a possibly null reference..
        /// </summary>
        public static string WRN_NullReferenceReceiver {
            get {
                return ResourceManager.GetString("WRN_NullReferenceReceiver", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Dereference of a possibly null reference..
        /// </summary>
        public static string WRN_NullReferenceReceiver_Title {
            get {
                return ResourceManager.GetString("WRN_NullReferenceReceiver_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference return..
        /// </summary>
        public static string WRN_NullReferenceReturn {
            get {
                return ResourceManager.GetString("WRN_NullReferenceReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible null reference return..
        /// </summary>
        public static string WRN_NullReferenceReturn_Title {
            get {
                return ResourceManager.GetString("WRN_NullReferenceReturn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Include file &apos;{0}&apos; will be skipped because its values are included in the assembly &apos;{1}&apos;..
        /// </summary>
        public static string WRN_ObsoleteInclude {
            get {
                return ResourceManager.GetString("WRN_ObsoleteInclude", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required member &apos;{0}&apos; should not be attributed with &apos;ObsoleteAttribute&apos; unless the containing type is obsolete or all constructors are obsolete..
        /// </summary>
        public static string WRN_ObsoleteMembersShouldNotBeRequired {
            get {
                return ResourceManager.GetString("WRN_ObsoleteMembersShouldNotBeRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Members attributed with &apos;ObsoleteAttribute&apos; should not be required unless the containing type is obsolete or all constructors are obsolete..
        /// </summary>
        public static string WRN_ObsoleteMembersShouldNotBeRequired_Title {
            get {
                return ResourceManager.GetString("WRN_ObsoleteMembersShouldNotBeRequired_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obsolete member &apos;{0}&apos; overrides non-obsolete member &apos;{1}&apos;.
        /// </summary>
        public static string WRN_ObsoleteOverridingNonObsolete {
            get {
                return ResourceManager.GetString("WRN_ObsoleteOverridingNonObsolete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Obsolete member overrides non-obsolete member.
        /// </summary>
        public static string WRN_ObsoleteOverridingNonObsolete_Title {
            get {
                return ResourceManager.GetString("WRN_ObsoleteOverridingNonObsolete_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} has default value &apos;{1:10}&apos; in lambda but &apos;{2:10}&apos; in the target delegate type..
        /// </summary>
        public static string WRN_OptionalParamValueMismatch {
            get {
                return ResourceManager.GetString("WRN_OptionalParamValueMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The default parameter value does not match in the target delegate type..
        /// </summary>
        public static string WRN_OptionalParamValueMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_OptionalParamValueMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter &apos;{0}&apos; doesn&apos;t match the corresponding parameter &apos;{1}&apos; in overridden or implemented member..
        /// </summary>
        public static string WRN_OverridingDifferentRefness {
            get {
                return ResourceManager.GetString("WRN_OverridingDifferentRefness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter doesn&apos;t match the corresponding parameter in overridden or implemented member..
        /// </summary>
        public static string WRN_OverridingDifferentRefness_Title {
            get {
                return ResourceManager.GetString("WRN_OverridingDifferentRefness_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; must have a non-null value when exiting with &apos;{1}&apos;..
        /// </summary>
        public static string WRN_ParameterConditionallyDisallowsNull {
            get {
                return ResourceManager.GetString("WRN_ParameterConditionallyDisallowsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter must have a non-null value when exiting in some condition..
        /// </summary>
        public static string WRN_ParameterConditionallyDisallowsNull_Title {
            get {
                return ResourceManager.GetString("WRN_ParameterConditionallyDisallowsNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; must have a non-null value when exiting..
        /// </summary>
        public static string WRN_ParameterDisallowsNull {
            get {
                return ResourceManager.GetString("WRN_ParameterDisallowsNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter must have a non-null value when exiting..
        /// </summary>
        public static string WRN_ParameterDisallowsNull_Title {
            get {
                return ResourceManager.GetString("WRN_ParameterDisallowsNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static types cannot be used as parameters.
        /// </summary>
        public static string WRN_ParameterIsStaticClass {
            get {
                return ResourceManager.GetString("WRN_ParameterIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static types cannot be used as parameters.
        /// </summary>
        public static string WRN_ParameterIsStaticClass_Title {
            get {
                return ResourceManager.GetString("WRN_ParameterIsStaticClass_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Untyped parameter &apos;{0}&apos; and &apos;{1}&apos; calling convention, assuming &apos;{2}&apos; type..
        /// </summary>
        public static string WRN_ParameterMustBeTyped {
            get {
                return ResourceManager.GetString("WRN_ParameterMustBeTyped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; must have a non-null value when exiting because parameter &apos;{1}&apos; is non-null..
        /// </summary>
        public static string WRN_ParameterNotNullIfNotNull {
            get {
                return ResourceManager.GetString("WRN_ParameterNotNullIfNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter must have a non-null value when exiting because parameter referenced by NotNullIfNotNull is non-null..
        /// </summary>
        public static string WRN_ParameterNotNullIfNotNull_Title {
            get {
                return ResourceManager.GetString("WRN_ParameterNotNullIfNotNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; occurs after &apos;{1}&apos; in the parameter list, but is used as an argument for interpolated string handler conversions. This will require the caller to reorder parameters with named arguments at the call site. Consider putting the interpolated string handler parameter after all arguments involved..
        /// </summary>
        public static string WRN_ParameterOccursAfterInterpolatedStringHandlerParameter {
            get {
                return ResourceManager.GetString("WRN_ParameterOccursAfterInterpolatedStringHandlerParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter to interpolated string handler conversion occurs after handler parameter.
        /// </summary>
        public static string WRN_ParameterOccursAfterInterpolatedStringHandlerParameter_Title {
            get {
                return ResourceManager.GetString("WRN_ParameterOccursAfterInterpolatedStringHandlerParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter {0} has params modifier in lambda but not in target delegate type..
        /// </summary>
        public static string WRN_ParamsArrayInLambdaOnly {
            get {
                return ResourceManager.GetString("WRN_ParamsArrayInLambdaOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter has params modifier in lambda but not in target delegate type..
        /// </summary>
        public static string WRN_ParamsArrayInLambdaOnly_Title {
            get {
                return ResourceManager.GetString("WRN_ParamsArrayInLambdaOnly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The out parameter &apos;{0}&apos; must be assigned to before control leaves the current method.
        /// </summary>
        public static string WRN_ParamUnassigned {
            get {
                return ResourceManager.GetString("WRN_ParamUnassigned", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An out parameter must be assigned to before control leaves the method.
        /// </summary>
        public static string WRN_ParamUnassigned_Title {
            get {
                return ResourceManager.GetString("WRN_ParamUnassigned_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method declarations &apos;{0}&apos; and &apos;{1}&apos; have signature differences..
        /// </summary>
        public static string WRN_PartialMethodTypeDifference {
            get {
                return ResourceManager.GetString("WRN_PartialMethodTypeDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial method declarations have signature differences..
        /// </summary>
        public static string WRN_PartialMethodTypeDifference_Title {
            get {
                return ResourceManager.GetString("WRN_PartialMethodTypeDifference_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial property declarations &apos;{0}&apos; and &apos;{1}&apos; have signature differences..
        /// </summary>
        public static string WRN_PartialPropertySignatureDifference {
            get {
                return ResourceManager.GetString("WRN_PartialPropertySignatureDifference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Partial property declarations have signature differences..
        /// </summary>
        public static string WRN_PartialPropertySignatureDifference_Title {
            get {
                return ResourceManager.GetString("WRN_PartialPropertySignatureDifference_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; has the wrong signature..
        /// </summary>
        public static string WRN_PatternBadSignature {
            get {
                return ResourceManager.GetString("WRN_PatternBadSignature", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type does not implement the collection pattern; member has the wrong signature.
        /// </summary>
        public static string WRN_PatternBadSignature_Title {
            get {
                return ResourceManager.GetString("WRN_PatternBadSignature_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; is ambiguous with &apos;{3}&apos;..
        /// </summary>
        public static string WRN_PatternIsAmbiguous {
            get {
                return ResourceManager.GetString("WRN_PatternIsAmbiguous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type does not implement the collection pattern; members are ambiguous.
        /// </summary>
        public static string WRN_PatternIsAmbiguous_Title {
            get {
                return ResourceManager.GetString("WRN_PatternIsAmbiguous_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; does not implement the &apos;{1}&apos; pattern. &apos;{2}&apos; is not a public instance or extension method..
        /// </summary>
        public static string WRN_PatternNotPublicOrNotInstance {
            get {
                return ResourceManager.GetString("WRN_PatternNotPublicOrNotInstance", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type does not implement the collection pattern; member is is not a public instance or extension method..
        /// </summary>
        public static string WRN_PatternNotPublicOrNotInstance_Title {
            get {
                return ResourceManager.GetString("WRN_PatternNotPublicOrNotInstance_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local name &apos;{0}&apos; is too long for PDB.  Consider shortening or compiling without /debug..
        /// </summary>
        public static string WRN_PdbLocalNameTooLong {
            get {
                return ResourceManager.GetString("WRN_PdbLocalNameTooLong", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local name is too long for PDB.
        /// </summary>
        public static string WRN_PdbLocalNameTooLong_Title {
            get {
                return ResourceManager.GetString("WRN_PdbLocalNameTooLong_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible mistaken empty statement.
        /// </summary>
        public static string WRN_PossibleMistakenNullStatement {
            get {
                return ResourceManager.GetString("WRN_PossibleMistakenNullStatement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Possible mistaken empty statement.
        /// </summary>
        public static string WRN_PossibleMistakenNullStatement_Title {
            get {
                return ResourceManager.GetString("WRN_PossibleMistakenNullStatement_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator &apos;{0}&apos; cannot be used here due to precedence. Use parentheses to disambiguate..
        /// </summary>
        public static string WRN_PrecedenceInversion {
            get {
                return ResourceManager.GetString("WRN_PrecedenceInversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operator cannot be used here due to precedence..
        /// </summary>
        public static string WRN_PrecedenceInversion_Title {
            get {
                return ResourceManager.GetString("WRN_PrecedenceInversion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pre-processor: {0}.
        /// </summary>
        public static string WRN_PreProcessorWarning {
            get {
                return ResourceManager.GetString("WRN_PreProcessorWarning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Primary constructor parameter &apos;{0}&apos; is shadowed by a member from base..
        /// </summary>
        public static string WRN_PrimaryConstructorParameterIsShadowedAndNotPassedToBase {
            get {
                return ResourceManager.GetString("WRN_PrimaryConstructorParameterIsShadowedAndNotPassedToBase", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Primary constructor parameter is shadowed by a member from base.
        /// </summary>
        public static string WRN_PrimaryConstructorParameterIsShadowedAndNotPassedToBase_Title {
            get {
                return ResourceManager.GetString("WRN_PrimaryConstructorParameterIsShadowedAndNotPassedToBase_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property parameters should be specified between Square Brackets (&apos;[ &lt;parameters&gt; ]&apos;)..
        /// </summary>
        public static string WRN_PropertyParametersBrackets {
            get {
                return ResourceManager.GetString("WRN_PropertyParametersBrackets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: Type was changed to &apos;{2}&apos; in the parenttype &apos;{1}&apos;. The compiler will automatically propagate the new type &apos;{2}&apos; to the subclass..
        /// </summary>
        public static string WRN_PropertyTypeChangedInParentType {
            get {
                return ResourceManager.GetString("WRN_PropertyTypeChangedInParentType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: new protected member declared in sealed type.
        /// </summary>
        public static string WRN_ProtectedInSealed {
            get {
                return ResourceManager.GetString("WRN_ProtectedInSealed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to New protected member declared in sealed type.
        /// </summary>
        public static string WRN_ProtectedInSealed_Title {
            get {
                return ResourceManager.GetString("WRN_ProtectedInSealed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; defines &apos;Equals&apos; but not &apos;GetHashCode&apos;.
        /// </summary>
        public static string WRN_RecordEqualsWithoutGetHashCode {
            get {
                return ResourceManager.GetString("WRN_RecordEqualsWithoutGetHashCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Record defines &apos;Equals&apos; but not &apos;GetHashCode&apos;..
        /// </summary>
        public static string WRN_RecordEqualsWithoutGetHashCode_Title {
            get {
                return ResourceManager.GetString("WRN_RecordEqualsWithoutGetHashCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types and aliases should not be named &apos;record&apos;..
        /// </summary>
        public static string WRN_RecordNamedDisallowed {
            get {
                return ResourceManager.GetString("WRN_RecordNamedDisallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Types and aliases should not be named &apos;record&apos;..
        /// </summary>
        public static string WRN_RecordNamedDisallowed_Title {
            get {
                return ResourceManager.GetString("WRN_RecordNamedDisallowed_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns &apos;{1}&apos; to &apos;{0}&apos; but &apos;{1}&apos; has a narrower escape scope than &apos;{0}&apos;..
        /// </summary>
        public static string WRN_RefAssignNarrower {
            get {
                return ResourceManager.GetString("WRN_RefAssignNarrower", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns a value that has a narrower escape scope than the target..
        /// </summary>
        public static string WRN_RefAssignNarrower_Title {
            get {
                return ResourceManager.GetString("WRN_RefAssignNarrower_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns &apos;{1}&apos; to &apos;{0}&apos; but &apos;{1}&apos; can only escape the current method through a return statement..
        /// </summary>
        public static string WRN_RefAssignReturnOnly {
            get {
                return ResourceManager.GetString("WRN_RefAssignReturnOnly", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns a value that can only escape the current method through a return statement..
        /// </summary>
        public static string WRN_RefAssignReturnOnly_Title {
            get {
                return ResourceManager.GetString("WRN_RefAssignReturnOnly_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns &apos;{1}&apos; to &apos;{0}&apos; but &apos;{1}&apos; has a wider value escape scope than &apos;{0}&apos; allowing assignment through &apos;{0}&apos; of values with narrower escapes scopes than &apos;{1}&apos;..
        /// </summary>
        public static string WRN_RefAssignValEscapeWider {
            get {
                return ResourceManager.GetString("WRN_RefAssignValEscapeWider", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This ref-assigns a value that has a wider value escape scope than the target allowing assignment through the target of values with narrower escapes scopes..
        /// </summary>
        public static string WRN_RefAssignValEscapeWider_Title {
            get {
                return ResourceManager.GetString("WRN_RefAssignValEscapeWider_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly &apos;{0}&apos; has different culture setting of &apos;{1}&apos;..
        /// </summary>
        public static string WRN_RefCultureMismatch {
            get {
                return ResourceManager.GetString("WRN_RefCultureMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly has different culture setting.
        /// </summary>
        public static string WRN_RefCultureMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_RefCultureMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly &apos;{0}&apos; does not have a strong name..
        /// </summary>
        public static string WRN_ReferencedAssemblyDoesNotHaveStrongName {
            get {
                return ResourceManager.GetString("WRN_ReferencedAssemblyDoesNotHaveStrongName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Referenced assembly does not have a strong name.
        /// </summary>
        public static string WRN_ReferencedAssemblyDoesNotHaveStrongName_Title {
            get {
                return ResourceManager.GetString("WRN_ReferencedAssemblyDoesNotHaveStrongName_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference was created to embedded interop assembly &apos;{0}&apos; because of an indirect reference to that assembly created by assembly &apos;{1}&apos;. Consider changing the &apos;Embed Interop Types&apos; property on either assembly..
        /// </summary>
        public static string WRN_ReferencedAssemblyReferencesLinkedPIA {
            get {
                return ResourceManager.GetString("WRN_ReferencedAssemblyReferencesLinkedPIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have added a reference to an assembly using /link (Embed Interop Types property set to True). This instructs the compiler to embed interop type information from that assembly. However, the compiler cannot embed interop type information from that assembly because another assembly that you have referenced also references that assembly using /reference (Embed Interop Types property set to False).
        ///
        ///To embed interop type information for both assemblies, use /link for references to each assembly (set the Em [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WRN_ReferencedAssemblyReferencesLinkedPIA_Description {
            get {
                return ResourceManager.GetString("WRN_ReferencedAssemblyReferencesLinkedPIA_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference was created to embedded interop assembly because of an indirect assembly reference.
        /// </summary>
        public static string WRN_ReferencedAssemblyReferencesLinkedPIA_Title {
            get {
                return ResourceManager.GetString("WRN_ReferencedAssemblyReferencesLinkedPIA_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument {0} should be a variable because it is passed to a &apos;ref readonly&apos; parameter.
        /// </summary>
        public static string WRN_RefReadonlyNotVariable {
            get {
                return ResourceManager.GetString("WRN_RefReadonlyNotVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument should be a variable because it is passed to a &apos;ref readonly&apos; parameter.
        /// </summary>
        public static string WRN_RefReadonlyNotVariable_Title {
            get {
                return ResourceManager.GetString("WRN_RefReadonlyNotVariable_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A default value is specified for &apos;ref readonly&apos; parameter &apos;{0}&apos;, but &apos;ref readonly&apos; should be used only for references. Consider declaring the parameter as &apos;in&apos;..
        /// </summary>
        public static string WRN_RefReadonlyParameterDefaultValue {
            get {
                return ResourceManager.GetString("WRN_RefReadonlyParameterDefaultValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A default value is specified for &apos;ref readonly&apos; parameter, but &apos;ref readonly&apos; should be used only for references. Consider declaring the parameter as &apos;in&apos;..
        /// </summary>
        public static string WRN_RefReadonlyParameterDefaultValue_Title {
            get {
                return ResourceManager.GetString("WRN_RefReadonlyParameterDefaultValue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns local &apos;{0}&apos; by reference but it is not a ref local.
        /// </summary>
        public static string WRN_RefReturnLocal {
            get {
                return ResourceManager.GetString("WRN_RefReturnLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns local by reference but it is not a ref local.
        /// </summary>
        public static string WRN_RefReturnLocal_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnLocal_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a member of local &apos;{0}&apos; by reference but it is not a ref local.
        /// </summary>
        public static string WRN_RefReturnLocal2 {
            get {
                return ResourceManager.GetString("WRN_RefReturnLocal2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a member of local by reference but it is not a ref local.
        /// </summary>
        public static string WRN_RefReturnLocal2_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnLocal2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local &apos;{0}&apos; is returned by reference but was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string WRN_RefReturnNonreturnableLocal {
            get {
                return ResourceManager.GetString("WRN_RefReturnNonreturnableLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local is returned by reference but was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string WRN_RefReturnNonreturnableLocal_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnNonreturnableLocal_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A member of &apos;{0}&apos; is returned by reference but was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string WRN_RefReturnNonreturnableLocal2 {
            get {
                return ResourceManager.GetString("WRN_RefReturnNonreturnableLocal2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A member is returned by reference but was initialized to a value that cannot be returned by reference.
        /// </summary>
        public static string WRN_RefReturnNonreturnableLocal2_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnNonreturnableLocal2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference &apos;{0}&apos; through a ref parameter; but it can only safely be returned in a return statement.
        /// </summary>
        public static string WRN_RefReturnOnlyParameter {
            get {
                return ResourceManager.GetString("WRN_RefReturnOnlyParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference through a ref parameter; but it can only safely be returned in a return statement.
        /// </summary>
        public static string WRN_RefReturnOnlyParameter_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnOnlyParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter &apos;{0}&apos; through a ref parameter; but it can only safely be returned in a return statement.
        /// </summary>
        public static string WRN_RefReturnOnlyParameter2 {
            get {
                return ResourceManager.GetString("WRN_RefReturnOnlyParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter through a ref parameter; but it can only safely be returned in a return statement.
        /// </summary>
        public static string WRN_RefReturnOnlyParameter2_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnOnlyParameter2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference &apos;{0}&apos; but it is not a ref parameter.
        /// </summary>
        public static string WRN_RefReturnParameter {
            get {
                return ResourceManager.GetString("WRN_RefReturnParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference but it is not a ref parameter.
        /// </summary>
        public static string WRN_RefReturnParameter_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter &apos;{0}&apos; that is not a ref or out parameter.
        /// </summary>
        public static string WRN_RefReturnParameter2 {
            get {
                return ResourceManager.GetString("WRN_RefReturnParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter that is not a ref or out parameter.
        /// </summary>
        public static string WRN_RefReturnParameter2_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnParameter2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference &apos;{0}&apos; but it is scoped to the current method.
        /// </summary>
        public static string WRN_RefReturnScopedParameter {
            get {
                return ResourceManager.GetString("WRN_RefReturnScopedParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns a parameter by reference but it is scoped to the current method.
        /// </summary>
        public static string WRN_RefReturnScopedParameter_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnScopedParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter &apos;{0}&apos; that is scoped to the current method.
        /// </summary>
        public static string WRN_RefReturnScopedParameter2 {
            get {
                return ResourceManager.GetString("WRN_RefReturnScopedParameter2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This returns by reference a member of parameter that is scoped to the current method.
        /// </summary>
        public static string WRN_RefReturnScopedParameter2_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnScopedParameter2_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Struct member returns &apos;this&apos; or other instance members by reference.
        /// </summary>
        public static string WRN_RefReturnStructThis {
            get {
                return ResourceManager.GetString("WRN_RefReturnStructThis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Struct member returns &apos;this&apos; or other instance members by reference.
        /// </summary>
        public static string WRN_RefReturnStructThis_Title {
            get {
                return ResourceManager.GetString("WRN_RefReturnStructThis_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return value must be non-null because parameter &apos;{0}&apos; is non-null..
        /// </summary>
        public static string WRN_ReturnNotNullIfNotNull {
            get {
                return ResourceManager.GetString("WRN_ReturnNotNullIfNotNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Return value must be non-null because parameter is non-null..
        /// </summary>
        public static string WRN_ReturnNotNullIfNotNull_Title {
            get {
                return ResourceManager.GetString("WRN_ReturnNotNullIfNotNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: static types cannot be used as return types.
        /// </summary>
        public static string WRN_ReturnTypeIsStaticClass {
            get {
                return ResourceManager.GetString("WRN_ReturnTypeIsStaticClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Static types cannot be used as return types.
        /// </summary>
        public static string WRN_ReturnTypeIsStaticClass_Title {
            get {
                return ResourceManager.GetString("WRN_ReturnTypeIsStaticClass_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{1}&apos; in &apos;{0}&apos; conflicts with the imported type &apos;{3}&apos; in &apos;{2}&apos;. Using the type defined in &apos;{0}&apos;..
        /// </summary>
        public static string WRN_SameFullNameThisAggAgg {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisAggAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type conflicts with imported type.
        /// </summary>
        public static string WRN_SameFullNameThisAggAgg_Title {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisAggAgg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{1}&apos; in &apos;{0}&apos; conflicts with the imported namespace &apos;{3}&apos; in &apos;{2}&apos;. Using the type defined in &apos;{0}&apos;..
        /// </summary>
        public static string WRN_SameFullNameThisAggNs {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisAggNs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type conflicts with imported namespace.
        /// </summary>
        public static string WRN_SameFullNameThisAggNs_Title {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisAggNs_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The namespace &apos;{1}&apos; in &apos;{0}&apos; conflicts with the imported type &apos;{3}&apos; in &apos;{2}&apos;. Using the namespace defined in &apos;{0}&apos;..
        /// </summary>
        public static string WRN_SameFullNameThisNsAgg {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisNsAgg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Namespace conflicts with imported type.
        /// </summary>
        public static string WRN_SameFullNameThisNsAgg_Title {
            get {
                return ResourceManager.GetString("WRN_SameFullNameThisNsAgg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter &apos;{0}&apos; doesn&apos;t match overridden or implemented member..
        /// </summary>
        public static string WRN_ScopedMismatchInParameterOfOverrideOrImplementation {
            get {
                return ResourceManager.GetString("WRN_ScopedMismatchInParameterOfOverrideOrImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter doesn&apos;t match overridden or implemented member..
        /// </summary>
        public static string WRN_ScopedMismatchInParameterOfOverrideOrImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_ScopedMismatchInParameterOfOverrideOrImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter &apos;{0}&apos; doesn&apos;t match target &apos;{1}&apos;..
        /// </summary>
        public static string WRN_ScopedMismatchInParameterOfTarget {
            get {
                return ResourceManager.GetString("WRN_ScopedMismatchInParameterOfTarget", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;scoped&apos; modifier of parameter doesn&apos;t match target..
        /// </summary>
        public static string WRN_ScopedMismatchInParameterOfTarget_Title {
            get {
                return ResourceManager.GetString("WRN_ScopedMismatchInParameterOfTarget_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no defined ordering between fields in multiple declarations of partial struct &apos;{0}&apos;. To specify an ordering, all instance fields must be in the same declaration..
        /// </summary>
        public static string WRN_SequentialOnPartialClass {
            get {
                return ResourceManager.GetString("WRN_SequentialOnPartialClass", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no defined ordering between fields in multiple declarations of partial struct.
        /// </summary>
        public static string WRN_SequentialOnPartialClass_Title {
            get {
                return ResourceManager.GetString("WRN_SequentialOnPartialClass_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method marked [DoesNotReturn] should not return..
        /// </summary>
        public static string WRN_ShouldNotReturn {
            get {
                return ResourceManager.GetString("WRN_ShouldNotReturn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A method marked [DoesNotReturn] should not return..
        /// </summary>
        public static string WRN_ShouldNotReturn_Title {
            get {
                return ResourceManager.GetString("WRN_ShouldNotReturn_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand of an &apos;is&apos; or &apos;as&apos; operator may not be static type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_StaticInAsOrIs {
            get {
                return ResourceManager.GetString("WRN_StaticInAsOrIs", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The second operand of an &apos;is&apos; or &apos;as&apos; operator may not be a static type.
        /// </summary>
        public static string WRN_StaticInAsOrIs_Title {
            get {
                return ResourceManager.GetString("WRN_StaticInAsOrIs_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to String2Psz() and Cast2Psz() should only be used for variables that have a &apos;local&apos; scope. The allocated PSZ will be automatically released once the current function/method ends..
        /// </summary>
        public static string WRN_String2PszMustBeAssignedToLocal {
            get {
                return ResourceManager.GetString("WRN_String2PszMustBeAssignedToLocal", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Direct calls to Axit methods (Finalizers) are not supported with the /vo1 compiler option..
        /// </summary>
        public static string WRN_SuppressAxitMethodCall {
            get {
                return ResourceManager.GetString("WRN_SuppressAxitMethodCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle all possible values of its input type (it is not exhaustive). For example, the pattern &apos;{0}&apos; is not covered..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustive {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustive", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle all possible values of its input type (it is not exhaustive)..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustive_Title {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustive_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some null inputs (it is not exhaustive). For example, the pattern &apos;{0}&apos; is not covered..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveForNull {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveForNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some null inputs..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveForNull_Title {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveForNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some null inputs (it is not exhaustive). For example, the pattern &apos;{0}&apos; is not covered. However, a pattern with a &apos;when&apos; clause might successfully match this value..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveForNullWithWhen {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveForNullWithWhen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some null inputs..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveForNullWithWhen_Title {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveForNullWithWhen_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value. For example, the pattern &apos;{0}&apos; is not covered..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle some values of its input type (it is not exhaustive) involving an unnamed enum value..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue_Title {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveWithUnnamedEnumValue_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle all possible values of its input type (it is not exhaustive). For example, the pattern &apos;{0}&apos; is not covered. However, a pattern with a &apos;when&apos; clause might successfully match this value..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveWithWhen {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveWithWhen", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The switch expression does not handle all possible values of its input type (it is not exhaustive)..
        /// </summary>
        public static string WRN_SwitchExpressionNotExhaustiveWithWhen_Title {
            get {
                return ResourceManager.GetString("WRN_SwitchExpressionNotExhaustiveWithWhen_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}&apos; will not be used as an entry point because a synchronous entry point &apos;{1}&apos; was found..
        /// </summary>
        public static string WRN_SyncAndAsyncEntryPoints {
            get {
                return ResourceManager.GetString("WRN_SyncAndAsyncEntryPoints", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter &apos;{0}&apos; doesn&apos;t match the corresponding parameter &apos;{1}&apos; in target..
        /// </summary>
        public static string WRN_TargetDifferentRefness {
            get {
                return ResourceManager.GetString("WRN_TargetDifferentRefness", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference kind modifier of parameter doesn&apos;t match the corresponding parameter in target..
        /// </summary>
        public static string WRN_TargetDifferentRefness_Title {
            get {
                return ResourceManager.GetString("WRN_TargetDifferentRefness_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown value may be null..
        /// </summary>
        public static string WRN_ThrowPossibleNull {
            get {
                return ResourceManager.GetString("WRN_ThrowPossibleNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Thrown value may be null..
        /// </summary>
        public static string WRN_ThrowPossibleNull_Title {
            get {
                return ResourceManager.GetString("WRN_ThrowPossibleNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect.
        /// </summary>
        public static string WRN_TooManyLinesForDebugger {
            get {
                return ResourceManager.GetString("WRN_TooManyLinesForDebugger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source file has exceeded the limit of 16,707,565 lines representable in the PDB; debug information will be incorrect.
        /// </summary>
        public static string WRN_TooManyLinesForDebugger_Title {
            get {
                return ResourceManager.GetString("WRN_TooManyLinesForDebugger_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; doesn&apos;t match implemented member &apos;{1}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match implemented member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnExplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter &apos;{0}&apos; of &apos;{1}&apos; doesn&apos;t match implicitly implemented member &apos;{2}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in type of parameter doesn&apos;t match implicitly implemented member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of type of parameter &apos;{0}&apos; doesn&apos;t match overridden member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of type of parameter doesn&apos;t match overridden member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInParameterTypeOnOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implemented member &apos;{0}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implemented member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnExplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type of &apos;{0}&apos; doesn&apos;t match implicitly implemented member &apos;{1}&apos; (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of reference types in return type doesn&apos;t match implicitly implemented member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnImplicitImplementation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of return type doesn&apos;t match overridden member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nullability of return type doesn&apos;t match overridden member (possibly because of nullability attributes)..
        /// </summary>
        public static string WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride_Title {
            get {
                return ResourceManager.GetString("WRN_TopLevelNullabilityMismatchInReturnTypeOnOverride_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TRY statement found without CATCH clause and without FINALLY clause. The compiler will generate a default CATCH clause that catches and ignores all exceptions..
        /// </summary>
        public static string WRN_TryWithoutCatch {
            get {
                return ResourceManager.GetString("WRN_TryWithoutCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tuple element name &apos;{0}&apos; is ignored because a different name or no name is specified on the other side of the tuple == or != operator..
        /// </summary>
        public static string WRN_TupleBinopLiteralNameMismatch {
            get {
                return ResourceManager.GetString("WRN_TupleBinopLiteralNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tuple element name is ignored because a different name or no name is specified on the other side of the tuple == or != operator..
        /// </summary>
        public static string WRN_TupleBinopLiteralNameMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_TupleBinopLiteralNameMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tuple element name &apos;{0}&apos; is ignored because a different name or no name is specified by the target type &apos;{1}&apos;..
        /// </summary>
        public static string WRN_TupleLiteralNameMismatch {
            get {
                return ResourceManager.GetString("WRN_TupleLiteralNameMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tuple element name is ignored because a different name or no name is specified by the assignment target..
        /// </summary>
        public static string WRN_TupleLiteralNameMismatch_Title {
            get {
                return ResourceManager.GetString("WRN_TupleLiteralNameMismatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{0}&apos; has the same name as the type parameter from outer method &apos;{1}&apos;.
        /// </summary>
        public static string WRN_TypeParameterSameAsOuterMethodTypeParameter {
            get {
                return ResourceManager.GetString("WRN_TypeParameterSameAsOuterMethodTypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter has the same type as the type parameter from outer method..
        /// </summary>
        public static string WRN_TypeParameterSameAsOuterMethodTypeParameter_Title {
            get {
                return ResourceManager.GetString("WRN_TypeParameterSameAsOuterMethodTypeParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter &apos;{0}&apos; has the same name as the type parameter from outer type &apos;{1}&apos;.
        /// </summary>
        public static string WRN_TypeParameterSameAsOuterTypeParameter {
            get {
                return ResourceManager.GetString("WRN_TypeParameterSameAsOuterTypeParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type parameter has the same name as the type parameter from outer type.
        /// </summary>
        public static string WRN_TypeParameterSameAsOuterTypeParameter_Title {
            get {
                return ResourceManager.GetString("WRN_TypeParameterSameAsOuterTypeParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load Analyzer assembly {0} : {1}.
        /// </summary>
        public static string WRN_UnableToLoadAnalyzer {
            get {
                return ResourceManager.GetString("WRN_UnableToLoadAnalyzer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to load Analyzer assembly.
        /// </summary>
        public static string WRN_UnableToLoadAnalyzer_Title {
            get {
                return ResourceManager.GetString("WRN_UnableToLoadAnalyzer_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; is never assigned to, and will always have its default value {1}.
        /// </summary>
        public static string WRN_UnassignedInternalField {
            get {
                return ResourceManager.GetString("WRN_UnassignedInternalField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field is never assigned to, and will always have its default value.
        /// </summary>
        public static string WRN_UnassignedInternalField_Title {
            get {
                return ResourceManager.GetString("WRN_UnassignedInternalField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control is returned to caller before auto-implemented property &apos;{0}&apos; is explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UnassignedThisAutoPropertySupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisAutoPropertySupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control is returned to caller before auto-implemented property is explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UnassignedThisAutoPropertySupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisAutoPropertySupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented property &apos;{0}&apos; must be fully assigned before control is returned to the caller. Consider updating to language version &apos;{1}&apos; to auto-default the property..
        /// </summary>
        public static string WRN_UnassignedThisAutoPropertyUnsupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisAutoPropertyUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An auto-implemented property must be fully assigned before control is returned to the caller. Consider updating the language version to auto-default the property..
        /// </summary>
        public static string WRN_UnassignedThisAutoPropertyUnsupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisAutoPropertyUnsupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control is returned to caller before field &apos;{0}&apos; is explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UnassignedThisSupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisSupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Control is returned to caller before field is explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UnassignedThisSupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisSupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; must be fully assigned before control is returned to the caller. Consider updating to language version &apos;{1}&apos; to auto-default the field..
        /// </summary>
        public static string WRN_UnassignedThisUnsupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Fields of a struct must be fully assigned in a constructor before control is returned to the caller. Consider updating the language version to auto-default the field..
        /// </summary>
        public static string WRN_UnassignedThisUnsupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UnassignedThisUnsupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unbalanced textmerge delimiters &apos;&lt;&lt;&apos; and &apos;&gt;&gt;&apos;..
        /// </summary>
        public static string WRN_UnbalancedTextMergeOperators {
            get {
                return ResourceManager.GetString("WRN_UnbalancedTextMergeOperators", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unboxing a possibly null value..
        /// </summary>
        public static string WRN_UnboxPossibleNull {
            get {
                return ResourceManager.GetString("WRN_UnboxPossibleNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unboxing a possibly null value..
        /// </summary>
        public static string WRN_UnboxPossibleNull_Title {
            get {
                return ResourceManager.GetString("WRN_UnboxPossibleNull_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EnumeratorCancellationAttribute applied to parameter &apos;{0}&apos; will have no effect. The attribute is only effective on a parameter of type CancellationToken in an async-iterator method returning IAsyncEnumerable.
        /// </summary>
        public static string WRN_UnconsumedEnumeratorCancellationAttributeUsage {
            get {
                return ResourceManager.GetString("WRN_UnconsumedEnumeratorCancellationAttributeUsage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The EnumeratorCancellationAttribute will have no effect. The attribute is only effective on a parameter of type CancellationToken in an async-iterator method returning IAsyncEnumerable.
        /// </summary>
        public static string WRN_UnconsumedEnumeratorCancellationAttributeUsage_Title {
            get {
                return ResourceManager.GetString("WRN_UnconsumedEnumeratorCancellationAttributeUsage_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has not been declared. Assuming this is a CURSOR..
        /// </summary>
        public static string WRN_UndeclaredCursor {
            get {
                return ResourceManager.GetString("WRN_UndeclaredCursor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; does not have a {2} &apos;{1}&apos;. This gets resolved to a late bound {2} {3}..
        /// </summary>
        public static string WRN_UndeclaredMember {
            get {
                return ResourceManager.GetString("WRN_UndeclaredMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable &apos;{0}&apos; has not been declared. Assuming this is a FIELD or a MEMVAR..
        /// </summary>
        public static string WRN_UndeclaredVariable {
            get {
                return ResourceManager.GetString("WRN_UndeclaredVariable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; does not have a member &apos;{1}&apos;. This gets resolved to a late bound call to its method &apos;{2}&apos;..
        /// </summary>
        public static string WRN_UndeclaredVariableLatebound {
            get {
                return ResourceManager.GetString("WRN_UndeclaredVariableLatebound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; has not been declared. Assuming this is a VARIABLE or a CURSOR..
        /// </summary>
        public static string WRN_UndeclaredVariableOrCursor {
            get {
                return ResourceManager.GetString("WRN_UndeclaredVariableOrCursor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async-iterator &apos;{0}&apos; has one or more parameters of type &apos;CancellationToken&apos; but none of them is decorated with the &apos;EnumeratorCancellation&apos; attribute, so the cancellation token parameter from the generated &apos;IAsyncEnumerable&lt;&gt;.GetAsyncEnumerator&apos; will be unconsumed.
        /// </summary>
        public static string WRN_UndecoratedCancellationTokenParameter {
            get {
                return ResourceManager.GetString("WRN_UndecoratedCancellationTokenParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Async-iterator member has one or more parameters of type &apos;CancellationToken&apos; but none of them is decorated with the &apos;EnumeratorCancellation&apos; attribute, so the cancellation token parameter from the generated &apos;IAsyncEnumerable&lt;&gt;.GetAsyncEnumerator&apos; will be unconsumed.
        /// </summary>
        public static string WRN_UndecoratedCancellationTokenParameter_Title {
            get {
                return ResourceManager.GetString("WRN_UndecoratedCancellationTokenParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assuming assembly reference &apos;{0}&apos; used by &apos;{1}&apos; matches identity &apos;{2}&apos; of &apos;{3}&apos;, you may need to supply runtime policy.
        /// </summary>
        public static string WRN_UnifyReferenceBldRev {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceBldRev", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application&apos;s .config file, and you must provide the correct strong name of an assembly..
        /// </summary>
        public static string WRN_UnifyReferenceBldRev_Description {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceBldRev_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assuming assembly reference matches identity.
        /// </summary>
        public static string WRN_UnifyReferenceBldRev_Title {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceBldRev_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assuming assembly reference &apos;{0}&apos; used by &apos;{1}&apos; matches identity &apos;{2}&apos; of &apos;{3}&apos;, you may need to supply runtime policy.
        /// </summary>
        public static string WRN_UnifyReferenceMajMin {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceMajMin", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The two assemblies differ in release and/or version number. For unification to occur, you must specify directives in the application&apos;s .config file, and you must provide the correct strong name of an assembly..
        /// </summary>
        public static string WRN_UnifyReferenceMajMin_Description {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceMajMin_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assuming assembly reference matches identity.
        /// </summary>
        public static string WRN_UnifyReferenceMajMin_Title {
            get {
                return ResourceManager.GetString("WRN_UnifyReferenceMajMin_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The command line switch &apos;{0}&apos; is not yet implemented and was ignored..
        /// </summary>
        public static string WRN_UnimplementedCommandLineSwitch {
            get {
                return ResourceManager.GetString("WRN_UnimplementedCommandLineSwitch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Command line switch is not yet implemented.
        /// </summary>
        public static string WRN_UnimplementedCommandLineSwitch_Title {
            get {
                return ResourceManager.GetString("WRN_UnimplementedCommandLineSwitch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-nullable {0} &apos;{1}&apos; must contain a non-null value when exiting constructor. Consider adding the &apos;required&apos; modifier or declaring the {0} as nullable..
        /// </summary>
        public static string WRN_UninitializedNonNullableField {
            get {
                return ResourceManager.GetString("WRN_UninitializedNonNullableField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-nullable field must contain a non-null value when exiting constructor. Consider adding the &apos;required&apos; modifier or declaring as nullable..
        /// </summary>
        public static string WRN_UninitializedNonNullableField_Title {
            get {
                return ResourceManager.GetString("WRN_UninitializedNonNullableField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment on &apos;{1}&apos; has a paramref tag for &apos;{0}&apos;, but there is no parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedParamRefTag {
            get {
                return ResourceManager.GetString("WRN_UnmatchedParamRefTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a paramref tag, but there is no parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedParamRefTag_Title {
            get {
                return ResourceManager.GetString("WRN_UnmatchedParamRefTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a param tag for &apos;{0}&apos;, but there is no parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedParamTag {
            get {
                return ResourceManager.GetString("WRN_UnmatchedParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a param tag, but there is no parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_UnmatchedParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment on &apos;{1}&apos; has a typeparamref tag for &apos;{0}&apos;, but there is no type parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedTypeParamRefTag {
            get {
                return ResourceManager.GetString("WRN_UnmatchedTypeParamRefTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a typeparamref tag, but there is no type parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedTypeParamRefTag_Title {
            get {
                return ResourceManager.GetString("WRN_UnmatchedTypeParamRefTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a typeparam tag for &apos;{0}&apos;, but there is no type parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedTypeParamTag {
            get {
                return ResourceManager.GetString("WRN_UnmatchedTypeParamTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has a typeparam tag, but there is no type parameter by that name.
        /// </summary>
        public static string WRN_UnmatchedTypeParamTag_Title {
            get {
                return ResourceManager.GetString("WRN_UnmatchedTypeParamTag_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because this call is not awaited, execution of the current method continues before the call is completed. Consider applying the &apos;await&apos; operator to the result of the call..
        /// </summary>
        public static string WRN_UnobservedAwaitableExpression {
            get {
                return ResourceManager.GetString("WRN_UnobservedAwaitableExpression", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current method calls an async method that returns a Task or a Task&lt;TResult&gt; and doesn&apos;t apply the await operator to the result. The call to the async method starts an asynchronous task. However, because no await operator is applied, the program continues without waiting for the task to complete. In most cases, that behavior isn&apos;t what you expect. Usually other aspects of the calling method depend on the results of the call or, minimally, the called method is expected to complete before you return from t [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WRN_UnobservedAwaitableExpression_Description {
            get {
                return ResourceManager.GetString("WRN_UnobservedAwaitableExpression_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Because this call is not awaited, execution of the current method continues before the call is completed.
        /// </summary>
        public static string WRN_UnobservedAwaitableExpression_Title {
            get {
                return ResourceManager.GetString("WRN_UnobservedAwaitableExpression_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment is not placed on a valid language element.
        /// </summary>
        public static string WRN_UnprocessedXMLComment {
            get {
                return ResourceManager.GetString("WRN_UnprocessedXMLComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment is not placed on a valid language element.
        /// </summary>
        public static string WRN_UnprocessedXMLComment_Title {
            get {
                return ResourceManager.GetString("WRN_UnprocessedXMLComment_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Within cref attributes, nested types of generic types should be qualified..
        /// </summary>
        public static string WRN_UnqualifiedNestedTypeInCref {
            get {
                return ResourceManager.GetString("WRN_UnqualifiedNestedTypeInCref", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Within cref attributes, nested types of generic types should be qualified.
        /// </summary>
        public static string WRN_UnqualifiedNestedTypeInCref_Title {
            get {
                return ResourceManager.GetString("WRN_UnqualifiedNestedTypeInCref_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable code detected.
        /// </summary>
        public static string WRN_UnreachableCode {
            get {
                return ResourceManager.GetString("WRN_UnreachableCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable code detected.
        /// </summary>
        public static string WRN_UnreachableCode_Title {
            get {
                return ResourceManager.GetString("WRN_UnreachableCode_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous catch clause already catches all exceptions. All non-exceptions thrown will be wrapped in a System.Runtime.CompilerServices.RuntimeWrappedException..
        /// </summary>
        public static string WRN_UnreachableGeneralCatch {
            get {
                return ResourceManager.GetString("WRN_UnreachableGeneralCatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This warning is caused when a catch() block has no specified exception type after a catch (System.Exception e) block. The warning advises that the catch() block will not catch any exceptions.
        ///
        ///A catch() block after a catch (System.Exception e) block can catch non-CLS exceptions if the RuntimeCompatibilityAttribute is set to false in the AssemblyInfo.cs file: [assembly: RuntimeCompatibilityAttribute(WrapNonExceptionThrows = false)]. If this attribute is not set explicitly to false, all thrown non-CLS excep [rest of string was truncated]&quot;;.
        /// </summary>
        public static string WRN_UnreachableGeneralCatch_Description {
            get {
                return ResourceManager.GetString("WRN_UnreachableGeneralCatch_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A previous catch clause already catches all exceptions.
        /// </summary>
        public static string WRN_UnreachableGeneralCatch_Title {
            get {
                return ResourceManager.GetString("WRN_UnreachableGeneralCatch_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is unread..
        /// </summary>
        public static string WRN_UnreadPrimaryConstructorParameter {
            get {
                return ResourceManager.GetString("WRN_UnreadPrimaryConstructorParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is unread..
        /// </summary>
        public static string WRN_UnreadPrimaryConstructorParameter_Title {
            get {
                return ResourceManager.GetString("WRN_UnreadPrimaryConstructorParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter &apos;{0}&apos; is unread. Did you forget to use it to initialize the property with that name?.
        /// </summary>
        public static string WRN_UnreadRecordParameter {
            get {
                return ResourceManager.GetString("WRN_UnreadRecordParameter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parameter is unread. Did you forget to use it to initialize the property with that name?.
        /// </summary>
        public static string WRN_UnreadRecordParameter_Title {
            get {
                return ResourceManager.GetString("WRN_UnreadRecordParameter_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event &apos;{0}&apos; is never used.
        /// </summary>
        public static string WRN_UnreferencedEvent {
            get {
                return ResourceManager.GetString("WRN_UnreferencedEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Event is never used.
        /// </summary>
        public static string WRN_UnreferencedEvent_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedEvent_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field &apos;{0}&apos; is never used.
        /// </summary>
        public static string WRN_UnreferencedField {
            get {
                return ResourceManager.GetString("WRN_UnreferencedField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field is never used.
        /// </summary>
        public static string WRN_UnreferencedField_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The field &apos;{0}&apos; is assigned but its value is never used.
        /// </summary>
        public static string WRN_UnreferencedFieldAssg {
            get {
                return ResourceManager.GetString("WRN_UnreferencedFieldAssg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field is assigned but its value is never used.
        /// </summary>
        public static string WRN_UnreferencedFieldAssg_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedFieldAssg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This label has not been referenced.
        /// </summary>
        public static string WRN_UnreferencedLabel {
            get {
                return ResourceManager.GetString("WRN_UnreferencedLabel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This label has not been referenced.
        /// </summary>
        public static string WRN_UnreferencedLabel_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedLabel_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The local function &apos;{0}&apos; is declared but never used.
        /// </summary>
        public static string WRN_UnreferencedLocalFunction {
            get {
                return ResourceManager.GetString("WRN_UnreferencedLocalFunction", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Local function is declared but never used.
        /// </summary>
        public static string WRN_UnreferencedLocalFunction_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedLocalFunction_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is declared but never used.
        /// </summary>
        public static string WRN_UnreferencedVar {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable is declared but never used.
        /// </summary>
        public static string WRN_UnreferencedVar_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVar_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The variable &apos;{0}&apos; is assigned but its value is never used.
        /// </summary>
        public static string WRN_UnreferencedVarAssg {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVarAssg", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Variable is assigned but its value is never used.
        /// </summary>
        public static string WRN_UnreferencedVarAssg_Title {
            get {
                return ResourceManager.GetString("WRN_UnreferencedVarAssg_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of pointers and fixed-size buffers should be marked as unsafe.
        /// </summary>
        public static string WRN_UnsafeImplied {
            get {
                return ResourceManager.GetString("WRN_UnsafeImplied", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is unsupported and will be ignored..
        /// </summary>
        public static string WRN_Unsupported {
            get {
                return ResourceManager.GetString("WRN_Unsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned local variable &apos;{0}&apos;.
        /// </summary>
        public static string WRN_UseDefViolation {
            get {
                return ResourceManager.GetString("WRN_UseDefViolation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned local variable.
        /// </summary>
        public static string WRN_UseDefViolation_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolation_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field &apos;{0}&apos;.
        /// </summary>
        public static string WRN_UseDefViolationField {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field.
        /// </summary>
        public static string WRN_UseDefViolationField_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field &apos;{0}&apos; is read before being explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UseDefViolationFieldSupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationFieldSupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Field is read before being explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UseDefViolationFieldSupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationFieldSupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field &apos;{0}&apos;. Consider updating to language version &apos;{1}&apos; to auto-default the field..
        /// </summary>
        public static string WRN_UseDefViolationFieldUnsupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationFieldUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned field. Consider updating the language version to auto-default the field..
        /// </summary>
        public static string WRN_UseDefViolationFieldUnsupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationFieldUnsupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned out parameter &apos;{0}&apos;.
        /// </summary>
        public static string WRN_UseDefViolationOut {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationOut", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of unassigned out parameter.
        /// </summary>
        public static string WRN_UseDefViolationOut_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationOut_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property &apos;{0}&apos;.
        /// </summary>
        public static string WRN_UseDefViolationProperty {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property.
        /// </summary>
        public static string WRN_UseDefViolationProperty_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationProperty_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented property &apos;{0}&apos; is read before being explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UseDefViolationPropertySupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationPropertySupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auto-implemented property is read before being explicitly assigned, causing a preceding implicit assignment of &apos;default&apos;..
        /// </summary>
        public static string WRN_UseDefViolationPropertySupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationPropertySupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property &apos;{0}&apos;. Consider updating to language version &apos;{1}&apos; to auto-default the property..
        /// </summary>
        public static string WRN_UseDefViolationPropertyUnsupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationPropertyUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use of possibly unassigned auto-implemented property. Consider updating the language version to auto-default the property..
        /// </summary>
        public static string WRN_UseDefViolationPropertyUnsupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationPropertyUnsupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ref field &apos;{0}&apos; should be ref-assigned before use..
        /// </summary>
        public static string WRN_UseDefViolationRefField {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationRefField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ref field should be ref-assigned before use..
        /// </summary>
        public static string WRN_UseDefViolationRefField_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationRefField_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; object is read before all of its fields have been assigned, causing preceding implicit assignments of &apos;default&apos; to non-explicitly assigned fields..
        /// </summary>
        public static string WRN_UseDefViolationThisSupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationThisSupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; object is read before all of its fields have been assigned, causing preceding implicit assignments of &apos;default&apos; to non-explicitly assigned fields..
        /// </summary>
        public static string WRN_UseDefViolationThisSupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationThisSupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; object cannot be used before all of its fields have been assigned. Consider updating to language version &apos;{0}&apos; to auto-default the unassigned fields..
        /// </summary>
        public static string WRN_UseDefViolationThisUnsupportedVersion {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationThisUnsupportedVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The &apos;this&apos; object cannot be used in a constructor before all of its fields have been assigned. Consider updating the language version to auto-default the unassigned fields..
        /// </summary>
        public static string WRN_UseDefViolationThisUnsupportedVersion_Title {
            get {
                return ResourceManager.GetString("WRN_UseDefViolationThisUnsupportedVersion_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison to integral constant is useless; the constant is outside the range of type &apos;{0}&apos;.
        /// </summary>
        public static string WRN_VacuousIntegralComp {
            get {
                return ResourceManager.GetString("WRN_VacuousIntegralComp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Comparison to integral constant is useless; the constant is outside the range of the type.
        /// </summary>
        public static string WRN_VacuousIntegralComp_Title {
            get {
                return ResourceManager.GetString("WRN_VacuousIntegralComp_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos;: a reference to a volatile field will not be treated as volatile.
        /// </summary>
        public static string WRN_VolatileByRef {
            get {
                return ResourceManager.GetString("WRN_VolatileByRef", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A volatile field should not normally be used as a ref or out value, since it will not be treated as volatile. There are exceptions to this, such as when calling an interlocked API..
        /// </summary>
        public static string WRN_VolatileByRef_Description {
            get {
                return ResourceManager.GetString("WRN_VolatileByRef_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A reference to a volatile field will not be treated as volatile.
        /// </summary>
        public static string WRN_VolatileByRef_Title {
            get {
                return ResourceManager.GetString("WRN_VolatileByRef_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #warning: &apos;{0}&apos;.
        /// </summary>
        public static string WRN_WarningDirective {
            get {
                return ResourceManager.GetString("WRN_WarningDirective", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #warning directive.
        /// </summary>
        public static string WRN_WarningDirective_Title {
            get {
                return ResourceManager.GetString("WRN_WarningDirective_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is for evaluation purposes only and is subject to change or removal in future updates..
        /// </summary>
        public static string WRN_WindowsExperimental {
            get {
                return ResourceManager.GetString("WRN_WindowsExperimental", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type is for evaluation purposes only and is subject to change or removal in future updates..
        /// </summary>
        public static string WRN_WindowsExperimental_Title {
            get {
                return ResourceManager.GetString("WRN_WindowsExperimental_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has badly formed XML -- &apos;{0}&apos;.
        /// </summary>
        public static string WRN_XMLParseError {
            get {
                return ResourceManager.GetString("WRN_XMLParseError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML comment has badly formed XML.
        /// </summary>
        public static string WRN_XMLParseError_Title {
            get {
                return ResourceManager.GetString("WRN_XMLParseError_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Badly formed XML in included comments file -- &apos;{0}&apos;.
        /// </summary>
        public static string WRN_XMLParseIncludeError {
            get {
                return ResourceManager.GetString("WRN_XMLParseIncludeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Badly formed XML in included comments file.
        /// </summary>
        public static string WRN_XMLParseIncludeError_Title {
            get {
                return ResourceManager.GetString("WRN_XMLParseIncludeError_Title", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPP &apos;ASSIGNMENT&apos; clause for instance variables is not supported (yet) and ignored..
        /// </summary>
        public static string WRN_XPPAssignmentClause {
            get {
                return ResourceManager.GetString("WRN_XPPAssignmentClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPP &apos;FREEZE&apos; method modifier is not supported and ignored..
        /// </summary>
        public static string WRN_XPPFreezeNotSupported {
            get {
                return ResourceManager.GetString("WRN_XPPFreezeNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP: Method &apos;{0}&apos; has NOT been declared..
        /// </summary>
        public static string WRN_XPPMethodNotDeclared {
            get {
                return ResourceManager.GetString("WRN_XPPMethodNotDeclared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP: Method &apos;{0}&apos; has been declared but has not been implemented..
        /// </summary>
        public static string WRN_XPPMethodNotImplemented {
            get {
                return ResourceManager.GetString("WRN_XPPMethodNotImplemented", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPP &apos;READONLY&apos; clause for instance variables is not supported (yet) and ignored..
        /// </summary>
        public static string WRN_XPPReadonlyClause {
            get {
                return ResourceManager.GetString("WRN_XPPReadonlyClause", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP Variables are SHARED by default in .Net.
        /// </summary>
        public static string WRN_XPPSharedIsDefault {
            get {
                return ResourceManager.GetString("WRN_XPPSharedIsDefault", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XPP The &apos;FROM&apos; clause is interpreted as SHARING because variables in parent classes are always shared in the .Net Runtime..
        /// </summary>
        public static string WRN_XPPSuperIVarsAlwaysShared {
            get {
                return ResourceManager.GetString("WRN_XPPSuperIVarsAlwaysShared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The XPP &apos; IS .. IN ..&apos;  clause is not supported. There is no multiple inheritance, so this is no longer needed..
        /// </summary>
        public static string WRN_XPPVarIsInNotSupported {
            get {
                return ResourceManager.GetString("WRN_XPPVarIsInNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; is ambiguous. Could be {1} &apos;{2}&apos; in {3} or {4} &apos;{5}&apos; in {6}. Using the first one..
        /// </summary>
        public static string WRN_XSharpAmbiguous {
            get {
                return ResourceManager.GetString("WRN_XSharpAmbiguous", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wrong number of type arguments.
        /// </summary>
        public static string WrongNumberOfTypeArguments {
            get {
                return ResourceManager.GetString("WrongNumberOfTypeArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected a {0} SemanticModel..
        /// </summary>
        public static string WrongSemanticModelType {
            get {
                return ResourceManager.GetString("WrongSemanticModelType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The literal string &apos;]]&gt;&apos; is not allowed in element content..
        /// </summary>
        public static string XML_CDataEndTagNotAllowed {
            get {
                return ResourceManager.GetString("XML_CDataEndTagNotAllowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Duplicate &apos;{0}&apos; attribute.
        /// </summary>
        public static string XML_DuplicateAttribute {
            get {
                return ResourceManager.GetString("XML_DuplicateAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End tag &apos;{0}&apos; does not match the start tag &apos;{1}&apos;..
        /// </summary>
        public static string XML_ElementTypeMatch {
            get {
                return ResourceManager.GetString("XML_ElementTypeMatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected an end tag for element &apos;{0}&apos;..
        /// </summary>
        public static string XML_EndTagExpected {
            get {
                return ResourceManager.GetString("XML_EndTagExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to End tag was not expected at this location..
        /// </summary>
        public static string XML_EndTagNotExpected {
            get {
                return ResourceManager.GetString("XML_EndTagNotExpected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Expected &apos;&gt;&apos; or &apos;/&gt;&apos; to close tag &apos;{0}&apos;..
        /// </summary>
        public static string XML_ExpectedEndOfTag {
            get {
                return ResourceManager.GetString("XML_ExpectedEndOfTag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unexpected character at this location..
        /// </summary>
        public static string XML_ExpectedEndOfXml {
            get {
                return ResourceManager.GetString("XML_ExpectedEndOfXml", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An identifier was expected..
        /// </summary>
        public static string XML_ExpectedIdentifier {
            get {
                return ResourceManager.GetString("XML_ExpectedIdentifier", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect syntax was used in a comment..
        /// </summary>
        public static string XML_IncorrectComment {
            get {
                return ResourceManager.GetString("XML_IncorrectComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid character was found inside an entity reference..
        /// </summary>
        public static string XML_InvalidCharEntity {
            get {
                return ResourceManager.GetString("XML_InvalidCharEntity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character(s) &apos;{0}&apos; cannot be used at this location..
        /// </summary>
        public static string XML_InvalidToken {
            get {
                return ResourceManager.GetString("XML_InvalidToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid unicode character..
        /// </summary>
        public static string XML_InvalidUnicodeChar {
            get {
                return ResourceManager.GetString("XML_InvalidUnicodeChar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Whitespace is not allowed at this location..
        /// </summary>
        public static string XML_InvalidWhitespace {
            get {
                return ResourceManager.GetString("XML_InvalidWhitespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The character &apos;&lt;&apos; cannot be used in an attribute value..
        /// </summary>
        public static string XML_LessThanInAttributeValue {
            get {
                return ResourceManager.GetString("XML_LessThanInAttributeValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing equals sign between attribute and attribute value..
        /// </summary>
        public static string XML_MissingEqualsAttribute {
            get {
                return ResourceManager.GetString("XML_MissingEqualsAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Reference to undefined entity &apos;{0}&apos;..
        /// </summary>
        public static string XML_RefUndefinedEntity_1 {
            get {
                return ResourceManager.GetString("XML_RefUndefinedEntity_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing closing quotation mark for string literal..
        /// </summary>
        public static string XML_StringLiteralNoEndQuote {
            get {
                return ResourceManager.GetString("XML_StringLiteralNoEndQuote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Non-ASCII quotations marks may not be used around string literals..
        /// </summary>
        public static string XML_StringLiteralNonAsciiQuote {
            get {
                return ResourceManager.GetString("XML_StringLiteralNonAsciiQuote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A string literal was expected, but no opening quotation mark was found..
        /// </summary>
        public static string XML_StringLiteralNoStartQuote {
            get {
                return ResourceManager.GetString("XML_StringLiteralNoStartQuote", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Required white space was missing..
        /// </summary>
        public static string XML_WhitespaceMissing {
            get {
                return ResourceManager.GetString("XML_WhitespaceMissing", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to References to XML documents are not supported..
        /// </summary>
        public static string XmlReferencesNotSupported {
            get {
                return ResourceManager.GetString("XmlReferencesNotSupported", resourceCulture);
            }
        }
    }
}
