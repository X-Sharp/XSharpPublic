<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>XSharp.Core</name>
  </assembly>
  <members>
    <member name="T:XSharp.RDD.BaseIndex">
      <summary>Base Index class. Does not implement anything. </summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.#ctor(XSharp.RDD.Workarea)">
      <summary>Create the BaseIndex object</summary>
      <param name="oArea">Workarea object that 'owns' this index object </param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.Flush">
      <summary>Flush the changes to the index.</summary>
    </member>
    <member name="P:XSharp.RDD.BaseIndex.Found">
      <summary>Result of the last seek operation for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about the current index.</summary>
      <param name="nOrdinal"></param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info"></param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.BaseIndex.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
    </member>
    <member name="T:XSharp.RDD.BaseMemo">
      <summary>Base Memo class. Does not implement anything. </summary>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.#ctor(XSharp.RDD.Workarea)">
      <summary>Create the BaseMemo object</summary>
      <param name="oArea">Workarea object that 'owns' this memo object </param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.CloseMemFile">
      <summary>Close the memo file</summary>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.Flush">
      <summary>Flush the changes to the memo file </summary>
    </member>
    <member name="P:XSharp.RDD.BaseMemo.FullPath"></member>
    <member name="M:XSharp.RDD.BaseMemo.GetValue(System.Int32)">
      <summary>Get a value from a memo file for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the length should be retrieved.</param>
    </member>
    <member name="P:XSharp.RDD.BaseMemo.LastWrittenBlockNumber"></member>
    <member name="M:XSharp.RDD.BaseMemo.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.PutValue(System.Int32,System.Object)">
      <summary>Write a value to a memo file for a specified column</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the memo file for this column.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
    </member>
    <member name="M:XSharp.RDD.BaseMemo.Zap">
      <summary>Physically remove all memos from the memofile.</summary>
    </member>
    <member name="T:XSharp.RDD.CursorProperty">
      <summary>Enum that matches the various FoxPro cursor properties, used in CursorGetProp() and CursorSetProp()</summary>
    </member>
    <member name="T:XSharp.RDD.DatabasePropertyCollection">
      <summary>This collection is used to store additional properties for fields and servers
            such as captions, descriptions etc.</summary>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DatabasePropertyCollection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.Add(XSharp.RDD.DatabasePropertyType,System.Object)">
      <summary>Add a property - value pair to the collection.</summary>
      <param name="key">Propery to store.</param>
      <param name="val">Value to store</param>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.GetValue(System.String)">
      <summary>Get the value for a property</summary>
      <param name="cProp">Property name to look for.</param>
      <returns>The value from the collection or an empty value of the right type.</returns>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.GetValue``1(XSharp.RDD.DatabasePropertyType)">
      <summary>Get the value for a property or an empty value when the property has not been defined </summary>
      <param name="key">Property to look for.</param>
      <typeparam name="T">Expected return type for the value</typeparam>
      <returns>The value from the collection or an empty value of the right type.</returns>
    </member>
    <member name="M:XSharp.RDD.DatabasePropertyCollection.IsValidProperty(System.String)"></member>
    <member name="T:XSharp.RDD.DatabasePropertyType">
      <summary>Enum that matches the various FoxPro database properties, used in DbGetProp() and DbSetProp()</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Null">
      <summary>Null (Internal) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Path">
      <summary>The relative path with respect to the DBC to the table including the name of the file. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Class">
      <summary>Class (Internal) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_3">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_4">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_5">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_6">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Comment">
      <summary>The text of the field comment. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_8">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RuleExpression">
      <summary>The rule expression. (C)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RuleText">
      <summary>The row rule error text.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DefaultValue">
      <summary>The field default value.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ParameterList">
      <summary>The WHERE clause parameters. The format for the parameters is ''ParameterName1, 'Type1'; ParameterName2, 'Type2'; ...'' </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedChild">
      <summary>ChildTag for a Relation Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.InsertTrigger">
      <summary>The Insert trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateTrigger">
      <summary>The Update trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DeleteTrigger">
      <summary>The Delete trigger expression.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.IsUnique">
      <summary>The IsUnique flag for an Index Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedTable">
      <summary>Related table for a Relation Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.RelatedTag">
      <summary>Related tag for a Relatin Object</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.PrimaryKey">
      <summary>The tag name of the primary key. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_21">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_22">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_23">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Version">
      <summary>The database version number. (N) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_25">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_26">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_27">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.BatchUpdateCount">
      <summary>The number of update statements sent to the back end for views. 1 is the default. Adjusting this value can greatly increase update performance. (N) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DataSource">
      <summary>The name of the data source as defined in the Odbc.ini file.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_30">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_31">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectName">
      <summary>The named connection used when the view is opened. (C)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_33">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_34">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateName">
      <summary>The name of the field used when data in the field is updated to the remote table. By default, the remote table field name.Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchMemo">
      <summary>Contains true (.T.) (default) if memo and general fields are fetched with the view results; otherwise, contains false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchSize">
      <summary>Contains the number of records fetched at a time from the remote tables. The default is 100 records. Setting FetchSize to –1 retrieves the complete result set, limited by the MaxRecords setting</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.KeyField">
      <summary>Contains True (.T.) if the field is specified in an index key expression; otherwise, contains False (.F.). (L)  </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.MaxRecords">
      <summary>The maximum number of records fetched when result sets are returned. (N) The default is – 1 (all rows are returned). A value of 0 specifies that the view is executed but no results are fetched.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ShareConnection">
      <summary>Contains true (.T.) if the view can share its connection handle with other connections; otherwise, contains false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SourceType">
      <summary>The view source. (N) SourceType may assume the following values: 1 - The view uses local tables.2 - The view uses remote tables.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SQL">
      <summary>The SQL statement executed when the view is opened.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Tables">
      <summary>A comma-delimited list of the names of the tables.(C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.SendUpdates">
      <summary>Contains true (.T.) if a SQL update query is sent to update remote tables; otherwise, contains false (.F.) (default).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Updatable">
      <summary>Contains True (.T.) if the field can be updated; otherwise, contains False (.F.). </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UpdateType">
      <summary>The update type. Valid values are: 1 or DB_UPDATE (from Foxpro.h). The old data is updated with the new data (default). 2 or DB_DELETEINSERT (from Foxpro.h). The old data is deleted and the new data is inserted.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UseMemoSize">
      <summary>The minimum size (in bytes) for which result columns are returned in memo fields. For example, if the width of a column result is greater than the value of UseMemoSize, the column result is stored in a memo field. UseMemoSize may vary from 1 to 255; the default value is 255.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.WhereType">
      <summary>The WHERE clause for updates to remote tables.WhereType may assume the following values: 1 or DB_KEY , 2 or DB_KEYANDUPDATABLE, 3 or DB_KEYANDMODIFIED and 4 or DB_KEYANDTIMESTAMP </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_49">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisplayClass">
      <summary>Name of the class used for field mapping. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisplayClassLibrary">
      <summary>Path to the class library specified with the DisplayClass property.(C)  </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_52">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_53">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.InputMask">
      <summary>The field input format. (C) .Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Format">
      <summary>The field display format. (C) .Read/write. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Caption">
      <summary>The field caption. (C) If an equal sign (=) precedes the value of this property, Visual FoxPro evaluates the value as an expression. Otherwise, it is treated as a string literal.Read/write. FIELD</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_57">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_58">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_59">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_60">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_61">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_62">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_63">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Asynchronous">
      <summary>The connection mode. (Default) False (.F.) specifies a synchronous connection. True (.T.) specifies an asynchronous connection.Read/write.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.BatchMode">
      <summary>The batch-processing mode. (Default) True (.T.) specifies the connection that operates in batch mode.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectString">
      <summary>The login connection string.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ConnectTimeout">
      <summary>The connection timeout interval in seconds. The default is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DispLogin">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DispWarnings">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.IdleTimeout">
      <summary>The idle timeout interval in minutes. Timeout is checked no more than once per minute, therefore it is possible that active connections might deactivate one or two minutes later after the specified time interval has elapsed. The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.QueryTimeOut">
      <summary>The query timeout interval in seconds. The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Password">
      <summary>The connection password.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Transactions">
      <summary>Contains a numeric value that determines how the connection manages transactions on the remote table. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.UserId">
      <summary>The user identification.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.WaitTime">
      <summary>The amount of time in milliseconds that elapses before Visual FoxPro checks whether the SQL statement has completed executing. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.TimeStamp">
      <summary>Timestamp (internal)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DataType">
      <summary>The data type for a field in a view. Initially set to the data type for the field in the data source.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.PacketSize">
      <summary>The size of the network packet used by the connection. Adjusting this value can improve performance. The default value is 4096 bytes (4K).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Database">
      <summary>The name of the server database specified with the DATABASE clause in the CREATE CONNECTION command or in the Connection Designer.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Prepared">
      <summary>Contains True (.T.) if SQL statements are prepared for subsequent REQUERY( ) function calls. REQUERY( ) is used to retrieve data again for a SQL view. See SQLPREPARE( ) for additional information about preparing SQL statements. The default is false (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.CompareMemo">
      <summary>Contains true (.T.) (default) if memo fields (of type Memo, General, or Picture, or, for remote views, type Timestamp) are included in the WHERE clause for updates; otherwise, contains false (.F.).Read/write.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.FetchAsNeeded">
      <summary>If True (.T.), data is fetched only when needed, such as when record pointer moves to a row that has not been fetched. If False (.F.), additional data is fetched during idle time. (Default)</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.Unknown_83">
      <summary>Not defined</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OfflineRecs">
      <summary>When this property is found the table is offline. The Path property then returns the OffLinePath</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OfflineRemRecs">
      <summary># of remote records offline.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DBCEventFileName">
      <summary>Relative path and filename of external program file containing DBC Events code. (C) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DBCEvents">
      <summary>Enabled state of DBC Events. Set to True (.T.) to enable. (L) </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.AllowSimultaneousFetch">
      <summary>Applies when using remote views, a shared connection, and to cursors created using ODBC. </summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.DisconnectRollback">
      <summary>Specifies if a pending transaction is committed or rolled back when SQLDISCONNECT( ) is called for the last connection handle.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.OffLine">
      <summary>Is the table offline (this is not stored as a real property but derived from the extistence of the properties OfflineRecs, OfflineRemRecs and Path.</summary>
    </member>
    <member name="F:XSharp.RDD.DatabasePropertyType.ColumnName">
      <summary>X# Column Name property (not persisted in DBC)</summary>
    </member>
    <member name="T:XSharp.RDD.DbColumnInfo">
      <summary>This class describes extended information for a field in a workarea, for fields that come from a SQL backend.</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the DbColumnInfo class</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.#ctor(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Initializes a new instance of the DbColumnInfo class</summary>
    </member>
    <member name="M:XSharp.RDD.DbColumnInfo.CalculateColumnType">
      <summary>Calculate the column type from the FieldType</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.DotNetType">
      <summary>DotNet datatype of the column</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.NumericPrecision">
      <summary>Numeric Precision</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.NumericScale">
      <summary>Numeric Scale</summary>
    </member>
    <member name="P:XSharp.RDD.DbColumnInfo.ReadOnly">
      <summary>Numeric Precision</summary>
    </member>
    <member name="T:XSharp.RDD.DbCurrency">
      <summary>Implementation of the ICurrency interface that can be used by the RDD system. </summary>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.#ctor(System.Decimal)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbCurrency</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbCurrency.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.RDD.DbCurrency.Value"></member>
    <member name="T:XSharp.RDD.DbDate">
      <summary>Implementation of the IDate interface that can be used by the RDD system. </summary>
    </member>
    <member name="M:XSharp.RDD.DbDate.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbDate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbDate.Day"></member>
    <member name="P:XSharp.RDD.DbDate.IsEmpty"></member>
    <member name="P:XSharp.RDD.DbDate.Month"></member>
    <member name="M:XSharp.RDD.DbDate.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.RDD.DbDate.Value"></member>
    <member name="P:XSharp.RDD.DbDate.Year"></member>
    <member name="T:XSharp.RDD.DbFloat">
      <summary>Implementation of the IFloat interface that can be used by the RDD system. </summary>
    </member>
    <member name="M:XSharp.RDD.DbFloat.#ctor(System.Double,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.DbFloat</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:XSharp.RDD.DbFloat.Decimals"></member>
    <member name="P:XSharp.RDD.DbFloat.Digits"></member>
    <member name="M:XSharp.RDD.DbFloat.GetTypeCode">
      <summary>Returns the <see cref="T:System.TypeCode" /> for this instance.</summary>
      <returns>The enumerated constant that is the <see cref="T:System.TypeCode" /> of the class or value type that implements this interface.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToBoolean(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Boolean value using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Boolean value equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToChar(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent Unicode character using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A Unicode character equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDateTime(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.DateTime" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.DateTime" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDecimal(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.Decimal" /> number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.Decimal" /> number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToDouble(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent double-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A double-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToSByte(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 8-bit signed integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 8-bit signed integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToSingle(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent single-precision floating-point number using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A single-precision floating-point number equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToString(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent <see cref="T:System.String" /> using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>A <see cref="T:System.String" /> instance equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
      <summary>Converts the value of this instance to an <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" /> that has an equivalent value, using the specified culture-specific formatting information.</summary>
      <param name="conversionType">The <see cref="T:System.Type" /> to which the value of this instance is converted.</param>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An <see cref="T:System.Object" /> instance of type <paramref name="conversionType" /> whose value is equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt16(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 16-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 16-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt32(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 32-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 32-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.System#IConvertible#ToUInt64(System.IFormatProvider)">
      <summary>Converts the value of this instance to an equivalent 64-bit unsigned integer using the specified culture-specific formatting information.</summary>
      <param name="provider">An <see cref="T:System.IFormatProvider" /> interface implementation that supplies culture-specific formatting information.</param>
      <returns>An 64-bit unsigned integer equivalent to the value of this instance.</returns>
    </member>
    <member name="M:XSharp.RDD.DbFloat.ToString">
      <summary>Returns the fully qualified type name of this instance.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:XSharp.RDD.DbFloat.Value"></member>
    <member name="T:XSharp.RDD.IBlobData">
      <summary>
            Interface that is used for BLOB operations for memo files
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Data">
      <summary>
            Data to write to the blob file. This can be a BYTE[] but also other values.
            At this moment the FPT RDD supports BYTE[], String, Logic
            Other value types may follow later
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Length">
      <summary>
            Length of the data to write or return. Defaults to all data
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Pointer">
      <summary>
            Pointer for which to write or return the data
            </summary>
    </member>
    <member name="P:XSharp.RDD.IBlobData.Start">
      <summary>
            Start of the data to write or return. Defaults to 0
            </summary>
    </member>
    <member name="T:XSharp.RDD.IDbRow">
      <summary>This interface defines a row in a .Net Table.</summary>
    </member>
    <member name="P:XSharp.RDD.IDbRow.RecNo"></member>
    <member name="T:XSharp.RDD.IMemo">
      <summary>This interface defines the mimimum methods that a RDD that supports memos should implement.</summary>
    </member>
    <member name="M:XSharp.RDD.IMemo.CloseMemFile">
      <summary>Close the memo file</summary>
    </member>
    <member name="M:XSharp.RDD.IMemo.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.Flush">
      <summary>Flush the changes to the memo file </summary>
    </member>
    <member name="P:XSharp.RDD.IMemo.FullPath"></member>
    <member name="M:XSharp.RDD.IMemo.GetValue(System.Int32)">
      <summary>Get a value from a memo file for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">1 based column number for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">1 based column number for which the length should be retrieved.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.PutValue(System.Int32,System.Object)">
      <summary>Write a value to a memo file for a specified column</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the memo file for this column.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">1 based column number for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
    </member>
    <member name="M:XSharp.RDD.IMemo.Zap">
      <summary>Physically remove all memos from the memofile.</summary>
    </member>
    <member name="T:XSharp.RDD.IOrder">
      <summary>This interface defines the mimimum methods that a RDD that supports indexes should implement.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.Flush">
      <summary>Flush the changes to the index.</summary>
    </member>
    <member name="P:XSharp.RDD.IOrder.Found">
      <summary>Result of the last seek operation for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about the current index.</summary>
      <param name="nOrdinal"></param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info"></param>
      <param name="info">An object containing information about the orderlist (file) to delete.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
    </member>
    <member name="M:XSharp.RDD.IOrder.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IOrder.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
    </member>
    <member name="T:XSharp.RDD.IRawData">
      <summary>
            An RDD that implements this interface will return the data for memo fields as BYTE[] when
            the ReturnRawData property is set TRUE
            </summary>
    </member>
    <member name="P:XSharp.RDD.IRawData.ReturnRawData">
      <summary>
            Return Memo values as BYTE[] ?
            </summary>
    </member>
    <member name="T:XSharp.RDD.IRdd">
      <summary>Definition for the interface that each RDD must implement</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.AddField(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Add a column.</summary>
      <param name="info">RddFieldInfo object.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Alias">
      <summary>Retrieve the alias name.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Append(System.Boolean)">
      <summary>Append a blank row and position the cursor to the new row.</summary>
      <param name="lReleaseLock">A flag that is TRUE if you want to clear all pending row locks before appending the new row and FALSE if you want to add the new row to the end of the current lock list.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.AppendLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Add a newly appended row to the list of locked rows.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Area">
      <summary>Retrieve the Workarea number.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.BlobInfo(System.UInt32,System.UInt32)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.BoF">
      <summary>Is the table at the logical beginning-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildEnd(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildStart(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ChildSync(XSharp.RDD.Support.DbRelInfo)">
      <summary>Post a pending relational movement, indicating that the specified child work area has been affected by a parental movement.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearFilter">
      <summary>Clear the active filter condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearRel">
      <summary>Clear relations.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Close">
      <summary>Close a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CloseMemFile">
      <summary>Close the memo file</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Compile(System.String)">
      <summary>Compile an expression.</summary>
      <param name="sBlock">The expression to compile.</param>
    </member>
    <member name="M:XSharp.RDD.IRdd.Continue">
      <summary>Goto the next record based on the corrent locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Create(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create a table.</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CreateFields(XSharp.RDD.Support.RddFieldInfo[])">
      <summary>Add columns defined in an array.</summary>
      <param name="aFields">Array of RddFieldInfo objects.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.DbEval(XSharp.RDD.Support.DbEvalInfo)">
      <summary>Evaluate a code block for each row.</summary>
      <param name="info">object containing the information about which rows to visit.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Delete">
      <summary>Mark the row at the current cursor position for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Deleted">
      <summary>Is the current row deleted?</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.Driver">
      <summary>Driver (RDD) name of the object.</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.EoF">
      <summary>Is the table at the logical end-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.EvalBlock(XSharp.ICodeblock)">
      <summary>Evaluate a code block.</summary>
      <param name="sBlock">The code block to evaluate.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.Exclusive">
      <summary>Is the Workarea opened Exclusively</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.FieldCount">
      <summary>The # of fields in the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldIndex(System.String)">
      <summary>Return the ONE based field index for a field name.</summary>
      <param name="fieldName">The name of the field in the database file structure. When the name is not found it will also check for a field alias with this name.</param>
      <returns>The ONE based position of the field in the database file structure.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldInfo(System.Int32,System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>The current value for the property indicated with &lt;nOrdinal&gt;</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.FieldName(System.Int32)">
      <summary>Retrieve a column name based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose name you want to obtain.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.FilterText">
      <summary>The filter condition as a string.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Flush">
      <summary>Flush the changes to the table, its indexes and memo file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.ForceRel">
      <summary>Force all pending relational seeks to be performed.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Found">
      <summary>The outcome of the last search operation.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetField(System.Int32)">
      <summary>Retrieve the field information for a column based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose info you want to obtain.</param>
      <returns>The Field information for the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetRec">
      <summary>Retrieve the RDD's record buffer as array of bytes.</summary>
      <returns>Record buffer of the RDD. This is the original buffer, so changing this buffer may cause corruption !</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetScope">
      <summary>Retrieve the active locate condition.</summary>
      <returns>The current scope information for the RDD.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValue(System.Int32)">
      <summary>Get a value for the specified column.</summary>
      <param name="nFldPos">The ONE based position of the column whose value you want to obtain.</param>
      <returns>The value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">ONE based position for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
      <returns>TRUE when the operation succeeded. Otherwise FALSE to indicate a failure.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">ONE based position for which the length should be retrieved.</param>
      <returns>The length of the value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoBottom">
      <summary>Position the cursor to the last logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoCold">
      <summary>Write the contents of a work area's memory to the data store (usually a disk).</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoHot">
      <summary>Mark a data buffer as hot, indicating that it needs to be written to the data store.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoTo(System.Int32)">
      <summary>Position the cursor to a specific, physical row.</summary>
      <param name="nRec">The ONE based row number of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoToId(System.Object)">
      <summary>Position the cursor to a specific, physical identity.</summary>
      <param name="oRec">The ONE based row ID of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.GoTop">
      <summary>Position the cursor to the first logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.HeaderLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Lock or unlock the header of a database file.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Info(System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a work area.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="M:XSharp.RDD.IRdd.Lock(XSharp.RDD.Support.DbLockInfo@)">
      <summary>Perform a lock.</summary>
      <param name="uiMode">An object specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Open(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open a table.</summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about an index.</summary>
      <param name="info">An object containing information about the order to retrieve the info for.</param>
      <param name="nOrdinal">Specifies the type of information to retrieve.</param>
      <returns>The requested value for the specified index.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info" />
      <param name="info">An object containing information about the orderlist (file) to delete.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Pack">
      <summary>Physically remove rows marked for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutRec(System.Byte[])">
      <summary>Replace the row at the current cursor position with the contents of a byte array.</summary>
      <param name="aRec">The buffer containing the information that you want to write.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutValue(System.Int32,System.Object)">
      <summary>Write a value for a specified column</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the table this column.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Recall">
      <summary>Remove the deletion marker from the row at the current cursor position.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecCount">
      <summary>The number of rows.</summary>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecId">
      <summary>The row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.RecInfo(System.Int32,System.Object,System.Object)">
      <summary>Retrieve and optionally change information about a row.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oRecid">If specified (not null), then this parameter is used to specify for which object to retrieve the info.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="P:XSharp.RDD.IRdd.RecNo">
      <summary>The physical row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Refresh">
      <summary>Discard all changes to the current record and reread the buffer from disk. When the current buffer is in Append mode then the server will move to the bottom of the file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelArea(System.UInt32)">
      <summary>Retrieve the logical number of a related work area.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the logical number.</param>
      <returns>The area number of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelEval(XSharp.RDD.Support.DbRelInfo)">
      <summary>Evaluate a code block against the relation in a work area.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.RelText(System.UInt32)">
      <summary>Retrieve the key expression of a relation.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the key expression. </param>
      <returns>The key expression of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetFieldExtent(System.Int32)">
      <summary>Set the Number of Fields the AddField Method will add.</summary>
      <param name="fieldCount">Number of fields that will be added.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetFilter(XSharp.RDD.Support.DbFilterInfo)">
      <summary>Set the filter condition.</summary>
      <param name="info">object containing the filter information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetRel(XSharp.RDD.Support.DbRelInfo)">
      <summary>Set a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="info">object containing the scope information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.IRdd.Shared">
      <summary>Is the current Workarea opened Shared?</summary>
    </member>
    <member name="M:XSharp.RDD.IRdd.Skip(System.Int32)">
      <summary>Position the cursor relative to its current position.</summary>
      <param name="nToSkip">The number of rows to skip.
            If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipFilter(System.Int32)">
      <summary>Position the cursor, respecting scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive,
            the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipRaw(System.Int32)">
      <summary>Position the cursor regardless of scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SkipScope(System.Int32)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Sort(XSharp.RDD.Support.DbSortInfo)">
      <summary>Physically reorder a table.</summary>
      <param name="info">An object containing information about now to sort the table.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.SyncChildren">
      <summary>Force relational movement in child work areas to synchronize them with the parent work area.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Trans(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.TransRec(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.UnLock(System.Object)">
      <summary>Release locks.</summary>
      <param name="oRecId">The row number to unlock.  This argument is provided for drivers that support multiple row locks.  By convention, a value of zero indicates that all rows should be unlocked.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.IRdd.Zap">
      <summary>Physically remove all rows from a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="T:XSharp.RDD.RddError">
      <summary>Error subclass used by the RDD system.</summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.Exception,System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.#ctor(System.UInt32,System.UInt32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RddError</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RddError.PostArgumentError(System.String,System.UInt32,System.String,System.UInt32,System.Object[])"></member>
    <member name="M:XSharp.RDD.RddError.PostError(System.String,System.UInt32,System.UInt32)"></member>
    <member name="M:XSharp.RDD.RddError.PostNoTableError(System.String)"></member>
    <member name="T:XSharp.RDD.RegisteredRDD">
      <summary>This class is used to register RDD names with the matching System.Types</summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.#ctor(System.String,System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RegisteredRDD</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.#ctor(System.String,System.Type)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.RegisteredRDD</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Add(XSharp.RDD.RegisteredRDD)">
      <summary>Add a registration for a new RDD.</summary>
      <returns>FALSE when the RDD name is already registered, TRUE when the registration succeeded.</returns>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.Assembly">
      <summary>Assembly object where the RDD is defined</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.AssemblyName">
      <summary>Name of the assembly where the RDD is defined.</summary>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Find(System.String)">
      <summary>Locate an entry for a particular RDD name</summary>
      <returns>NULL when no RDD registration found.</returns>
    </member>
    <member name="M:XSharp.RDD.RegisteredRDD.Load">
      <summary> try to resolve the RDD </summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.RddName">
      <summary>'Common' name of the RDD</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.RddType">
      <summary>Type of the RDD</summary>
    </member>
    <member name="P:XSharp.RDD.RegisteredRDD.TypeName">
      <summary>Fully qualified type name of the RDD</summary>
    </member>
    <member name="T:XSharp.RDD.SQLProperty">
      <summary>Enum that matches the various FoxPro Sql properties, used in SqlGetProp() and SqlSetProp()</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Asynchronous">
      <summary>Specifies whether result sets are returned synchronously.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.BatchMode">
      <summary>Specifies whether SqlExec( ) returns result sets all at once (True (.T.), the default),
            or individually with SqlMoreResults( ) (False (.F.)).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectBusy">
      <summary>Contains True (.T.) if a shared connection is busy; otherwise contains False (.F.).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectString">
      <summary>The login connection string.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ConnectTimeOut">
      <summary>Specifies the time to wait (in seconds) before returning a connection time-out error.
            If you specify 0, the wait is indefinite and a time-out error is never returned. ConnectTimeOut can be 0 to 600. The default is 15.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DataSource">
      <summary>The name of the data source as defined in the ODBC.INI file.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DisconnectRollback">
      <summary>Specifies if a pending transaction is committed or rolled back when SqlDisconnect( ) is called for the last connection handle.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DispLogin">
      <summary>Contains a numeric value that determines when the ODBC Login dialog box is displayed.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.DispWarnings">
      <summary>Specifies if error messages are displayed (True (.T.)) or are not displayed (False (.F.), the default).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.IdleTimeout">
      <summary>The idle timeout interval in minutes. Active connections are deactivated after the specified time interval.
            The default value is 0 (wait indefinitely).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.NativeCommand">
      <summary>The native commandtext in the SQLStatement object.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ODBChdbc">
      <summary>The internal ODBC connection, which may be used by external code to call ODBC.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.ODBChstmt">
      <summary>The internal ODBC statement , which may be used by external code to call ODBC.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.PacketSize">
      <summary>The size of the network packet used by the connection. Adjusting this value can improve performance.
            The default value is 4096 bytes (4K).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Password">
      <summary>The connection password.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.QueryTimeOut">
      <summary>Specifies the time to wait (in seconds) before returning a general time-out error.
            If you specify 0 (the default), the wait is indefinite and a time-out error is never returned. QueryTimeOut can be 0 to 600.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Shared">
      <summary>Specifies whether the underlying connection is a shared connection (True (.T.)), or not (False (.F.)).</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.Transactions">
      <summary>Contains a numeric value that determines how the connection manages transactions on the remote table.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.UserId">
      <summary>The user identification.</summary>
    </member>
    <member name="F:XSharp.RDD.SQLProperty.WaitTime">
      <summary>The amount of time in milliseconds that elapses before Visual FoxPro checks if the SQL statement
            has completed executing. The default is 100 milliseconds.</summary>
    </member>
    <member name="T:XSharp.RDD.Workarea">
      <summary>Base class for DBF based RDDs. Holds common properties such as the Workarea number, Alias, Fields list and various flags.</summary>
    </member>
    <member name="F:XSharp.RDD.Workarea._Fields">
      <summary>List of Fields</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea._getMemoBlockNumber(System.Int32)"></member>
    <member name="M:XSharp.RDD.Workarea.AddField(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Add a column.</summary>
      <param name="info">RddFieldInfo object.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Alias">
      <summary>Retrieve the alias name.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Append(System.Boolean)">
      <summary>Append a blank row and position the cursor to the new row.</summary>
      <param name="lReleaseLock">A flag that is TRUE if you want to clear all pending row locks before appending the new row and FALSE if you want to add the new row to the end of the current lock list.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.AppendLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Add a newly appended row to the list of locked rows.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Area">
      <summary>Retrieve the Workarea number.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.BlobInfo(System.UInt32,System.UInt32)">
      <summary>Retrieve information about a memo column.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
    </member>
    <member name="P:XSharp.RDD.Workarea.BoF">
      <summary>Is the table at the logical beginning-of-file.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.Bottom">
      <summary>Is at bottom ?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildEnd(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildStart(XSharp.RDD.Support.DbRelInfo)">
      <summary>Report the initialization of a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ChildSync(XSharp.RDD.Support.DbRelInfo)">
      <summary>Post a pending relational movement, indicating that the specified child work area has been affected by a parental movement.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearFilter">
      <summary>Clear the active filter condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearRel">
      <summary>Clear relations.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ClearScope">
      <summary>Clear the active locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Close">
      <summary>Close a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Closed">
      <summary>Has the workarea been closed.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.CloseMemFile">
      <summary>Close the memo file</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Compile(System.String)">
      <summary>Compile an expression.</summary>
      <param name="sBlock">The expression to compile.</param>
    </member>
    <member name="M:XSharp.RDD.Workarea.Continue">
      <summary>Goto the next record based on the corrent locate condition.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Create(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create a table.</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.CreateFields(XSharp.RDD.Support.RddFieldInfo[])">
      <summary>Add columns defined in an array.</summary>
      <param name="aFields">Array of RddFieldInfo objects.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.CreateMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Create the memo file</summary>
      <param name="info">object describing the file to create.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.DbEval(XSharp.RDD.Support.DbEvalInfo)">
      <summary>Evaluate a code block for each row.</summary>
      <param name="info">object containing the information about which rows to visit.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Delete">
      <summary>Mark the row at the current cursor position for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Deleted">
      <summary>Is the current row deleted?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Dispose(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocDisposeBool">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </summary>
      <param name="disposing">
        <markup>
          <include item="SMCAutoDocDisposeParam">
            <parameter>XSharp.RDD.Workarea</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:XSharp.RDD.Workarea.Driver">
      <summary>Driver (RDD) name of the object.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.EoF">
      <summary>Is the table at the logical end-of-file.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.EvalBlock(XSharp.ICodeblock)">
      <summary>Evaluate a code block.</summary>
      <param name="sBlock">The code block to evaluate.</param>
    </member>
    <member name="M:XSharp.RDD.Workarea.EvalFilter(XSharp.ICodeblock)"></member>
    <member name="P:XSharp.RDD.Workarea.Exclusive">
      <summary>Is the Workarea opened Exclusively</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FieldCount">
      <summary>The # of fields in the current Workarea.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldIndex(System.String)">
      <summary>Return the ONE based field index for a field name.</summary>
      <param name="fieldName">The name of the field in the database file structure. When the name is not found it will also check for a field alias with this name.</param>
      <returns>The ONE based position of the field in the database file structure.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldInfo(System.Int32,System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a column.</summary>
      <param name="nFldPos">The ONE based position of the field in the database file structure.</param>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
      <returns>The current value for the property indicated with &lt;nOrdinal&gt;</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.FieldName(System.Int32)">
      <summary>Retrieve a column name based on its ONE based column number.</summary>
      <param name="nFldPos">The ONE based position of the column whose name you want to obtain.</param>
      <returns>The name of the column.</returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.FileName">
      <summary>File name of the main file</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FilterInfo">
      <summary>Current Filter</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.FilterText">
      <summary>The filter condition as a string.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Flush">
      <summary>Flush the changes to the table, its indexes and memo file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.ForceRel">
      <summary>Force all pending relational seeks to be performed.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Found">
      <summary>The outcome of the last search operation.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetField(System.Int32)">
      <summary>
            Return the (1 based) RddFieldInfo object for the specified field
            </summary>
      <param name="nFldPos">1 based index</param>
      <returns>FieldInfo object or NULL when the index is not valid</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetRec">
      <summary>Retrieve the RDD's record buffer as array of bytes.</summary>
      <returns>Record buffer of the RDD. This is the original buffer, so changing this buffer may cause corruption !</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetScope">
      <summary>Retrieve the active locate condition.</summary>
      <returns>The current scope information for the RDD.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValue(System.Int32)">
      <summary>Get a value for the specified column.</summary>
      <param name="nFldPos">The ONE based position of the column whose value you want to obtain.</param>
      <returns>The value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValueFile(System.Int32,System.String)">
      <summary>Get the value for a column and write (export) it to an external file.</summary>
      <param name="nFldPos">ONE based position for which the value should be retrieved.</param>
      <param name="fileName">Name of the file that needs to be written to.</param>
      <returns>TRUE when the operation succeeded. Otherwise FALSE to indicate a failure.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GetValueLength(System.Int32)">
      <summary>Get the length of the for the specified column.</summary>
      <param name="nFldPos">ONE based position for which the length should be retrieved.</param>
      <returns>The length of the value of the specified field.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoBottom">
      <summary>Position the cursor to the last logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoCold">
      <summary>Write the contents of a work area's memory to the data store (usually a disk).</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoHot">
      <summary>Mark a data buffer as hot, indicating that it needs to be written to the data store.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoTo(System.Int32)">
      <summary>Position the cursor to a specific, physical row.</summary>
      <param name="nRec">The ONE based row number of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoToId(System.Object)">
      <summary>Position the cursor to a specific, physical identity.</summary>
      <param name="oRec">The ONE based row ID of the new cursor position.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.GoTop">
      <summary>Position the cursor to the first logical row.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.HasProperties">
      <summary>Does the workarea have properties.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.HasRelations">
      <summary>Does the workarea have relations.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.HeaderLock(XSharp.RDD.Enums.DbLockMode)">
      <summary>Lock or unlock the header of a database file.</summary>
      <param name="uiMode">An enum value specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Info(System.Int32,System.Object)">
      <summary>Retrieve and optionally change information about a work area.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="M:XSharp.RDD.Workarea.Lock(XSharp.RDD.Support.DbLockInfo@)">
      <summary>Perform a lock.</summary>
      <param name="uiMode">An object specifying the kind of lock to acquire.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Memo">
      <summary>Current memo implementation.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Open(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open a table.</summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OpenMemFile(XSharp.RDD.Support.DbOpenInfo)">
      <summary>Open the memo file </summary>
      <param name="info">object describing the file to open.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.OrderCondInfo">
      <summary>Current Order condition</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderCondition(XSharp.RDD.Support.DbOrderCondInfo)">
      <summary>Set the condition for the next Index Creation</summary>
      <param name="info">An object containing information for the order condition.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderCreate(XSharp.RDD.Support.DbOrderCreateInfo)">
      <summary>Create a new index or tag.</summary>
      <param name="info">An object containing information for order creation.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderDestroy(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Delete an index or tag.</summary>
      <param name="info">An object containing information about the order to remove.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderInfo(System.UInt32,XSharp.RDD.Support.DbOrderInfo)">
      <summary>Retrieve information about an index.</summary>
      <param name="info">An object containing information about the order to retrieve the info for.</param>
      <param name="nOrdinal">Specifies the type of information to retrieve.</param>
      <returns>The requested value for the specified index.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListAdd(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Open an index file and add to the list of open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the orderlist (file)  to add.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListDelete(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Close an index file and remove it from the list of open indexes for the current Workarea.</summary>
      <param name="info" />
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListFocus(XSharp.RDD.Support.DbOrderInfo)">
      <summary>Set focus to another index in the list open indexes for the current Workarea.</summary>
      <param name="info">An object containing information about the order to select.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.OrderListRebuild">
      <summary>Rebuild all indexes for the current Workarea.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Pack">
      <summary>Physically remove rows marked for deletion.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Properties"></member>
    <member name="M:XSharp.RDD.Workarea.PutRec(System.Byte[])">
      <summary>Replace the row at the current cursor position with the contents of a byte array.</summary>
      <param name="aRec">The buffer containing the information that you want to write.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.PutValue(System.Int32,System.Object)">
      <summary>Write a value for a specified column</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="oValue">New value that needs to written to the table this column.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.PutValueFile(System.Int32,System.String)">
      <summary>Read (Import) a value from an external file and write it to the specified column.</summary>
      <param name="nFldPos">ONE based position for which the value should be written.</param>
      <param name="fileName">Name of the file that needs to be read from.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.ReadOnly">
      <summary> Is the file opened ReadOnly ?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Recall">
      <summary>Remove the deletion marker from the row at the current cursor position.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecCount">
      <summary>The number of rows.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecId">
      <summary>The row identifier at the current cursor position.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.RecInfo(System.Int32,System.Object,System.Object)">
      <summary>Retrieve and optionally change information about a row.</summary>
      <param name="nOrdinal">Specifies the type of information.</param>
      <param name="oRecid">If specified (not null), then this parameter is used to specify for which object to retrieve the info.</param>
      <param name="oValue">If specified (not null), then this parameter is used to change the value of a setting.</param>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecNo">
      <summary>The physical row identifier at the current cursor position.</summary>
    </member>
    <member name="P:XSharp.RDD.Workarea.RecordBuffer">
      <summary>Current Record</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Refresh">
      <summary>Discard all changes to the current record and reread the buffer from disk. When the current buffer is in Append mode then the server will move to the bottom of the file.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelArea(System.UInt32)">
      <summary>Retrieve the logical number of a related work area.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the logical number.</param>
      <returns>The area number of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelEval(XSharp.RDD.Support.DbRelInfo)">
      <summary>Evaluate a code block against the relation in a work area.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.RelText(System.UInt32)">
      <summary>Retrieve the key expression of a relation.</summary>
      <param name="nRelNum">The ONE based relation number for which to obtain the key expression. </param>
      <returns>The key expression of the relation.</returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Seek(XSharp.RDD.Support.DbSeekInfo)">
      <summary>Perform a seek operation on the current selected index for the current Workarea.</summary>
      <param name="info">An object containing containing the necessary seek information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetFieldExtent(System.Int32)">
      <summary>Set the Number of Fields the AddField Method will add.</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetFilter(XSharp.RDD.Support.DbFilterInfo)">
      <summary>Set the filter condition.</summary>
      <param name="info">object containing the filter information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetRel(XSharp.RDD.Support.DbRelInfo)">
      <summary>Set a relation.</summary>
      <param name="info">An object containing information about the relation</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SetScope(XSharp.RDD.Support.DbScopeInfo)">
      <summary>Set the locate condition.</summary>
      <param name="info">object containing the scope information.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Shared">
      <summary>Is the current Workarea opened Shared?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Skip(System.Int32)">
      <summary>Position the cursor relative to its current position.</summary>
      <param name="nToSkip">The number of rows to skip.
            If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipFilter(System.Int32)">
      <summary>Position the cursor, respecting scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive,
            the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipRaw(System.Int32)">
      <summary>Position the cursor regardless of scope and filter conditions.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SkipScope(System.Int32)">
      <summary>Position the cursor relative to its current position within the current scope.</summary>
      <param name="nToSkip">The number of rows to skip.  If this argument is positive, the cursor moves forward (toward the end-of-file).  If it is negative, the cursor moves backward (toward the beginning-of-file).</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Sort(XSharp.RDD.Support.DbSortInfo)">
      <summary>Physically reorder a table.</summary>
      <param name="info">An object containing information about now to sort the table.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.SyncChildren">
      <summary>Force relational movement in child work areas to synchronize them with the parent work area.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="P:XSharp.RDD.Workarea.Top">
      <summary>Is at top?</summary>
    </member>
    <member name="M:XSharp.RDD.Workarea.Trans(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy one or more rows from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.TransRec(XSharp.RDD.Support.DbTransInfo)">
      <summary>Copy a single row from one work area to another.</summary>
      <param name="info">An object containing information about the transfer of data.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.UnLock(System.Object)">
      <summary>Release locks.</summary>
      <param name="oRecId">The row number to unlock.  This argument is provided for drivers that support multiple row locks.  By convention, a value of zero indicates that all rows should be unlocked.</param>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="M:XSharp.RDD.Workarea.Zap">
      <summary>Physically remove all rows from a table.</summary>
      <returns>
        <span>
            TRUE when the operation succeeded or FALSE when the operation failed. <br />
            Some RDD operations do not really return FALSE but throw an exception to indicate failure.<br />
            These exceptions are caught in the higher level code and registered in
            the <see cref="P:XSharp.RuntimeState.LastRddError">LastRddError property in the runtime state.</see>.
        </span>
      </returns>
    </member>
    <member name="T:XSharp.RDD.Enums.AutoShareMode">
      <summary>This enum specifies how files should be opened.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DBFFieldFlags">
      <summary>DBF Field flags.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.System">
      <summary>System Field ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Nullable">
      <summary>Field is Nullable</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Binary">
      <summary>Field is Binary</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.AutoIncrement">
      <summary>Field is AutoIncrement</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Compressed">
      <summary>Field is Compressed (not used yet, for compatibility with Harbour)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Encrypted">
      <summary>Field is Encrypted (not used yet, for compatibility with Harbour)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DBFFieldFlags.Unicode">
      <summary>Field contains Unicode text</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbFieldInfo">
      <summary>This enum specifies the various values that the FieldInfo method for the IRDD interface accepts.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_NAME">
      <summary>Returns the name of the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_TYPE">
      <summary>Returns the data type of the field. This is a single character string such as 'C' or 'N'.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_LEN">
      <summary>Returns the length of the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_DEC">
      <summary> Returns the number of decimal places for the field. </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_ALIAS">
      <summary>Returns and optionally changes an alternate name (or alias) by which a field can be referenced (by default, same as DBS_NAME).  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_FLAGS">
      <summary>Returns the field flags for a field (a value from the DBFFieldFlags enum)  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_ISNULL">
      <summary>Harbour extension: Returns the flag that indicates if a field is Nullable.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_COUNTER">
      <summary>Harbour extension: Returns the next available value for autoincrement fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_STEP">
      <summary>Harbour extension: Returns the step value for autoincrement fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_CAPTION">
      <summary>Foxpro extension: Returns the field caption.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_COLUMNINFO">
      <summary>VFP / SQL extension: Returns the object with the complete column information.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_DESCRIPTION">
      <summary>VFP / SQL extension: Returns a string describing the object (the comment).</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLANK">
      <summary>X# Extension: returns a blank value for the field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_GET">
      <summary>Gets a BLOB value.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_TYPE">
      <summary>Unlike memo fields maintained in .DBT files, BLOB files allow you to store many different types of data in memo fields. This returns type type of the BLOB as a single character string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_LEN">
      <summary>Returns the length of the BLOB data in a memo field as an unsigned long integer.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_OFFSET">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_POINTER">
      <summary>Returns a numeric pointer to the BLOB data associated with a memo field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_DIRECT_TYPE">
      <summary>Returns the type of data in a BLOB as an unsigned long integer, without referencing a particular memo field.   With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(),   or DBFieldInfo(DBS_BLOB_POINTER, &lt;nFieldPos&gt;).  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_BLOB_DIRECT_LEN">
      <summary>Returns the length of data in a BLOB as an unsigned long integer, without referencing a particular memo field.   With this constant, you must specify the BLOB using a numeric pointer obtained from BLOBDirectPut(), BLOBDirectImport(),   or DBFieldInfo(DBS_BLOB_POINTER, &lt;nFieldPos&gt;).  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_STRUCT">
      <summary>Return the RDD FieldInfo structure</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_PROPERTIES">
      <summary>Returns the number of properties defined for a field.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldInfo.DBS_USER">
      <summary>Start of user defined FieldInfo values.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbFieldType">
      <summary>This enum specifies the various field types that can appear in DBF files.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Character">
      <summary>'C', uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Date">
      <summary>'D', 8 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Logic">
      <summary>'L', 1 byte</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Memo">
      <summary>'M', 4 or 10 bytes see Length</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Number">
      <summary>'N', uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VOObject">
      <summary>'O', is anybody using this ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Blob">
      <summary>'W' = Blob 4 or 10 bytes VFP type</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Currency">
      <summary> 'Y'	VFP Type 8 byte </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Double">
      <summary>'B'	VFP Type, also '8'</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.DateTime">
      <summary>'T'	VFP Type can be 4 or 8 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Float">
      <summary>'F'	VFP Type, uses len and dec</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.General">
      <summary>'G'    VFP type Ole 4 or 10 bytes </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Integer">
      <summary>'I'	VFP Type , may be autoInc</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.Picture">
      <summary>'P'	VFP Type, 4 or 10 bytes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VarBinary">
      <summary>'Q'    VFP Type=, between 1 and 255 </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.VarChar">
      <summary>'V'    VFP Type </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbFieldType.NullFlags">
      <summary>'0'    VFP Type, contains Null Flags</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbInfo">
      <summary>
      This enum specifies the various values that the Info method for the IRDD interface accepts.
    </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISDBF">
      <summary>Logical: Is the RDD DBF based ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CANPUTREC">
      <summary>Logical: Does the RDD support the PutRec mechanism ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETHEADERSIZE">
      <summary>Numeric: Get header size of the file  ?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LASTUPDATE">
      <summary>Date:    Last date RDD file updated  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETDELIMITER">
      <summary>String:  Get default FIELD delimiter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SETDELIMITER">
      <summary>String:  Set default FIELD delimiter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETRECSIZE">
      <summary>Numeric: Get record size </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETLOCKARRAY">
      <summary>Array:   Get array of locked records</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TABLEEXT">
      <summary>String:  Get table file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_READONLY">
      <summary>String:  Get table file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISFLOCK">
      <summary>Logic: Is there a file lock active? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FILESTREAM">
      <summary>Stream: The RDDs stream object</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CHILDCOUNT">
      <summary>Number: Number of child relations set</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FILEHANDLE">
      <summary>IntPtr: The data file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FULLPATH">
      <summary>String: Full path to data file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISANSI">
      <summary>Logic: Is the file ansi encoded</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BOF">
      <summary>Logic: Same as Bof()</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_EOF">
      <summary>Logic: Same as Eof()</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DBFILTER">
      <summary>String: Current Filter setting </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FOUND">
      <summary>Logic: Same as Found() </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_FCOUNT">
      <summary>Number: Number of fields per record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKCOUNT">
      <summary>Number: Number of record locks  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_VALIDBUFFER">
      <summary>Logic: Is the buffer Valid</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ALIAS">
      <summary>String: Alias</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_GETSCOPE">
      <summary>Object: The ScopeInfo</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKOFFSET">
      <summary>Number: Lock offset</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SHARED">
      <summary>Logic: is the file opened shared</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOEXT">
      <summary>String: Memo file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOHANDLE">
      <summary>Intptr: The memo file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BLOB_HANDLE">
      <summary>Intptr: The memo file's handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOBLOCKSIZE">
      <summary>Number: The memo block size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CODEPAGE">
      <summary>Number: The Windows Codepage</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DOSCODEPAGE">
      <summary>Number: The DOS Codepage</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_BLOB_RECOVER">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_NEWINDEXLOCK">
      <summary>Logic:  Use new index lock mechanism</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_STRICTREAD">
      <summary>Flag for avoiding RDD hierarchy and using a bigger buffer when indexing</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_OPTIMIZE">
      <summary>Flag for whether to use query optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOOPEN">
      <summary>Flag for automatically opening structural indexes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOORDER">
      <summary>Should the order be set to the first index when a structural index is opened</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_AUTOSHARE">
      <summary>When a network is detected, open the index shared, otherwise open exclusively</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOSTREAM">
      <summary>Stream: The memo file's stream</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOPATH">
      <summary>Stream: The memo file name</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DB_VERSION">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_VERSION">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_LIST">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOFIELD">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_VO_MACRO_SYNTAX">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RDD_OBJECT">
      <summary>Returns RDD Object.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKSCHEME">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISREADONLY">
      <summary>Harbour extension: Was the file opened readonly?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ROLLBACK">
      <summary>Harbour extension: Rollback changes made to current record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_PASSWORD">
      <summary>Harbour extension: orkarea password </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISENCRYPTED">
      <summary>Harbour extension: The database is encrypted</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOTYPE">
      <summary>Harbour extension: Type of MEMO file: DBT, SMT, FPT</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SEPARATOR">
      <summary>Harbour extension: The record separator (as a string)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOVERSION">
      <summary>Harbour extension: sub version of memo file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TABLETYPE">
      <summary>Harbour extension: Type of table file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SCOPEDRELATION">
      <summary>Harbour extension: Is given relation scoped</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TRIGGER">
      <summary>Harbour extension: Get/Set trigger function</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_OPENINFO">
      <summary>Harbour extension: DBOPENINFO structure pointer</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ENCRYPT">
      <summary>Harbour extension: Encrypt table</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DECRYPT">
      <summary>Harbour extension: Decrypt table</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_MEMOPACK">
      <summary>Harbour extension: Pack memo file </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_DIRTYREAD">
      <summary>Harbour extension: Get/Set index dirty read flag</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_POSITIONED">
      <summary>Harbour extension: Is cursor positioned to valid record</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_ISTEMPORARY">
      <summary>Harbour extension: Is the table a temporary one?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_LOCKTEST">
      <summary>Harbour extension: record / file lock test</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_CODEPAGE_HB">
      <summary>Harbour extension: Codepage used also memberd by VO and Vulcan</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_TRANSREC">
      <summary>Harbour extension: Is it destination table of currently processed COPY TO or APPEND FROM operation?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_SETHEADER">
      <summary>Harbour extension: DBF header updating modes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_SUPPORTED">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_CREATE">
      <summary>Harbour record map extension: create new empty work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_REMOVE">
      <summary>Harbour record map extension: remove active work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_CLEAR">
      <summary>Harbour record map extension: remove all records from WA record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_FILL">
      <summary>Harbour record map extension: add all records to WA record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_ADD">
      <summary>Harbour record map extension: add record to work area record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_DROP">
      <summary>Harbour record map extension: remove record from work area record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_TEST">
      <summary>Harbour record map extension: test if record is set in WA record map</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_COUNT">
      <summary>Harbour record map extension: number of records set in record map </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RM_HANDLE">
      <summary>Harbour record map extension: get/set record map filter handle</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_QUERY">
      <summary>if area represents result of a query, obtain expression of this query </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_REFRESH">
      <summary>Refresh the current data in the SQLRDD</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_INFO_HANDLE">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_FILE_RECOVER">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_FILE_INTEGRITY">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_OFFSET">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_POINTER">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_LEN">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_TYPE">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_UNLOCK">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_PUT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_GET">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_ROOT_LOCK">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_IMPORT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_PUT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_GET">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_GET">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_EXPORT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_IMPORT">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_NMODE">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT_APPEND">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_EXPORT_OVERWRITE">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_TYPE">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_DIRECT_LEN">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.BLOB_USER">
      <summary />
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_USER">
      <summary>Start of user defined DBI values</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_AND">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_CLEAR">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_COUNT">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_DESTROY">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_EXFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_GETFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_HASMAYBE">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_LEN">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_MAYBEEVAL">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEW">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEWDUP">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEWQUERY">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NEXTRECNO">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_NOT">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_OR">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_PREVRECNO">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_SET">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_SETFILTER">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_TEST">
      <summary>Clipmore extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_HITS">
      <summary>Recordlist extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_MISSES">
      <summary>Recordlist extension: </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbInfo.DBI_RL_ENABLE">
      <summary>Recordlist extension: </summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbLockMode">
      <summary>This enum specifies the lock modes.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbNotificationType">
      <summary>Enum that described the possible Notification messages that are sent to clients of Workareas</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileCreate">
      <summary>This message is sent after a file was created. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileOpen">
      <summary>This message is sent after a file was opened. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileClose">
      <summary>This message is sent after a file is closed. The Data parameter is the name of the file that was closed.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexCreate">
      <summary>This message is sent after an index was created. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexDelete">
      <summary>This message is sent after an index was deleted. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexOpen">
      <summary>This message is sent after an index was opened. The Data parameter is the name of the file that was opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.IndexClose">
      <summary>This message is sent after an index was closed. The Data parameter is the name of the file that was closed.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeBulkOperation">
      <summary>This message is sent before a bulk operation is started. The Data parameter is a description of the operation.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterBulkOperation">
      <summary>This message is sent after a bulk operation was completed. The Data parameter is a description of the operation.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.OrderChanged">
      <summary>This message is sent after an order was changed. The Data parameter is the name of the new order.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeFieldUpdate">
      <summary>This message is sent before a field is updated The Data parameter is the fieldname of the field that was updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterFieldUpdate">
      <summary>This message is sent after a field was updated The Data parameter is the fieldname of the field that was updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeMove">
      <summary>This message is sent before the record pointer is moved. The Data parameter indicates the reason for the move</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterMove">
      <summary>This message is sent after the record pointer was moved. The Data parameter indicates the reason for the move</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordAppended">
      <summary>This message is sent after a new record was appended. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterRecordDeleted">
      <summary>This message is sent after a record was deleted. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordDeleted">
      <summary>This message is sent after a record was deleted. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.AfterRecordRecalled">
      <summary>This message is sent after a record was recalled. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordRecalled">
      <summary>This message is sent after a record was recalled. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordLocked">
      <summary>This message is sent after a record was locked. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.RecordUnLocked">
      <summary>This message is sent after a record was unlocked. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.FileCommit">
      <summary>This message is sent after a Workarea was commited. The Data parameter is the file name of area.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeRecordDeleted">
      <summary>This message is sent before a record is deleted. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.BeforeRecordRecalled">
      <summary>This message is sent before a record is recalled. The Data parameter is the record number of the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbNotificationType.OperationFailed">
      <summary>This message is sent after an operation failed. The Data parameter is the description of the operation.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbOrder_Info">
      <summary>This enum specifies the various values that the OrderInfo method for the IRDD interface accepts.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_CONDITION">
      <summary>String: The order's conditional expression</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_EXPRESSION">
      <summary>String: The order's key expression</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_POSITION">
      <summary>Number: The current key position in scope and filter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYGOTO">
      <summary>Alias for DBOI_POSITION</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYNO">
      <summary>Alias for DBOI_POSITION</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_RECNO">
      <summary>Number: The current key position disregarding filters</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_NAME">
      <summary>String: The name of the order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_NUMBER">
      <summary>Number: The numeric position in the list of orders</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_BAGNAME">
      <summary>String: The name of the file containing this order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_INDEXNAME">
      <summary>Alias for DBOI_BAGNAME</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_BAGEXT">
      <summary>String: The extension of the file containing this order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_INDEXEXT">
      <summary>Alias for DBOI_BAGEXT</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_DEFBAGEXT">
      <summary>String: The defauly index extension </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_COLLATION">
      <summary>FoxPro CDX Index collation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FULLPATH">
      <summary>String: The full path to the index file (Bag)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FILEHANDLE">
      <summary>IntPtr: The handle of the index</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ISDESC">
      <summary>Logic : Is the order DESCENDing? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ISCOND">
      <summary>Logic : Does the order have a FOR condition?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYTYPE">
      <summary>The type of the order's key  (usualType value)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYSIZE">
      <summary>Number: The length of the order's key</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYCOUNT">
      <summary>Number: The count of keys in scope and filter</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SETCODEBLOCK">
      <summary>Block : The codeblock that produces the key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYDEC">
      <summary>Number: The # of decimals in a numeric key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_HPLOCKING">
      <summary>Logic : Using High Performance locking for this order?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_LOCKOFFSET">
      <summary>Number: The offset used for logical locking </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYADD">
      <summary>Logic: Custom Index: Add key  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYDELETE">
      <summary>Logic: Custom Index: Delete key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYVAL">
      <summary>Object: The value of the current key </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPETOP">
      <summary>Object: Get or Set the scope top    </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPEBOTTOM">
      <summary>Object: Get or Set the scope bottom</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPETOPCLEAR">
      <summary>Void: Clear top scope</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SCOPEBOTTOMCLEAR">
      <summary>Void: Clear Bottom scope</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_UNIQUE">
      <summary>Logic : Does the order have the UNIQUE attribute?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_ORDERCOUNT">
      <summary>Number: The count of ORDERS contained in an index file or in total</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_CUSTOM">
      <summary>Logic: Is this a Custom Index?  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_SKIPUNIQUE">
      <summary>Logic: Was a skip to adjacent unique Key successful?  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYSINCLUDED">
      <summary>Number: Number of keys in the index order</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYNORAW">
      <summary>Number: The key number disregarding filters</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_OPTLEVEL">
      <summary>Number: Optimization level for current query</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_KEYCOUNTRAW">
      <summary>Number: The key count disregarding filter  </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_FILESTREAM">
      <summary>FileStream: The stream object of the index</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_STRICTREAD">
      <summary>The following numbers are reserved but not implemented yet.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_DUMP">
      <summary>Dump the current order to a text file in the folder of the index.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_VALIDATE">
      <summary>Logic: Validate the current order. Errors are written to a text file in the folder of the index. Only supported by DBFCDX</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbOrder_Info.DBOI_USER">
      <summary>Start of user defined values</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbRecordInfo">
      <summary>
      This enum specifies the various values that the RecordInfo method for the IRDD interface accepts.
    </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_DELETED">
      <summary>Gets the deleted flag for the record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_LOCKED">
      <summary>Gets the locked state for the record. You may specify a specific record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RECSIZE">
      <summary>Gets the record size. You may specify a specific record.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RECNO">
      <summary>Gets the record number.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_UPDATED">
      <summary>Gets/Sets a boolean indicating if the current record is updated.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_BUFFPTR">
      <summary>Gets the buffer used by the RDD system for the record data. This is an array of bytes in X#.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_ENCRYPTED">
      <summary>Harbour: Is the current record encrypted?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWMEMOS">
      <summary>Harbour extension: Return all the memos in the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWDATA">
      <summary>Harbour extension: Return the current record and all the memos in the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_RAWRECORD">
      <summary>Harbour extension: Return the current record as one string.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbRecordInfo.DBRI_USER">
      <summary>Offset of user defined values.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbSortFlags">
      <summary>Flags that describe how a DbSort operation can be done.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Default">
      <summary>An ascending sort (default)   </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Case">
      <summary> A case-insensitive sort        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Numeric">
      <summary>A sort with printable numerics        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Ascii">
      <summary>A sort for ASCII (not nation-dependent)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Long">
      <summary>A sort with long integer values        </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbSortFlags.Descending">
      <summary>A descending sort        </summary>
    </member>
    <member name="T:XSharp.RDD.Enums.DbTransInfoFlags">
      <summary>Flags that describe how a DbTrans operation can be done.</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.None">
      <summary>Default</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.SameStructure">
      <summary>Both this work area and the destination work area have identical row structures (i.e., all columns match).</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.DbTransInfoFlags.CanPutRec">
      <summary>The RDD has the ability to transfer an entire row.</summary>
    </member>
    <member name="T:XSharp.RDD.Enums.RddInfo">
      <summary>
      This enum specifies the various values that the RDDInfo method for the IRDD interface accepts.
      <note type="tip">
        These enums are also available as DEFINES and can therefore also be used without the "RDDInfo." prefix.
      </note></summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ISDBF">
      <summary>Does this RDD support DBFs?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CANPUTREC">
      <summary>Can this RDD Put Records?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DELIMITER">
      <summary>The field delimiter (as a string)</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SEPARATOR">
      <summary>The record separator (as a string) </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TABLEEXT">
      <summary>Default data file's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOEXT">
      <summary>Default memo file's file extension </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDBAGEXT">
      <summary>Default multi tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDEREXT">
      <summary>default single tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ORDSTRUCTEXT">
      <summary>default single tag index's file extension</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCAL">
      <summary>Local file access?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_REMOTE">
      <summary>Remote table access? </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CONNECTION">
      <summary>Get/Set default connection</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TABLETYPE">
      <summary>Type of table file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOTYPE">
      <summary>Type of MEMO file DB_MEMO_*: DBT, SMT, FPT(FP,SIX3,FLEXIII) </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LARGEFILE">
      <summary>Is large file size (&gt;=4GB) supported</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCKSCHEME">
      <summary>Locking scheme used by RDD</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_RECORDMAP">
      <summary>Does RDD support record map functionality?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ENCRYPTION">
      <summary>Does RDD support encryption</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_TRIGGER">
      <summary>Get/Set default trigger function</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOLOCK">
      <summary>automatic locking on update</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRUCTORD">
      <summary>Are structural indexes supported</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRICTREAD">
      <summary>Flag for avoiding RDD hierarchy and using a bigger buffer when indexing</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_STRICTSTRUCT">
      <summary>Flag for strict structural order checking</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_OPTIMIZE">
      <summary>Flag for whether to use query optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_FORCEOPT">
      <summary>Flag for forcing linear optimization</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOOPEN">
      <summary>Flag for automatically opening structural indexes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOORDER">
      <summary>When a structural index is opened, the order to be set</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AUTOSHARE">
      <summary>When a network is detected, open the index shared, otherwise open exclusively</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MULTITAG">
      <summary>Does RDD support multi tag in index file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SORTRECNO">
      <summary>Is record number part of key in sorting</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MULTIKEY">
      <summary>Does custom orders support repeated keys?</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOBLOCKSIZE">
      <summary>Memo File's block size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOVERSION">
      <summary>sub version of memo file</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOGCTYPE">
      <summary>type of garbage collector used by GC</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOREADLOCK">
      <summary>use read lock in memo file access</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_MEMOREUSE">
      <summary>reuse free space on write</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_BLOB_SUPPORT">
      <summary>can support BLOB files directly</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PENDINGTRIGGER">
      <summary>set pending trigger for next open operation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PENDINGPASSWORD">
      <summary>set pending password for next open operation</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_PASSWORD">
      <summary>Get/Set default password</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_LOCKRETRY">
      <summary>Get/Set record and file lock timeout value</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DIRTYREAD">
      <summary>Get/Set index dirty read flag</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_INDEXPAGESIZE">
      <summary>Get/Set default index page size</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DECIMALS">
      <summary>Get/Set default number of decimal places for numeric fields if it's undefined</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_SETHEADER">
      <summary>DBF header updating modes</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_CONNECT">
      <summary>connect to database</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_DISCONNECT">
      <summary>disconnect from database</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_EXECUTE">
      <summary>execute SQL statement </summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ERROR">
      <summary>error number</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_ERRORNO">
      <summary>error description</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_INSERTID">
      <summary>last auto insert ID</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_AFFECTEDROWS">
      <summary>number of affected rows after UPDATE</summary>
    </member>
    <member name="F:XSharp.RDD.Enums.RddInfo.RDDI_QUERY">
      <summary>last executed query</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbEvalInfo">
      <summary>Helper class to store the scope and codeblock for a DbEval() operation. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbEvalInfo.#ctor">
      <summary>Construct a DbEvalInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbEvalInfo.Block">
      <summary>A code block to be evaluated with DbEval() on each row of the work area that is in the range defined by ScopeInfo.  </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbEvalInfo.ScopeInfo">
      <summary>A DbScopeInfo structure limiting the evaluation of Block.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbFilterInfo">
      <summary>Helper class to store a filter condition for a table.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.#ctor">
      <summary>Construct a DbFilterInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.Active">
      <summary>A flag that is TRUE if a filter is active.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Clear">
      <summary>Clear the filter fields.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Clone">
      <summary>Clone the filter object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbFilterInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.FilterBlock">
      <summary>A code block representing the condition that is evaluated at each cursor location.  If the result of the evaluation is FALSE, the cursor location requested is invalid according to the current filter condition.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.FilterText">
      <summary>A string representing the source code for itmCobExpr.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbFilterInfo.Optimized">
      <summary>A flag that is TRUE if a filter is optimized.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbLockInfo">
      <summary>Helper structure to store information needed to lock a row or table for exclusive access.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.Method">
      <summary>A constant indicating the type of lock to obtain.  The possible values are of the Lockmethod enum. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.RecId">
      <summary>An Item indicating the ID of the row to lock.  This member is meaningful only if Method is set to EXCLUSIVE or MULTIPLE. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.Result">
      <summary>A flag that is TRUE if the lock operation was successful.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbLockInfo.LockMethod">
      <summary>List of possible Locking Methods </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.Exclusive">
      <summary>Lock a row, releasing currently locked rows.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.Multiple">
      <summary>Lock a row, maintaining currently locked rows.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbLockInfo.LockMethod.File">
      <summary>Lock a table, releasing locks currently held.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOpenInfo">
      <summary>Helper class to store information needed to open a table.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOpenInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.#ctor(System.String,System.String,System.UInt32,System.Boolean,System.Boolean)">
      <summary>Construct a DbOpenInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Alias">
      <summary>Unique Alias that the table has. This must be a valid XBase Identifier</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOpenInfo.Clone"></member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Extension">
      <summary>The extension for the table that must be opened.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOpenInfo.FileMode">
      <summary>Return the numeric FileMode based on the Shared and Readonly flags </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.FileName">
      <summary>The filename (optionally includig a path) for the table that must be opened. Does not have an extension.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOpenInfo.FullName">
      <summary>Construct a DbOpenInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.ReadOnly">
      <summary>Should the table be opened Readonly?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Shared">
      <summary>Should the table be opened Shared?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOpenInfo.Workarea">
      <summary>Workarea number in which the table will be opened.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderCondInfo">
      <summary>Helper class to store information needed to create a conditional order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderCondInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Active">
      <summary> A flag that is TRUE if one or more valid conditions have been specified in the structure. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Additive">
      <summary> A flag that is TRUE if open orders should remain open while the new order is being created. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.All">
      <summary> A flag that is TRUE if all rows are to be processed during order creation. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Clone"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Collation">
      <summary>
            Collation for the FoxPro INDEX ON command
            </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Custom">
      <summary>A flag that is TRUE if the new order will be a custom built order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Descending">
      <summary> A flag that is TRUE if the order should be created in descending order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.EvalBlock">
      <summary>A code block defining the expression to evaluate every StepSize rows during the creation of the order.  The code block referenced should return a logical value: TRUE indicates that creation of the order should continue normally, and FALSE indicates that order creation should terminate. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.ForBlock">
      <summary>A code block defining the for condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.ForExpression">
      <summary>A string defining the for condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.IsBinary">
      <summary>
            Binary option for the FoxPro INDEX ON command
            </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.IsCandidate">
      <summary>
            Candidate option for the FoxPro INDEX ON command
            </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.IsCompact">
      <summary>
            Compact option for the FoxPro INDEX ON command
            </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.NextCount">
      <summary>The number of rows to process for order creation.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.NoOptimize">
      <summary>A flag that is TRUE if the for condition may NOT be optimized,</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.RecNo">
      <summary> A single row number to include in the order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Rest">
      <summary>A flag that is TRUE if only the rows specified by lStartRecno through end-of-file are to be included in the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.Scoped">
      <summary>A flag indicating whether the order is to be scoped. fScoped will be TRUE if WhileBlock, NextCount, Recno, Rest, or All is specified.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.StartRecNo">
      <summary>The row at which to begin processing when either the NextCount or Rest scoping options are specified.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.StepSize">
      <summary>The frequency of the evaluation of EvalBlock. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.UseCurrent">
      <summary>A flag that is TRUE if only rows in the controlling order are to be included in the order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCondInfo.Validate"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.WhileBlock">
      <summary>A code block defining the while condition to use for the creation of the order.  An empty value indicates that no while condition is being imposed.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCondInfo.WhileExpression">
      <summary>A string defining the for while condition to use for the creation and maintenance of the order.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderCreateInfo">
      <summary>Helper class to store information needed to create a new order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderCreateInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.BagName">
      <summary>The index file name.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Block">
      <summary>A code block containing the key expression defining the order imposed on the work area. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.Clone"></member>
    <member name="M:XSharp.RDD.Support.DbOrderCreateInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Expression">
      <summary>The key expression defining the order.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.OrdCondInfo">
      <summary>A DbOrderCondInfo object containing information about the condition (if any) for the order. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Order">
      <summary>The order name or number to create in BagName.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderCreateInfo.Unique">
      <summary>A flag that is TRUE if the order should contain only unique keys. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbOrderInfo">
      <summary>Helper class to store information needed to open/address an order.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbOrderInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.AllTags">
      <summary>A flag that is TRUE if all tags of the index file must be opened.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.BagName">
      <summary>The index file name.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbOrderInfo.Clone"></member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Expression">
      <summary>A code block containing the key expression defining the order imposed on the work area.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbOrderInfo.IsEmpty"></member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Order">
      <summary>An object containing the order name or number</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbOrderInfo.Result">
      <summary>Return value for some order operations.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbRelInfo">
      <summary>Helper class to store a list of relational information.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>XSharp.RDD.Support.DbRelInfo</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Block">
      <summary>A code block used to reposition the cursor of the child table when this relation is resolved.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Child">
      <summary>A reference to the child RDD for the relation.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.Clone"></member>
    <member name="M:XSharp.RDD.Support.DbRelInfo.Compile"></member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Key">
      <summary>The expression used to reposition the cursor of the child table when this relation is resolved.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Name">
      <summary>name of the relation. Defaults to the parent alias = '_' + child alias.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbRelInfo.Parent">
      <summary>A reference to the parent RDD for the relation.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbScopeInfo">
      <summary>Helper class to store references to all of the scope clause expressions. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.#ctor">
      <summary>Construct a DbScopeInfo object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Clear">
      <summary>Clear the scope fields.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Clone">
      <summary>Clone the scopeinfo object.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbScopeInfo.Compile(XSharp.RDD.IRdd)"></member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.ForBlock">
      <summary>A code block representing the conditional for clause.  A for condition is, essentially, a filter that hides rows for which the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.ForExpression">
      <summary>A string representing the conditional for clause.  A for condition is, essentially, a filter that hides rows for which the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IgnoreDuplicates">
      <summary>A flag that is TRUE if a process should ignore duplicate key values.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IgnoreFilter">
      <summary>A flag that is TRUE if a process should ignore any filter condition imposed on the current work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.IncludeDeleted">
      <summary> A flag that is TRUE if a process should include deleted rows. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.Last">
      <summary>A flag that is TRUE if the last row of the current scope is required. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.NextCount">
      <summary>Permits continuation of a process for the next lNext rows, while obeying for and while clauses.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.RecId">
      <summary>Permits continuation of a process for a single row number, while obeying for and while clauses.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.Rest">
      <summary>A flag that is TRUE if a process should continue stepping through data from the current work area cursor position until logical end-of-file. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.WhileBlock">
      <summary>A code block representing the conditional while clause.  A while condition permits continuation of a process that steps through rows until the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbScopeInfo.WhileExpression">
      <summary>A string representing the conditional while clause.  A while condition permits continuation of a process that steps through rows until the condition evaluates to FALSE.  The string value is provided for storage, while the code block is provided as a parameter for the EvalBlock() method.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSeekInfo">
      <summary>Helper structure to store information needed to perform a seek operation </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.Last">
      <summary>A flag that is TRUE if the last occurrence of the specified key value is to be sought, rather than the first.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.SoftSeek">
      <summary>A flag that is TRUE if a soft seek is to be performed. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSeekInfo.Value">
      <summary>An object containing the key value to find.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSortInfo">
      <summary>Helper class to store information needed to perform a physical sort. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbSortInfo.#ctor(System.Int32,System.Int32)">
      <summary>Construct a DbSortInfo object.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbSortInfo.ItemCount">
      <summary>Number of items in the Items array. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortInfo.Items">
      <summary>An array of DbSortItem structures defining the key values for the sort.  Note that the key values are processed in the order that they appear in this array. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortInfo.TransInfo">
      <summary>A DbTransInfo object holding the destination work area, column transfer information, and scoping information for the Sort() method. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbSortItem">
      <summary>Helper structure to store information about a single sort key value. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.FieldNo">
      <summary>A one-based index indicating the column on which the sort is based. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.Flags">
      <summary>One or more constants that function as sort optimization and control flags.
            They are passed to your RDD Sort() routine from the high-level wrapper function for the DBSort() function.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.Length">
      <summary>The length of the field in the Workarea buffer.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbSortItem.OffSet">
      <summary>The offset of the field in the Workarea buffer.</summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbTransInfo">
      <summary>Helper class to store information needed for the global transfer of data items from one work area to another. </summary>
    </member>
    <member name="M:XSharp.RDD.Support.DbTransInfo.#ctor(System.Int32)">
      <summary>Construct a DbTransInfo object.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Destination">
      <summary>The destination work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Flags">
      <summary>Transfer attributes specified using one or more of the constants Match or PutRec. </summary>
    </member>
    <member name="P:XSharp.RDD.Support.DbTransInfo.ItemCount">
      <summary>Number of items in the Items array.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Items">
      <summary>An array of DbTransItem structures defining the items to transfer to the destination work area. This is usually a list of column mappings from the source to the destination. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Scope">
      <summary>A DbScopeInfo object describing the limits of the scope of the transfer. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransInfo.Source">
      <summary>The source work area. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.DbTransItem">
      <summary>Helper structure to store information about a single piece of data (usually a column) to transfer from one work area to another.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransItem.Destination">
      <summary>A one-based field index in the destination work area. </summary>
    </member>
    <member name="F:XSharp.RDD.Support.DbTransItem.Source">
      <summary>A one-based field index in the source work area. </summary>
    </member>
    <member name="T:XSharp.RDD.Support.RddFieldInfo">
      <summary>Helper class for the RDD system to store field information</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="sName">Name</param>
      <param name="sType">Type, may also contain flags in the form of a colon follwed by N,0,B,+,Z,E,U</param>
      <param name="nLength">Length 'DBF style', so length in Buffer</param>
      <param name="nDecimals">Number of decimals. </param>
      <param name="nOffSet">Offset in record buffer (optional).</param>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(System.String,XSharp.RDD.Enums.DbFieldType,System.Int32,System.Int32,System.Int32,XSharp.RDD.Enums.DBFFieldFlags)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="sName">Name</param>
      <param name="nType">Type</param>
      <param name="nLength">Length 'DBF style', so length in Buffer</param>
      <param name="nDecimals">Number of decimals. </param>
      <param name="nOffSet">Offset in record buffer (optional)</param>
      <param name="nFlags">Flags (optional)</param>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.#ctor(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Construct a RddFieldInfo object.</summary>
      <param name="oInfo">Object to copy values from.</param>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Alias">
      <summary>Alternative name, no length limit. This is the Caption for VFP fields</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.BlankValue">
      <summary>Return the blank (non null) value of the column.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.CanSort">
      <summary>Can the field be sorted?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Caption">
      <summary>Dynamic property for the Caption. Read from the VFP properties collection.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.Clone">
      <summary>Clone a RddFieldInfo object.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.ColumnName">
      <summary>Dynamic property for the ColumnName. Read from the VFP properties collection.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.CopyValues(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Copy values from one object to another.</summary>
      <param name="oInfo">Object to copy values to.</param>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Decimals">
      <summary>Decimal positions</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.DefaultValue">
      <summary>Dynamic property for the DefaultValue. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Description">
      <summary>Dynamic property for the Description. Read from the VFP properties collection.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.FieldType">
      <summary>Field Type</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.FieldTypeFlags">
      <summary>FieldType as a string</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.FieldTypeStr">
      <summary>Field type as 1 character string.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.FindType(System.String)"></member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Flags">
      <summary>Flags, such as Nullable, AutoIncrement, Binary etc.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Format">
      <summary>Dynamic property for the Format. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.HasProperties">
      <summary>Does the field have properties.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.InputMask">
      <summary>Dynamic property for the InputMask. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsAutoIncrement">
      <summary>Is it an autoincrement ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsBinary">
      <summary>Is it binary ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsCompressed">
      <summary>Is it a  compressed field (not implemented yet) ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsEncrypted">
      <summary>Is it an encryped field (not implemented yet)?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsMemo">
      <summary>Is it a memo ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsNullable">
      <summary>Is it nullable ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsStandard">
      <summary>Is it a standard Dbase 3 field (CDLMN) ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsUnicode">
      <summary>Is it a unicode text ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsUnique">
      <summary>Dynamic property for the IsUnique. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsVarLength">
      <summary>Is it a variable length field ?</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.IsVfp">
      <summary>Is it a VFP extended field ?</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Length">
      <summary>Physical length in the table</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Name">
      <summary>Name, normally max 10 characters</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.NextValue">
      <summary>Next key for autoincrement columns.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Offset">
      <summary>Offset in the record buffer for DBF fields.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.Ordinal">
      <summary>1 based Ordinal position in the RDD.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.PrimaryKey">
      <summary>Dynamic property for the PrimaryKey. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.Properties">
      <summary>Dynamic list of optional properties, such as Caption, Description.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.RuleExpression">
      <summary>Dynamic property for the RuleExpression. Read from the VFP properties collection.</summary>
    </member>
    <member name="P:XSharp.RDD.Support.RddFieldInfo.RuleText">
      <summary>Dynamic property for the RuleText. Read from the VFP properties collection.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.SameType(XSharp.RDD.Support.RddFieldInfo)">
      <summary>Check if two fields match in type, length and decimals.</summary>
    </member>
    <member name="F:XSharp.RDD.Support.RddFieldInfo.StepValue">
      <summary>Step value for autoincrement columns.</summary>
    </member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.ToString"></member>
    <member name="M:XSharp.RDD.Support.RddFieldInfo.Validate">
      <summary>Validate combinations of type, length and decimals.</summary>
    </member>
  </members>
</doc>