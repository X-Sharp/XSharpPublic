<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2023-05-19T12:44:11.501+02:00" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Special classes and code generated by the compiler</title>
  <keywords>
    <keyword>$AppExit()</keyword>
    <keyword>$AppInit()</keyword>
    <keyword>$Exit</keyword>
    <keyword>$Init1</keyword>
    <keyword>$Init2</keyword>
    <keyword>$Init3</keyword>
    <keyword>$PCall$&lt;FunctionName&gt;$&lt;suffix&gt;</keyword>
    <keyword>$PCallNative$&lt;FunctionName&gt;$&lt;suffix</keyword>
    <keyword>_CAST</keyword>
    <keyword>&lt;&gt;ClassName</keyword>
    <keyword>&lt;AssemblyName&gt;.Functions</keyword>
    <keyword>Clipper calling convention</keyword>
    <keyword>Functions$&lt;ModuleName&gt;$</keyword>
    <keyword>PSZ</keyword>
    <keyword>RunInitProcs()</keyword>
    <keyword>String2Psz</keyword>
    <keyword>Xs$Args</keyword>
    <keyword>Xs$PSZLiteralsTable</keyword>
    <keyword>Xs$SymbolTable</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">Special classes and code generated by the compiler</para>
    </header>
    <para styleclass="Normal">The compiler may generate some special classes for optimization. Some of these classes are generated by Roslyn (such as the classes for Lambda expressions or the state machines for asynchronous code). Others are generated by the X# compiler.</para>
    <para styleclass="Normal">Below are some examples of these classes (that you can see if you open a X# compiler assembly with a tool such as IlSpy)</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="11" colcount="2">
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Class</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal"><text style="font-weight:bold;">Purpose</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">Xs$PSZLiteralsTable</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">This class is generated by the compiler if you have code in your application that looks like this:</para>
          <para styleclass="Normal"><br/><text styleclass="Code Example" style="font-size:12pt; font-weight:normal; font-style:normal; color:#000000;">LoadLibrary(</text><text styleclass="Code Example" style="font-size:12pt; font-weight:bold; font-style:normal; color:#ff0000;">PSZ</text><text styleclass="Code Example" style="font-size:12pt; font-weight:normal; font-style:normal; color:#000000;">(</text><text styleclass="Code Example" style="font-size:12pt; font-weight:bold; font-style:normal; color:#ff0000;">_CAST</text><text styleclass="Code Example" style="font-size:12pt; font-weight:normal; font-style:normal; color:#000000;">, &quot;RICHED20.DLL&quot;)) </text><text styleclass="Code Example" style="font-size:12pt; font-weight:bold; font-style:italic; color:#339966;">// inside GUI classes</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text">Since we cannot &quot;know&quot; at compile time what the lifetime of the PSZ must be we create a static field in this class and assign the generated PSZ value (a value type) to this field. As a result this PSZ will be &quot;alive&quot; during the whole lifetime of your application.</para>
          <para styleclass="Body Text">If you know that the PSZ will not be needed after the call to the WIN32 api then you are better off replacing the PSZ(_CAST with a String2Psz(). This will ensure that the PSZ value is destroyed when the function that creates it finishes. <br/>The following code:</para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> TestMe() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; LoadLibrary(</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">PSZ</text><text style="font-weight:normal; font-style:normal; color:#000000;">(</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">_CAST</text><text style="font-weight:normal; font-style:normal; color:#000000;">, &quot;RICHED20.DLL&quot;)) &#160; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
          <para styleclass="Body Text">generates the following </para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">unsafe</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">TestMe()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">VOWin32APILibrary.Functions.LoadLibrary((IntPtr)(</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#000000;">*)Xs$PSZLiteralsTable._$psz_$0);</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">and the following PSZ table:</text></para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">class</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$PSZLiteralsTable</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Psz</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_$psz_$0</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Psz(&quot;RICHED20.DLL&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Normal">As you can see the PSZ value is stored in the table. Please note that every PSZ variable contains a pointer to static memory allocated with the String2Mem function in the runtime. So these static memory blocks are allocated for the whole lifetime of your application.</para>
          <para styleclass="Normal"></para>
          <para styleclass="Normal">If you change the code to use String2Psz() instead </para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> TestMe() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; LoadLibrary(String2Psz(&quot;RICHED20.DLL&quot;)) &#160; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
          <para styleclass="Body Text">then the result will be:</para>
          <para styleclass="Body Text"></para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">unsafe</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">TestMe()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">List&lt;IntPtr&gt;</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">pszList</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">List&lt;IntPtr&gt;();</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">try</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">VOWin32APILibrary.Functions.LoadLibrary((IntPtr)(</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#000000;">*)</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Psz(CompilerServices.String2Psz(&quot;RICHED20.DLL&quot;,</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">pszList)));</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">finally</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">CompilerServices.String2PszRelease(pszList);</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">as you can see the compiler has now generated a local variable (a list of IntPtr) which is passed to a runtime function at the end that takes care of deleting the allocated memory when the function finishes. To ensure that a try .. finally was added.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">Xs$SymbolTable</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">This class is generated by the compiler if you are using literal symbols in your code. For each symbol in your app there will be a field in the class. Inside the System classes there are 21 literal symbols as you can see when you decompile its code:</para>
          <para styleclass="Normal" style="line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;">internal static class Xs$SymbolTable</text></para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_init</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol(&quot;INIT&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_concurrencycontrol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol(&quot;CONCURRENCYCONTROL&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_notify</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol(&quot;NOTIFY&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">.</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">.</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_unknown</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol(&quot;UNKNOWN&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">readonly</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">_resourcestring</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Symbol(&quot;RESOURCESTRING&quot;);</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">This is very similar to the way how symbols are handed in Visual Objects.</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">When the first symbol in an assembly is used then all the symbols are created and after that using literal symbols is very fast. Symbols are stored in a static table in the runtime and the symbol value contains only the offset in this table. Comparing 2 symbols is like comparing 2 numbers and therefore very fast.</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">&lt;AssemblyName&gt;.Functions</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">Dotnet does not know the concept of functions or global variables. The X# compiler is therefore creating a static class in each assembly that contains static methods for each of the functions or procedures in your code.</para>
          <para styleclass="Normal">The name of this class is derived from the name of your output assembly:</para>
          <para styleclass="Normal">MyFile.DLL will contain a class MyFile.Functions</para>
          <para styleclass="Normal">MyFile.EXE will contain a class MyFile.Exe.Functions</para>
          <para styleclass="Normal">If your output assembly name contains embedded dots then these dots will be replaced with underscore characters in the functions class name:</para>
          <para styleclass="Normal">MyApp.Main.EXE will contain a classname MyApp_Main.EXE.Functions</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">Functions$&lt;ModuleName&gt;$</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">Whenever your code uses STATIC FUNCTION, STATIC DEFINE, STATIC GLOBAL (whose visibility is within the same file only) then the compiler generates a separate class for each modulde (PRG file) where the name of the PRG file is used for the &lt;Modulename&gt;, so the file Start.Prg in Application1.exe will result in a class name </para>
          <para styleclass="Normal">Application1.Exe.Functions$Start$</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">$PCall$&lt;FunctionName&gt;$&lt;suffix&gt;</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">If your code contains PCALL() constructs then the compiler will generate a special delegate with a name based on the method/function name and will make this delegate a nested object inside the type where the PCALL() is used. So a PCALL() inside a function will result in a nested delegate inside the Functions class and a PCALL() in a method of the Window class will result in a nested delegate inside the Windows class.</para>
          <para styleclass="Normal">The return type and parameter names and types of the delegates are derived from the function declaration for the typed pointer that you are passing to PCall().</para>
          <para styleclass="Normal"><br/>For example The VOGUIClasses assembly contain a <text styleclass="Body Text">$PCall$DeleteTrayIcon$430</text><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#00008b;"> &#160;</text><text styleclass="Body Text">inside the Window class and a $PCall$__InitFunctionPointer$28 inside the Functions class. </text><br/><text styleclass="Body Text">If you look at the original code in the __InitFunctionPointer procedure then it looks like this:</text></para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">IF</text><text style="font-weight:normal; font-style:normal; color:#000000;"> !PCALL(gpfnInitCommonControlsEx, @icex)</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The resulting code looks like this:</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Normal" style="line-height:1.00; tabstops:720px left,1440px left,2160px left,2880px left,3600px left ;"><text style="font-family:&apos;Times New Roman&apos;; font-size:12pt; vertical-align:baseline; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#000000;">if</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">(!$PCallGetDelegate&lt;$PCall$__InitFunctionPointer$28&gt;(gpfnInitCommonControlsEx)(&amp;icex))</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text">The $PCallGetDelegate function is a special compiler generated function that looks like this:</para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">[CompilerGenerated]</text><br/><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">T</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">$PCallGetDelegate&lt;T&gt;(IntPtr</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">p)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">return</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(T)(</text><text style="font-weight:bold; font-style:normal; color:#000000;">object</text><text style="font-weight:normal; font-style:normal; color:#000000;">)Marshal.GetDelegateForFunctionPointer(p,</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">typeof</text><text style="font-weight:normal; font-style:normal; color:#000000;">(T));</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">In short: it takes a function pointer (p) and Gets a delegate of type T. This delegate is then used to call the API function.</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Please don&apos;t worry if you don&apos;t get this. It took us a while to create this ourselves too !</text></para>
          <para styleclass="Normal"></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">$PCallNative$&lt;FunctionName&gt;$&lt;suffix&gt;</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">This is a delegate generated for PCallNative constructs. The return type is the type of the generic argument and the parameter types are derived from the types of the arguments. The parameter names are $param1, $param2 etc.</para>
          <para styleclass="Normal">So the following code inside a Test function</para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> p </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> IntPtr &#160; &#160; &#160; &#160; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; P := GetProcAddress(hDLL, &quot;MyFunc&quot;)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; PCallNative&lt;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt; (p,1,2,3)</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Will generate a delegate like this:</text></para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">[CompilerGenerated]</text><br/><text style="font-weight:bold; font-style:normal; color:#000000;">internal</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">delegate</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">int</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">$PCallNative$Test$0(</text><text style="font-weight:bold; font-style:normal; color:#000000;">int</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">$param1,</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">int</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">$param2,</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">int</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">$param3);</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">Functions.$Init1</text><br/><text style="font-weight:bold;">Functions.$Init2</text></para>
          <para styleclass="Body Text"><text style="font-weight:bold;">Functions.$Init3</text></para>
          <para styleclass="Body Text"><text style="font-weight:bold;">Functions.$Exit</text><br/><text style="font-weight:bold;">&lt;Module&gt;.$AppInit()</text><br/><text style="font-weight:bold;">&lt;Module&gt;.$AppExit()</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">These special methods inside the function class are generated to call Init and Exit procedures. <link displaytype="text" defaultstyle="true" type="topiclink" href="Compiler-magic-in-the-startup-code">See the topic about startup code for more information about this</link></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">&lt;Module&gt;.RunInitProcs()</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">This special method inside the &lt;Module&gt; class is generated by the compiler and will be called at runtime when you are dynamically loading assemblies using the XSharpLoadLibrary() function. This takes care of calling all init procedures when a DLL is loaded dynamically.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">&lt;&gt;ClassName</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">Special classes that start with a &lt;&gt; prefix are generated by the Roslyn compiler for lambda expressions and codeblocks.</para>
          <para styleclass="Normal">If you look at the VORDDClasses assembly you will find many examples of these. You may have to set ILSpy to show IL instead of C# or XSharp code, because otherwise these classes will be hidden by the tool.</para>
          <para styleclass="Normal">If you look at the RDD classes in C# mode it will looks like this:<br/></para>
          <para styleclass="Normal"><image src="RddClasses1.png" scale="100.00%" styleclass="Image Caption" figurelistinclude="0"></image></para>
          <para styleclass="Normal"></para>
          <para styleclass="Normal">If you switch ILSpy to IL mode it looks like this:</para>
          <para styleclass="Normal"></para>
          <para styleclass="Normal"><image src="RddClasses2.png" scale="100.00%" styleclass="Image Caption" figurelistinclude="0"></image></para>
          <para styleclass="Normal"></para>
          <para styleclass="Body Text">As you can see there are now quite some nested classes inside the DbServer class. The &lt;&gt;c class contains codeblocks that do not need to access local variables from functions or methods. &#160;In the DbServer class this class has some 25 methods, each of which is a codeblock.</para>
          <para styleclass="Body Text">The classes with the name &lt;&gt;c_DisplayClass&lt;nn&gt; contain codeblocks that need access to local variables from the function or method where they are defined.</para>
          <para styleclass="Body Text">The compiler has detected this and has moved the local variables out of the function/method and made them fields in a compiler generated class, so the codeblocks can access them. In Clipper and VO these were called &quot;detached locals&quot;.</para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text">For example &#160;DisplayClass56_0 has the variables for the Average function:</para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">.</text><text style="font-weight:bold; font-style:normal; color:#000000;">class</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">nested</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">private</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">auto</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">ansi</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">sealed</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">beforefieldinit</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&apos;&lt;&gt;c__DisplayClass56_0&apos;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">extends</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[mscorlib]System.Object</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.custom</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">instance</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[mscorlib]System.Runtime.CompilerServices.CompilerGeneratedAttribute::.ctor()</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">01</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">00</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">00</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">00</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">)</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:italic; color:#000000;">// Fields</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.field</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">int32</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">iCount</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.field</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">class</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[XSharp.RT]XSharp.__Array</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">acbExpr</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.field</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">class</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[XSharp.RT]XSharp.__Array</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">aResults</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.field</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">valuetype</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[XSharp.RT]XSharp.__Usual</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">cbKey</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.field</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">valuetype</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">[XSharp.RT]XSharp.__Usual</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">uValue</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:italic; color:#000000;">// Methods</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.method</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">hidebysig</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">specialname</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">rtspecialname</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">instance</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">void</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">.ctor</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">()</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">cil</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">managed</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">}</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:italic; color:#000000;">// end of class &lt;&gt;c__DisplayClass56_0</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; color:#000000;">The codeblocks inside the Average method apparently access 5 locals variables (iCount, acbExpr, aResults, cbKey and uValue).</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text"><text style="font-weight:normal; color:#000000;">If you look inside the Average() method of DbServer you will see a codeblock such as </text></para>
          <para styleclass="Body Text"><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">SELF:__DBServerEval( { || iCount += 1, __IterateForSum( acbExpr, aResults ) }.......)</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text">If you look in the decompiled code for Average() (in C# mode) you will see something like this:</para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">__DbServerEval(</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Cb$Eval$</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(&lt;&gt;F&lt;__Usual&gt;)</text><text style="font-weight:bold; font-style:normal; color:#000000;">delegate</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-style:italic; color:#000000;">{</text><br/><text style="font-style:italic; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-style:italic; color:#000000;">iCount++;</text><br/><text style="font-style:italic; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-style:italic; color:#000000;">VORDDClasses.Functions.__IterateForSum(acbExpr,</text><text style="font-style:italic; color:#ffffff;">&#32;</text><text style="font-style:italic; color:#000000;">aResults);</text><br/><text style="font-style:italic; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-style:italic; color:#000000;">return</text><text style="font-style:italic; color:#ffffff;">&#32;</text><text style="font-style:italic; color:#000000;">default(__Usual);</text><br/><text style="font-style:italic; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-style:italic; color:#000000;">},</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Cb$Src$</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&quot;{ || iCount += 1, __IterateForSum( acbExpr, aResults ) }&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">},...........................)</text></para>
          <para styleclass="Body Text">The whole {} after the <text style="font-weight:bold;">new </text>is an anonymous codeblock expression <br/>The Cb$Eval$ field in this expression is a delegate that contains the code for the codeblock.</para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The CB$Src field in this expression includes the source for the codeblock so at runtime you will be able to see the source of the compiler time codeblock (this was introduced in build 2.3.0)</text></para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text">The actual body of the codeblock (the part from iCount++ until return default(__Usual)) is in reality stored as a method of &lt;&gt;c__DisplayClass56_0. And all the variables that are needed inside this codeblock are not really stored as variables inside Average() but they are stored as fields of &lt;&gt;c__DisplayClass56_0.</para>
          <para styleclass="Body Text"></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">Please don&apos;t worry if you don&apos;t get this. It took us a while to understand and create this ourselves too !</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:307px;">
          <para styleclass="Body Text"><text style="font-weight:bold;">Xs$Args</text></para>
        </td>
        <td style="width:1074px;">
          <para styleclass="Normal">Whenever your code contains functions or methods with the so called CLIPPER calling convention, then X# compiler will create code that handles the parameters in a special way: For example the function Str() in the runtime. This is declared with the following parameters:<br/><br/><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> Str(nNumber,nLength,nDecimals) </text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text></para>
          <para styleclass="Normal"></para>
          <para styleclass="Body Text">The compiler sees this as CLIPPER calling convention because all 3 of the parameters are optional.</para>
          <para styleclass="Body Text"></para>
          <para styleclass="Normal">The C# version of the IL code generated for this function is:</para>
          <para styleclass="Normal"></para>
          <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">[ClipperCallingConvention(</text><text style="font-weight:bold; font-style:normal; color:#000000;">new</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">string</text><text style="font-weight:normal; font-style:normal; color:#000000;">[] {</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&quot;nNumber&quot;, &quot;nLength&quot;, &quot;nDecimals&quot; })]</text><br/><text style="font-weight:bold; font-style:normal; color:#000000;">public</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">static</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">string</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Str([CompilerGenerated]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">params</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual[]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">int</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">num</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(Xs$Args</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">!=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#000000;">null</text><text style="font-weight:normal; font-style:normal; color:#000000;">)</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">?</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args.Length</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">:</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">0;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">nNumber</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(num</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">1)</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">?</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args[0]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">:</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual._NIL;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">nLength</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(num</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">2)</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">?</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args[1]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">:</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual._NIL;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">nDecimals</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(num</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">3)</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">?</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args[2]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">:</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">__Usual._NIL;</text></para>
          <para styleclass="Normal">As you can see the function now has a single argument, an array of usuals. <br/>The parameter names are stored in an attribute of type <text styleclass="Body Text">ClipperCallingConvention. This attribute is used by the intellisense inside Visual Studio and XIDE so the parameter names can be shown.</text></para>
          <para styleclass="Normal"><text styleclass="Body Text">Inside the body of the generated method the compiler now declares a variable that has the length of the array (the number of arguments passed, which you can also request at runtime with PCount()). The compiler also generates a local variable with the same name as the parameter and initializes each variable with either the value passed (0 based array elements) or with NIL.</text></para>
          <para styleclass="Normal"><text styleclass="Body Text">In the body of the method you will see a try finally. In the finally clause there is the following code:</text></para>
          <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#000000;">finally</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#000000;">if</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">(num</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">2)</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">{</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">Xs$Args[1]</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">=</text><text style="font-weight:normal; font-style:normal; color:#ffffff;">&#32;</text><text style="font-weight:normal; font-style:normal; color:#000000;">nLength;</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160; &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text><br/><text style="font-weight:normal; font-style:normal; color:#ffffff;"> &#160; &#160;</text><text style="font-weight:normal; font-style:normal; color:#000000;">}</text></para>
          <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The reason for this code is that somewhere inside Str() nLength has been assigned. Str() does not know if the variable was passed by value or by reference. &#160;If the value was passed by reference then the array element inside </text>Xs$Args must be updated, which is exactly what happens here.</para>
          <para styleclass="Body Text">The code that calls Str() is now responsible for assigning back the value from the array to its local, when that value is passed by reference</para>
          <para styleclass="Normal"></para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
