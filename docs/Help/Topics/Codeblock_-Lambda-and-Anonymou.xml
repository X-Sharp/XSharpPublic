<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2023-06-29T22:28:39.798+02:00" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>Codeblock, Lambda and Anonymous Method Expressions</title>
  <body>
    <header>
      <para styleclass="Heading1">Codeblock, Lambda and Anonymous Method Expressions</para>
    </header>
    <para styleclass="Normal">X# contains 3 language constructs that are fairly similar yet different.</para>
    <para styleclass="Heading2">Codeblocks</para>
    <para styleclass="Normal">Historically the XBase language has known the CodeBlock Type. A codeblock is specified as </para>
    <para styleclass="Normal"></para>
    <para styleclass="Code with box">{| params | expression }</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The parameters inside a codeblock are of type USUAL and its return value is also of type USUAL.<br/>To evaluate a codeblock you call the Eval() runtime function and pass this function the codeblock and parameters when needed</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">cb := { |x, y| x * y}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Eval(cb, 2,3) &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// shows 6</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">In stead of a single expression, you can also use an expression list. The value of the last expression in the list is returned as the result of the codeblock.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CodeBlock</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">cb := { |x, y| x += 1, x * y}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Eval(cb, 2,3) &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// shows 9</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">Vulcan has also added the possibility to the language to include a list of statements as &quot;body&quot; of the codeblock. The result of the last statement is returned to the calling code. When the last statement is &quot;Void&quot; then a NIL will be returned:<br/>Note that the closing Curly must be on a line of its own and the first statement must appear on a new line as well.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">CodeBlock</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">cb := { |x, y| </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; x += 1</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;? x</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> x * y</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; }</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Eval(cb, 2,3) &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// prints 3 and shows the result 9</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading2">Lambda Expressions</para>
    <para styleclass="Normal">Lamda expressions look a lot like Codeblocks. They are usually used in combination with Delegates.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DELEGATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> MultiPlyInt( x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Int</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Int</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Int</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> lambda </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> MultiPlyInt</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">lambda := { x, y =&gt; x * y}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Lambda(2,3) </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// shows 6</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">Parameters are optional and the return type can be VOID, so this works as well</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DELEGATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> DoSomething( ) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> lambda </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">as</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> DoSomething</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">lambda := { =&gt; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Console</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">.WriteLine(&quot;This </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">is</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> a Lambda&quot;)}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">Lambda() </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// prints the text</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The parameters of a Lambda expression may be typed. This can be convenient for documentation purposes but can also help the compiler to find the right overload for a method:</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DELEGATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> CalcInt( x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DELEGATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> CalcReal( x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REAL8</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REAL8</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REAL8</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">TestLambda( { x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> =&gt; x * y} )</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">TestLambda( { x </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REAL8</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">REAL8</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> =&gt; x + y} )</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">TestLambda( { x , y &#160;=&gt; x - y } ) </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Which one will be called ?</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> TestLambda (lambda </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> CalcInt) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? &quot;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Int</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&quot;, lambda(2,3)</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> TestLambda (lambda </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> CalcReal) </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? &quot;Real&quot;,lambda(2,3)</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The body of the Lambda may also be a single expression, expression list and a statement list.</para>
    <para styleclass="Normal"><text style="font-weight:bold;">Anonymous Method Expressions</text></para>
    <para styleclass="Normal">These work almost the same as Lambda Expressions. <br/>Take the example below:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> TestAnonymous() </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oForm </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Form</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oForm := Form{}</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oForm:Click += </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DELEGATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">(o </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> System.</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Object</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">, e </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> System.EventArgs ) { &#160;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.Windows.Forms.MessageBox.Show(&quot;Click </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">from</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> AME 1!&quot;) &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;System.Windows.Forms.MessageBox.Show(&quot;Click </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">from</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> AME 2!&quot;) &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; } &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oForm:Click += { o,e =&gt; System.Windows.Forms.MessageBox.Show(&quot;We can also </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">do</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> this </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">with</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> a Lambda!&quot;) } &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; oForm:ShowDialog()</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;</text><text styleclass="Code with box"> &#160;</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The biggest difference between Lambda Expressions and <text styleclass="Normal">Anonymous Method Expressions</text> is that the parameters to Lambda Expressions do not have to be typed. They will be inferred from the usage. Parameters for Anonymous Method Expressions must always be typed.</para>
  </body>
</topic>
