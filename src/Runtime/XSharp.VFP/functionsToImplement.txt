Below is a list of functions that are not available in the VFP Runtime(yet)
For each of this functions there is already a "stub" in ToDo-A.prg, ToDo-B.prg etc.
When you implement them then move them over to a source file with a meaningfull name.
For example: AClass() and AMembers() describe objects, so they could be implemted in a source file Objects.prg
and ATagInfo() describes cursor properties, so this could go into a file Cursor.prg etc.

For each of the functions there is "lifted" documentation from the VFP help file in the file VFPDocs.Xml.
Each function has its own entry inside this file. ACLASS is in the node <aclass>, ADATABASES in <adatabases> etc.

We are using Sandcastle Help File Builder with a special plugin to document the code.
You must make sure that the parameter names in the code match the parameter names in the documentation.
In the "lifted" documentation this not always right. Especially if the original docs contained the option to specify a workarea number or alias.
In these cases the generated docs contain 2 parameters, where the function in XSharp.VFP has only one parameter.
VFPDocs.Xml also contains docs for functions that are already implemented in XSharp.RT or XSHarp.Core. These docs can be ignored.

At this moments all incomplete functions have 2 documentation tags:
  1) /// <summary>-- todo --</summary>
  2) <include file="VFPDocs.xml" path="Runtimefunctions/candidate/*" />

After the function has been implemented the first tag should be removed. The second tag has to be adjusted to point to VfpRuntimeDocs.XML:
When writing a function we will move its docs to VfpRuntimeDocs.XML and we will check the docs to see if there are incorrect parameter names etc.
We can also include tables in the <remarks> section when the original docs contained a table.
A table must be written like this:
      <list type="table">
        <listheader>
          <term>DEFINE</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>SCOPE_TOP</term>
          <description>The top scope.</description>
        </item>
        <item>
          <term>SCOPE_BOTTOM</term>
          <description>The bottom scope.</description>
        </item>
        <item>
          <term>SCOPE_BOTH</term>
          <description>The top and also the bottom scope. This is the <em>default</em>.</description>
        </item>
      </list>
In theory you can also include tables in the <param> tags but that usually does not produce very nice documentation.
We think it is better to include the tables in the <remarks> section and to refer to that section in the <param> tag.

List of functions that need work:
=================================

ACLASS( )
ADATABASES( )
ADBOBJECTS( )
AGETFILEVERSION( )
ALINES( )
AMEMBERS( )
ANETRESOURCES( )
APRINTERS( )
ASESSIONS( )
ASTACKINFO( )
ASUBSCRIPT( )
AT_C( )
ATAGINFO( )
AUSED( )
BINTOC( )
CANDIDATE( )
CAST( )
COMPOBJ( )
COMPILE()
CPCONVERT( )
CREATEOBJECTEX( )
CREATEOFFLINE( )
CTOBIN( )
CTOT( )
CURSORGETPROP( )
CURSORSETPROP( )
CURSORTOXML( )
CURVAL( )
DESCENDING( )
DIFFERENCE( )
DisplayPath( )
DODEFAULT( )
DROPOFFLINE( )
EXECSCRIPT( )
FIELD( )            // needs testing, no caption yet (needs DBC support)
FLDLIST( )
FONTMETRIC( )
FORCEEXT( )
FORCEPATH( )
FULLPATH( )
GETAUTOINCVALUE( )
GETCP( )
GETDIR( )
GETFILE( )
GETFLDSTATE( )
GETFONT( )
GETNEXTMODIFIED( )
GETOBJECT( )
GETPICT( )
GETPRINTER( )
GETRESULTSET( )
GETCURSORADAPTER( )
IMESTATUS( )
INDBC( )
INDEXSEEK( )
INPUTBOX( )
ISBLANK( )
ISEXCLUSIVE( )
ISMEMOFETCHED( )
ISNULL( )
ISPEN( )
ISTRANSACTABLE( )
KEYMATCH( )
LINENO( )
LOADPICTURE( )
LOCFILE( )
LOCK( )
LOOKUP( )
MAKETRANSACTABLE( )
NEWOBJECT( )
NORMALIZE( )
OLDVAL( )
PCOL( )
PRIMARY( )
PROGRAM( )
PROW( )
PRTINFO( )
PUTFILE( )
RAISEEVENT( )
REFRESH( )
REQUERY( )
RGBSCHEME( )
SAVEPICTURE( )
SCHEME( )
SEEK( )
SETFLDSTATE( )
SETRESULTSET( )
SQLIDLEDISCONNECT( )
STRCONV( )
STREXTRACT( )
SYSMETRIC( )
TABLEREVERT( )
TABLEUPDATE( )
TTOC( )
TXNLEVEL( )
TXTWIDTH( )
VARTYPE( )
XMLTOCURSOR( )
XMLUPDATEGRAM( )
