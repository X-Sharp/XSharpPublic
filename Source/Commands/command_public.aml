<?xml version="1.0" encoding="utf-8"?>
<topic id="8d194317-f7c6-462f-bcfb-ccb8b195d6bf" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>TODO: Move introduction text here</para>
    </introduction>




     
     <para><legacyBold>Navigation:</legacyBold>&#160;
     
     <!-- TODO: Unknown topic link: xsharp.html -->X# Documentation &gt; <!-- TODO: Unknown topic link: chapter-2.html -->X# Language Reference &gt; <!-- TODO: Unknown topic link: commands-by-category.html -->Commands and Statements &gt; <!-- TODO: Unknown topic link: cmd_cat_memvar.html -->Memory Variable&#160;&gt;</para>

     
     <!-- TODO: Add named anchor: prev --><mediaLink><image xlink:href="btn_prev_n" /></mediaLink><!-- TODO: Add named anchor: main --><mediaLink><image xlink:href="btn_home_n" /></mediaLink><!-- TODO: Add named anchor: next --><mediaLink><image xlink:href="btn_next_n" /></mediaLink>
    
    <h1 class="p_Heading1" style="page-break-after: avoid;">PUBLIC Statement</h1>

  
  <!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  
  



     <!--ZOOMRESTART-->
     <h1 class="p_Heading1" style="page-break-after: avoid;">Purpose</h1>
<para>Creates variables and arrays visible to all routines in an application.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Syntax</h1>
<para>PUBLIC &lt;idVar&gt; [:= &lt;uValue&gt;] | &lt;ArraySpec&gt; [, ...]</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Arguments</h1>
<table><row><entry>&lt;idVar&gt;</entry><entry>A valid identifier name for the public variable to create.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;uValue&gt;</entry><entry>The initial value to assign to the variable. &#160;This can be any valid expression. &#160;If &lt;uValue&gt; is not specified, the variable is initialized to FALSE.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;ArraySpec&gt;</entry><entry>The specification for a dynamic array to create. &#160;&lt;ArraySpec&gt; is one of the following:</entry></row></table><table><row><entry></entry><entry>&lt;idArray&gt;[&lt;nElements&gt;, &lt;nElements&gt;, &lt;nElements&gt;]</entry></row></table><table><row><entry></entry><entry>&lt;idArray&gt;[&lt;nElements&gt;][&lt;nElements&gt;][&lt;nElements&gt;]</entry></row></table><table><row><entry></entry><entry>All dimensions except the first are optional.</entry></row></table><table><row><entry></entry><entry>&lt;idArray&gt; is a valid identifier name for the array to create. &#160;Array elements are initialized to NIL.</entry></row></table><table><row><entry></entry><entry>&lt;nElements&gt; defines the number of elements in a particular dimension of an array. &#160;The number of dimensions is determined by how many &lt;nElements&gt; arguments you specify.</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Description</h1>
<para>PUBLIC is an executable statement which means you must specify it after any variable declaration statements (i.e., FIELD, LOCAL, and MEMVAR) in the routine that you are defining.</para>
<para>&#160;</para>
<para>Warning!  Any reference to a variable created with this statement will produce a compiler error unless the Undeclared Variables compiler option is checked.</para>
<para>&#160;</para>
<para>Any declared variables, such as LOCALs, with the same names as existing public or private variables temporarily hide the public or private variables until the overriding variables are released or are no longer visible.</para>
<para>&#160;</para>
<para>An attempt to create a public variable with the same name as an existing and visible private variable is simply ignored; however the assignment portion of the PUBLIC statement is not ignored. &#160;For example, the following lines of code change the value of the variable x but do not change its scope from private to public:</para>
<para>&#160;</para>
<para>PRIVATE x := 1000<para/>
...<para/>
PUBLIC x := &quot;New value for x&quot;<para/>
? x &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;&quot;New value for x&quot;</para>
<para>&#160;</para>
<para>The explanation for this behavior is that, internally, the PUBLIC statement and the assignment are treated as separate statements. &#160;Thus, this code would be treated as follows:</para>
<para>&#160;</para>
<para>PRIVATE x := 1000<para/>
...<para/>
PUBLIC x<para/>
x := &quot;New value for x&quot;<para/>
? x &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;&quot;New value for x&quot;</para>
<para>&#160;</para>
<para>The PUBLIC statement is ignored, but the assignment statement is executed, changing the value of the private variable x.</para>
<para>&#160;</para>
<para>This behavior has an interesting repercussion when you declare a public array using a variable name that already exists as private. &#160;For example:</para>
<para>&#160;</para>
<para>PRIVATE x := 1000<para/>
...<para/>
PUBLIC x[10]<para/>
? x[1] &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;NIL</para>
<para>&#160;</para>
<para>In this case, the PUBLIC statement is also treated as two separate statements:</para>
<para>&#160;</para>
<para>PRIVATE x := 1000<para/>
...<para/>
PUBLIC x<para/>
x := ArrayNew(10)<para/>
? x[1] &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;NIL</para>
<para>Again, the PUBLIC statement is ignored, and the assignment changes x from a private numeric variable to a private reference to a ten element array.</para>
<para>&#160;</para>
<para>Attempting to specify a public variable that conflicts with a visible declared variable (for example, LOCAL, GLOBAL, or DEFINE) of the same name is not recognized by the compiler as an error because PUBLIC is not a compiler declaration statement. &#160;Instead, the declared variable will hide the public variable at runtime. &#160;This means that you will not be able to access the public variable at all until the declared variable is released.</para>
<para>&#160;</para>
<para>In class methods, instance variables (with the exception of access/assign variables) are always more visible than public variables of the same name. &#160;Use the _MEMVAR-&gt; alias to access a public variable within a method if there is a name conflict. &#160;For access/assign variables, use the SELF: &#160;prefix to override a name conflict with a public variable.</para>
<para>Public variables are dynamically scoped. &#160;They exist for the duration of the application or until explicitly released with CLEAR ALL or CLEAR MEMORY. &#160;</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Notes</h1>
<para>PUBLIC Clipper:  To include XSharp extensions in an application and still allow the application to run under dBASE III PLUS, the special public variable, Clipper, is initialized to TRUE when created with PUBLIC.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Examples</h1>
<para>This example creates two PUBLIC arrays and one PUBLIC variable:</para>
<para>&#160;</para>
<para>PUBLIC aArray1[10, 10], var2<para/>
PUBLIC aArray2[20][10]</para>
<para>&#160;</para>
<para>The following PUBLIC statements create variables and initialize them with values:</para>
<para>&#160;</para>
<para>PUBLIC cString := Space(10), cColor := SetColor()<para/>
PUBLIC aArray := {1, 2, 3}, ;<para/>
&#160;aArray2 := ArrayNew(12, 24)</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">See Also</h1>
<para><link xlink:href="2a900f41-b488-4d93-9c87-137df66f4503">GLOBAL</link>, <link xlink:href="70df5af5-ce42-4ba8-afec-5b3a4de8d996">MEMVAR</link>, <link xlink:href="f6fe8ee8-c61d-405e-8da1-35f1f0564f84">PARAMETERS</link>, <link xlink:href="167a7bca-5bea-4198-b685-3376fba16514">PRIVATE</link></para>
<para>&#160;</para>

     <!--ZOOMSTOP-->

<!-- TODO: Review markup -->
<markup>
<script>
           var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
           if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
	   $(document).ready(function(){
		   $(window).bind('resize', function() {
				var y = $('#header').height();
				$('#content').css('margin-top', y);
				$('.hmanchor').css('margin-top', -y-20);
				$('.hmanchor').css('padding-top', y+20);
			});
		   $(window).triggerHandler('resize');	
		   $(window).triggerHandler('resize');	
                   
		});
</script>
</markup>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
