<?xml version="1.0" encoding="utf-8"?>
<topic id="14cdd669-1822-49e7-b700-7abebe59013c" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>TODO: Move introduction text here</para>
    </introduction>




     
     <para><legacyBold>Navigation:</legacyBold>&#160;
     
     <!-- TODO: Unknown topic link: xsharp.html -->X# Documentation &gt; <!-- TODO: Unknown topic link: chapter-2.html -->X# Language Reference &gt; <!-- TODO: Unknown topic link: commands-by-category.html -->Commands and Statements &gt; <!-- TODO: Unknown topic link: cmd_cat_entdecl.html -->Entity Declaration&#160;&gt;</para>

     
     <!-- TODO: Add named anchor: prev --><mediaLink><image xlink:href="btn_prev_n" /></mediaLink><!-- TODO: Add named anchor: main --><mediaLink><image xlink:href="btn_home_n" /></mediaLink><!-- TODO: Add named anchor: next --><mediaLink><image xlink:href="btn_next_n" /></mediaLink>
    
    <h1 class="p_Heading1" style="page-break-after: avoid;">FUNCTION Statement</h1>

  
  <!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  
  



     <!--ZOOMRESTART-->
     <h1 class="p_Heading1" style="page-break-after: avoid;">Purpose</h1>
<para>Declare a function name and an optional list of local variable names to the compiler. When used inside a FoxPro DEFINE CLASS .. ENDDEFINE this declares a method.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Syntax</h1>
<para>&#160;[Attributes] [Modifiers] FUNCTION &lt;idFunction&gt; </para>
<para>&#160;[Typeparameters]</para>
<para>&#160;[([&lt;idParam&gt; [AS | REF|OUT|IN &lt;idType&gt;] [, ...])] </para>
<para>&#160;[AS &lt;idType&gt;]</para>
<para>&#160;[TypeparameterConstraints]</para>
<para>&#160;[&lt;idConvention&gt;]</para>
<para>&#160;[EXPORT LOCAL] </para>
<para>&#160;[DLLEXPORT STRING_CONST]</para>
<para>&#160;[=&gt; &lt;expression&gt;]</para>
<para>&#160;CRLF</para>
<para>&#160;[&lt;Body&gt;]</para>
<para>&#160;[ENDFUNC | END FUNCTION]</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Arguments</h1>
<table><row><entry>Attributes</entry><entry>An optional list of one or more attributes that describe meta information for am entity, such as for example the [TestMethod] attribute on a method/function containing tests in a MsTest class library. Please note that Attributes must be on the same line or suffixed with a semi colon when they are written on the line above that keyword.</entry></row></table><para>&#160;</para>
<table><row><entry>Modifiers</entry><entry>An optional list of modifiers that specify the visibility or scope of the entity, such as PUBLIC, STATIC, INTERNAL, EXPORT and UNSAFE. </entry></row></table><table><row><entry></entry><entry>Please note that functions and procedures used as class members in FoxPro compatible classes can have more modifiers.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idFunction&gt;</entry><entry>A valid identifier name for the function. &#160;A function is an entity and, as such, shares the same name space as other entities. &#160;This means that it is not possible to have a function and a class, for example, with the same name.</entry></row></table><para>&#160;</para>
<table><row><entry>TypeParameters</entry><entry>This is supported for methods with generic type arguments. This something like &lt;T&gt; for a method with one type parameter named T. Usually one of the parameters in the parameter list is then also of type T.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idParam&gt;</entry><entry>A &#160;parameter variable. &#160;A variable specified in this manner is automatically declared local. &#160;These variables, also called formal parameters, are used to receive arguments that you pass when you call the entity.</entry></row></table><para>&#160;</para>
<table><row><entry>AS | REF|OUT|IN &lt;idType&gt;</entry><entry>Specifies the data type of the parameter variable (called strong typing). &#160;AS indicates that the parameter must be passed by value, and REF indicates that it must be passed by reference with the @ operator. OUT is a special kind of REF parameter that does not have to be assigned before the call and must be assigned inside the body of the entity. IN parameters are passed as READONLY references.<para/>
The last parameter in the list can also be declared as PARAMS &lt;idType&gt;[] which will tell the compiler that the function/method may receive zero or more optional parameters.<para/>
Functions or Methods of the CLIPPER calling convention are compiled to a function with a single parameter that this declared as Args PARAMS USUAL[]<para/>
&#160;</entry></row></table><para>&#160;</para>
<table><row><entry>AS &lt;idType&gt;</entry><entry>Specifies the data type. &#160;If omitted, then depending on the compiler options the type will be either USUAL or determined by the compiler.</entry></row></table><para>&#160;</para>
<table><row><entry>TypeParameterConstraints</entry><entry>Here you can specify constraints for the Type parameters, such as WHERE T IS SomeName or WHERE T IS New</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;idConvention&gt;</entry><entry>Specifies the calling convention for this entity. &#160;&lt;idConvention&gt; must be one of the following:</entry></row></table><para>&#111; &#160; &#160; &#160; &#160;CLIPPER</para><para>&#111; &#160; &#160; &#160; &#160;STRICT</para><para>&#111; &#160; &#160; &#160; &#160;PASCAL</para><para>&#111; &#160; &#160; &#160; &#160;CALLBACK</para><para>&#111; &#160; &#160; &#160; &#160;THISCALL</para><table><row><entry></entry><entry>Most calling conventions are for backward compatibility only. <para/>
There are 2 exceptions:<para/>
CLIPPER declares that a method has untyped parameters. This is usually only needed for methods without any declared parameters. Otherwise the compiler will assume CLIPPER calling convention when it detects untyped parameters. <para/>
Methods and Functions in external DLL may have STRICT, PASCAL, CALLBACK</entry></row></table><para>&#160;</para>
<para>&#160;</para>
<table><row><entry>EXPORT LOCAL</entry><entry>This clause is allowed by X# but ignored.</entry></row></table><table><row><entry>=&gt; &lt;Expression&gt;</entry><entry>Single expression that replaces the multiline body for the entity. CANNOT be compiled with a body</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;Body&gt;</entry><entry>Program statements that form the code of this entity.<para/>
The &lt;Body&gt; can contain one or more RETURN statements to return control to the calling routine and to serve as the function return value. &#160;If no return statement is specified, control passes back to the calling routine when the function definition ends, and the function will return a default value depending on the return value data type specified (NIL if the return value is not strongly typed).<para/>
CANNOT be combined with an Expression Body</entry></row></table><para>&#160;</para>
<para>&#160;</para>
<table><row><entry>ENDFUNC | END FUNCTION</entry><entry>These (optional)keywords indicate the logical end of the function.</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Description</h1>
<para>A function is a subprogram comprised of a set of declarations and statements to be executed whenever you refer to &lt;idFunction&gt; followed by a pair of parentheses (see Notes section, below).</para>
<para>&#160;</para>
<para>Functions and procedures (see the PROCEDURE statement in this guide) are the basic procedural programming units. &#160;You will use them in your applications to organize computational blocks of code.</para>
<para>&#160;</para>
<para>STATIC FUNCTION allows you to limit the visibility of a function name to the current module, thereby restricting access to the function. &#160;This feature is useful when designing a module that will contain some public routines (i.e., with application-wide visibility) and others that are strictly support routines (i.e., only needed by other routines in the same module).</para>
<para>&#160;</para>
<para>Simply declare all support functions using STATIC FUNCTION. &#160;Doing this gives you two immediate advantages. &#160;First, no other module in the application will inadvertently call one of your support routines. &#160;Second, since static references are resolved at compile time and public references are resolved at link time, there is no possibility of a name conflict. &#160;For example, if you have a static Service() function declared in module X and a public Service() function declared in module Y, all references to Service() in X execute the static version and all other references to Service() in the application execute the public version.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Notes</h1>
<para>The Start() function:  All applications must either have one function or procedure named Start() or be linked with the GUI Classes library and have a method Start() of CLASS App. &#160;Start() serves as the startup routine when the application is executed. &#160;Start() cannot declare any parameters and, under normal circumstances, should not return a value. &#160;If you want to use <!-- TODO: Unknown topic link: strong-typing.html -->strong typing in the declaration statement, you must specify AS USUAL PASCAL.</para>
<para>&#160;</para>
<para>Exporting locals through code blocks:  When you create a code block, you can access local variables defined in the creating entity within the code block definition without having to pass them as parameters (i.e., local variables are visible to the code block). &#160;Using this fact along with the fact that you can pass a code block as a parameter, you can export local variables. &#160;For example:</para>
<para>&#160;</para>
<para>FUNCTION One() EXPORT LOCAL<para/>
&#160;LOCAL nVar := 10 AS INT, cbAdd AS CODEBLOCK<para/>
&#160;cbAdd := {|nValue| nValue + nVar}<para/>
&#160;? NextFunc(cbAdd) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;210<para/>
&#160;<para/>
FUNCTION NextFunc(cbAddEmUp)<para/>
&#160;RETURN (EVAL(cbAddEmUp, 200))</para>
<para>&#160;</para>
<para>When the code block is evaluated in NextFunc(), nVar, which is local to function One(), becomes visible even though it is not passed directly as a parameter.</para>
<para>&#160;</para>
<para>Calling a function:  The syntax to call a function is as follows:</para>
<para>&#160;</para>
<para>&lt;idFunction&gt;([&lt;uArgList&gt;])</para>
<para>&#160;</para>
<para>where &lt;uArgList&gt; is an optional comma-separated list of arguments to pass to the named function. &#160;The function receives the arguments in the order passed using the parameter variables specified as part of the function declaration.</para>
<para>Note that although the parentheses are not required in the FUNCTION statement if the function has no parameters, they are always required in the invocation.</para>
<para>&#160;</para>
<para>You can call a function within an expression or as a program statement. &#160;If called as a program statement, the return value is ignored.</para>
<para>&#160;</para>
<para>You can also call a function as an aliased expression, as in:</para>
<para>&#160;</para>
<para>&lt;idAlias&gt;-&gt;&lt;idFunction&gt;([&lt;uArgList&gt;])</para>
<para>&#160;</para>
<para>When you do this, the work area associated with &lt;idAlias&gt; is selected, the function is executed, and the original work area is reselected. &#160;You can specify an aliased expression as a program statement, as you would any other expression.</para>
<para>&#160;</para>
<para>A function can call itself recursively. &#160;This means you can refer to a function in its own &lt;FunctionBody&gt;.</para>
<para>The specific manner in which you call a function depends on the calling convention (&lt;idConvention&gt;) that you specify (either explicitly or implicitly) when you declare the function.</para>
<para>&#160;</para>
<para>CLIPPER calling convention:  If you declare the function without any data types in the parameter list, the function uses the CLIPPER calling convention by default. &#160;You can also specify the CLIPPER calling convention in the FUNCTION declaration statement, providing that you do not use strong typing in the parameter list.</para>
<para>Although it does not allow strongly typed parameters, the CLIPPER calling convention supports strong typing of the function return value.</para>
<para>&#160;</para>
<para>With the CLIPPER calling convention, the number of parameters declared for the function does not have to match the number of arguments passed when you call the function. &#160;You can skip any argument by leaving it out of the list (specifying two consecutive commas) or by omitting it from the end of the list. &#160;For example:</para>
<para>&#160;</para>
<para>FUNCTION Start()<para/>
&#160;MyFunc(1,, 3) &#160; &#160; &#160; &#160;// Skip second argument<para/>
&#160;MyFunc(1, 2) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Skip final argument<para/>
&#160;<para/>
FUNCTION MyFunc(x, y, z)</para>
<para>&#160;...</para>
<para>&#160;</para>
<para>A parameter not receiving a value is automatically initialized to NIL by the function so that you can check for skipped arguments. &#160;You can use PCount() to help determine the number of arguments passed&#160;—&#160;this function returns the position of the last argument passed.</para>
<para>&#160;</para>
<para>Any parameter specified in a CLIPPER function can receive arguments passed by value or reference&#160;—&#160;the semantics are determined when the function is called rather than when it is declared. &#160;The default method for expressions and variables is by value. &#160;All variables except field variables, when prefaced with the reference operator (@), are passed by reference. &#160;Field variables cannot be passed by reference and are always passed by value.</para>
<para>&#160;</para>
<para>STRICT calling convention:  If you declare the function with any data types in the parameter list, the function uses the STRICT calling convention by default. &#160;You can also specify the STRICT calling convention in the FUNCTION declaration statement.</para>
<para>&#160;</para>
<para>Using the STRICT calling convention, you give up many of the features allowed with the CLIPPER calling convention, but you gain in compilation speed, application integrity, and execution speed by strongly typing the parameters and return value and declaring the passing semantics of the function.</para>
<para>&#160;</para>
<para>STRICT functions do not support a variable number of arguments, PCount(), or the ability to be used in macro expressions.</para>
<para>&#160;</para>
<para>Like CLIPPER functions, STRICT functions allow the calling semantics to be determined when the function is called, but only for polymorphic parameters (i.e., those not strongly typed). &#160;When a parameter is typed, the calling semantics are also declared depending on whether you use the AS or the REF keyword. &#160;AS means that the parameter must be passed by value and REF means that it must be passed by reference (with the reference operator (@)).</para>
<para>&#160;</para>
<para>PASCAL calling convention:  To specify this calling convention, use PASCAL as the last keyword in the FUNCTION declaration statement. &#160;Syntactically, the PASCAL calling convention is identical to STRICT and the usage restrictions are the same, but internally it is handled differently. &#160;It is identical to the Microsoft Pascal calling convention, and its primary use is for low-level interfacing with Windows.</para>
<para>&#160;</para>
<para>CALLBACK calling convention:  To specify this calling convention, use CALLBACK as the last keyword in the FUNCTION declaration statement. &#160;This is a special PASCAL calling convention with Windows prologue and epilogue. &#160;It is used for low-level interfacing with Windows.</para>
<para>&#160;</para>
<para>Parameters:  As an alternative to specifying parameters in the FUNCTION declaration statement, you can use a PARAMETERS statement to specify them. &#160;This practice, however, is not recommended because it is less efficient and provides no compile-time integrity validation. &#160;See the PARAMETERS statement in this guide for more information.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Examples</h1>
<para>This example demonstrates a function that formats numeric values as currency:</para>
<para>&#160;</para>
<para>FUNCTION Start()<para/>
&#160;? Currency(1000) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Result: &#160;$1,000.00<para/>
&#160;<para/>
FUNCTION Currency(nNum)<para/>
&#160;LOCAL cNum<para/>
&#160;IF nNum &lt; 0<para/>
&#160; &#160; &#160; &#160; &#160;cNum := Transform(-1 * nNum, ;<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;&quot;999,999,999,999.99&quot;)<para/>
&#160; &#160; &#160; &#160; &#160;cNum := PadL(&quot;($&quot; + LTRIM(cNum)+ &quot;)&quot;, ;<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;LEN(cNum))<para/>
&#160;ELSE<para/>
&#160; &#160; &#160; &#160; &#160;cNum := Transform(nNum, ;<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;&quot;999,999,999,999.99&quot;)<para/>
&#160; &#160; &#160; &#160; &#160;cNum := PadL(&quot;$&quot; + LTRIM(cNum), ;<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;LEN(cNum))<para/>
&#160;ENDIF<para/>
&#160;RETURN cNum</para>
<para>&#160;</para>
<para>The next example demonstrates a function that takes a string formatted as a comma-separated list and returns an array with one element per item:</para>
<para>&#160;</para>
<para>aList := ListAsArray(&quot;One, Two&quot;)<para/>
// Result: &#160;{&quot;One&quot;, &quot;Two&quot;}<para/>
&#160;<para/>
FUNCTION ListAsArray(cList)<para/>
&#160;LOCAL nPos<para/>
&#160;LOCAL aList := {} &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Define an empty array<para/>
&#160;<para/>
&#160;DO WHILE (nPos := AT(&quot;,&quot;, cList)) != 0<para/>
&#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Add a new element<para/>
&#160; &#160; &#160; &#160; &#160;AADD(aList, SUBSTR(cList, 1, nPos - 1))<para/>
&#160; &#160; &#160; &#160; &#160;cList := SUBSTR(cList, nPos + 1)<para/>
&#160;ENDDO<para/>
&#160;AADD(aList, cList)<para/>
&#160;<para/>
&#160;RETURN aList &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;// Return the array</para>
<para>This example checks for a skipped argument by comparing the parameter to NIL:</para>
<para>&#160;</para>
<para>FUNCTION MyFunc(param1,param2,param3)<para/>
&#160;IF param2 = NIL<para/>
&#160; &#160; &#160; &#160; &#160;param2 := &quot;default value&quot;<para/>
&#160;ENDIF &#160; &#160; &#160; &#160;...</para>
<para>&#160;</para>
<para>Here the Currency() function (defined above) is used as an aliased expression:</para>
<para>&#160;</para>
<para>USE invoices NEW<para/>
USE customer NEW<para/>
? Invoices-&gt;Currency(Amount)</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">See Also</h1>
<para><link xlink:href="da571189-a521-4066-b374-de88f72d37e8">FIELD</link>, <link xlink:href="d8822cca-7c06-4150-b83c-2dd9b531186d">LOCAL</link>, <link xlink:href="70df5af5-ce42-4ba8-afec-5b3a4de8d996">MEMVAR</link>, <link xlink:href="77b4131b-7ffd-4fad-ae60-b9ca0ec84fc7">METHOD</link>, <!-- TODO: Unknown topic link: function_pcount.html -->PCount(), <link xlink:href="76e253bd-c169-4078-b086-64feffe160c1">PROCEDURE</link>, <link xlink:href="70c94423-9322-4c94-aecc-907f367520ad">RETURN</link></para>
<para>&#160;</para>

     <!--ZOOMSTOP-->

<!-- TODO: Review markup -->
<markup>
<script>
           var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
           if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
	   $(document).ready(function(){
		   $(window).bind('resize', function() {
				var y = $('#header').height();
				$('#content').css('margin-top', y);
				$('.hmanchor').css('margin-top', -y-20);
				$('.hmanchor').css('padding-top', y+20);
			});
		   $(window).triggerHandler('resize');	
		   $(window).triggerHandler('resize');	
                   
		});
</script>
</markup>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
