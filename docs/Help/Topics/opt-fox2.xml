<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>-fox2</title>
  <keywords>
    <keyword>-fox2</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">-fox2<tab />Compatible FoxPro Array support</para>
    </header>
    <para styleclass="Normal">The -fox2 compiler option is enabled for foxpro compatible array support. It enables / disables the following features:</para>
    <list id="2" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal">Assigning a single value to an array will fill the whole array with that value</li>
      <li styleclass="Normal">Support for parenthesized array access.<br/>If the compiler encounters code that might be an array access such as <text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">Foo(1,2) </text><text styleclass="Body Text">then it will check to see if Foo() is a local or field declared as a foxpro array. If that is the case then the array element will be accessed. If Foo is not declared, then this might be an array access for a dynamic memory variable declared outside of the scope of the current method / function. The compiler will then generate code to resolve this at runtime (just like FoxPro does)</text></li>
    </list>
    <para styleclass="Heading2">Requirements</para>
    <para styleclass="Normal">The -fox2 compiler options MUST be used together with the -memvar compiler option and the FoxPro dialect.</para>
    <para styleclass="Heading2">Example</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> a</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;Dimension a(10)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;a = 42 &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// With the /fox2 compiler option this will fill the array with 42.</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Without the option the variable will be changed from an array to a number</text></para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">or</text></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">Function</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Main()</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">Dimension foo(2,5)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;foo = 42 &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// with /fox2 this fills the array</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;? foo(1,2) &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// with /fox2 this returns element 1,2. Without /fox2 this will call the Foo function below</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;? Foo[1,2] &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// this always returns element 1,2</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Foo(n1, n2)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? n1, n2</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> n1 * n2</text></para>
    <para styleclass="Heading3">Please note</para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">The fox2 compiler option generates some extra code to decide at runtime which action to take.</text></para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">It is only recommended &#160;for code that really needs this feature. </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">You can use</text><link displaytype="text" defaultstyle="true" type="topiclink" href="pp-Pragma-Options" style="font-weight:normal; font-style:normal; color:#000000;"> #pragma options</link><text style="font-weight:normal; font-style:normal; color:#000000;"> to enable / disable fox2 for some source files or even some functions </text></para>
  </body>
</topic>
