//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\XSharp\Dev30\src\Compiler\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, TUPLE=111, UNTIL=112, VALUE=113, VIRTUAL=114, VOSTRUCT=115, ADD=116, 
		ARGLIST=117, ASCENDING=118, ASYNC=119, ASTYPE=120, AWAIT=121, BY=122, 
		CHECKED=123, DESCENDING=124, EQUALS=125, EXTERN=126, FIXED=127, FROM=128, 
		GROUP=129, INIT=130, INTO=131, JOIN=132, LET=133, NOP=134, OF=135, ON=136, 
		ORDERBY=137, OVERRIDE=138, PARAMS=139, REMOVE=140, SELECT=141, STACKALLOC=142, 
		SWITCH=143, UNCHECKED=144, UNSAFE=145, VAR=146, VOLATILE=147, WHEN=148, 
		WHERE=149, YIELD=150, WITH=151, RECORD=152, LAST_POSITIONAL_KEYWORD=153, 
		FIRST_TYPE=154, ARRAY=155, BYTE=156, CODEBLOCK=157, DATE=158, DWORD=159, 
		FLOAT=160, INT=161, LOGIC=162, LONGINT=163, OBJECT=164, PSZ=165, PTR=166, 
		REAL4=167, REAL8=168, REF=169, SHORTINT=170, STRING=171, SYMBOL=172, USUAL=173, 
		VOID=174, WORD=175, CHAR=176, INT64=177, UINT64=178, DYNAMIC=179, DECIMAL=180, 
		DATETIME=181, CURRENCY=182, BINARY=183, NINT=184, NUINT=185, LAST_TYPE=186, 
		UDC_KEYWORD=187, SCRIPT_REF=188, SCRIPT_LOAD=189, ASSIGNMENT=190, DEFERRED=191, 
		ENDCLASS=192, ENDSEQUENCE=193, EXPORTED=194, FREEZE=195, FINAL=196, INLINE=197, 
		INTRODUCE=198, NOSAVE=199, READONLY=200, SHARING=201, SHARED=202, SYNC=203, 
		ENDDEFINE=204, LPARAMETERS=205, OLEPUBLIC=206, EXCLUDE=207, THISACCESS=208, 
		HELPSTRING=209, DIMENSION=210, NOINIT=211, THEN=212, FOX_M=213, SCAN=214, 
		ENDSCAN=215, ENDFOR=216, ENDFUNC=217, ENDPROC=218, ENDTRY=219, ENDWITH=220, 
		EACH=221, THISFORM=222, LAST_KEYWORD=223, FIRST_NULL=224, NIL=225, NULL=226, 
		NULL_ARRAY=227, NULL_CODEBLOCK=228, NULL_DATE=229, NULL_OBJECT=230, NULL_PSZ=231, 
		NULL_PTR=232, NULL_STRING=233, NULL_SYMBOL=234, NULL_FOX=235, LAST_NULL=236, 
		FIRST_OPERATOR=237, LT=238, LTE=239, GT=240, GTE=241, EQ=242, EEQ=243, 
		SUBSTR=244, NEQ=245, NEQ2=246, INC=247, DEC=248, PLUS=249, MINUS=250, 
		DIV=251, MOD=252, EXP=253, LSHIFT=254, RSHIFT=255, TILDE=256, MULT=257, 
		QQMARK=258, QMARK=259, AND=260, OR=261, NOT=262, BIT_NOT=263, BIT_AND=264, 
		BIT_OR=265, BIT_XOR=266, ASSIGN_OP=267, ASSIGN_ADD=268, ASSIGN_SUB=269, 
		ASSIGN_EXP=270, ASSIGN_MUL=271, ASSIGN_DIV=272, ASSIGN_MOD=273, ASSIGN_BITAND=274, 
		ASSIGN_BITOR=275, ASSIGN_LSHIFT=276, ASSIGN_RSHIFT=277, ASSIGN_XOR=278, 
		ASSIGN_QQMARK=279, LOGIC_AND=280, LOGIC_OR=281, LOGIC_NOT=282, LOGIC_XOR=283, 
		FOX_AND=284, FOX_OR=285, FOX_NOT=286, FOX_XOR=287, LPAREN=288, RPAREN=289, 
		LCURLY=290, RCURLY=291, LBRKT=292, RBRKT=293, COLON=294, COMMA=295, PIPE=296, 
		AMP=297, ADDROF=298, ALIAS=299, DOT=300, COLONCOLON=301, BACKSLASH=302, 
		ELLIPSIS=303, BACKBACKSLASH=304, DOTDOT=305, LAST_OPERATOR=306, FIRST_CONSTANT=307, 
		FALSE_CONST=308, TRUE_CONST=309, HEX_CONST=310, BIN_CONST=311, INT_CONST=312, 
		DATE_CONST=313, DATETIME_CONST=314, REAL_CONST=315, INVALID_NUMBER=316, 
		SYMBOL_CONST=317, CHAR_CONST=318, STRING_CONST=319, ESCAPED_STRING_CONST=320, 
		INTERPOLATED_STRING_CONST=321, INCOMPLETE_STRING_CONST=322, TEXT_STRING_CONST=323, 
		BRACKETED_STRING_CONST=324, BINARY_CONST=325, LAST_CONSTANT=326, PP_FIRST=327, 
		PP_COMMAND=328, PP_DEFINE=329, PP_ELSE=330, PP_ENDIF=331, PP_ENDREGION=332, 
		PP_ERROR=333, PP_IF=334, PP_IFDEF=335, PP_IFNDEF=336, PP_INCLUDE=337, 
		PP_LINE=338, PP_REGION=339, PP_STDOUT=340, PP_TRANSLATE=341, PP_UNDEF=342, 
		PP_WARNING=343, PP_PRAGMA=344, PP_TEXT=345, PP_ENDTEXT=346, PP_LAST=347, 
		MACRO=348, UDCSEP=349, ID=350, DOC_COMMENT=351, SL_COMMENT=352, ML_COMMENT=353, 
		LINE_CONT=354, LINE_CONT_OLD=355, SEMI=356, WS=357, NL=358, EOS=359, UNRECOGNIZED=360, 
		LAST=361;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_foxsource = 4, RULE_entity = 5, RULE_eos = 6, RULE_funcproc = 7, 
		RULE_funcproctype = 8, RULE_signature = 9, RULE_vodummyclauses = 10, RULE_callingconvention = 11, 
		RULE_vodll = 12, RULE_dllcallconv = 13, RULE_foxdll = 14, RULE_foxdllparam = 15, 
		RULE_vodllmethod = 16, RULE_parameterList = 17, RULE_parameter = 18, RULE_parameterDeclMods = 19, 
		RULE_statementBlock = 20, RULE_funcprocModifiers = 21, RULE_using_ = 22, 
		RULE_voglobal = 23, RULE_method = 24, RULE_methodtype = 25, RULE_vodefine = 26, 
		RULE_vostruct = 27, RULE_vostructmember = 28, RULE_vounion = 29, RULE_votypeModifiers = 30, 
		RULE_namespace_ = 31, RULE_interface_ = 32, RULE_class_ = 33, RULE_classModifiers = 34, 
		RULE_typeparameters = 35, RULE_typeparameter = 36, RULE_typeparameterconstraintsclause = 37, 
		RULE_typeparameterconstraint = 38, RULE_structure_ = 39, RULE_record_ = 40, 
		RULE_delegate_ = 41, RULE_enum_ = 42, RULE_enummember = 43, RULE_event_ = 44, 
		RULE_eventLineAccessor = 45, RULE_eventAccessor = 46, RULE_classvars = 47, 
		RULE_classvarModifiers = 48, RULE_classvar = 49, RULE_arraysub = 50, RULE_property = 51, 
		RULE_propertyParameterList = 52, RULE_propertyAutoAccessor = 53, RULE_propertyLineAccessor = 54, 
		RULE_accessorModifiers = 55, RULE_expressionList = 56, RULE_propertyAccessor = 57, 
		RULE_classmember = 58, RULE_constructor = 59, RULE_constructorchain = 60, 
		RULE_constructorModifiers = 61, RULE_vodeclare = 62, RULE_destructor = 63, 
		RULE_destructorModifiers = 64, RULE_overloadedOps = 65, RULE_conversionOps = 66, 
		RULE_operator_ = 67, RULE_operatorModifiers = 68, RULE_memberModifiers = 69, 
		RULE_attributes = 70, RULE_attributeBlock = 71, RULE_attributeTarget = 72, 
		RULE_attribute = 73, RULE_attributeParam = 74, RULE_globalAttributes = 75, 
		RULE_globalAttributeTarget = 76, RULE_filewidevar = 77, RULE_statement = 78, 
		RULE_blockTokens = 79, RULE_condBlock = 80, RULE_switchBlock = 81, RULE_catchBlock = 82, 
		RULE_recoverBlock = 83, RULE_variableDeclaration = 84, RULE_variableDeclarator = 85, 
		RULE_localdecl = 86, RULE_localvar = 87, RULE_impliedvar = 88, RULE_fielddecl = 89, 
		RULE_memvardecl = 90, RULE_memvar = 91, RULE_foxmemvardecl = 92, RULE_foxdimvardecl = 93, 
		RULE_foxlparameters = 94, RULE_foxdimvar = 95, RULE_foxclasslib = 96, 
		RULE_foxlparameter = 97, RULE_foxtypedecl = 98, RULE_foxmemvar = 99, RULE_localfuncproc = 100, 
		RULE_localfuncprocModifiers = 101, RULE_assignoperator = 102, RULE_expression = 103, 
		RULE_primary = 104, RULE_boundExpression = 105, RULE_aliasExpression = 106, 
		RULE_objectOrCollectioninitializer = 107, RULE_objectinitializer = 108, 
		RULE_memberinitializer = 109, RULE_initializervalue = 110, RULE_complexInitExpr = 111, 
		RULE_initializerMember = 112, RULE_collectioninitializer = 113, RULE_bracketedArgumentList = 114, 
		RULE_unnamedArgument = 115, RULE_argumentList = 116, RULE_namedArgument = 117, 
		RULE_iif = 118, RULE_nameDot = 119, RULE_name = 120, RULE_aliasedName = 121, 
		RULE_simpleName = 122, RULE_genericArgumentList = 123, RULE_identifierName = 124, 
		RULE_varidentifier = 125, RULE_varidentifierName = 126, RULE_datatype = 127, 
		RULE_arrayRank = 128, RULE_typeName = 129, RULE_usualTypeName = 130, RULE_literalArray = 131, 
		RULE_arrayElement = 132, RULE_anonType = 133, RULE_anonMember = 134, RULE_tupleType = 135, 
		RULE_tupleTypeElement = 136, RULE_tupleExpr = 137, RULE_tupleExprArgument = 138, 
		RULE_designationExpr = 139, RULE_designationTypeExpr = 140, RULE_localDesignation = 141, 
		RULE_codeblock = 142, RULE_codeblockCode = 143, RULE_lambdaParameterList = 144, 
		RULE_codeblockParamList = 145, RULE_codeblockExprList = 146, RULE_anonymousMethodExpression = 147, 
		RULE_explicitAnonymousFunctionParamList = 148, RULE_explicitAnonymousFunctionParameter = 149, 
		RULE_linqQuery = 150, RULE_fromClause = 151, RULE_queryBody = 152, RULE_queryBodyClause = 153, 
		RULE_joinIntoClause = 154, RULE_ordering = 155, RULE_selectOrGroupclause = 156, 
		RULE_queryContinuation = 157, RULE_identifier = 158, RULE_identifierString = 159, 
		RULE_xbaseFunc = 160, RULE_xbaseType = 161, RULE_nativeType = 162, RULE_literalValue = 163, 
		RULE_parserLiteralValue = 164, RULE_keywordsoft = 165, RULE_xppclass = 166, 
		RULE_xppclassModifiers = 167, RULE_xppclassMember = 168, RULE_xppmethodvis = 169, 
		RULE_xppvisibility = 170, RULE_xppdeclareMethod = 171, RULE_xppdeclmethodparams = 172, 
		RULE_xppisin = 173, RULE_xppmemberModifiers = 174, RULE_xppclassvars = 175, 
		RULE_xppvarassignment = 176, RULE_xppdeclareproperty = 177, RULE_xppaccessors = 178, 
		RULE_xppmethod = 179, RULE_xppinlineMethod = 180, RULE_foxclass = 181, 
		RULE_foxclassmember = 182, RULE_foxmethod = 183, RULE_foxclassvars = 184, 
		RULE_foxfield = 185, RULE_foxfieldinitializer = 186, RULE_foximplementsclause = 187, 
		RULE_foxaddobjectclause = 188, RULE_foxpemcomattrib = 189;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "foxsource", "entity", 
		"eos", "funcproc", "funcproctype", "signature", "vodummyclauses", "callingconvention", 
		"vodll", "dllcallconv", "foxdll", "foxdllparam", "vodllmethod", "parameterList", 
		"parameter", "parameterDeclMods", "statementBlock", "funcprocModifiers", 
		"using_", "voglobal", "method", "methodtype", "vodefine", "vostruct", 
		"vostructmember", "vounion", "votypeModifiers", "namespace_", "interface_", 
		"class_", "classModifiers", "typeparameters", "typeparameter", "typeparameterconstraintsclause", 
		"typeparameterconstraint", "structure_", "record_", "delegate_", "enum_", 
		"enummember", "event_", "eventLineAccessor", "eventAccessor", "classvars", 
		"classvarModifiers", "classvar", "arraysub", "property", "propertyParameterList", 
		"propertyAutoAccessor", "propertyLineAccessor", "accessorModifiers", "expressionList", 
		"propertyAccessor", "classmember", "constructor", "constructorchain", 
		"constructorModifiers", "vodeclare", "destructor", "destructorModifiers", 
		"overloadedOps", "conversionOps", "operator_", "operatorModifiers", "memberModifiers", 
		"attributes", "attributeBlock", "attributeTarget", "attribute", "attributeParam", 
		"globalAttributes", "globalAttributeTarget", "filewidevar", "statement", 
		"blockTokens", "condBlock", "switchBlock", "catchBlock", "recoverBlock", 
		"variableDeclaration", "variableDeclarator", "localdecl", "localvar", 
		"impliedvar", "fielddecl", "memvardecl", "memvar", "foxmemvardecl", "foxdimvardecl", 
		"foxlparameters", "foxdimvar", "foxclasslib", "foxlparameter", "foxtypedecl", 
		"foxmemvar", "localfuncproc", "localfuncprocModifiers", "assignoperator", 
		"expression", "primary", "boundExpression", "aliasExpression", "objectOrCollectioninitializer", 
		"objectinitializer", "memberinitializer", "initializervalue", "complexInitExpr", 
		"initializerMember", "collectioninitializer", "bracketedArgumentList", 
		"unnamedArgument", "argumentList", "namedArgument", "iif", "nameDot", 
		"name", "aliasedName", "simpleName", "genericArgumentList", "identifierName", 
		"varidentifier", "varidentifierName", "datatype", "arrayRank", "typeName", 
		"usualTypeName", "literalArray", "arrayElement", "anonType", "anonMember", 
		"tupleType", "tupleTypeElement", "tupleExpr", "tupleExprArgument", "designationExpr", 
		"designationTypeExpr", "localDesignation", "codeblock", "codeblockCode", 
		"lambdaParameterList", "codeblockParamList", "codeblockExprList", "anonymousMethodExpression", 
		"explicitAnonymousFunctionParamList", "explicitAnonymousFunctionParameter", 
		"linqQuery", "fromClause", "queryBody", "queryBodyClause", "joinIntoClause", 
		"ordering", "selectOrGroupclause", "queryContinuation", "identifier", 
		"identifierString", "xbaseFunc", "xbaseType", "nativeType", "literalValue", 
		"parserLiteralValue", "keywordsoft", "xppclass", "xppclassModifiers", 
		"xppclassMember", "xppmethodvis", "xppvisibility", "xppdeclareMethod", 
		"xppdeclmethodparams", "xppisin", "xppmemberModifiers", "xppclassvars", 
		"xppvarassignment", "xppdeclareproperty", "xppaccessors", "xppmethod", 
		"xppinlineMethod", "foxclass", "foxclassmember", "foxmethod", "foxclassvars", 
		"foxfield", "foxfieldinitializer", "foximplementsclause", "foxaddobjectclause", 
		"foxpemcomattrib"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "TUPLE", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", 
		"ADD", "ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", 
		"DESCENDING", "EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", 
		"JOIN", "LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", 
		"SELECT", "STACKALLOC", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", 
		"WHEN", "WHERE", "YIELD", "WITH", "RECORD", "LAST_POSITIONAL_KEYWORD", 
		"FIRST_TYPE", "ARRAY", "BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", 
		"INT", "LOGIC", "LONGINT", "OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", 
		"SHORTINT", "STRING", "SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", 
		"UINT64", "DYNAMIC", "DECIMAL", "DATETIME", "CURRENCY", "BINARY", "NINT", 
		"NUINT", "LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", "SCRIPT_LOAD", "ASSIGNMENT", 
		"DEFERRED", "ENDCLASS", "ENDSEQUENCE", "EXPORTED", "FREEZE", "FINAL", 
		"INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", "SYNC", 
		"ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", "EXCLUDE", "THISACCESS", "HELPSTRING", 
		"DIMENSION", "NOINIT", "THEN", "FOX_M", "SCAN", "ENDSCAN", "ENDFOR", "ENDFUNC", 
		"ENDPROC", "ENDTRY", "ENDWITH", "EACH", "THISFORM", "LAST_KEYWORD", "FIRST_NULL", 
		"NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", "NULL_DATE", "NULL_OBJECT", 
		"NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", "NULL_FOX", "LAST_NULL", 
		"FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", 
		"NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", 
		"RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
		"ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", 
		"ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", 
		"FOX_NOT", "FOX_XOR", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRKT", 
		"RBRKT", "COLON", "COMMA", "PIPE", "AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", 
		"BACKSLASH", "ELLIPSIS", "BACKBACKSLASH", "DOTDOT", "LAST_OPERATOR", "FIRST_CONSTANT", 
		"FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", 
		"DATETIME_CONST", "REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IF", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_STDOUT", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_PRAGMA", 
		"PP_TEXT", "PP_ENDTEXT", "PP_LAST", "MACRO", "UDCSEP", "ID", "DOC_COMMENT", 
		"SL_COMMENT", "ML_COMMENT", "LINE_CONT", "LINE_CONT_OLD", "SEMI", "WS", 
		"NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 388;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 386;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 380; Match(SCRIPT_LOAD);
						State = 381; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 382; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 383; Match(SCRIPT_REF);
						State = 384; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 385; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 390;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 394;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 391; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 396;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 397; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 402;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 399; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 400; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 401; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 404; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 405; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 408; Match(EOS);
			State = 409; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 414;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 411; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 416;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 417; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxsourceContext : XSharpParserRuleContext {
		public FilewidevarContext _filewidevar;
		public IList<FilewidevarContext> _Vars = new List<FilewidevarContext>();
		public StatementBlockContext StmtBlk;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FilewidevarContext[] filewidevar() {
			return GetRuleContexts<FilewidevarContext>();
		}
		public FilewidevarContext filewidevar(int i) {
			return GetRuleContext<FilewidevarContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public FoxsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxsource(this);
		}
	}

	[RuleVersion(0)]
	public FoxsourceContext foxsource() {
		FoxsourceContext _localctx = new FoxsourceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_foxsource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 422;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 419; _localctx._filewidevar = filewidevar();
					_localctx._Vars.Add(_localctx._filewidevar);
					}
					} 
				}
				State = 424;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 425; _localctx.StmtBlk = statementBlock();
			State = 429;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 426; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 431;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 432; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public FoxclassContext foxclass() {
			return GetRuleContext<FoxclassContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Record_Context record_() {
			return GetRuleContext<Record_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public FuncprocContext funcproc() {
			return GetRuleContext<FuncprocContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FilewidevarContext filewidevar() {
			return GetRuleContext<FilewidevarContext>(0);
		}
		public FoxdllContext foxdll() {
			return GetRuleContext<FoxdllContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_entity);
		try {
			State = 466;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 434; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 435; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 436;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 437; foxclass();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 438;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 439; xppclass();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 440; structure_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 441; record_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 442; interface_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 443; delegate_();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 444; event_();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 445; enum_();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 446; globalAttributes();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 447;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 448; vostruct();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 449;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 450; vounion();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 451; funcproc();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 452; using_();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 453; vodefine();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 454; voglobal();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 455; vodll();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 456;
				if (!(!IsXPP)) throw new FailedPredicateException(this, "!IsXPP");
				State = 457; method();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 458;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 459; xppmethod();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 460; constructor();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 461; destructor();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 462; filewidevar();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 463;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 464; foxdll();
				}
				break;

			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 465; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 469;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 468; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 471;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken InitExit;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode[] EXIT() { return GetTokens(XSharpParser.EXIT); }
		public ITerminalNode EXIT(int i) {
			return GetToken(XSharpParser.EXIT, i);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproc(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocContext funcproc() {
		FuncprocContext _localctx = new FuncprocContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funcproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 473; _localctx.Attributes = attributes();
				}
			}

			State = 477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 476; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXIT || _la==INIT) {
				{
				State = 479;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EXIT || _la==INIT) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 482; _localctx.T = funcproctype();
			State = 483; _localctx.Sig = signature();
			State = 485;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
				{
				State = 484;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 487; vodummyclauses();
			State = 488; _localctx.end = eos();
			State = 489; _localctx.StmtBlk = statementBlock();
			State = 496;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 493;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 490;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 491; Match(END);
					State = 492; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 495; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncproctypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public FuncproctypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproctype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproctype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproctype(this);
		}
	}

	[RuleVersion(0)]
	public FuncproctypeContext funcproctype() {
		FuncproctypeContext _localctx = new FuncproctypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_funcproctype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 498;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public ExpressionContext ExpressionBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 500; _localctx.Id = identifier();
			State = 502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 501; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 504; _localctx.ParamList = parameterList();
				}
			}

			State = 509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 507; Match(AS);
				State = 508; _localctx.Type = datatype();
				}
			}

			State = 514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 511; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 516;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 518;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 517; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 520; Match(UDCSEP);
				State = 521; _localctx.ExpressionBody = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodummyclausesContext : XSharpParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public VodummyclausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodummyclauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodummyclauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodummyclauses(this);
		}
	}

	[RuleVersion(0)]
	public VodummyclausesContext vodummyclauses() {
		VodummyclausesContext _localctx = new VodummyclausesContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_vodummyclauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 524; Match(EXPORT);
				State = 525; Match(LOCAL);
				}
			}

			State = 530;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 528; Match(DLLEXPORT);
				State = 529; Match(STRING_CONST);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 532;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public FuncproctypeContext T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public FuncproctypeContext funcproctype() {
			return GetRuleContext<FuncproctypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 534; _localctx.Attributes = attributes();
				}
			}

			State = 538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 537; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 540; _localctx.D = Match(DLL);
			State = 541; _localctx.T = funcproctype();
			State = 542; _localctx.Id = identifier();
			State = 544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 543; _localctx.ParamList = parameterList();
				}
			}

			State = 548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 546; Match(AS);
				State = 547; _localctx.Type = datatype();
				}
			}

			State = 551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 550; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 553; Match(COLON);
			State = 554; _localctx.Dll = identifierString();
			State = 557;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 555; Match(DOT);
				State = 556; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 572;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 559; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 560; Match(DOT);
				State = 561; _localctx.Entrypoint = identifierString();
				State = 563;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 562; _localctx.Address = Match(ADDROF);
					}
				}

				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 565; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 570;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 568; Match(NEQ2);
					State = 569; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 575;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTO || _la==ID) {
				{
				State = 574;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==ID) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 577; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 579;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public DatatypeContext Type;
		public IdentifierContext Id;
		public IdentifierContext Dll;
		public IdentifierStringContext Extension;
		public IdentifierContext Alias;
		public FoxdllparamContext _foxdllparam;
		public IList<FoxdllparamContext> _Params = new List<FoxdllparamContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierStringContext identifierString() {
			return GetRuleContext<IdentifierStringContext>(0);
		}
		public FoxdllparamContext[] foxdllparam() {
			return GetRuleContexts<FoxdllparamContext>();
		}
		public FoxdllparamContext foxdllparam(int i) {
			return GetRuleContext<FoxdllparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdll(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllContext foxdll() {
		FoxdllContext _localctx = new FoxdllContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_foxdll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 581; _localctx.Attributes = attributes();
				}
			}

			State = 585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 584; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 587; Match(DECLARE);
			State = 589;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 588; _localctx.Type = datatype();
				}
				break;
			}
			State = 591; _localctx.Id = identifier();
			State = 592; Match(IN);
			State = 593; _localctx.Dll = identifier();
			State = 596;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 594; Match(DOT);
				State = 595; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 600;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 598; Match(AS);
				State = 599; _localctx.Alias = identifier();
				}
				break;
			}
			State = 610;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 602; _localctx._foxdllparam = foxdllparam();
				_localctx._Params.Add(_localctx._foxdllparam);
				State = 607;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 603; Match(COMMA);
					State = 604; _localctx._foxdllparam = foxdllparam();
					_localctx._Params.Add(_localctx._foxdllparam);
					}
					}
					State = 609;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 612; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllparamContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DatatypeContext Type;
		public IToken Address;
		public IdentifierContext Name;
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxdllparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdllparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdllparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdllparam(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllparamContext foxdllparam() {
		FoxdllparamContext _localctx = new FoxdllparamContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_foxdllparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 614; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 617; _localctx.Type = datatype();
			State = 619;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 618; _localctx.Address = Match(ADDROF);
				}
				break;
			}
			State = 622;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 621; _localctx.Name = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllmethodContext : XSharpParserRuleContext {
		public IToken D;
		public IToken T;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public VodllmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodllmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public VodllmethodContext vodllmethod() {
		VodllmethodContext _localctx = new VodllmethodContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_vodllmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 624; _localctx.D = Match(DLL);
			State = 625;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0) || _la==CONSTRUCTOR || _la==DESTRUCTOR) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 627;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (RECORD - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDCLASS - 192)) | (1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (THISFORM - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TILDE - 256)) | (1L << (MULT - 256)) | (1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ESCAPED_STRING_CONST - 320)) | (1L << (INTERPOLATED_STRING_CONST - 320)) | (1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0)) {
				{
				State = 626;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 629; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 631; Match(LPAREN);
			State = 640;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 632; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 637;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 633; Match(COMMA);
					State = 634; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 639;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 642; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			State = 662;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 645;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 644; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 648;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 647; _localctx.Self = Match(SELF);
					}
					break;
				}
				State = 650; _localctx.Id = identifier();
				State = 654;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 651; _localctx.Op = assignoperator();
					State = 652; _localctx.Default = expression(0);
					}
				}

				State = 659;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 656; _localctx.Modifiers = parameterDeclMods();
					State = 657; _localctx.Type = datatype();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 661; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _IN;
		public IToken _tset987;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 664;
			_localctx._tset987 = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset987 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset987);
			State = 666;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 665; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 668; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 673;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _ASYNC;
		public IToken _tset1039;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 674;
				_localctx._tset1039 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1039 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1039);
				}
				}
				State = 677;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Global;
		public IToken Static;
		public IToken Unsafe;
		public IdentifierNameContext Alias;
		public AssignoperatorContext Op;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_using_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 680;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GLOBAL) {
				{
				State = 679; _localctx.Global = Match(GLOBAL);
				}
			}

			State = 682; Match(USING);
			State = 684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 683; _localctx.Static = Match(STATIC);
				}
				break;
			}
			State = 687;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,58,_ctx) ) {
			case 1:
				{
				State = 686; _localctx.Unsafe = Match(UNSAFE);
				}
				break;
			}
			State = 692;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,59,_ctx) ) {
			case 1:
				{
				State = 689; _localctx.Alias = identifierName();
				State = 690; _localctx.Op = assignoperator();
				}
				break;
			}
			State = 694; _localctx.Name = name(0);
			State = 695; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Global;
		public IToken Const;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public IToken end;
		public IToken Static;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_voglobal);
		int _la;
		try {
			State = 734;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,67,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 698;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 697; _localctx.Attributes = attributes();
					}
				}

				State = 701;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 700; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 703; _localctx.Global = Match(GLOBAL);
				State = 705;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,62,_ctx) ) {
				case 1:
					{
					State = 704; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 707; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 712;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 708; Match(COMMA);
					State = 709; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 714;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 715; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 718;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 717; _localctx.Attributes = attributes();
					}
				}

				State = 720; _localctx.Static = Match(STATIC);
				State = 722;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
				case 1:
					{
					State = 721; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 724; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 729;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 725; Match(COMMA);
					State = 726; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 731;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 732; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public SignatureContext Sig;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext T2;
		public IToken End;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public MethodtypeContext[] methodtype() {
			return GetRuleContexts<MethodtypeContext>();
		}
		public MethodtypeContext methodtype(int i) {
			return GetRuleContext<MethodtypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 736; _localctx.Attributes = attributes();
				}
			}

			State = 740;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 739; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 742; _localctx.T = methodtype();
			State = 744;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 743; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 746; _localctx.Sig = signature();
			State = 749;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 747; Match(CLASS);
				State = 748; _localctx.ClassId = identifier();
				}
			}

			State = 751; vodummyclauses();
			State = 752; _localctx.end = eos();
			State = 753; _localctx.StmtBlk = statementBlock();
			State = 758;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,72,_ctx) ) {
			case 1:
				{
				State = 754; Match(END);
				State = 755; _localctx.T2 = methodtype();
				State = 756; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext DataType;
		public IToken end;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 762; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 765; _localctx.D = Match(DEFINE);
			State = 766; _localctx.Id = identifier();
			State = 767; _localctx.Op = assignoperator();
			State = 768; _localctx.Expr = expression(0);
			State = 771;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 769; Match(AS);
				State = 770; _localctx.DataType = datatype();
				}
			}

			State = 773; _localctx.end = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken V;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] VOSTRUCT() { return GetTokens(XSharpParser.VOSTRUCT); }
		public ITerminalNode VOSTRUCT(int i) {
			return GetToken(XSharpParser.VOSTRUCT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 776;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 775; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 778; _localctx.V = Match(VOSTRUCT);
			State = 780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,76,_ctx) ) {
			case 1:
				{
				State = 779; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 782; _localctx.Id = identifier();
			State = 785;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 783; Match(ALIGN);
				State = 784; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 787; _localctx.e = eos();
			State = 789;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 788; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 791;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,78,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 796;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,79,_ctx) ) {
			case 1:
				{
				State = 793; Match(END);
				State = 794; Match(VOSTRUCT);
				State = 795; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_vostructmember);
		int _la;
		try {
			State = 818;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798; Match(MEMBER);
				State = 799; _localctx.Dim = Match(DIM);
				State = 800; _localctx.Id = identifier();
				State = 801; Match(LBRKT);
				State = 802; _localctx.ArraySub = arraysub();
				State = 803; Match(RBRKT);
				State = 806;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 804;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 805; _localctx.DataType = datatype();
					}
				}

				State = 808; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 810; Match(MEMBER);
				State = 811; _localctx.Id = identifier();
				State = 814;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 812;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 813; _localctx.DataType = datatype();
					}
				}

				State = 816; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken U;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] UNION() { return GetTokens(XSharpParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(XSharpParser.UNION, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 821;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 820; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 823; _localctx.U = Match(UNION);
			State = 825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 824; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 827; _localctx.Id = identifier();
			State = 828; _localctx.e = eos();
			State = 830;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 829; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 832;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,85,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 837;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,86,_ctx) ) {
			case 1:
				{
				State = 834; Match(END);
				State = 835; Match(UNION);
				State = 836; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1529;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 840;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 839;
				_localctx._tset1529 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1529 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1529);
				}
				}
				State = 842;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public IToken End;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_namespace_);
		try {
			int _alt;
			State = 868;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BEGIN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844; Match(BEGIN);
				State = 845; Match(NAMESPACE);
				State = 846; _localctx.Name = name(0);
				State = 847; _localctx.e = eos();
				State = 851;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 848; _localctx._entity = entity();
						_localctx._Entities.Add(_localctx._entity);
						}
						} 
					}
					State = 853;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,88,_ctx);
				}
				State = 857;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,89,_ctx) ) {
				case 1:
					{
					State = 854; Match(END);
					State = 855; Match(NAMESPACE);
					State = 856; _localctx.End = Match(EOS);
					}
					break;
				}
				}
				break;
			case NAMESPACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 859; Match(NAMESPACE);
				State = 860; _localctx.Name = name(0);
				State = 861; _localctx.e = eos();
				State = 865;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 862; _localctx._entity = entity();
						_localctx._Entities.Add(_localctx._entity);
						}
						} 
					}
					State = 867;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,90,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken I;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_interface_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 871;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 870; _localctx.Attributes = attributes();
				}
			}

			State = 874;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 873; _localctx.Modifiers = classModifiers();
				}
			}

			State = 876; _localctx.I = Match(INTERFACE);
			State = 878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				State = 877; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 880; _localctx.Id = identifier();
			State = 882;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 881; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 886;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 884;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 885; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 892;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 888; Match(COMMA);
				State = 889; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 894;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 898;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 895; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 900;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 901; _localctx.e = eos();
			State = 905;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,99,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 902; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 907;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,99,_ctx);
			}
			State = 908; Match(END);
			State = 909; Match(INTERFACE);
			State = 910; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_class_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 912; _localctx.Attributes = attributes();
				}
			}

			State = 916;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 915; _localctx.Modifiers = classModifiers();
				}
			}

			State = 918; _localctx.C = Match(CLASS);
			State = 920;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,102,_ctx) ) {
			case 1:
				{
				State = 919; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 922; _localctx.Id = identifier();
			State = 924;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 923; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 928;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 926; Match(INHERIT);
				State = 927; _localctx.BaseType = datatype();
				}
			}

			State = 939;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 930; Match(IMPLEMENTS);
				State = 931; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 936;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 932; Match(COMMA);
					State = 933; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 938;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 944;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 941; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 946;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 947; _localctx.e = eos();
			State = 951;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,108,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 948; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 953;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,108,_ctx);
			}
			State = 954; Match(END);
			State = 955; Match(CLASS);
			State = 956; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _LOCAL;
		public IToken _tset1817;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ITerminalNode[] LOCAL() { return GetTokens(XSharpParser.LOCAL); }
		public ITerminalNode LOCAL(int i) {
			return GetToken(XSharpParser.LOCAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 958;
				_localctx._tset1817 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1817 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1817);
				}
				}
				State = 961;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; Match(LT);
			State = 964; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 972;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 965; Match(COMMA);
				State = 967;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,110,_ctx) ) {
				case 1:
					{
					State = 966; attributes();
					}
					break;
				}
				State = 969; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 974;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 975; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 978;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				State = 977; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 981;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,113,_ctx) ) {
			case 1:
				{
				State = 980;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 983; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 985; Match(WHERE);
			State = 986; _localctx.Name = identifierName();
			State = 987; Match(IS);
			State = 988; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 993;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 989; Match(COMMA);
				State = 990; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 995;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 1001;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,115,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 996;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 997; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 998; Match(NEW);
				State = 999; Match(LPAREN);
				State = 1000; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 78, RULE_structure_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1004;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1003; _localctx.Attributes = attributes();
				}
			}

			State = 1007;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1006; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1009; _localctx.S = Match(STRUCTURE);
			State = 1011;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,118,_ctx) ) {
			case 1:
				{
				State = 1010; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1013; _localctx.Id = identifier();
			State = 1015;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1014; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1026;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1017; Match(IMPLEMENTS);
				State = 1018; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 1023;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1019; Match(COMMA);
					State = 1020; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 1025;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1031;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1028; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1033;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1034; _localctx.e = eos();
			State = 1038;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,123,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1035; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 1040;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,123,_ctx);
			}
			State = 1041; Match(END);
			State = 1042; Match(STRUCTURE);
			State = 1043; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Record_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken R;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] RECORD() { return GetTokens(XSharpParser.RECORD); }
		public ITerminalNode RECORD(int i) {
			return GetToken(XSharpParser.RECORD, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Record_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_record_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecord_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecord_(this);
		}
	}

	[RuleVersion(0)]
	public Record_Context record_() {
		Record_Context _localctx = new Record_Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_record_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1046;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1045; _localctx.Attributes = attributes();
				}
			}

			State = 1049;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1048; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1051; _localctx.R = Match(RECORD);
			State = 1054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				State = 1052; _localctx.S = Match(STRUCTURE);
				}
				break;

			case 2:
				{
				State = 1053; Match(CLASS);
				}
				break;
			}
			State = 1057;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,127,_ctx) ) {
			case 1:
				{
				State = 1056; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1059; _localctx.Id = identifier();
			State = 1061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1060; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1065;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 1063; Match(INHERIT);
				State = 1064; _localctx.BaseType = datatype();
				}
			}

			State = 1076;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1067; Match(IMPLEMENTS);
				State = 1068; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 1073;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1069; Match(COMMA);
					State = 1070; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 1075;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1081;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1078; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1083;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1084; _localctx.e = eos();
			State = 1088;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1085; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 1090;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,133,_ctx);
			}
			State = 1091; Match(END);
			State = 1092; Match(RECORD);
			State = 1093; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken D;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public IToken e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1096;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1095; _localctx.Attributes = attributes();
				}
			}

			State = 1099;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1098; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1101; _localctx.D = Match(DELEGATE);
			State = 1103;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,136,_ctx) ) {
			case 1:
				{
				State = 1102; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1105; _localctx.Id = identifier();
			State = 1107;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1106; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1110;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1109; _localctx.ParamList = parameterList();
				}
			}

			State = 1114;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1112; Match(AS);
				State = 1113; _localctx.Type = datatype();
				}
			}

			State = 1119;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1116; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1121;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1123;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1122; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1125; _localctx.e = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken E;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 84, RULE_enum_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1127; _localctx.Attributes = attributes();
				}
			}

			State = 1131;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1130; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1133; _localctx.E = Match(ENUM);
			State = 1135;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1134; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1137; _localctx.Id = identifier();
			State = 1140;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 1138;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1139; _localctx.Type = datatype();
				}
			}

			State = 1142; _localctx.e = eos();
			State = 1144;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1143; _localctx._enummember = enummember();
					_localctx._Members.Add(_localctx._enummember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1146;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,146,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1148; Match(END);
			State = 1150;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENUM) {
				{
				State = 1149; Match(ENUM);
				}
			}

			State = 1152; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 86, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1155;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				State = 1154; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1157; Match(MEMBER);
				}
				break;
			}
			State = 1160; _localctx.Id = identifier();
			State = 1164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1161; _localctx.Op = assignoperator();
				State = 1162; _localctx.Expr = expression(0);
				}
			}

			State = 1166; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken E;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 88, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1169;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1168; _localctx.Attributes = attributes();
				}
			}

			State = 1172;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1171; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1174; _localctx.E = Match(EVENT);
			State = 1176;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,153,_ctx) ) {
			case 1:
				{
				State = 1175; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1178; _localctx.Id = identifier();
			State = 1181;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1179; Match(AS);
				State = 1180; _localctx.Type = datatype();
				}
				break;
			}
			State = 1203;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1183; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1185;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1184; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1187;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,155,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1189; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1191; _localctx.Multi = eos();
				State = 1193;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1192; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1195;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ADD - 97)) | (1L << (REMOVE - 97)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1197; Match(END);
				State = 1199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EVENT) {
					{
					State = 1198; Match(EVENT);
					}
				}

				State = 1201; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1206;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,159,_ctx) ) {
			case 1:
				{
				State = 1205; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1209;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,160,_ctx) ) {
			case 1:
				{
				State = 1208; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1222;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,163,_ctx) ) {
			case 1:
				{
				State = 1211;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1212; _localctx.Key = Match(ADD);
				State = 1214;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,161,_ctx) ) {
				case 1:
					{
					State = 1213; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1216;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1217; _localctx.Key = Match(REMOVE);
				State = 1219;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,162,_ctx) ) {
				case 1:
					{
					State = 1218; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1221;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1225;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1224; _localctx.Attributes = attributes();
				}
			}

			State = 1228;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1227; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1250;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1230; _localctx.Key = Match(ADD);
				State = 1231; _localctx.end = eos();
				State = 1232; _localctx.StmtBlk = statementBlock();
				State = 1233; Match(END);
				State = 1235;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1234; Match(ADD);
					}
				}

				}
				break;

			case 2:
				{
				State = 1237; _localctx.Key = Match(ADD);
				State = 1238; Match(UDCSEP);
				State = 1239; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1240; _localctx.Key = Match(REMOVE);
				State = 1241; _localctx.end = eos();
				State = 1242; _localctx.StmtBlk = statementBlock();
				State = 1243; Match(END);
				State = 1245;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1244; Match(REMOVE);
					}
				}

				}
				break;

			case 4:
				{
				State = 1247; _localctx.Key = Match(REMOVE);
				State = 1248; Match(UDCSEP);
				State = 1249; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1252; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1255;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1254; _localctx.Attributes = attributes();
				}
			}

			State = 1257; _localctx.Modifiers = classvarModifiers();
			State = 1258; _localctx._classvar = classvar();
			_localctx._Vars.Add(_localctx._classvar);
			State = 1263;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1259; Match(COMMA);
				State = 1260; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				}
				}
				State = 1265;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1266; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _NEW;
		public IToken _tset2642;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1268;
					_localctx._tset2642 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (INSTANCE - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (CONST - 28)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (INITONLY - 95)) | (1L << (INTERNAL - 95)) | (1L << (NEW - 95)) | (1L << (FIXED - 95)) | (1L << (UNSAFE - 95)) | (1L << (VOLATILE - 95)))) != 0)) ) {
						_localctx._tset2642 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2642);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,171,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1274;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,172,_ctx) ) {
			case 1:
				{
				State = 1273; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1276; _localctx.Id = identifier();
			State = 1281;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1277; Match(LBRKT);
				State = 1278; _localctx.ArraySub = arraysub();
				State = 1279; Match(RBRKT);
				}
			}

			State = 1286;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1283; _localctx.Op = assignoperator();
				State = 1284; _localctx.Initializer = expression(0);
				}
			}

			State = 1290;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1288;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1289; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1308;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1292; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1296;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1293; Match(RBRKT);
						State = 1294; Match(LBRKT);
						State = 1295; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1298;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,176,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1300; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1303;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1301; Match(COMMA);
					State = 1302; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1305;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1307; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken P;
		public NameDotContext ExplicitIface;
		public IToken Self;
		public IdentifierContext Id;
		public PropertyParameterListContext ParamList;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyParameterListContext propertyParameterList() {
			return GetRuleContext<PropertyParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1311;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1310; _localctx.Attributes = attributes();
				}
			}

			State = 1314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1313; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1316; _localctx.P = Match(PROPERTY);
			State = 1318;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,181,_ctx) ) {
			case 1:
				{
				State = 1317; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1322;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,182,_ctx) ) {
			case 1:
				{
				State = 1320; _localctx.Self = Match(SELF);
				}
				break;

			case 2:
				{
				State = 1321; _localctx.Id = identifier();
				}
				break;
			}
			State = 1325;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,183,_ctx) ) {
			case 1:
				{
				State = 1324; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1329;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1327; Match(AS);
				State = 1328; _localctx.Type = datatype();
				}
				break;
			}
			State = 1363;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				State = 1331; _localctx.Auto = Match(AUTO);
				State = 1335;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					{
					State = 1332; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1337;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1341;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 1338; _localctx.Op = assignoperator();
					State = 1339; _localctx.Initializer = expression(0);
					}
				}

				State = 1343; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1345;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1344; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1347;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,187,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1349; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1351; _localctx.Multi = eos();
				State = 1353;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1352; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1355;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1357; Match(END);
				State = 1359;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROPERTY) {
					{
					State = 1358; Match(PROPERTY);
					}
				}

				State = 1361; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public IToken L;
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public IToken R;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyParameterList);
		int _la;
		try {
			State = 1389;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1365; _localctx.L = Match(LBRKT);
				State = 1374;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,192,_ctx) ) {
				case 1:
					{
					State = 1366; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1371;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1367; Match(COMMA);
						State = 1368; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1373;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1376; _localctx.R = Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1377; _localctx.L = Match(LPAREN);
				State = 1386;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,194,_ctx) ) {
				case 1:
					{
					State = 1378; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1383;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1379; Match(COMMA);
						State = 1380; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1385;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1388; _localctx.R = Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1391; _localctx.Attributes = attributes();
				}
			}

			State = 1395;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1394; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1397;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1400;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,198,_ctx) ) {
			case 1:
				{
				State = 1399; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1403;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,199,_ctx) ) {
			case 1:
				{
				State = 1402; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1416;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,202,_ctx) ) {
			case 1:
				{
				State = 1405;
				if (!(InputStream.La(2) != SET && InputStream.La(2) != INIT)) throw new FailedPredicateException(this, "InputStream.La(2) != SET && InputStream.La(2) != INIT");
				State = 1406;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==UDCSEP) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1408;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,200,_ctx) ) {
				case 1:
					{
					State = 1407; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1410;
				if (!(InputStream.La(2) != GET && InputStream.La(2) != UDCSEP)) throw new FailedPredicateException(this, "InputStream.La(2) != GET && InputStream.La(2) != UDCSEP");
				State = 1411;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1413;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,201,_ctx) ) {
				case 1:
					{
					State = 1412; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1415;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset3094;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1418;
					_localctx._tset3094 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset3094 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset3094);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1421;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,203,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1423; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1428;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1424; Match(COMMA);
					State = 1425; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1430;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,204,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken Key2;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(XSharpParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(XSharpParser.INIT, i);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1432;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1431; _localctx.Attributes = attributes();
				}
			}

			State = 1435;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1434; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1457;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,209,_ctx) ) {
			case 1:
				{
				State = 1437; _localctx.Key = Match(GET);
				State = 1438; _localctx.end = eos();
				State = 1439; _localctx.StmtBlk = statementBlock();
				State = 1440; Match(END);
				State = 1442;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1441; _localctx.Key2 = Match(GET);
					}
				}

				}
				break;

			case 2:
				{
				State = 1444; _localctx.Key = Match(GET);
				State = 1445; Match(UDCSEP);
				State = 1446; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1447;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1448; _localctx.end = eos();
				State = 1449; _localctx.StmtBlk = statementBlock();
				State = 1450; Match(END);
				State = 1452;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==INIT) {
					{
					State = 1451;
					_localctx.Key2 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==SET || _la==INIT) ) {
						_localctx.Key2 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;

			case 4:
				{
				State = 1454;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1455; Match(UDCSEP);
				State = 1456; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1459; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClseosContext : ClassmemberContext {
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClseosContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClseos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClseos(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public VodeclareContext decl;
		public VodeclareContext vodeclare() {
			return GetRuleContext<VodeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}
	public partial class ClsvodllmethodContext : ClassmemberContext {
		public VodllmethodContext Member;
		public VodllmethodContext vodllmethod() {
			return GetRuleContext<VodllmethodContext>(0);
		}
		public ClsvodllmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_classmember);
		try {
			State = 1477;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,210,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1461; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1462; ((ClsdeclareContext)_localctx).decl = vodeclare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1463; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1464; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1465; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1466; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1467; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1468; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1469; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1470; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1471; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1472; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1473; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsvodllmethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1474;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 1475; ((ClsvodllmethodContext)_localctx).Member = vodllmethod();
				}
				break;

			case 15:
				_localctx = new ClseosContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1476; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public IToken c1;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public ConstructorchainContext Chain;
		public StatementBlockContext StmtBlk;
		public IToken c2;
		public IToken End;
		public ITerminalNode[] CONSTRUCTOR() { return GetTokens(XSharpParser.CONSTRUCTOR); }
		public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(XSharpParser.CONSTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstructorchainContext constructorchain() {
			return GetRuleContext<ConstructorchainContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1479; _localctx.Attributes = attributes();
				}
			}

			State = 1483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1482; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1485; _localctx.c1 = Match(CONSTRUCTOR);
			State = 1487;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1486; _localctx.ParamList = parameterList();
				}
			}

			State = 1491;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1489; Match(AS);
				State = 1490; Match(VOID);
				}
			}

			State = 1494;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1493; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1498;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1496; Match(CLASS);
				State = 1497; _localctx.ClassId = identifier();
				}
			}

			State = 1502;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1500; Match(UDCSEP);
				State = 1501; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1504; _localctx.end = eos();
			State = 1506;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,218,_ctx) ) {
			case 1:
				{
				State = 1505; _localctx.Chain = constructorchain();
				}
				break;
			}
			State = 1508; _localctx.StmtBlk = statementBlock();
			State = 1512;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,219,_ctx) ) {
			case 1:
				{
				State = 1509; Match(END);
				State = 1510; _localctx.c2 = Match(CONSTRUCTOR);
				State = 1511; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorchainContext : XSharpParserRuleContext {
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorchainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorchain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorchain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorchain(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorchainContext constructorchain() {
		ConstructorchainContext _localctx = new ConstructorchainContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_constructorchain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1514;
			_la = _input.La(1);
			if ( !(_la==SELF || _la==SUPER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1515; Match(LPAREN);
			State = 1516; _localctx.ArgList = argumentList();
			State = 1517; Match(RPAREN);
			State = 1518; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3521;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1520;
				_localctx._tset3521 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3521 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3521);
				}
				}
				State = 1523;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodeclareContext : XSharpParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public VodeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodeclare(this);
		}
	}

	[RuleVersion(0)]
	public VodeclareContext vodeclare() {
		VodeclareContext _localctx = new VodeclareContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_vodeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; Match(DECLARE);
			State = 1526;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1528;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1527;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 1530;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (RECORD - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDCLASS - 192)) | (1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (THISFORM - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (TILDE - 256)) | (1L << (MULT - 256)) | (1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (ESCAPED_STRING_CONST - 320)) | (1L << (INTERPOLATED_STRING_CONST - 320)) | (1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0) );
			State = 1532; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public IToken d1;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken d2;
		public IToken End;
		public ITerminalNode[] DESTRUCTOR() { return GetTokens(XSharpParser.DESTRUCTOR); }
		public ITerminalNode DESTRUCTOR(int i) {
			return GetToken(XSharpParser.DESTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1535;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1534; _localctx.Attributes = attributes();
				}
			}

			State = 1538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1537; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1540; _localctx.d1 = Match(DESTRUCTOR);
			State = 1543;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1541; Match(LPAREN);
				State = 1542; Match(RPAREN);
				}
			}

			State = 1547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1545; Match(CLASS);
				State = 1546; _localctx.ClassId = identifier();
				}
			}

			State = 1551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1549; Match(UDCSEP);
				State = 1550; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1553; _localctx.end = eos();
			State = 1554; _localctx.StmtBlk = statementBlock();
			State = 1558;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,227,_ctx) ) {
			case 1:
				{
				State = 1555; Match(END);
				State = 1556; _localctx.d2 = Match(DESTRUCTOR);
				State = 1557; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1560; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1563;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1565;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (LT - 238)) | (1L << (LTE - 238)) | (1L << (GT - 238)) | (1L << (GTE - 238)) | (1L << (EEQ - 238)) | (1L << (NEQ - 238)) | (1L << (NEQ2 - 238)) | (1L << (INC - 238)) | (1L << (DEC - 238)) | (1L << (PLUS - 238)) | (1L << (MINUS - 238)) | (1L << (DIV - 238)) | (1L << (MOD - 238)) | (1L << (LSHIFT - 238)) | (1L << (RSHIFT - 238)) | (1L << (TILDE - 238)) | (1L << (MULT - 238)) | (1L << (AND - 238)) | (1L << (OR - 238)) | (1L << (NOT - 238)) | (1L << (PIPE - 238)) | (1L << (AMP - 238)))) != 0) || _la==FALSE_CONST || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 132, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public IToken o1;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken End;
		public ITerminalNode[] OPERATOR() { return GetTokens(XSharpParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(XSharpParser.OPERATOR, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 134, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1569; _localctx.Attributes = attributes();
				}
			}

			State = 1573;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1572; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1575; _localctx.o1 = Match(OPERATOR);
			State = 1578;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1576; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1577; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1581;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1580; _localctx.Gt = Match(GT);
				}
			}

			State = 1583; _localctx.ParamList = parameterList();
			State = 1586;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1584; Match(AS);
				State = 1585; _localctx.Type = datatype();
				}
			}

			State = 1590;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1588; Match(UDCSEP);
				State = 1589; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1592; _localctx.end = eos();
			State = 1593; _localctx.StmtBlk = statementBlock();
			State = 1597;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				State = 1594; Match(END);
				State = 1595; _localctx.o1 = Match(OPERATOR);
				State = 1596; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3898;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1600;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1599;
				_localctx._tset3898 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3898 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3898);
				}
				}
				State = 1602;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3925;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1604;
				_localctx._tset3925 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset3925 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3925);
				}
				}
				State = 1607;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1610;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1609; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1612;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,238,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attributeBlock);
		int _la;
		try {
			State = 1629;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1614; Match(LBRKT);
				State = 1616;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,239,_ctx) ) {
				case 1:
					{
					State = 1615; _localctx.Target = attributeTarget();
					}
					break;
				}
				State = 1618; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				State = 1623;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1619; Match(COMMA);
					State = 1620; _localctx._attribute = attribute();
					_localctx._Attributes.Add(_localctx._attribute);
					}
					}
					State = 1625;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1626; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1628; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1631;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << FIELD) | (1L << METHOD) | (1L << RETURN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (CONSTRUCTOR - 82)) | (1L << (DELEGATE - 82)) | (1L << (ENUM - 82)) | (1L << (EVENT - 82)) | (1L << (INTERFACE - 82)) | (1L << (PROPERTY - 82)) | (1L << (STRUCTURE - 82)))) != 0) || _la==ID) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1632; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; _localctx.Name = name(0);
			State = 1647;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1635; Match(LPAREN);
				State = 1644;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,243,_ctx) ) {
				case 1:
					{
					State = 1636; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1641;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1637; Match(COMMA);
						State = 1638; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1643;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1646; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_attributeParam);
		try {
			State = 1654;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,245,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1649; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1650; ((PropertyAttributeParamContext)_localctx).Op = assignoperator();
				State = 1651; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1656; Match(LBRKT);
			State = 1657; _localctx.Target = globalAttributeTarget();
			State = 1658; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1663;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1659; Match(COMMA);
				State = 1660; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1665;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1666; Match(RBRKT);
			State = 1667; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_globalAttributeTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1669; _localctx.Token = Match(ID);
			State = 1670; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilewidevarContext : XSharpParserRuleContext {
		public IToken Token;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public EosContext end;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public MemvarContext _memvar;
		public IList<MemvarContext> _XVars = new List<MemvarContext>();
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public FilewidevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filewidevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFilewidevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFilewidevar(this);
		}
	}

	[RuleVersion(0)]
	public FilewidevarContext filewidevar() {
		FilewidevarContext _localctx = new FilewidevarContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_filewidevar);
		int _la;
		try {
			State = 1722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,252,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1672; _localctx.Token = Match(MEMVAR);
				State = 1673; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				State = 1678;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1674; Match(COMMA);
					State = 1675; _localctx._identifierName = identifierName();
					_localctx._Vars.Add(_localctx._identifierName);
					}
					}
					State = 1680;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1681; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1683; _localctx.Token = Match(FIELD);
				State = 1684; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				State = 1689;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1685; Match(COMMA);
					State = 1686; _localctx._identifierName = identifierName();
					_localctx._Fields.Add(_localctx._identifierName);
					}
					}
					State = 1691;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1694;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN) {
					{
					State = 1692; Match(IN);
					State = 1693; _localctx.Alias = identifierName();
					}
				}

				State = 1696; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1698;
				if (!(!IsFox )) throw new FailedPredicateException(this, "!IsFox ");
				State = 1699; _localctx.Token = Match(PUBLIC);
				State = 1700; _localctx._memvar = memvar(_localctx.Token);
				_localctx._XVars.Add(_localctx._memvar);
				State = 1705;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1701; Match(COMMA);
					State = 1702; _localctx._memvar = memvar(_localctx.Token);
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 1707;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1708; _localctx.end = eos();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1710;
				if (!(IsFox  )) throw new FailedPredicateException(this, "IsFox  ");
				State = 1711; _localctx.Token = Match(PUBLIC);
				State = 1712; _localctx._foxmemvar = foxmemvar(_localctx.Token);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 1717;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1713; Match(COMMA);
					State = 1714; _localctx._foxmemvar = foxmemvar(_localctx.Token);
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 1719;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1720; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoxmemvardeclStmtContext : StatementContext {
		public FoxmemvardeclContext Decl;
		public FoxmemvardeclContext foxmemvardecl() {
			return GetRuleContext<FoxmemvardeclContext>(0);
		}
		public FoxmemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardeclStmt(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public IToken T;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDTRY() { return GetToken(XSharpParser.ENDTRY, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public IToken Y;
		public IToken R;
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class MemvardeclStmtContext : StatementContext {
		public MemvardeclContext Decl;
		public MemvardeclContext memvardecl() {
			return GetRuleContext<MemvardeclContext>(0);
		}
		public MemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardeclStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class LocalFunctionStmtContext : StatementContext {
		public LocalfuncprocContext Decl;
		public LocalfuncprocContext localfuncproc() {
			return GetRuleContext<LocalfuncprocContext>(0);
		}
		public LocalFunctionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalFunctionStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public IToken S;
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class FoxtextoutStmtContext : StatementContext {
		public IToken B;
		public IToken String;
		public IToken end;
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(XSharpParser.BACKSLASH, 0); }
		public ITerminalNode BACKBACKSLASH() { return GetToken(XSharpParser.BACKBACKSLASH, 0); }
		public FoxtextoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextoutStmt(this);
		}
	}
	public partial class FoxdimvardeclStmtContext : StatementContext {
		public FoxdimvardeclContext Decl;
		public FoxdimvardeclContext foxdimvardecl() {
			return GetRuleContext<FoxdimvardeclContext>(0);
		}
		public FoxdimvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardeclStmt(this);
		}
	}
	public partial class DoStmtContext : StatementContext {
		public IToken D;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArgumentListContext ArgList;
		public EosContext end;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DoStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDoStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public IToken c;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _CaseBlocks = new List<CondBlockContext>();
		public IToken oth;
		public StatementBlockContext OtherwiseStmtBlk;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public IToken r;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}
	public partial class FoxlparametersStmtContext : StatementContext {
		public FoxlparametersContext Decl;
		public FoxlparametersContext foxlparameters() {
			return GetRuleContext<FoxlparametersContext>(0);
		}
		public FoxlparametersStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparametersStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparametersStmt(this);
		}
	}
	public partial class FoxexpressionStmtContext : StatementContext {
		public IToken Eq;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FoxexpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxexpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxexpressionStmt(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public IToken f;
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode ENDSEQUENCE() { return GetToken(XSharpParser.ENDSEQUENCE, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public IToken w;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IToken f;
		public IToken a;
		public IToken V;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken R;
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class WithBlockContext : StatementContext {
		public ExpressionContext Expr;
		public IToken As;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WITH() { return GetTokens(XSharpParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(XSharpParser.WITH, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDWITH() { return GetToken(XSharpParser.ENDWITH, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public WithBlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWithBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWithBlock(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IToken i;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _IfBlocks = new List<CondBlockContext>();
		public IToken e;
		public IToken el;
		public StatementBlockContext ElseStmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode[] ELSEIF() { return GetTokens(XSharpParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(XSharpParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public IToken a;
		public VariableDeclarationContext VarDecl;
		public BlockTokensContext Key1;
		public BlockTokensContext Key2;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockTokensContext[] blockTokens() {
			return GetRuleContexts<BlockTokensContext>();
		}
		public BlockTokensContext blockTokens(int i) {
			return GetRuleContext<BlockTokensContext>(i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_statement);
		int _la;
		try {
			State = 2085;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1724; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new FoxlparametersStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1725; ((FoxlparametersStmtContext)_localctx).Decl = foxlparameters();
				}
				break;

			case 3:
				_localctx = new LocalFunctionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1726; ((LocalFunctionStmtContext)_localctx).Decl = localfuncproc();
				}
				break;

			case 4:
				_localctx = new MemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1727;
				if (!(!IsFox && HasMemVars)) throw new FailedPredicateException(this, "!IsFox && HasMemVars");
				State = 1728; ((MemvardeclStmtContext)_localctx).Decl = memvardecl();
				}
				break;

			case 5:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1729; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 6:
				_localctx = new FoxmemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1730;
				if (!(IsFox && HasMemVars)) throw new FailedPredicateException(this, "IsFox && HasMemVars");
				State = 1731; ((FoxmemvardeclStmtContext)_localctx).Decl = foxmemvardecl();
				}
				break;

			case 7:
				_localctx = new FoxdimvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1732;
				if (!(IsFox )) throw new FailedPredicateException(this, "IsFox ");
				State = 1733; ((FoxdimvardeclStmtContext)_localctx).Decl = foxdimvardecl();
				}
				break;

			case 8:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1735;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1734; Match(DO);
					}
				}

				State = 1737; ((WhileStmtContext)_localctx).w = Match(WHILE);
				State = 1738; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1739; ((WhileStmtContext)_localctx).end = eos();
				State = 1740; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1746;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1741; ((WhileStmtContext)_localctx).e = Match(END);
					State = 1743;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==DO || _la==WHILE) {
						{
						State = 1742;
						_la = _input.La(1);
						if ( !(_la==DO || _la==WHILE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				case ENDDO:
					{
					State = 1745; ((WhileStmtContext)_localctx).e = Match(ENDDO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1748; eos();
				}
				break;

			case 9:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1750; Match(NOP);
				State = 1753;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1751; Match(LPAREN);
					State = 1752; Match(RPAREN);
					}
				}

				State = 1755; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1756; ((ForStmtContext)_localctx).f = Match(FOR);
				State = 1777;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					State = 1757; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1763;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1759;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1758; Match(LOCAL);
							}
						}

						State = 1761; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1762; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1765; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1766; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1767; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1769; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1770; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1771; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1772; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1775;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1773; Match(AS);
						State = 1774; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1779;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1780; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1783;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1781; Match(STEP);
					State = 1782; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1785; ((ForStmtContext)_localctx).end = eos();
				State = 1786; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1789;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1787; ((ForStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1788; ((ForStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1791; eos();
				}
				break;

			case 11:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1793; ((IfStmtContext)_localctx).i = Match(IF);
				State = 1794; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).i);
				((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
				State = 1799;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1795; ((IfStmtContext)_localctx).e = Match(ELSEIF);
					State = 1796; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).e);
					((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
					}
					}
					State = 1801;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1806;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1802; ((IfStmtContext)_localctx).el = Match(ELSE);
					State = 1803; eos();
					State = 1804; ((IfStmtContext)_localctx).ElseStmtBlk = statementBlock();
					}
				}

				State = 1813;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1808; ((IfStmtContext)_localctx).e = Match(END);
					State = 1810;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==IF) {
						{
						State = 1809; Match(IF);
						}
					}

					}
					break;
				case ENDIF:
					{
					State = 1812; ((IfStmtContext)_localctx).e = Match(ENDIF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1815; eos();
				}
				break;

			case 12:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1817; Match(DO);
				State = 1818; Match(CASE);
				State = 1819; ((CaseStmtContext)_localctx).end = eos();
				State = 1824;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE) {
					{
					{
					State = 1820; ((CaseStmtContext)_localctx).c = Match(CASE);
					State = 1821; ((CaseStmtContext)_localctx)._condBlock = condBlock(((CaseStmtContext)_localctx).c);
					((CaseStmtContext)_localctx)._CaseBlocks.Add(((CaseStmtContext)_localctx)._condBlock);
					}
					}
					State = 1826;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1831;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OTHERWISE) {
					{
					State = 1827; ((CaseStmtContext)_localctx).oth = Match(OTHERWISE);
					State = 1828; ((CaseStmtContext)_localctx).end = eos();
					State = 1829; ((CaseStmtContext)_localctx).OtherwiseStmtBlk = statementBlock();
					}
				}

				State = 1838;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1833; ((CaseStmtContext)_localctx).e = Match(END);
					State = 1835;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CASE) {
						{
						State = 1834; Match(CASE);
						}
					}

					}
					break;
				case ENDCASE:
					{
					State = 1837; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1840; eos();
				}
				break;

			case 13:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1842; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1843; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1844; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1845; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 15:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1846; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1848;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
				case 1:
					{
					State = 1847; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1850; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 16:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1851; ((ReturnStmtContext)_localctx).R = Match(RETURN);
				State = 1854;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,272,_ctx) ) {
				case 1:
					{
					State = 1852; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1853; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1856; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 17:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1857;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1866;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,274,_ctx) ) {
				case 1:
					{
					State = 1858; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1863;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1859; Match(COMMA);
						State = 1860; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1865;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1868; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 18:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1869; Match(BEGIN);
				State = 1870; Match(SEQUENCE);
				State = 1871; ((SeqStmtContext)_localctx).end = eos();
				State = 1872; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1875;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RECOVER) {
					{
					State = 1873; Match(RECOVER);
					State = 1874; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
				}

				State = 1881;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1877; ((SeqStmtContext)_localctx).F = Match(FINALLY);
					State = 1878; eos();
					State = 1879; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1888;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					{
					State = 1883; ((SeqStmtContext)_localctx).e = Match(END);
					State = 1885;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEQUENCE) {
						{
						State = 1884; Match(SEQUENCE);
						}
					}

					}
					}
					break;
				case ENDSEQUENCE:
					{
					State = 1887; ((SeqStmtContext)_localctx).e = Match(ENDSEQUENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1890; eos();
				}
				break;

			case 19:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1892; ((RepeatStmtContext)_localctx).r = Match(REPEAT);
				State = 1893; ((RepeatStmtContext)_localctx).end = eos();
				State = 1894; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1895; Match(UNTIL);
				State = 1896; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1897; eos();
				}
				break;

			case 20:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1902;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOREACH:
					{
					State = 1899; ((ForeachStmtContext)_localctx).f = Match(FOREACH);
					}
					break;
				case FOR:
					{
					State = 1900; ((ForeachStmtContext)_localctx).f = Match(FOR);
					State = 1901; Match(EACH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1905;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,280,_ctx) ) {
				case 1:
					{
					State = 1904; ((ForeachStmtContext)_localctx).a = Match(AWAIT);
					}
					break;
				}
				State = 1916;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,282,_ctx) ) {
				case 1:
					{
					State = 1907; ((ForeachStmtContext)_localctx).V = Match(IMPLIED);
					State = 1908; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;

				case 2:
					{
					State = 1909; ((ForeachStmtContext)_localctx).Id = varidentifier();
					State = 1912;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1910; Match(AS);
						State = 1911; ((ForeachStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;

				case 3:
					{
					State = 1914; ((ForeachStmtContext)_localctx).V = Match(VAR);
					State = 1915; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;
				}
				State = 1918; Match(IN);
				State = 1919; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1920; ((ForeachStmtContext)_localctx).end = eos();
				State = 1921; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1924;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1922; ((ForeachStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1923; ((ForeachStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1926; eos();
				}
				break;

			case 21:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1928; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1930;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,284,_ctx) ) {
				case 1:
					{
					State = 1929; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1932; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 22:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1933; ((TryStmtContext)_localctx).T = Match(TRY);
				State = 1934; ((TryStmtContext)_localctx).end = eos();
				State = 1935; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1942;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CATCH) {
					{
					{
					State = 1936; Match(CATCH);
					State = 1938;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,285,_ctx) ) {
					case 1:
						{
						State = 1937; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
						((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
						}
						break;
					}
					}
					}
					State = 1944;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1949;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1945; ((TryStmtContext)_localctx).F = Match(FINALLY);
					State = 1946; eos();
					State = 1947; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1956;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1951; ((TryStmtContext)_localctx).e = Match(END);
					State = 1953;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TRY) {
						{
						State = 1952; Match(TRY);
						}
					}

					}
					break;
				case ENDTRY:
					{
					State = 1955; ((TryStmtContext)_localctx).e = Match(ENDTRY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1958; eos();
				}
				break;

			case 23:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1960; Match(BEGIN);
				State = 1961; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1962; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1963; ((BlockStmtContext)_localctx).end = eos();
				State = 1964; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1965; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1967;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCK) {
					{
					State = 1966; Match(LOCK);
					}
				}

				State = 1969; eos();
				}
				break;

			case 24:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1971; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1972; ((YieldStmtContext)_localctx).R = Match(RETURN);
				State = 1975;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,291,_ctx) ) {
				case 1:
					{
					State = 1973; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1974; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1977; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 25:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1978; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1979;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1980; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 26:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1982;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1981;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1984; ((SwitchStmtContext)_localctx).S = Match(SWITCH);
				State = 1985; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1986; ((SwitchStmtContext)_localctx).end = eos();
				State = 1988;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1987; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
					((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
					}
					}
					State = 1990;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==CASE || _la==OTHERWISE );
				State = 1992; ((SwitchStmtContext)_localctx).e = Match(END);
				State = 1994;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SWITCH) {
					{
					State = 1993; Match(SWITCH);
					}
				}

				State = 1996; eos();
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1998; Match(BEGIN);
				State = 1999; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 2001;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,295,_ctx) ) {
				case 1:
					{
					State = 2000; ((BlockStmtContext)_localctx).a = Match(AWAIT);
					}
					break;
				}
				State = 2005;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
				case 1:
					{
					State = 2003; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 2004; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 2007; ((BlockStmtContext)_localctx).end = eos();
				State = 2008; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 2009; ((BlockStmtContext)_localctx).e = Match(END);
				State = 2011;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 2010; Match(USING);
					}
				}

				State = 2013; eos();
				}
				break;

			case 28:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2015; Match(BEGIN);
				State = 2016; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 2017; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 2018; ((BlockStmtContext)_localctx).end = eos();
				State = 2019; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 2020; ((BlockStmtContext)_localctx).e = Match(END);
				State = 2022;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FIXED) {
					{
					State = 2021; Match(FIXED);
					}
				}

				State = 2024; eos();
				}
				break;

			case 29:
				_localctx = new WithBlockContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2026; Match(WITH);
				State = 2027; ((WithBlockContext)_localctx).Expr = expression(0);
				State = 2033;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2028; ((WithBlockContext)_localctx).As = Match(AS);
					State = 2029; ((WithBlockContext)_localctx).DataType = datatype();
					State = 2031;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2030; foxclasslib();
						}
					}

					}
				}

				State = 2035; ((WithBlockContext)_localctx).end = eos();
				State = 2036; ((WithBlockContext)_localctx).StmtBlk = statementBlock();
				State = 2042;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 2037; ((WithBlockContext)_localctx).e = Match(END);
					State = 2039;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WITH) {
						{
						State = 2038; Match(WITH);
						}
					}

					}
					break;
				case ENDWITH:
					{
					State = 2041; ((WithBlockContext)_localctx).e = Match(ENDWITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2044; eos();
				}
				break;

			case 30:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2046; Match(BEGIN);
				State = 2047; ((BlockStmtContext)_localctx).Key1 = blockTokens();
				State = 2048; ((BlockStmtContext)_localctx).end = eos();
				State = 2049; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 2050; ((BlockStmtContext)_localctx).e = Match(END);
				State = 2052;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) {
					{
					State = 2051; ((BlockStmtContext)_localctx).Key2 = blockTokens();
					}
				}

				State = 2054; eos();
				}
				break;

			case 31:
				_localctx = new FoxexpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2056; ((FoxexpressionStmtContext)_localctx).Eq = Match(EQ);
				State = 2057; ((FoxexpressionStmtContext)_localctx)._expression = expression(0);
				((FoxexpressionStmtContext)_localctx)._Exprs.Add(((FoxexpressionStmtContext)_localctx)._expression);
				State = 2058; ((FoxexpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 32:
				_localctx = new FoxtextoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2060;
				((FoxtextoutStmtContext)_localctx).B = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BACKSLASH || _la==BACKBACKSLASH) ) {
					((FoxtextoutStmtContext)_localctx).B = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2061; ((FoxtextoutStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 2062; ((FoxtextoutStmtContext)_localctx).end = Match(EOS);
				}
				break;

			case 33:
				_localctx = new DoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2063; ((DoStmtContext)_localctx).D = Match(DO);
				State = 2065;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,304,_ctx) ) {
				case 1:
					{
					State = 2064; ((DoStmtContext)_localctx).Amp = Match(AMP);
					}
					break;
				}
				State = 2067; ((DoStmtContext)_localctx).Id = varidentifierName();
				State = 2070;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 2068; Match(WITH);
					State = 2069; ((DoStmtContext)_localctx).ArgList = argumentList();
					}
				}

				State = 2072; ((DoStmtContext)_localctx).end = eos();
				}
				break;

			case 34:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2074;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 2075; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 2080;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2076; Match(COMMA);
					State = 2077; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 2082;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2083; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTokensContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public BlockTokensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTokens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockTokens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockTokens(this);
		}
	}

	[RuleVersion(0)]
	public BlockTokensContext blockTokens() {
		BlockTokensContext _localctx = new BlockTokensContext(_ctx, State);
		EnterRule(_localctx, 158, RULE_blockTokens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2087;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondBlockContext : XSharpParserRuleContext {
		public IToken st;
		public ExpressionContext Cond;
		public IToken Then;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public CondBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CondBlockContext(ParserRuleContext parent, int invokingState, IToken st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_condBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondBlock(this);
		}
	}

	[RuleVersion(0)]
	public CondBlockContext condBlock(IToken st) {
		CondBlockContext _localctx = new CondBlockContext(_ctx, State, st);
		EnterRule(_localctx, 160, RULE_condBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2089; _localctx.Cond = expression(0);
			State = 2091;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THEN) {
				{
				State = 2090; _localctx.Then = Match(THEN);
				}
			}

			State = 2093; _localctx.end = eos();
			State = 2094; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public IToken W;
		public ExpressionContext whenexpr;
		public VaridentifierContext Id;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,311,_ctx) ) {
			case 1:
				{
				State = 2096; _localctx.Key = Match(CASE);
				State = 2097; _localctx.Const = expression(0);
				State = 2100;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2098; _localctx.W = Match(WHEN);
					State = 2099; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 2:
				{
				State = 2102; _localctx.Key = Match(CASE);
				State = 2103; _localctx.Id = varidentifier();
				State = 2104; Match(AS);
				State = 2105; _localctx.DataType = datatype();
				State = 2108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2106; _localctx.W = Match(WHEN);
					State = 2107; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 3:
				{
				State = 2110; _localctx.Key = Match(OTHERWISE);
				}
				break;
			}
			State = 2113; _localctx.end = eos();
			State = 2114; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken W;
		public ExpressionContext whenexpr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				State = 2116; Match(TO);
				}
				break;
			}
			State = 2120;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,313,_ctx) ) {
			case 1:
				{
				State = 2119; _localctx.Id = varidentifier();
				}
				break;
			}
			State = 2124;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2122; Match(AS);
				State = 2123; _localctx.Type = datatype();
				}
			}

			State = 2128;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 2126; _localctx.W = Match(WHEN);
				State = 2127; _localctx.whenexpr = expression(0);
				}
			}

			State = 2130; _localctx.end = eos();
			State = 2131; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2135;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2133; Match(USING);
				State = 2134; _localctx.Id = varidentifier();
				}
			}

			State = 2137; _localctx.end = eos();
			State = 2138; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableDeclaration);
		int _la;
		try {
			State = 2168;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,322,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2145;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 2141;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2140; Match(LOCAL);
						}
					}

					State = 2143; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 2144; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2147; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2148; Match(COMMA);
					State = 2149; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2155; Match(LOCAL);
				State = 2156; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2157; Match(COMMA);
					State = 2158; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2163;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2166;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2164; Match(AS);
					State = 2165; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2170; _localctx.Id = varidentifier();
			State = 2171; _localctx.Op = assignoperator();
			State = 2172; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDesignationContext : LocaldeclContext {
		public DesignationExprContext Designation;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public DesignationExprContext designationExpr() {
			return GetRuleContext<DesignationExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public VarLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDesignation(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public IToken Using;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}
	public partial class TypeLocalDesignationContext : LocaldeclContext {
		public DesignationTypeExprContext DesignationType;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public DesignationTypeExprContext designationTypeExpr() {
			return GetRuleContext<DesignationTypeExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public TypeLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_localdecl);
		int _la;
		try {
			State = 2307;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2174; Match(LOCAL);
				State = 2176;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,323,_ctx) ) {
				case 1:
					{
					State = 2175; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
					break;
				}
				State = 2178; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2183;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2179; Match(COMMA);
					State = 2180; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2185;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2186; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2188; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2189; Match(LOCAL);
				State = 2190; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2195;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2191; Match(COMMA);
					State = 2192; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2197;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2198; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2200;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 2201; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2202; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2207;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2203; Match(COMMA);
					State = 2204; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2209;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2210; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2213;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2212; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2215; Match(VAR);
				State = 2216; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2221;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2217; Match(COMMA);
					State = 2218; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2223;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2224; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2226; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2228;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2227; Match(LOCAL);
					}
				}

				State = 2230; Match(IMPLIED);
				State = 2231; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2236;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2232; Match(COMMA);
					State = 2233; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2238;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2239; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2241; Match(LOCAL);
				State = 2243;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2242; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2245; Match(IMPLIED);
				State = 2246; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2251;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2247; Match(COMMA);
					State = 2248; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2253;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2254; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 7:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2256; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2258;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2257; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2260; Match(VAR);
				State = 2261; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2266;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2262; Match(COMMA);
					State = 2263; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2268;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2269; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2271; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2273;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2272; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2276;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2275; Match(LOCAL);
					}
				}

				State = 2278; Match(IMPLIED);
				State = 2279; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2284;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2280; Match(COMMA);
					State = 2281; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2286;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2287; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 9:
				_localctx = new VarLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2294;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case VAR:
					{
					State = 2289; Match(VAR);
					}
					break;
				case LOCAL:
				case IMPLIED:
					{
					State = 2291;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2290; Match(LOCAL);
						}
					}

					State = 2293; Match(IMPLIED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2296; ((VarLocalDesignationContext)_localctx).Designation = designationExpr();
				State = 2297; ((VarLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2298; ((VarLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2299; ((VarLocalDesignationContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new TypeLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2301; Match(LOCAL);
				State = 2302; ((TypeLocalDesignationContext)_localctx).DesignationType = designationTypeExpr();
				State = 2303; ((TypeLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2304; ((TypeLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2305; ((TypeLocalDesignationContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public VaridentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_localvar);
		int _la;
		try {
			State = 2351;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2310;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					State = 2309; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 2313;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,342,_ctx) ) {
				case 1:
					{
					State = 2312; _localctx.Dim = Match(DIM);
					}
					break;
				}
				State = 2315; _localctx.Id = varidentifier();
				State = 2320;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 2316; Match(LBRKT);
					State = 2317; _localctx.ArraySub = arraysub();
					State = 2318; Match(RBRKT);
					}
				}

				State = 2325;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2322; _localctx.Op = assignoperator();
					State = 2323; _localctx.Expression = expression(0);
					}
				}

				State = 2332;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2327;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2328; _localctx.DataType = datatype();
					State = 2330;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2329; foxclasslib();
						}
					}

					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2334;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 2335; _localctx.Id = varidentifier();
				State = 2336; Match(LPAREN);
				State = 2337; _localctx.ArraySub = arraysub();
				State = 2338; Match(RPAREN);
				State = 2342;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2339; _localctx.Op = assignoperator();
					State = 2340; _localctx.Expression = expression(0);
					}
				}

				State = 2349;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2344;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2345; _localctx.DataType = datatype();
					State = 2347;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2346; foxclasslib();
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_impliedvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,351,_ctx) ) {
			case 1:
				{
				State = 2353; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2356; _localctx.Id = varidentifier();
			State = 2357; _localctx.Op = assignoperator();
			State = 2358; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2360; Match(FIELD);
			State = 2361; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2366;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2362; Match(COMMA);
				State = 2363; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2368;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2369; Match(IN);
				State = 2370; _localctx.Alias = identifierName();
				}
			}

			State = 2373; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public MemvarContext _memvar;
		public IList<MemvarContext> _Vars = new List<MemvarContext>();
		public EosContext end;
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public MemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public MemvardeclContext memvardecl() {
		MemvardeclContext _localctx = new MemvardeclContext(_ctx, State);
		EnterRule(_localctx, 180, RULE_memvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2375;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2376; _localctx._memvar = memvar(_localctx.T);
			_localctx._Vars.Add(_localctx._memvar);
			State = 2381;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2377; Match(COMMA);
				State = 2378; _localctx._memvar = memvar(_localctx.T);
				_localctx._Vars.Add(_localctx._memvar);
				}
				}
				State = 2383;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2384; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_memvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvar(this);
		}
	}

	[RuleVersion(0)]
	public MemvarContext memvar(IToken T) {
		MemvarContext _localctx = new MemvarContext(_ctx, State, T);
		EnterRule(_localctx, 182, RULE_memvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,355,_ctx) ) {
			case 1:
				{
				State = 2386; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2389; _localctx.Id = varidentifierName();
			State = 2394;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2390; Match(LBRKT);
				State = 2391; _localctx.ArraySub = arraysub();
				State = 2392; Match(RBRKT);
				}
			}

			State = 2399;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2396; _localctx.Op = assignoperator();
				State = 2397; _localctx.Expression = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public EosContext end;
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxmemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmemvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvardeclContext foxmemvardecl() {
		FoxmemvardeclContext _localctx = new FoxmemvardeclContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_foxmemvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2401;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2402; _localctx._foxmemvar = foxmemvar(_localctx.T);
			_localctx._FoxVars.Add(_localctx._foxmemvar);
			State = 2407;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2403; Match(COMMA);
				State = 2404; _localctx._foxmemvar = foxmemvar(_localctx.T);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				}
				}
				State = 2409;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2410; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxdimvarContext _foxdimvar;
		public IList<FoxdimvarContext> _DimVars = new List<FoxdimvarContext>();
		public EosContext end;
		public FoxdimvarContext[] foxdimvar() {
			return GetRuleContexts<FoxdimvarContext>();
		}
		public FoxdimvarContext foxdimvar(int i) {
			return GetRuleContext<FoxdimvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public FoxdimvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdimvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvardeclContext foxdimvardecl() {
		FoxdimvardeclContext _localctx = new FoxdimvardeclContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_foxdimvardecl);
		int _la;
		try {
			State = 2449;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECLARE:
			case DIMENSION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2412;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECLARE || _la==DIMENSION) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2413; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2418;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2414; Match(COMMA);
					State = 2415; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2420;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2421; _localctx.end = eos();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2423; _localctx.T = Match(PUBLIC);
				State = 2425;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					State = 2424; Match(ARRAY);
					}
					break;
				}
				State = 2427; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2432;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2428; Match(COMMA);
					State = 2429; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2434;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2435; _localctx.end = eos();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2437; _localctx.T = Match(LOCAL);
				State = 2438; Match(ARRAY);
				State = 2439; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2444;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2440; Match(COMMA);
					State = 2441; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2446;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2447; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparametersContext : XSharpParserRuleContext {
		public IToken T;
		public FoxlparameterContext _foxlparameter;
		public IList<FoxlparameterContext> _LParameters = new List<FoxlparameterContext>();
		public EosContext end;
		public ITerminalNode LPARAMETERS() { return GetToken(XSharpParser.LPARAMETERS, 0); }
		public FoxlparameterContext[] foxlparameter() {
			return GetRuleContexts<FoxlparameterContext>();
		}
		public FoxlparameterContext foxlparameter(int i) {
			return GetRuleContext<FoxlparameterContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxlparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxlparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameters(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparametersContext foxlparameters() {
		FoxlparametersContext _localctx = new FoxlparametersContext(_ctx, State);
		EnterRule(_localctx, 188, RULE_foxlparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2451; _localctx.T = Match(LPARAMETERS);
			State = 2452; _localctx._foxlparameter = foxlparameter(_localctx.T);
			_localctx._LParameters.Add(_localctx._foxlparameter);
			State = 2457;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2453; Match(COMMA);
				State = 2454; _localctx._foxlparameter = foxlparameter(_localctx.T);
				_localctx._LParameters.Add(_localctx._foxlparameter);
				}
				}
				State = 2459;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2460; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Dims = new List<ExpressionContext>();
		public FoxtypedeclContext XT;
		public ExpressionContext Expr;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdimvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxdimvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxdimvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvarContext foxdimvar(IToken T) {
		FoxdimvarContext _localctx = new FoxdimvarContext(_ctx, State, T);
		EnterRule(_localctx, 190, RULE_foxdimvar);
		int _la;
		try {
			State = 2521;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2463;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,365,_ctx) ) {
				case 1:
					{
					State = 2462; _localctx.Amp = Match(AMP);
					}
					break;
				}
				State = 2465; _localctx.Id = varidentifierName();
				State = 2488;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2466; Match(LBRKT);
					State = 2467; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2472;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2468; Match(COMMA);
						State = 2469; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2474;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2475; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2477; Match(LPAREN);
					State = 2478; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2483;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2479; Match(COMMA);
						State = 2480; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2485;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2486; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2491;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2490; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2493; _localctx.Expr = expression(0);
				State = 2516;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2494; Match(LBRKT);
					State = 2495; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2500;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2496; Match(COMMA);
						State = 2497; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2502;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2503; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2505; Match(LPAREN);
					State = 2506; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2511;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2507; Match(COMMA);
						State = 2508; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2513;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2514; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2519;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2518; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclasslibContext : XSharpParserRuleContext {
		public IToken Of;
		public IdentifierNameContext ClassLib;
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FoxclasslibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclasslib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclasslib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclasslib(this);
		}
	}

	[RuleVersion(0)]
	public FoxclasslibContext foxclasslib() {
		FoxclasslibContext _localctx = new FoxclasslibContext(_ctx, State);
		EnterRule(_localctx, 192, RULE_foxclasslib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2523; _localctx.Of = Match(OF);
			State = 2524; _localctx.ClassLib = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparameterContext : XSharpParserRuleContext {
		public IToken T;
		public VaridentifierNameContext Name;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxlparameterContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxlparameterContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxlparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameter(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparameterContext foxlparameter(IToken T) {
		FoxlparameterContext _localctx = new FoxlparameterContext(_ctx, State, T);
		EnterRule(_localctx, 194, RULE_foxlparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2526; _localctx.Name = varidentifierName();
			State = 2528;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2527; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxtypedeclContext : XSharpParserRuleContext {
		public IToken As;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public FoxtypedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxtypedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtypedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtypedecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxtypedeclContext foxtypedecl() {
		FoxtypedeclContext _localctx = new FoxtypedeclContext(_ctx, State);
		EnterRule(_localctx, 196, RULE_foxtypedecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2530; _localctx.As = Match(AS);
			State = 2531; _localctx.Type = datatype();
			State = 2533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 2532; foxclasslib();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxmemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxmemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxmemvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvarContext foxmemvar(IToken T) {
		FoxmemvarContext _localctx = new FoxmemvarContext(_ctx, State, T);
		EnterRule(_localctx, 198, RULE_foxmemvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2536;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,377,_ctx) ) {
			case 1:
				{
				State = 2535; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2538; _localctx.Id = varidentifierName();
			State = 2542;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2539; _localctx.Op = assignoperator();
				State = 2540; _localctx.Expression = expression(0);
				}
			}

			State = 2545;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2544; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocContext : XSharpParserRuleContext {
		public LocalfuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LocalfuncprocModifiersContext localfuncprocModifiers() {
			return GetRuleContext<LocalfuncprocModifiersContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public LocalfuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncproc(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocContext localfuncproc() {
		LocalfuncprocContext _localctx = new LocalfuncprocContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_localfuncproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2548;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC || _la==UNSAFE) {
				{
				State = 2547; _localctx.Modifiers = localfuncprocModifiers();
				}
			}

			State = 2550; Match(LOCAL);
			State = 2551; _localctx.T = funcproctype();
			State = 2552; _localctx.Sig = signature();
			State = 2553; _localctx.end = eos();
			State = 2554; _localctx.StmtBlk = statementBlock();
			State = 2558;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDFUNC:
			case ENDPROC:
				{
				State = 2555;
				_localctx.T1 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
					_localctx.T1 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case END:
				{
				{
				State = 2556; Match(END);
				State = 2557; _localctx.T2 = funcproctype();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2560; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _UNSAFE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASYNC;
		public IToken _tset6795;
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public LocalfuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocModifiersContext localfuncprocModifiers() {
		LocalfuncprocModifiersContext _localctx = new LocalfuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_localfuncprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2562;
				_localctx._tset6795 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
					_localctx._tset6795 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset6795);
				}
				}
				State = 2565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASYNC || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignoperatorContext : XSharpParserRuleContext {
		public IToken Op;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public AssignoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignoperatorContext assignoperator() {
		AssignoperatorContext _localctx = new AssignoperatorContext(_ctx, State);
		EnterRule(_localctx, 204, RULE_assignoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2567;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class AccessMemberWithContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberWithContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberWith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberWith(this);
		}
	}
	public partial class XFunctionExpressionContext : ExpressionContext {
		public XbaseFuncContext XFunc;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public XbaseFuncContext xbaseFunc() {
			return GetRuleContext<XbaseFuncContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public XFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXFunctionExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_QQMARK() { return GetToken(XSharpParser.ASSIGN_QQMARK, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class StackAllocExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StackAllocExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStackAllocExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStackAllocExpression(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ITerminalNode DOTDOT() { return GetToken(XSharpParser.DOTDOT, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public IToken Not;
		public IToken Null;
		public DatatypeContext Type;
		public VaridentifierContext Id;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 206;
		EnterRecursionRule(_localctx, 206, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2606;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2570;
				((AccessMemberContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COLON - 294)) | (1L << (DOT - 294)) | (1L << (COLONCOLON - 294)))) != 0)) ) {
					((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2571; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new AccessMemberLateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2572;
				((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 294)) & ~0x3f) == 0 && ((1L << (_la - 294)) & ((1L << (COLON - 294)) | (1L << (DOT - 294)) | (1L << (COLONCOLON - 294)))) != 0)) ) {
					((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2573; Match(AMP);
				State = 2579;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
				case 1:
					{
					State = 2574; ((AccessMemberLateContext)_localctx).Name = identifierName();
					}
					break;

				case 2:
					{
					State = 2575; Match(LPAREN);
					State = 2576; ((AccessMemberLateContext)_localctx).Right = expression(0);
					State = 2577; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2581; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2582; Match(LPAREN);
				State = 2583; ((XFunctionExpressionContext)_localctx).ArgList = argumentList();
				State = 2584; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2586;
				if (!(IsTypeCastAllowed() )) throw new FailedPredicateException(this, "IsTypeCastAllowed() ");
				State = 2587; Match(LPAREN);
				State = 2588; ((TypeCastContext)_localctx).Type = datatype();
				State = 2589; Match(RPAREN);
				State = 2590; ((TypeCastContext)_localctx).Expr = expression(26);
				}
				break;

			case 5:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2592; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2593; ((AwaitExpressionContext)_localctx).Expr = expression(24);
				}
				break;

			case 6:
				{
				_localctx = new StackAllocExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2594;
				if (!(InputStream.La(2) != LPAREN )) throw new FailedPredicateException(this, "InputStream.La(2) != LPAREN ");
				State = 2595; ((StackAllocExpressionContext)_localctx).Op = Match(STACKALLOC);
				State = 2596; ((StackAllocExpressionContext)_localctx).Expr = expression(23);
				}
				break;

			case 7:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2597;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 247)) & ~0x3f) == 0 && ((1L << (_la - 247)) & ((1L << (INC - 247)) | (1L << (DEC - 247)) | (1L << (PLUS - 247)) | (1L << (MINUS - 247)) | (1L << (EXP - 247)) | (1L << (TILDE - 247)) | (1L << (ADDROF - 247)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2598; ((PrefixExpressionContext)_localctx).Expr = expression(22);
				}
				break;

			case 8:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2599;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 262)) & ~0x3f) == 0 && ((1L << (_la - 262)) & ((1L << (NOT - 262)) | (1L << (LOGIC_NOT - 262)) | (1L << (FOX_NOT - 262)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2600; ((PrefixExpressionContext)_localctx).Expr = expression(9);
				}
				break;

			case 9:
				{
				_localctx = new BinaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2601; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
				State = 2603;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,384,_ctx) ) {
				case 1:
					{
					State = 2602; ((BinaryExpressionContext)_localctx).Right = expression(0);
					}
					break;
				}
				}
				break;

			case 10:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2605; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2711;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,392,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2709;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2608;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2609; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2610; ((BinaryExpressionContext)_localctx).Right = expression(19);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2611;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2612;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 251)) & ~0x3f) == 0 && ((1L << (_la - 251)) & ((1L << (DIV - 251)) | (1L << (MOD - 251)) | (1L << (MULT - 251)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2613; ((BinaryExpressionContext)_localctx).Right = expression(18);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2614;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2615;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2616; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2617;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2618; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2619; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2620;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2621; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2622; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2623; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2624;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2625;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 238)) & ~0x3f) == 0 && ((1L << (_la - 238)) & ((1L << (LT - 238)) | (1L << (LTE - 238)) | (1L << (GT - 238)) | (1L << (GTE - 238)) | (1L << (EQ - 238)) | (1L << (EEQ - 238)) | (1L << (SUBSTR - 238)) | (1L << (NEQ - 238)) | (1L << (NEQ2 - 238)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2626; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2627;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2628; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2629; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2630;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2631; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2632; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2633;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2634; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2635; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2636;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2637;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (AND - 260)) | (1L << (LOGIC_AND - 260)) | (1L << (FOX_AND - 260)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2638; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2639;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2640;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LOGIC_XOR || _la==FOX_XOR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2641; ((BinaryExpressionContext)_localctx).Right = expression(8);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2642;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2643;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (OR - 261)) | (1L << (LOGIC_OR - 261)) | (1L << (FOX_OR - 261)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2644; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2645;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2646;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DEFAULT || _la==QQMARK) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2647; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2648;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2649;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 267)) & ~0x3f) == 0 && ((1L << (_la - 267)) & ((1L << (ASSIGN_OP - 267)) | (1L << (ASSIGN_ADD - 267)) | (1L << (ASSIGN_SUB - 267)) | (1L << (ASSIGN_EXP - 267)) | (1L << (ASSIGN_MUL - 267)) | (1L << (ASSIGN_DIV - 267)) | (1L << (ASSIGN_MOD - 267)) | (1L << (ASSIGN_BITAND - 267)) | (1L << (ASSIGN_BITOR - 267)) | (1L << (ASSIGN_LSHIFT - 267)) | (1L << (ASSIGN_RSHIFT - 267)) | (1L << (ASSIGN_XOR - 267)) | (1L << (ASSIGN_QQMARK - 267)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2650; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2651;
						if (!(Precpred(_ctx, 35))) throw new FailedPredicateException(this, "Precpred(_ctx, 35)");
						State = 2652;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2653; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberWithContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberWithContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2654;
						if (!(Precpred(_ctx, 33))) throw new FailedPredicateException(this, "Precpred(_ctx, 33)");
						State = 2655;
						((AccessMemberWithContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberWithContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2656; Match(LPAREN);
						State = 2657; ((AccessMemberWithContext)_localctx).Right = expression(0);
						State = 2658; Match(RPAREN);
						}
						break;

					case 17:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2660;
						if (!(Precpred(_ctx, 32))) throw new FailedPredicateException(this, "Precpred(_ctx, 32)");
						State = 2661;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2662; Match(AMP);
						State = 2668;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,386,_ctx) ) {
						case 1:
							{
							State = 2663; ((AccessMemberLateContext)_localctx).Name = identifierName();
							}
							break;

						case 2:
							{
							State = 2664; Match(LPAREN);
							State = 2665; ((AccessMemberLateContext)_localctx).Right = expression(0);
							State = 2666; Match(RPAREN);
							}
							break;
						}
						}
						break;

					case 18:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2670;
						if (!(Precpred(_ctx, 30))) throw new FailedPredicateException(this, "Precpred(_ctx, 30)");
						State = 2671; Match(LPAREN);
						State = 2672; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2673; Match(RPAREN);
						}
						break;

					case 19:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2675;
						if (!(Precpred(_ctx, 28))) throw new FailedPredicateException(this, "Precpred(_ctx, 28)");
						State = 2676; Match(LBRKT);
						State = 2677; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2678; Match(RBRKT);
						}
						break;

					case 20:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2680;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2681; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2682; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 21:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2683;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 2684;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 22:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2685;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2686; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2688;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==FOX_NOT) {
							{
							State = 2687; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
						}

						State = 2690; ((TypeCheckExpressionContext)_localctx).Null = Match(NULL);
						}
						break;

					case 23:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2691;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2692; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2694;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
						case 1:
							{
							State = 2693; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
							break;
						}
						State = 2696; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						State = 2699;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
						case 1:
							{
							State = 2697; Match(VAR);
							State = 2698; ((TypeCheckExpressionContext)_localctx).Id = varidentifier();
							}
							break;
						}
						}
						break;

					case 24:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2701;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2702; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2703; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;

					case 25:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2704;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2705; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
						State = 2707;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
						case 1:
							{
							State = 2706; ((BinaryExpressionContext)_localctx).Right = expression(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2713;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,392,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class TupleExpressionContext : PrimaryContext {
		public TupleExprContext TupleExpr;
		public TupleExprContext tupleExpr() {
			return GetRuleContext<TupleExprContext>(0);
		}
		public TupleExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedExpressionContext : PrimaryContext {
		public AliasExpressionContext Expr;
		public AliasExpressionContext aliasExpression() {
			return GetRuleContext<AliasExpressionContext>(0);
		}
		public AliasedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpression(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ArgumentListContext ArgList;
		public ObjectOrCollectioninitializerContext Init;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public IToken Key;
		public DatatypeContext Type;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class ParserLiteralExpressionContext : PrimaryContext {
		public ParserLiteralValueContext Literal;
		public ParserLiteralValueContext parserLiteralValue() {
			return GetRuleContext<ParserLiteralValueContext>(0);
		}
		public ParserLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 208, RULE_primary);
		int _la;
		try {
			State = 2856;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,398,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2714; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2715; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2716; ((DefaultExpressionContext)_localctx).Key = Match(NULL);
				State = 2717; Match(LPAREN);
				State = 2719;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,393,_ctx) ) {
				case 1:
					{
					State = 2718; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2721; Match(RPAREN);
				}
				break;

			case 4:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2722; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 5:
				_localctx = new ParserLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2723; ((ParserLiteralExpressionContext)_localctx).Literal = parserLiteralValue();
				}
				break;

			case 6:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2724; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 7:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2725; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 8:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2726; ((TupleExpressionContext)_localctx).TupleExpr = tupleExpr();
				}
				break;

			case 9:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2727; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 10:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2728; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 11:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2729; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 12:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2730;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2731; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2732; Match(LCURLY);
				State = 2733; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2734; Match(COMMA);
				State = 2735; Match(ADDROF);
				State = 2736; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2737; Match(LPAREN);
				State = 2738; Match(RPAREN);
				State = 2739; Match(RCURLY);
				}
				break;

			case 13:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2741;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2742; ((CtorCallContext)_localctx).Type = datatype();
				State = 2743; Match(LCURLY);
				State = 2744; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2745; Match(RCURLY);
				State = 2747;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
				case 1:
					{
					State = 2746; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2749;
				((CheckedExpressionContext)_localctx).ch = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CHECKED || _la==UNCHECKED) ) {
					((CheckedExpressionContext)_localctx).ch = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2750; Match(LPAREN);
				State = 2751; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				State = 2752; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2754; Match(TYPEOF);
				State = 2755; Match(LPAREN);
				State = 2756; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2757; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2759; Match(SIZEOF);
				State = 2760; Match(LPAREN);
				State = 2761; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2762; Match(RPAREN);
				}
				break;

			case 17:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2764; ((DefaultExpressionContext)_localctx).Key = Match(DEFAULT);
				State = 2765; Match(LPAREN);
				State = 2767;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
				case 1:
					{
					State = 2766; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2769; Match(RPAREN);
				}
				break;

			case 18:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2770; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 19:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2771;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2772; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2773; Match(LPAREN);
				State = 2774; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2775; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2777;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2778; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2779; Match(LPAREN);
				State = 2780; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2781; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2783;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2784; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2785; Match(LPAREN);
				State = 2786; Match(CAST);
				State = 2787; Match(COMMA);
				State = 2788; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2789; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2791;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2792; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2793; Match(LPAREN);
				State = 2794; Match(CAST);
				State = 2795; Match(COMMA);
				State = 2796; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2797; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2799; Match(CASTCLASS);
				State = 2800; Match(LPAREN);
				State = 2801; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2802; Match(COMMA);
				State = 2803; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2804; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2806; Match(CASTCLASS);
				State = 2807; Match(LPAREN);
				State = 2808; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2809; Match(COMMA);
				State = 2810; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2811; Match(RPAREN);
				}
				break;

			case 25:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2813; Match(PTR);
				State = 2814; Match(LPAREN);
				State = 2815; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2816; Match(COMMA);
				State = 2817; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2818; Match(RPAREN);
				}
				break;

			case 26:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2820; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 27:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2821; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 28:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2822; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 29:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2823;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 263)) & ~0x3f) == 0 && ((1L << (_la - 263)) & ((1L << (BIT_NOT - 263)) | (1L << (BIT_AND - 263)) | (1L << (BIT_OR - 263)) | (1L << (BIT_XOR - 263)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2824; Match(LPAREN);
				State = 2825; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2830;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2826; Match(COMMA);
					State = 2827; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2832;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2833; Match(RPAREN);
				}
				break;

			case 30:
				_localctx = new AliasedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2835;
				if (!(ExpectToken(ALIAS))) throw new FailedPredicateException(this, "ExpectToken(ALIAS)");
				State = 2836; ((AliasedExpressionContext)_localctx).Expr = aliasExpression();
				}
				break;

			case 31:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2837; Match(AMP);
				State = 2838; Match(LPAREN);
				State = 2839; ((MacroContext)_localctx).Expr = expression(0);
				State = 2840; Match(RPAREN);
				}
				break;

			case 32:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2842; Match(AMP);
				State = 2843; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 33:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2844; Match(LPAREN);
				State = 2845; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2850;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2846; Match(COMMA);
					State = 2847; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2852;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2853; Match(RPAREN);
				}
				break;

			case 34:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2855; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 210;
		EnterRecursionRule(_localctx, 210, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2865;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2859;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2860; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2861; Match(LBRKT);
				State = 2862; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2863; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2885;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2883;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,400,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2867;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2868; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2869; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2870;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2871;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2872; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2873;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2874; Match(LPAREN);
						State = 2875; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2876; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2878;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2879; Match(LBRKT);
						State = 2880; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2881; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2887;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,401,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasExpressionContext : XSharpParserRuleContext {
		public AliasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExpression; } }
	 
		public AliasExpressionContext() { }
		public virtual void CopyFrom(AliasExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AliasedMemvarContext : AliasExpressionContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class AliasedFieldLateContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public ExpressionContext Field;
		public IdentifierContext Area;
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldLateContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class AliasedExprContext : AliasExpressionContext {
		public IdentifierContext Id;
		public ExpressionContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(XSharpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(XSharpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(XSharpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(XSharpParser.RPAREN, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AliasedExprContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class AliasedFieldContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public IdentifierContext Area;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpressionContext aliasExpression() {
		AliasExpressionContext _localctx = new AliasExpressionContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_aliasExpression);
		try {
			State = 2948;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2888;
				if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
				State = 2889; Match(MEMVAR);
				State = 2890; Match(ALIAS);
				State = 2891; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 2:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2892; Match(FIELD);
				State = 2893; Match(ALIAS);
				State = 2897;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 2894; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2895; Match(ALIAS);
					}
					break;
				}
				State = 2899; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 3:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2900;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2901; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2902; Match(ALIAS);
				State = 2903; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 4:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2905;
				if (!(InputStream.La(6) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(6) != LPAREN");
				State = 2906; Match(LPAREN);
				State = 2907; ((AliasedFieldContext)_localctx).Area = identifier();
				State = 2908; Match(RPAREN);
				State = 2909; Match(ALIAS);
				State = 2910; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 5:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2912; ((AliasedFieldLateContext)_localctx).Alias = identifier();
				State = 2913; Match(ALIAS);
				State = 2914; Match(AMP);
				State = 2915; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 6:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2917; Match(FIELD);
				State = 2918; Match(ALIAS);
				State = 2922;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 2919; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2920; Match(ALIAS);
					}
					break;
				}
				State = 2924; Match(AMP);
				State = 2925; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 7:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2926; Match(LPAREN);
				State = 2927; ((AliasedFieldLateContext)_localctx).Area = identifier();
				State = 2928; Match(RPAREN);
				State = 2929; Match(ALIAS);
				State = 2930; Match(AMP);
				State = 2931; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 8:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2938;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
				case 1:
					{
					State = 2933; ((AliasedExprContext)_localctx).Id = identifier();
					}
					break;

				case 2:
					{
					State = 2934; Match(LPAREN);
					State = 2935; ((AliasedExprContext)_localctx).Alias = expression(0);
					State = 2936; Match(RPAREN);
					}
					break;
				}
				State = 2940; Match(ALIAS);
				State = 2946;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
				case 1:
					{
					{
					State = 2941; Match(LPAREN);
					State = 2942; ((AliasedExprContext)_localctx).Expr = expression(0);
					State = 2943; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					State = 2945; ((AliasedExprContext)_localctx).Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_objectOrCollectioninitializer);
		try {
			State = 2952;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,407,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2950; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2951; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2954; Match(LCURLY);
			State = 2963;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				State = 2955; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2960;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2956; Match(COMMA);
					State = 2957; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2962;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 2965; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public InitializervalueContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2967; _localctx.Name = identifierName();
			State = 2968; _localctx.Op = assignoperator();
			State = 2969; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_initializervalue);
		try {
			State = 2973;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2971; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2972; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexInitExprContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ComplexInitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexInitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterComplexInitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitComplexInitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComplexInitExprContext complexInitExpr() {
		ComplexInitExprContext _localctx = new ComplexInitExprContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_complexInitExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2975; Match(LCURLY);
			State = 2976; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2981;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2977; Match(COMMA);
				State = 2978; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2983;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2984; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerMemberContext : XSharpParserRuleContext {
		public ComplexInitExprContext Init;
		public ExpressionContext Expr;
		public ComplexInitExprContext complexInitExpr() {
			return GetRuleContext<ComplexInitExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializerMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializerMember(this);
		}
	}

	[RuleVersion(0)]
	public InitializerMemberContext initializerMember() {
		InitializerMemberContext _localctx = new InitializerMemberContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_initializerMember);
		try {
			State = 2988;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2986; _localctx.Init = complexInitExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2987; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2990; Match(LCURLY);
			State = 2991; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2996;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2992; Match(COMMA);
				State = 2993; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2998;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2999; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3001; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 3006;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3002; Match(COMMA);
				State = 3003; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 3008;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3009; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3011; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 3016;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3012; Match(COMMA);
				State = 3013; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 3018;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public IToken Op;
		public IToken RefOut;
		public ExpressionContext Expr;
		public IToken Var;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken Null;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_namedArgument);
		int _la;
		try {
			State = 3043;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,419,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3019;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 3020; _localctx.Name = identifierName();
				State = 3021; _localctx.Op = Match(ASSIGN_OP);
				State = 3023;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					State = 3022;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3025; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3027; _localctx.RefOut = Match(OUT);
				State = 3028; _localctx.Var = Match(VAR);
				State = 3029; _localctx.Id = varidentifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3030; _localctx.RefOut = Match(OUT);
				State = 3031; _localctx.Id = varidentifier();
				State = 3032; Match(AS);
				State = 3033; _localctx.Type = datatype();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3035; _localctx.RefOut = Match(OUT);
				State = 3036; _localctx.Null = Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3038;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					State = 3037;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 3041;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					State = 3040; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 236, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3045;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 3046; Match(LPAREN);
			State = 3047; _localctx.Cond = expression(0);
			State = 3048; Match(COMMA);
			State = 3050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,420,_ctx) ) {
			case 1:
				{
				State = 3049; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 3052; Match(COMMA);
			State = 3054;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,421,_ctx) ) {
			case 1:
				{
				State = 3053; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 3056; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 238;
		EnterRecursionRule(_localctx, 238, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 3059; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 3060; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 3068;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,422,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 3062;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 3063; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 3064; Match(DOT);
					}
					} 
				}
				State = 3070;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,422,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 240;
		EnterRecursionRule(_localctx, 240, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 3072; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 3079;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 3074;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 3075; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 3076; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 3081;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,423,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_aliasedName);
		try {
			State = 3090;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3082; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 3083; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3084; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3085; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 3086; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3087; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3089; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3092; _localctx.Id = identifier();
			State = 3094;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,425,_ctx) ) {
			case 1:
				{
				State = 3093; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3096; Match(LT);
			State = 3111;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,428,_ctx) ) {
			case 1:
				{
				State = 3097; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				State = 3102;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3098; Match(COMMA);
					State = 3099; _localctx._datatype = datatype();
					_localctx._GenericArgs.Add(_localctx._datatype);
					}
					}
					State = 3104;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				{
				State = 3108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3105; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 3110;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3113; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3115; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifier(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierContext varidentifier() {
		VaridentifierContext _localctx = new VaridentifierContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_varidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3119;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				State = 3117; Match(FOX_M);
				State = 3118; Match(DOT);
				}
				break;
			}
			State = 3121; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierNameContext : XSharpParserRuleContext {
		public IdentifierNameContext Id;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifierName(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierNameContext varidentifierName() {
		VaridentifierNameContext _localctx = new VaridentifierNameContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_varidentifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3125;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				State = 3123; Match(FOX_M);
				State = 3124; Match(DOT);
				}
				break;
			}
			State = 3127; _localctx.Id = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class TupleDatatypeContext : DatatypeContext {
		public TupleTypeContext TupleType;
		public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public TupleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_datatype);
		try {
			int _alt;
			State = 3146;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,432,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3129; Match(ARRAY);
				State = 3130; Match(OF);
				State = 3131; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3132; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 3133; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3135; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 3137;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3136; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3139;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,431,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3141; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3142; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 3143; Match(QMARK);
				}
				break;

			case 6:
				_localctx = new TupleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3145; ((TupleDatatypeContext)_localctx).TupleType = tupleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_arrayRank);
		int _la;
		try {
			State = 3157;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3148; Match(LBRKT);
				State = 3152;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3149; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 3154;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3155; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3156; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_typeName);
		try {
			State = 3162;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,435,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3159; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3160; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3161; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_usualTypeName);
		try {
			State = 3166;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3164; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
			case CURRENCY:
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3165; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_literalArray);
		int _la;
		try {
			State = 3193;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3172;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3168; Match(LT);
					State = 3169; _localctx.Type = datatype();
					State = 3170; Match(GT);
					}
				}

				State = 3174; Match(LCURLY);
				State = 3175; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3180;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3176; Match(LT);
					State = 3177; _localctx.Type = datatype();
					State = 3178; Match(GT);
					}
				}

				State = 3182; Match(LCURLY);
				State = 3183; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 3188;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3184; Match(COMMA);
					State = 3185; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 3190;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3191; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3196;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				{
				State = 3195; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3198; Match(CLASS);
			State = 3199; Match(LCURLY);
			State = 3208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				{
				State = 3200; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 3205;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3201; Match(COMMA);
					State = 3202; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 3207;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3210; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_anonMember);
		try {
			State = 3217;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3212; _localctx.Name = identifierName();
				State = 3213; _localctx.Op = assignoperator();
				State = 3214; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3216; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : XSharpParserRuleContext {
		public TupleTypeElementContext _tupleTypeElement;
		public IList<TupleTypeElementContext> _Elements = new List<TupleTypeElementContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public TupleTypeElementContext[] tupleTypeElement() {
			return GetRuleContexts<TupleTypeElementContext>();
		}
		public TupleTypeElementContext tupleTypeElement(int i) {
			return GetRuleContext<TupleTypeElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3220;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TUPLE) {
				{
				State = 3219; Match(TUPLE);
				}
			}

			State = 3222; Match(LPAREN);
			State = 3231;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,447,_ctx) ) {
			case 1:
				{
				State = 3223; _localctx._tupleTypeElement = tupleTypeElement();
				_localctx._Elements.Add(_localctx._tupleTypeElement);
				State = 3228;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3224; Match(COMMA);
					State = 3225; _localctx._tupleTypeElement = tupleTypeElement();
					_localctx._Elements.Add(_localctx._tupleTypeElement);
					}
					}
					State = 3230;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3233; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeElementContext : XSharpParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TupleTypeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleTypeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleTypeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleTypeElement(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeElementContext tupleTypeElement() {
		TupleTypeElementContext _localctx = new TupleTypeElementContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_tupleTypeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3238;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				State = 3235; identifierName();
				State = 3236; Match(AS);
				}
				break;
			}
			State = 3240; datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprContext : XSharpParserRuleContext {
		public TupleExprArgumentContext _tupleExprArgument;
		public IList<TupleExprArgumentContext> _Args = new List<TupleExprArgumentContext>();
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public TupleExprArgumentContext[] tupleExprArgument() {
			return GetRuleContexts<TupleExprArgumentContext>();
		}
		public TupleExprArgumentContext tupleExprArgument(int i) {
			return GetRuleContext<TupleExprArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprContext tupleExpr() {
		TupleExprContext _localctx = new TupleExprContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_tupleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242; Match(TUPLE);
			State = 3243; Match(LCURLY);
			State = 3252;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,450,_ctx) ) {
			case 1:
				{
				State = 3244; _localctx._tupleExprArgument = tupleExprArgument();
				_localctx._Args.Add(_localctx._tupleExprArgument);
				State = 3249;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3245; Match(COMMA);
					State = 3246; _localctx._tupleExprArgument = tupleExprArgument();
					_localctx._Args.Add(_localctx._tupleExprArgument);
					}
					}
					State = 3251;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3254; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleExprArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExprArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExprArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExprArgument(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprArgumentContext tupleExprArgument() {
		TupleExprArgumentContext _localctx = new TupleExprArgumentContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_tupleExprArgument);
		try {
			State = 3261;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,451,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3256; _localctx.Name = identifierName();
				State = 3257; _localctx.Op = assignoperator();
				State = 3258; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3260; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationExprContext : XSharpParserRuleContext {
		public VaridentifierContext _varidentifier;
		public IList<VaridentifierContext> _Ids = new List<VaridentifierContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public VaridentifierContext[] varidentifier() {
			return GetRuleContexts<VaridentifierContext>();
		}
		public VaridentifierContext varidentifier(int i) {
			return GetRuleContext<VaridentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationExprContext designationExpr() {
		DesignationExprContext _localctx = new DesignationExprContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_designationExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3263; Match(LPAREN);
			State = 3264; _localctx._varidentifier = varidentifier();
			_localctx._Ids.Add(_localctx._varidentifier);
			State = 3269;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3265; Match(COMMA);
				State = 3266; _localctx._varidentifier = varidentifier();
				_localctx._Ids.Add(_localctx._varidentifier);
				}
				}
				State = 3271;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3272; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationTypeExprContext : XSharpParserRuleContext {
		public LocalDesignationContext _localDesignation;
		public IList<LocalDesignationContext> _Locals = new List<LocalDesignationContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalDesignationContext[] localDesignation() {
			return GetRuleContexts<LocalDesignationContext>();
		}
		public LocalDesignationContext localDesignation(int i) {
			return GetRuleContext<LocalDesignationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationTypeExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationTypeExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationTypeExprContext designationTypeExpr() {
		DesignationTypeExprContext _localctx = new DesignationTypeExprContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_designationTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3274; Match(LPAREN);
			State = 3275; _localctx._localDesignation = localDesignation();
			_localctx._Locals.Add(_localctx._localDesignation);
			State = 3280;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3276; Match(COMMA);
				State = 3277; _localctx._localDesignation = localDesignation();
				_localctx._Locals.Add(_localctx._localDesignation);
				}
				}
				State = 3282;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3283; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDesignationContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public LocalDesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDesignation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocalDesignationContext localDesignation() {
		LocalDesignationContext _localctx = new LocalDesignationContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_localDesignation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3285; _localctx.Id = varidentifier();
			State = 3286; Match(AS);
			State = 3287; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken lambda;
		public CodeblockCodeContext Code;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_codeblock);
		try {
			State = 3317;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,458,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3289; Match(LCURLY);
				State = 3290; _localctx.Or = Match(OR);
				State = 3292;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					State = 3291; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3294; _localctx.Code = codeblockCode();
				State = 3295; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3297; Match(LCURLY);
				State = 3298; _localctx.P1 = Match(PIPE);
				State = 3300;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,455,_ctx) ) {
				case 1:
					{
					State = 3299; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3302; _localctx.P2 = Match(PIPE);
				State = 3304;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,456,_ctx) ) {
				case 1:
					{
					State = 3303; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3306; _localctx.Code = codeblockCode();
				State = 3307; Match(RCURLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3309; Match(LCURLY);
				State = 3311;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,457,_ctx) ) {
				case 1:
					{
					State = 3310; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3313; _localctx.lambda = Match(UDCSEP);
				State = 3314; _localctx.Code = codeblockCode();
				State = 3315; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_codeblockCode);
		try {
			State = 3326;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,460,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3320;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,459,_ctx) ) {
				case 1:
					{
					State = 3319; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3322; eos();
				State = 3323; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3325; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_lambdaParameterList);
		try {
			State = 3330;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3328; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3329; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3332; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 3337;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3333; Match(COMMA);
				State = 3334; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 3339;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3344;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3341;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
					case 1:
						{
						State = 3340; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 3343; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3346;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,464,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3348; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3351;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 3350; _localctx.Async = Match(ASYNC);
				}
			}

			State = 3353; _localctx.Delegate = Match(DELEGATE);
			State = 3359;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3354; Match(LPAREN);
				State = 3356;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,466,_ctx) ) {
				case 1:
					{
					State = 3355; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
					break;
				}
				State = 3358; Match(RPAREN);
				}
			}

			State = 3361; Match(LCURLY);
			State = 3362; _localctx.Code = codeblockCode();
			State = 3363; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3365; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 3370;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3366; Match(COMMA);
				State = 3367; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 3372;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ParameterDeclModsContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3373; _localctx.Id = identifier();
			State = 3374; _localctx.Mod = parameterDeclMods();
			State = 3375; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3377; _localctx.From = fromClause();
			State = 3378; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3380; Match(FROM);
			State = 3381; _localctx.Id = identifier();
			State = 3384;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3382; Match(AS);
				State = 3383; _localctx.Type = typeName();
				}
			}

			State = 3386; Match(IN);
			State = 3387; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3392;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (ORDERBY - 128)) | (1L << (WHERE - 128)))) != 0)) {
				{
				{
				State = 3389; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 3394;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3395; _localctx.SorG = selectOrGroupclause();
			State = 3397;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				State = 3396; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public IToken W;
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IToken L;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public IToken O;
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IToken J;
		public IdentifierContext Id;
		public TypeNameContext Type;
		public IToken I;
		public ExpressionContext Expr;
		public IToken O;
		public ExpressionContext OnExpr;
		public IToken E;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_queryBodyClause);
		int _la;
		try {
			State = 3431;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3399; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3400; ((LetClauseContext)_localctx).L = Match(LET);
				State = 3401; ((LetClauseContext)_localctx).Id = identifier();
				State = 3402; ((LetClauseContext)_localctx).Op = assignoperator();
				State = 3403; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3405; ((WhereClauseContext)_localctx).W = Match(WHERE);
				State = 3406; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3407; ((JoinClauseContext)_localctx).J = Match(JOIN);
				State = 3408; ((JoinClauseContext)_localctx).Id = identifier();
				State = 3411;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3409; Match(AS);
					State = 3410; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 3413; ((JoinClauseContext)_localctx).I = Match(IN);
				State = 3414; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 3415; ((JoinClauseContext)_localctx).O = Match(ON);
				State = 3416; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 3417; ((JoinClauseContext)_localctx).E = Match(EQUALS);
				State = 3418; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 3420;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 3419; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3422; ((OrderbyClauseContext)_localctx).O = Match(ORDERBY);
				State = 3423; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 3428;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3424; Match(COMMA);
					State = 3425; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 3430;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3433; _localctx.I = Match(INTO);
			State = 3434; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3436; _localctx.Expr = expression(0);
			State = 3438;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 3437;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public IToken G;
		public ExpressionContext Expr;
		public IToken B;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public IToken S;
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_selectOrGroupclause);
		try {
			State = 3447;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3440; ((SelectClauseContext)_localctx).S = Match(SELECT);
				State = 3441; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3442; ((GroupClauseContext)_localctx).G = Match(GROUP);
				State = 3443; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 3444; ((GroupClauseContext)_localctx).B = Match(BY);
				State = 3445; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3449; _localctx.I = Match(INTO);
			State = 3450; _localctx.Id = identifier();
			State = 3451; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public KeywordsoftContext keywordsoft() {
			return GetRuleContext<KeywordsoftContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_identifier);
		try {
			State = 3459;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,478,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3453; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3454; keywordsoft();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3455;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3456; xbaseType();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3457;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3458; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordsoftContext keywordsoft() {
			return GetRuleContext<KeywordsoftContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_identifierString);
		try {
			State = 3466;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3461; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3462; Match(STRING_CONST);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3463; keywordsoft();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3464; xbaseType();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3465; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseFuncContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public XbaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseFunc(this);
		}
	}

	[RuleVersion(0)]
	public XbaseFuncContext xbaseFunc() {
		XbaseFuncContext _localctx = new XbaseFuncContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_xbaseFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3468;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (ARRAY - 155)) | (1L << (DATE - 155)) | (1L << (DATETIME - 155)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3470;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (ARRAY - 155)) | (1L << (CODEBLOCK - 155)) | (1L << (DATE - 155)) | (1L << (FLOAT - 155)) | (1L << (PSZ - 155)) | (1L << (SYMBOL - 155)) | (1L << (USUAL - 155)) | (1L << (CURRENCY - 155)) | (1L << (BINARY - 155)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3472;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 156)) & ~0x3f) == 0 && ((1L << (_la - 156)) & ((1L << (BYTE - 156)) | (1L << (DWORD - 156)) | (1L << (INT - 156)) | (1L << (LOGIC - 156)) | (1L << (LONGINT - 156)) | (1L << (OBJECT - 156)) | (1L << (PTR - 156)) | (1L << (REAL4 - 156)) | (1L << (REAL8 - 156)) | (1L << (SHORTINT - 156)) | (1L << (STRING - 156)) | (1L << (VOID - 156)) | (1L << (WORD - 156)) | (1L << (CHAR - 156)) | (1L << (INT64 - 156)) | (1L << (UINT64 - 156)) | (1L << (DYNAMIC - 156)) | (1L << (DECIMAL - 156)) | (1L << (DATETIME - 156)) | (1L << (NINT - 156)) | (1L << (NUINT - 156)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode BINARY_CONST() { return GetToken(XSharpParser.BINARY_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode INVALID_NUMBER() { return GetToken(XSharpParser.INVALID_NUMBER, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode DATETIME_CONST() { return GetToken(XSharpParser.DATETIME_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL_FOX() { return GetToken(XSharpParser.NULL_FOX, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3474;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 225)) & ~0x3f) == 0 && ((1L << (_la - 225)) & ((1L << (NIL - 225)) | (1L << (NULL - 225)) | (1L << (NULL_ARRAY - 225)) | (1L << (NULL_CODEBLOCK - 225)) | (1L << (NULL_DATE - 225)) | (1L << (NULL_OBJECT - 225)) | (1L << (NULL_PSZ - 225)) | (1L << (NULL_PTR - 225)) | (1L << (NULL_STRING - 225)) | (1L << (NULL_SYMBOL - 225)) | (1L << (NULL_FOX - 225)))) != 0) || ((((_la - 308)) & ~0x3f) == 0 && ((1L << (_la - 308)) & ((1L << (FALSE_CONST - 308)) | (1L << (TRUE_CONST - 308)) | (1L << (HEX_CONST - 308)) | (1L << (BIN_CONST - 308)) | (1L << (INT_CONST - 308)) | (1L << (DATE_CONST - 308)) | (1L << (DATETIME_CONST - 308)) | (1L << (REAL_CONST - 308)) | (1L << (INVALID_NUMBER - 308)) | (1L << (SYMBOL_CONST - 308)) | (1L << (CHAR_CONST - 308)) | (1L << (STRING_CONST - 308)) | (1L << (ESCAPED_STRING_CONST - 308)) | (1L << (INTERPOLATED_STRING_CONST - 308)) | (1L << (INCOMPLETE_STRING_CONST - 308)) | (1L << (BRACKETED_STRING_CONST - 308)) | (1L << (BINARY_CONST - 308)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserLiteralValueContext : XSharpParserRuleContext {
		public IToken Year;
		public IToken Month;
		public IToken Day;
		public IToken Hours;
		public IToken Minutes;
		public IToken Seconds;
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(XSharpParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(XSharpParser.MINUS, i);
		}
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(XSharpParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(XSharpParser.COLON, i);
		}
		public ParserLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserLiteralValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public ParserLiteralValueContext parserLiteralValue() {
		ParserLiteralValueContext _localctx = new ParserLiteralValueContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_parserLiteralValue);
		try {
			int _alt;
			State = 3506;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3476; _localctx.Year = Match(INT_CONST);
				State = 3477; Match(DOT);
				State = 3478; _localctx.Month = Match(INT_CONST);
				State = 3479; Match(DOT);
				State = 3480; _localctx.Day = Match(INT_CONST);
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3481; Match(LCURLY);
				State = 3482; Match(EXP);
				State = 3483; _localctx.Year = Match(INT_CONST);
				State = 3484; Match(MINUS);
				State = 3485; _localctx.Month = Match(INT_CONST);
				State = 3486; Match(MINUS);
				State = 3487; _localctx.Day = Match(INT_CONST);
				State = 3497;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,482,_ctx) ) {
				case 1:
					{
					State = 3488; _localctx.Hours = Match(INT_CONST);
					State = 3495;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,481,_ctx) ) {
					case 1:
						{
						State = 3489; Match(COLON);
						State = 3490; _localctx.Minutes = Match(INT_CONST);
						State = 3493;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,480,_ctx) ) {
						case 1:
							{
							State = 3491; Match(COLON);
							State = 3492; _localctx.Seconds = Match(INT_CONST);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 3502;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 3499;
						MatchWildcard();
						}
						} 
					}
					State = 3504;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,483,_ctx);
				}
				State = 3505; Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsoftContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode RECORD() { return GetToken(XSharpParser.RECORD, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode THISFORM() { return GetToken(XSharpParser.THISFORM, 0); }
		public KeywordsoftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordsoft; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordsoft(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordsoft(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsoftContext keywordsoft() {
		KeywordsoftContext _localctx = new KeywordsoftContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_keywordsoft);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3508;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (RECORD - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (ASSIGNMENT - 128)))) != 0) || ((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (EXPORTED - 194)) | (1L << (NOSAVE - 194)) | (1L << (READONLY - 194)) | (1L << (SHARING - 194)) | (1L << (SHARED - 194)) | (1L << (OLEPUBLIC - 194)) | (1L << (EXCLUDE - 194)) | (1L << (THISACCESS - 194)) | (1L << (HELPSTRING - 194)) | (1L << (NOINIT - 194)) | (1L << (THEN - 194)) | (1L << (FOX_M - 194)) | (1L << (EACH - 194)) | (1L << (THISFORM - 194)))) != 0) || ((((_la - 284)) & ~0x3f) == 0 && ((1L << (_la - 284)) & ((1L << (FOX_AND - 284)) | (1L << (FOX_OR - 284)) | (1L << (FOX_NOT - 284)) | (1L << (FOX_XOR - 284)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3511;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3510; _localctx.Attributes = attributes();
				}
			}

			State = 3514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) {
				{
				State = 3513; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 3516; _localctx.C = Match(CLASS);
			State = 3518;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				State = 3517; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3520; _localctx.Id = identifier();
			State = 3522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3521; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 3524;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3525; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 3530;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3526; Match(COMMA);
					State = 3527; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 3532;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3544;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 3535; Match(IMPLEMENTS);
				State = 3536; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 3541;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3537; Match(COMMA);
					State = 3538; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 3543;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3549;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3546; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3551;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3552; _localctx.e = eos();
			State = 3556;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (VAR - 145)) | (1L << (DEFERRED - 145)) | (1L << (EXPORTED - 145)) | (1L << (FINAL - 145)) | (1L << (INLINE - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				{
				State = 3553; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 3558;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3559; Match(ENDCLASS);
			State = 3560; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _tset11261;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3563;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3562;
				_localctx._tset11261 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset11261 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11261);
				}
				}
				State = 3565;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XppdeclarepropertyContext Member;
		public XppdeclarepropertyContext xppdeclareproperty() {
			return GetRuleContext<XppdeclarepropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_xppclassMember);
		try {
			State = 3572;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,496,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3567; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3568; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3569; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3570; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3571; ((XppclspropertyContext)_localctx).Member = xppdeclareproperty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3574; _localctx.Vis = xppvisibility();
			State = 3575; Match(COLON);
			State = 3576; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3578;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (HIDDEN - 34)) | (1L << (PRIVATE - 34)) | (1L << (PROTECTED - 34)) | (1L << (PUBLIC - 34)) | (1L << (INTERNAL - 34)))) != 0) || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public XppisinContext Is;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppdeclmethodparamsContext[] xppdeclmethodparams() {
			return GetRuleContexts<XppdeclmethodparamsContext>();
		}
		public XppdeclmethodparamsContext xppdeclmethodparams(int i) {
			return GetRuleContext<XppdeclmethodparamsContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3581;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3580; _localctx.Attributes = attributes();
				}
			}

			State = 3584;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3583; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3586; Match(METHOD);
			State = 3587; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 3589;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3588; xppdeclmethodparams();
				}
			}

			State = 3602;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				State = 3591; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				State = 3599;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3592; Match(COMMA);
					State = 3593; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					State = 3595;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LPAREN) {
						{
						State = 3594; xppdeclmethodparams();
						}
					}

					}
					}
					State = 3601;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3604; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclmethodparamsContext : XSharpParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclmethodparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclmethodparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclmethodparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclmethodparams(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclmethodparamsContext xppdeclmethodparams() {
		XppdeclmethodparamsContext _localctx = new XppdeclmethodparamsContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_xppdeclmethodparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3606; Match(LPAREN);
			State = 3615;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,504,_ctx) ) {
			case 1:
				{
				State = 3607; identifier();
				State = 3612;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3608; Match(COMMA);
					State = 3609; identifier();
					}
					}
					State = 3614;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3617; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_xppisin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IS) {
				{
				State = 3619; Match(IS);
				State = 3620; identifier();
				}
			}

			State = 3625;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3623; Match(IN);
				State = 3624; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _STATIC;
		public IToken _ABSTRACT;
		public IToken _NEW;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _VIRTUAL;
		public IToken _tset11499;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3628;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3627;
				_localctx._tset11499 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) ) {
					_localctx._tset11499 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11499);
				}
				}
				State = 3630;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3633;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3632; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3635; Match(VAR);
			State = 3636; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3649;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,511,_ctx) ) {
			case 1:
				{
				State = 3637; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				{
				State = 3642;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3638; Match(COMMA);
					State = 3639; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 3644;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3647;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3645; Match(AS);
					State = 3646; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			}
			State = 3652;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 3651; _localctx.Shared = Match(SHARED);
				}
			}

			State = 3655;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 3654; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 3658;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3657; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 3661;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 3660; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 3663; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3665; Match(ASSIGNMENT);
			State = 3666; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclarepropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public EosContext end;
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppdeclarepropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareproperty(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclarepropertyContext xppdeclareproperty() {
		XppdeclarepropertyContext _localctx = new XppdeclarepropertyContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_xppdeclareproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3669;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3668; _localctx.Attributes = attributes();
				}
			}

			State = 3671; _localctx.Accessors = xppaccessors();
			State = 3673;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3672; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3675; _localctx.M = Match(METHOD);
			State = 3676; _localctx.Id = identifier();
			State = 3679;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3677; Match(VAR);
				State = 3678; _localctx.VarName = identifier();
				}
			}

			State = 3683;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3681; Match(AS);
				State = 3682; _localctx.Type = datatype();
				}
			}

			State = 3685; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppaccessorsContext : XSharpParserRuleContext {
		public IToken _ACCESS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASSIGN;
		public IToken _tset11733;
		public ITerminalNode[] ACCESS() { return GetTokens(XSharpParser.ACCESS); }
		public ITerminalNode ACCESS(int i) {
			return GetToken(XSharpParser.ACCESS, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(XSharpParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(XSharpParser.ASSIGN, i);
		}
		public XppaccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppaccessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppaccessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppaccessors(this);
		}
	}

	[RuleVersion(0)]
	public XppaccessorsContext xppaccessors() {
		XppaccessorsContext _localctx = new XppaccessorsContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_xppaccessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3688;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3687;
				_localctx._tset11733 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx._tset11733 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11733);
				}
				}
				State = 3690;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ACCESS || _la==ASSIGN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext ClassId;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3693;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3692; _localctx.Attributes = attributes();
				}
			}

			State = 3696;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3695; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3699;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3698; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3701; _localctx.M = Match(METHOD);
			State = 3705;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				State = 3702; _localctx.ClassId = identifier();
				State = 3703; Match(COLON);
				}
				break;
			}
			State = 3707; _localctx.Sig = signature();
			State = 3708; _localctx.end = eos();
			State = 3709; _localctx.StmtBlk = statementBlock();
			State = 3713;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				State = 3710; Match(END);
				State = 3711; Match(METHOD);
				State = 3712; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken I;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3716;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3715; _localctx.Attributes = attributes();
				}
			}

			State = 3718; _localctx.I = Match(INLINE);
			State = 3720;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3719; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3723;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3722; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3725; Match(METHOD);
			State = 3726; _localctx.Sig = signature();
			State = 3727; _localctx.end = eos();
			State = 3728; _localctx.StmtBlk = statementBlock();
			State = 3732;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 3729; Match(END);
				State = 3730; Match(METHOD);
				State = 3731; eos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken D;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public FoxclassmemberContext _foxclassmember;
		public IList<FoxclassmemberContext> _Members = new List<FoxclassmemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] DEFINE() { return GetTokens(XSharpParser.DEFINE); }
		public ITerminalNode DEFINE(int i) {
			return GetToken(XSharpParser.DEFINE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDDEFINE() { return GetToken(XSharpParser.ENDDEFINE, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public FoxclassmemberContext[] foxclassmember() {
			return GetRuleContexts<FoxclassmemberContext>();
		}
		public FoxclassmemberContext foxclassmember(int i) {
			return GetRuleContext<FoxclassmemberContext>(i);
		}
		public FoxclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclass(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassContext foxclass() {
		FoxclassContext _localctx = new FoxclassContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_foxclass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3735;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3734; _localctx.Attributes = attributes();
				}
			}

			State = 3737; _localctx.D = Match(DEFINE);
			State = 3739;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (LOCAL - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3738; _localctx.Modifiers = classModifiers();
				}
			}

			State = 3741; Match(CLASS);
			State = 3743;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				State = 3742; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3745; _localctx.Id = identifier();
			State = 3747;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3746; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3751;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3749; Match(AS);
				State = 3750; _localctx.BaseType = datatype();
				}
			}

			State = 3754;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 3753; foxclasslib();
				}
			}

			State = 3759;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3756; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3761;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3763;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OLEPUBLIC) {
				{
				State = 3762; Match(OLEPUBLIC);
				}
			}

			State = 3765; _localctx.e = eos();
			State = 3769;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,538,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3766; _localctx._foxclassmember = foxclassmember();
					_localctx._Members.Add(_localctx._foxclassmember);
					}
					} 
				}
				State = 3771;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,538,_ctx);
			}
			State = 3775;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDDEFINE:
				{
				State = 3772; Match(ENDDEFINE);
				}
				break;
			case END:
				{
				State = 3773; Match(END);
				State = 3774; Match(DEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3777; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassmemberContext : XSharpParserRuleContext {
		public FoxclassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassmember; } }
	 
		public FoxclassmemberContext() { }
		public virtual void CopyFrom(FoxclassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoximplementsContext : FoxclassmemberContext {
		public FoximplementsclauseContext Member;
		public FoximplementsclauseContext foximplementsclause() {
			return GetRuleContext<FoximplementsclauseContext>(0);
		}
		public FoximplementsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplements(this);
		}
	}
	public partial class FoxaddobjectContext : FoxclassmemberContext {
		public FoxaddobjectclauseContext Member;
		public FoxaddobjectclauseContext foxaddobjectclause() {
			return GetRuleContext<FoxaddobjectclauseContext>(0);
		}
		public FoxaddobjectContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobject(this);
		}
	}
	public partial class FoxclsfieldContext : FoxclassmemberContext {
		public FoxfieldContext Member;
		public FoxfieldContext foxfield() {
			return GetRuleContext<FoxfieldContext>(0);
		}
		public FoxclsfieldContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsfield(this);
		}
	}
	public partial class FoxclsmethodContext : FoxclassmemberContext {
		public FoxmethodContext Member;
		public FoxmethodContext foxmethod() {
			return GetRuleContext<FoxmethodContext>(0);
		}
		public FoxclsmethodContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsmethod(this);
		}
	}
	public partial class FoxclsdtorContext : FoxclassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FoxclsdtorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsdtor(this);
		}
	}
	public partial class FoxclsvarsContext : FoxclassmemberContext {
		public FoxclassvarsContext Member;
		public FoxclassvarsContext foxclassvars() {
			return GetRuleContext<FoxclassvarsContext>(0);
		}
		public FoxclsvarsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvars(this);
		}
	}
	public partial class FoxpemcomContext : FoxclassmemberContext {
		public FoxpemcomattribContext Member;
		public FoxpemcomattribContext foxpemcomattrib() {
			return GetRuleContext<FoxpemcomattribContext>(0);
		}
		public FoxpemcomContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcom(this);
		}
	}
	public partial class FoxclsctorContext : FoxclassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FoxclsctorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsctor(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassmemberContext foxclassmember() {
		FoxclassmemberContext _localctx = new FoxclassmemberContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_foxclassmember);
		try {
			State = 3787;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
			case 1:
				_localctx = new FoxclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3779; ((FoxclsvarsContext)_localctx).Member = foxclassvars();
				}
				break;

			case 2:
				_localctx = new FoxclsfieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3780; ((FoxclsfieldContext)_localctx).Member = foxfield();
				}
				break;

			case 3:
				_localctx = new FoxclsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3781; ((FoxclsmethodContext)_localctx).Member = foxmethod();
				}
				break;

			case 4:
				_localctx = new FoximplementsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3782; ((FoximplementsContext)_localctx).Member = foximplementsclause();
				}
				break;

			case 5:
				_localctx = new FoxaddobjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3783; ((FoxaddobjectContext)_localctx).Member = foxaddobjectclause();
				}
				break;

			case 6:
				_localctx = new FoxpemcomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3784; ((FoxpemcomContext)_localctx).Member = foxpemcomattrib();
				}
				break;

			case 7:
				_localctx = new FoxclsctorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3785; ((FoxclsctorContext)_localctx).Member = constructor();
				}
				break;

			case 8:
				_localctx = new FoxclsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3786; ((FoxclsdtorContext)_localctx).Member = destructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken HelpString;
		public ExpressionContext HelpText;
		public IToken ThisAccess;
		public IdentifierContext MemberId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FoxmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmethod(this);
		}
	}

	[RuleVersion(0)]
	public FoxmethodContext foxmethod() {
		FoxmethodContext _localctx = new FoxmethodContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_foxmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3790;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3789; _localctx.Attributes = attributes();
				}
			}

			State = 3793;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3792; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 3795; _localctx.T = funcproctype();
			State = 3796; _localctx.Sig = signature();
			State = 3799;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==HELPSTRING) {
				{
				State = 3797; _localctx.HelpString = Match(HELPSTRING);
				State = 3798; _localctx.HelpText = expression(0);
				}
			}

			State = 3806;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THISACCESS) {
				{
				State = 3801; _localctx.ThisAccess = Match(THISACCESS);
				State = 3802; Match(LPAREN);
				State = 3803; _localctx.MemberId = identifier();
				State = 3804; Match(RPAREN);
				}
			}

			State = 3808; _localctx.end = eos();
			State = 3809; _localctx.StmtBlk = statementBlock();
			State = 3816;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
			case 1:
				{
				State = 3813;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 3810;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 3811; Match(END);
					State = 3812; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3815; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public DatatypeContext DataType;
		public EosContext end;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclassvars(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassvarsContext foxclassvars() {
		FoxclassvarsContext _localctx = new FoxclassvarsContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_foxclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3819;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,547,_ctx) ) {
			case 1:
				{
				State = 3818; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 3822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,548,_ctx) ) {
			case 1:
				{
				State = 3821; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3825;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,549,_ctx) ) {
			case 1:
				{
				State = 3824; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3827; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3832;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3828; Match(COMMA);
				State = 3829; _localctx._identifier = identifier();
				_localctx._Vars.Add(_localctx._identifier);
				}
				}
				State = 3834;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3837;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3835; Match(AS);
				State = 3836; _localctx.DataType = datatype();
				}
			}

			State = 3839; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public FoxfieldinitializerContext Initializer;
		public DatatypeContext DataType;
		public EosContext end;
		public FoxfieldinitializerContext foxfieldinitializer() {
			return GetRuleContext<FoxfieldinitializerContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfield(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldContext foxfield() {
		FoxfieldContext _localctx = new FoxfieldContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_foxfield);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3842;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,552,_ctx) ) {
			case 1:
				{
				State = 3841; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 3845;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,553,_ctx) ) {
			case 1:
				{
				State = 3844; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3848;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,554,_ctx) ) {
			case 1:
				{
				State = 3847; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3850; _localctx.Initializer = foxfieldinitializer();
			State = 3853;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3851; Match(AS);
				State = 3852; _localctx.DataType = datatype();
				}
			}

			State = 3855; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldinitializerContext : XSharpParserRuleContext {
		public NameContext Name;
		public ExpressionContext Expr;
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxfieldinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfieldinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfieldinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfieldinitializer(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldinitializerContext foxfieldinitializer() {
		FoxfieldinitializerContext _localctx = new FoxfieldinitializerContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_foxfieldinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3857; _localctx.Name = name(0);
			State = 3858; assignoperator();
			State = 3859; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoximplementsclauseContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IToken Excl;
		public ExpressionContext Library;
		public EosContext end;
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoximplementsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foximplementsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplementsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplementsclause(this);
		}
	}

	[RuleVersion(0)]
	public FoximplementsclauseContext foximplementsclause() {
		FoximplementsclauseContext _localctx = new FoximplementsclauseContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_foximplementsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3861; Match(IMPLEMENTS);
			State = 3862; _localctx.Type = datatype();
			State = 3864;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXCLUDE) {
				{
				State = 3863; _localctx.Excl = Match(EXCLUDE);
				}
			}

			State = 3868;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3866; Match(IN);
				State = 3867; _localctx.Library = expression(0);
				}
			}

			State = 3870; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxaddobjectclauseContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken NoInit;
		public IToken W;
		public FoxfieldinitializerContext _foxfieldinitializer;
		public IList<FoxfieldinitializerContext> _FieldsInits = new List<FoxfieldinitializerContext>();
		public EosContext end;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public FoxfieldinitializerContext[] foxfieldinitializer() {
			return GetRuleContexts<FoxfieldinitializerContext>();
		}
		public FoxfieldinitializerContext foxfieldinitializer(int i) {
			return GetRuleContext<FoxfieldinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxaddobjectclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxaddobjectclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobjectclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobjectclause(this);
		}
	}

	[RuleVersion(0)]
	public FoxaddobjectclauseContext foxaddobjectclause() {
		FoxaddobjectclauseContext _localctx = new FoxaddobjectclauseContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_foxaddobjectclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3873;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3872; _localctx.Attributes = attributes();
				}
			}

			State = 3875; Match(ADD);
			State = 3876; Match(OBJECT);
			State = 3878;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,559,_ctx) ) {
			case 1:
				{
				State = 3877; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3880; _localctx.Id = identifier();
			State = 3881; Match(AS);
			State = 3882; _localctx.Type = datatype();
			State = 3884;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOINIT) {
				{
				State = 3883; _localctx.NoInit = Match(NOINIT);
				}
			}

			State = 3895;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 3886; _localctx.W = Match(WITH);
				State = 3887; _localctx._foxfieldinitializer = foxfieldinitializer();
				_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
				State = 3892;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3888; Match(COMMA);
					State = 3889; _localctx._foxfieldinitializer = foxfieldinitializer();
					_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
					}
					}
					State = 3894;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3897; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxpemcomattribContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public FoxpemcomattribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxpemcomattrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcomattrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcomattrib(this);
		}
	}

	[RuleVersion(0)]
	public FoxpemcomattribContext foxpemcomattrib() {
		FoxpemcomattribContext _localctx = new FoxpemcomattribContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_foxpemcomattrib);
		int _la;
		try {
			State = 3929;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,565,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3899; Match(DIMENSION);
				State = 3900; _localctx.Id = identifier();
				State = 3901; Match(LBRKT);
				State = 3902; expression(0);
				State = 3905;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3903; Match(COMMA);
					State = 3904; expression(0);
					}
				}

				State = 3907; Match(RBRKT);
				State = 3908; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3910; Match(DIMENSION);
				State = 3911; _localctx.Id = identifier();
				State = 3912; Match(LPAREN);
				State = 3913; expression(0);
				State = 3916;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3914; Match(COMMA);
					State = 3915; expression(0);
					}
				}

				State = 3918; Match(RPAREN);
				State = 3919; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3921; _localctx.Id = identifier();
				State = 3922; Match(LBRKT);
				State = 3923; expression(0);
				State = 3924; Match(RBRKT);
				State = 3925; assignoperator();
				State = 3926; expression(0);
				State = 3927; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return entity_sempred((EntityContext)_localctx, predIndex);

		case 45: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 54: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 58: return classmember_sempred((ClassmemberContext)_localctx, predIndex);

		case 77: return filewidevar_sempred((FilewidevarContext)_localctx, predIndex);

		case 78: return statement_sempred((StatementContext)_localctx, predIndex);

		case 86: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 87: return localvar_sempred((LocalvarContext)_localctx, predIndex);

		case 103: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 104: return primary_sempred((PrimaryContext)_localctx, predIndex);

		case 105: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 106: return aliasExpression_sempred((AliasExpressionContext)_localctx, predIndex);

		case 117: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 119: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 120: return name_sempred((NameContext)_localctx, predIndex);

		case 158: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsFox;

		case 1: return IsXPP;

		case 2: return IsVO;

		case 3: return IsVO;

		case 4: return !IsXPP;

		case 5: return IsXPP;

		case 6: return IsFox;
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return InputStream.La(2) != REMOVE;

		case 8: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return InputStream.La(2) != SET && InputStream.La(2) != INIT;

		case 10: return InputStream.La(2) != GET && InputStream.La(2) != UDCSEP;
		}
		return true;
	}
	private bool classmember_sempred(ClassmemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return IsVO;
		}
		return true;
	}
	private bool filewidevar_sempred(FilewidevarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return !IsFox ;

		case 13: return IsFox  ;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return !IsFox && HasMemVars;

		case 15: return IsFox && HasMemVars;

		case 16: return IsFox ;

		case 17: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool localvar_sempred(LocalvarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return IsFox;
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return IsTypeCastAllowed() ;

		case 21: return InputStream.La(2) != LPAREN ;

		case 22: return Precpred(_ctx, 18);

		case 23: return Precpred(_ctx, 17);

		case 24: return Precpred(_ctx, 16);

		case 25: return Precpred(_ctx, 15);

		case 26: return Precpred(_ctx, 14);

		case 27: return Precpred(_ctx, 13);

		case 28: return Precpred(_ctx, 12);

		case 29: return Precpred(_ctx, 11);

		case 30: return Precpred(_ctx, 10);

		case 31: return Precpred(_ctx, 8);

		case 32: return Precpred(_ctx, 7);

		case 33: return Precpred(_ctx, 6);

		case 34: return Precpred(_ctx, 5);

		case 35: return Precpred(_ctx, 2);

		case 36: return Precpred(_ctx, 35);

		case 37: return Precpred(_ctx, 33);

		case 38: return Precpred(_ctx, 32);

		case 39: return Precpred(_ctx, 30);

		case 40: return Precpred(_ctx, 28);

		case 41: return Precpred(_ctx, 27);

		case 42: return Precpred(_ctx, 25);

		case 43: return Precpred(_ctx, 21);

		case 44: return Precpred(_ctx, 20);

		case 45: return Precpred(_ctx, 19);

		case 46: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return ExpectToken(LCURLY);

		case 48: return ExpectToken(LCURLY);

		case 49: return ExpectToken(LPAREN);

		case 50: return ExpectToken(LPAREN);

		case 51: return ExpectToken(LPAREN);

		case 52: return ExpectToken(LPAREN);

		case 53: return ExpectToken(ALIAS);
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(_ctx, 3);

		case 55: return Precpred(_ctx, 6);

		case 56: return Precpred(_ctx, 5);

		case 57: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool aliasExpression_sempred(AliasExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return HasMemVars;

		case 59: return InputStream.La(4) != LPAREN;

		case 60: return InputStream.La(6) != LPAREN;
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return !IsCoreVO;

		case 65: return !IsCoreVO;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x16B\xF5E\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x185\n\x2\f\x2"+
		"\xE\x2\x188\v\x2\x3\x2\a\x2\x18B\n\x2\f\x2\xE\x2\x18E\v\x2\x3\x2\x3\x2"+
		"\x3\x3\x3\x3\x3\x3\x5\x3\x195\n\x3\x3\x4\x3\x4\x5\x4\x199\n\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x5\a\x5\x19F\n\x5\f\x5\xE\x5\x1A2\v\x5\x3\x5\x3\x5\x3\x6"+
		"\a\x6\x1A7\n\x6\f\x6\xE\x6\x1AA\v\x6\x3\x6\x3\x6\a\x6\x1AE\n\x6\f\x6\xE"+
		"\x6\x1B1\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1D5\n\a\x3\b\x6\b"+
		"\x1D8\n\b\r\b\xE\b\x1D9\x3\t\x5\t\x1DD\n\t\x3\t\x5\t\x1E0\n\t\x3\t\x5"+
		"\t\x1E3\n\t\x3\t\x3\t\x3\t\x5\t\x1E8\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x5\t\x1F0\n\t\x3\t\x5\t\x1F3\n\t\x3\n\x3\n\x3\v\x3\v\x5\v\x1F9\n\v\x3"+
		"\v\x5\v\x1FC\n\v\x3\v\x3\v\x5\v\x200\n\v\x3\v\a\v\x203\n\v\f\v\xE\v\x206"+
		"\v\v\x3\v\x5\v\x209\n\v\x3\v\x3\v\x5\v\x20D\n\v\x3\f\x3\f\x5\f\x211\n"+
		"\f\x3\f\x3\f\x5\f\x215\n\f\x3\r\x3\r\x3\xE\x5\xE\x21A\n\xE\x3\xE\x5\xE"+
		"\x21D\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x223\n\xE\x3\xE\x3\xE\x5\xE\x227"+
		"\n\xE\x3\xE\x5\xE\x22A\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x230\n\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x5\xE\x236\n\xE\x3\xE\x5\xE\x239\n\xE\x3\xE\x3\xE"+
		"\x5\xE\x23D\n\xE\x5\xE\x23F\n\xE\x3\xE\x5\xE\x242\n\xE\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\x10\x5\x10\x249\n\x10\x3\x10\x5\x10\x24C\n\x10\x3\x10\x3"+
		"\x10\x5\x10\x250\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10\x5\x10\x257"+
		"\n\x10\x3\x10\x3\x10\x5\x10\x25B\n\x10\x3\x10\x3\x10\x3\x10\a\x10\x260"+
		"\n\x10\f\x10\xE\x10\x263\v\x10\x5\x10\x265\n\x10\x3\x10\x3\x10\x3\x11"+
		"\x5\x11\x26A\n\x11\x3\x11\x3\x11\x5\x11\x26E\n\x11\x3\x11\x5\x11\x271"+
		"\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\x276\n\x12\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\a\x13\x27E\n\x13\f\x13\xE\x13\x281\v\x13\x5\x13\x283"+
		"\n\x13\x3\x13\x3\x13\x3\x14\x5\x14\x288\n\x14\x3\x14\x5\x14\x28B\n\x14"+
		"\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x291\n\x14\x3\x14\x3\x14\x3\x14\x5"+
		"\x14\x296\n\x14\x3\x14\x5\x14\x299\n\x14\x3\x15\x3\x15\x5\x15\x29D\n\x15"+
		"\x3\x16\a\x16\x2A0\n\x16\f\x16\xE\x16\x2A3\v\x16\x3\x17\x6\x17\x2A6\n"+
		"\x17\r\x17\xE\x17\x2A7\x3\x18\x5\x18\x2AB\n\x18\x3\x18\x3\x18\x5\x18\x2AF"+
		"\n\x18\x3\x18\x5\x18\x2B2\n\x18\x3\x18\x3\x18\x3\x18\x5\x18\x2B7\n\x18"+
		"\x3\x18\x3\x18\x3\x18\x3\x19\x5\x19\x2BD\n\x19\x3\x19\x5\x19\x2C0\n\x19"+
		"\x3\x19\x3\x19\x5\x19\x2C4\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2C9\n\x19"+
		"\f\x19\xE\x19\x2CC\v\x19\x3\x19\x3\x19\x3\x19\x5\x19\x2D1\n\x19\x3\x19"+
		"\x3\x19\x5\x19\x2D5\n\x19\x3\x19\x3\x19\x3\x19\a\x19\x2DA\n\x19\f\x19"+
		"\xE\x19\x2DD\v\x19\x3\x19\x3\x19\x5\x19\x2E1\n\x19\x3\x1A\x5\x1A\x2E4"+
		"\n\x1A\x3\x1A\x5\x1A\x2E7\n\x1A\x3\x1A\x3\x1A\x5\x1A\x2EB\n\x1A\x3\x1A"+
		"\x3\x1A\x3\x1A\x5\x1A\x2F0\n\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x5\x1A\x2F9\n\x1A\x3\x1B\x3\x1B\x3\x1C\x5\x1C\x2FE\n\x1C\x3"+
		"\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x306\n\x1C\x3\x1C\x3\x1C"+
		"\x3\x1D\x5\x1D\x30B\n\x1D\x3\x1D\x3\x1D\x5\x1D\x30F\n\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x314\n\x1D\x3\x1D\x3\x1D\x6\x1D\x318\n\x1D\r\x1D\xE\x1D"+
		"\x319\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x31F\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x329\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x5\x1E\x331\n\x1E\x3\x1E\x3\x1E\x5\x1E\x335\n\x1E\x3"+
		"\x1F\x5\x1F\x338\n\x1F\x3\x1F\x3\x1F\x5\x1F\x33C\n\x1F\x3\x1F\x3\x1F\x3"+
		"\x1F\x6\x1F\x341\n\x1F\r\x1F\xE\x1F\x342\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x348"+
		"\n\x1F\x3 \x6 \x34B\n \r \xE \x34C\x3!\x3!\x3!\x3!\x3!\a!\x354\n!\f!\xE"+
		"!\x357\v!\x3!\x3!\x3!\x5!\x35C\n!\x3!\x3!\x3!\x3!\a!\x362\n!\f!\xE!\x365"+
		"\v!\x5!\x367\n!\x3\"\x5\"\x36A\n\"\x3\"\x5\"\x36D\n\"\x3\"\x3\"\x5\"\x371"+
		"\n\"\x3\"\x3\"\x5\"\x375\n\"\x3\"\x3\"\x5\"\x379\n\"\x3\"\x3\"\a\"\x37D"+
		"\n\"\f\"\xE\"\x380\v\"\x3\"\a\"\x383\n\"\f\"\xE\"\x386\v\"\x3\"\x3\"\a"+
		"\"\x38A\n\"\f\"\xE\"\x38D\v\"\x3\"\x3\"\x3\"\x3\"\x3#\x5#\x394\n#\x3#"+
		"\x5#\x397\n#\x3#\x3#\x5#\x39B\n#\x3#\x3#\x5#\x39F\n#\x3#\x3#\x5#\x3A3"+
		"\n#\x3#\x3#\x3#\x3#\a#\x3A9\n#\f#\xE#\x3AC\v#\x5#\x3AE\n#\x3#\a#\x3B1"+
		"\n#\f#\xE#\x3B4\v#\x3#\x3#\a#\x3B8\n#\f#\xE#\x3BB\v#\x3#\x3#\x3#\x3#\x3"+
		"$\x6$\x3C2\n$\r$\xE$\x3C3\x3%\x3%\x3%\x3%\x5%\x3CA\n%\x3%\a%\x3CD\n%\f"+
		"%\xE%\x3D0\v%\x3%\x3%\x3&\x5&\x3D5\n&\x3&\x5&\x3D8\n&\x3&\x3&\x3\'\x3"+
		"\'\x3\'\x3\'\x3\'\x3\'\a\'\x3E2\n\'\f\'\xE\'\x3E5\v\'\x3(\x3(\x3(\x3("+
		"\x3(\x5(\x3EC\n(\x3)\x5)\x3EF\n)\x3)\x5)\x3F2\n)\x3)\x3)\x5)\x3F6\n)\x3"+
		")\x3)\x5)\x3FA\n)\x3)\x3)\x3)\x3)\a)\x400\n)\f)\xE)\x403\v)\x5)\x405\n"+
		")\x3)\a)\x408\n)\f)\xE)\x40B\v)\x3)\x3)\a)\x40F\n)\f)\xE)\x412\v)\x3)"+
		"\x3)\x3)\x3)\x3*\x5*\x419\n*\x3*\x5*\x41C\n*\x3*\x3*\x3*\x5*\x421\n*\x3"+
		"*\x5*\x424\n*\x3*\x3*\x5*\x428\n*\x3*\x3*\x5*\x42C\n*\x3*\x3*\x3*\x3*"+
		"\a*\x432\n*\f*\xE*\x435\v*\x5*\x437\n*\x3*\a*\x43A\n*\f*\xE*\x43D\v*\x3"+
		"*\x3*\a*\x441\n*\f*\xE*\x444\v*\x3*\x3*\x3*\x3*\x3+\x5+\x44B\n+\x3+\x5"+
		"+\x44E\n+\x3+\x3+\x5+\x452\n+\x3+\x3+\x5+\x456\n+\x3+\x5+\x459\n+\x3+"+
		"\x3+\x5+\x45D\n+\x3+\a+\x460\n+\f+\xE+\x463\v+\x3+\x5+\x466\n+\x3+\x3"+
		"+\x3,\x5,\x46B\n,\x3,\x5,\x46E\n,\x3,\x3,\x5,\x472\n,\x3,\x3,\x3,\x5,"+
		"\x477\n,\x3,\x3,\x6,\x47B\n,\r,\xE,\x47C\x3,\x3,\x5,\x481\n,\x3,\x3,\x3"+
		"-\x5-\x486\n-\x3-\x5-\x489\n-\x3-\x3-\x3-\x3-\x5-\x48F\n-\x3-\x3-\x3."+
		"\x5.\x494\n.\x3.\x5.\x497\n.\x3.\x3.\x5.\x49B\n.\x3.\x3.\x3.\x5.\x4A0"+
		"\n.\x3.\x3.\x6.\x4A4\n.\r.\xE.\x4A5\x3.\x3.\x3.\x3.\x6.\x4AC\n.\r.\xE"+
		".\x4AD\x3.\x3.\x5.\x4B2\n.\x3.\x3.\x5.\x4B6\n.\x3/\x5/\x4B9\n/\x3/\x5"+
		"/\x4BC\n/\x3/\x3/\x3/\x5/\x4C1\n/\x3/\x3/\x3/\x5/\x4C6\n/\x3/\x5/\x4C9"+
		"\n/\x3\x30\x5\x30\x4CC\n\x30\x3\x30\x5\x30\x4CF\n\x30\x3\x30\x3\x30\x3"+
		"\x30\x3\x30\x3\x30\x5\x30\x4D6\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x5\x30\x4E0\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x4E5"+
		"\n\x30\x3\x30\x3\x30\x3\x31\x5\x31\x4EA\n\x31\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\a\x31\x4F0\n\x31\f\x31\xE\x31\x4F3\v\x31\x3\x31\x3\x31\x3\x32\x6"+
		"\x32\x4F8\n\x32\r\x32\xE\x32\x4F9\x3\x33\x5\x33\x4FD\n\x33\x3\x33\x3\x33"+
		"\x3\x33\x3\x33\x3\x33\x5\x33\x504\n\x33\x3\x33\x3\x33\x3\x33\x5\x33\x509"+
		"\n\x33\x3\x33\x3\x33\x5\x33\x50D\n\x33\x3\x34\x3\x34\x3\x34\x3\x34\x6"+
		"\x34\x513\n\x34\r\x34\xE\x34\x514\x3\x34\x3\x34\x3\x34\x6\x34\x51A\n\x34"+
		"\r\x34\xE\x34\x51B\x3\x34\x5\x34\x51F\n\x34\x3\x35\x5\x35\x522\n\x35\x3"+
		"\x35\x5\x35\x525\n\x35\x3\x35\x3\x35\x5\x35\x529\n\x35\x3\x35\x3\x35\x5"+
		"\x35\x52D\n\x35\x3\x35\x5\x35\x530\n\x35\x3\x35\x3\x35\x5\x35\x534\n\x35"+
		"\x3\x35\x3\x35\a\x35\x538\n\x35\f\x35\xE\x35\x53B\v\x35\x3\x35\x3\x35"+
		"\x3\x35\x5\x35\x540\n\x35\x3\x35\x3\x35\x6\x35\x544\n\x35\r\x35\xE\x35"+
		"\x545\x3\x35\x3\x35\x3\x35\x3\x35\x6\x35\x54C\n\x35\r\x35\xE\x35\x54D"+
		"\x3\x35\x3\x35\x5\x35\x552\n\x35\x3\x35\x3\x35\x5\x35\x556\n\x35\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\a\x36\x55C\n\x36\f\x36\xE\x36\x55F\v\x36\x5\x36"+
		"\x561\n\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\a\x36\x568\n\x36\f\x36"+
		"\xE\x36\x56B\v\x36\x5\x36\x56D\n\x36\x3\x36\x5\x36\x570\n\x36\x3\x37\x5"+
		"\x37\x573\n\x37\x3\x37\x5\x37\x576\n\x37\x3\x37\x3\x37\x3\x38\x5\x38\x57B"+
		"\n\x38\x3\x38\x5\x38\x57E\n\x38\x3\x38\x3\x38\x3\x38\x5\x38\x583\n\x38"+
		"\x3\x38\x3\x38\x3\x38\x5\x38\x588\n\x38\x3\x38\x5\x38\x58B\n\x38\x3\x39"+
		"\x6\x39\x58E\n\x39\r\x39\xE\x39\x58F\x3:\x3:\x3:\a:\x595\n:\f:\xE:\x598"+
		"\v:\x3;\x5;\x59B\n;\x3;\x5;\x59E\n;\x3;\x3;\x3;\x3;\x3;\x5;\x5A5\n;\x3"+
		";\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x5;\x5AF\n;\x3;\x3;\x3;\x5;\x5B4\n;\x3;"+
		"\x3;\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x3<\x5"+
		"<\x5C8\n<\x3=\x5=\x5CB\n=\x3=\x5=\x5CE\n=\x3=\x3=\x5=\x5D2\n=\x3=\x3="+
		"\x5=\x5D6\n=\x3=\x5=\x5D9\n=\x3=\x3=\x5=\x5DD\n=\x3=\x3=\x5=\x5E1\n=\x3"+
		"=\x3=\x5=\x5E5\n=\x3=\x3=\x3=\x3=\x5=\x5EB\n=\x3>\x3>\x3>\x3>\x3>\x3>"+
		"\x3?\x6?\x5F4\n?\r?\xE?\x5F5\x3@\x3@\x3@\x6@\x5FB\n@\r@\xE@\x5FC\x3@\x3"+
		"@\x3\x41\x5\x41\x602\n\x41\x3\x41\x5\x41\x605\n\x41\x3\x41\x3\x41\x3\x41"+
		"\x5\x41\x60A\n\x41\x3\x41\x3\x41\x5\x41\x60E\n\x41\x3\x41\x3\x41\x5\x41"+
		"\x612\n\x41\x3\x41\x3\x41\x3\x41\x3\x41\x3\x41\x5\x41\x619\n\x41\x3\x42"+
		"\x6\x42\x61C\n\x42\r\x42\xE\x42\x61D\x3\x43\x3\x43\x3\x44\x3\x44\x3\x45"+
		"\x5\x45\x625\n\x45\x3\x45\x5\x45\x628\n\x45\x3\x45\x3\x45\x3\x45\x5\x45"+
		"\x62D\n\x45\x3\x45\x5\x45\x630\n\x45\x3\x45\x3\x45\x3\x45\x5\x45\x635"+
		"\n\x45\x3\x45\x3\x45\x5\x45\x639\n\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3"+
		"\x45\x5\x45\x640\n\x45\x3\x46\x6\x46\x643\n\x46\r\x46\xE\x46\x644\x3G"+
		"\x6G\x648\nG\rG\xEG\x649\x3H\x6H\x64D\nH\rH\xEH\x64E\x3I\x3I\x5I\x653"+
		"\nI\x3I\x3I\x3I\aI\x658\nI\fI\xEI\x65B\vI\x3I\x3I\x3I\x5I\x660\nI\x3J"+
		"\x3J\x3J\x3K\x3K\x3K\x3K\x3K\aK\x66A\nK\fK\xEK\x66D\vK\x5K\x66F\nK\x3"+
		"K\x5K\x672\nK\x3L\x3L\x3L\x3L\x3L\x5L\x679\nL\x3M\x3M\x3M\x3M\x3M\aM\x680"+
		"\nM\fM\xEM\x683\vM\x3M\x3M\x3M\x3N\x3N\x3N\x3O\x3O\x3O\x3O\aO\x68F\nO"+
		"\fO\xEO\x692\vO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x69A\nO\fO\xEO\x69D\vO\x3O"+
		"\x3O\x5O\x6A1\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\aO\x6AA\nO\fO\xEO\x6AD\v"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\aO\x6B6\nO\fO\xEO\x6B9\vO\x3O\x3O\x5O\x6BD"+
		"\nO\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x6CA\nP\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x5P\x6D2\nP\x3P\x5P\x6D5\nP\x3P\x3P\x3P\x3P\x3P\x5P\x6DC"+
		"\nP\x3P\x3P\x3P\x3P\x5P\x6E2\nP\x3P\x3P\x5P\x6E6\nP\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x3P\x3P\x5P\x6F2\nP\x5P\x6F4\nP\x3P\x3P\x3P\x3P\x5P\x6FA"+
		"\nP\x3P\x3P\x3P\x3P\x5P\x700\nP\x3P\x3P\x3P\x3P\x3P\x3P\aP\x708\nP\fP"+
		"\xEP\x70B\vP\x3P\x3P\x3P\x3P\x5P\x711\nP\x3P\x3P\x5P\x715\nP\x3P\x5P\x718"+
		"\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\aP\x721\nP\fP\xEP\x724\vP\x3P\x3P\x3P"+
		"\x3P\x5P\x72A\nP\x3P\x3P\x5P\x72E\nP\x3P\x5P\x731\nP\x3P\x3P\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x5P\x73B\nP\x3P\x3P\x3P\x3P\x5P\x741\nP\x3P\x3P\x3P\x3P"+
		"\x3P\aP\x748\nP\fP\xEP\x74B\vP\x5P\x74D\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3"+
		"P\x5P\x756\nP\x3P\x3P\x3P\x3P\x5P\x75C\nP\x3P\x3P\x5P\x760\nP\x3P\x5P"+
		"\x763\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x771\nP\x3"+
		"P\x5P\x774\nP\x3P\x3P\x3P\x3P\x3P\x5P\x77B\nP\x3P\x3P\x5P\x77F\nP\x3P"+
		"\x3P\x3P\x3P\x3P\x3P\x5P\x787\nP\x3P\x3P\x3P\x3P\x5P\x78D\nP\x3P\x3P\x3"+
		"P\x3P\x3P\x3P\x5P\x795\nP\aP\x797\nP\fP\xEP\x79A\vP\x3P\x3P\x3P\x3P\x5"+
		"P\x7A0\nP\x3P\x3P\x5P\x7A4\nP\x3P\x5P\x7A7\nP\x3P\x3P\x3P\x3P\x3P\x3P"+
		"\x3P\x3P\x3P\x5P\x7B2\nP\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x7BA\nP\x3P\x3P\x3"+
		"P\x3P\x3P\x5P\x7C1\nP\x3P\x3P\x3P\x3P\x6P\x7C7\nP\rP\xEP\x7C8\x3P\x3P"+
		"\x5P\x7CD\nP\x3P\x3P\x3P\x3P\x3P\x5P\x7D4\nP\x3P\x3P\x5P\x7D8\nP\x3P\x3"+
		"P\x3P\x3P\x5P\x7DE\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x7E9\nP"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x7F2\nP\x5P\x7F4\nP\x3P\x3P\x3P\x3P\x5"+
		"P\x7FA\nP\x3P\x5P\x7FD\nP\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x807\nP"+
		"\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x3P\x5P\x814\nP\x3P\x3P\x3P\x5"+
		"P\x819\nP\x3P\x3P\x3P\x3P\x3P\x3P\aP\x821\nP\fP\xEP\x824\vP\x3P\x3P\x5"+
		"P\x828\nP\x3Q\x3Q\x3R\x3R\x5R\x82E\nR\x3R\x3R\x3R\x3S\x3S\x3S\x3S\x5S"+
		"\x837\nS\x3S\x3S\x3S\x3S\x3S\x3S\x5S\x83F\nS\x3S\x5S\x842\nS\x3S\x3S\x3"+
		"S\x3T\x5T\x848\nT\x3T\x5T\x84B\nT\x3T\x3T\x5T\x84F\nT\x3T\x3T\x5T\x853"+
		"\nT\x3T\x3T\x3T\x3U\x3U\x5U\x85A\nU\x3U\x3U\x3U\x3V\x5V\x860\nV\x3V\x3"+
		"V\x5V\x864\nV\x3V\x3V\x3V\aV\x869\nV\fV\xEV\x86C\vV\x3V\x3V\x3V\x3V\a"+
		"V\x872\nV\fV\xEV\x875\vV\x3V\x3V\x5V\x879\nV\x5V\x87B\nV\x3W\x3W\x3W\x3"+
		"W\x3X\x3X\x5X\x883\nX\x3X\x3X\x3X\aX\x888\nX\fX\xEX\x88B\vX\x3X\x3X\x3"+
		"X\x3X\x3X\x3X\x3X\aX\x894\nX\fX\xEX\x897\vX\x3X\x3X\x3X\x3X\x3X\x3X\x3"+
		"X\aX\x8A0\nX\fX\xEX\x8A3\vX\x3X\x3X\x3X\x5X\x8A8\nX\x3X\x3X\x3X\x3X\a"+
		"X\x8AE\nX\fX\xEX\x8B1\vX\x3X\x3X\x3X\x3X\x5X\x8B7\nX\x3X\x3X\x3X\x3X\a"+
		"X\x8BD\nX\fX\xEX\x8C0\vX\x3X\x3X\x3X\x3X\x5X\x8C6\nX\x3X\x3X\x3X\x3X\a"+
		"X\x8CC\nX\fX\xEX\x8CF\vX\x3X\x3X\x3X\x3X\x5X\x8D5\nX\x3X\x3X\x3X\x3X\a"+
		"X\x8DB\nX\fX\xEX\x8DE\vX\x3X\x3X\x3X\x3X\x5X\x8E4\nX\x3X\x5X\x8E7\nX\x3"+
		"X\x3X\x3X\x3X\aX\x8ED\nX\fX\xEX\x8F0\vX\x3X\x3X\x3X\x3X\x5X\x8F6\nX\x3"+
		"X\x5X\x8F9\nX\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x906\nX"+
		"\x3Y\x5Y\x909\nY\x3Y\x5Y\x90C\nY\x3Y\x3Y\x3Y\x3Y\x3Y\x5Y\x913\nY\x3Y\x3"+
		"Y\x3Y\x5Y\x918\nY\x3Y\x3Y\x3Y\x5Y\x91D\nY\x5Y\x91F\nY\x3Y\x3Y\x3Y\x3Y"+
		"\x3Y\x3Y\x3Y\x3Y\x5Y\x929\nY\x3Y\x3Y\x3Y\x5Y\x92E\nY\x5Y\x930\nY\x5Y\x932"+
		"\nY\x3Z\x5Z\x935\nZ\x3Z\x3Z\x3Z\x3Z\x3[\x3[\x3[\x3[\a[\x93F\n[\f[\xE["+
		"\x942\v[\x3[\x3[\x5[\x946\n[\x3[\x3[\x3\\\x3\\\x3\\\x3\\\a\\\x94E\n\\"+
		"\f\\\xE\\\x951\v\\\x3\\\x3\\\x3]\x5]\x956\n]\x3]\x3]\x3]\x3]\x3]\x5]\x95D"+
		"\n]\x3]\x3]\x3]\x5]\x962\n]\x3^\x3^\x3^\x3^\a^\x968\n^\f^\xE^\x96B\v^"+
		"\x3^\x3^\x3_\x3_\x3_\x3_\a_\x973\n_\f_\xE_\x976\v_\x3_\x3_\x3_\x3_\x5"+
		"_\x97C\n_\x3_\x3_\x3_\a_\x981\n_\f_\xE_\x984\v_\x3_\x3_\x3_\x3_\x3_\x3"+
		"_\x3_\a_\x98D\n_\f_\xE_\x990\v_\x3_\x3_\x5_\x994\n_\x3`\x3`\x3`\x3`\a"+
		"`\x99A\n`\f`\xE`\x99D\v`\x3`\x3`\x3\x61\x5\x61\x9A2\n\x61\x3\x61\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\a\x61\x9A9\n\x61\f\x61\xE\x61\x9AC\v\x61\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\a\x61\x9B4\n\x61\f\x61\xE\x61\x9B7"+
		"\v\x61\x3\x61\x3\x61\x5\x61\x9BB\n\x61\x3\x61\x5\x61\x9BE\n\x61\x3\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\a\x61\x9C5\n\x61\f\x61\xE\x61\x9C8\v\x61"+
		"\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\x3\x61\a\x61\x9D0\n\x61\f\x61\xE\x61"+
		"\x9D3\v\x61\x3\x61\x3\x61\x5\x61\x9D7\n\x61\x3\x61\x5\x61\x9DA\n\x61\x5"+
		"\x61\x9DC\n\x61\x3\x62\x3\x62\x3\x62\x3\x63\x3\x63\x5\x63\x9E3\n\x63\x3"+
		"\x64\x3\x64\x3\x64\x5\x64\x9E8\n\x64\x3\x65\x5\x65\x9EB\n\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x5\x65\x9F1\n\x65\x3\x65\x5\x65\x9F4\n\x65\x3\x66\x5"+
		"\x66\x9F7\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66"+
		"\x5\x66\xA01\n\x66\x3\x66\x3\x66\x3g\x6g\xA06\ng\rg\xEg\xA07\x3h\x3h\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA16\ni\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5"+
		"i\xA2E\ni\x3i\x5i\xA31\ni\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA6F\ni\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x5i\xA83\ni\x3i\x3i\x3i\x3i\x5i\xA89\ni\x3i\x3i\x3i\x5i\xA8E\ni\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x5i\xA96\ni\ai\xA98\ni\fi\xEi\xA9B\vi\x3j\x3j\x3j\x3"+
		"j\x3j\x5j\xAA2\nj\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j"+
		"\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xABE\nj\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j"+
		"\xAD2\nj\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j"+
		"\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\aj\xB0F\nj\fj\xEj\xB12\vj\x3j\x3j\x3"+
		"j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\aj\xB23\nj\fj\xEj\xB26"+
		"\vj\x3j\x3j\x3j\x5j\xB2B\nj\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xB34\nk\x3"+
		"k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\ak\xB46"+
		"\nk\fk\xEk\xB49\vk\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x5l\xB54\nl\x3"+
		"l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l"+
		"\x3l\x3l\x3l\x3l\x3l\x5l\xB6D\nl\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3l\x3"+
		"l\x3l\x3l\x3l\x3l\x5l\xB7D\nl\x3l\x3l\x3l\x3l\x3l\x3l\x5l\xB85\nl\x5l"+
		"\xB87\nl\x3m\x3m\x5m\xB8B\nm\x3n\x3n\x3n\x3n\an\xB91\nn\fn\xEn\xB94\v"+
		"n\x5n\xB96\nn\x3n\x3n\x3o\x3o\x3o\x3o\x3p\x3p\x5p\xBA0\np\x3q\x3q\x3q"+
		"\x3q\aq\xBA6\nq\fq\xEq\xBA9\vq\x3q\x3q\x3r\x3r\x5r\xBAF\nr\x3s\x3s\x3"+
		"s\x3s\as\xBB5\ns\fs\xEs\xBB8\vs\x3s\x3s\x3t\x3t\x3t\at\xBBF\nt\ft\xEt"+
		"\xBC2\vt\x3u\x3u\x3v\x3v\x3v\av\xBC9\nv\fv\xEv\xBCC\vv\x3w\x3w\x3w\x3"+
		"w\x5w\xBD2\nw\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x3w\x5w"+
		"\xBE1\nw\x3w\x5w\xBE4\nw\x5w\xBE6\nw\x3x\x3x\x3x\x3x\x3x\x5x\xBED\nx\x3"+
		"x\x3x\x5x\xBF1\nx\x3x\x3x\x3y\x3y\x3y\x3y\x3y\x3y\x3y\x3y\ay\xBFD\ny\f"+
		"y\xEy\xC00\vy\x3z\x3z\x3z\x3z\x3z\x3z\az\xC08\nz\fz\xEz\xC0B\vz\x3{\x3"+
		"{\x3{\x3{\x3{\x3{\x3{\x3{\x5{\xC15\n{\x3|\x3|\x5|\xC19\n|\x3}\x3}\x3}"+
		"\x3}\a}\xC1F\n}\f}\xE}\xC22\v}\x3}\a}\xC25\n}\f}\xE}\xC28\v}\x5}\xC2A"+
		"\n}\x3}\x3}\x3~\x3~\x3\x7F\x3\x7F\x5\x7F\xC32\n\x7F\x3\x7F\x3\x7F\x3\x80"+
		"\x3\x80\x5\x80\xC38\n\x80\x3\x80\x3\x80\x3\x81\x3\x81\x3\x81\x3\x81\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\x6\x81\xC44\n\x81\r\x81\xE\x81\xC45\x3\x81\x3"+
		"\x81\x3\x81\x3\x81\x3\x81\x5\x81\xC4D\n\x81\x3\x82\x3\x82\a\x82\xC51\n"+
		"\x82\f\x82\xE\x82\xC54\v\x82\x3\x82\x3\x82\x5\x82\xC58\n\x82\x3\x83\x3"+
		"\x83\x3\x83\x5\x83\xC5D\n\x83\x3\x84\x3\x84\x5\x84\xC61\n\x84\x3\x85\x3"+
		"\x85\x3\x85\x3\x85\x5\x85\xC67\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85"+
		"\x3\x85\x5\x85\xC6F\n\x85\x3\x85\x3\x85\x3\x85\x3\x85\a\x85\xC75\n\x85"+
		"\f\x85\xE\x85\xC78\v\x85\x3\x85\x3\x85\x5\x85\xC7C\n\x85\x3\x86\x5\x86"+
		"\xC7F\n\x86\x3\x87\x3\x87\x3\x87\x3\x87\x3\x87\a\x87\xC86\n\x87\f\x87"+
		"\xE\x87\xC89\v\x87\x5\x87\xC8B\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\x5\x88\xC94\n\x88\x3\x89\x5\x89\xC97\n\x89\x3\x89\x3\x89"+
		"\x3\x89\x3\x89\a\x89\xC9D\n\x89\f\x89\xE\x89\xCA0\v\x89\x5\x89\xCA2\n"+
		"\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\x3\x8A\x5\x8A\xCA9\n\x8A\x3\x8A\x3\x8A"+
		"\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\a\x8B\xCB2\n\x8B\f\x8B\xE\x8B\xCB5"+
		"\v\x8B\x5\x8B\xCB7\n\x8B\x3\x8B\x3\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x3"+
		"\x8C\x5\x8C\xCC0\n\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\a\x8D\xCC6\n\x8D\f"+
		"\x8D\xE\x8D\xCC9\v\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\a\x8E"+
		"\xCD1\n\x8E\f\x8E\xE\x8E\xCD4\v\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F"+
		"\x3\x8F\x3\x90\x3\x90\x3\x90\x5\x90\xCDF\n\x90\x3\x90\x3\x90\x3\x90\x3"+
		"\x90\x3\x90\x3\x90\x5\x90\xCE7\n\x90\x3\x90\x3\x90\x5\x90\xCEB\n\x90\x3"+
		"\x90\x3\x90\x3\x90\x3\x90\x3\x90\x5\x90\xCF2\n\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x5\x90\xCF8\n\x90\x3\x91\x5\x91\xCFB\n\x91\x3\x91\x3\x91\x3\x91"+
		"\x3\x91\x5\x91\xD01\n\x91\x3\x92\x3\x92\x5\x92\xD05\n\x92\x3\x93\x3\x93"+
		"\x3\x93\a\x93\xD0A\n\x93\f\x93\xE\x93\xD0D\v\x93\x3\x94\x5\x94\xD10\n"+
		"\x94\x3\x94\x6\x94\xD13\n\x94\r\x94\xE\x94\xD14\x3\x94\x3\x94\x3\x95\x5"+
		"\x95\xD1A\n\x95\x3\x95\x3\x95\x3\x95\x5\x95\xD1F\n\x95\x3\x95\x5\x95\xD22"+
		"\n\x95\x3\x95\x3\x95\x3\x95\x3\x95\x3\x96\x3\x96\x3\x96\a\x96\xD2B\n\x96"+
		"\f\x96\xE\x96\xD2E\v\x96\x3\x97\x3\x97\x3\x97\x3\x97\x3\x98\x3\x98\x3"+
		"\x98\x3\x99\x3\x99\x3\x99\x3\x99\x5\x99\xD3B\n\x99\x3\x99\x3\x99\x3\x99"+
		"\x3\x9A\a\x9A\xD41\n\x9A\f\x9A\xE\x9A\xD44\v\x9A\x3\x9A\x3\x9A\x5\x9A"+
		"\xD48\n\x9A\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\x3"+
		"\x9B\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xD56\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B"+
		"\x3\x9B\x3\x9B\x3\x9B\x5\x9B\xD5F\n\x9B\x3\x9B\x3\x9B\x3\x9B\x3\x9B\a"+
		"\x9B\xD65\n\x9B\f\x9B\xE\x9B\xD68\v\x9B\x5\x9B\xD6A\n\x9B\x3\x9C\x3\x9C"+
		"\x3\x9C\x3\x9D\x3\x9D\x5\x9D\xD71\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x5\x9E\xD7A\n\x9E\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\xA0"+
		"\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xD86\n\xA0\x3\xA1\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA1\x5\xA1\xD8D\n\xA1\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA4"+
		"\x3\xA4\x3\xA5\x3\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6"+
		"\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6"+
		"\x5\xA6\xDA8\n\xA6\x5\xA6\xDAA\n\xA6\x5\xA6\xDAC\n\xA6\x3\xA6\a\xA6\xDAF"+
		"\n\xA6\f\xA6\xE\xA6\xDB2\v\xA6\x3\xA6\x5\xA6\xDB5\n\xA6\x3\xA7\x3\xA7"+
		"\x3\xA8\x5\xA8\xDBA\n\xA8\x3\xA8\x5\xA8\xDBD\n\xA8\x3\xA8\x3\xA8\x5\xA8"+
		"\xDC1\n\xA8\x3\xA8\x3\xA8\x5\xA8\xDC5\n\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA8"+
		"\a\xA8\xDCB\n\xA8\f\xA8\xE\xA8\xDCE\v\xA8\x5\xA8\xDD0\n\xA8\x3\xA8\x3"+
		"\xA8\x3\xA8\x3\xA8\a\xA8\xDD6\n\xA8\f\xA8\xE\xA8\xDD9\v\xA8\x5\xA8\xDDB"+
		"\n\xA8\x3\xA8\a\xA8\xDDE\n\xA8\f\xA8\xE\xA8\xDE1\v\xA8\x3\xA8\x3\xA8\a"+
		"\xA8\xDE5\n\xA8\f\xA8\xE\xA8\xDE8\v\xA8\x3\xA8\x3\xA8\x3\xA8\x3\xA9\x6"+
		"\xA9\xDEE\n\xA9\r\xA9\xE\xA9\xDEF\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x3\xAA\x5"+
		"\xAA\xDF7\n\xAA\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAC\x3\xAC\x3\xAD\x5\xAD"+
		"\xE00\n\xAD\x3\xAD\x5\xAD\xE03\n\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\xE08"+
		"\n\xAD\x3\xAD\x3\xAD\x3\xAD\x3\xAD\x5\xAD\xE0E\n\xAD\a\xAD\xE10\n\xAD"+
		"\f\xAD\xE\xAD\xE13\v\xAD\x5\xAD\xE15\n\xAD\x3\xAD\x3\xAD\x3\xAE\x3\xAE"+
		"\x3\xAE\x3\xAE\a\xAE\xE1D\n\xAE\f\xAE\xE\xAE\xE20\v\xAE\x5\xAE\xE22\n"+
		"\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x5\xAF\xE28\n\xAF\x3\xAF\x3\xAF\x5\xAF"+
		"\xE2C\n\xAF\x3\xB0\x6\xB0\xE2F\n\xB0\r\xB0\xE\xB0\xE30\x3\xB1\x5\xB1\xE34"+
		"\n\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\x3\xB1\a\xB1\xE3B\n\xB1\f\xB1\xE\xB1"+
		"\xE3E\v\xB1\x3\xB1\x3\xB1\x5\xB1\xE42\n\xB1\x5\xB1\xE44\n\xB1\x3\xB1\x5"+
		"\xB1\xE47\n\xB1\x3\xB1\x5\xB1\xE4A\n\xB1\x3\xB1\x5\xB1\xE4D\n\xB1\x3\xB1"+
		"\x5\xB1\xE50\n\xB1\x3\xB1\x3\xB1\x3\xB2\x3\xB2\x3\xB2\x3\xB3\x5\xB3\xE58"+
		"\n\xB3\x3\xB3\x3\xB3\x5\xB3\xE5C\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5"+
		"\xB3\xE62\n\xB3\x3\xB3\x3\xB3\x5\xB3\xE66\n\xB3\x3\xB3\x3\xB3\x3\xB4\x6"+
		"\xB4\xE6B\n\xB4\r\xB4\xE\xB4\xE6C\x3\xB5\x5\xB5\xE70\n\xB5\x3\xB5\x5\xB5"+
		"\xE73\n\xB5\x3\xB5\x5\xB5\xE76\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5"+
		"\xE7C\n\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x3\xB5\x5\xB5\xE84\n\xB5"+
		"\x3\xB6\x5\xB6\xE87\n\xB6\x3\xB6\x3\xB6\x5\xB6\xE8B\n\xB6\x3\xB6\x5\xB6"+
		"\xE8E\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\xE97"+
		"\n\xB6\x3\xB7\x5\xB7\xE9A\n\xB7\x3\xB7\x3\xB7\x5\xB7\xE9E\n\xB7\x3\xB7"+
		"\x3\xB7\x5\xB7\xEA2\n\xB7\x3\xB7\x3\xB7\x5\xB7\xEA6\n\xB7\x3\xB7\x3\xB7"+
		"\x5\xB7\xEAA\n\xB7\x3\xB7\x5\xB7\xEAD\n\xB7\x3\xB7\a\xB7\xEB0\n\xB7\f"+
		"\xB7\xE\xB7\xEB3\v\xB7\x3\xB7\x5\xB7\xEB6\n\xB7\x3\xB7\x3\xB7\a\xB7\xEBA"+
		"\n\xB7\f\xB7\xE\xB7\xEBD\v\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\xEC2\n\xB7"+
		"\x3\xB7\x3\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB8"+
		"\x5\xB8\xECE\n\xB8\x3\xB9\x5\xB9\xED1\n\xB9\x3\xB9\x5\xB9\xED4\n\xB9\x3"+
		"\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\xEDA\n\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9"+
		"\x3\xB9\x5\xB9\xEE1\n\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\xEE8"+
		"\n\xB9\x3\xB9\x5\xB9\xEEB\n\xB9\x3\xBA\x5\xBA\xEEE\n\xBA\x3\xBA\x5\xBA"+
		"\xEF1\n\xBA\x3\xBA\x5\xBA\xEF4\n\xBA\x3\xBA\x3\xBA\x3\xBA\a\xBA\xEF9\n"+
		"\xBA\f\xBA\xE\xBA\xEFC\v\xBA\x3\xBA\x3\xBA\x5\xBA\xF00\n\xBA\x3\xBA\x3"+
		"\xBA\x3\xBB\x5\xBB\xF05\n\xBB\x3\xBB\x5\xBB\xF08\n\xBB\x3\xBB\x5\xBB\xF0B"+
		"\n\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\xF10\n\xBB\x3\xBB\x3\xBB\x3\xBC\x3"+
		"\xBC\x3\xBC\x3\xBC\x3\xBD\x3\xBD\x3\xBD\x5\xBD\xF1B\n\xBD\x3\xBD\x3\xBD"+
		"\x5\xBD\xF1F\n\xBD\x3\xBD\x3\xBD\x3\xBE\x5\xBE\xF24\n\xBE\x3\xBE\x3\xBE"+
		"\x3\xBE\x5\xBE\xF29\n\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x5\xBE\xF2F\n\xBE"+
		"\x3\xBE\x3\xBE\x3\xBE\x3\xBE\a\xBE\xF35\n\xBE\f\xBE\xE\xBE\xF38\v\xBE"+
		"\x5\xBE\xF3A\n\xBE\x3\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x5\xBF\xF44\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF"+
		"\x3\xBF\x3\xBF\x5\xBF\xF4F\n\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xF5C\n\xBF\x3\xBF\x3\xDB0"+
		"\x2\x6\xD0\xD4\xF0\xF2\xC0\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2$\x2&\x2"+
		"(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<\x2>\x2@\x2\x42"+
		"\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z\x2\\\x2^\x2`\x2"+
		"\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2x\x2z\x2|\x2~\x2"+
		"\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E\x2\x90\x2\x92\x2"+
		"\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2\x2\xA4\x2\xA6\x2"+
		"\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6\x2\xB8\x2\xBA\x2"+
		"\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA\x2\xCC\x2\xCE\x2"+
		"\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE\x2\xE0\x2\xE2\x2"+
		"\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2\x2\xF4\x2\xF6\x2"+
		"\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2\x106\x2\x108\x2\x10A"+
		"\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116\x2\x118\x2\x11A\x2\x11C"+
		"\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128\x2\x12A\x2\x12C\x2\x12E"+
		"\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A\x2\x13C\x2\x13E\x2\x140"+
		"\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C\x2\x14E\x2\x150\x2\x152"+
		"\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E\x2\x160\x2\x162\x2\x164"+
		"\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170\x2\x172\x2\x174\x2\x176"+
		"\x2\x178\x2\x17A\x2\x17C\x2\x2H\x4\x2\x1D\x1D\x84\x84\x4\x2\x1D\x1D(*"+
		"\x3\x2\xDB\xDC\x4\x2\"\"\x39\x39\n\x2\a\a\v\v\xF\xF\x1F\x1F\x37\x37\x43"+
		"\x43\x45\x45LL\x4\x2RR\x160\x160\a\x2\x4\x4\b\b\x32\x32TTXX\x3\x2\x169"+
		"\x169\a\x2\x6\x6,-hh\x8D\x8D\xAB\xAB\b\x2\x1E\x1E;;\x41\x41\x63\x63yy"+
		"\x93\x93\x5\x2\x4\x4\b\b\x32\x32\x4\x2\x6\x6,,\a\x2\x1E\x1E;;\x41\x41"+
		"\x63\x63\x93\x93\x4\x2\'\'\x128\x128\xE\x2\x1E\x1E$$..\x38\x38:;\x41\x41"+
		"QQ\x63\x63\x66\x66iimm\x93\x93\x4\x2--hh\x4\x2\xE\xEoo\x4\x2\x6\x6\'\'"+
		"\x4\x2vv\x8E\x8E\xF\x2\x1E\x1E$$++\x38\x38:;\x41\x41UU\x61\x61\x63\x63"+
		"\x66\x66\x81\x81\x93\x93\x95\x95\x5\x2]]nn\x84\x84\x4\x2]]\x15F\x15F\x4"+
		"\x2nn\x84\x84\a\x2\x1E\x1E$$\x38\x38:;\x63\x63\x4\x2>>\x44\x44\t\x2\x1E"+
		"\x1E$$\x38\x38:;\x41\x41\x63\x63\x80\x80\t\x2\xF0\xF3\xF5\xF5\xF7\xFE"+
		"\x100\x103\x106\x108\x12A\x12B\x136\x137\x4\x2[[__\x5\x2;;\x41\x41\x80"+
		"\x80\x10\x2\x1E\x1E$$\x38\x38:;\x41\x41QQ\x63\x63\x66\x66mmttyy\x80\x80"+
		"\x8C\x8C\x93\x93\r\x2\xE\xE  \x32\x32==TTWWYZ\x62\x62jjoo\x160\x160\x4"+
		"\x2\x15\x15KK\x5\x2\x16\x16\x46\x46II\x3\x2\x104\x105\x4\x2\n\n\x1D\x1D"+
		"\x4\x2\t\t\x15\x15\x4\x2\x130\x130\x132\x132\x5\x2ll}}\x92\x93\x6\x2\x31"+
		"\x31\x36\x36\x38\x38;;\x4\x2\x10\x10\xD4\xD4\x4\x2yy\x93\x93\x4\x2\xF4"+
		"\xF4\x10D\x10D\x4\x2\x128\x128\x12E\x12F\x6\x2\xF9\xFC\xFF\xFF\x102\x102"+
		"\x12C\x12C\x5\x2\x108\x108\x11C\x11C\x120\x120\x4\x2\xFD\xFE\x103\x103"+
		"\x3\x2\xFB\xFC\x3\x2\xF0\xF8\x5\x2\x106\x106\x11A\x11A\x11E\x11E\x4\x2"+
		"\x11D\x11D\x121\x121\x5\x2\x107\x107\x11B\x11B\x11F\x11F\x4\x2VV\x104"+
		"\x104\x3\x2\x10D\x119\x4\x2\x128\x128\x12E\x12E\x3\x2\xF9\xFA\x4\x2}}"+
		"\x92\x92\x3\x2\x109\x10C\x4\x2hh\xAB\xAB\x3\x2%&\x4\x2xx~~\x5\x2\x9D\x9D"+
		"\xA0\xA0\xB7\xB7\b\x2\x9D\x9D\x9F\xA0\xA2\xA2\xA7\xA7\xAE\xAF\xB8\xB9"+
		"\t\x2\x9E\x9E\xA1\xA1\xA3\xA6\xA8\xAA\xAC\xAD\xB0\xB7\xBA\xBB\x5\x2\xE3"+
		"\xED\x136\x144\x146\x147!\x2\x5\x5\v\v\xF\x12\x14\x14\x16\x16\x1F ##\'"+
		"+--\x31\x31\x33\x33\x36\x37??\x42\x43\x45\x46HJLLQRUWYjl\x9A\xAB\xAB\xB2"+
		"\xB2\xB5\xBB\xC0\xC0\xC4\xC4\xC9\xCC\xD0\xD3\xD5\xD7\xDF\xE0\x11E\x121"+
		"\x4\x2\x82\x82\xCB\xCB\x6\x2\x41\x41QQmm\xC5\xC6\a\x2$$\x38\x38:;\x63"+
		"\x63\xC4\xC4\xF\x2\xE\xE\x41\x41QQ\x66\x66ttyy\x80\x80\x8C\x8C\x93\x93"+
		"\xC1\xC1\xC6\xC6\xC8\xC8\xCD\xCD\x4\x2\x4\x4\b\b\x1199\x2\x186\x3\x2\x2"+
		"\x2\x4\x194\x3\x2\x2\x2\x6\x198\x3\x2\x2\x2\b\x1A0\x3\x2\x2\x2\n\x1A8"+
		"\x3\x2\x2\x2\f\x1D4\x3\x2\x2\x2\xE\x1D7\x3\x2\x2\x2\x10\x1DC\x3\x2\x2"+
		"\x2\x12\x1F4\x3\x2\x2\x2\x14\x1F6\x3\x2\x2\x2\x16\x210\x3\x2\x2\x2\x18"+
		"\x216\x3\x2\x2\x2\x1A\x219\x3\x2\x2\x2\x1C\x245\x3\x2\x2\x2\x1E\x248\x3"+
		"\x2\x2\x2 \x269\x3\x2\x2\x2\"\x272\x3\x2\x2\x2$\x279\x3\x2\x2\x2&\x298"+
		"\x3\x2\x2\x2(\x29A\x3\x2\x2\x2*\x2A1\x3\x2\x2\x2,\x2A5\x3\x2\x2\x2.\x2AA"+
		"\x3\x2\x2\x2\x30\x2E0\x3\x2\x2\x2\x32\x2E3\x3\x2\x2\x2\x34\x2FA\x3\x2"+
		"\x2\x2\x36\x2FD\x3\x2\x2\x2\x38\x30A\x3\x2\x2\x2:\x334\x3\x2\x2\x2<\x337"+
		"\x3\x2\x2\x2>\x34A\x3\x2\x2\x2@\x366\x3\x2\x2\x2\x42\x369\x3\x2\x2\x2"+
		"\x44\x393\x3\x2\x2\x2\x46\x3C1\x3\x2\x2\x2H\x3C5\x3\x2\x2\x2J\x3D4\x3"+
		"\x2\x2\x2L\x3DB\x3\x2\x2\x2N\x3EB\x3\x2\x2\x2P\x3EE\x3\x2\x2\x2R\x418"+
		"\x3\x2\x2\x2T\x44A\x3\x2\x2\x2V\x46A\x3\x2\x2\x2X\x485\x3\x2\x2\x2Z\x493"+
		"\x3\x2\x2\x2\\\x4B8\x3\x2\x2\x2^\x4CB\x3\x2\x2\x2`\x4E9\x3\x2\x2\x2\x62"+
		"\x4F7\x3\x2\x2\x2\x64\x4FC\x3\x2\x2\x2\x66\x51E\x3\x2\x2\x2h\x521\x3\x2"+
		"\x2\x2j\x56F\x3\x2\x2\x2l\x572\x3\x2\x2\x2n\x57A\x3\x2\x2\x2p\x58D\x3"+
		"\x2\x2\x2r\x591\x3\x2\x2\x2t\x59A\x3\x2\x2\x2v\x5C7\x3\x2\x2\x2x\x5CA"+
		"\x3\x2\x2\x2z\x5EC\x3\x2\x2\x2|\x5F3\x3\x2\x2\x2~\x5F7\x3\x2\x2\x2\x80"+
		"\x601\x3\x2\x2\x2\x82\x61B\x3\x2\x2\x2\x84\x61F\x3\x2\x2\x2\x86\x621\x3"+
		"\x2\x2\x2\x88\x624\x3\x2\x2\x2\x8A\x642\x3\x2\x2\x2\x8C\x647\x3\x2\x2"+
		"\x2\x8E\x64C\x3\x2\x2\x2\x90\x65F\x3\x2\x2\x2\x92\x661\x3\x2\x2\x2\x94"+
		"\x664\x3\x2\x2\x2\x96\x678\x3\x2\x2\x2\x98\x67A\x3\x2\x2\x2\x9A\x687\x3"+
		"\x2\x2\x2\x9C\x6BC\x3\x2\x2\x2\x9E\x827\x3\x2\x2\x2\xA0\x829\x3\x2\x2"+
		"\x2\xA2\x82B\x3\x2\x2\x2\xA4\x841\x3\x2\x2\x2\xA6\x847\x3\x2\x2\x2\xA8"+
		"\x859\x3\x2\x2\x2\xAA\x87A\x3\x2\x2\x2\xAC\x87C\x3\x2\x2\x2\xAE\x905\x3"+
		"\x2\x2\x2\xB0\x931\x3\x2\x2\x2\xB2\x934\x3\x2\x2\x2\xB4\x93A\x3\x2\x2"+
		"\x2\xB6\x949\x3\x2\x2\x2\xB8\x955\x3\x2\x2\x2\xBA\x963\x3\x2\x2\x2\xBC"+
		"\x993\x3\x2\x2\x2\xBE\x995\x3\x2\x2\x2\xC0\x9DB\x3\x2\x2\x2\xC2\x9DD\x3"+
		"\x2\x2\x2\xC4\x9E0\x3\x2\x2\x2\xC6\x9E4\x3\x2\x2\x2\xC8\x9EA\x3\x2\x2"+
		"\x2\xCA\x9F6\x3\x2\x2\x2\xCC\xA05\x3\x2\x2\x2\xCE\xA09\x3\x2\x2\x2\xD0"+
		"\xA30\x3\x2\x2\x2\xD2\xB2A\x3\x2\x2\x2\xD4\xB33\x3\x2\x2\x2\xD6\xB86\x3"+
		"\x2\x2\x2\xD8\xB8A\x3\x2\x2\x2\xDA\xB8C\x3\x2\x2\x2\xDC\xB99\x3\x2\x2"+
		"\x2\xDE\xB9F\x3\x2\x2\x2\xE0\xBA1\x3\x2\x2\x2\xE2\xBAE\x3\x2\x2\x2\xE4"+
		"\xBB0\x3\x2\x2\x2\xE6\xBBB\x3\x2\x2\x2\xE8\xBC3\x3\x2\x2\x2\xEA\xBC5\x3"+
		"\x2\x2\x2\xEC\xBE5\x3\x2\x2\x2\xEE\xBE7\x3\x2\x2\x2\xF0\xBF4\x3\x2\x2"+
		"\x2\xF2\xC01\x3\x2\x2\x2\xF4\xC14\x3\x2\x2\x2\xF6\xC16\x3\x2\x2\x2\xF8"+
		"\xC1A\x3\x2\x2\x2\xFA\xC2D\x3\x2\x2\x2\xFC\xC31\x3\x2\x2\x2\xFE\xC37\x3"+
		"\x2\x2\x2\x100\xC4C\x3\x2\x2\x2\x102\xC57\x3\x2\x2\x2\x104\xC5C\x3\x2"+
		"\x2\x2\x106\xC60\x3\x2\x2\x2\x108\xC7B\x3\x2\x2\x2\x10A\xC7E\x3\x2\x2"+
		"\x2\x10C\xC80\x3\x2\x2\x2\x10E\xC93\x3\x2\x2\x2\x110\xC96\x3\x2\x2\x2"+
		"\x112\xCA8\x3\x2\x2\x2\x114\xCAC\x3\x2\x2\x2\x116\xCBF\x3\x2\x2\x2\x118"+
		"\xCC1\x3\x2\x2\x2\x11A\xCCC\x3\x2\x2\x2\x11C\xCD7\x3\x2\x2\x2\x11E\xCF7"+
		"\x3\x2\x2\x2\x120\xD00\x3\x2\x2\x2\x122\xD04\x3\x2\x2\x2\x124\xD06\x3"+
		"\x2\x2\x2\x126\xD12\x3\x2\x2\x2\x128\xD19\x3\x2\x2\x2\x12A\xD27\x3\x2"+
		"\x2\x2\x12C\xD2F\x3\x2\x2\x2\x12E\xD33\x3\x2\x2\x2\x130\xD36\x3\x2\x2"+
		"\x2\x132\xD42\x3\x2\x2\x2\x134\xD69\x3\x2\x2\x2\x136\xD6B\x3\x2\x2\x2"+
		"\x138\xD6E\x3\x2\x2\x2\x13A\xD79\x3\x2\x2\x2\x13C\xD7B\x3\x2\x2\x2\x13E"+
		"\xD85\x3\x2\x2\x2\x140\xD8C\x3\x2\x2\x2\x142\xD8E\x3\x2\x2\x2\x144\xD90"+
		"\x3\x2\x2\x2\x146\xD92\x3\x2\x2\x2\x148\xD94\x3\x2\x2\x2\x14A\xDB4\x3"+
		"\x2\x2\x2\x14C\xDB6\x3\x2\x2\x2\x14E\xDB9\x3\x2\x2\x2\x150\xDED\x3\x2"+
		"\x2\x2\x152\xDF6\x3\x2\x2\x2\x154\xDF8\x3\x2\x2\x2\x156\xDFC\x3\x2\x2"+
		"\x2\x158\xDFF\x3\x2\x2\x2\x15A\xE18\x3\x2\x2\x2\x15C\xE27\x3\x2\x2\x2"+
		"\x15E\xE2E\x3\x2\x2\x2\x160\xE33\x3\x2\x2\x2\x162\xE53\x3\x2\x2\x2\x164"+
		"\xE57\x3\x2\x2\x2\x166\xE6A\x3\x2\x2\x2\x168\xE6F\x3\x2\x2\x2\x16A\xE86"+
		"\x3\x2\x2\x2\x16C\xE99\x3\x2\x2\x2\x16E\xECD\x3\x2\x2\x2\x170\xED0\x3"+
		"\x2\x2\x2\x172\xEED\x3\x2\x2\x2\x174\xF04\x3\x2\x2\x2\x176\xF13\x3\x2"+
		"\x2\x2\x178\xF17\x3\x2\x2\x2\x17A\xF23\x3\x2\x2\x2\x17C\xF5B\x3\x2\x2"+
		"\x2\x17E\x17F\a\xBF\x2\x2\x17F\x180\a\x141\x2\x2\x180\x185\a\x169\x2\x2"+
		"\x181\x182\a\xBE\x2\x2\x182\x183\a\x141\x2\x2\x183\x185\a\x169\x2\x2\x184"+
		"\x17E\x3\x2\x2\x2\x184\x181\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2\x186\x184"+
		"\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x18C\x3\x2\x2\x2\x188\x186\x3"+
		"\x2\x2\x2\x189\x18B\x5\x4\x3\x2\x18A\x189\x3\x2\x2\x2\x18B\x18E\x3\x2"+
		"\x2\x2\x18C\x18A\x3\x2\x2\x2\x18C\x18D\x3\x2\x2\x2\x18D\x18F\x3\x2\x2"+
		"\x2\x18E\x18C\x3\x2\x2\x2\x18F\x190\a\x2\x2\x3\x190\x3\x3\x2\x2\x2\x191"+
		"\x195\x5\x9EP\x2\x192\x195\x5\f\a\x2\x193\x195\x5\xD0i\x2\x194\x191\x3"+
		"\x2\x2\x2\x194\x192\x3\x2\x2\x2\x194\x193\x3\x2\x2\x2\x195\x5\x3\x2\x2"+
		"\x2\x196\x199\x5\x11E\x90\x2\x197\x199\x5\x120\x91\x2\x198\x196\x3\x2"+
		"\x2\x2\x198\x197\x3\x2\x2\x2\x199\x19A\x3\x2\x2\x2\x19A\x19B\a\x169\x2"+
		"\x2\x19B\x19C\a\x2\x2\x3\x19C\a\x3\x2\x2\x2\x19D\x19F\x5\f\a\x2\x19E\x19D"+
		"\x3\x2\x2\x2\x19F\x1A2\x3\x2\x2\x2\x1A0\x19E\x3\x2\x2\x2\x1A0\x1A1\x3"+
		"\x2\x2\x2\x1A1\x1A3\x3\x2\x2\x2\x1A2\x1A0\x3\x2\x2\x2\x1A3\x1A4\a\x2\x2"+
		"\x3\x1A4\t\x3\x2\x2\x2\x1A5\x1A7\x5\x9CO\x2\x1A6\x1A5\x3\x2\x2\x2\x1A7"+
		"\x1AA\x3\x2\x2\x2\x1A8\x1A6\x3\x2\x2\x2\x1A8\x1A9\x3\x2\x2\x2\x1A9\x1AB"+
		"\x3\x2\x2\x2\x1AA\x1A8\x3\x2\x2\x2\x1AB\x1AF\x5*\x16\x2\x1AC\x1AE\x5\f"+
		"\a\x2\x1AD\x1AC\x3\x2\x2\x2\x1AE\x1B1\x3\x2\x2\x2\x1AF\x1AD\x3\x2\x2\x2"+
		"\x1AF\x1B0\x3\x2\x2\x2\x1B0\x1B2\x3\x2\x2\x2\x1B1\x1AF\x3\x2\x2\x2\x1B2"+
		"\x1B3\a\x2\x2\x3\x1B3\v\x3\x2\x2\x2\x1B4\x1D5\x5@!\x2\x1B5\x1D5\x5\x44"+
		"#\x2\x1B6\x1B7\x6\a\x2\x2\x1B7\x1D5\x5\x16C\xB7\x2\x1B8\x1B9\x6\a\x3\x2"+
		"\x1B9\x1D5\x5\x14E\xA8\x2\x1BA\x1D5\x5P)\x2\x1BB\x1D5\x5R*\x2\x1BC\x1D5"+
		"\x5\x42\"\x2\x1BD\x1D5\x5T+\x2\x1BE\x1D5\x5Z.\x2\x1BF\x1D5\x5V,\x2\x1C0"+
		"\x1D5\x5\x98M\x2\x1C1\x1C2\x6\a\x4\x2\x1C2\x1D5\x5\x38\x1D\x2\x1C3\x1C4"+
		"\x6\a\x5\x2\x1C4\x1D5\x5<\x1F\x2\x1C5\x1D5\x5\x10\t\x2\x1C6\x1D5\x5.\x18"+
		"\x2\x1C7\x1D5\x5\x36\x1C\x2\x1C8\x1D5\x5\x30\x19\x2\x1C9\x1D5\x5\x1A\xE"+
		"\x2\x1CA\x1CB\x6\a\x6\x2\x1CB\x1D5\x5\x32\x1A\x2\x1CC\x1CD\x6\a\a\x2\x1CD"+
		"\x1D5\x5\x168\xB5\x2\x1CE\x1D5\x5x=\x2\x1CF\x1D5\x5\x80\x41\x2\x1D0\x1D5"+
		"\x5\x9CO\x2\x1D1\x1D2\x6\a\b\x2\x1D2\x1D5\x5\x1E\x10\x2\x1D3\x1D5\x5\xE"+
		"\b\x2\x1D4\x1B4\x3\x2\x2\x2\x1D4\x1B5\x3\x2\x2\x2\x1D4\x1B6\x3\x2\x2\x2"+
		"\x1D4\x1B8\x3\x2\x2\x2\x1D4\x1BA\x3\x2\x2\x2\x1D4\x1BB\x3\x2\x2\x2\x1D4"+
		"\x1BC\x3\x2\x2\x2\x1D4\x1BD\x3\x2\x2\x2\x1D4\x1BE\x3\x2\x2\x2\x1D4\x1BF"+
		"\x3\x2\x2\x2\x1D4\x1C0\x3\x2\x2\x2\x1D4\x1C1\x3\x2\x2\x2\x1D4\x1C3\x3"+
		"\x2\x2\x2\x1D4\x1C5\x3\x2\x2\x2\x1D4\x1C6\x3\x2\x2\x2\x1D4\x1C7\x3\x2"+
		"\x2\x2\x1D4\x1C8\x3\x2\x2\x2\x1D4\x1C9\x3\x2\x2\x2\x1D4\x1CA\x3\x2\x2"+
		"\x2\x1D4\x1CC\x3\x2\x2\x2\x1D4\x1CE\x3\x2\x2\x2\x1D4\x1CF\x3\x2\x2\x2"+
		"\x1D4\x1D0\x3\x2\x2\x2\x1D4\x1D1\x3\x2\x2\x2\x1D4\x1D3\x3\x2\x2\x2\x1D5"+
		"\r\x3\x2\x2\x2\x1D6\x1D8\a\x169\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\x1D9"+
		"\x3\x2\x2\x2\x1D9\x1D7\x3\x2\x2\x2\x1D9\x1DA\x3\x2\x2\x2\x1DA\xF\x3\x2"+
		"\x2\x2\x1DB\x1DD\x5\x8EH\x2\x1DC\x1DB\x3\x2\x2\x2\x1DC\x1DD\x3\x2\x2\x2"+
		"\x1DD\x1DF\x3\x2\x2\x2\x1DE\x1E0\x5,\x17\x2\x1DF\x1DE\x3\x2\x2\x2\x1DF"+
		"\x1E0\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1E3\t\x2\x2\x2\x1E2\x1E1"+
		"\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E4\x3\x2\x2\x2\x1E4\x1E5\x5"+
		"\x12\n\x2\x1E5\x1E7\x5\x14\v\x2\x1E6\x1E8\t\x3\x2\x2\x1E7\x1E6\x3\x2\x2"+
		"\x2\x1E7\x1E8\x3\x2\x2\x2\x1E8\x1E9\x3\x2\x2\x2\x1E9\x1EA\x5\x16\f\x2"+
		"\x1EA\x1EB\x5\xE\b\x2\x1EB\x1F2\x5*\x16\x2\x1EC\x1F0\t\x4\x2\x2\x1ED\x1EE"+
		"\a\x19\x2\x2\x1EE\x1F0\x5\x12\n\x2\x1EF\x1EC\x3\x2\x2\x2\x1EF\x1ED\x3"+
		"\x2\x2\x2\x1F0\x1F1\x3\x2\x2\x2\x1F1\x1F3\a\x169\x2\x2\x1F2\x1EF\x3\x2"+
		"\x2\x2\x1F2\x1F3\x3\x2\x2\x2\x1F3\x11\x3\x2\x2\x2\x1F4\x1F5\t\x5\x2\x2"+
		"\x1F5\x13\x3\x2\x2\x2\x1F6\x1F8\x5\x13E\xA0\x2\x1F7\x1F9\x5H%\x2\x1F8"+
		"\x1F7\x3\x2\x2\x2\x1F8\x1F9\x3\x2\x2\x2\x1F9\x1FB\x3\x2\x2\x2\x1FA\x1FC"+
		"\x5$\x13\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2\x1FC\x1FF\x3\x2"+
		"\x2\x2\x1FD\x1FE\a\x6\x2\x2\x1FE\x200\x5\x100\x81\x2\x1FF\x1FD\x3\x2\x2"+
		"\x2\x1FF\x200\x3\x2\x2\x2\x200\x204\x3\x2\x2\x2\x201\x203\x5L\'\x2\x202"+
		"\x201\x3\x2\x2\x2\x203\x206\x3\x2\x2\x2\x204\x202\x3\x2\x2\x2\x204\x205"+
		"\x3\x2\x2\x2\x205\x208\x3\x2\x2\x2\x206\x204\x3\x2\x2\x2\x207\x209\x5"+
		"\x18\r\x2\x208\x207\x3\x2\x2\x2\x208\x209\x3\x2\x2\x2\x209\x20C\x3\x2"+
		"\x2\x2\x20A\x20B\a\x15F\x2\x2\x20B\x20D\x5\xD0i\x2\x20C\x20A\x3\x2\x2"+
		"\x2\x20C\x20D\x3\x2\x2\x2\x20D\x15\x3\x2\x2\x2\x20E\x20F\a\x1E\x2\x2\x20F"+
		"\x211\a.\x2\x2\x210\x20E\x3\x2\x2\x2\x210\x211\x3\x2\x2\x2\x211\x214\x3"+
		"\x2\x2\x2\x212\x213\a\x14\x2\x2\x213\x215\a\x141\x2\x2\x214\x212\x3\x2"+
		"\x2\x2\x214\x215\x3\x2\x2\x2\x215\x17\x3\x2\x2\x2\x216\x217\t\x6\x2\x2"+
		"\x217\x19\x3\x2\x2\x2\x218\x21A\x5\x8EH\x2\x219\x218\x3\x2\x2\x2\x219"+
		"\x21A\x3\x2\x2\x2\x21A\x21C\x3\x2\x2\x2\x21B\x21D\x5,\x17\x2\x21C\x21B"+
		"\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21E\x3\x2\x2\x2\x21E\x21F\a\x13"+
		"\x2\x2\x21F\x220\x5\x12\n\x2\x220\x222\x5\x13E\xA0\x2\x221\x223\x5$\x13"+
		"\x2\x222\x221\x3\x2\x2\x2\x222\x223\x3\x2\x2\x2\x223\x226\x3\x2\x2\x2"+
		"\x224\x225\a\x6\x2\x2\x225\x227\x5\x100\x81\x2\x226\x224\x3\x2\x2\x2\x226"+
		"\x227\x3\x2\x2\x2\x227\x229\x3\x2\x2\x2\x228\x22A\x5\x1C\xF\x2\x229\x228"+
		"\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22B\x3\x2\x2\x2\x22B\x22C\a\x128"+
		"\x2\x2\x22C\x22F\x5\x140\xA1\x2\x22D\x22E\a\x12E\x2\x2\x22E\x230\x5\x140"+
		"\xA1\x2\x22F\x22D\x3\x2\x2\x2\x22F\x230\x3\x2\x2\x2\x230\x23E\x3\x2\x2"+
		"\x2\x231\x23F\a\x13D\x2\x2\x232\x233\a\x12E\x2\x2\x233\x235\x5\x140\xA1"+
		"\x2\x234\x236\a\x12C\x2\x2\x235\x234\x3\x2\x2\x2\x235\x236\x3\x2\x2\x2"+
		"\x236\x238\x3\x2\x2\x2\x237\x239\a\x13A\x2\x2\x238\x237\x3\x2\x2\x2\x238"+
		"\x239\x3\x2\x2\x2\x239\x23C\x3\x2\x2\x2\x23A\x23B\a\xF8\x2\x2\x23B\x23D"+
		"\a\x13A\x2\x2\x23C\x23A\x3\x2\x2\x2\x23C\x23D\x3\x2\x2\x2\x23D\x23F\x3"+
		"\x2\x2\x2\x23E\x231\x3\x2\x2\x2\x23E\x232\x3\x2\x2\x2\x23F\x241\x3\x2"+
		"\x2\x2\x240\x242\t\a\x2\x2\x241\x240\x3\x2\x2\x2\x241\x242\x3\x2\x2\x2"+
		"\x242\x243\x3\x2\x2\x2\x243\x244\a\x169\x2\x2\x244\x1B\x3\x2\x2\x2\x245"+
		"\x246\t\x6\x2\x2\x246\x1D\x3\x2\x2\x2\x247\x249\x5\x8EH\x2\x248\x247\x3"+
		"\x2\x2\x2\x248\x249\x3\x2\x2\x2\x249\x24B\x3\x2\x2\x2\x24A\x24C\x5,\x17"+
		"\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2\x24C\x24D\x3\x2\x2\x2"+
		"\x24D\x24F\a\x10\x2\x2\x24E\x250\x5\x100\x81\x2\x24F\x24E\x3\x2\x2\x2"+
		"\x24F\x250\x3\x2\x2\x2\x250\x251\x3\x2\x2\x2\x251\x252\x5\x13E\xA0\x2"+
		"\x252\x253\a-\x2\x2\x253\x256\x5\x13E\xA0\x2\x254\x255\a\x12E\x2\x2\x255"+
		"\x257\x5\x140\xA1\x2\x256\x254\x3\x2\x2\x2\x256\x257\x3\x2\x2\x2\x257"+
		"\x25A\x3\x2\x2\x2\x258\x259\a\x6\x2\x2\x259\x25B\x5\x13E\xA0\x2\x25A\x258"+
		"\x3\x2\x2\x2\x25A\x25B\x3\x2\x2\x2\x25B\x264\x3\x2\x2\x2\x25C\x261\x5"+
		" \x11\x2\x25D\x25E\a\x129\x2\x2\x25E\x260\x5 \x11\x2\x25F\x25D\x3\x2\x2"+
		"\x2\x260\x263\x3\x2\x2\x2\x261\x25F\x3\x2\x2\x2\x261\x262\x3\x2\x2\x2"+
		"\x262\x265\x3\x2\x2\x2\x263\x261\x3\x2\x2\x2\x264\x25C\x3\x2\x2\x2\x264"+
		"\x265\x3\x2\x2\x2\x265\x266\x3\x2\x2\x2\x266\x267\a\x169\x2\x2\x267\x1F"+
		"\x3\x2\x2\x2\x268\x26A\x5\x8EH\x2\x269\x268\x3\x2\x2\x2\x269\x26A\x3\x2"+
		"\x2\x2\x26A\x26B\x3\x2\x2\x2\x26B\x26D\x5\x100\x81\x2\x26C\x26E\a\x12C"+
		"\x2\x2\x26D\x26C\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E\x270\x3\x2\x2"+
		"\x2\x26F\x271\x5\x13E\xA0\x2\x270\x26F\x3\x2\x2\x2\x270\x271\x3\x2\x2"+
		"\x2\x271!\x3\x2\x2\x2\x272\x273\a\x13\x2\x2\x273\x275\t\b\x2\x2\x274\x276"+
		"\n\t\x2\x2\x275\x274\x3\x2\x2\x2\x275\x276\x3\x2\x2\x2\x276\x277\x3\x2"+
		"\x2\x2\x277\x278\a\x169\x2\x2\x278#\x3\x2\x2\x2\x279\x282\a\x122\x2\x2"+
		"\x27A\x27F\x5&\x14\x2\x27B\x27C\a\x129\x2\x2\x27C\x27E\x5&\x14\x2\x27D"+
		"\x27B\x3\x2\x2\x2\x27E\x281\x3\x2\x2\x2\x27F\x27D\x3\x2\x2\x2\x27F\x280"+
		"\x3\x2\x2\x2\x280\x283\x3\x2\x2\x2\x281\x27F\x3\x2\x2\x2\x282\x27A\x3"+
		"\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x284\x3\x2\x2\x2\x284\x285\a\x123"+
		"\x2\x2\x285%\x3\x2\x2\x2\x286\x288\x5\x8EH\x2\x287\x286\x3\x2\x2\x2\x287"+
		"\x288\x3\x2\x2\x2\x288\x28A\x3\x2\x2\x2\x289\x28B\a>\x2\x2\x28A\x289\x3"+
		"\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28C\x3\x2\x2\x2\x28C\x290\x5\x13E"+
		"\xA0\x2\x28D\x28E\x5\xCEh\x2\x28E\x28F\x5\xD0i\x2\x28F\x291\x3\x2\x2\x2"+
		"\x290\x28D\x3\x2\x2\x2\x290\x291\x3\x2\x2\x2\x291\x295\x3\x2\x2\x2\x292"+
		"\x293\x5(\x15\x2\x293\x294\x5\x100\x81\x2\x294\x296\x3\x2\x2\x2\x295\x292"+
		"\x3\x2\x2\x2\x295\x296\x3\x2\x2\x2\x296\x299\x3\x2\x2\x2\x297\x299\a\x131"+
		"\x2\x2\x298\x287\x3\x2\x2\x2\x298\x297\x3\x2\x2\x2\x299\'\x3\x2\x2\x2"+
		"\x29A\x29C\t\n\x2\x2\x29B\x29D\aU\x2\x2\x29C\x29B\x3\x2\x2\x2\x29C\x29D"+
		"\x3\x2\x2\x2\x29D)\x3\x2\x2\x2\x29E\x2A0\x5\x9EP\x2\x29F\x29E\x3\x2\x2"+
		"\x2\x2A0\x2A3\x3\x2\x2\x2\x2A1\x29F\x3\x2\x2\x2\x2A1\x2A2\x3\x2\x2\x2"+
		"\x2A2+\x3\x2\x2\x2\x2A3\x2A1\x3\x2\x2\x2\x2A4\x2A6\t\v\x2\x2\x2A5\x2A4"+
		"\x3\x2\x2\x2\x2A6\x2A7\x3\x2\x2\x2\x2A7\x2A5\x3\x2\x2\x2\x2A7\x2A8\x3"+
		"\x2\x2\x2\x2A8-\x3\x2\x2\x2\x2A9\x2AB\a#\x2\x2\x2AA\x2A9\x3\x2\x2\x2\x2AA"+
		"\x2AB\x3\x2\x2\x2\x2AB\x2AC\x3\x2\x2\x2\x2AC\x2AE\aJ\x2\x2\x2AD\x2AF\a"+
		"\x41\x2\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE\x2AF\x3\x2\x2\x2\x2AF\x2B1\x3\x2"+
		"\x2\x2\x2B0\x2B2\a\x93\x2\x2\x2B1\x2B0\x3\x2\x2\x2\x2B1\x2B2\x3\x2\x2"+
		"\x2\x2B2\x2B6\x3\x2\x2\x2\x2B3\x2B4\x5\xFA~\x2\x2B4\x2B5\x5\xCEh\x2\x2B5"+
		"\x2B7\x3\x2\x2\x2\x2B6\x2B3\x3\x2\x2\x2\x2B6\x2B7\x3\x2\x2\x2\x2B7\x2B8"+
		"\x3\x2\x2\x2\x2B8\x2B9\x5\xF2z\x2\x2B9\x2BA\a\x169\x2\x2\x2BA/\x3\x2\x2"+
		"\x2\x2BB\x2BD\x5\x8EH\x2\x2BC\x2BB\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD"+
		"\x2BF\x3\x2\x2\x2\x2BE\x2C0\x5,\x17\x2\x2BF\x2BE\x3\x2\x2\x2\x2BF\x2C0"+
		"\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2\x2C1\x2C3\a#\x2\x2\x2C2\x2C4\aU\x2"+
		"\x2\x2C3\x2C2\x3\x2\x2\x2\x2C3\x2C4\x3\x2\x2\x2\x2C4\x2C5\x3\x2\x2\x2"+
		"\x2C5\x2CA\x5\x64\x33\x2\x2C6\x2C7\a\x129\x2\x2\x2C7\x2C9\x5\x64\x33\x2"+
		"\x2C8\x2C6\x3\x2\x2\x2\x2C9\x2CC\x3\x2\x2\x2\x2CA\x2C8\x3\x2\x2\x2\x2CA"+
		"\x2CB\x3\x2\x2\x2\x2CB\x2CD\x3\x2\x2\x2\x2CC\x2CA\x3\x2\x2\x2\x2CD\x2CE"+
		"\a\x169\x2\x2\x2CE\x2E1\x3\x2\x2\x2\x2CF\x2D1\x5\x8EH\x2\x2D0\x2CF\x3"+
		"\x2\x2\x2\x2D0\x2D1\x3\x2\x2\x2\x2D1\x2D2\x3\x2\x2\x2\x2D2\x2D4\a\x41"+
		"\x2\x2\x2D3\x2D5\aU\x2\x2\x2D4\x2D3\x3\x2\x2\x2\x2D4\x2D5\x3\x2\x2\x2"+
		"\x2D5\x2D6\x3\x2\x2\x2\x2D6\x2DB\x5\x64\x33\x2\x2D7\x2D8\a\x129\x2\x2"+
		"\x2D8\x2DA\x5\x64\x33\x2\x2D9\x2D7\x3\x2\x2\x2\x2DA\x2DD\x3\x2\x2\x2\x2DB"+
		"\x2D9\x3\x2\x2\x2\x2DB\x2DC\x3\x2\x2\x2\x2DC\x2DE\x3\x2\x2\x2\x2DD\x2DB"+
		"\x3\x2\x2\x2\x2DE\x2DF\a\x169\x2\x2\x2DF\x2E1\x3\x2\x2\x2\x2E0\x2BC\x3"+
		"\x2\x2\x2\x2E0\x2D0\x3\x2\x2\x2\x2E1\x31\x3\x2\x2\x2\x2E2\x2E4\x5\x8E"+
		"H\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3\x2E4\x3\x2\x2\x2\x2E4\x2E6\x3\x2\x2\x2"+
		"\x2E5\x2E7\x5\x8CG\x2\x2E6\x2E5\x3\x2\x2\x2\x2E6\x2E7\x3\x2\x2\x2\x2E7"+
		"\x2E8\x3\x2\x2\x2\x2E8\x2EA\x5\x34\x1B\x2\x2E9\x2EB\x5\xF0y\x2\x2EA\x2E9"+
		"\x3\x2\x2\x2\x2EA\x2EB\x3\x2\x2\x2\x2EB\x2EC\x3\x2\x2\x2\x2EC\x2EF\x5"+
		"\x14\v\x2\x2ED\x2EE\a\xE\x2\x2\x2EE\x2F0\x5\x13E\xA0\x2\x2EF\x2ED\x3\x2"+
		"\x2\x2\x2EF\x2F0\x3\x2\x2\x2\x2F0\x2F1\x3\x2\x2\x2\x2F1\x2F2\x5\x16\f"+
		"\x2\x2F2\x2F3\x5\xE\b\x2\x2F3\x2F8\x5*\x16\x2\x2F4\x2F5\a\x19\x2\x2\x2F5"+
		"\x2F6\x5\x34\x1B\x2\x2F6\x2F7\a\x169\x2\x2\x2F7\x2F9\x3\x2\x2\x2\x2F8"+
		"\x2F4\x3\x2\x2\x2\x2F8\x2F9\x3\x2\x2\x2\x2F9\x33\x3\x2\x2\x2\x2FA\x2FB"+
		"\t\f\x2\x2\x2FB\x35\x3\x2\x2\x2\x2FC\x2FE\x5,\x17\x2\x2FD\x2FC\x3\x2\x2"+
		"\x2\x2FD\x2FE\x3\x2\x2\x2\x2FE\x2FF\x3\x2\x2\x2\x2FF\x300\a\x11\x2\x2"+
		"\x300\x301\x5\x13E\xA0\x2\x301\x302\x5\xCEh\x2\x302\x305\x5\xD0i\x2\x303"+
		"\x304\a\x6\x2\x2\x304\x306\x5\x100\x81\x2\x305\x303\x3\x2\x2\x2\x305\x306"+
		"\x3\x2\x2\x2\x306\x307\x3\x2\x2\x2\x307\x308\a\x169\x2\x2\x308\x37\x3"+
		"\x2\x2\x2\x309\x30B\x5> \x2\x30A\x309\x3\x2\x2\x2\x30A\x30B\x3\x2\x2\x2"+
		"\x30B\x30C\x3\x2\x2\x2\x30C\x30E\au\x2\x2\x30D\x30F\x5\xF0y\x2\x30E\x30D"+
		"\x3\x2\x2\x2\x30E\x30F\x3\x2\x2\x2\x30F\x310\x3\x2\x2\x2\x310\x313\x5"+
		"\x13E\xA0\x2\x311\x312\a\x5\x2\x2\x312\x314\a\x13A\x2\x2\x313\x311\x3"+
		"\x2\x2\x2\x313\x314\x3\x2\x2\x2\x314\x315\x3\x2\x2\x2\x315\x317\x5\xE"+
		"\b\x2\x316\x318\x5:\x1E\x2\x317\x316\x3\x2\x2\x2\x318\x319\x3\x2\x2\x2"+
		"\x319\x317\x3\x2\x2\x2\x319\x31A\x3\x2\x2\x2\x31A\x31E\x3\x2\x2\x2\x31B"+
		"\x31C\a\x19\x2\x2\x31C\x31D\au\x2\x2\x31D\x31F\a\x169\x2\x2\x31E\x31B"+
		"\x3\x2\x2\x2\x31E\x31F\x3\x2\x2\x2\x31F\x39\x3\x2\x2\x2\x320\x321\a\x30"+
		"\x2\x2\x321\x322\a\x12\x2\x2\x322\x323\x5\x13E\xA0\x2\x323\x324\a\x126"+
		"\x2\x2\x324\x325\x5\x66\x34\x2\x325\x328\a\x127\x2\x2\x326\x327\t\r\x2"+
		"\x2\x327\x329\x5\x100\x81\x2\x328\x326\x3\x2\x2\x2\x328\x329\x3\x2\x2"+
		"\x2\x329\x32A\x3\x2\x2\x2\x32A\x32B\x5\xE\b\x2\x32B\x335\x3\x2\x2\x2\x32C"+
		"\x32D\a\x30\x2\x2\x32D\x330\x5\x13E\xA0\x2\x32E\x32F\t\r\x2\x2\x32F\x331"+
		"\x5\x100\x81\x2\x330\x32E\x3\x2\x2\x2\x330\x331\x3\x2\x2\x2\x331\x332"+
		"\x3\x2\x2\x2\x332\x333\x5\xE\b\x2\x333\x335\x3\x2\x2\x2\x334\x320\x3\x2"+
		"\x2\x2\x334\x32C\x3\x2\x2\x2\x335;\x3\x2\x2\x2\x336\x338\x5> \x2\x337"+
		"\x336\x3\x2\x2\x2\x337\x338\x3\x2\x2\x2\x338\x339\x3\x2\x2\x2\x339\x33B"+
		"\aH\x2\x2\x33A\x33C\x5\xF0y\x2\x33B\x33A\x3\x2\x2\x2\x33B\x33C\x3\x2\x2"+
		"\x2\x33C\x33D\x3\x2\x2\x2\x33D\x33E\x5\x13E\xA0\x2\x33E\x340\x5\xE\b\x2"+
		"\x33F\x341\x5:\x1E\x2\x340\x33F\x3\x2\x2\x2\x341\x342\x3\x2\x2\x2\x342"+
		"\x340\x3\x2\x2\x2\x342\x343\x3\x2\x2\x2\x343\x347\x3\x2\x2\x2\x344\x345"+
		"\a\x19\x2\x2\x345\x346\aH\x2\x2\x346\x348\a\x169\x2\x2\x347\x344\x3\x2"+
		"\x2\x2\x347\x348\x3\x2\x2\x2\x348=\x3\x2\x2\x2\x349\x34B\t\xE\x2\x2\x34A"+
		"\x349\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\x34A\x3\x2\x2\x2\x34C\x34D"+
		"\x3\x2\x2\x2\x34D?\x3\x2\x2\x2\x34E\x34F\a\t\x2\x2\x34F\x350\a\x65\x2"+
		"\x2\x350\x351\x5\xF2z\x2\x351\x355\x5\xE\b\x2\x352\x354\x5\f\a\x2\x353"+
		"\x352\x3\x2\x2\x2\x354\x357\x3\x2\x2\x2\x355\x353\x3\x2\x2\x2\x355\x356"+
		"\x3\x2\x2\x2\x356\x35B\x3\x2\x2\x2\x357\x355\x3\x2\x2\x2\x358\x359\a\x19"+
		"\x2\x2\x359\x35A\a\x65\x2\x2\x35A\x35C\a\x169\x2\x2\x35B\x358\x3\x2\x2"+
		"\x2\x35B\x35C\x3\x2\x2\x2\x35C\x367\x3\x2\x2\x2\x35D\x35E\a\x65\x2\x2"+
		"\x35E\x35F\x5\xF2z\x2\x35F\x363\x5\xE\b\x2\x360\x362\x5\f\a\x2\x361\x360"+
		"\x3\x2\x2\x2\x362\x365\x3\x2\x2\x2\x363\x361\x3\x2\x2\x2\x363\x364\x3"+
		"\x2\x2\x2\x364\x367\x3\x2\x2\x2\x365\x363\x3\x2\x2\x2\x366\x34E\x3\x2"+
		"\x2\x2\x366\x35D\x3\x2\x2\x2\x367\x41\x3\x2\x2\x2\x368\x36A\x5\x8EH\x2"+
		"\x369\x368\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A\x36C\x3\x2\x2\x2\x36B"+
		"\x36D\x5\x46$\x2\x36C\x36B\x3\x2\x2\x2\x36C\x36D\x3\x2\x2\x2\x36D\x36E"+
		"\x3\x2\x2\x2\x36E\x370\a\x62\x2\x2\x36F\x371\x5\xF0y\x2\x370\x36F\x3\x2"+
		"\x2\x2\x370\x371\x3\x2\x2\x2\x371\x372\x3\x2\x2\x2\x372\x374\x5\x13E\xA0"+
		"\x2\x373\x375\x5H%\x2\x374\x373\x3\x2\x2\x2\x374\x375\x3\x2\x2\x2\x375"+
		"\x378\x3\x2\x2\x2\x376\x377\t\xF\x2\x2\x377\x379\x5\x100\x81\x2\x378\x376"+
		"\x3\x2\x2\x2\x378\x379\x3\x2\x2\x2\x379\x37E\x3\x2\x2\x2\x37A\x37B\a\x129"+
		"\x2\x2\x37B\x37D\x5\x100\x81\x2\x37C\x37A\x3\x2\x2\x2\x37D\x380\x3\x2"+
		"\x2\x2\x37E\x37C\x3\x2\x2\x2\x37E\x37F\x3\x2\x2\x2\x37F\x384\x3\x2\x2"+
		"\x2\x380\x37E\x3\x2\x2\x2\x381\x383\x5L\'\x2\x382\x381\x3\x2\x2\x2\x383"+
		"\x386\x3\x2\x2\x2\x384\x382\x3\x2\x2\x2\x384\x385\x3\x2\x2\x2\x385\x387"+
		"\x3\x2\x2\x2\x386\x384\x3\x2\x2\x2\x387\x38B\x5\xE\b\x2\x388\x38A\x5v"+
		"<\x2\x389\x388\x3\x2\x2\x2\x38A\x38D\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2"+
		"\x38B\x38C\x3\x2\x2\x2\x38C\x38E\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38E"+
		"\x38F\a\x19\x2\x2\x38F\x390\a\x62\x2\x2\x390\x391\a\x169\x2\x2\x391\x43"+
		"\x3\x2\x2\x2\x392\x394\x5\x8EH\x2\x393\x392\x3\x2\x2\x2\x393\x394\x3\x2"+
		"\x2\x2\x394\x396\x3\x2\x2\x2\x395\x397\x5\x46$\x2\x396\x395\x3\x2\x2\x2"+
		"\x396\x397\x3\x2\x2\x2\x397\x398\x3\x2\x2\x2\x398\x39A\a\xE\x2\x2\x399"+
		"\x39B\x5\xF0y\x2\x39A\x399\x3\x2\x2\x2\x39A\x39B\x3\x2\x2\x2\x39B\x39C"+
		"\x3\x2\x2\x2\x39C\x39E\x5\x13E\xA0\x2\x39D\x39F\x5H%\x2\x39E\x39D\x3\x2"+
		"\x2\x2\x39E\x39F\x3\x2\x2\x2\x39F\x3A2\x3\x2\x2\x2\x3A0\x3A1\a\'\x2\x2"+
		"\x3A1\x3A3\x5\x100\x81\x2\x3A2\x3A0\x3\x2\x2\x2\x3A2\x3A3\x3\x2\x2\x2"+
		"\x3A3\x3AD\x3\x2\x2\x2\x3A4\x3A5\a^\x2\x2\x3A5\x3AA\x5\x100\x81\x2\x3A6"+
		"\x3A7\a\x129\x2\x2\x3A7\x3A9\x5\x100\x81\x2\x3A8\x3A6\x3\x2\x2\x2\x3A9"+
		"\x3AC\x3\x2\x2\x2\x3AA\x3A8\x3\x2\x2\x2\x3AA\x3AB\x3\x2\x2\x2\x3AB\x3AE"+
		"\x3\x2\x2\x2\x3AC\x3AA\x3\x2\x2\x2\x3AD\x3A4\x3\x2\x2\x2\x3AD\x3AE\x3"+
		"\x2\x2\x2\x3AE\x3B2\x3\x2\x2\x2\x3AF\x3B1\x5L\'\x2\x3B0\x3AF\x3\x2\x2"+
		"\x2\x3B1\x3B4\x3\x2\x2\x2\x3B2\x3B0\x3\x2\x2\x2\x3B2\x3B3\x3\x2\x2\x2"+
		"\x3B3\x3B5\x3\x2\x2\x2\x3B4\x3B2\x3\x2\x2\x2\x3B5\x3B9\x5\xE\b\x2\x3B6"+
		"\x3B8\x5v<\x2\x3B7\x3B6\x3\x2\x2\x2\x3B8\x3BB\x3\x2\x2\x2\x3B9\x3B7\x3"+
		"\x2\x2\x2\x3B9\x3BA\x3\x2\x2\x2\x3BA\x3BC\x3\x2\x2\x2\x3BB\x3B9\x3\x2"+
		"\x2\x2\x3BC\x3BD\a\x19\x2\x2\x3BD\x3BE\a\xE\x2\x2\x3BE\x3BF\a\x169\x2"+
		"\x2\x3BF\x45\x3\x2\x2\x2\x3C0\x3C2\t\x10\x2\x2\x3C1\x3C0\x3\x2\x2\x2\x3C2"+
		"\x3C3\x3\x2\x2\x2\x3C3\x3C1\x3\x2\x2\x2\x3C3\x3C4\x3\x2\x2\x2\x3C4G\x3"+
		"\x2\x2\x2\x3C5\x3C6\a\xF0\x2\x2\x3C6\x3CE\x5J&\x2\x3C7\x3C9\a\x129\x2"+
		"\x2\x3C8\x3CA\x5\x8EH\x2\x3C9\x3C8\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA"+
		"\x3CB\x3\x2\x2\x2\x3CB\x3CD\x5J&\x2\x3CC\x3C7\x3\x2\x2\x2\x3CD\x3D0\x3"+
		"\x2\x2\x2\x3CE\x3CC\x3\x2\x2\x2\x3CE\x3CF\x3\x2\x2\x2\x3CF\x3D1\x3\x2"+
		"\x2\x2\x3D0\x3CE\x3\x2\x2\x2\x3D1\x3D2\a\xF2\x2\x2\x3D2I\x3\x2\x2\x2\x3D3"+
		"\x3D5\x5\x8EH\x2\x3D4\x3D3\x3\x2\x2\x2\x3D4\x3D5\x3\x2\x2\x2\x3D5\x3D7"+
		"\x3\x2\x2\x2\x3D6\x3D8\t\x11\x2\x2\x3D7\x3D6\x3\x2\x2\x2\x3D7\x3D8\x3"+
		"\x2\x2\x2\x3D8\x3D9\x3\x2\x2\x2\x3D9\x3DA\x5\x13E\xA0\x2\x3DAK\x3\x2\x2"+
		"\x2\x3DB\x3DC\a\x97\x2\x2\x3DC\x3DD\x5\xFA~\x2\x3DD\x3DE\a,\x2\x2\x3DE"+
		"\x3E3\x5N(\x2\x3DF\x3E0\a\x129\x2\x2\x3E0\x3E2\x5N(\x2\x3E1\x3DF\x3\x2"+
		"\x2\x2\x3E2\x3E5\x3\x2\x2\x2\x3E3\x3E1\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2"+
		"\x2\x3E4M\x3\x2\x2\x2\x3E5\x3E3\x3\x2\x2\x2\x3E6\x3EC\t\x12\x2\x2\x3E7"+
		"\x3EC\x5\x104\x83\x2\x3E8\x3E9\a\x66\x2\x2\x3E9\x3EA\a\x122\x2\x2\x3EA"+
		"\x3EC\a\x123\x2\x2\x3EB\x3E6\x3\x2\x2\x2\x3EB\x3E7\x3\x2\x2\x2\x3EB\x3E8"+
		"\x3\x2\x2\x2\x3ECO\x3\x2\x2\x2\x3ED\x3EF\x5\x8EH\x2\x3EE\x3ED\x3\x2\x2"+
		"\x2\x3EE\x3EF\x3\x2\x2\x2\x3EF\x3F1\x3\x2\x2\x2\x3F0\x3F2\x5\x46$\x2\x3F1"+
		"\x3F0\x3\x2\x2\x2\x3F1\x3F2\x3\x2\x2\x2\x3F2\x3F3\x3\x2\x2\x2\x3F3\x3F5"+
		"\ao\x2\x2\x3F4\x3F6\x5\xF0y\x2\x3F5\x3F4\x3\x2\x2\x2\x3F5\x3F6\x3\x2\x2"+
		"\x2\x3F6\x3F7\x3\x2\x2\x2\x3F7\x3F9\x5\x13E\xA0\x2\x3F8\x3FA\x5H%\x2\x3F9"+
		"\x3F8\x3\x2\x2\x2\x3F9\x3FA\x3\x2\x2\x2\x3FA\x404\x3\x2\x2\x2\x3FB\x3FC"+
		"\a^\x2\x2\x3FC\x401\x5\x100\x81\x2\x3FD\x3FE\a\x129\x2\x2\x3FE\x400\x5"+
		"\x100\x81\x2\x3FF\x3FD\x3\x2\x2\x2\x400\x403\x3\x2\x2\x2\x401\x3FF\x3"+
		"\x2\x2\x2\x401\x402\x3\x2\x2\x2\x402\x405\x3\x2\x2\x2\x403\x401\x3\x2"+
		"\x2\x2\x404\x3FB\x3\x2\x2\x2\x404\x405\x3\x2\x2\x2\x405\x409\x3\x2\x2"+
		"\x2\x406\x408\x5L\'\x2\x407\x406\x3\x2\x2\x2\x408\x40B\x3\x2\x2\x2\x409"+
		"\x407\x3\x2\x2\x2\x409\x40A\x3\x2\x2\x2\x40A\x40C\x3\x2\x2\x2\x40B\x409"+
		"\x3\x2\x2\x2\x40C\x410\x5\xE\b\x2\x40D\x40F\x5v<\x2\x40E\x40D\x3\x2\x2"+
		"\x2\x40F\x412\x3\x2\x2\x2\x410\x40E\x3\x2\x2\x2\x410\x411\x3\x2\x2\x2"+
		"\x411\x413\x3\x2\x2\x2\x412\x410\x3\x2\x2\x2\x413\x414\a\x19\x2\x2\x414"+
		"\x415\ao\x2\x2\x415\x416\a\x169\x2\x2\x416Q\x3\x2\x2\x2\x417\x419\x5\x8E"+
		"H\x2\x418\x417\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x41B\x3\x2\x2\x2"+
		"\x41A\x41C\x5\x46$\x2\x41B\x41A\x3\x2\x2\x2\x41B\x41C\x3\x2\x2\x2\x41C"+
		"\x41D\x3\x2\x2\x2\x41D\x420\a\x9A\x2\x2\x41E\x421\ao\x2\x2\x41F\x421\a"+
		"\xE\x2\x2\x420\x41E\x3\x2\x2\x2\x420\x41F\x3\x2\x2\x2\x420\x421\x3\x2"+
		"\x2\x2\x421\x423\x3\x2\x2\x2\x422\x424\x5\xF0y\x2\x423\x422\x3\x2\x2\x2"+
		"\x423\x424\x3\x2\x2\x2\x424\x425\x3\x2\x2\x2\x425\x427\x5\x13E\xA0\x2"+
		"\x426\x428\x5H%\x2\x427\x426\x3\x2\x2\x2\x427\x428\x3\x2\x2\x2\x428\x42B"+
		"\x3\x2\x2\x2\x429\x42A\a\'\x2\x2\x42A\x42C\x5\x100\x81\x2\x42B\x429\x3"+
		"\x2\x2\x2\x42B\x42C\x3\x2\x2\x2\x42C\x436\x3\x2\x2\x2\x42D\x42E\a^\x2"+
		"\x2\x42E\x433\x5\x100\x81\x2\x42F\x430\a\x129\x2\x2\x430\x432\x5\x100"+
		"\x81\x2\x431\x42F\x3\x2\x2\x2\x432\x435\x3\x2\x2\x2\x433\x431\x3\x2\x2"+
		"\x2\x433\x434\x3\x2\x2\x2\x434\x437\x3\x2\x2\x2\x435\x433\x3\x2\x2\x2"+
		"\x436\x42D\x3\x2\x2\x2\x436\x437\x3\x2\x2\x2\x437\x43B\x3\x2\x2\x2\x438"+
		"\x43A\x5L\'\x2\x439\x438\x3\x2\x2\x2\x43A\x43D\x3\x2\x2\x2\x43B\x439\x3"+
		"\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43E\x3\x2\x2\x2\x43D\x43B\x3\x2"+
		"\x2\x2\x43E\x442\x5\xE\b\x2\x43F\x441\x5v<\x2\x440\x43F\x3\x2\x2\x2\x441"+
		"\x444\x3\x2\x2\x2\x442\x440\x3\x2\x2\x2\x442\x443\x3\x2\x2\x2\x443\x445"+
		"\x3\x2\x2\x2\x444\x442\x3\x2\x2\x2\x445\x446\a\x19\x2\x2\x446\x447\a\x9A"+
		"\x2\x2\x447\x448\a\x169\x2\x2\x448S\x3\x2\x2\x2\x449\x44B\x5\x8EH\x2\x44A"+
		"\x449\x3\x2\x2\x2\x44A\x44B\x3\x2\x2\x2\x44B\x44D\x3\x2\x2\x2\x44C\x44E"+
		"\x5\x46$\x2\x44D\x44C\x3\x2\x2\x2\x44D\x44E\x3\x2\x2\x2\x44E\x44F\x3\x2"+
		"\x2\x2\x44F\x451\aW\x2\x2\x450\x452\x5\xF0y\x2\x451\x450\x3\x2\x2\x2\x451"+
		"\x452\x3\x2\x2\x2\x452\x453\x3\x2\x2\x2\x453\x455\x5\x13E\xA0\x2\x454"+
		"\x456\x5H%\x2\x455\x454\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456\x458\x3"+
		"\x2\x2\x2\x457\x459\x5$\x13\x2\x458\x457\x3\x2\x2\x2\x458\x459\x3\x2\x2"+
		"\x2\x459\x45C\x3\x2\x2\x2\x45A\x45B\a\x6\x2\x2\x45B\x45D\x5\x100\x81\x2"+
		"\x45C\x45A\x3\x2\x2\x2\x45C\x45D\x3\x2\x2\x2\x45D\x461\x3\x2\x2\x2\x45E"+
		"\x460\x5L\'\x2\x45F\x45E\x3\x2\x2\x2\x460\x463\x3\x2\x2\x2\x461\x45F\x3"+
		"\x2\x2\x2\x461\x462\x3\x2\x2\x2\x462\x465\x3\x2\x2\x2\x463\x461\x3\x2"+
		"\x2\x2\x464\x466\x5\x18\r\x2\x465\x464\x3\x2\x2\x2\x465\x466\x3\x2\x2"+
		"\x2\x466\x467\x3\x2\x2\x2\x467\x468\a\x169\x2\x2\x468U\x3\x2\x2\x2\x469"+
		"\x46B\x5\x8EH\x2\x46A\x469\x3\x2\x2\x2\x46A\x46B\x3\x2\x2\x2\x46B\x46D"+
		"\x3\x2\x2\x2\x46C\x46E\x5\x46$\x2\x46D\x46C\x3\x2\x2\x2\x46D\x46E\x3\x2"+
		"\x2\x2\x46E\x46F\x3\x2\x2\x2\x46F\x471\aY\x2\x2\x470\x472\x5\xF0y\x2\x471"+
		"\x470\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2\x472\x473\x3\x2\x2\x2\x473\x476"+
		"\x5\x13E\xA0\x2\x474\x475\t\x13\x2\x2\x475\x477\x5\x100\x81\x2\x476\x474"+
		"\x3\x2\x2\x2\x476\x477\x3\x2\x2\x2\x477\x478\x3\x2\x2\x2\x478\x47A\x5"+
		"\xE\b\x2\x479\x47B\x5X-\x2\x47A\x479\x3\x2\x2\x2\x47B\x47C\x3\x2\x2\x2"+
		"\x47C\x47A\x3\x2\x2\x2\x47C\x47D\x3\x2\x2\x2\x47D\x47E\x3\x2\x2\x2\x47E"+
		"\x480\a\x19\x2\x2\x47F\x481\aY\x2\x2\x480\x47F\x3\x2\x2\x2\x480\x481\x3"+
		"\x2\x2\x2\x481\x482\x3\x2\x2\x2\x482\x483\a\x169\x2\x2\x483W\x3\x2\x2"+
		"\x2\x484\x486\x5\x8EH\x2\x485\x484\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486"+
		"\x488\x3\x2\x2\x2\x487\x489\a\x30\x2\x2\x488\x487\x3\x2\x2\x2\x488\x489"+
		"\x3\x2\x2\x2\x489\x48A\x3\x2\x2\x2\x48A\x48E\x5\x13E\xA0\x2\x48B\x48C"+
		"\x5\xCEh\x2\x48C\x48D\x5\xD0i\x2\x48D\x48F\x3\x2\x2\x2\x48E\x48B\x3\x2"+
		"\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F\x490\x3\x2\x2\x2\x490\x491\x5\xE\b\x2"+
		"\x491Y\x3\x2\x2\x2\x492\x494\x5\x8EH\x2\x493\x492\x3\x2\x2\x2\x493\x494"+
		"\x3\x2\x2\x2\x494\x496\x3\x2\x2\x2\x495\x497\x5\x8CG\x2\x496\x495\x3\x2"+
		"\x2\x2\x496\x497\x3\x2\x2\x2\x497\x498\x3\x2\x2\x2\x498\x49A\aZ\x2\x2"+
		"\x499\x49B\x5\xF0y\x2\x49A\x499\x3\x2\x2\x2\x49A\x49B\x3\x2\x2\x2\x49B"+
		"\x49C\x3\x2\x2\x2\x49C\x49F\x5\x13E\xA0\x2\x49D\x49E\a\x6\x2\x2\x49E\x4A0"+
		"\x5\x100\x81\x2\x49F\x49D\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4B5"+
		"\x3\x2\x2\x2\x4A1\x4B6\a\x169\x2\x2\x4A2\x4A4\x5\\/\x2\x4A3\x4A2\x3\x2"+
		"\x2\x2\x4A4\x4A5\x3\x2\x2\x2\x4A5\x4A3\x3\x2\x2\x2\x4A5\x4A6\x3\x2\x2"+
		"\x2\x4A6\x4A7\x3\x2\x2\x2\x4A7\x4A8\a\x169\x2\x2\x4A8\x4B6\x3\x2\x2\x2"+
		"\x4A9\x4AB\x5\xE\b\x2\x4AA\x4AC\x5^\x30\x2\x4AB\x4AA\x3\x2\x2\x2\x4AC"+
		"\x4AD\x3\x2\x2\x2\x4AD\x4AB\x3\x2\x2\x2\x4AD\x4AE\x3\x2\x2\x2\x4AE\x4AF"+
		"\x3\x2\x2\x2\x4AF\x4B1\a\x19\x2\x2\x4B0\x4B2\aZ\x2\x2\x4B1\x4B0\x3\x2"+
		"\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B3\x3\x2\x2\x2\x4B3\x4B4\a\x169\x2"+
		"\x2\x4B4\x4B6\x3\x2\x2\x2\x4B5\x4A1\x3\x2\x2\x2\x4B5\x4A3\x3\x2\x2\x2"+
		"\x4B5\x4A9\x3\x2\x2\x2\x4B6[\x3\x2\x2\x2\x4B7\x4B9\x5\x8EH\x2\x4B8\x4B7"+
		"\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9\x4BB\x3\x2\x2\x2\x4BA\x4BC\x5"+
		"p\x39\x2\x4BB\x4BA\x3\x2\x2\x2\x4BB\x4BC\x3\x2\x2\x2\x4BC\x4C8\x3\x2\x2"+
		"\x2\x4BD\x4BE\x6/\t\x2\x4BE\x4C0\av\x2\x2\x4BF\x4C1\x5r:\x2\x4C0\x4BF"+
		"\x3\x2\x2\x2\x4C0\x4C1\x3\x2\x2\x2\x4C1\x4C9\x3\x2\x2\x2\x4C2\x4C3\x6"+
		"/\n\x2\x4C3\x4C5\a\x8E\x2\x2\x4C4\x4C6\x5r:\x2\x4C5\x4C4\x3\x2\x2\x2\x4C5"+
		"\x4C6\x3\x2\x2\x2\x4C6\x4C9\x3\x2\x2\x2\x4C7\x4C9\t\x14\x2\x2\x4C8\x4BD"+
		"\x3\x2\x2\x2\x4C8\x4C2\x3\x2\x2\x2\x4C8\x4C7\x3\x2\x2\x2\x4C9]\x3\x2\x2"+
		"\x2\x4CA\x4CC\x5\x8EH\x2\x4CB\x4CA\x3\x2\x2\x2\x4CB\x4CC\x3\x2\x2\x2\x4CC"+
		"\x4CE\x3\x2\x2\x2\x4CD\x4CF\x5p\x39\x2\x4CE\x4CD\x3\x2\x2\x2\x4CE\x4CF"+
		"\x3\x2\x2\x2\x4CF\x4E4\x3\x2\x2\x2\x4D0\x4D1\av\x2\x2\x4D1\x4D2\x5\xE"+
		"\b\x2\x4D2\x4D3\x5*\x16\x2\x4D3\x4D5\a\x19\x2\x2\x4D4\x4D6\av\x2\x2\x4D5"+
		"\x4D4\x3\x2\x2\x2\x4D5\x4D6\x3\x2\x2\x2\x4D6\x4E5\x3\x2\x2\x2\x4D7\x4D8"+
		"\av\x2\x2\x4D8\x4D9\a\x15F\x2\x2\x4D9\x4E5\x5\xD0i\x2\x4DA\x4DB\a\x8E"+
		"\x2\x2\x4DB\x4DC\x5\xE\b\x2\x4DC\x4DD\x5*\x16\x2\x4DD\x4DF\a\x19\x2\x2"+
		"\x4DE\x4E0\a\x8E\x2\x2\x4DF\x4DE\x3\x2\x2\x2\x4DF\x4E0\x3\x2\x2\x2\x4E0"+
		"\x4E5\x3\x2\x2\x2\x4E1\x4E2\a\x8E\x2\x2\x4E2\x4E3\a\x15F\x2\x2\x4E3\x4E5"+
		"\x5\xD0i\x2\x4E4\x4D0\x3\x2\x2\x2\x4E4\x4D7\x3\x2\x2\x2\x4E4\x4DA\x3\x2"+
		"\x2\x2\x4E4\x4E1\x3\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E7\x5\xE\b\x2"+
		"\x4E7_\x3\x2\x2\x2\x4E8\x4EA\x5\x8EH\x2\x4E9\x4E8\x3\x2\x2\x2\x4E9\x4EA"+
		"\x3\x2\x2\x2\x4EA\x4EB\x3\x2\x2\x2\x4EB\x4EC\x5\x62\x32\x2\x4EC\x4F1\x5"+
		"\x64\x33\x2\x4ED\x4EE\a\x129\x2\x2\x4EE\x4F0\x5\x64\x33\x2\x4EF\x4ED\x3"+
		"\x2\x2\x2\x4F0\x4F3\x3\x2\x2\x2\x4F1\x4EF\x3\x2\x2\x2\x4F1\x4F2\x3\x2"+
		"\x2\x2\x4F2\x4F4\x3\x2\x2\x2\x4F3\x4F1\x3\x2\x2\x2\x4F4\x4F5\x5\xE\b\x2"+
		"\x4F5\x61\x3\x2\x2\x2\x4F6\x4F8\t\x15\x2\x2\x4F7\x4F6\x3\x2\x2\x2\x4F8"+
		"\x4F9\x3\x2\x2\x2\x4F9\x4F7\x3\x2\x2\x2\x4F9\x4FA\x3\x2\x2\x2\x4FA\x63"+
		"\x3\x2\x2\x2\x4FB\x4FD\a\x12\x2\x2\x4FC\x4FB\x3\x2\x2\x2\x4FC\x4FD\x3"+
		"\x2\x2\x2\x4FD\x4FE\x3\x2\x2\x2\x4FE\x503\x5\x13E\xA0\x2\x4FF\x500\a\x126"+
		"\x2\x2\x500\x501\x5\x66\x34\x2\x501\x502\a\x127\x2\x2\x502\x504\x3\x2"+
		"\x2\x2\x503\x4FF\x3\x2\x2\x2\x503\x504\x3\x2\x2\x2\x504\x508\x3\x2\x2"+
		"\x2\x505\x506\x5\xCEh\x2\x506\x507\x5\xD0i\x2\x507\x509\x3\x2\x2\x2\x508"+
		"\x505\x3\x2\x2\x2\x508\x509\x3\x2\x2\x2\x509\x50C\x3\x2\x2\x2\x50A\x50B"+
		"\t\r\x2\x2\x50B\x50D\x5\x100\x81\x2\x50C\x50A\x3\x2\x2\x2\x50C\x50D\x3"+
		"\x2\x2\x2\x50D\x65\x3\x2\x2\x2\x50E\x512\x5\xD0i\x2\x50F\x510\a\x127\x2"+
		"\x2\x510\x511\a\x126\x2\x2\x511\x513\x5\xD0i\x2\x512\x50F\x3\x2\x2\x2"+
		"\x513\x514\x3\x2\x2\x2\x514\x512\x3\x2\x2\x2\x514\x515\x3\x2\x2\x2\x515"+
		"\x51F\x3\x2\x2\x2\x516\x519\x5\xD0i\x2\x517\x518\a\x129\x2\x2\x518\x51A"+
		"\x5\xD0i\x2\x519\x517\x3\x2\x2\x2\x51A\x51B\x3\x2\x2\x2\x51B\x519\x3\x2"+
		"\x2\x2\x51B\x51C\x3\x2\x2\x2\x51C\x51F\x3\x2\x2\x2\x51D\x51F\x5\xD0i\x2"+
		"\x51E\x50E\x3\x2\x2\x2\x51E\x516\x3\x2\x2\x2\x51E\x51D\x3\x2\x2\x2\x51F"+
		"g\x3\x2\x2\x2\x520\x522\x5\x8EH\x2\x521\x520\x3\x2\x2\x2\x521\x522\x3"+
		"\x2\x2\x2\x522\x524\x3\x2\x2\x2\x523\x525\x5\x8CG\x2\x524\x523\x3\x2\x2"+
		"\x2\x524\x525\x3\x2\x2\x2\x525\x526\x3\x2\x2\x2\x526\x528\aj\x2\x2\x527"+
		"\x529\x5\xF0y\x2\x528\x527\x3\x2\x2\x2\x528\x529\x3\x2\x2\x2\x529\x52C"+
		"\x3\x2\x2\x2\x52A\x52D\a>\x2\x2\x52B\x52D\x5\x13E\xA0\x2\x52C\x52A\x3"+
		"\x2\x2\x2\x52C\x52B\x3\x2\x2\x2\x52D\x52F\x3\x2\x2\x2\x52E\x530\x5j\x36"+
		"\x2\x52F\x52E\x3\x2\x2\x2\x52F\x530\x3\x2\x2\x2\x530\x533\x3\x2\x2\x2"+
		"\x531\x532\a\x6\x2\x2\x532\x534\x5\x100\x81\x2\x533\x531\x3\x2\x2\x2\x533"+
		"\x534\x3\x2\x2\x2\x534\x555\x3\x2\x2\x2\x535\x539\aR\x2\x2\x536\x538\x5"+
		"l\x37\x2\x537\x536\x3\x2\x2\x2\x538\x53B\x3\x2\x2\x2\x539\x537\x3\x2\x2"+
		"\x2\x539\x53A\x3\x2\x2\x2\x53A\x53F\x3\x2\x2\x2\x53B\x539\x3\x2\x2\x2"+
		"\x53C\x53D\x5\xCEh\x2\x53D\x53E\x5\xD0i\x2\x53E\x540\x3\x2\x2\x2\x53F"+
		"\x53C\x3\x2\x2\x2\x53F\x540\x3\x2\x2\x2\x540\x541\x3\x2\x2\x2\x541\x556"+
		"\a\x169\x2\x2\x542\x544\x5n\x38\x2\x543\x542\x3\x2\x2\x2\x544\x545\x3"+
		"\x2\x2\x2\x545\x543\x3\x2\x2\x2\x545\x546\x3\x2\x2\x2\x546\x547\x3\x2"+
		"\x2\x2\x547\x548\a\x169\x2\x2\x548\x556\x3\x2\x2\x2\x549\x54B\x5\xE\b"+
		"\x2\x54A\x54C\x5t;\x2\x54B\x54A\x3\x2\x2\x2\x54C\x54D\x3\x2\x2\x2\x54D"+
		"\x54B\x3\x2\x2\x2\x54D\x54E\x3\x2\x2\x2\x54E\x54F\x3\x2\x2\x2\x54F\x551"+
		"\a\x19\x2\x2\x550\x552\aj\x2\x2\x551\x550\x3\x2\x2\x2\x551\x552\x3\x2"+
		"\x2\x2\x552\x553\x3\x2\x2\x2\x553\x554\a\x169\x2\x2\x554\x556\x3\x2\x2"+
		"\x2\x555\x535\x3\x2\x2\x2\x555\x543\x3\x2\x2\x2\x555\x549\x3\x2\x2\x2"+
		"\x556i\x3\x2\x2\x2\x557\x560\a\x126\x2\x2\x558\x55D\x5&\x14\x2\x559\x55A"+
		"\a\x129\x2\x2\x55A\x55C\x5&\x14\x2\x55B\x559\x3\x2\x2\x2\x55C\x55F\x3"+
		"\x2\x2\x2\x55D\x55B\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2\x55E\x561\x3\x2"+
		"\x2\x2\x55F\x55D\x3\x2\x2\x2\x560\x558\x3\x2\x2\x2\x560\x561\x3\x2\x2"+
		"\x2\x561\x562\x3\x2\x2\x2\x562\x570\a\x127\x2\x2\x563\x56C\a\x122\x2\x2"+
		"\x564\x569\x5&\x14\x2\x565\x566\a\x129\x2\x2\x566\x568\x5&\x14\x2\x567"+
		"\x565\x3\x2\x2\x2\x568\x56B\x3\x2\x2\x2\x569\x567\x3\x2\x2\x2\x569\x56A"+
		"\x3\x2\x2\x2\x56A\x56D\x3\x2\x2\x2\x56B\x569\x3\x2\x2\x2\x56C\x564\x3"+
		"\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x56E\x3\x2\x2\x2\x56E\x570\a\x123"+
		"\x2\x2\x56F\x557\x3\x2\x2\x2\x56F\x563\x3\x2\x2\x2\x570k\x3\x2\x2\x2\x571"+
		"\x573\x5\x8EH\x2\x572\x571\x3\x2\x2\x2\x572\x573\x3\x2\x2\x2\x573\x575"+
		"\x3\x2\x2\x2\x574\x576\x5p\x39\x2\x575\x574\x3\x2\x2\x2\x575\x576\x3\x2"+
		"\x2\x2\x576\x577\x3\x2\x2\x2\x577\x578\t\x16\x2\x2\x578m\x3\x2\x2\x2\x579"+
		"\x57B\x5\x8EH\x2\x57A\x579\x3\x2\x2\x2\x57A\x57B\x3\x2\x2\x2\x57B\x57D"+
		"\x3\x2\x2\x2\x57C\x57E\x5p\x39\x2\x57D\x57C\x3\x2\x2\x2\x57D\x57E\x3\x2"+
		"\x2\x2\x57E\x58A\x3\x2\x2\x2\x57F\x580\x6\x38\v\x2\x580\x582\t\x17\x2"+
		"\x2\x581\x583\x5\xD0i\x2\x582\x581\x3\x2\x2\x2\x582\x583\x3\x2\x2\x2\x583"+
		"\x58B\x3\x2\x2\x2\x584\x585\x6\x38\f\x2\x585\x587\t\x18\x2\x2\x586\x588"+
		"\x5r:\x2\x587\x586\x3\x2\x2\x2\x587\x588\x3\x2\x2\x2\x588\x58B\x3\x2\x2"+
		"\x2\x589\x58B\t\x16\x2\x2\x58A\x57F\x3\x2\x2\x2\x58A\x584\x3\x2\x2\x2"+
		"\x58A\x589\x3\x2\x2\x2\x58Bo\x3\x2\x2\x2\x58C\x58E\t\x19\x2\x2\x58D\x58C"+
		"\x3\x2\x2\x2\x58E\x58F\x3\x2\x2\x2\x58F\x58D\x3\x2\x2\x2\x58F\x590\x3"+
		"\x2\x2\x2\x590q\x3\x2\x2\x2\x591\x596\x5\xD0i\x2\x592\x593\a\x129\x2\x2"+
		"\x593\x595\x5\xD0i\x2\x594\x592\x3\x2\x2\x2\x595\x598\x3\x2\x2\x2\x596"+
		"\x594\x3\x2\x2\x2\x596\x597\x3\x2\x2\x2\x597s\x3\x2\x2\x2\x598\x596\x3"+
		"\x2\x2\x2\x599\x59B\x5\x8EH\x2\x59A\x599\x3\x2\x2\x2\x59A\x59B\x3\x2\x2"+
		"\x2\x59B\x59D\x3\x2\x2\x2\x59C\x59E\x5p\x39\x2\x59D\x59C\x3\x2\x2\x2\x59D"+
		"\x59E\x3\x2\x2\x2\x59E\x5B3\x3\x2\x2\x2\x59F\x5A0\a]\x2\x2\x5A0\x5A1\x5"+
		"\xE\b\x2\x5A1\x5A2\x5*\x16\x2\x5A2\x5A4\a\x19\x2\x2\x5A3\x5A5\a]\x2\x2"+
		"\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5B4\x3\x2\x2\x2\x5A6"+
		"\x5A7\a]\x2\x2\x5A7\x5A8\a\x15F\x2\x2\x5A8\x5B4\x5\xD0i\x2\x5A9\x5AA\t"+
		"\x18\x2\x2\x5AA\x5AB\x5\xE\b\x2\x5AB\x5AC\x5*\x16\x2\x5AC\x5AE\a\x19\x2"+
		"\x2\x5AD\x5AF\t\x18\x2\x2\x5AE\x5AD\x3\x2\x2\x2\x5AE\x5AF\x3\x2\x2\x2"+
		"\x5AF\x5B4\x3\x2\x2\x2\x5B0\x5B1\t\x18\x2\x2\x5B1\x5B2\a\x15F\x2\x2\x5B2"+
		"\x5B4\x5\xD0i\x2\x5B3\x59F\x3\x2\x2\x2\x5B3\x5A6\x3\x2\x2\x2\x5B3\x5A9"+
		"\x3\x2\x2\x2\x5B3\x5B0\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B6\x5"+
		"\xE\b\x2\x5B6u\x3\x2\x2\x2\x5B7\x5C8\x5\x32\x1A\x2\x5B8\x5C8\x5~@\x2\x5B9"+
		"\x5C8\x5x=\x2\x5BA\x5C8\x5\x80\x41\x2\x5BB\x5C8\x5`\x31\x2\x5BC\x5C8\x5"+
		"h\x35\x2\x5BD\x5C8\x5\x88\x45\x2\x5BE\x5C8\x5P)\x2\x5BF\x5C8\x5\x44#\x2"+
		"\x5C0\x5C8\x5T+\x2\x5C1\x5C8\x5V,\x2\x5C2\x5C8\x5Z.\x2\x5C3\x5C8\x5\x42"+
		"\"\x2\x5C4\x5C5\x6<\r\x2\x5C5\x5C8\x5\"\x12\x2\x5C6\x5C8\x5\xE\b\x2\x5C7"+
		"\x5B7\x3\x2\x2\x2\x5C7\x5B8\x3\x2\x2\x2\x5C7\x5B9\x3\x2\x2\x2\x5C7\x5BA"+
		"\x3\x2\x2\x2\x5C7\x5BB\x3\x2\x2\x2\x5C7\x5BC\x3\x2\x2\x2\x5C7\x5BD\x3"+
		"\x2\x2\x2\x5C7\x5BE\x3\x2\x2\x2\x5C7\x5BF\x3\x2\x2\x2\x5C7\x5C0\x3\x2"+
		"\x2\x2\x5C7\x5C1\x3\x2\x2\x2\x5C7\x5C2\x3\x2\x2\x2\x5C7\x5C3\x3\x2\x2"+
		"\x2\x5C7\x5C4\x3\x2\x2\x2\x5C7\x5C6\x3\x2\x2\x2\x5C8w\x3\x2\x2\x2\x5C9"+
		"\x5CB\x5\x8EH\x2\x5CA\x5C9\x3\x2\x2\x2\x5CA\x5CB\x3\x2\x2\x2\x5CB\x5CD"+
		"\x3\x2\x2\x2\x5CC\x5CE\x5|?\x2\x5CD\x5CC\x3\x2\x2\x2\x5CD\x5CE\x3\x2\x2"+
		"\x2\x5CE\x5CF\x3\x2\x2\x2\x5CF\x5D1\aT\x2\x2\x5D0\x5D2\x5$\x13\x2\x5D1"+
		"\x5D0\x3\x2\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2\x5D5\x3\x2\x2\x2\x5D3\x5D4"+
		"\a\x6\x2\x2\x5D4\x5D6\a\xB0\x2\x2\x5D5\x5D3\x3\x2\x2\x2\x5D5\x5D6\x3\x2"+
		"\x2\x2\x5D6\x5D8\x3\x2\x2\x2\x5D7\x5D9\x5\x18\r\x2\x5D8\x5D7\x3\x2\x2"+
		"\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x5DC\x3\x2\x2\x2\x5DA\x5DB\a\xE\x2\x2\x5DB"+
		"\x5DD\x5\x13E\xA0\x2\x5DC\x5DA\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD"+
		"\x5E0\x3\x2\x2\x2\x5DE\x5DF\a\x15F\x2\x2\x5DF\x5E1\x5\xD0i\x2\x5E0\x5DE"+
		"\x3\x2\x2\x2\x5E0\x5E1\x3\x2\x2\x2\x5E1\x5E2\x3\x2\x2\x2\x5E2\x5E4\x5"+
		"\xE\b\x2\x5E3\x5E5\x5z>\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2"+
		"\x5E5\x5E6\x3\x2\x2\x2\x5E6\x5EA\x5*\x16\x2\x5E7\x5E8\a\x19\x2\x2\x5E8"+
		"\x5E9\aT\x2\x2\x5E9\x5EB\a\x169\x2\x2\x5EA\x5E7\x3\x2\x2\x2\x5EA\x5EB"+
		"\x3\x2\x2\x2\x5EBy\x3\x2\x2\x2\x5EC\x5ED\t\x1A\x2\x2\x5ED\x5EE\a\x122"+
		"\x2\x2\x5EE\x5EF\x5\xEAv\x2\x5EF\x5F0\a\x123\x2\x2\x5F0\x5F1\x5\xE\b\x2"+
		"\x5F1{\x3\x2\x2\x2\x5F2\x5F4\t\x1B\x2\x2\x5F3\x5F2\x3\x2\x2\x2\x5F4\x5F5"+
		"\x3\x2\x2\x2\x5F5\x5F3\x3\x2\x2\x2\x5F5\x5F6\x3\x2\x2\x2\x5F6}\x3\x2\x2"+
		"\x2\x5F7\x5F8\a\x10\x2\x2\x5F8\x5FA\t\f\x2\x2\x5F9\x5FB\n\t\x2\x2\x5FA"+
		"\x5F9\x3\x2\x2\x2\x5FB\x5FC\x3\x2\x2\x2\x5FC\x5FA\x3\x2\x2\x2\x5FC\x5FD"+
		"\x3\x2\x2\x2\x5FD\x5FE\x3\x2\x2\x2\x5FE\x5FF\x5\xE\b\x2\x5FF\x7F\x3\x2"+
		"\x2\x2\x600\x602\x5\x8EH\x2\x601\x600\x3\x2\x2\x2\x601\x602\x3\x2\x2\x2"+
		"\x602\x604\x3\x2\x2\x2\x603\x605\x5\x82\x42\x2\x604\x603\x3\x2\x2\x2\x604"+
		"\x605\x3\x2\x2\x2\x605\x606\x3\x2\x2\x2\x606\x609\aX\x2\x2\x607\x608\a"+
		"\x122\x2\x2\x608\x60A\a\x123\x2\x2\x609\x607\x3\x2\x2\x2\x609\x60A\x3"+
		"\x2\x2\x2\x60A\x60D\x3\x2\x2\x2\x60B\x60C\a\xE\x2\x2\x60C\x60E\x5\x13E"+
		"\xA0\x2\x60D\x60B\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x611\x3\x2\x2"+
		"\x2\x60F\x610\a\x15F\x2\x2\x610\x612\x5\xD0i\x2\x611\x60F\x3\x2\x2\x2"+
		"\x611\x612\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2\x613\x614\x5\xE\b\x2\x614"+
		"\x618\x5*\x16\x2\x615\x616\a\x19\x2\x2\x616\x617\aX\x2\x2\x617\x619\a"+
		"\x169\x2\x2\x618\x615\x3\x2\x2\x2\x618\x619\x3\x2\x2\x2\x619\x81\x3\x2"+
		"\x2\x2\x61A\x61C\a\x80\x2\x2\x61B\x61A\x3\x2\x2\x2\x61C\x61D\x3\x2\x2"+
		"\x2\x61D\x61B\x3\x2\x2\x2\x61D\x61E\x3\x2\x2\x2\x61E\x83\x3\x2\x2\x2\x61F"+
		"\x620\t\x1C\x2\x2\x620\x85\x3\x2\x2\x2\x621\x622\t\x1D\x2\x2\x622\x87"+
		"\x3\x2\x2\x2\x623\x625\x5\x8EH\x2\x624\x623\x3\x2\x2\x2\x624\x625\x3\x2"+
		"\x2\x2\x625\x627\x3\x2\x2\x2\x626\x628\x5\x8A\x46\x2\x627\x626\x3\x2\x2"+
		"\x2\x627\x628\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629\x62C\ag\x2\x2\x62A"+
		"\x62D\x5\x84\x43\x2\x62B\x62D\x5\x86\x44\x2\x62C\x62A\x3\x2\x2\x2\x62C"+
		"\x62B\x3\x2\x2\x2\x62D\x62F\x3\x2\x2\x2\x62E\x630\a\xF2\x2\x2\x62F\x62E"+
		"\x3\x2\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x634\x5"+
		"$\x13\x2\x632\x633\a\x6\x2\x2\x633\x635\x5\x100\x81\x2\x634\x632\x3\x2"+
		"\x2\x2\x634\x635\x3\x2\x2\x2\x635\x638\x3\x2\x2\x2\x636\x637\a\x15F\x2"+
		"\x2\x637\x639\x5\xD0i\x2\x638\x636\x3\x2\x2\x2\x638\x639\x3\x2\x2\x2\x639"+
		"\x63A\x3\x2\x2\x2\x63A\x63B\x5\xE\b\x2\x63B\x63F\x5*\x16\x2\x63C\x63D"+
		"\a\x19\x2\x2\x63D\x63E\ag\x2\x2\x63E\x640\a\x169\x2\x2\x63F\x63C\x3\x2"+
		"\x2\x2\x63F\x640\x3\x2\x2\x2\x640\x89\x3\x2\x2\x2\x641\x643\t\x1E\x2\x2"+
		"\x642\x641\x3\x2\x2\x2\x643\x644\x3\x2\x2\x2\x644\x642\x3\x2\x2\x2\x644"+
		"\x645\x3\x2\x2\x2\x645\x8B\x3\x2\x2\x2\x646\x648\t\x1F\x2\x2\x647\x646"+
		"\x3\x2\x2\x2\x648\x649\x3\x2\x2\x2\x649\x647\x3\x2\x2\x2\x649\x64A\x3"+
		"\x2\x2\x2\x64A\x8D\x3\x2\x2\x2\x64B\x64D\x5\x90I\x2\x64C\x64B\x3\x2\x2"+
		"\x2\x64D\x64E\x3\x2\x2\x2\x64E\x64C\x3\x2\x2\x2\x64E\x64F\x3\x2\x2\x2"+
		"\x64F\x8F\x3\x2\x2\x2\x650\x652\a\x126\x2\x2\x651\x653\x5\x92J\x2\x652"+
		"\x651\x3\x2\x2\x2\x652\x653\x3\x2\x2\x2\x653\x654\x3\x2\x2\x2\x654\x659"+
		"\x5\x94K\x2\x655\x656\a\x129\x2\x2\x656\x658\x5\x94K\x2\x657\x655\x3\x2"+
		"\x2\x2\x658\x65B\x3\x2\x2\x2\x659\x657\x3\x2\x2\x2\x659\x65A\x3\x2\x2"+
		"\x2\x65A\x65C\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2\x65C\x65D\a\x127\x2\x2"+
		"\x65D\x660\x3\x2\x2\x2\x65E\x660\a\x146\x2\x2\x65F\x650\x3\x2\x2\x2\x65F"+
		"\x65E\x3\x2\x2\x2\x660\x91\x3\x2\x2\x2\x661\x662\t \x2\x2\x662\x663\a"+
		"\x128\x2\x2\x663\x93\x3\x2\x2\x2\x664\x671\x5\xF2z\x2\x665\x66E\a\x122"+
		"\x2\x2\x666\x66B\x5\x96L\x2\x667\x668\a\x129\x2\x2\x668\x66A\x5\x96L\x2"+
		"\x669\x667\x3\x2\x2\x2\x66A\x66D\x3\x2\x2\x2\x66B\x669\x3\x2\x2\x2\x66B"+
		"\x66C\x3\x2\x2\x2\x66C\x66F\x3\x2\x2\x2\x66D\x66B\x3\x2\x2\x2\x66E\x666"+
		"\x3\x2\x2\x2\x66E\x66F\x3\x2\x2\x2\x66F\x670\x3\x2\x2\x2\x670\x672\a\x123"+
		"\x2\x2\x671\x665\x3\x2\x2\x2\x671\x672\x3\x2\x2\x2\x672\x95\x3\x2\x2\x2"+
		"\x673\x674\x5\xFA~\x2\x674\x675\x5\xCEh\x2\x675\x676\x5\xD0i\x2\x676\x679"+
		"\x3\x2\x2\x2\x677\x679\x5\xD0i\x2\x678\x673\x3\x2\x2\x2\x678\x677\x3\x2"+
		"\x2\x2\x679\x97\x3\x2\x2\x2\x67A\x67B\a\x126\x2\x2\x67B\x67C\x5\x9AN\x2"+
		"\x67C\x681\x5\x94K\x2\x67D\x67E\a\x129\x2\x2\x67E\x680\x5\x94K\x2\x67F"+
		"\x67D\x3\x2\x2\x2\x680\x683\x3\x2\x2\x2\x681\x67F\x3\x2\x2\x2\x681\x682"+
		"\x3\x2\x2\x2\x682\x684\x3\x2\x2\x2\x683\x681\x3\x2\x2\x2\x684\x685\a\x127"+
		"\x2\x2\x685\x686\a\x169\x2\x2\x686\x99\x3\x2\x2\x2\x687\x688\a\x160\x2"+
		"\x2\x688\x689\a\x128\x2\x2\x689\x9B\x3\x2\x2\x2\x68A\x68B\a\x31\x2\x2"+
		"\x68B\x690\x5\xFA~\x2\x68C\x68D\a\x129\x2\x2\x68D\x68F\x5\xFA~\x2\x68E"+
		"\x68C\x3\x2\x2\x2\x68F\x692\x3\x2\x2\x2\x690\x68E\x3\x2\x2\x2\x690\x691"+
		"\x3\x2\x2\x2\x691\x693\x3\x2\x2\x2\x692\x690\x3\x2\x2\x2\x693\x694\x5"+
		"\xE\b\x2\x694\x6BD\x3\x2\x2\x2\x695\x696\a \x2\x2\x696\x69B\x5\xFA~\x2"+
		"\x697\x698\a\x129\x2\x2\x698\x69A\x5\xFA~\x2\x699\x697\x3\x2\x2\x2\x69A"+
		"\x69D\x3\x2\x2\x2\x69B\x699\x3\x2\x2\x2\x69B\x69C\x3\x2\x2\x2\x69C\x6A0"+
		"\x3\x2\x2\x2\x69D\x69B\x3\x2\x2\x2\x69E\x69F\a-\x2\x2\x69F\x6A1\x5\xFA"+
		"~\x2\x6A0\x69E\x3\x2\x2\x2\x6A0\x6A1\x3\x2\x2\x2\x6A1\x6A2\x3\x2\x2\x2"+
		"\x6A2\x6A3\x5\xE\b\x2\x6A3\x6BD\x3\x2\x2\x2\x6A4\x6A5\x6O\xE\x2\x6A5\x6A6"+
		"\a;\x2\x2\x6A6\x6AB\x5\xB8]\x2\x6A7\x6A8\a\x129\x2\x2\x6A8\x6AA\x5\xB8"+
		"]\x2\x6A9\x6A7\x3\x2\x2\x2\x6AA\x6AD\x3\x2\x2\x2\x6AB\x6A9\x3\x2\x2\x2"+
		"\x6AB\x6AC\x3\x2\x2\x2\x6AC\x6AE\x3\x2\x2\x2\x6AD\x6AB\x3\x2\x2\x2\x6AE"+
		"\x6AF\x5\xE\b\x2\x6AF\x6BD\x3\x2\x2\x2\x6B0\x6B1\x6O\xF\x2\x6B1\x6B2\a"+
		";\x2\x2\x6B2\x6B7\x5\xC8\x65\x2\x6B3\x6B4\a\x129\x2\x2\x6B4\x6B6\x5\xC8"+
		"\x65\x2\x6B5\x6B3\x3\x2\x2\x2\x6B6\x6B9\x3\x2\x2\x2\x6B7\x6B5\x3\x2\x2"+
		"\x2\x6B7\x6B8\x3\x2\x2\x2\x6B8\x6BA\x3\x2\x2\x2\x6B9\x6B7\x3\x2\x2\x2"+
		"\x6BA\x6BB\x5\xE\b\x2\x6BB\x6BD\x3\x2\x2\x2\x6BC\x68A\x3\x2\x2\x2\x6BC"+
		"\x695\x3\x2\x2\x2\x6BC\x6A4\x3\x2\x2\x2\x6BC\x6B0\x3\x2\x2\x2\x6BD\x9D"+
		"\x3\x2\x2\x2\x6BE\x828\x5\xAEX\x2\x6BF\x828\x5\xBE`\x2\x6C0\x828\x5\xCA"+
		"\x66\x2\x6C1\x6C2\x6P\x10\x2\x6C2\x828\x5\xB6\\\x2\x6C3\x828\x5\xB4[\x2"+
		"\x6C4\x6C5\x6P\x11\x2\x6C5\x828\x5\xBA^\x2\x6C6\x6C7\x6P\x12\x2\x6C7\x828"+
		"\x5\xBC_\x2\x6C8\x6CA\a\x15\x2\x2\x6C9\x6C8\x3\x2\x2\x2\x6C9\x6CA\x3\x2"+
		"\x2\x2\x6CA\x6CB\x3\x2\x2\x2\x6CB\x6CC\aK\x2\x2\x6CC\x6CD\x5\xD0i\x2\x6CD"+
		"\x6CE\x5\xE\b\x2\x6CE\x6D4\x5*\x16\x2\x6CF\x6D1\a\x19\x2\x2\x6D0\x6D2"+
		"\t!\x2\x2\x6D1\x6D0\x3\x2\x2\x2\x6D1\x6D2\x3\x2\x2\x2\x6D2\x6D5\x3\x2"+
		"\x2\x2\x6D3\x6D5\a\x1B\x2\x2\x6D4\x6CF\x3\x2\x2\x2\x6D4\x6D3\x3\x2\x2"+
		"\x2\x6D5\x6D6\x3\x2\x2\x2\x6D6\x6D7\x5\xE\b\x2\x6D7\x828\x3\x2\x2\x2\x6D8"+
		"\x6DB\a\x88\x2\x2\x6D9\x6DA\a\x122\x2\x2\x6DA\x6DC\a\x123\x2\x2\x6DB\x6D9"+
		"\x3\x2\x2\x2\x6DB\x6DC\x3\x2\x2\x2\x6DC\x6DD\x3\x2\x2\x2\x6DD\x828\x5"+
		"\xE\b\x2\x6DE\x6F3\a!\x2\x2\x6DF\x6F4\x5\xD0i\x2\x6E0\x6E2\a.\x2\x2\x6E1"+
		"\x6E0\x3\x2\x2\x2\x6E1\x6E2\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E6"+
		"\a`\x2\x2\x6E4\x6E6\a\x94\x2\x2\x6E5\x6E1\x3\x2\x2\x2\x6E5\x6E4\x3\x2"+
		"\x2\x2\x6E6\x6E7\x3\x2\x2\x2\x6E7\x6E8\x5\x13E\xA0\x2\x6E8\x6E9\x5\xCE"+
		"h\x2\x6E9\x6EA\x5\xD0i\x2\x6EA\x6F4\x3\x2\x2\x2\x6EB\x6EC\a.\x2\x2\x6EC"+
		"\x6ED\x5\x13E\xA0\x2\x6ED\x6EE\x5\xCEh\x2\x6EE\x6F1\x5\xD0i\x2\x6EF\x6F0"+
		"\a\x6\x2\x2\x6F0\x6F2\x5\x100\x81\x2\x6F1\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3"+
		"\x2\x2\x2\x6F2\x6F4\x3\x2\x2\x2\x6F3\x6DF\x3\x2\x2\x2\x6F3\x6E5\x3\x2"+
		"\x2\x2\x6F3\x6EB\x3\x2\x2\x2\x6F4\x6F5\x3\x2\x2\x2\x6F5\x6F6\t\"\x2\x2"+
		"\x6F6\x6F9\x5\xD0i\x2\x6F7\x6F8\a\x42\x2\x2\x6F8\x6FA\x5\xD0i\x2\x6F9"+
		"\x6F7\x3\x2\x2\x2\x6F9\x6FA\x3\x2\x2\x2\x6FA\x6FB\x3\x2\x2\x2\x6FB\x6FC"+
		"\x5\xE\b\x2\x6FC\x6FF\x5*\x16\x2\x6FD\x700\a\x34\x2\x2\x6FE\x700\a\xDA"+
		"\x2\x2\x6FF\x6FD\x3\x2\x2\x2\x6FF\x6FE\x3\x2\x2\x2\x700\x701\x3\x2\x2"+
		"\x2\x701\x702\x5\xE\b\x2\x702\x828\x3\x2\x2\x2\x703\x704\a%\x2\x2\x704"+
		"\x709\x5\xA2R\x2\x705\x706\a\x18\x2\x2\x706\x708\x5\xA2R\x2\x707\x705"+
		"\x3\x2\x2\x2\x708\x70B\x3\x2\x2\x2\x709\x707\x3\x2\x2\x2\x709\x70A\x3"+
		"\x2\x2\x2\x70A\x710\x3\x2\x2\x2\x70B\x709\x3\x2\x2\x2\x70C\x70D\a\x17"+
		"\x2\x2\x70D\x70E\x5\xE\b\x2\x70E\x70F\x5*\x16\x2\x70F\x711\x3\x2\x2\x2"+
		"\x710\x70C\x3\x2\x2\x2\x710\x711\x3\x2\x2\x2\x711\x717\x3\x2\x2\x2\x712"+
		"\x714\a\x19\x2\x2\x713\x715\a%\x2\x2\x714\x713\x3\x2\x2\x2\x714\x715\x3"+
		"\x2\x2\x2\x715\x718\x3\x2\x2\x2\x716\x718\a\x1C\x2\x2\x717\x712\x3\x2"+
		"\x2\x2\x717\x716\x3\x2\x2\x2\x718\x719\x3\x2\x2\x2\x719\x71A\x5\xE\b\x2"+
		"\x71A\x828\x3\x2\x2\x2\x71B\x71C\a\x15\x2\x2\x71C\x71D\a\f\x2\x2\x71D"+
		"\x722\x5\xE\b\x2\x71E\x71F\a\f\x2\x2\x71F\x721\x5\xA2R\x2\x720\x71E\x3"+
		"\x2\x2\x2\x721\x724\x3\x2\x2\x2\x722\x720\x3\x2\x2\x2\x722\x723\x3\x2"+
		"\x2\x2\x723\x729\x3\x2\x2\x2\x724\x722\x3\x2\x2\x2\x725\x726\a\x35\x2"+
		"\x2\x726\x727\x5\xE\b\x2\x727\x728\x5*\x16\x2\x728\x72A\x3\x2\x2\x2\x729"+
		"\x725\x3\x2\x2\x2\x729\x72A\x3\x2\x2\x2\x72A\x730\x3\x2\x2\x2\x72B\x72D"+
		"\a\x19\x2\x2\x72C\x72E\a\f\x2\x2\x72D\x72C\x3\x2\x2\x2\x72D\x72E\x3\x2"+
		"\x2\x2\x72E\x731\x3\x2\x2\x2\x72F\x731\a\x1A\x2\x2\x730\x72B\x3\x2\x2"+
		"\x2\x730\x72F\x3\x2\x2\x2\x731\x732\x3\x2\x2\x2\x732\x733\x5\xE\b\x2\x733"+
		"\x828\x3\x2\x2\x2\x734\x735\a\x1D\x2\x2\x735\x828\x5\xE\b\x2\x736\x737"+
		"\a/\x2\x2\x737\x828\x5\xE\b\x2\x738\x73A\a\n\x2\x2\x739\x73B\x5\xD0i\x2"+
		"\x73A\x739\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73C\x3\x2\x2\x2\x73C"+
		"\x828\x5\xE\b\x2\x73D\x740\a=\x2\x2\x73E\x741\a\xB0\x2\x2\x73F\x741\x5"+
		"\xD0i\x2\x740\x73E\x3\x2\x2\x2\x740\x73F\x3\x2\x2\x2\x740\x741\x3\x2\x2"+
		"\x2\x741\x742\x3\x2\x2\x2\x742\x828\x5\xE\b\x2\x743\x74C\t#\x2\x2\x744"+
		"\x749\x5\xD0i\x2\x745\x746\a\x129\x2\x2\x746\x748\x5\xD0i\x2\x747\x745"+
		"\x3\x2\x2\x2\x748\x74B\x3\x2\x2\x2\x749\x747\x3\x2\x2\x2\x749\x74A\x3"+
		"\x2\x2\x2\x74A\x74D\x3\x2\x2\x2\x74B\x749\x3\x2\x2\x2\x74C\x744\x3\x2"+
		"\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x828\x5\xE\b\x2"+
		"\x74F\x750\a\t\x2\x2\x750\x751\a?\x2\x2\x751\x752\x5\xE\b\x2\x752\x755"+
		"\x5*\x16\x2\x753\x754\a<\x2\x2\x754\x756\x5\xA8U\x2\x755\x753\x3\x2\x2"+
		"\x2\x755\x756\x3\x2\x2\x2\x756\x75B\x3\x2\x2\x2\x757\x758\aN\x2\x2\x758"+
		"\x759\x5\xE\b\x2\x759\x75A\x5*\x16\x2\x75A\x75C\x3\x2\x2\x2\x75B\x757"+
		"\x3\x2\x2\x2\x75B\x75C\x3\x2\x2\x2\x75C\x762\x3\x2\x2\x2\x75D\x75F\a\x19"+
		"\x2\x2\x75E\x760\a?\x2\x2\x75F\x75E\x3\x2\x2\x2\x75F\x760\x3\x2\x2\x2"+
		"\x760\x763\x3\x2\x2\x2\x761\x763\a\xC3\x2\x2\x762\x75D\x3\x2\x2\x2\x762"+
		"\x761\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x765\x5\xE\b\x2\x765\x828"+
		"\x3\x2\x2\x2\x766\x767\ak\x2\x2\x767\x768\x5\xE\b\x2\x768\x769\x5*\x16"+
		"\x2\x769\x76A\ar\x2\x2\x76A\x76B\x5\xD0i\x2\x76B\x76C\x5\xE\b\x2\x76C"+
		"\x828\x3\x2\x2\x2\x76D\x771\a\\\x2\x2\x76E\x76F\a!\x2\x2\x76F\x771\a\xDF"+
		"\x2\x2\x770\x76D\x3\x2\x2\x2\x770\x76E\x3\x2\x2\x2\x771\x773\x3\x2\x2"+
		"\x2\x772\x774\a{\x2\x2\x773\x772\x3\x2\x2\x2\x773\x774\x3\x2\x2\x2\x774"+
		"\x77E\x3\x2\x2\x2\x775\x776\a`\x2\x2\x776\x77F\x5\xFC\x7F\x2\x777\x77A"+
		"\x5\xFC\x7F\x2\x778\x779\a\x6\x2\x2\x779\x77B\x5\x100\x81\x2\x77A\x778"+
		"\x3\x2\x2\x2\x77A\x77B\x3\x2\x2\x2\x77B\x77F\x3\x2\x2\x2\x77C\x77D\a\x94"+
		"\x2\x2\x77D\x77F\x5\xFC\x7F\x2\x77E\x775\x3\x2\x2\x2\x77E\x777\x3\x2\x2"+
		"\x2\x77E\x77C\x3\x2\x2\x2\x77F\x780\x3\x2\x2\x2\x780\x781\a-\x2\x2\x781"+
		"\x782\x5\xD0i\x2\x782\x783\x5\xE\b\x2\x783\x786\x5*\x16\x2\x784\x787\a"+
		"\x34\x2\x2\x785\x787\a\xDA\x2\x2\x786\x784\x3\x2\x2\x2\x786\x785\x3\x2"+
		"\x2\x2\x787\x788\x3\x2\x2\x2\x788\x789\x5\xE\b\x2\x789\x828\x3\x2\x2\x2"+
		"\x78A\x78C\aO\x2\x2\x78B\x78D\x5\xD0i\x2\x78C\x78B\x3\x2\x2\x2\x78C\x78D"+
		"\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x828\x5\xE\b\x2\x78F\x790\ap\x2"+
		"\x2\x790\x791\x5\xE\b\x2\x791\x798\x5*\x16\x2\x792\x794\aM\x2\x2\x793"+
		"\x795\x5\xA6T\x2\x794\x793\x3\x2\x2\x2\x794\x795\x3\x2\x2\x2\x795\x797"+
		"\x3\x2\x2\x2\x796\x792\x3\x2\x2\x2\x797\x79A\x3\x2\x2\x2\x798\x796\x3"+
		"\x2\x2\x2\x798\x799\x3\x2\x2\x2\x799\x79F\x3\x2\x2\x2\x79A\x798\x3\x2"+
		"\x2\x2\x79B\x79C\aN\x2\x2\x79C\x79D\x5\xE\b\x2\x79D\x79E\x5*\x16\x2\x79E"+
		"\x7A0\x3\x2\x2\x2\x79F\x79B\x3\x2\x2\x2\x79F\x7A0\x3\x2\x2\x2\x7A0\x7A6"+
		"\x3\x2\x2\x2\x7A1\x7A3\a\x19\x2\x2\x7A2\x7A4\ap\x2\x2\x7A3\x7A2\x3\x2"+
		"\x2\x2\x7A3\x7A4\x3\x2\x2\x2\x7A4\x7A7\x3\x2\x2\x2\x7A5\x7A7\a\xDD\x2"+
		"\x2\x7A6\x7A1\x3\x2\x2\x2\x7A6\x7A5\x3\x2\x2\x2\x7A7\x7A8\x3\x2\x2\x2"+
		"\x7A8\x7A9\x5\xE\b\x2\x7A9\x828\x3\x2\x2\x2\x7AA\x7AB\a\t\x2\x2\x7AB\x7AC"+
		"\a\x64\x2\x2\x7AC\x7AD\x5\xD0i\x2\x7AD\x7AE\x5\xE\b\x2\x7AE\x7AF\x5*\x16"+
		"\x2\x7AF\x7B1\a\x19\x2\x2\x7B0\x7B2\a\x64\x2\x2\x7B1\x7B0\x3\x2\x2\x2"+
		"\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x3\x2\x2\x2\x7B3\x7B4\x5\xE\b\x2\x7B4"+
		"\x828\x3\x2\x2\x2\x7B5\x7B6\a\x98\x2\x2\x7B6\x7B9\a=\x2\x2\x7B7\x7BA\a"+
		"\xB0\x2\x2\x7B8\x7BA\x5\xD0i\x2\x7B9\x7B7\x3\x2\x2\x2\x7B9\x7B8\x3\x2"+
		"\x2\x2\x7B9\x7BA\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\x828\x5\xE\b\x2"+
		"\x7BC\x7BD\a\x98\x2\x2\x7BD\x7BE\t$\x2\x2\x7BE\x828\x5\xE\b\x2\x7BF\x7C1"+
		"\t%\x2\x2\x7C0\x7BF\x3\x2\x2\x2\x7C0\x7C1\x3\x2\x2\x2\x7C1\x7C2\x3\x2"+
		"\x2\x2\x7C2\x7C3\a\x91\x2\x2\x7C3\x7C4\x5\xD0i\x2\x7C4\x7C6\x5\xE\b\x2"+
		"\x7C5\x7C7\x5\xA4S\x2\x7C6\x7C5\x3\x2\x2\x2\x7C7\x7C8\x3\x2\x2\x2\x7C8"+
		"\x7C6\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2\x2\x7C9\x7CA\x3\x2\x2\x2\x7CA\x7CC"+
		"\a\x19\x2\x2\x7CB\x7CD\a\x91\x2\x2\x7CC\x7CB\x3\x2\x2\x2\x7CC\x7CD\x3"+
		"\x2\x2\x2\x7CD\x7CE\x3\x2\x2\x2\x7CE\x7CF\x5\xE\b\x2\x7CF\x828\x3\x2\x2"+
		"\x2\x7D0\x7D1\a\t\x2\x2\x7D1\x7D3\aJ\x2\x2\x7D2\x7D4\a{\x2\x2\x7D3\x7D2"+
		"\x3\x2\x2\x2\x7D3\x7D4\x3\x2\x2\x2\x7D4\x7D7\x3\x2\x2\x2\x7D5\x7D8\x5"+
		"\xD0i\x2\x7D6\x7D8\x5\xAAV\x2\x7D7\x7D5\x3\x2\x2\x2\x7D7\x7D6\x3\x2\x2"+
		"\x2\x7D8\x7D9\x3\x2\x2\x2\x7D9\x7DA\x5\xE\b\x2\x7DA\x7DB\x5*\x16\x2\x7DB"+
		"\x7DD\a\x19\x2\x2\x7DC\x7DE\aJ\x2\x2\x7DD\x7DC\x3\x2\x2\x2\x7DD\x7DE\x3"+
		"\x2\x2\x2\x7DE\x7DF\x3\x2\x2\x2\x7DF\x7E0\x5\xE\b\x2\x7E0\x828\x3\x2\x2"+
		"\x2\x7E1\x7E2\a\t\x2\x2\x7E2\x7E3\a\x81\x2\x2\x7E3\x7E4\x5\xAAV\x2\x7E4"+
		"\x7E5\x5\xE\b\x2\x7E5\x7E6\x5*\x16\x2\x7E6\x7E8\a\x19\x2\x2\x7E7\x7E9"+
		"\a\x81\x2\x2\x7E8\x7E7\x3\x2\x2\x2\x7E8\x7E9\x3\x2\x2\x2\x7E9\x7EA\x3"+
		"\x2\x2\x2\x7EA\x7EB\x5\xE\b\x2\x7EB\x828\x3\x2\x2\x2\x7EC\x7ED\a\x99\x2"+
		"\x2\x7ED\x7F3\x5\xD0i\x2\x7EE\x7EF\a\x6\x2\x2\x7EF\x7F1\x5\x100\x81\x2"+
		"\x7F0\x7F2\x5\xC2\x62\x2\x7F1\x7F0\x3\x2\x2\x2\x7F1\x7F2\x3\x2\x2\x2\x7F2"+
		"\x7F4\x3\x2\x2\x2\x7F3\x7EE\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7F5"+
		"\x3\x2\x2\x2\x7F5\x7F6\x5\xE\b\x2\x7F6\x7FC\x5*\x16\x2\x7F7\x7F9\a\x19"+
		"\x2\x2\x7F8\x7FA\a\x99\x2\x2\x7F9\x7F8\x3\x2\x2\x2\x7F9\x7FA\x3\x2\x2"+
		"\x2\x7FA\x7FD\x3\x2\x2\x2\x7FB\x7FD\a\xDE\x2\x2\x7FC\x7F7\x3\x2\x2\x2"+
		"\x7FC\x7FB\x3\x2\x2\x2\x7FD\x7FE\x3\x2\x2\x2\x7FE\x7FF\x5\xE\b\x2\x7FF"+
		"\x828\x3\x2\x2\x2\x800\x801\a\t\x2\x2\x801\x802\x5\xA0Q\x2\x802\x803\x5"+
		"\xE\b\x2\x803\x804\x5*\x16\x2\x804\x806\a\x19\x2\x2\x805\x807\x5\xA0Q"+
		"\x2\x806\x805\x3\x2\x2\x2\x806\x807\x3\x2\x2\x2\x807\x808\x3\x2\x2\x2"+
		"\x808\x809\x5\xE\b\x2\x809\x828\x3\x2\x2\x2\x80A\x80B\a\xF4\x2\x2\x80B"+
		"\x80C\x5\xD0i\x2\x80C\x80D\x5\xE\b\x2\x80D\x828\x3\x2\x2\x2\x80E\x80F"+
		"\t&\x2\x2\x80F\x810\a\x145\x2\x2\x810\x828\a\x169\x2\x2\x811\x813\a\x15"+
		"\x2\x2\x812\x814\a\x12B\x2\x2\x813\x812\x3\x2\x2\x2\x813\x814\x3\x2\x2"+
		"\x2\x814\x815\x3\x2\x2\x2\x815\x818\x5\xFE\x80\x2\x816\x817\a\x99\x2\x2"+
		"\x817\x819\x5\xEAv\x2\x818\x816\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819"+
		"\x81A\x3\x2\x2\x2\x81A\x81B\x5\xE\b\x2\x81B\x828\x3\x2\x2\x2\x81C\x81D"+
		"\x6P\x13\x2\x81D\x822\x5\xD0i\x2\x81E\x81F\a\x129\x2\x2\x81F\x821\x5\xD0"+
		"i\x2\x820\x81E\x3\x2\x2\x2\x821\x824\x3\x2\x2\x2\x822\x820\x3\x2\x2\x2"+
		"\x822\x823\x3\x2\x2\x2\x823\x825\x3\x2\x2\x2\x824\x822\x3\x2\x2\x2\x825"+
		"\x826\x5\xE\b\x2\x826\x828\x3\x2\x2\x2\x827\x6BE\x3\x2\x2\x2\x827\x6BF"+
		"\x3\x2\x2\x2\x827\x6C0\x3\x2\x2\x2\x827\x6C1\x3\x2\x2\x2\x827\x6C3\x3"+
		"\x2\x2\x2\x827\x6C4\x3\x2\x2\x2\x827\x6C6\x3\x2\x2\x2\x827\x6C9\x3\x2"+
		"\x2\x2\x827\x6D8\x3\x2\x2\x2\x827\x6DE\x3\x2\x2\x2\x827\x703\x3\x2\x2"+
		"\x2\x827\x71B\x3\x2\x2\x2\x827\x734\x3\x2\x2\x2\x827\x736\x3\x2\x2\x2"+
		"\x827\x738\x3\x2\x2\x2\x827\x73D\x3\x2\x2\x2\x827\x743\x3\x2\x2\x2\x827"+
		"\x74F\x3\x2\x2\x2\x827\x766\x3\x2\x2\x2\x827\x770\x3\x2\x2\x2\x827\x78A"+
		"\x3\x2\x2\x2\x827\x78F\x3\x2\x2\x2\x827\x7AA\x3\x2\x2\x2\x827\x7B5\x3"+
		"\x2\x2\x2\x827\x7BC\x3\x2\x2\x2\x827\x7C0\x3\x2\x2\x2\x827\x7D0\x3\x2"+
		"\x2\x2\x827\x7E1\x3\x2\x2\x2\x827\x7EC\x3\x2\x2\x2\x827\x800\x3\x2\x2"+
		"\x2\x827\x80A\x3\x2\x2\x2\x827\x80E\x3\x2\x2\x2\x827\x811\x3\x2\x2\x2"+
		"\x827\x81C\x3\x2\x2\x2\x828\x9F\x3\x2\x2\x2\x829\x82A\t\'\x2\x2\x82A\xA1"+
		"\x3\x2\x2\x2\x82B\x82D\x5\xD0i\x2\x82C\x82E\a\xD6\x2\x2\x82D\x82C\x3\x2"+
		"\x2\x2\x82D\x82E\x3\x2\x2\x2\x82E\x82F\x3\x2\x2\x2\x82F\x830\x5\xE\b\x2"+
		"\x830\x831\x5*\x16\x2\x831\xA3\x3\x2\x2\x2\x832\x833\a\f\x2\x2\x833\x836"+
		"\x5\xD0i\x2\x834\x835\a\x96\x2\x2\x835\x837\x5\xD0i\x2\x836\x834\x3\x2"+
		"\x2\x2\x836\x837\x3\x2\x2\x2\x837\x842\x3\x2\x2\x2\x838\x839\a\f\x2\x2"+
		"\x839\x83A\x5\xFC\x7F\x2\x83A\x83B\a\x6\x2\x2\x83B\x83E\x5\x100\x81\x2"+
		"\x83C\x83D\a\x96\x2\x2\x83D\x83F\x5\xD0i\x2\x83E\x83C\x3\x2\x2\x2\x83E"+
		"\x83F\x3\x2\x2\x2\x83F\x842\x3\x2\x2\x2\x840\x842\a\x35\x2\x2\x841\x832"+
		"\x3\x2\x2\x2\x841\x838\x3\x2\x2\x2\x841\x840\x3\x2\x2\x2\x842\x843\x3"+
		"\x2\x2\x2\x843\x844\x5\xE\b\x2\x844\x845\x5*\x16\x2\x845\xA5\x3\x2\x2"+
		"\x2\x846\x848\a\x46\x2\x2\x847\x846\x3\x2\x2\x2\x847\x848\x3\x2\x2\x2"+
		"\x848\x84A\x3\x2\x2\x2\x849\x84B\x5\xFC\x7F\x2\x84A\x849\x3\x2\x2\x2\x84A"+
		"\x84B\x3\x2\x2\x2\x84B\x84E\x3\x2\x2\x2\x84C\x84D\a\x6\x2\x2\x84D\x84F"+
		"\x5\x100\x81\x2\x84E\x84C\x3\x2\x2\x2\x84E\x84F\x3\x2\x2\x2\x84F\x852"+
		"\x3\x2\x2\x2\x850\x851\a\x96\x2\x2\x851\x853\x5\xD0i\x2\x852\x850\x3\x2"+
		"\x2\x2\x852\x853\x3\x2\x2\x2\x853\x854\x3\x2\x2\x2\x854\x855\x5\xE\b\x2"+
		"\x855\x856\x5*\x16\x2\x856\xA7\x3\x2\x2\x2\x857\x858\aJ\x2\x2\x858\x85A"+
		"\x5\xFC\x7F\x2\x859\x857\x3\x2\x2\x2\x859\x85A\x3\x2\x2\x2\x85A\x85B\x3"+
		"\x2\x2\x2\x85B\x85C\x5\xE\b\x2\x85C\x85D\x5*\x16\x2\x85D\xA9\x3\x2\x2"+
		"\x2\x85E\x860\a.\x2\x2\x85F\x85E\x3\x2\x2\x2\x85F\x860\x3\x2\x2\x2\x860"+
		"\x861\x3\x2\x2\x2\x861\x864\a`\x2\x2\x862\x864\a\x94\x2\x2\x863\x85F\x3"+
		"\x2\x2\x2\x863\x862\x3\x2\x2\x2\x864\x865\x3\x2\x2\x2\x865\x86A\x5\xAC"+
		"W\x2\x866\x867\a\x129\x2\x2\x867\x869\x5\xACW\x2\x868\x866\x3\x2\x2\x2"+
		"\x869\x86C\x3\x2\x2\x2\x86A\x868\x3\x2\x2\x2\x86A\x86B\x3\x2\x2\x2\x86B"+
		"\x87B\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86D\x86E\a.\x2\x2\x86E\x873\x5"+
		"\xACW\x2\x86F\x870\a\x129\x2\x2\x870\x872\x5\xACW\x2\x871\x86F\x3\x2\x2"+
		"\x2\x872\x875\x3\x2\x2\x2\x873\x871\x3\x2\x2\x2\x873\x874\x3\x2\x2\x2"+
		"\x874\x878\x3\x2\x2\x2\x875\x873\x3\x2\x2\x2\x876\x877\a\x6\x2\x2\x877"+
		"\x879\x5\x100\x81\x2\x878\x876\x3\x2\x2\x2\x878\x879\x3\x2\x2\x2\x879"+
		"\x87B\x3\x2\x2\x2\x87A\x863\x3\x2\x2\x2\x87A\x86D\x3\x2\x2\x2\x87B\xAB"+
		"\x3\x2\x2\x2\x87C\x87D\x5\xFC\x7F\x2\x87D\x87E\x5\xCEh\x2\x87E\x87F\x5"+
		"\xD0i\x2\x87F\xAD\x3\x2\x2\x2\x880\x882\a.\x2\x2\x881\x883\a\x41\x2\x2"+
		"\x882\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884"+
		"\x889\x5\xB0Y\x2\x885\x886\a\x129\x2\x2\x886\x888\x5\xB0Y\x2\x887\x885"+
		"\x3\x2\x2\x2\x888\x88B\x3\x2\x2\x2\x889\x887\x3\x2\x2\x2\x889\x88A\x3"+
		"\x2\x2\x2\x88A\x88C\x3\x2\x2\x2\x88B\x889\x3\x2\x2\x2\x88C\x88D\x5\xE"+
		"\b\x2\x88D\x906\x3\x2\x2\x2\x88E\x88F\a\x41\x2\x2\x88F\x890\a.\x2\x2\x890"+
		"\x895\x5\xB0Y\x2\x891\x892\a\x129\x2\x2\x892\x894\x5\xB0Y\x2\x893\x891"+
		"\x3\x2\x2\x2\x894\x897\x3\x2\x2\x2\x895\x893\x3\x2\x2\x2\x895\x896\x3"+
		"\x2\x2\x2\x896\x898\x3\x2\x2\x2\x897\x895\x3\x2\x2\x2\x898\x899\x5\xE"+
		"\b\x2\x899\x906\x3\x2\x2\x2\x89A\x89B\x6X\x14\x2\x89B\x89C\a\x41\x2\x2"+
		"\x89C\x8A1\x5\xB0Y\x2\x89D\x89E\a\x129\x2\x2\x89E\x8A0\x5\xB0Y\x2\x89F"+
		"\x89D\x3\x2\x2\x2\x8A0\x8A3\x3\x2\x2\x2\x8A1\x89F\x3\x2\x2\x2\x8A1\x8A2"+
		"\x3\x2\x2\x2\x8A2\x8A4\x3\x2\x2\x2\x8A3\x8A1\x3\x2\x2\x2\x8A4\x8A5\x5"+
		"\xE\b\x2\x8A5\x906\x3\x2\x2\x2\x8A6\x8A8\a\x41\x2\x2\x8A7\x8A6\x3\x2\x2"+
		"\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x8A9\x3\x2\x2\x2\x8A9\x8AA\a\x94\x2\x2"+
		"\x8AA\x8AF\x5\xB2Z\x2\x8AB\x8AC\a\x129\x2\x2\x8AC\x8AE\x5\xB2Z\x2\x8AD"+
		"\x8AB\x3\x2\x2\x2\x8AE\x8B1\x3\x2\x2\x2\x8AF\x8AD\x3\x2\x2\x2\x8AF\x8B0"+
		"\x3\x2\x2\x2\x8B0\x8B2\x3\x2\x2\x2\x8B1\x8AF\x3\x2\x2\x2\x8B2\x8B3\x5"+
		"\xE\b\x2\x8B3\x906\x3\x2\x2\x2\x8B4\x8B6\a\x41\x2\x2\x8B5\x8B7\a.\x2\x2"+
		"\x8B6\x8B5\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2\x8B7\x8B8\x3\x2\x2\x2\x8B8"+
		"\x8B9\a`\x2\x2\x8B9\x8BE\x5\xB2Z\x2\x8BA\x8BB\a\x129\x2\x2\x8BB\x8BD\x5"+
		"\xB2Z\x2\x8BC\x8BA\x3\x2\x2\x2\x8BD\x8C0\x3\x2\x2\x2\x8BE\x8BC\x3\x2\x2"+
		"\x2\x8BE\x8BF\x3\x2\x2\x2\x8BF\x8C1\x3\x2\x2\x2\x8C0\x8BE\x3\x2\x2\x2"+
		"\x8C1\x8C2\x5\xE\b\x2\x8C2\x906\x3\x2\x2\x2\x8C3\x8C5\a.\x2\x2\x8C4\x8C6"+
		"\a\x41\x2\x2\x8C5\x8C4\x3\x2\x2\x2\x8C5\x8C6\x3\x2\x2\x2\x8C6\x8C7\x3"+
		"\x2\x2\x2\x8C7\x8C8\a`\x2\x2\x8C8\x8CD\x5\xB2Z\x2\x8C9\x8CA\a\x129\x2"+
		"\x2\x8CA\x8CC\x5\xB2Z\x2\x8CB\x8C9\x3\x2\x2\x2\x8CC\x8CF\x3\x2\x2\x2\x8CD"+
		"\x8CB\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D0\x3\x2\x2\x2\x8CF\x8CD"+
		"\x3\x2\x2\x2\x8D0\x8D1\x5\xE\b\x2\x8D1\x906\x3\x2\x2\x2\x8D2\x8D4\aJ\x2"+
		"\x2\x8D3\x8D5\a\x41\x2\x2\x8D4\x8D3\x3\x2\x2\x2\x8D4\x8D5\x3\x2\x2\x2"+
		"\x8D5\x8D6\x3\x2\x2\x2\x8D6\x8D7\a\x94\x2\x2\x8D7\x8DC\x5\xB2Z\x2\x8D8"+
		"\x8D9\a\x129\x2\x2\x8D9\x8DB\x5\xB2Z\x2\x8DA\x8D8\x3\x2\x2\x2\x8DB\x8DE"+
		"\x3\x2\x2\x2\x8DC\x8DA\x3\x2\x2\x2\x8DC\x8DD\x3\x2\x2\x2\x8DD\x8DF\x3"+
		"\x2\x2\x2\x8DE\x8DC\x3\x2\x2\x2\x8DF\x8E0\x5\xE\b\x2\x8E0\x906\x3\x2\x2"+
		"\x2\x8E1\x8E3\aJ\x2\x2\x8E2\x8E4\a\x41\x2\x2\x8E3\x8E2\x3\x2\x2\x2\x8E3"+
		"\x8E4\x3\x2\x2\x2\x8E4\x8E6\x3\x2\x2\x2\x8E5\x8E7\a.\x2\x2\x8E6\x8E5\x3"+
		"\x2\x2\x2\x8E6\x8E7\x3\x2\x2\x2\x8E7\x8E8\x3\x2\x2\x2\x8E8\x8E9\a`\x2"+
		"\x2\x8E9\x8EE\x5\xB2Z\x2\x8EA\x8EB\a\x129\x2\x2\x8EB\x8ED\x5\xB2Z\x2\x8EC"+
		"\x8EA\x3\x2\x2\x2\x8ED\x8F0\x3\x2\x2\x2\x8EE\x8EC\x3\x2\x2\x2\x8EE\x8EF"+
		"\x3\x2\x2\x2\x8EF\x8F1\x3\x2\x2\x2\x8F0\x8EE\x3\x2\x2\x2\x8F1\x8F2\x5"+
		"\xE\b\x2\x8F2\x906\x3\x2\x2\x2\x8F3\x8F9\a\x94\x2\x2\x8F4\x8F6\a.\x2\x2"+
		"\x8F5\x8F4\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2\x8F6\x8F7\x3\x2\x2\x2\x8F7"+
		"\x8F9\a`\x2\x2\x8F8\x8F3\x3\x2\x2\x2\x8F8\x8F5\x3\x2\x2\x2\x8F9\x8FA\x3"+
		"\x2\x2\x2\x8FA\x8FB\x5\x118\x8D\x2\x8FB\x8FC\x5\xCEh\x2\x8FC\x8FD\x5\xD0"+
		"i\x2\x8FD\x8FE\x5\xE\b\x2\x8FE\x906\x3\x2\x2\x2\x8FF\x900\a.\x2\x2\x900"+
		"\x901\x5\x11A\x8E\x2\x901\x902\x5\xCEh\x2\x902\x903\x5\xD0i\x2\x903\x904"+
		"\x5\xE\b\x2\x904\x906\x3\x2\x2\x2\x905\x880\x3\x2\x2\x2\x905\x88E\x3\x2"+
		"\x2\x2\x905\x89A\x3\x2\x2\x2\x905\x8A7\x3\x2\x2\x2\x905\x8B4\x3\x2\x2"+
		"\x2\x905\x8C3\x3\x2\x2\x2\x905\x8D2\x3\x2\x2\x2\x905\x8E1\x3\x2\x2\x2"+
		"\x905\x8F8\x3\x2\x2\x2\x905\x8FF\x3\x2\x2\x2\x906\xAF\x3\x2\x2\x2\x907"+
		"\x909\aU\x2\x2\x908\x907\x3\x2\x2\x2\x908\x909\x3\x2\x2\x2\x909\x90B\x3"+
		"\x2\x2\x2\x90A\x90C\a\x12\x2\x2\x90B\x90A\x3\x2\x2\x2\x90B\x90C\x3\x2"+
		"\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x912\x5\xFC\x7F\x2\x90E\x90F\a\x126"+
		"\x2\x2\x90F\x910\x5\x66\x34\x2\x910\x911\a\x127\x2\x2\x911\x913\x3\x2"+
		"\x2\x2\x912\x90E\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x917\x3\x2\x2"+
		"\x2\x914\x915\x5\xCEh\x2\x915\x916\x5\xD0i\x2\x916\x918\x3\x2\x2\x2\x917"+
		"\x914\x3\x2\x2\x2\x917\x918\x3\x2\x2\x2\x918\x91E\x3\x2\x2\x2\x919\x91A"+
		"\t\r\x2\x2\x91A\x91C\x5\x100\x81\x2\x91B\x91D\x5\xC2\x62\x2\x91C\x91B"+
		"\x3\x2\x2\x2\x91C\x91D\x3\x2\x2\x2\x91D\x91F\x3\x2\x2\x2\x91E\x919\x3"+
		"\x2\x2\x2\x91E\x91F\x3\x2\x2\x2\x91F\x932\x3\x2\x2\x2\x920\x921\x6Y\x15"+
		"\x2\x921\x922\x5\xFC\x7F\x2\x922\x923\a\x122\x2\x2\x923\x924\x5\x66\x34"+
		"\x2\x924\x928\a\x123\x2\x2\x925\x926\x5\xCEh\x2\x926\x927\x5\xD0i\x2\x927"+
		"\x929\x3\x2\x2\x2\x928\x925\x3\x2\x2\x2\x928\x929\x3\x2\x2\x2\x929\x92F"+
		"\x3\x2\x2\x2\x92A\x92B\t\r\x2\x2\x92B\x92D\x5\x100\x81\x2\x92C\x92E\x5"+
		"\xC2\x62\x2\x92D\x92C\x3\x2\x2\x2\x92D\x92E\x3\x2\x2\x2\x92E\x930\x3\x2"+
		"\x2\x2\x92F\x92A\x3\x2\x2\x2\x92F\x930\x3\x2\x2\x2\x930\x932\x3\x2\x2"+
		"\x2\x931\x908\x3\x2\x2\x2\x931\x920\x3\x2\x2\x2\x932\xB1\x3\x2\x2\x2\x933"+
		"\x935\aU\x2\x2\x934\x933\x3\x2\x2\x2\x934\x935\x3\x2\x2\x2\x935\x936\x3"+
		"\x2\x2\x2\x936\x937\x5\xFC\x7F\x2\x937\x938\x5\xCEh\x2\x938\x939\x5\xD0"+
		"i\x2\x939\xB3\x3\x2\x2\x2\x93A\x93B\a \x2\x2\x93B\x940\x5\xFA~\x2\x93C"+
		"\x93D\a\x129\x2\x2\x93D\x93F\x5\xFA~\x2\x93E\x93C\x3\x2\x2\x2\x93F\x942"+
		"\x3\x2\x2\x2\x940\x93E\x3\x2\x2\x2\x940\x941\x3\x2\x2\x2\x941\x945\x3"+
		"\x2\x2\x2\x942\x940\x3\x2\x2\x2\x943\x944\a-\x2\x2\x944\x946\x5\xFA~\x2"+
		"\x945\x943\x3\x2\x2\x2\x945\x946\x3\x2\x2\x2\x946\x947\x3\x2\x2\x2\x947"+
		"\x948\x5\xE\b\x2\x948\xB5\x3\x2\x2\x2\x949\x94A\t(\x2\x2\x94A\x94F\x5"+
		"\xB8]\x2\x94B\x94C\a\x129\x2\x2\x94C\x94E\x5\xB8]\x2\x94D\x94B\x3\x2\x2"+
		"\x2\x94E\x951\x3\x2\x2\x2\x94F\x94D\x3\x2\x2\x2\x94F\x950\x3\x2\x2\x2"+
		"\x950\x952\x3\x2\x2\x2\x951\x94F\x3\x2\x2\x2\x952\x953\x5\xE\b\x2\x953"+
		"\xB7\x3\x2\x2\x2\x954\x956\a\x12B\x2\x2\x955\x954\x3\x2\x2\x2\x955\x956"+
		"\x3\x2\x2\x2\x956\x957\x3\x2\x2\x2\x957\x95C\x5\xFE\x80\x2\x958\x959\a"+
		"\x126\x2\x2\x959\x95A\x5\x66\x34\x2\x95A\x95B\a\x127\x2\x2\x95B\x95D\x3"+
		"\x2\x2\x2\x95C\x958\x3\x2\x2\x2\x95C\x95D\x3\x2\x2\x2\x95D\x961\x3\x2"+
		"\x2\x2\x95E\x95F\x5\xCEh\x2\x95F\x960\x5\xD0i\x2\x960\x962\x3\x2\x2\x2"+
		"\x961\x95E\x3\x2\x2\x2\x961\x962\x3\x2\x2\x2\x962\xB9\x3\x2\x2\x2\x963"+
		"\x964\t(\x2\x2\x964\x969\x5\xC8\x65\x2\x965\x966\a\x129\x2\x2\x966\x968"+
		"\x5\xC8\x65\x2\x967\x965\x3\x2\x2\x2\x968\x96B\x3\x2\x2\x2\x969\x967\x3"+
		"\x2\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96C\x3\x2\x2\x2\x96B\x969\x3\x2"+
		"\x2\x2\x96C\x96D\x5\xE\b\x2\x96D\xBB\x3\x2\x2\x2\x96E\x96F\t)\x2\x2\x96F"+
		"\x974\x5\xC0\x61\x2\x970\x971\a\x129\x2\x2\x971\x973\x5\xC0\x61\x2\x972"+
		"\x970\x3\x2\x2\x2\x973\x976\x3\x2\x2\x2\x974\x972\x3\x2\x2\x2\x974\x975"+
		"\x3\x2\x2\x2\x975\x977\x3\x2\x2\x2\x976\x974\x3\x2\x2\x2\x977\x978\x5"+
		"\xE\b\x2\x978\x994\x3\x2\x2\x2\x979\x97B\a;\x2\x2\x97A\x97C\a\x9D\x2\x2"+
		"\x97B\x97A\x3\x2\x2\x2\x97B\x97C\x3\x2\x2\x2\x97C\x97D\x3\x2\x2\x2\x97D"+
		"\x982\x5\xC0\x61\x2\x97E\x97F\a\x129\x2\x2\x97F\x981\x5\xC0\x61\x2\x980"+
		"\x97E\x3\x2\x2\x2\x981\x984\x3\x2\x2\x2\x982\x980\x3\x2\x2\x2\x982\x983"+
		"\x3\x2\x2\x2\x983\x985\x3\x2\x2\x2\x984\x982\x3\x2\x2\x2\x985\x986\x5"+
		"\xE\b\x2\x986\x994\x3\x2\x2\x2\x987\x988\a.\x2\x2\x988\x989\a\x9D\x2\x2"+
		"\x989\x98E\x5\xC0\x61\x2\x98A\x98B\a\x129\x2\x2\x98B\x98D\x5\xC0\x61\x2"+
		"\x98C\x98A\x3\x2\x2\x2\x98D\x990\x3\x2\x2\x2\x98E\x98C\x3\x2\x2\x2\x98E"+
		"\x98F\x3\x2\x2\x2\x98F\x991\x3\x2\x2\x2\x990\x98E\x3\x2\x2\x2\x991\x992"+
		"\x5\xE\b\x2\x992\x994\x3\x2\x2\x2\x993\x96E\x3\x2\x2\x2\x993\x979\x3\x2"+
		"\x2\x2\x993\x987\x3\x2\x2\x2\x994\xBD\x3\x2\x2\x2\x995\x996\a\xCF\x2\x2"+
		"\x996\x99B\x5\xC4\x63\x2\x997\x998\a\x129\x2\x2\x998\x99A\x5\xC4\x63\x2"+
		"\x999\x997\x3\x2\x2\x2\x99A\x99D\x3\x2\x2\x2\x99B\x999\x3\x2\x2\x2\x99B"+
		"\x99C\x3\x2\x2\x2\x99C\x99E\x3\x2\x2\x2\x99D\x99B\x3\x2\x2\x2\x99E\x99F"+
		"\x5\xE\b\x2\x99F\xBF\x3\x2\x2\x2\x9A0\x9A2\a\x12B\x2\x2\x9A1\x9A0\x3\x2"+
		"\x2\x2\x9A1\x9A2\x3\x2\x2\x2\x9A2\x9A3\x3\x2\x2\x2\x9A3\x9BA\x5\xFE\x80"+
		"\x2\x9A4\x9A5\a\x126\x2\x2\x9A5\x9AA\x5\xD0i\x2\x9A6\x9A7\a\x129\x2\x2"+
		"\x9A7\x9A9\x5\xD0i\x2\x9A8\x9A6\x3\x2\x2\x2\x9A9\x9AC\x3\x2\x2\x2\x9AA"+
		"\x9A8\x3\x2\x2\x2\x9AA\x9AB\x3\x2\x2\x2\x9AB\x9AD\x3\x2\x2\x2\x9AC\x9AA"+
		"\x3\x2\x2\x2\x9AD\x9AE\a\x127\x2\x2\x9AE\x9BB\x3\x2\x2\x2\x9AF\x9B0\a"+
		"\x122\x2\x2\x9B0\x9B5\x5\xD0i\x2\x9B1\x9B2\a\x129\x2\x2\x9B2\x9B4\x5\xD0"+
		"i\x2\x9B3\x9B1\x3\x2\x2\x2\x9B4\x9B7\x3\x2\x2\x2\x9B5\x9B3\x3\x2\x2\x2"+
		"\x9B5\x9B6\x3\x2\x2\x2\x9B6\x9B8\x3\x2\x2\x2\x9B7\x9B5\x3\x2\x2\x2\x9B8"+
		"\x9B9\a\x123\x2\x2\x9B9\x9BB\x3\x2\x2\x2\x9BA\x9A4\x3\x2\x2\x2\x9BA\x9AF"+
		"\x3\x2\x2\x2\x9BB\x9BD\x3\x2\x2\x2\x9BC\x9BE\x5\xC6\x64\x2\x9BD\x9BC\x3"+
		"\x2\x2\x2\x9BD\x9BE\x3\x2\x2\x2\x9BE\x9DC\x3\x2\x2\x2\x9BF\x9D6\x5\xD0"+
		"i\x2\x9C0\x9C1\a\x126\x2\x2\x9C1\x9C6\x5\xD0i\x2\x9C2\x9C3\a\x129\x2\x2"+
		"\x9C3\x9C5\x5\xD0i\x2\x9C4\x9C2\x3\x2\x2\x2\x9C5\x9C8\x3\x2\x2\x2\x9C6"+
		"\x9C4\x3\x2\x2\x2\x9C6\x9C7\x3\x2\x2\x2\x9C7\x9C9\x3\x2\x2\x2\x9C8\x9C6"+
		"\x3\x2\x2\x2\x9C9\x9CA\a\x127\x2\x2\x9CA\x9D7\x3\x2\x2\x2\x9CB\x9CC\a"+
		"\x122\x2\x2\x9CC\x9D1\x5\xD0i\x2\x9CD\x9CE\a\x129\x2\x2\x9CE\x9D0\x5\xD0"+
		"i\x2\x9CF\x9CD\x3\x2\x2\x2\x9D0\x9D3\x3\x2\x2\x2\x9D1\x9CF\x3\x2\x2\x2"+
		"\x9D1\x9D2\x3\x2\x2\x2\x9D2\x9D4\x3\x2\x2\x2\x9D3\x9D1\x3\x2\x2\x2\x9D4"+
		"\x9D5\a\x123\x2\x2\x9D5\x9D7\x3\x2\x2\x2\x9D6\x9C0\x3\x2\x2\x2\x9D6\x9CB"+
		"\x3\x2\x2\x2\x9D7\x9D9\x3\x2\x2\x2\x9D8\x9DA\x5\xC6\x64\x2\x9D9\x9D8\x3"+
		"\x2\x2\x2\x9D9\x9DA\x3\x2\x2\x2\x9DA\x9DC\x3\x2\x2\x2\x9DB\x9A1\x3\x2"+
		"\x2\x2\x9DB\x9BF\x3\x2\x2\x2\x9DC\xC1\x3\x2\x2\x2\x9DD\x9DE\a\x89\x2\x2"+
		"\x9DE\x9DF\x5\xFA~\x2\x9DF\xC3\x3\x2\x2\x2\x9E0\x9E2\x5\xFE\x80\x2\x9E1"+
		"\x9E3\x5\xC6\x64\x2\x9E2\x9E1\x3\x2\x2\x2\x9E2\x9E3\x3\x2\x2\x2\x9E3\xC5"+
		"\x3\x2\x2\x2\x9E4\x9E5\a\x6\x2\x2\x9E5\x9E7\x5\x100\x81\x2\x9E6\x9E8\x5"+
		"\xC2\x62\x2\x9E7\x9E6\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\xC7\x3\x2"+
		"\x2\x2\x9E9\x9EB\a\x12B\x2\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA\x9EB\x3\x2\x2"+
		"\x2\x9EB\x9EC\x3\x2\x2\x2\x9EC\x9F0\x5\xFE\x80\x2\x9ED\x9EE\x5\xCEh\x2"+
		"\x9EE\x9EF\x5\xD0i\x2\x9EF\x9F1\x3\x2\x2\x2\x9F0\x9ED\x3\x2\x2\x2\x9F0"+
		"\x9F1\x3\x2\x2\x2\x9F1\x9F3\x3\x2\x2\x2\x9F2\x9F4\x5\xC6\x64\x2\x9F3\x9F2"+
		"\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\xC9\x3\x2\x2\x2\x9F5\x9F7\x5\xCC"+
		"g\x2\x9F6\x9F5\x3\x2\x2\x2\x9F6\x9F7\x3\x2\x2\x2\x9F7\x9F8\x3\x2\x2\x2"+
		"\x9F8\x9F9\a.\x2\x2\x9F9\x9FA\x5\x12\n\x2\x9FA\x9FB\x5\x14\v\x2\x9FB\x9FC"+
		"\x5\xE\b\x2\x9FC\xA00\x5*\x16\x2\x9FD\xA01\t\x4\x2\x2\x9FE\x9FF\a\x19"+
		"\x2\x2\x9FF\xA01\x5\x12\n\x2\xA00\x9FD\x3\x2\x2\x2\xA00\x9FE\x3\x2\x2"+
		"\x2\xA01\xA02\x3\x2\x2\x2\xA02\xA03\a\x169\x2\x2\xA03\xCB\x3\x2\x2\x2"+
		"\xA04\xA06\t*\x2\x2\xA05\xA04\x3\x2\x2\x2\xA06\xA07\x3\x2\x2\x2\xA07\xA05"+
		"\x3\x2\x2\x2\xA07\xA08\x3\x2\x2\x2\xA08\xCD\x3\x2\x2\x2\xA09\xA0A\t+\x2"+
		"\x2\xA0A\xCF\x3\x2\x2\x2\xA0B\xA0C\bi\x1\x2\xA0C\xA0D\t,\x2\x2\xA0D\xA31"+
		"\x5\xF6|\x2\xA0E\xA0F\t,\x2\x2\xA0F\xA15\a\x12B\x2\x2\xA10\xA16\x5\xFA"+
		"~\x2\xA11\xA12\a\x122\x2\x2\xA12\xA13\x5\xD0i\x2\xA13\xA14\a\x123\x2\x2"+
		"\xA14\xA16\x3\x2\x2\x2\xA15\xA10\x3\x2\x2\x2\xA15\xA11\x3\x2\x2\x2\xA16"+
		"\xA31\x3\x2\x2\x2\xA17\xA18\x5\x142\xA2\x2\xA18\xA19\a\x122\x2\x2\xA19"+
		"\xA1A\x5\xEAv\x2\xA1A\xA1B\a\x123\x2\x2\xA1B\xA31\x3\x2\x2\x2\xA1C\xA1D"+
		"\x6i\x16\x2\xA1D\xA1E\a\x122\x2\x2\xA1E\xA1F\x5\x100\x81\x2\xA1F\xA20"+
		"\a\x123\x2\x2\xA20\xA21\x5\xD0i\x1C\xA21\xA31\x3\x2\x2\x2\xA22\xA23\a"+
		"{\x2\x2\xA23\xA31\x5\xD0i\x1A\xA24\xA25\x6i\x17\x2\xA25\xA26\a\x90\x2"+
		"\x2\xA26\xA31\x5\xD0i\x19\xA27\xA28\t-\x2\x2\xA28\xA31\x5\xD0i\x18\xA29"+
		"\xA2A\t.\x2\x2\xA2A\xA31\x5\xD0i\v\xA2B\xA2D\a\x133\x2\x2\xA2C\xA2E\x5"+
		"\xD0i\x2\xA2D\xA2C\x3\x2\x2\x2\xA2D\xA2E\x3\x2\x2\x2\xA2E\xA31\x3\x2\x2"+
		"\x2\xA2F\xA31\x5\xD2j\x2\xA30\xA0B\x3\x2\x2\x2\xA30\xA0E\x3\x2\x2\x2\xA30"+
		"\xA17\x3\x2\x2\x2\xA30\xA1C\x3\x2\x2\x2\xA30\xA22\x3\x2\x2\x2\xA30\xA24"+
		"\x3\x2\x2\x2\xA30\xA27\x3\x2\x2\x2\xA30\xA29\x3\x2\x2\x2\xA30\xA2B\x3"+
		"\x2\x2\x2\xA30\xA2F\x3\x2\x2\x2\xA31\xA99\x3\x2\x2\x2\xA32\xA33\f\x14"+
		"\x2\x2\xA33\xA34\a\xFF\x2\x2\xA34\xA98\x5\xD0i\x15\xA35\xA36\f\x13\x2"+
		"\x2\xA36\xA37\t/\x2\x2\xA37\xA98\x5\xD0i\x14\xA38\xA39\f\x12\x2\x2\xA39"+
		"\xA3A\t\x30\x2\x2\xA3A\xA98\x5\xD0i\x13\xA3B\xA3C\f\x11\x2\x2\xA3C\xA3D"+
		"\a\x100\x2\x2\xA3D\xA98\x5\xD0i\x12\xA3E\xA3F\f\x10\x2\x2\xA3F\xA40\a"+
		"\xF2\x2\x2\xA40\xA41\a\xF2\x2\x2\xA41\xA98\x5\xD0i\x11\xA42\xA43\f\xF"+
		"\x2\x2\xA43\xA44\t\x31\x2\x2\xA44\xA98\x5\xD0i\x10\xA45\xA46\f\xE\x2\x2"+
		"\xA46\xA47\a\x12B\x2\x2\xA47\xA98\x5\xD0i\xF\xA48\xA49\f\r\x2\x2\xA49"+
		"\xA4A\a\x102\x2\x2\xA4A\xA98\x5\xD0i\xE\xA4B\xA4C\f\f\x2\x2\xA4C\xA4D"+
		"\a\x12A\x2\x2\xA4D\xA98\x5\xD0i\r\xA4E\xA4F\f\n\x2\x2\xA4F\xA50\t\x32"+
		"\x2\x2\xA50\xA98\x5\xD0i\v\xA51\xA52\f\t\x2\x2\xA52\xA53\t\x33\x2\x2\xA53"+
		"\xA98\x5\xD0i\n\xA54\xA55\f\b\x2\x2\xA55\xA56\t\x34\x2\x2\xA56\xA98\x5"+
		"\xD0i\t\xA57\xA58\f\a\x2\x2\xA58\xA59\t\x35\x2\x2\xA59\xA98\x5\xD0i\b"+
		"\xA5A\xA5B\f\x4\x2\x2\xA5B\xA5C\t\x36\x2\x2\xA5C\xA98\x5\xD0i\x4\xA5D"+
		"\xA5E\f%\x2\x2\xA5E\xA5F\t\x37\x2\x2\xA5F\xA98\x5\xF6|\x2\xA60\xA61\f"+
		"#\x2\x2\xA61\xA62\t\x37\x2\x2\xA62\xA63\a\x122\x2\x2\xA63\xA64\x5\xD0"+
		"i\x2\xA64\xA65\a\x123\x2\x2\xA65\xA98\x3\x2\x2\x2\xA66\xA67\f\"\x2\x2"+
		"\xA67\xA68\t\x37\x2\x2\xA68\xA6E\a\x12B\x2\x2\xA69\xA6F\x5\xFA~\x2\xA6A"+
		"\xA6B\a\x122\x2\x2\xA6B\xA6C\x5\xD0i\x2\xA6C\xA6D\a\x123\x2\x2\xA6D\xA6F"+
		"\x3\x2\x2\x2\xA6E\xA69\x3\x2\x2\x2\xA6E\xA6A\x3\x2\x2\x2\xA6F\xA98\x3"+
		"\x2\x2\x2\xA70\xA71\f \x2\x2\xA71\xA72\a\x122\x2\x2\xA72\xA73\x5\xEAv"+
		"\x2\xA73\xA74\a\x123\x2\x2\xA74\xA98\x3\x2\x2\x2\xA75\xA76\f\x1E\x2\x2"+
		"\xA76\xA77\a\x126\x2\x2\xA77\xA78\x5\xE6t\x2\xA78\xA79\a\x127\x2\x2\xA79"+
		"\xA98\x3\x2\x2\x2\xA7A\xA7B\f\x1D\x2\x2\xA7B\xA7C\a\x105\x2\x2\xA7C\xA98"+
		"\x5\xD4k\x2\xA7D\xA7E\f\x1B\x2\x2\xA7E\xA98\t\x38\x2\x2\xA7F\xA80\f\x17"+
		"\x2\x2\xA80\xA82\a,\x2\x2\xA81\xA83\a\x120\x2\x2\xA82\xA81\x3\x2\x2\x2"+
		"\xA82\xA83\x3\x2\x2\x2\xA83\xA84\x3\x2\x2\x2\xA84\xA98\a\xE4\x2\x2\xA85"+
		"\xA86\f\x16\x2\x2\xA86\xA88\a,\x2\x2\xA87\xA89\a\x120\x2\x2\xA88\xA87"+
		"\x3\x2\x2\x2\xA88\xA89\x3\x2\x2\x2\xA89\xA8A\x3\x2\x2\x2\xA8A\xA8D\x5"+
		"\x100\x81\x2\xA8B\xA8C\a\x94\x2\x2\xA8C\xA8E\x5\xFC\x7F\x2\xA8D\xA8B\x3"+
		"\x2\x2\x2\xA8D\xA8E\x3\x2\x2\x2\xA8E\xA98\x3\x2\x2\x2\xA8F\xA90\f\x15"+
		"\x2\x2\xA90\xA91\az\x2\x2\xA91\xA98\x5\x100\x81\x2\xA92\xA93\f\x5\x2\x2"+
		"\xA93\xA95\a\x133\x2\x2\xA94\xA96\x5\xD0i\x2\xA95\xA94\x3\x2\x2\x2\xA95"+
		"\xA96\x3\x2\x2\x2\xA96\xA98\x3\x2\x2\x2\xA97\xA32\x3\x2\x2\x2\xA97\xA35"+
		"\x3\x2\x2\x2\xA97\xA38\x3\x2\x2\x2\xA97\xA3B\x3\x2\x2\x2\xA97\xA3E\x3"+
		"\x2\x2\x2\xA97\xA42\x3\x2\x2\x2\xA97\xA45\x3\x2\x2\x2\xA97\xA48\x3\x2"+
		"\x2\x2\xA97\xA4B\x3\x2\x2\x2\xA97\xA4E\x3\x2\x2\x2\xA97\xA51\x3\x2\x2"+
		"\x2\xA97\xA54\x3\x2\x2\x2\xA97\xA57\x3\x2\x2\x2\xA97\xA5A\x3\x2\x2\x2"+
		"\xA97\xA5D\x3\x2\x2\x2\xA97\xA60\x3\x2\x2\x2\xA97\xA66\x3\x2\x2\x2\xA97"+
		"\xA70\x3\x2\x2\x2\xA97\xA75\x3\x2\x2\x2\xA97\xA7A\x3\x2\x2\x2\xA97\xA7D"+
		"\x3\x2\x2\x2\xA97\xA7F\x3\x2\x2\x2\xA97\xA85\x3\x2\x2\x2\xA97\xA8F\x3"+
		"\x2\x2\x2\xA97\xA92\x3\x2\x2\x2\xA98\xA9B\x3\x2\x2\x2\xA99\xA97\x3\x2"+
		"\x2\x2\xA99\xA9A\x3\x2\x2\x2\xA9A\xD1\x3\x2\x2\x2\xA9B\xA99\x3\x2\x2\x2"+
		"\xA9C\xB2B\a>\x2\x2\xA9D\xB2B\a\x44\x2\x2\xA9E\xA9F\a\xE4\x2\x2\xA9F\xAA1"+
		"\a\x122\x2\x2\xAA0\xAA2\x5\x100\x81\x2\xAA1\xAA0\x3\x2\x2\x2\xAA1\xAA2"+
		"\x3\x2\x2\x2\xAA2\xAA3\x3\x2\x2\x2\xAA3\xB2B\a\x123\x2\x2\xAA4\xB2B\x5"+
		"\x148\xA5\x2\xAA5\xB2B\x5\x14A\xA6\x2\xAA6\xB2B\x5\x108\x85\x2\xAA7\xB2B"+
		"\x5\x10C\x87\x2\xAA8\xB2B\x5\x114\x8B\x2\xAA9\xB2B\x5\x11E\x90\x2\xAAA"+
		"\xB2B\x5\x128\x95\x2\xAAB\xB2B\x5\x12E\x98\x2\xAAC\xAAD\x6j\x31\x2\xAAD"+
		"\xAAE\x5\x100\x81\x2\xAAE\xAAF\a\x124\x2\x2\xAAF\xAB0\x5\xD0i\x2\xAB0"+
		"\xAB1\a\x129\x2\x2\xAB1\xAB2\a\x12C\x2\x2\xAB2\xAB3\x5\xF2z\x2\xAB3\xAB4"+
		"\a\x122\x2\x2\xAB4\xAB5\a\x123\x2\x2\xAB5\xAB6\a\x125\x2\x2\xAB6\xB2B"+
		"\x3\x2\x2\x2\xAB7\xAB8\x6j\x32\x2\xAB8\xAB9\x5\x100\x81\x2\xAB9\xABA\a"+
		"\x124\x2\x2\xABA\xABB\x5\xEAv\x2\xABB\xABD\a\x125\x2\x2\xABC\xABE\x5\xD8"+
		"m\x2\xABD\xABC\x3\x2\x2\x2\xABD\xABE\x3\x2\x2\x2\xABE\xB2B\x3\x2\x2\x2"+
		"\xABF\xAC0\t\x39\x2\x2\xAC0\xAC1\a\x122\x2\x2\xAC1\xAC2\x5\xD0i\x2\xAC2"+
		"\xAC3\a\x123\x2\x2\xAC3\xB2B\x3\x2\x2\x2\xAC4\xAC5\aG\x2\x2\xAC5\xAC6"+
		"\a\x122\x2\x2\xAC6\xAC7\x5\x100\x81\x2\xAC7\xAC8\a\x123\x2\x2\xAC8\xB2B"+
		"\x3\x2\x2\x2\xAC9\xACA\a@\x2\x2\xACA\xACB\a\x122\x2\x2\xACB\xACC\x5\x100"+
		"\x81\x2\xACC\xACD\a\x123\x2\x2\xACD\xB2B\x3\x2\x2\x2\xACE\xACF\aV\x2\x2"+
		"\xACF\xAD1\a\x122\x2\x2\xAD0\xAD2\x5\x100\x81\x2\xAD1\xAD0\x3\x2\x2\x2"+
		"\xAD1\xAD2\x3\x2\x2\x2\xAD2\xAD3\x3\x2\x2\x2\xAD3\xB2B\a\x123\x2\x2\xAD4"+
		"\xB2B\x5\xF6|\x2\xAD5\xAD6\x6j\x33\x2\xAD6\xAD7\x5\x146\xA4\x2\xAD7\xAD8"+
		"\a\x122\x2\x2\xAD8\xAD9\x5\xD0i\x2\xAD9\xADA\a\x123\x2\x2\xADA\xB2B\x3"+
		"\x2\x2\x2\xADB\xADC\x6j\x34\x2\xADC\xADD\x5\x144\xA3\x2\xADD\xADE\a\x122"+
		"\x2\x2\xADE\xADF\x5\xD0i\x2\xADF\xAE0\a\x123\x2\x2\xAE0\xB2B\x3\x2\x2"+
		"\x2\xAE1\xAE2\x6j\x35\x2\xAE2\xAE3\x5\x146\xA4\x2\xAE3\xAE4\a\x122\x2"+
		"\x2\xAE4\xAE5\a\r\x2\x2\xAE5\xAE6\a\x129\x2\x2\xAE6\xAE7\x5\xD0i\x2\xAE7"+
		"\xAE8\a\x123\x2\x2\xAE8\xB2B\x3\x2\x2\x2\xAE9\xAEA\x6j\x36\x2\xAEA\xAEB"+
		"\x5\x144\xA3\x2\xAEB\xAEC\a\x122\x2\x2\xAEC\xAED\a\r\x2\x2\xAED\xAEE\a"+
		"\x129\x2\x2\xAEE\xAEF\x5\xD0i\x2\xAEF\xAF0\a\x123\x2\x2\xAF0\xB2B\x3\x2"+
		"\x2\x2\xAF1\xAF2\aS\x2\x2\xAF2\xAF3\a\x122\x2\x2\xAF3\xAF4\x5\x146\xA4"+
		"\x2\xAF4\xAF5\a\x129\x2\x2\xAF5\xAF6\x5\xD0i\x2\xAF6\xAF7\a\x123\x2\x2"+
		"\xAF7\xB2B\x3\x2\x2\x2\xAF8\xAF9\aS\x2\x2\xAF9\xAFA\a\x122\x2\x2\xAFA"+
		"\xAFB\x5\x144\xA3\x2\xAFB\xAFC\a\x129\x2\x2\xAFC\xAFD\x5\xD0i\x2\xAFD"+
		"\xAFE\a\x123\x2\x2\xAFE\xB2B\x3\x2\x2\x2\xAFF\xB00\a\xA8\x2\x2\xB00\xB01"+
		"\a\x122\x2\x2\xB01\xB02\x5\x100\x81\x2\xB02\xB03\a\x129\x2\x2\xB03\xB04"+
		"\x5\xD0i\x2\xB04\xB05\a\x123\x2\x2\xB05\xB2B\x3\x2\x2\x2\xB06\xB2B\x5"+
		"\x106\x84\x2\xB07\xB2B\x5\x104\x83\x2\xB08\xB2B\x5\xEEx\x2\xB09\xB0A\t"+
		":\x2\x2\xB0A\xB0B\a\x122\x2\x2\xB0B\xB10\x5\xD0i\x2\xB0C\xB0D\a\x129\x2"+
		"\x2\xB0D\xB0F\x5\xD0i\x2\xB0E\xB0C\x3\x2\x2\x2\xB0F\xB12\x3\x2\x2\x2\xB10"+
		"\xB0E\x3\x2\x2\x2\xB10\xB11\x3\x2\x2\x2\xB11\xB13\x3\x2\x2\x2\xB12\xB10"+
		"\x3\x2\x2\x2\xB13\xB14\a\x123\x2\x2\xB14\xB2B\x3\x2\x2\x2\xB15\xB16\x6"+
		"j\x37\x2\xB16\xB2B\x5\xD6l\x2\xB17\xB18\a\x12B\x2\x2\xB18\xB19\a\x122"+
		"\x2\x2\xB19\xB1A\x5\xD0i\x2\xB1A\xB1B\a\x123\x2\x2\xB1B\xB2B\x3\x2\x2"+
		"\x2\xB1C\xB1D\a\x12B\x2\x2\xB1D\xB2B\x5\xFA~\x2\xB1E\xB1F\a\x122\x2\x2"+
		"\xB1F\xB24\x5\xD0i\x2\xB20\xB21\a\x129\x2\x2\xB21\xB23\x5\xD0i\x2\xB22"+
		"\xB20\x3\x2\x2\x2\xB23\xB26\x3\x2\x2\x2\xB24\xB22\x3\x2\x2\x2\xB24\xB25"+
		"\x3\x2\x2\x2\xB25\xB27\x3\x2\x2\x2\xB26\xB24\x3\x2\x2\x2\xB27\xB28\a\x123"+
		"\x2\x2\xB28\xB2B\x3\x2\x2\x2\xB29\xB2B\aw\x2\x2\xB2A\xA9C\x3\x2\x2\x2"+
		"\xB2A\xA9D\x3\x2\x2\x2\xB2A\xA9E\x3\x2\x2\x2\xB2A\xAA4\x3\x2\x2\x2\xB2A"+
		"\xAA5\x3\x2\x2\x2\xB2A\xAA6\x3\x2\x2\x2\xB2A\xAA7\x3\x2\x2\x2\xB2A\xAA8"+
		"\x3\x2\x2\x2\xB2A\xAA9\x3\x2\x2\x2\xB2A\xAAA\x3\x2\x2\x2\xB2A\xAAB\x3"+
		"\x2\x2\x2\xB2A\xAAC\x3\x2\x2\x2\xB2A\xAB7\x3\x2\x2\x2\xB2A\xABF\x3\x2"+
		"\x2\x2\xB2A\xAC4\x3\x2\x2\x2\xB2A\xAC9\x3\x2\x2\x2\xB2A\xACE\x3\x2\x2"+
		"\x2\xB2A\xAD4\x3\x2\x2\x2\xB2A\xAD5\x3\x2\x2\x2\xB2A\xADB\x3\x2\x2\x2"+
		"\xB2A\xAE1\x3\x2\x2\x2\xB2A\xAE9\x3\x2\x2\x2\xB2A\xAF1\x3\x2\x2\x2\xB2A"+
		"\xAF8\x3\x2\x2\x2\xB2A\xAFF\x3\x2\x2\x2\xB2A\xB06\x3\x2\x2\x2\xB2A\xB07"+
		"\x3\x2\x2\x2\xB2A\xB08\x3\x2\x2\x2\xB2A\xB09\x3\x2\x2\x2\xB2A\xB15\x3"+
		"\x2\x2\x2\xB2A\xB17\x3\x2\x2\x2\xB2A\xB1C\x3\x2\x2\x2\xB2A\xB1E\x3\x2"+
		"\x2\x2\xB2A\xB29\x3\x2\x2\x2\xB2B\xD3\x3\x2\x2\x2\xB2C\xB2D\bk\x1\x2\xB2D"+
		"\xB2E\t\x37\x2\x2\xB2E\xB34\x5\xF6|\x2\xB2F\xB30\a\x126\x2\x2\xB30\xB31"+
		"\x5\xE6t\x2\xB31\xB32\a\x127\x2\x2\xB32\xB34\x3\x2\x2\x2\xB33\xB2C\x3"+
		"\x2\x2\x2\xB33\xB2F\x3\x2\x2\x2\xB34\xB47\x3\x2\x2\x2\xB35\xB36\f\x5\x2"+
		"\x2\xB36\xB37\a\x105\x2\x2\xB37\xB46\x5\xD4k\x5\xB38\xB39\f\b\x2\x2\xB39"+
		"\xB3A\t\x37\x2\x2\xB3A\xB46\x5\xF6|\x2\xB3B\xB3C\f\a\x2\x2\xB3C\xB3D\a"+
		"\x122\x2\x2\xB3D\xB3E\x5\xEAv\x2\xB3E\xB3F\a\x123\x2\x2\xB3F\xB46\x3\x2"+
		"\x2\x2\xB40\xB41\f\x6\x2\x2\xB41\xB42\a\x126\x2\x2\xB42\xB43\x5\xE6t\x2"+
		"\xB43\xB44\a\x127\x2\x2\xB44\xB46\x3\x2\x2\x2\xB45\xB35\x3\x2\x2\x2\xB45"+
		"\xB38\x3\x2\x2\x2\xB45\xB3B\x3\x2\x2\x2\xB45\xB40\x3\x2\x2\x2\xB46\xB49"+
		"\x3\x2\x2\x2\xB47\xB45\x3\x2\x2\x2\xB47\xB48\x3\x2\x2\x2\xB48\xD5\x3\x2"+
		"\x2\x2\xB49\xB47\x3\x2\x2\x2\xB4A\xB4B\x6l<\x2\xB4B\xB4C\a\x31\x2\x2\xB4C"+
		"\xB4D\a\x12D\x2\x2\xB4D\xB87\x5\x13E\xA0\x2\xB4E\xB4F\a \x2\x2\xB4F\xB53"+
		"\a\x12D\x2\x2\xB50\xB51\x5\x13E\xA0\x2\xB51\xB52\a\x12D\x2\x2\xB52\xB54"+
		"\x3\x2\x2\x2\xB53\xB50\x3\x2\x2\x2\xB53\xB54\x3\x2\x2\x2\xB54\xB55\x3"+
		"\x2\x2\x2\xB55\xB87\x5\x13E\xA0\x2\xB56\xB57\x6l=\x2\xB57\xB58\x5\x13E"+
		"\xA0\x2\xB58\xB59\a\x12D\x2\x2\xB59\xB5A\x5\x13E\xA0\x2\xB5A\xB87\x3\x2"+
		"\x2\x2\xB5B\xB5C\x6l>\x2\xB5C\xB5D\a\x122\x2\x2\xB5D\xB5E\x5\x13E\xA0"+
		"\x2\xB5E\xB5F\a\x123\x2\x2\xB5F\xB60\a\x12D\x2\x2\xB60\xB61\x5\x13E\xA0"+
		"\x2\xB61\xB87\x3\x2\x2\x2\xB62\xB63\x5\x13E\xA0\x2\xB63\xB64\a\x12D\x2"+
		"\x2\xB64\xB65\a\x12B\x2\x2\xB65\xB66\x5\xD0i\x2\xB66\xB87\x3\x2\x2\x2"+
		"\xB67\xB68\a \x2\x2\xB68\xB6C\a\x12D\x2\x2\xB69\xB6A\x5\x13E\xA0\x2\xB6A"+
		"\xB6B\a\x12D\x2\x2\xB6B\xB6D\x3\x2\x2\x2\xB6C\xB69\x3\x2\x2\x2\xB6C\xB6D"+
		"\x3\x2\x2\x2\xB6D\xB6E\x3\x2\x2\x2\xB6E\xB6F\a\x12B\x2\x2\xB6F\xB87\x5"+
		"\xD0i\x2\xB70\xB71\a\x122\x2\x2\xB71\xB72\x5\x13E\xA0\x2\xB72\xB73\a\x123"+
		"\x2\x2\xB73\xB74\a\x12D\x2\x2\xB74\xB75\a\x12B\x2\x2\xB75\xB76\x5\xD0"+
		"i\x2\xB76\xB87\x3\x2\x2\x2\xB77\xB7D\x5\x13E\xA0\x2\xB78\xB79\a\x122\x2"+
		"\x2\xB79\xB7A\x5\xD0i\x2\xB7A\xB7B\a\x123\x2\x2\xB7B\xB7D\x3\x2\x2\x2"+
		"\xB7C\xB77\x3\x2\x2\x2\xB7C\xB78\x3\x2\x2\x2\xB7D\xB7E\x3\x2\x2\x2\xB7E"+
		"\xB84\a\x12D\x2\x2\xB7F\xB80\a\x122\x2\x2\xB80\xB81\x5\xD0i\x2\xB81\xB82"+
		"\a\x123\x2\x2\xB82\xB85\x3\x2\x2\x2\xB83\xB85\x5\xD0i\x2\xB84\xB7F\x3"+
		"\x2\x2\x2\xB84\xB83\x3\x2\x2\x2\xB85\xB87\x3\x2\x2\x2\xB86\xB4A\x3\x2"+
		"\x2\x2\xB86\xB4E\x3\x2\x2\x2\xB86\xB56\x3\x2\x2\x2\xB86\xB5B\x3\x2\x2"+
		"\x2\xB86\xB62\x3\x2\x2\x2\xB86\xB67\x3\x2\x2\x2\xB86\xB70\x3\x2\x2\x2"+
		"\xB86\xB7C\x3\x2\x2\x2\xB87\xD7\x3\x2\x2\x2\xB88\xB8B\x5\xDAn\x2\xB89"+
		"\xB8B\x5\xE4s\x2\xB8A\xB88\x3\x2\x2\x2\xB8A\xB89\x3\x2\x2\x2\xB8B\xD9"+
		"\x3\x2\x2\x2\xB8C\xB95\a\x124\x2\x2\xB8D\xB92\x5\xDCo\x2\xB8E\xB8F\a\x129"+
		"\x2\x2\xB8F\xB91\x5\xDCo\x2\xB90\xB8E\x3\x2\x2\x2\xB91\xB94\x3\x2\x2\x2"+
		"\xB92\xB90\x3\x2\x2\x2\xB92\xB93\x3\x2\x2\x2\xB93\xB96\x3\x2\x2\x2\xB94"+
		"\xB92\x3\x2\x2\x2\xB95\xB8D\x3\x2\x2\x2\xB95\xB96\x3\x2\x2\x2\xB96\xB97"+
		"\x3\x2\x2\x2\xB97\xB98\a\x125\x2\x2\xB98\xDB\x3\x2\x2\x2\xB99\xB9A\x5"+
		"\xFA~\x2\xB9A\xB9B\x5\xCEh\x2\xB9B\xB9C\x5\xDEp\x2\xB9C\xDD\x3\x2\x2\x2"+
		"\xB9D\xBA0\x5\xD8m\x2\xB9E\xBA0\x5\xD0i\x2\xB9F\xB9D\x3\x2\x2\x2\xB9F"+
		"\xB9E\x3\x2\x2\x2\xBA0\xDF\x3\x2\x2\x2\xBA1\xBA2\a\x124\x2\x2\xBA2\xBA7"+
		"\x5\xE2r\x2\xBA3\xBA4\a\x129\x2\x2\xBA4\xBA6\x5\xE2r\x2\xBA5\xBA3\x3\x2"+
		"\x2\x2\xBA6\xBA9\x3\x2\x2\x2\xBA7\xBA5\x3\x2\x2\x2\xBA7\xBA8\x3\x2\x2"+
		"\x2\xBA8\xBAA\x3\x2\x2\x2\xBA9\xBA7\x3\x2\x2\x2\xBAA\xBAB\a\x125\x2\x2"+
		"\xBAB\xE1\x3\x2\x2\x2\xBAC\xBAF\x5\xE0q\x2\xBAD\xBAF\x5\xD0i\x2\xBAE\xBAC"+
		"\x3\x2\x2\x2\xBAE\xBAD\x3\x2\x2\x2\xBAF\xE3\x3\x2\x2\x2\xBB0\xBB1\a\x124"+
		"\x2\x2\xBB1\xBB6\x5\xE2r\x2\xBB2\xBB3\a\x129\x2\x2\xBB3\xBB5\x5\xE2r\x2"+
		"\xBB4\xBB2\x3\x2\x2\x2\xBB5\xBB8\x3\x2\x2\x2\xBB6\xBB4\x3\x2\x2\x2\xBB6"+
		"\xBB7\x3\x2\x2\x2\xBB7\xBB9\x3\x2\x2\x2\xBB8\xBB6\x3\x2\x2\x2\xBB9\xBBA"+
		"\a\x125\x2\x2\xBBA\xE5\x3\x2\x2\x2\xBBB\xBC0\x5\xE8u\x2\xBBC\xBBD\a\x129"+
		"\x2\x2\xBBD\xBBF\x5\xE8u\x2\xBBE\xBBC\x3\x2\x2\x2\xBBF\xBC2\x3\x2\x2\x2"+
		"\xBC0\xBBE\x3\x2\x2\x2\xBC0\xBC1\x3\x2\x2\x2\xBC1\xE7\x3\x2\x2\x2\xBC2"+
		"\xBC0\x3\x2\x2\x2\xBC3\xBC4\x5\xD0i\x2\xBC4\xE9\x3\x2\x2\x2\xBC5\xBCA"+
		"\x5\xECw\x2\xBC6\xBC7\a\x129\x2\x2\xBC7\xBC9\x5\xECw\x2\xBC8\xBC6\x3\x2"+
		"\x2\x2\xBC9\xBCC\x3\x2\x2\x2\xBCA\xBC8\x3\x2\x2\x2\xBCA\xBCB\x3\x2\x2"+
		"\x2\xBCB\xEB\x3\x2\x2\x2\xBCC\xBCA\x3\x2\x2\x2\xBCD\xBCE\x6w?\x2\xBCE"+
		"\xBCF\x5\xFA~\x2\xBCF\xBD1\a\x10D\x2\x2\xBD0\xBD2\t;\x2\x2\xBD1\xBD0\x3"+
		"\x2\x2\x2\xBD1\xBD2\x3\x2\x2\x2\xBD2\xBD3\x3\x2\x2\x2\xBD3\xBD4\x5\xD0"+
		"i\x2\xBD4\xBE6\x3\x2\x2\x2\xBD5\xBD6\ah\x2\x2\xBD6\xBD7\a\x94\x2\x2\xBD7"+
		"\xBE6\x5\xFC\x7F\x2\xBD8\xBD9\ah\x2\x2\xBD9\xBDA\x5\xFC\x7F\x2\xBDA\xBDB"+
		"\a\x6\x2\x2\xBDB\xBDC\x5\x100\x81\x2\xBDC\xBE6\x3\x2\x2\x2\xBDD\xBDE\a"+
		"h\x2\x2\xBDE\xBE6\a\xE4\x2\x2\xBDF\xBE1\t;\x2\x2\xBE0\xBDF\x3\x2\x2\x2"+
		"\xBE0\xBE1\x3\x2\x2\x2\xBE1\xBE3\x3\x2\x2\x2\xBE2\xBE4\x5\xD0i\x2\xBE3"+
		"\xBE2\x3\x2\x2\x2\xBE3\xBE4\x3\x2\x2\x2\xBE4\xBE6\x3\x2\x2\x2\xBE5\xBCD"+
		"\x3\x2\x2\x2\xBE5\xBD5\x3\x2\x2\x2\xBE5\xBD8\x3\x2\x2\x2\xBE5\xBDD\x3"+
		"\x2\x2\x2\xBE5\xBE0\x3\x2\x2\x2\xBE6\xED\x3\x2\x2\x2\xBE7\xBE8\t<\x2\x2"+
		"\xBE8\xBE9\a\x122\x2\x2\xBE9\xBEA\x5\xD0i\x2\xBEA\xBEC\a\x129\x2\x2\xBEB"+
		"\xBED\x5\xD0i\x2\xBEC\xBEB\x3\x2\x2\x2\xBEC\xBED\x3\x2\x2\x2\xBED\xBEE"+
		"\x3\x2\x2\x2\xBEE\xBF0\a\x129\x2\x2\xBEF\xBF1\x5\xD0i\x2\xBF0\xBEF\x3"+
		"\x2\x2\x2\xBF0\xBF1\x3\x2\x2\x2\xBF1\xBF2\x3\x2\x2\x2\xBF2\xBF3\a\x123"+
		"\x2\x2\xBF3\xEF\x3\x2\x2\x2\xBF4\xBF5\by\x1\x2\xBF5\xBF6\x5\xF4{\x2\xBF6"+
		"\xBF7\a\x12E\x2\x2\xBF7\xBFE\x3\x2\x2\x2\xBF8\xBF9\f\x4\x2\x2\xBF9\xBFA"+
		"\x5\xF6|\x2\xBFA\xBFB\a\x12E\x2\x2\xBFB\xBFD\x3\x2\x2\x2\xBFC\xBF8\x3"+
		"\x2\x2\x2\xBFD\xC00\x3\x2\x2\x2\xBFE\xBFC\x3\x2\x2\x2\xBFE\xBFF\x3\x2"+
		"\x2\x2\xBFF\xF1\x3\x2\x2\x2\xC00\xBFE\x3\x2\x2\x2\xC01\xC02\bz\x1\x2\xC02"+
		"\xC03\x5\xF4{\x2\xC03\xC09\x3\x2\x2\x2\xC04\xC05\f\x4\x2\x2\xC05\xC06"+
		"\a\x12E\x2\x2\xC06\xC08\x5\xF6|\x2\xC07\xC04\x3\x2\x2\x2\xC08\xC0B\x3"+
		"\x2\x2\x2\xC09\xC07\x3\x2\x2\x2\xC09\xC0A\x3\x2\x2\x2\xC0A\xF3\x3\x2\x2"+
		"\x2\xC0B\xC09\x3\x2\x2\x2\xC0C\xC0D\a#\x2\x2\xC0D\xC0E\a\x12F\x2\x2\xC0E"+
		"\xC15\x5\xF6|\x2\xC0F\xC10\x5\xFA~\x2\xC10\xC11\a\x12F\x2\x2\xC11\xC12"+
		"\x5\xF6|\x2\xC12\xC15\x3\x2\x2\x2\xC13\xC15\x5\xF6|\x2\xC14\xC0C\x3\x2"+
		"\x2\x2\xC14\xC0F\x3\x2\x2\x2\xC14\xC13\x3\x2\x2\x2\xC15\xF5\x3\x2\x2\x2"+
		"\xC16\xC18\x5\x13E\xA0\x2\xC17\xC19\x5\xF8}\x2\xC18\xC17\x3\x2\x2\x2\xC18"+
		"\xC19\x3\x2\x2\x2\xC19\xF7\x3\x2\x2\x2\xC1A\xC29\a\xF0\x2\x2\xC1B\xC20"+
		"\x5\x100\x81\x2\xC1C\xC1D\a\x129\x2\x2\xC1D\xC1F\x5\x100\x81\x2\xC1E\xC1C"+
		"\x3\x2\x2\x2\xC1F\xC22\x3\x2\x2\x2\xC20\xC1E\x3\x2\x2\x2\xC20\xC21\x3"+
		"\x2\x2\x2\xC21\xC2A\x3\x2\x2\x2\xC22\xC20\x3\x2\x2\x2\xC23\xC25\a\x129"+
		"\x2\x2\xC24\xC23\x3\x2\x2\x2\xC25\xC28\x3\x2\x2\x2\xC26\xC24\x3\x2\x2"+
		"\x2\xC26\xC27\x3\x2\x2\x2\xC27\xC2A\x3\x2\x2\x2\xC28\xC26\x3\x2\x2\x2"+
		"\xC29\xC1B\x3\x2\x2\x2\xC29\xC26\x3\x2\x2\x2\xC2A\xC2B\x3\x2\x2\x2\xC2B"+
		"\xC2C\a\xF2\x2\x2\xC2C\xF9\x3\x2\x2\x2\xC2D\xC2E\x5\x13E\xA0\x2\xC2E\xFB"+
		"\x3\x2\x2\x2\xC2F\xC30\a\xD7\x2\x2\xC30\xC32\a\x12E\x2\x2\xC31\xC2F\x3"+
		"\x2\x2\x2\xC31\xC32\x3\x2\x2\x2\xC32\xC33\x3\x2\x2\x2\xC33\xC34\x5\x13E"+
		"\xA0\x2\xC34\xFD\x3\x2\x2\x2\xC35\xC36\a\xD7\x2\x2\xC36\xC38\a\x12E\x2"+
		"\x2\xC37\xC35\x3\x2\x2\x2\xC37\xC38\x3\x2\x2\x2\xC38\xC39\x3\x2\x2\x2"+
		"\xC39\xC3A\x5\xFA~\x2\xC3A\xFF\x3\x2\x2\x2\xC3B\xC3C\a\x9D\x2\x2\xC3C"+
		"\xC3D\a\x89\x2\x2\xC3D\xC4D\x5\x104\x83\x2\xC3E\xC3F\x5\x104\x83\x2\xC3F"+
		"\xC40\a\xA8\x2\x2\xC40\xC4D\x3\x2\x2\x2\xC41\xC43\x5\x104\x83\x2\xC42"+
		"\xC44\x5\x102\x82\x2\xC43\xC42\x3\x2\x2\x2\xC44\xC45\x3\x2\x2\x2\xC45"+
		"\xC43\x3\x2\x2\x2\xC45\xC46\x3\x2\x2\x2\xC46\xC4D\x3\x2\x2\x2\xC47\xC4D"+
		"\x5\x104\x83\x2\xC48\xC49\x5\x104\x83\x2\xC49\xC4A\a\x105\x2\x2\xC4A\xC4D"+
		"\x3\x2\x2\x2\xC4B\xC4D\x5\x110\x89\x2\xC4C\xC3B\x3\x2\x2\x2\xC4C\xC3E"+
		"\x3\x2\x2\x2\xC4C\xC41\x3\x2\x2\x2\xC4C\xC47\x3\x2\x2\x2\xC4C\xC48\x3"+
		"\x2\x2\x2\xC4C\xC4B\x3\x2\x2\x2\xC4D\x101\x3\x2\x2\x2\xC4E\xC52\a\x126"+
		"\x2\x2\xC4F\xC51\a\x129\x2\x2\xC50\xC4F\x3\x2\x2\x2\xC51\xC54\x3\x2\x2"+
		"\x2\xC52\xC50\x3\x2\x2\x2\xC52\xC53\x3\x2\x2\x2\xC53\xC55\x3\x2\x2\x2"+
		"\xC54\xC52\x3\x2\x2\x2\xC55\xC58\a\x127\x2\x2\xC56\xC58\a\x146\x2\x2\xC57"+
		"\xC4E\x3\x2\x2\x2\xC57\xC56\x3\x2\x2\x2\xC58\x103\x3\x2\x2\x2\xC59\xC5D"+
		"\x5\x146\xA4\x2\xC5A\xC5D\x5\x144\xA3\x2\xC5B\xC5D\x5\xF2z\x2\xC5C\xC59"+
		"\x3\x2\x2\x2\xC5C\xC5A\x3\x2\x2\x2\xC5C\xC5B\x3\x2\x2\x2\xC5D\x105\x3"+
		"\x2\x2\x2\xC5E\xC61\x5\x146\xA4\x2\xC5F\xC61\x5\x144\xA3\x2\xC60\xC5E"+
		"\x3\x2\x2\x2\xC60\xC5F\x3\x2\x2\x2\xC61\x107\x3\x2\x2\x2\xC62\xC63\a\xF0"+
		"\x2\x2\xC63\xC64\x5\x100\x81\x2\xC64\xC65\a\xF2\x2\x2\xC65\xC67\x3\x2"+
		"\x2\x2\xC66\xC62\x3\x2\x2\x2\xC66\xC67\x3\x2\x2\x2\xC67\xC68\x3\x2\x2"+
		"\x2\xC68\xC69\a\x124\x2\x2\xC69\xC7C\a\x125\x2\x2\xC6A\xC6B\a\xF0\x2\x2"+
		"\xC6B\xC6C\x5\x100\x81\x2\xC6C\xC6D\a\xF2\x2\x2\xC6D\xC6F\x3\x2\x2\x2"+
		"\xC6E\xC6A\x3\x2\x2\x2\xC6E\xC6F\x3\x2\x2\x2\xC6F\xC70\x3\x2\x2\x2\xC70"+
		"\xC71\a\x124\x2\x2\xC71\xC76\x5\x10A\x86\x2\xC72\xC73\a\x129\x2\x2\xC73"+
		"\xC75\x5\x10A\x86\x2\xC74\xC72\x3\x2\x2\x2\xC75\xC78\x3\x2\x2\x2\xC76"+
		"\xC74\x3\x2\x2\x2\xC76\xC77\x3\x2\x2\x2\xC77\xC79\x3\x2\x2\x2\xC78\xC76"+
		"\x3\x2\x2\x2\xC79\xC7A\a\x125\x2\x2\xC7A\xC7C\x3\x2\x2\x2\xC7B\xC66\x3"+
		"\x2\x2\x2\xC7B\xC6E\x3\x2\x2\x2\xC7C\x109\x3\x2\x2\x2\xC7D\xC7F\x5\xD0"+
		"i\x2\xC7E\xC7D\x3\x2\x2\x2\xC7E\xC7F\x3\x2\x2\x2\xC7F\x10B\x3\x2\x2\x2"+
		"\xC80\xC81\a\xE\x2\x2\xC81\xC8A\a\x124\x2\x2\xC82\xC87\x5\x10E\x88\x2"+
		"\xC83\xC84\a\x129\x2\x2\xC84\xC86\x5\x10E\x88\x2\xC85\xC83\x3\x2\x2\x2"+
		"\xC86\xC89\x3\x2\x2\x2\xC87\xC85\x3\x2\x2\x2\xC87\xC88\x3\x2\x2\x2\xC88"+
		"\xC8B\x3\x2\x2\x2\xC89\xC87\x3\x2\x2\x2\xC8A\xC82\x3\x2\x2\x2\xC8A\xC8B"+
		"\x3\x2\x2\x2\xC8B\xC8C\x3\x2\x2\x2\xC8C\xC8D\a\x125\x2\x2\xC8D\x10D\x3"+
		"\x2\x2\x2\xC8E\xC8F\x5\xFA~\x2\xC8F\xC90\x5\xCEh\x2\xC90\xC91\x5\xD0i"+
		"\x2\xC91\xC94\x3\x2\x2\x2\xC92\xC94\x5\xD0i\x2\xC93\xC8E\x3\x2\x2\x2\xC93"+
		"\xC92\x3\x2\x2\x2\xC94\x10F\x3\x2\x2\x2\xC95\xC97\aq\x2\x2\xC96\xC95\x3"+
		"\x2\x2\x2\xC96\xC97\x3\x2\x2\x2\xC97\xC98\x3\x2\x2\x2\xC98\xCA1\a\x122"+
		"\x2\x2\xC99\xC9E\x5\x112\x8A\x2\xC9A\xC9B\a\x129\x2\x2\xC9B\xC9D\x5\x112"+
		"\x8A\x2\xC9C\xC9A\x3\x2\x2\x2\xC9D\xCA0\x3\x2\x2\x2\xC9E\xC9C\x3\x2\x2"+
		"\x2\xC9E\xC9F\x3\x2\x2\x2\xC9F\xCA2\x3\x2\x2\x2\xCA0\xC9E\x3\x2\x2\x2"+
		"\xCA1\xC99\x3\x2\x2\x2\xCA1\xCA2\x3\x2\x2\x2\xCA2\xCA3\x3\x2\x2\x2\xCA3"+
		"\xCA4\a\x123\x2\x2\xCA4\x111\x3\x2\x2\x2\xCA5\xCA6\x5\xFA~\x2\xCA6\xCA7"+
		"\a\x6\x2\x2\xCA7\xCA9\x3\x2\x2\x2\xCA8\xCA5\x3\x2\x2\x2\xCA8\xCA9\x3\x2"+
		"\x2\x2\xCA9\xCAA\x3\x2\x2\x2\xCAA\xCAB\x5\x100\x81\x2\xCAB\x113\x3\x2"+
		"\x2\x2\xCAC\xCAD\aq\x2\x2\xCAD\xCB6\a\x124\x2\x2\xCAE\xCB3\x5\x116\x8C"+
		"\x2\xCAF\xCB0\a\x129\x2\x2\xCB0\xCB2\x5\x116\x8C\x2\xCB1\xCAF\x3\x2\x2"+
		"\x2\xCB2\xCB5\x3\x2\x2\x2\xCB3\xCB1\x3\x2\x2\x2\xCB3\xCB4\x3\x2\x2\x2"+
		"\xCB4\xCB7\x3\x2\x2\x2\xCB5\xCB3\x3\x2\x2\x2\xCB6\xCAE\x3\x2\x2\x2\xCB6"+
		"\xCB7\x3\x2\x2\x2\xCB7\xCB8\x3\x2\x2\x2\xCB8\xCB9\a\x125\x2\x2\xCB9\x115"+
		"\x3\x2\x2\x2\xCBA\xCBB\x5\xFA~\x2\xCBB\xCBC\x5\xCEh\x2\xCBC\xCBD\x5\xD0"+
		"i\x2\xCBD\xCC0\x3\x2\x2\x2\xCBE\xCC0\x5\xD0i\x2\xCBF\xCBA\x3\x2\x2\x2"+
		"\xCBF\xCBE\x3\x2\x2\x2\xCC0\x117\x3\x2\x2\x2\xCC1\xCC2\a\x122\x2\x2\xCC2"+
		"\xCC7\x5\xFC\x7F\x2\xCC3\xCC4\a\x129\x2\x2\xCC4\xCC6\x5\xFC\x7F\x2\xCC5"+
		"\xCC3\x3\x2\x2\x2\xCC6\xCC9\x3\x2\x2\x2\xCC7\xCC5\x3\x2\x2\x2\xCC7\xCC8"+
		"\x3\x2\x2\x2\xCC8\xCCA\x3\x2\x2\x2\xCC9\xCC7\x3\x2\x2\x2\xCCA\xCCB\a\x123"+
		"\x2\x2\xCCB\x119\x3\x2\x2\x2\xCCC\xCCD\a\x122\x2\x2\xCCD\xCD2\x5\x11C"+
		"\x8F\x2\xCCE\xCCF\a\x129\x2\x2\xCCF\xCD1\x5\x11C\x8F\x2\xCD0\xCCE\x3\x2"+
		"\x2\x2\xCD1\xCD4\x3\x2\x2\x2\xCD2\xCD0\x3\x2\x2\x2\xCD2\xCD3\x3\x2\x2"+
		"\x2\xCD3\xCD5\x3\x2\x2\x2\xCD4\xCD2\x3\x2\x2\x2\xCD5\xCD6\a\x123\x2\x2"+
		"\xCD6\x11B\x3\x2\x2\x2\xCD7\xCD8\x5\xFC\x7F\x2\xCD8\xCD9\a\x6\x2\x2\xCD9"+
		"\xCDA\x5\x100\x81\x2\xCDA\x11D\x3\x2\x2\x2\xCDB\xCDC\a\x124\x2\x2\xCDC"+
		"\xCDE\a\x107\x2\x2\xCDD\xCDF\a\x15F\x2\x2\xCDE\xCDD\x3\x2\x2\x2\xCDE\xCDF"+
		"\x3\x2\x2\x2\xCDF\xCE0\x3\x2\x2\x2\xCE0\xCE1\x5\x120\x91\x2\xCE1\xCE2"+
		"\a\x125\x2\x2\xCE2\xCF8\x3\x2\x2\x2\xCE3\xCE4\a\x124\x2\x2\xCE4\xCE6\a"+
		"\x12A\x2\x2\xCE5\xCE7\x5\x122\x92\x2\xCE6\xCE5\x3\x2\x2\x2\xCE6\xCE7\x3"+
		"\x2\x2\x2\xCE7\xCE8\x3\x2\x2\x2\xCE8\xCEA\a\x12A\x2\x2\xCE9\xCEB\a\x15F"+
		"\x2\x2\xCEA\xCE9\x3\x2\x2\x2\xCEA\xCEB\x3\x2\x2\x2\xCEB\xCEC\x3\x2\x2"+
		"\x2\xCEC\xCED\x5\x120\x91\x2\xCED\xCEE\a\x125\x2\x2\xCEE\xCF8\x3\x2\x2"+
		"\x2\xCEF\xCF1\a\x124\x2\x2\xCF0\xCF2\x5\x122\x92\x2\xCF1\xCF0\x3\x2\x2"+
		"\x2\xCF1\xCF2\x3\x2\x2\x2\xCF2\xCF3\x3\x2\x2\x2\xCF3\xCF4\a\x15F\x2\x2"+
		"\xCF4\xCF5\x5\x120\x91\x2\xCF5\xCF6\a\x125\x2\x2\xCF6\xCF8\x3\x2\x2\x2"+
		"\xCF7\xCDB\x3\x2\x2\x2\xCF7\xCE3\x3\x2\x2\x2\xCF7\xCEF\x3\x2\x2\x2\xCF8"+
		"\x11F\x3\x2\x2\x2\xCF9\xCFB\x5\xD0i\x2\xCFA\xCF9\x3\x2\x2\x2\xCFA\xCFB"+
		"\x3\x2\x2\x2\xCFB\xD01\x3\x2\x2\x2\xCFC\xCFD\x5\xE\b\x2\xCFD\xCFE\x5*"+
		"\x16\x2\xCFE\xD01\x3\x2\x2\x2\xCFF\xD01\x5\x126\x94\x2\xD00\xCFA\x3\x2"+
		"\x2\x2\xD00\xCFC\x3\x2\x2\x2\xD00\xCFF\x3\x2\x2\x2\xD01\x121\x3\x2\x2"+
		"\x2\xD02\xD05\x5\x124\x93\x2\xD03\xD05\x5\x12A\x96\x2\xD04\xD02\x3\x2"+
		"\x2\x2\xD04\xD03\x3\x2\x2\x2\xD05\x123\x3\x2\x2\x2\xD06\xD0B\x5\x13E\xA0"+
		"\x2\xD07\xD08\a\x129\x2\x2\xD08\xD0A\x5\x13E\xA0\x2\xD09\xD07\x3\x2\x2"+
		"\x2\xD0A\xD0D\x3\x2\x2\x2\xD0B\xD09\x3\x2\x2\x2\xD0B\xD0C\x3\x2\x2\x2"+
		"\xD0C\x125\x3\x2\x2\x2\xD0D\xD0B\x3\x2\x2\x2\xD0E\xD10\x5\xD0i\x2\xD0F"+
		"\xD0E\x3\x2\x2\x2\xD0F\xD10\x3\x2\x2\x2\xD10\xD11\x3\x2\x2\x2\xD11\xD13"+
		"\a\x129\x2\x2\xD12\xD0F\x3\x2\x2\x2\xD13\xD14\x3\x2\x2\x2\xD14\xD12\x3"+
		"\x2\x2\x2\xD14\xD15\x3\x2\x2\x2\xD15\xD16\x3\x2\x2\x2\xD16\xD17\x5\xD0"+
		"i\x2\xD17\x127\x3\x2\x2\x2\xD18\xD1A\ay\x2\x2\xD19\xD18\x3\x2\x2\x2\xD19"+
		"\xD1A\x3\x2\x2\x2\xD1A\xD1B\x3\x2\x2\x2\xD1B\xD21\aW\x2\x2\xD1C\xD1E\a"+
		"\x122\x2\x2\xD1D\xD1F\x5\x12A\x96\x2\xD1E\xD1D\x3\x2\x2\x2\xD1E\xD1F\x3"+
		"\x2\x2\x2\xD1F\xD20\x3\x2\x2\x2\xD20\xD22\a\x123\x2\x2\xD21\xD1C\x3\x2"+
		"\x2\x2\xD21\xD22\x3\x2\x2\x2\xD22\xD23\x3\x2\x2\x2\xD23\xD24\a\x124\x2"+
		"\x2\xD24\xD25\x5\x120\x91\x2\xD25\xD26\a\x125\x2\x2\xD26\x129\x3\x2\x2"+
		"\x2\xD27\xD2C\x5\x12C\x97\x2\xD28\xD29\a\x129\x2\x2\xD29\xD2B\x5\x12C"+
		"\x97\x2\xD2A\xD28\x3\x2\x2\x2\xD2B\xD2E\x3\x2\x2\x2\xD2C\xD2A\x3\x2\x2"+
		"\x2\xD2C\xD2D\x3\x2\x2\x2\xD2D\x12B\x3\x2\x2\x2\xD2E\xD2C\x3\x2\x2\x2"+
		"\xD2F\xD30\x5\x13E\xA0\x2\xD30\xD31\x5(\x15\x2\xD31\xD32\x5\x100\x81\x2"+
		"\xD32\x12D\x3\x2\x2\x2\xD33\xD34\x5\x130\x99\x2\xD34\xD35\x5\x132\x9A"+
		"\x2\xD35\x12F\x3\x2\x2\x2\xD36\xD37\a\x82\x2\x2\xD37\xD3A\x5\x13E\xA0"+
		"\x2\xD38\xD39\a\x6\x2\x2\xD39\xD3B\x5\x104\x83\x2\xD3A\xD38\x3\x2\x2\x2"+
		"\xD3A\xD3B\x3\x2\x2\x2\xD3B\xD3C\x3\x2\x2\x2\xD3C\xD3D\a-\x2\x2\xD3D\xD3E"+
		"\x5\xD0i\x2\xD3E\x131\x3\x2\x2\x2\xD3F\xD41\x5\x134\x9B\x2\xD40\xD3F\x3"+
		"\x2\x2\x2\xD41\xD44\x3\x2\x2\x2\xD42\xD40\x3\x2\x2\x2\xD42\xD43\x3\x2"+
		"\x2\x2\xD43\xD45\x3\x2\x2\x2\xD44\xD42\x3\x2\x2\x2\xD45\xD47\x5\x13A\x9E"+
		"\x2\xD46\xD48\x5\x13C\x9F\x2\xD47\xD46\x3\x2\x2\x2\xD47\xD48\x3\x2\x2"+
		"\x2\xD48\x133\x3\x2\x2\x2\xD49\xD6A\x5\x130\x99\x2\xD4A\xD4B\a\x87\x2"+
		"\x2\xD4B\xD4C\x5\x13E\xA0\x2\xD4C\xD4D\x5\xCEh\x2\xD4D\xD4E\x5\xD0i\x2"+
		"\xD4E\xD6A\x3\x2\x2\x2\xD4F\xD50\a\x97\x2\x2\xD50\xD6A\x5\xD0i\x2\xD51"+
		"\xD52\a\x86\x2\x2\xD52\xD55\x5\x13E\xA0\x2\xD53\xD54\a\x6\x2\x2\xD54\xD56"+
		"\x5\x104\x83\x2\xD55\xD53\x3\x2\x2\x2\xD55\xD56\x3\x2\x2\x2\xD56\xD57"+
		"\x3\x2\x2\x2\xD57\xD58\a-\x2\x2\xD58\xD59\x5\xD0i\x2\xD59\xD5A\a\x8A\x2"+
		"\x2\xD5A\xD5B\x5\xD0i\x2\xD5B\xD5C\a\x7F\x2\x2\xD5C\xD5E\x5\xD0i\x2\xD5D"+
		"\xD5F\x5\x136\x9C\x2\xD5E\xD5D\x3\x2\x2\x2\xD5E\xD5F\x3\x2\x2\x2\xD5F"+
		"\xD6A\x3\x2\x2\x2\xD60\xD61\a\x8B\x2\x2\xD61\xD66\x5\x138\x9D\x2\xD62"+
		"\xD63\a\x129\x2\x2\xD63\xD65\x5\x138\x9D\x2\xD64\xD62\x3\x2\x2\x2\xD65"+
		"\xD68\x3\x2\x2\x2\xD66\xD64\x3\x2\x2\x2\xD66\xD67\x3\x2\x2\x2\xD67\xD6A"+
		"\x3\x2\x2\x2\xD68\xD66\x3\x2\x2\x2\xD69\xD49\x3\x2\x2\x2\xD69\xD4A\x3"+
		"\x2\x2\x2\xD69\xD4F\x3\x2\x2\x2\xD69\xD51\x3\x2\x2\x2\xD69\xD60\x3\x2"+
		"\x2\x2\xD6A\x135\x3\x2\x2\x2\xD6B\xD6C\a\x85\x2\x2\xD6C\xD6D\x5\x13E\xA0"+
		"\x2\xD6D\x137\x3\x2\x2\x2\xD6E\xD70\x5\xD0i\x2\xD6F\xD71\t=\x2\x2\xD70"+
		"\xD6F\x3\x2\x2\x2\xD70\xD71\x3\x2\x2\x2\xD71\x139\x3\x2\x2\x2\xD72\xD73"+
		"\a\x8F\x2\x2\xD73\xD7A\x5\xD0i\x2\xD74\xD75\a\x83\x2\x2\xD75\xD76\x5\xD0"+
		"i\x2\xD76\xD77\a|\x2\x2\xD77\xD78\x5\xD0i\x2\xD78\xD7A\x3\x2\x2\x2\xD79"+
		"\xD72\x3\x2\x2\x2\xD79\xD74\x3\x2\x2\x2\xD7A\x13B\x3\x2\x2\x2\xD7B\xD7C"+
		"\a\x85\x2\x2\xD7C\xD7D\x5\x13E\xA0\x2\xD7D\xD7E\x5\x132\x9A\x2\xD7E\x13D"+
		"\x3\x2\x2\x2\xD7F\xD86\a\x160\x2\x2\xD80\xD86\x5\x14C\xA7\x2\xD81\xD82"+
		"\x6\xA0\x42\x2\xD82\xD86\x5\x144\xA3\x2\xD83\xD84\x6\xA0\x43\x2\xD84\xD86"+
		"\x5\x146\xA4\x2\xD85\xD7F\x3\x2\x2\x2\xD85\xD80\x3\x2\x2\x2\xD85\xD81"+
		"\x3\x2\x2\x2\xD85\xD83\x3\x2\x2\x2\xD86\x13F\x3\x2\x2\x2\xD87\xD8D\a\x160"+
		"\x2\x2\xD88\xD8D\a\x141\x2\x2\xD89\xD8D\x5\x14C\xA7\x2\xD8A\xD8D\x5\x144"+
		"\xA3\x2\xD8B\xD8D\x5\x146\xA4\x2\xD8C\xD87\x3\x2\x2\x2\xD8C\xD88\x3\x2"+
		"\x2\x2\xD8C\xD89\x3\x2\x2\x2\xD8C\xD8A\x3\x2\x2\x2\xD8C\xD8B\x3\x2\x2"+
		"\x2\xD8D\x141\x3\x2\x2\x2\xD8E\xD8F\t>\x2\x2\xD8F\x143\x3\x2\x2\x2\xD90"+
		"\xD91\t?\x2\x2\xD91\x145\x3\x2\x2\x2\xD92\xD93\t@\x2\x2\xD93\x147\x3\x2"+
		"\x2\x2\xD94\xD95\t\x41\x2\x2\xD95\x149\x3\x2\x2\x2\xD96\xD97\a\x13A\x2"+
		"\x2\xD97\xD98\a\x12E\x2\x2\xD98\xD99\a\x13A\x2\x2\xD99\xD9A\a\x12E\x2"+
		"\x2\xD9A\xDB5\a\x13A\x2\x2\xD9B\xD9C\a\x124\x2\x2\xD9C\xD9D\a\xFF\x2\x2"+
		"\xD9D\xD9E\a\x13A\x2\x2\xD9E\xD9F\a\xFC\x2\x2\xD9F\xDA0\a\x13A\x2\x2\xDA0"+
		"\xDA1\a\xFC\x2\x2\xDA1\xDAB\a\x13A\x2\x2\xDA2\xDA9\a\x13A\x2\x2\xDA3\xDA4"+
		"\a\x128\x2\x2\xDA4\xDA7\a\x13A\x2\x2\xDA5\xDA6\a\x128\x2\x2\xDA6\xDA8"+
		"\a\x13A\x2\x2\xDA7\xDA5\x3\x2\x2\x2\xDA7\xDA8\x3\x2\x2\x2\xDA8\xDAA\x3"+
		"\x2\x2\x2\xDA9\xDA3\x3\x2\x2\x2\xDA9\xDAA\x3\x2\x2\x2\xDAA\xDAC\x3\x2"+
		"\x2\x2\xDAB\xDA2\x3\x2\x2\x2\xDAB\xDAC\x3\x2\x2\x2\xDAC\xDB0\x3\x2\x2"+
		"\x2\xDAD\xDAF\v\x2\x2\x2\xDAE\xDAD\x3\x2\x2\x2\xDAF\xDB2\x3\x2\x2\x2\xDB0"+
		"\xDB1\x3\x2\x2\x2\xDB0\xDAE\x3\x2\x2\x2\xDB1\xDB3\x3\x2\x2\x2\xDB2\xDB0"+
		"\x3\x2\x2\x2\xDB3\xDB5\a\x125\x2\x2\xDB4\xD96\x3\x2\x2\x2\xDB4\xD9B\x3"+
		"\x2\x2\x2\xDB5\x14B\x3\x2\x2\x2\xDB6\xDB7\t\x42\x2\x2\xDB7\x14D\x3\x2"+
		"\x2\x2\xDB8\xDBA\x5\x8EH\x2\xDB9\xDB8\x3\x2\x2\x2\xDB9\xDBA\x3\x2\x2\x2"+
		"\xDBA\xDBC\x3\x2\x2\x2\xDBB\xDBD\x5\x150\xA9\x2\xDBC\xDBB\x3\x2\x2\x2"+
		"\xDBC\xDBD\x3\x2\x2\x2\xDBD\xDBE\x3\x2\x2\x2\xDBE\xDC0\a\xE\x2\x2\xDBF"+
		"\xDC1\x5\xF0y\x2\xDC0\xDBF\x3\x2\x2\x2\xDC0\xDC1\x3\x2\x2\x2\xDC1\xDC2"+
		"\x3\x2\x2\x2\xDC2\xDC4\x5\x13E\xA0\x2\xDC3\xDC5\x5H%\x2\xDC4\xDC3\x3\x2"+
		"\x2\x2\xDC4\xDC5\x3\x2\x2\x2\xDC5\xDCF\x3\x2\x2\x2\xDC6\xDC7\t\x43\x2"+
		"\x2\xDC7\xDCC\x5\x100\x81\x2\xDC8\xDC9\a\x129\x2\x2\xDC9\xDCB\x5\x100"+
		"\x81\x2\xDCA\xDC8\x3\x2\x2\x2\xDCB\xDCE\x3\x2\x2\x2\xDCC\xDCA\x3\x2\x2"+
		"\x2\xDCC\xDCD\x3\x2\x2\x2\xDCD\xDD0\x3\x2\x2\x2\xDCE\xDCC\x3\x2\x2\x2"+
		"\xDCF\xDC6\x3\x2\x2\x2\xDCF\xDD0\x3\x2\x2\x2\xDD0\xDDA\x3\x2\x2\x2\xDD1"+
		"\xDD2\a^\x2\x2\xDD2\xDD7\x5\x100\x81\x2\xDD3\xDD4\a\x129\x2\x2\xDD4\xDD6"+
		"\x5\x100\x81\x2\xDD5\xDD3\x3\x2\x2\x2\xDD6\xDD9\x3\x2\x2\x2\xDD7\xDD5"+
		"\x3\x2\x2\x2\xDD7\xDD8\x3\x2\x2\x2\xDD8\xDDB\x3\x2\x2\x2\xDD9\xDD7\x3"+
		"\x2\x2\x2\xDDA\xDD1\x3\x2\x2\x2\xDDA\xDDB\x3\x2\x2\x2\xDDB\xDDF\x3\x2"+
		"\x2\x2\xDDC\xDDE\x5L\'\x2\xDDD\xDDC\x3\x2\x2\x2\xDDE\xDE1\x3\x2\x2\x2"+
		"\xDDF\xDDD\x3\x2\x2\x2\xDDF\xDE0\x3\x2\x2\x2\xDE0\xDE2\x3\x2\x2\x2\xDE1"+
		"\xDDF\x3\x2\x2\x2\xDE2\xDE6\x5\xE\b\x2\xDE3\xDE5\x5\x152\xAA\x2\xDE4\xDE3"+
		"\x3\x2\x2\x2\xDE5\xDE8\x3\x2\x2\x2\xDE6\xDE4\x3\x2\x2\x2\xDE6\xDE7\x3"+
		"\x2\x2\x2\xDE7\xDE9\x3\x2\x2\x2\xDE8\xDE6\x3\x2\x2\x2\xDE9\xDEA\a\xC2"+
		"\x2\x2\xDEA\xDEB\x5\xE\b\x2\xDEB\x14F\x3\x2\x2\x2\xDEC\xDEE\t\x44\x2\x2"+
		"\xDED\xDEC\x3\x2\x2\x2\xDEE\xDEF\x3\x2\x2\x2\xDEF\xDED\x3\x2\x2\x2\xDEF"+
		"\xDF0\x3\x2\x2\x2\xDF0\x151\x3\x2\x2\x2\xDF1\xDF7\x5\x154\xAB\x2\xDF2"+
		"\xDF7\x5\x160\xB1\x2\xDF3\xDF7\x5\x16A\xB6\x2\xDF4\xDF7\x5\x158\xAD\x2"+
		"\xDF5\xDF7\x5\x164\xB3\x2\xDF6\xDF1\x3\x2\x2\x2\xDF6\xDF2\x3\x2\x2\x2"+
		"\xDF6\xDF3\x3\x2\x2\x2\xDF6\xDF4\x3\x2\x2\x2\xDF6\xDF5\x3\x2\x2\x2\xDF7"+
		"\x153\x3\x2\x2\x2\xDF8\xDF9\x5\x156\xAC\x2\xDF9\xDFA\a\x128\x2\x2\xDFA"+
		"\xDFB\x5\xE\b\x2\xDFB\x155\x3\x2\x2\x2\xDFC\xDFD\t\x45\x2\x2\xDFD\x157"+
		"\x3\x2\x2\x2\xDFE\xE00\x5\x8EH\x2\xDFF\xDFE\x3\x2\x2\x2\xDFF\xE00\x3\x2"+
		"\x2\x2\xE00\xE02\x3\x2\x2\x2\xE01\xE03\x5\x15E\xB0\x2\xE02\xE01\x3\x2"+
		"\x2\x2\xE02\xE03\x3\x2\x2\x2\xE03\xE04\x3\x2\x2\x2\xE04\xE05\a\x32\x2"+
		"\x2\xE05\xE07\x5\x13E\xA0\x2\xE06\xE08\x5\x15A\xAE\x2\xE07\xE06\x3\x2"+
		"\x2\x2\xE07\xE08\x3\x2\x2\x2\xE08\xE14\x3\x2\x2\x2\xE09\xE15\x5\x15C\xAF"+
		"\x2\xE0A\xE0B\a\x129\x2\x2\xE0B\xE0D\x5\x13E\xA0\x2\xE0C\xE0E\x5\x15A"+
		"\xAE\x2\xE0D\xE0C\x3\x2\x2\x2\xE0D\xE0E\x3\x2\x2\x2\xE0E\xE10\x3\x2\x2"+
		"\x2\xE0F\xE0A\x3\x2\x2\x2\xE10\xE13\x3\x2\x2\x2\xE11\xE0F\x3\x2\x2\x2"+
		"\xE11\xE12\x3\x2\x2\x2\xE12\xE15\x3\x2\x2\x2\xE13\xE11\x3\x2\x2\x2\xE14"+
		"\xE09\x3\x2\x2\x2\xE14\xE11\x3\x2\x2\x2\xE15\xE16\x3\x2\x2\x2\xE16\xE17"+
		"\x5\xE\b\x2\xE17\x159\x3\x2\x2\x2\xE18\xE21\a\x122\x2\x2\xE19\xE1E\x5"+
		"\x13E\xA0\x2\xE1A\xE1B\a\x129\x2\x2\xE1B\xE1D\x5\x13E\xA0\x2\xE1C\xE1A"+
		"\x3\x2\x2\x2\xE1D\xE20\x3\x2\x2\x2\xE1E\xE1C\x3\x2\x2\x2\xE1E\xE1F\x3"+
		"\x2\x2\x2\xE1F\xE22\x3\x2\x2\x2\xE20\xE1E\x3\x2\x2\x2\xE21\xE19\x3\x2"+
		"\x2\x2\xE21\xE22\x3\x2\x2\x2\xE22\xE23\x3\x2\x2\x2\xE23\xE24\a\x123\x2"+
		"\x2\xE24\x15B\x3\x2\x2\x2\xE25\xE26\a,\x2\x2\xE26\xE28\x5\x13E\xA0\x2"+
		"\xE27\xE25\x3\x2\x2\x2\xE27\xE28\x3\x2\x2\x2\xE28\xE2B\x3\x2\x2\x2\xE29"+
		"\xE2A\a-\x2\x2\xE2A\xE2C\x5\x13E\xA0\x2\xE2B\xE29\x3\x2\x2\x2\xE2B\xE2C"+
		"\x3\x2\x2\x2\xE2C\x15D\x3\x2\x2\x2\xE2D\xE2F\t\x46\x2\x2\xE2E\xE2D\x3"+
		"\x2\x2\x2\xE2F\xE30\x3\x2\x2\x2\xE30\xE2E\x3\x2\x2\x2\xE30\xE31\x3\x2"+
		"\x2\x2\xE31\x15F\x3\x2\x2\x2\xE32\xE34\x5\x15E\xB0\x2\xE33\xE32\x3\x2"+
		"\x2\x2\xE33\xE34\x3\x2\x2\x2\xE34\xE35\x3\x2\x2\x2\xE35\xE36\a\x94\x2"+
		"\x2\xE36\xE43\x5\x13E\xA0\x2\xE37\xE44\x5\x15C\xAF\x2\xE38\xE39\a\x129"+
		"\x2\x2\xE39\xE3B\x5\x13E\xA0\x2\xE3A\xE38\x3\x2\x2\x2\xE3B\xE3E\x3\x2"+
		"\x2\x2\xE3C\xE3A\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\xE41\x3\x2\x2"+
		"\x2\xE3E\xE3C\x3\x2\x2\x2\xE3F\xE40\a\x6\x2\x2\xE40\xE42\x5\x100\x81\x2"+
		"\xE41\xE3F\x3\x2\x2\x2\xE41\xE42\x3\x2\x2\x2\xE42\xE44\x3\x2\x2\x2\xE43"+
		"\xE37\x3\x2\x2\x2\xE43\xE3C\x3\x2\x2\x2\xE44\xE46\x3\x2\x2\x2\xE45\xE47"+
		"\a\xCC\x2\x2\xE46\xE45\x3\x2\x2\x2\xE46\xE47\x3\x2\x2\x2\xE47\xE49\x3"+
		"\x2\x2\x2\xE48\xE4A\a\xCA\x2\x2\xE49\xE48\x3\x2\x2\x2\xE49\xE4A\x3\x2"+
		"\x2\x2\xE4A\xE4C\x3\x2\x2\x2\xE4B\xE4D\x5\x162\xB2\x2\xE4C\xE4B\x3\x2"+
		"\x2\x2\xE4C\xE4D\x3\x2\x2\x2\xE4D\xE4F\x3\x2\x2\x2\xE4E\xE50\a\xC9\x2"+
		"\x2\xE4F\xE4E\x3\x2\x2\x2\xE4F\xE50\x3\x2\x2\x2\xE50\xE51\x3\x2\x2\x2"+
		"\xE51\xE52\x5\xE\b\x2\xE52\x161\x3\x2\x2\x2\xE53\xE54\a\xC0\x2\x2\xE54"+
		"\xE55\x5\x156\xAC\x2\xE55\x163\x3\x2\x2\x2\xE56\xE58\x5\x8EH\x2\xE57\xE56"+
		"\x3\x2\x2\x2\xE57\xE58\x3\x2\x2\x2\xE58\xE59\x3\x2\x2\x2\xE59\xE5B\x5"+
		"\x166\xB4\x2\xE5A\xE5C\x5\x15E\xB0\x2\xE5B\xE5A\x3\x2\x2\x2\xE5B\xE5C"+
		"\x3\x2\x2\x2\xE5C\xE5D\x3\x2\x2\x2\xE5D\xE5E\a\x32\x2\x2\xE5E\xE61\x5"+
		"\x13E\xA0\x2\xE5F\xE60\a\x94\x2\x2\xE60\xE62\x5\x13E\xA0\x2\xE61\xE5F"+
		"\x3\x2\x2\x2\xE61\xE62\x3\x2\x2\x2\xE62\xE65\x3\x2\x2\x2\xE63\xE64\a\x6"+
		"\x2\x2\xE64\xE66\x5\x100\x81\x2\xE65\xE63\x3\x2\x2\x2\xE65\xE66\x3\x2"+
		"\x2\x2\xE66\xE67\x3\x2\x2\x2\xE67\xE68\x5\xE\b\x2\xE68\x165\x3\x2\x2\x2"+
		"\xE69\xE6B\tG\x2\x2\xE6A\xE69\x3\x2\x2\x2\xE6B\xE6C\x3\x2\x2\x2\xE6C\xE6A"+
		"\x3\x2\x2\x2\xE6C\xE6D\x3\x2\x2\x2\xE6D\x167\x3\x2\x2\x2\xE6E\xE70\x5"+
		"\x8EH\x2\xE6F\xE6E\x3\x2\x2\x2\xE6F\xE70\x3\x2\x2\x2\xE70\xE72\x3\x2\x2"+
		"\x2\xE71\xE73\x5\x166\xB4\x2\xE72\xE71\x3\x2\x2\x2\xE72\xE73\x3\x2\x2"+
		"\x2\xE73\xE75\x3\x2\x2\x2\xE74\xE76\x5\x15E\xB0\x2\xE75\xE74\x3\x2\x2"+
		"\x2\xE75\xE76\x3\x2\x2\x2\xE76\xE77\x3\x2\x2\x2\xE77\xE7B\a\x32\x2\x2"+
		"\xE78\xE79\x5\x13E\xA0\x2\xE79\xE7A\a\x128\x2\x2\xE7A\xE7C\x3\x2\x2\x2"+
		"\xE7B\xE78\x3\x2\x2\x2\xE7B\xE7C\x3\x2\x2\x2\xE7C\xE7D\x3\x2\x2\x2\xE7D"+
		"\xE7E\x5\x14\v\x2\xE7E\xE7F\x5\xE\b\x2\xE7F\xE83\x5*\x16\x2\xE80\xE81"+
		"\a\x19\x2\x2\xE81\xE82\a\x32\x2\x2\xE82\xE84\x5\xE\b\x2\xE83\xE80\x3\x2"+
		"\x2\x2\xE83\xE84\x3\x2\x2\x2\xE84\x169\x3\x2\x2\x2\xE85\xE87\x5\x8EH\x2"+
		"\xE86\xE85\x3\x2\x2\x2\xE86\xE87\x3\x2\x2\x2\xE87\xE88\x3\x2\x2\x2\xE88"+
		"\xE8A\a\xC7\x2\x2\xE89\xE8B\x5\x166\xB4\x2\xE8A\xE89\x3\x2\x2\x2\xE8A"+
		"\xE8B\x3\x2\x2\x2\xE8B\xE8D\x3\x2\x2\x2\xE8C\xE8E\x5\x15E\xB0\x2\xE8D"+
		"\xE8C\x3\x2\x2\x2\xE8D\xE8E\x3\x2\x2\x2\xE8E\xE8F\x3\x2\x2\x2\xE8F\xE90"+
		"\a\x32\x2\x2\xE90\xE91\x5\x14\v\x2\xE91\xE92\x5\xE\b\x2\xE92\xE96\x5*"+
		"\x16\x2\xE93\xE94\a\x19\x2\x2\xE94\xE95\a\x32\x2\x2\xE95\xE97\x5\xE\b"+
		"\x2\xE96\xE93\x3\x2\x2\x2\xE96\xE97\x3\x2\x2\x2\xE97\x16B\x3\x2\x2\x2"+
		"\xE98\xE9A\x5\x8EH\x2\xE99\xE98\x3\x2\x2\x2\xE99\xE9A\x3\x2\x2\x2\xE9A"+
		"\xE9B\x3\x2\x2\x2\xE9B\xE9D\a\x11\x2\x2\xE9C\xE9E\x5\x46$\x2\xE9D\xE9C"+
		"\x3\x2\x2\x2\xE9D\xE9E\x3\x2\x2\x2\xE9E\xE9F\x3\x2\x2\x2\xE9F\xEA1\a\xE"+
		"\x2\x2\xEA0\xEA2\x5\xF0y\x2\xEA1\xEA0\x3\x2\x2\x2\xEA1\xEA2\x3\x2\x2\x2"+
		"\xEA2\xEA3\x3\x2\x2\x2\xEA3\xEA5\x5\x13E\xA0\x2\xEA4\xEA6\x5H%\x2\xEA5"+
		"\xEA4\x3\x2\x2\x2\xEA5\xEA6\x3\x2\x2\x2\xEA6\xEA9\x3\x2\x2\x2\xEA7\xEA8"+
		"\a\x6\x2\x2\xEA8\xEAA\x5\x100\x81\x2\xEA9\xEA7\x3\x2\x2\x2\xEA9\xEAA\x3"+
		"\x2\x2\x2\xEAA\xEAC\x3\x2\x2\x2\xEAB\xEAD\x5\xC2\x62\x2\xEAC\xEAB\x3\x2"+
		"\x2\x2\xEAC\xEAD\x3\x2\x2\x2\xEAD\xEB1\x3\x2\x2\x2\xEAE\xEB0\x5L\'\x2"+
		"\xEAF\xEAE\x3\x2\x2\x2\xEB0\xEB3\x3\x2\x2\x2\xEB1\xEAF\x3\x2\x2\x2\xEB1"+
		"\xEB2\x3\x2\x2\x2\xEB2\xEB5\x3\x2\x2\x2\xEB3\xEB1\x3\x2\x2\x2\xEB4\xEB6"+
		"\a\xD0\x2\x2\xEB5\xEB4\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2\x2\xEB6\xEB7\x3"+
		"\x2\x2\x2\xEB7\xEBB\x5\xE\b\x2\xEB8\xEBA\x5\x16E\xB8\x2\xEB9\xEB8\x3\x2"+
		"\x2\x2\xEBA\xEBD\x3\x2\x2\x2\xEBB\xEB9\x3\x2\x2\x2\xEBB\xEBC\x3\x2\x2"+
		"\x2\xEBC\xEC1\x3\x2\x2\x2\xEBD\xEBB\x3\x2\x2\x2\xEBE\xEC2\a\xCE\x2\x2"+
		"\xEBF\xEC0\a\x19\x2\x2\xEC0\xEC2\a\x11\x2\x2\xEC1\xEBE\x3\x2\x2\x2\xEC1"+
		"\xEBF\x3\x2\x2\x2\xEC2\xEC3\x3\x2\x2\x2\xEC3\xEC4\x5\xE\b\x2\xEC4\x16D"+
		"\x3\x2\x2\x2\xEC5\xECE\x5\x172\xBA\x2\xEC6\xECE\x5\x174\xBB\x2\xEC7\xECE"+
		"\x5\x170\xB9\x2\xEC8\xECE\x5\x178\xBD\x2\xEC9\xECE\x5\x17A\xBE\x2\xECA"+
		"\xECE\x5\x17C\xBF\x2\xECB\xECE\x5x=\x2\xECC\xECE\x5\x80\x41\x2\xECD\xEC5"+
		"\x3\x2\x2\x2\xECD\xEC6\x3\x2\x2\x2\xECD\xEC7\x3\x2\x2\x2\xECD\xEC8\x3"+
		"\x2\x2\x2\xECD\xEC9\x3\x2\x2\x2\xECD\xECA\x3\x2\x2\x2\xECD\xECB\x3\x2"+
		"\x2\x2\xECD\xECC\x3\x2\x2\x2\xECE\x16F\x3\x2\x2\x2\xECF\xED1\x5\x8EH\x2"+
		"\xED0\xECF\x3\x2\x2\x2\xED0\xED1\x3\x2\x2\x2\xED1\xED3\x3\x2\x2\x2\xED2"+
		"\xED4\x5\x8CG\x2\xED3\xED2\x3\x2\x2\x2\xED3\xED4\x3\x2\x2\x2\xED4\xED5"+
		"\x3\x2\x2\x2\xED5\xED6\x5\x12\n\x2\xED6\xED9\x5\x14\v\x2\xED7\xED8\a\xD3"+
		"\x2\x2\xED8\xEDA\x5\xD0i\x2\xED9\xED7\x3\x2\x2\x2\xED9\xEDA\x3\x2\x2\x2"+
		"\xEDA\xEE0\x3\x2\x2\x2\xEDB\xEDC\a\xD2\x2\x2\xEDC\xEDD\a\x122\x2\x2\xEDD"+
		"\xEDE\x5\x13E\xA0\x2\xEDE\xEDF\a\x123\x2\x2\xEDF\xEE1\x3\x2\x2\x2\xEE0"+
		"\xEDB\x3\x2\x2\x2\xEE0\xEE1\x3\x2\x2\x2\xEE1\xEE2\x3\x2\x2\x2\xEE2\xEE3"+
		"\x5\xE\b\x2\xEE3\xEEA\x5*\x16\x2\xEE4\xEE8\t\x4\x2\x2\xEE5\xEE6\a\x19"+
		"\x2\x2\xEE6\xEE8\x5\x12\n\x2\xEE7\xEE4\x3\x2\x2\x2\xEE7\xEE5\x3\x2\x2"+
		"\x2\xEE8\xEE9\x3\x2\x2\x2\xEE9\xEEB\a\x169\x2\x2\xEEA\xEE7\x3\x2\x2\x2"+
		"\xEEA\xEEB\x3\x2\x2\x2\xEEB\x171\x3\x2\x2\x2\xEEC\xEEE\x5\x8EH\x2\xEED"+
		"\xEEC\x3\x2\x2\x2\xEED\xEEE\x3\x2\x2\x2\xEEE\xEF0\x3\x2\x2\x2\xEEF\xEF1"+
		"\x5\x62\x32\x2\xEF0\xEEF\x3\x2\x2\x2\xEF0\xEF1\x3\x2\x2\x2\xEF1\xEF3\x3"+
		"\x2\x2\x2\xEF2\xEF4\a \x2\x2\xEF3\xEF2\x3\x2\x2\x2\xEF3\xEF4\x3\x2\x2"+
		"\x2\xEF4\xEF5\x3\x2\x2\x2\xEF5\xEFA\x5\x13E\xA0\x2\xEF6\xEF7\a\x129\x2"+
		"\x2\xEF7\xEF9\x5\x13E\xA0\x2\xEF8\xEF6\x3\x2\x2\x2\xEF9\xEFC\x3\x2\x2"+
		"\x2\xEFA\xEF8\x3\x2\x2\x2\xEFA\xEFB\x3\x2\x2\x2\xEFB\xEFF\x3\x2\x2\x2"+
		"\xEFC\xEFA\x3\x2\x2\x2\xEFD\xEFE\a\x6\x2\x2\xEFE\xF00\x5\x100\x81\x2\xEFF"+
		"\xEFD\x3\x2\x2\x2\xEFF\xF00\x3\x2\x2\x2\xF00\xF01\x3\x2\x2\x2\xF01\xF02"+
		"\x5\xE\b\x2\xF02\x173\x3\x2\x2\x2\xF03\xF05\x5\x8EH\x2\xF04\xF03\x3\x2"+
		"\x2\x2\xF04\xF05\x3\x2\x2\x2\xF05\xF07\x3\x2\x2\x2\xF06\xF08\x5\x62\x32"+
		"\x2\xF07\xF06\x3\x2\x2\x2\xF07\xF08\x3\x2\x2\x2\xF08\xF0A\x3\x2\x2\x2"+
		"\xF09\xF0B\a \x2\x2\xF0A\xF09\x3\x2\x2\x2\xF0A\xF0B\x3\x2\x2\x2\xF0B\xF0C"+
		"\x3\x2\x2\x2\xF0C\xF0F\x5\x176\xBC\x2\xF0D\xF0E\a\x6\x2\x2\xF0E\xF10\x5"+
		"\x100\x81\x2\xF0F\xF0D\x3\x2\x2\x2\xF0F\xF10\x3\x2\x2\x2\xF10\xF11\x3"+
		"\x2\x2\x2\xF11\xF12\x5\xE\b\x2\xF12\x175\x3\x2\x2\x2\xF13\xF14\x5\xF2"+
		"z\x2\xF14\xF15\x5\xCEh\x2\xF15\xF16\x5\xD0i\x2\xF16\x177\x3\x2\x2\x2\xF17"+
		"\xF18\a^\x2\x2\xF18\xF1A\x5\x100\x81\x2\xF19\xF1B\a\xD1\x2\x2\xF1A\xF19"+
		"\x3\x2\x2\x2\xF1A\xF1B\x3\x2\x2\x2\xF1B\xF1E\x3\x2\x2\x2\xF1C\xF1D\a-"+
		"\x2\x2\xF1D\xF1F\x5\xD0i\x2\xF1E\xF1C\x3\x2\x2\x2\xF1E\xF1F\x3\x2\x2\x2"+
		"\xF1F\xF20\x3\x2\x2\x2\xF20\xF21\x5\xE\b\x2\xF21\x179\x3\x2\x2\x2\xF22"+
		"\xF24\x5\x8EH\x2\xF23\xF22\x3\x2\x2\x2\xF23\xF24\x3\x2\x2\x2\xF24\xF25"+
		"\x3\x2\x2\x2\xF25\xF26\av\x2\x2\xF26\xF28\a\xA6\x2\x2\xF27\xF29\x5\x62"+
		"\x32\x2\xF28\xF27\x3\x2\x2\x2\xF28\xF29\x3\x2\x2\x2\xF29\xF2A\x3\x2\x2"+
		"\x2\xF2A\xF2B\x5\x13E\xA0\x2\xF2B\xF2C\a\x6\x2\x2\xF2C\xF2E\x5\x100\x81"+
		"\x2\xF2D\xF2F\a\xD5\x2\x2\xF2E\xF2D\x3\x2\x2\x2\xF2E\xF2F\x3\x2\x2\x2"+
		"\xF2F\xF39\x3\x2\x2\x2\xF30\xF31\a\x99\x2\x2\xF31\xF36\x5\x176\xBC\x2"+
		"\xF32\xF33\a\x129\x2\x2\xF33\xF35\x5\x176\xBC\x2\xF34\xF32\x3\x2\x2\x2"+
		"\xF35\xF38\x3\x2\x2\x2\xF36\xF34\x3\x2\x2\x2\xF36\xF37\x3\x2\x2\x2\xF37"+
		"\xF3A\x3\x2\x2\x2\xF38\xF36\x3\x2\x2\x2\xF39\xF30\x3\x2\x2\x2\xF39\xF3A"+
		"\x3\x2\x2\x2\xF3A\xF3B\x3\x2\x2\x2\xF3B\xF3C\x5\xE\b\x2\xF3C\x17B\x3\x2"+
		"\x2\x2\xF3D\xF3E\a\xD4\x2\x2\xF3E\xF3F\x5\x13E\xA0\x2\xF3F\xF40\a\x126"+
		"\x2\x2\xF40\xF43\x5\xD0i\x2\xF41\xF42\a\x129\x2\x2\xF42\xF44\x5\xD0i\x2"+
		"\xF43\xF41\x3\x2\x2\x2\xF43\xF44\x3\x2\x2\x2\xF44\xF45\x3\x2\x2\x2\xF45"+
		"\xF46\a\x127\x2\x2\xF46\xF47\x5\xE\b\x2\xF47\xF5C\x3\x2\x2\x2\xF48\xF49"+
		"\a\xD4\x2\x2\xF49\xF4A\x5\x13E\xA0\x2\xF4A\xF4B\a\x122\x2\x2\xF4B\xF4E"+
		"\x5\xD0i\x2\xF4C\xF4D\a\x129\x2\x2\xF4D\xF4F\x5\xD0i\x2\xF4E\xF4C\x3\x2"+
		"\x2\x2\xF4E\xF4F\x3\x2\x2\x2\xF4F\xF50\x3\x2\x2\x2\xF50\xF51\a\x123\x2"+
		"\x2\xF51\xF52\x5\xE\b\x2\xF52\xF5C\x3\x2\x2\x2\xF53\xF54\x5\x13E\xA0\x2"+
		"\xF54\xF55\a\x126\x2\x2\xF55\xF56\x5\xD0i\x2\xF56\xF57\a\x127\x2\x2\xF57"+
		"\xF58\x5\xCEh\x2\xF58\xF59\x5\xD0i\x2\xF59\xF5A\x5\xE\b\x2\xF5A\xF5C\x3"+
		"\x2\x2\x2\xF5B\xF3D\x3\x2\x2\x2\xF5B\xF48\x3\x2\x2\x2\xF5B\xF53\x3\x2"+
		"\x2\x2\xF5C\x17D\x3\x2\x2\x2\x238\x184\x186\x18C\x194\x198\x1A0\x1A8\x1AF"+
		"\x1D4\x1D9\x1DC\x1DF\x1E2\x1E7\x1EF\x1F2\x1F8\x1FB\x1FF\x204\x208\x20C"+
		"\x210\x214\x219\x21C\x222\x226\x229\x22F\x235\x238\x23C\x23E\x241\x248"+
		"\x24B\x24F\x256\x25A\x261\x264\x269\x26D\x270\x275\x27F\x282\x287\x28A"+
		"\x290\x295\x298\x29C\x2A1\x2A7\x2AA\x2AE\x2B1\x2B6\x2BC\x2BF\x2C3\x2CA"+
		"\x2D0\x2D4\x2DB\x2E0\x2E3\x2E6\x2EA\x2EF\x2F8\x2FD\x305\x30A\x30E\x313"+
		"\x319\x31E\x328\x330\x334\x337\x33B\x342\x347\x34C\x355\x35B\x363\x366"+
		"\x369\x36C\x370\x374\x378\x37E\x384\x38B\x393\x396\x39A\x39E\x3A2\x3AA"+
		"\x3AD\x3B2\x3B9\x3C3\x3C9\x3CE\x3D4\x3D7\x3E3\x3EB\x3EE\x3F1\x3F5\x3F9"+
		"\x401\x404\x409\x410\x418\x41B\x420\x423\x427\x42B\x433\x436\x43B\x442"+
		"\x44A\x44D\x451\x455\x458\x45C\x461\x465\x46A\x46D\x471\x476\x47C\x480"+
		"\x485\x488\x48E\x493\x496\x49A\x49F\x4A5\x4AD\x4B1\x4B5\x4B8\x4BB\x4C0"+
		"\x4C5\x4C8\x4CB\x4CE\x4D5\x4DF\x4E4\x4E9\x4F1\x4F9\x4FC\x503\x508\x50C"+
		"\x514\x51B\x51E\x521\x524\x528\x52C\x52F\x533\x539\x53F\x545\x54D\x551"+
		"\x555\x55D\x560\x569\x56C\x56F\x572\x575\x57A\x57D\x582\x587\x58A\x58F"+
		"\x596\x59A\x59D\x5A4\x5AE\x5B3\x5C7\x5CA\x5CD\x5D1\x5D5\x5D8\x5DC\x5E0"+
		"\x5E4\x5EA\x5F5\x5FC\x601\x604\x609\x60D\x611\x618\x61D\x624\x627\x62C"+
		"\x62F\x634\x638\x63F\x644\x649\x64E\x652\x659\x65F\x66B\x66E\x671\x678"+
		"\x681\x690\x69B\x6A0\x6AB\x6B7\x6BC\x6C9\x6D1\x6D4\x6DB\x6E1\x6E5\x6F1"+
		"\x6F3\x6F9\x6FF\x709\x710\x714\x717\x722\x729\x72D\x730\x73A\x740\x749"+
		"\x74C\x755\x75B\x75F\x762\x770\x773\x77A\x77E\x786\x78C\x794\x798\x79F"+
		"\x7A3\x7A6\x7B1\x7B9\x7C0\x7C8\x7CC\x7D3\x7D7\x7DD\x7E8\x7F1\x7F3\x7F9"+
		"\x7FC\x806\x813\x818\x822\x827\x82D\x836\x83E\x841\x847\x84A\x84E\x852"+
		"\x859\x85F\x863\x86A\x873\x878\x87A\x882\x889\x895\x8A1\x8A7\x8AF\x8B6"+
		"\x8BE\x8C5\x8CD\x8D4\x8DC\x8E3\x8E6\x8EE\x8F5\x8F8\x905\x908\x90B\x912"+
		"\x917\x91C\x91E\x928\x92D\x92F\x931\x934\x940\x945\x94F\x955\x95C\x961"+
		"\x969\x974\x97B\x982\x98E\x993\x99B\x9A1\x9AA\x9B5\x9BA\x9BD\x9C6\x9D1"+
		"\x9D6\x9D9\x9DB\x9E2\x9E7\x9EA\x9F0\x9F3\x9F6\xA00\xA07\xA15\xA2D\xA30"+
		"\xA6E\xA82\xA88\xA8D\xA95\xA97\xA99\xAA1\xABD\xAD1\xB10\xB24\xB2A\xB33"+
		"\xB45\xB47\xB53\xB6C\xB7C\xB84\xB86\xB8A\xB92\xB95\xB9F\xBA7\xBAE\xBB6"+
		"\xBC0\xBCA\xBD1\xBE0\xBE3\xBE5\xBEC\xBF0\xBFE\xC09\xC14\xC18\xC20\xC26"+
		"\xC29\xC31\xC37\xC45\xC4C\xC52\xC57\xC5C\xC60\xC66\xC6E\xC76\xC7B\xC7E"+
		"\xC87\xC8A\xC93\xC96\xC9E\xCA1\xCA8\xCB3\xCB6\xCBF\xCC7\xCD2\xCDE\xCE6"+
		"\xCEA\xCF1\xCF7\xCFA\xD00\xD04\xD0B\xD0F\xD14\xD19\xD1E\xD21\xD2C\xD3A"+
		"\xD42\xD47\xD55\xD5E\xD66\xD69\xD70\xD79\xD85\xD8C\xDA7\xDA9\xDAB\xDB0"+
		"\xDB4\xDB9\xDBC\xDC0\xDC4\xDCC\xDCF\xDD7\xDDA\xDDF\xDE6\xDEF\xDF6\xDFF"+
		"\xE02\xE07\xE0D\xE11\xE14\xE1E\xE21\xE27\xE2B\xE30\xE33\xE3C\xE41\xE43"+
		"\xE46\xE49\xE4C\xE4F\xE57\xE5B\xE61\xE65\xE6C\xE6F\xE72\xE75\xE7B\xE83"+
		"\xE86\xE8A\xE8D\xE96\xE99\xE9D\xEA1\xEA5\xEA9\xEAC\xEB1\xEB5\xEBB\xEC1"+
		"\xECD\xED0\xED3\xED9\xEE0\xEE7\xEEA\xEED\xEF0\xEF3\xEFA\xEFF\xF04\xF07"+
		"\xF0A\xF0F\xF1A\xF1E\xF23\xF28\xF2E\xF36\xF39\xF43\xF4E\xF5B";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
