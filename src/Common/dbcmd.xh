///////////////////////////////////////////////////////////////////////////
// DbCmds.xh
//
// XSharp Database commands
//
// Copyright (c) XSharp BV.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.
// See License.txt in the project root for license information.
//
// IMPORTANT:  Functions beginning with an underscore
//             character are reserved, version-dependent functions.
//             These functions should not be called directly.
//
// Caution: do not modify this file. It will be overwritten during product updates
// Rules with more optional clauses should precede rules without these optional clauses, such as INDEX ON, REPLACE and DELETE
//

#ifndef DBCMD_XH

#define DBCMD_XH

// rule for Fields, used in several other rules. This converts a list of field names to an array of field names

#translate __DBFIELDS__     <f1> [,<fn> ]   => ;
           __DBFIELDLIST__  {<(f1)>[, <(fn)> ]}


#command SELECT <whatever>              => DbSelectArea( <(whatever)> )
#command SELECT <f>([<list,...>])       => DbSelectArea( <f>(<list>) )
#command SELECT &<whatever>             => DbSelectArea( <whatever> )

#command USE                            => DbCloseArea()

#ifndef __DIALECT_FOXPRO__
// FoxPro has its own USE command with other options such as IN and ORDER
#command USE <(db)>                                                     ;
             [VIA <rdd>]                                                ;
             [ALIAS <a>]                                                ;
             [<new: NEW>]                                               ;
             [<ex: EXCLUSIVE>]                                          ;
             [<sh: SHARED>]                                             ;
             [<ro: READONLY,NOUPDATE>]                                  ;
             [INDEX <(index1)> [, <(indexn)>]]                          ;
      => DbUseArea( <.new.>, <rdd>, <(db)>, <(a)>, iif(<.sh.> .or. <.ex.>, !<.ex.>, NIL), <.ro.> ) ;
      [; DbSetIndex( <(index1)> )]                                      ;
      [; DbSetIndex( <(indexn)> )]

#endif // __DIALECT_FOXPRO__


// Common Index and Order commands

#command  SET INDEX TO  => OrdListClear()

#command  SET INDEX TO [ <(index1)> [, <(indexN)>]] ;
      =>  OrdListClear() [; OrdListAdd( <(index1)> )] [; OrdListAdd( <(indexn)> )]

#command  SET INDEX TO <(index1)> [, <(indexN)> ] ADDITIVE ;
      =>  OrdListAdd( <(index1)> ) [; OrdListAdd( <(indexn)> )]

#ifndef __DIALECT_FOXPRO__
// FoxPro has its own SET INDEX TO command with options such as Binary and Collation
#command INDEX ON <(key)>         								   ;
     [TAG <order>]                									;
     [<To:TO,OF> <file>]                							;
     [FOR <fo>]                 										;
     [<all:ALL>]                										;
     [WHILE <wh>]               										;
     [NEXT <nx>]                										;
     [RECORD <rec>]             										;
     [<rs:REST>]                										;
     [EVAL <ev>]                										;
     [EVERY <evr>]              										;
     [<u:UNIQUE>]               										;
     [<asd:ASCENDING>]          										;
     [<dsd:DESCENDING>]         										;
     [<lCur:USECURRENT>]        										;
     [<lAdd:ADDITIVE>]          										;
     [<lCus:CUSTOM>]            										;
     [<lNop:NOOPTIMIZE>]        										;
    => OrdCondSet( <"fo">, , [<.all.>], <{wh}>, <{ev}>, <evr>, ;
          RecNo(), <nx>, <rec>,[<.rs.>],[<.dsd.>],<.lAdd.>,	  ;
          [<.lCur.>], [<.lCus.>], [<.lNop.>] );;             ;
       OrdCreate(<(file)>,<(order)>,<(key)>,,IIF(<.u.>,.T., NIL))
#endif // __DIALECT_FOXPRO__
#command REINDEX [EVAL <eval>] [EVERY <every>] [<lNop: NOOPTIMIZE>] => ;
            OrdCondSet(,,,, <{EVAL}>, <EVERY>,,,,,,,,,, <.lNop.>) ;;
            OrdListRebuild()
#command REINDEX        => OrdListRebuild()
#command SEEK <xpr>  [<soft:SOFTSEEK>] [<lst:LAST>]                     => DbSeek( <xpr> , <.soft.>, <.lst.>)

#command SET ORDER TO <xOrder> [IN <file>] 	=> OrdSetFocus( <xOrder> [,<(file)>] )
#command SET ORDER TO TAG <cOrder> [IN <file>] 	=> OrdSetFocus( <(cOrder)> [,<(file)>] )
#command SET ORDER TO           		=> OrdSetFocus(0)

#command SET SCOPE TO                        =>  OrdScope(0,NIL) ; OrdScope(1,NIL)
#command SET SCOPE TO <xValue>               =>  OrdScope(0, <xValue>) ; OrdScope(1, <xValue>)
#command SET SCOPE TO <xVal1>, <xVal2>       =>  OrdScope(0, <xVal1>) ; OrdScope(1, <xVal2>)
#command SET SCOPETOP TO                     =>  OrdScope(0,NIL)
#command SET SCOPETOP TO <xValue>            =>  OrdScope(0, <xValue>)
#command SET SCOPEBOTTOM TO                  =>  OrdScope(1,NIL)
#command SET SCOPEBOTTOM TO <xValue>         =>  OrdScope(1, <xValue>)

#command SET DESCENDING ON                   =>  OrdDescend(,, .T.)
#command SET DESCENDING OFF                  =>  OrdDescend(,, .F.)

// CRUD commands

#command APPEND BLANK           => DbAppend()
#command PACK                   => DbPack()
#command ZAP                    => DbZap()
#command COMMIT                 => DbCommit()

#command COMMIT ALL             => DbCommitAll()
#command UNLOCK [RECORD <rcd>]  => DbUnlock(<rcd>)

#command UNLOCK ALL             => DbUnlockAll()

// Goto and Skip
#command GOTO <n>               => DbGoto(<n>)
#command GO [RECORD] <n>        => DbGoto(<n>)
#command GOTO TOP               => DbGoTop()
#command GO TOP                 => DbGoTop()
#command GOTO BOTTOM            => DbGoBottom()
#command GO BOTTOM              => DbGoBottom()
#command SKIP                   => DbSkip(1)
#command SKIP <n>               => DbSkip( <n> )


#command SET FILTER TO          => dbClearFilter()
#command SET FILTER TO <xpr>    => dbSetFilter( <{xpr}>, <"xpr"> )

#command SET FILTER TO <x:&>                                            ;
      => IF ( Empty(<(x)>) )                                            ;
       ;    DbClearFilter()                                             ;
       ; ELSE                                                           ;
       ;    DbSetFilter( <{x}>, <(x)> )                                 ;
       ; END

// Multi record REPLACE
#command REPLACE <(f1)> WITH <x1> [, <(fn)> WITH <xn>]                  ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbEval(                                                        ;
                 {||DbAutoLock(), __FieldSet(<(f1)>,<x1>) [, __FieldSet(<(fn)>, <xn>)], DbAutoUnLock()},    ;
                 <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
               )

// This variant moves the ALL clause to the end. This is needed because the WITH clause is declared as non optional
#command REPLACE <*clauses*> ALL <*moreclauses*> => REPLACE <clauses> <moreclauses> ALL

// Single record replace
#command REPLACE <(f1)> WITH <v1> [, <(fN)> WITH <vN> ]                     ;
      => DbAutoLock(); __FieldSet(<(f1)>,<v1>) [;__FieldSet(<(fN)>,<vN>)]; DbAutoUnLock()

// Multi record Delete
#command DELETE                                                         ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbEval(                                                        ;
                 {|| DbAutoLock(), DbDelete(), DbAutoUnLock()},                                       ;
                 <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
               )

// Single Record Delete
#command DELETE                     =>  __DbDelete()

// Multi record RECALL
#command RECALL                                                         ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DBEval(                                                        ;
                 {|| __DbRecall()},                                       ;
                 <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
                  )

// Single record RECALL
#command RECALL                     =>  __DbRecall()

// Find command has no IN clause !
#command FIND <*text*>          => DbSeek( <(text)> )
#command FIND := <xpr>          => ( find := <xpr> )
#command FIND = <xpr>           => ( find := <xpr> )

#command CONTINUE               => DbContinue()

#command LOCATE                                                         ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbLocate( <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.> )

// Relation commands: Note the order is important !
// Scoped Relations
#command SET RELATION                                                   ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
         [SCOPED] [ADDITIVE]                                            ;
      => OrdSetRelation( <(alias1)>, <{key1}>, <"key1"> )               ;
      [; OrdSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

#command SET RELATION                                                   ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
         SCOPED                                                         ;
      => DbClearRelation()                                              ;
       ; OrdSetRelation( <(alias1)>, <{key1}>, <"key1"> )               ;
      [; OrdSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

// Normal Relations
#command SET RELATION                                                   ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
         [ADDITIVE]                                                       ;
      => DbSetRelation( <(alias1)>, <{key1}>, <"key1"> )                ;
      [; DbSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

#command SET RELATION                                                   ;
         [TO <key1> INTO <(alias1)> [, [TO] <keyn> INTO <(aliasn)>]]    ;
      => DbClearRelation();
      ;  DbSetRelation( <(alias1)>, <{key1}>, <"key1"> )                ;
      [; DbSetRelation( <(aliasn)>, <{keyn}>, <"keyn"> )]

#command SET RELATION TO        => DbClearRelation()


#command CREATE <(file1)>           ;
            [FROM <(file2)>]        ;
            [ALIAS <a>]             ;
            [VIA <rdd>]             ;
            [<NEW: NEW>]            ;
            => _DbCreate( <(file1)>, <(file2)> , <rdd>, <.new.>, <(a)> )


#ifndef __DIALECT_FOXPRO__
// FoxPro has its own commands with the DATABASE keyword
// STRUCTURE and EXTENDED keyword can be optional, so it can be anywhere in the command. Same for TO <(file)>
// The normal Copy and COPY STRUCTURE commands are declared later and will take precedence when the keywords are omitted
#command COPY [STRUCTURE] [EXTENDED] [TO <(file)>]   => DbCopyXStruct( <(file)> )
#command COPY [STRUCTURE] [TO <(file)>] [__DBFIELDLIST__ <fields>]  => DbCopyStruct( <(file)>, <fields> )


// These commands are also defined in the FoxPro header file

#command COPY [TO <(file)>] DELIMITED [WITH <*delim*>]                  ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbCopyDelim(                                                   ;
                        <(file)>, <(delim)>, <fields> ,                 ;
                        <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>  ;
                      )

#command COPY [TO <(file)>] SDF                                         ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbCopySDF(                                                     ;
                      <(file)>, <fields>,                               ;
                      <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>    ;
                    )

#command COPY [TO <(file)>]                                             ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
         [VIA <rdd>]                                                    ;
         [INHERIT <hdnlist,...>]                                        ;
                                                                        ;
      => DbCopy(                                                        ;
                   <(file)>, <fields>,                                  ;
                   <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>,      ;
                   <rdd>, { <(hdnlist)> }, <.noopt.>)


#command APPEND [FROM <(file)>] DELIMITED [WITH <*delim*>]              ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbAppDelim(                                                    ;
                       <(file)>, <(delim)>, <fields>,                   ;
                       <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>   ;
                     )

#command APPEND [FROM <(file)>] SDF                                     ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [ALL]                                                          ;
                                                                        ;
      => DbAppSDF(                                                      ;
                     <(file)>, <fields>,                                ;
                     <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>     ;
                   )

#command APPEND [FROM <(file)>]                                        ;
         [__DBFIELDLIST__ <fields>]                                    ;
         [FOR <lfor>]                                                  ;
         [WHILE <lwhile>]                                              ;
         [NEXT <nnext>]                                                ;
         [RECORD <rec>]                                                ;
         [<REST:REST>]                                                 ;
         [all]                                                         ;
         [VIA <rdd>]                                                   ;
                                                                       ;
      => DbApp(                                                        ;
                  <(file)>, <fields>,                                  ;
                  <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <rdd> ;
                )

// This rule takes the list of field names for COPY and APPEND and converts them to an array
#command <cmd:COPY,APPEND>  <*clauses*> FIELDS <*moreclauses*> => ;
         <cmd> <clauses>   __DBFIELDS__ <moreclauses>


#endif // __DIALECT_FOXPRO__

#command SORT  [TO <(file)>]  [ON <fields,...>]                         ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbSort(                                                        ;
                   <(file)>, <fields>,                                  ;
                   <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.> ;
                 )

#command TOTAL [TO <(file)>] ON <key>                                   ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => DbTotal(                                                       ;
                    <(file)>, <{key}>, <fields>,                        ;
                    <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>       ;
                  )

#command TOTAL <*clauses*> FIELDS <*moreclauses*> => ;
         TOTAL <clauses> __DBFIELDS__ <moreclauses>



#command UPDATE  [FROM <(alias)>]  [ON <key>]                           ;
         [REPLACE <(f1)> WITH <x1> [, <(fn)> WITH <xn>]]                ;
         [<rand:RANDOM>]                                                ;
                                                                        ;
      => DbUpdate(                                                      ;
                     <(alias)>, <{key}>, <.rand.>,                      ;
                     {|| __FieldSet(<(f1)>,<x1>) [, __FieldSet(<(fn)>,<xn>)]} ;
                   )


#command JOIN  [WITH <(alias)>]  [TO <file>]                            ;
         [__DBFIELDLIST__ <fields>]                                     ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [FOR <lfor>]                                                   ;
                                                                        ;
      => DbJoin( <(alias)>, <(file)>, <fields>, <{lfor}>,<.noopt.> )


#command JOIN <*clauses*> FIELDS <*moreclauses*> => ;
         JOIN <clauses> __DBFIELDS__ <moreclauses>

#command COUNT [TO <xvar>]                                              ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => <xvar> := 0                                                    ;
       ; DbEval(                                                        ;
               {|| <xvar> += 1},                                        ;
               <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
               )

#command SUM  <x1> [, <xn>]  TO  <v1> [, <vn>]                          ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => <v1> := [ <vn> := ] 0                                          ;
       ; DbEval(                                                        ;
               {|| <v1> += <x1> [, <vn> += <xn> ]},                     ;
               <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
               )

#command AVERAGE [<x1> [, <xn>]  TO  <v1> [, <vn>]]                     ;
         [FOR <lfor>]                                                   ;
         [WHILE <lwhile>]                                               ;
         [NEXT <nnext>]                                                 ;
         [RECORD <rec>]                                                 ;
         [<rest:REST>]                                                  ;
         [<noopt: NOOPTIMIZE>]                                          ;
         [ALL]                                                          ;
                                                                        ;
      => M->__Avg := <v1> := [ <vn> := ] 0                              ;
                                                                        ;
       ; DbEval(                                                        ;
               {|| M->__Avg += 1,                                       ;
               <v1> += <x1> [, <vn> += <xn>] },                         ;
               <{lfor}>, <{lwhile}>, <nnext>, <rec>, <.rest.>, <.noopt.>;
               )                                                        ;
                                                                        ;
       ; <v1> /= M->__Avg [; <vn> /= M->__Avg ]


#command DELETE TAG <cOrd1> [IN <file1>] [,<cOrdN> [IN <fileN>]]        ;
       =>     ORDDESTROY(<(cOrd1)> ,<(file1)>) ;
          [;; ORDDESTROY(<(cOrdN)> ,<(fileN)>)]


// NOTE:  CLOSE <alias> must precede the others
#command CLOSE <alias>                 => <alias>->( DbCloseArea() )
#command CLOSE &<alias>                => (<alias>)->( DbCloseArea() )

#command CLOSE DATABASES                     => DbCloseAll()
#command CLOSE ALL                           => DbCloseAll(); DbSelectArea(1)
#command CLOSE INDEXES                       => DbClearIndex()
#command CLOSE                               => DbCloseArea()

#command SET DRIVER TO <drv>                 => DBSetDriver(<(drv)>)
#command SET MEMOBLOCK TO <size>             => RDDInfo(_SET_MEMOBLOCKSIZE, <size>)
#command SET MEMOBLOCKSIZE TO <size>         => RDDInfo(_SET_MEMOBLOCKSIZE, <size>)
#command SET MEMOBLOCKSIZE TO                => RDDInfo(_SET_MEMOBLOCKSIZE, 512)
#command SET OPTIMIZE <x:ON,OFF,&>           => RDDInfo(_SET_OPTIMIZE, <(x)>)


#endif // DBCMD_XH

// EOF
