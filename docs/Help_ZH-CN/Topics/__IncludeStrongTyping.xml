<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Popup" modified="2024-07-24T12:18:08.425+08:00" lasteditedby="niuji" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>__IncludeStrongTyping</title>
  <body>
    <para styleclass="Heading1">强类型方法</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">除了 &lt;%APP%&gt; 的非类型化方法实现外，现在还支持方法参数和返回值的<text style="font-weight:bold;">强类型</text>，这为您提供了一种可以获得高度稳定代码的机制。提供的类型信息使编译器能够执行必要的类型检查，从而保证更高的代码质量稳定性。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">使用强类型方法的另一个好处是性能。强类型方法的实现假定当程序员使用强类型消息时，编译器可以有效地为相应的方法调用执行<text style="font-weight:bold;">早期绑定(early binding)</text>。由于这种实现，强类型方法的调用比相应的非类型化方法调用稍快。然而，这些优势是以失去非类型方法所提供的灵活性为代价的。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">因此，重要的是要记住，在继承链中交替使用特定方法的强类型和非类型版本既不允许也不可能。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">&lt;%APP%&gt; 允许对 METHODs、ACCESSes 和 ASSIGNs 进行强类型化。程序员通过以下两个步骤完成 &lt;%APP%&gt; 中强类型方法的指定：</para>
    <para styleclass="Normal"></para>
    <para styleclass="List">1.<tab />在其相应的类中进行强类型方法的强制声明。</para>
    <para styleclass="List"><tab />该声明负责在 &lt;%APP%&gt; 用于调用强类型方法的所谓虚拟表中声明方法的顺序。在子类中重新声明方法是<text style="font-weight:bold;">不允许</text>的，因为这会导致编译器的歧义。</para>
    <para styleclass="List"></para>
    <para styleclass="List">2.<tab />定义强类型方法。</para>
    <para styleclass="List"><tab />与强类型函数不同，方法类型化要求对方法参数、方法返回值进行强类型化，并指定有效的调用约定。</para>
    <para styleclass="List"><tab />以下调用约定对强类型方法有效：STRICT、PASCAL 或 CALLBACK。</para>
  </body>
</topic>
