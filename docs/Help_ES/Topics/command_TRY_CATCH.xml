<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>TRY CATCH Statement</title>
  <keywords>
    <keyword>Branching</keyword>
    <keyword>CATCH statement</keyword>
    <keyword>END TRY statement</keyword>
    <keyword>FINALLY statement</keyword>
    <keyword>Program control</keyword>
    <keyword>Statements</keyword>
    <keyword>THROW statement</keyword>
    <keyword>TRY CATCH  statement</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">TRY CATCH Statement</para>
    </header>
    <para styleclass="Heading1">Purpose</para>
    <para styleclass="Body Text"><text style="font-weight:bold;">TRY</text>, <text style="font-weight:bold;">CATCH </text>and <text style="font-weight:bold;">FINALLY </text>are used to declare an exception handling block.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code with box">TRY<br/><tab /><text style="font-style:italic;">guardedStatements</text><br/>[CATCH [[<text style="font-style:italic;">variableName]</text> AS <text style="font-style:italic;">exceptionType</text>] [WHEN <text style="font-style:italic;">whenexpression</text>]<br/><tab /><text style="font-style:italic;">exceptionHandlingStatements</text><br/>] &#160; <br/>[FINALLY<br/><tab /><text style="font-style:italic;">cleanupStatements</text><br/>]<br/>END TRY<text styleclass="Body Text">&#32;</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading1">Arguments</para>
    <para styleclass="Body Text"></para>
    <para styleclass="List" style="text-indent:-241px; margin-left:241px; tabstops:240px left ;"><text style="font-style:italic;">variableName</text><tab />The name of a variable that will receive the exception. The variable name is optional. If you only specify the type then the exception will still be caught but not stored in a local variable.</para>
    <para styleclass="List" style="text-indent:-241px; margin-left:241px; tabstops:240px left ;"><text style="font-style:italic;">exceptionType</text><tab />The exception type that will be caught by the CATCH block. </para>
    <para styleclass="List" style="text-indent:-241px; margin-left:241px; tabstops:240px left ;"><text style="font-style:italic;">whenexpression</text><tab />A logical expression that determines if the particular CATCH block should be active</para>
    <para styleclass="List" style="text-indent:-241px; margin-left:241px; tabstops:240px left ;"><text style="font-style:italic;">exceptionHandlingStatements</text><tab />Zero or more statements that handle the exception condition. </para>
    <para styleclass="List" style="text-indent:-241px; margin-left:241px; tabstops:240px left ;"><text style="font-style:italic;">cleanupStatements</text><tab />Zero or more statements that perform any necessary cleanup before the TRY block is exited.. </para>
    <para styleclass="Heading1">Remarks</para>
    <para styleclass="Body Text">A <text style="font-weight:bold;">TRY</text>-<text style="font-weight:bold;">CATCH</text>-<text style="font-weight:bold;">FINALLY</text> block is used to trap and handle exceptions that may be thrown within a block of code. Exceptions may be generated by the CLR, the Vulcan.NET runtime library, third-party libraries or by application code using the <text style="font-weight:bold;">THROW</text> statement.</para>
    <para styleclass="Heading3">TRY Block</para>
    <para styleclass="Body Text">The statements within the <text style="font-weight:bold;">TRY</text> block are sometimes referred to as &quot;guarded&quot; statements. These are the statements that potentially can cause exceptions that you want to handle.</para>
    <para styleclass="Heading3">CATCH Blocks</para>
    <para styleclass="Body Text">A exception handling block may contain any number of <text style="font-weight:bold;">CATCH</text> blocks (including zero). Each <text style="font-weight:bold;">CATCH</text> block that declares a variable name and a type will receive exceptions of that type. CATCH blocks that receive exceptions implicitly declare a local variable that will contain the caught exception. This implicitly declared local variable is only valid within the scope of the CATCH block. The name given to the variable must not be the same as any explicitly declared LOCAL or parameter, or a compile-time error will occur. However, it is legal to use the same variable name in multiple CATCH blocks. Since each <text style="font-weight:bold;">CATCH</text> block&apos;s variable is only visible within its enclosing block, there is no conflict.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Normal">A <text styleclass="Body Text" style="font-weight:bold;">CATCH</text> block may also be declared without a variable name but WITH an exception type. <text styleclass="List">In that case the exception will still be caught but not stored in a local variable.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Body Text">A <text style="font-weight:bold;">CATCH</text> block may also be declared without any variable name and exception type. This type of CATCH block will catch any exception, and is equivalent to declaring a CATCH block with an exception type of System.Exception.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">If multiple <text style="font-weight:bold;">CATCH</text> blocks are declared, the order in which they appear is important. The CLR will examine the CATCH clauses in order, and invoke the first one that matches the exception being thrown. This includes not only the specific exception class that was specified, but any derived classes. For this reason, you should catch the more specific exception types before less specific ones.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The exception type declared in a <text style="font-weight:bold;">CATCH</text> block must always be System.Exception, or a class derived from it.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">If no suitable <text style="font-weight:bold;">CATCH</text> block was declared for the exception that has been thrown, control will be passed to the next highest exception handling block. If there is no higher exception handling block, or none that can handle the exception, the application will terminate.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">Exceptions may be explicitly passed on to the next highest exception handling block by using the THROW keyword.</para>
    <para styleclass="Heading3">Finally Block</para>
    <para styleclass="Body Text">If a <text style="font-weight:bold;">FINALLY</text> block is declared, any statements within it are executed regardless of how the TRY block exits. This provides a mechanism to perform any cleanup such as releasing resources. The code within a finally block will be executed even if there is no suitable CATCH block to handle the exception.</para>
    <para styleclass="Heading3">Compatibility Note: </para>
    <para styleclass="Body Text"><text style="font-weight:bold;">TRY</text>-<text style="font-weight:bold;">CATCH</text>-<text style="font-weight:bold;">FINALLY</text> blocks are similar to, but much more flexible than <text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text>-<text style="font-weight:bold;">RECOVER</text> blocks. However, <text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text> and <text style="font-weight:bold;">RECOVER</text> are still supported for backwards compatibility.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">Note that exceptions thrown with <text style="font-weight:bold;">BREAK</text> will not be caught with a <text style="font-weight:bold;">TRY</text>-<text style="font-weight:bold;">CATCH</text>-<text style="font-weight:bold;">FINALLY</text> block because the data thrown by <text style="font-weight:bold;">BREAK</text> is encapsulated in a USUAL, which does not inherit from System.Exception.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">However, exceptions thrown with <text style="font-weight:bold;">THROW</text> will be caught by the next highest BEGIN SEQUENCE block (if any) and the exception will be encapsulated in a USUAL if a RECOVER USING variable has been declared.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">Also note that the CanBreak() runtime function does not detect whether execution is currently within a <text style="font-weight:bold;">TRY</text> block. CanBreak() is provided only for compatibility with existing Visual Objects code and <text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text> blocks, and should not be relied upon to determine whether execution is within an exception handling block. There is no way to determine whether execution is within an exception handling block because this functionality is not present in the CLR, and execution may currently be within code that is compiled in an language other than Vulcan.NET.</para>
    <para styleclass="Heading1">Example</para>
    <para styleclass="Body Text">The following example tests for division by zero and catches the exception that will be thrown by the CLR if the divisor is zero. Any other exceptions would propagate to the next highest exception handling block (if any). Without the exception handling block, the application would terminate with an unhandled DivideByZeroException.</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> DivisionTest( x </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;">, y </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> x / y</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> System.DivideByZeroException</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Divide by zero!&quot;, e</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 0</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">The following example demonstrates multiple CATCH blocks and a FINALLY block:</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">USING</text><text style="font-weight:normal; font-style:normal; color:#000000;"> System.IO</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ReadFile( filename </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">STRING</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;s := File.ReadAllText( filename ) </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> DirectoryNotFoundException</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Directory not found&quot;, e</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> IOException</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;IO exception occurred&quot;, e</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><text style="font-weight:normal; font-style:normal; color:#000000;"> e </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> UnauthorizedAccessException</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Access denied&quot;, e</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CATCH</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;Some other exception&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">FINALLY</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160;? &quot;All done!&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">TRY</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text styleclass="Body Text"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text></para>
    <para styleclass="Heading2">See Also</para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:7px; margin-right:0px; margin-bottom:7px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_BEGIN_SEQUENCE" styleclass="" style="font-family:&apos;Times New Roman&apos;; font-size:12pt; text-decoration:underline; color:#0000ff;">BEGIN SEQUENCE</link><br/><link displaytype="text" defaultstyle="true" type="topiclink" href="command_THROW" styleclass="" style="font-family:&apos;Times New Roman&apos;; font-size:12pt; text-decoration:underline; color:#0000ff;">THROW</link></para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
  </body>
</topic>
