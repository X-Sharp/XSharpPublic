<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>#if</title>
  <body>
    <header>
      <para styleclass="Heading1">#if</para>
    </header>
    <para styleclass="Heading1">Purpose</para>
    <para styleclass="Body Text">Mark a region in the source code that will only be included in the compilation when a logical condition evaluates to TRUE.</para>
    <para styleclass="Heading1">Syntax </para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &lt;logical_expression&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;SourceCode included </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &lt;logical_expression&gt; evaluates </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">to</text><text style="font-weight:normal; font-style:normal; color:#000000;"> .T.&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">[ #</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">else</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;SourceCode included </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text style="font-weight:normal; font-style:normal; color:#000000;"> &lt;logical_expression&gt; othwerwise&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">] </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;logical_expression&gt;</text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: &lt;expression&gt;</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&lt;expression&gt; &#160;: &lt;unary_operator&gt; &lt;expression&gt; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// unary prefix expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;expression&gt; &lt;binary_operator&gt; &lt;expression&gt; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// binary numeric expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;expression&gt; &lt;shift_operator&gt; &lt;expression&gt; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// binary shift expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;expression&gt; &lt;comparison_operator&gt; &lt;expression&gt; &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// binary logical expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;expression&gt; &lt;bitwise_operator&gt; &lt;expression&gt; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// binary bitwise expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;expression&gt; &lt;logical_operator&gt; &lt;expression&gt; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// binary logical expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;negation_operator&gt; &lt;expression&gt; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// negation expression</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160; &#160; | &lt;primary_expression&gt; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// primary expression</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;unary_operator&gt; &#160;</text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: + | - | ++ | -- </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;binary_operator&gt; </text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: ^ | * | / | % | + | - </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;shift_operator&gt;</text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: &lt;&lt; | &gt;&gt; </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;comparison_operator&gt; : &lt; | &lt;= | &gt; | &gt;= | = | == | != | &lt;&gt; </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;bitwise_operator&gt;</text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: </text><text style="font-style:normal; color:#000000;">&amp; | | </text><br/><br/><text style="font-style:normal; color:#000000;">&lt;logical_operator&gt;</text><tab /><text style="font-style:normal; color:#000000;">: </text><text style="font-weight:normal; font-style:normal; color:#000000;">.AND. | .OR. | .XOR.</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;negation_operator&gt;</text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: ! | .NOT. </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;primary_expression&gt; : &lt;literal_value&gt; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// literal expression</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| ( &lt;expression&gt; ) &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// parenthesized expression</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;literal_value&gt; &#160; </text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: &lt;string_literal&gt;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &lt;char_literal&gt;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &lt;logical_literal&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &lt;integer&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &lt;double&gt; </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &lt;#define_constant&gt; </text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;string_literal&gt; &#160; </text><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">: &#160;&quot;double quoted&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| &apos;single_quoted&apos;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| [block_quoted]</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><tab /><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">| e&quot;escaped&quot;</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;char_literal&gt; &#160; &#160; &#160;c&apos;&lt;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">char</text><text style="font-weight:normal; font-style:normal; color:#000000;">&gt;&apos;</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">&lt;logical_literal&gt; &#160; : &#160;.T. | TRUE | .F. | FALSE</text></para>
    <para styleclass="Heading1">Description</para>
    <para styleclass="Body Text">The <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">...#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">else</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">...#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text> directive forms a control structure for the preprocessor. <br/>When the &lt;logical_expression&gt; evaluates to true (.T.), the preprocessor translates and outputs the source code located between the directives <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">if</text> and <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">else</text> to the intermediary file, and the source code between the directives <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">else</text> and <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text> is ignored. <br/>If no <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">else</text> directive is present, the preprocessor translates and outputs the source code located between the directives <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">if</text> and <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text> . <br/>If the &lt;logical_expression&gt; evaluates to false (.F.) the source code between the directives <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">else</text> and <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text> is included only. </para>
    <para styleclass="Body Text">The &lt;logical_expression&gt; term can be formed using operands, compare operators and logical operators. A compare operations always requires two operands and will be evaluated prior to logical operations. The operands must be either string literals, numeric literals or logical literals or a valid <text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">#</text><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">define</text> constant that results to one of the mentioned literals. <br/>A string will be recognized when it is enclosed within single or double quote characters. If an undefined constant is encountered the result of that term will be false (.F.). </para>
    <para styleclass="Body Text">A logical expression consists either of two expression and one logical operator, or simply of one literal. </para>
    <para styleclass="" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"></para>
    <para styleclass="Heading1">Type conversions</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">When an expression mixes types then the preprocessor automatically converts types in the following order for comparisons and calculations:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">1.<tab />String</para>
    <para styleclass="Normal">2.<tab />Double</para>
    <para styleclass="Normal">3.<tab />Integer</para>
    <para styleclass="Normal">4.<tab />Logic</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Example</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 1 &gt; &quot;abc&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// the 1 is converted to &quot;1&quot; first before the comparison is done</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? &quot;Compare number and string&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">if</text><text style="font-weight:normal; font-style:normal; color:#000000;"> 1.2 &gt; FALSE</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// the FALSE is converted to 0 first before the comparison is done</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? &quot;Compare number and string&quot;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">#</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">endif</text></para>
    <para styleclass="Heading2">Conversions<br/><text styleclass="Body Text">For comparisons and calculation operators the types of the 2 operands are compared. If they are equal then no conversion is needed. If they are not of the same type then the following rules are applied.</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Body Text"><table styleclass="Default" rowcount="5" colcount="2" style="width:100%;">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">If one operand is of type </text></para>
        </td>
        <td>
          <para styleclass="Normal"><text style="font-weight:bold;">Then the other operand is converted like this</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">String </para>
        </td>
        <td>
          <para styleclass="Normal">Call .ToString() on the value</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Double or Decimal</para>
        </td>
        <td>
          <para styleclass="Normal">Integer: ToDouble()<br/>Logical: TRUE = 1.0, FALSE = 0.0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Integer</para>
        </td>
        <td>
          <para styleclass="Normal">Logic: TRUE = 1, FALSE = 0</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Normal">Logical (The expression on the #if line)</para>
        </td>
        <td>
          <para styleclass="Normal">String: Null or Empty = FALSE, All others = TRUE<br/>Integer: 0 = FALSE, All others = TRUE<br/>Double: 0.0 = FALSE, All others = TRUE</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Comparison operations</para>
    <para styleclass="Normal">String comparisons are done in case sensitive way using an Ordinal comparison. The &apos;=&apos; operator is NOT supported for string comparisons since the preprocessor does not know what the setting for &quot;SetExact() is that you want to use. All comparisons are done with String.Compare().</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading2">Dialects</para>
    <para styleclass="Normal">In the FoxPro dialect the operators NOT, AND, OR and XOR are also available </para>
  </body>
</topic>
