<?xml version="1.0" encoding="utf-8"?>
<topic id="ed7dcc99-a2aa-4fad-8eb1-79d7e2ed9e3d" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>TODO: Move introduction text here</para>
    </introduction>




     
     <para><legacyBold>Navigation:</legacyBold>&#160;
     
     <!-- TODO: Unknown topic link: xsharp.html -->X# Documentation &gt; <!-- TODO: Unknown topic link: chapter-2.html -->X# Language Reference &gt; <!-- TODO: Unknown topic link: commands-by-category.html -->Commands and Statements &gt; <!-- TODO: Unknown topic link: cmd_cat_index.html -->Index/Order&#160;&gt;</para>

     
     <!-- TODO: Add named anchor: prev --><mediaLink><image xlink:href="btn_prev_n" /></mediaLink><!-- TODO: Add named anchor: main --><mediaLink><image xlink:href="btn_home_n" /></mediaLink><!-- TODO: Add named anchor: next --><mediaLink><image xlink:href="btn_next_n" /></mediaLink>
    
    <h1 class="p_Heading1" style="page-break-after: avoid;">INDEX Command</h1>

  
  <!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  
  



     <!--ZOOMRESTART-->
     <table><row><entry>Note</entry><entry>This command is defined in a header file and will be preprocessed by the X# preprocessor to a function call. If you disable the standard header (<!-- TODO: Unknown topic link: opt-nostddefs.html -->-nostddefs) files then this command will not be available. If you tell the compiler to use a different standard header file (<!-- TODO: Unknown topic link: opt-stddefs.html -->-stddef&#160;) then this command may also be not available</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Purpose</h1>
<para>Create an index file and add an order to it.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Syntax</h1>
<para>INDEX ON &lt;uKeyValue&gt; [TAG &lt;xcOrder&gt;] [TO &lt;xcIndexFile&gt;] <para/>
[&lt;Scope&gt;] [WHILE &lt;lCondition&gt;] [FOR &lt;lCondition&gt;]<para/>
[EVAL &lt;cbEval&gt; [EVERY &lt;nInterval&gt;]<para/>
[UNIQUE] [ASCENDING | DESCENDING]<para/>
[USECURRENT] [ADDITIVE] [CUSTOM] [NOOPTIMIZE]</para>
<para>&#160;</para>
<para>Note:  Although both the TAG and the TO clauses are optional, you must specify at least one of them.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Arguments</h1>
<table><row><entry>&lt;uKeyValue&gt;</entry><entry>The order key expression. &#160;The data type of the key expression and all other limitations, including the length of the key and the key expression, are determined by the RDD.</entry></row></table><para>&#160;</para>
<table><row><entry>TAG &lt;xcOrder&gt;</entry><entry>The name of the order to be created. &#160;For single-order index files, the file name without an extension or path, is the default order name. &#160;For multiple-order index files, the order name is required.</entry></row></table><para>&#160;</para>
<table><row><entry>TO &lt;xcIndexFile&gt;</entry><entry>The name of the target index file, including an optional drive, directory, and extension. &#160;See SetDefault() and SetPath() for file searching and creation rules. &#160;The default extension is determined by the RDD and can be obtained using DBOrderInfo(DBOI_INDEXEXT).</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>In RDDs that support production indexes , the production index file is assumed if &lt;xcIndexFile&gt; is not specified.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>If &lt;xcIndexFile&gt; does not exist, it is created.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>If &lt;xcIndexFile&gt; exists, the INDEX command must first obtain exclusive use of the file. &#160;If the attempt is unsuccessful because, for example, the file is open by another process, NetErr() is set to TRUE. </entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>If the attempt is successful and the RDD specifies that index files can only contain a single order, the current contents of the file is erased before the new order is added to it. &#160;If the RDD specifies that index files can contain multiple orders, &lt;xcOrder&gt; is added to &lt;xcIndexFile&gt; if it does not already exist; otherwise it is replaced.</entry></row></table><para>&#160;</para>
<table><row><entry>&lt;Scope&gt;</entry><entry>The portion of the current database file to process. &#160;The default scope is all records. &#160;INDEX ignores the <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbSetFilter.htm -->DbSetFilter() and <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\Overload_XSharp_Core_Functions_SetDeleted.htm -->SetDeleted()  settings, as well as any filter imposed by the current controlling order.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>The scope is not stored in the index file and is not used for reindexing or update purposes.</entry></row></table><para>&#160;</para>
<table><row><entry>WHILE &lt;lCondition&gt;</entry><entry>A condition that each record within the scope must meet, starting with the current record. &#160;As soon as the while condition fails, the process terminates. &#160;If no &lt;Scope&gt; is specified, having a while condition changes the default scope to the rest of the records in the file.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>The while condition is not stored in the index file and is not used for reindexing or update purposes.</entry></row></table><para>&#160;</para>
<table><row><entry>FOR &lt;lCondition&gt;</entry><entry>A condition that each record within the scope must meet in order to be processed. &#160;If a record does not meet the specified condition, it is ignored and the next record is processed. &#160;Duplicate key values are not added to the index file when a for condition is used.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>Unlike the while condition and the scope, the for condition is stored as part of the index file and is used when updating or rebuilding the order with <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbReindex.htm -->DbReindex() or REINDEX. &#160;Any limitations on the for condition are determined by the RDD.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>Note: &#160;If no &lt;Scope&gt;, while condition, or for condition is specified, the index uses the condition specified by DBSetOrderCondition(), if any.</entry></row></table><para>&#160;</para>
<table><row><entry>EVAL &lt;cbEval&gt;</entry><entry>A code block that is evaluated at intervals specified by EVERY &lt;nInterval&gt;. &#160;The default interval is 1. &#160;This is useful in producing a status bar or odometer that monitors the ordering progress. &#160;The return value of &lt;cbEval&gt; must be a logical value. &#160;If &lt;cbEval&gt; returns FALSE, indexing halts.</entry></row></table><para>&#160;</para>
<table><row><entry>EVERY &lt;nInterval&gt;</entry><entry>A numeric expression that determines the number of times &lt;cbEval&gt; is evaluated. &#160;This option offers a performance enhancement by evaluating the condition at intervals instead of for every record processed. &#160;The EVERY keyword is ignored if you specify no EVAL clause.</entry></row></table><para>&#160;</para>
<table><row><entry>UNIQUE</entry><entry>Creates the order with uniqueness as an attribute, which means that only those records with unique key values will be included in the order. &#160;If UNIQUE is not specified, <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\Overload_XSharp_Core_Functions_SetUnique.htm -->SetUnique() is used to determine the order&#39;s uniqueness attribute (refer to SetUnique() for more information on how unique orders are maintained).<para/>
Note that keys from deleted records are also included in the index, and may hide keys from non-deleted records.</entry></row></table><para>&#160;</para>
<table><row><entry>ASCENDING</entry><entry>Specifies that the keys be sorted in increasing order. &#160;If neither ASCENDING nor DESCENDING is specified, ASCENDING is assumed.</entry></row></table><para>&#160;</para>
<table><row><entry>DESCENDING</entry><entry>Specifies that the keys be sorted in decreasing order. &#160;Using this keyword is the same as specifying the Descend() function within &lt;uKeyValue&gt;, but without the performance penalty during order updates. &#160;If you create a DESCENDING index, you will not need to use the Descend() function during a SEEK.</entry></row></table><table><row><entry>&#160;</entry></row></table><table><row><entry></entry><entry>Whether an order is ascending or descending is an attribute that is stored in the index file and used for reindexing and update purposes.</entry></row></table><para>&#160;</para>
<table><row><entry>USECURRENT</entry><entry>Specifies that only records in the controlling order&#160;—&#160;and within the current range as specified by OrdSetScope()&#160;—&#160;will be included in this order. &#160;This is useful when you have already created a conditional order and want to reorder the records which meet that condition, and/or to further restrict the records meeting a condition. &#160;If not specified, all records in the database file are included in the order.</entry></row></table><para>&#160;</para>
<table><row><entry>ADDITIVE</entry><entry>Specifies that any open orders should remain open. &#160;If not specified, all open orders are closed before creating the new one. &#160;Note, however, that the production index file is never closed.</entry></row></table><para>&#160;</para>
<table><row><entry>CUSTOM</entry><entry>For RDDs that support them, CUSTOM specifies that a custom built order will be created. &#160;A custom built order is initially empty, giving you complete control over order maintenance. &#160;The system does not automatically add and delete keys from a custom built order. &#160;Instead, you explicitly add and delete keys using OrdKeyAdd() and OrdKeyDel(). &#160;This capability is excellent for generating pick lists of specific records and other custom applications.</entry></row></table><para>&#160;</para>
<table><row><entry>NOOPTIMIZE</entry><entry>Specifies that the FOR condition will be optimized. &#160;If NOOPTIMIZE is not specified, the FOR condition will be optimized if the RDD supports optimization.</entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Description</h1>
<para>After it is created (or replaced), the new order is added to the order list for the work area. &#160;Other orders already associated with the work area, including the controlling order, are unaffected.</para>
<para>If no order list exists for the work area, the type of RDD determines how the controlling order is set. &#160;For RDDs that support only single-order index files (such as DBFNTX), the controlling order is set to the order in the specified index file. &#160;For RDDs that support multi-order index files (such as DBFMDX), the controlling order is normally set to the first order in the index file.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Notes</h1>
<para>RDD support: &#160;Not all RDDs support all aspects of the INDEX command. &#160;</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Examples</h1>
<para>The following example creates a single-order index based on the Acct field:</para>
<para>&#160;</para>
<para>USE customer NEW<para/>
INDEX ON Customer-&gt;Acct TO CuAcct</para>
<para>&#160;</para>
<para>This example creates a conditional order based on a for condition. &#160;This index will contain only records whose TransDate is greater than or equal to January 1, 1999:</para>
<para>&#160;</para>
<para>USE invoice NEW<para/>
INDEX ON Invoice-&gt;TransDate TO InDate ;<para/>
 &#160; FOR Invoice-&gt;TransDate &gt;= CTOD(&quot;01/01/2020&quot;)</para>
<para>&#160;</para>
<para>The next example creates an order in a multiple-order index file:</para>
<para>&#160;</para>
<para>USE customer NEW VIA &quot;DBFMDX&quot;<para/>
INDEX ON Customer-&gt;Acct TAG CuAcct TO customer</para>
<para>&#160;</para>
<para>This example creates an order that calls a routine MyMeter() during its creation:</para>
<para>&#160;</para>
<para>DEFINE Mtr_Increment := 10<para/>
&#160;<para/>
FUNCTION Start()<para/>
 &#160; USE customer NEW<para/>
 &#160; INDEX ON Customer-&gt;Acct TO CuAcct EVAL ;<para/>
 &#160; &#160; &#160;{|| MyMeter() } EVERY Mtr_Increment<para/>
&#160;<para/>
FUNCTION MyMeter()<para/>
 &#160; STATIC nRecsDone := 0<para/>
&#160;<para/>
 &#160; nRecsDone += Mtr_Increment<para/>
 &#160; ? (nRecsDone/LastRec()) * 100<para/>
&#160;<para/>
 &#160; RETURN TRUE</para>
<para>&#160;</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Assembly</h1>
<para>XSharp.RT.DLL</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">See Also</h1>
<para><link xlink:href="01c5c1c9-fdc5-439f-b315-74a43eea5c13">CLOSE</link>, <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DToS.htm -->DToS(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbCreateIndex.htm -->DBCreateIndex(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbCreateOrder.htm -->DbCreateOrder() <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbOrderInfo.htm -->DbOrderInfo(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbSeek.htm -->DbSeek(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbSetIndex.htm -->DbSetIndex(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbSetOrder.htm -->DbSetOrder(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbSetOrderCondition.htm -->DbSetOrderCondition(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_DbReindex.htm -->DbReindex(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_OrdCondSet.htm -->OrdCondSet(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_OrdKeyAdd.htm -->OrdKeyAdd() <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_OrdKeyDel.htm -->OrdKeyDel(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_RT_Functions_OrdScope.htm -->OrdScope(), <link xlink:href="79edf21a-e6eb-4d50-abf8-a5284293d42b">REINDEX</link>, <link xlink:href="47709958-9c2e-4f27-80f6-4317fc7f7bc2">SEEK</link>, <link xlink:href="9085df4a-da8f-4ed6-948a-db58aa0eeb27">SET INDEX</link>, <link xlink:href="4d6305aa-62bf-4dce-8716-be94d777c277">SET ORDER</link>,<!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\Overload_XSharp_Core_Functions_SetDefault.htm -->SetDefault(), <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\Overload_XSharp_Core_Functions_SetPath.htm -->SetPath()  <link xlink:href="7f0a1f47-7559-4c41-a23f-9577625f322b">SORT</link>, <!-- TODO: Unknown topic link: ms-its:XSharpRef.chm::\html\M_XSharp_Core_Functions_SoundEx.htm -->Soundex() <link xlink:href="9afbce44-d16f-4cde-a11e-74871ec4b08a">USE</link></para>
<para>&#160;</para>

     <!--ZOOMSTOP-->

<!-- TODO: Review markup -->
<markup>
<script>
           var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
           if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
	   $(document).ready(function(){
		   $(window).bind('resize', function() {
				var y = $('#header').height();
				$('#content').css('margin-top', y);
				$('.hmanchor').css('margin-top', -y-20);
				$('.hmanchor').css('padding-top', y+20);
			});
		   $(window).triggerHandler('resize');	
		   $(window).triggerHandler('resize');	
                   
		});
</script>
</markup>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
