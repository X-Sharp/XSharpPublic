<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-06-10T11:17:24.620+08:00" lasteditedby="Design" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>内存变量</title>
  <body>
    <header>
      <para styleclass="Heading1">内存变量</para>
    </header>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">X# 提供了对动态作用域变量的支持，这些变量在运行时被完全创建和维护。<br/>所谓动态作用域，是指这些变量的作用域不受创建变量的实体的限制。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text style="font-weight:bold; font-style:italic;">警告！</text> Core 和 Vulcan 方言不支持动态作用域变量。在其他方言中，只有启用了 <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar">-memvar</link> 编译器选项，才支持动态范围变量。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><table styleclass="Default" rowcount="3" colcount="3">
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Body Text" style="text-align:center;"><text style="font-weight:bold;">变量类型</text></para>
        </td>
        <td>
          <para styleclass="Body Text" style="text-align:center;"><text style="font-weight:bold;">生存期</text></para>
        </td>
        <td>
          <para styleclass="Body Text" style="text-align:center;"><text style="font-weight:bold;">可见性</text></para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Body Text">PRIVATE</para>
        </td>
        <td>
          <para styleclass="Body Text">直到创建过程的 Return 语句或者至释放前</para>
        </td>
        <td>
          <para styleclass="Body Text">所创建的过程和被调用的例程</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td>
          <para styleclass="Body Text">PUBLIC</para>
        </td>
        <td>
          <para styleclass="Body Text">应用程序或至释放前</para>
        </td>
        <td>
          <para styleclass="Body Text">应用程序</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">动态作用域变量的数据类型会随着变量内容的变化而变化。因此，它们通常被称为动态或多态变量。</para>
    <para styleclass="Body Text">提供动态作用域变量主要是为了与 Clipper/Xbase 兼容；不过，它们在某些情况下也非常有用。例如，它们可以让你快速开发原型，并具有某些你可能难以抗拒的继承属性。</para>
    <para styleclass="Body Text">不过，您必须意识到，使用它们是有代价的。请考虑以下几点：</para>
    <para styleclass="Body Text"></para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">由于这些变量不是在编译时解决的，因此需要以运行时代码的形式开销，从而使你的应用程序变得比所需的更大更慢。</li>
      <li styleclass="Body Text">编译时无法检查这些变量的类型兼容性。</li>
      <li styleclass="Body Text">使用这些变量的继承属性违背了模块化编程的基本原则之一，可能会导致维护和调试问题。此外，这种做法还会增加向词法作用域和类型变量过渡的难度。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">本节将全面探讨动态作用域变量，但在选择使用该变量类之前，X# 还提供了几种变量声明选项。本章接下来的两节将向你介绍词法作用域变量和强类型变量，你可能会发现它们很有用。</para>
    <para styleclass="Body Text"><text style="font-style:italic;">重要提示 为了便于说明，本节中的一些示例使用了非正统的编程方法。不建议使用公共变量和私有变量的继承属性，而不是传递参数和返回值。</text></para>
    <para styleclass="Body Text"></para>
    <para styleclass="Heading1">Private</para>
    <para styleclass="Body Text">Private 是动态作用域变量的两种类型之一，有几种创建私有变量的方法：</para>
    <para styleclass="Body Text"></para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Normal"><text styleclass="Body Text">在 PRIVATE 语句中列出变量名。如果此时不进行赋值，变量将使用 NIL 值和数据类型；否则，变量将使用其赋值的数据类型。您可以随时为变量分配新值(新数据类型)：</text><br/><tab /><text styleclass="Code Example" style="font-weight:bold; font-style:normal; color:#ff0000;">PRIVATE</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;"> X := 10, y</text><br/><text styleclass="Body Text">这样就将 x 创建为一个数值变量，将 y 创建为一个值为 NIL 的无类型变量。稍后，您可以通过为变量赋值来更改值及其类型：</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160;X := &quot;X# Is great&quot;</text><br/><text styleclass="Code Example" style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; Y := Today()</text></li>
    </list>
    <list id="2" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">在函数、过程或方法定义的参数语句中列出变量名。当例程被调用时，变量的数据类型与相关参数相同，如果省略参数，则变量的数据类型为 NIL。您可以随时为变量分配新值(和新数据类型)。</li>
      <li styleclass="Body Text">为一个不存在的变量名赋值(例如，x := 10)。在为变量赋值之前，变量的数据类型与所赋值相同(只有在使用了 <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-undeclared">-undeclared</link> 和 <link displaytype="text" defaultstyle="true" type="topiclink" href="opt-memvar">-memvar</link> 命令行选项后，这个方法才有效)。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">私有变量具有以下属性：</para>
    <para styleclass="Body Text"></para>
    <list id="3" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">你可以在创建例程和创建者调用的任何例程中访问它们。换句话说，被调用的例程会自动继承私有变量，而无需将它们作为参数传递。</li>
      <li styleclass="Body Text">你可以通过在被调用的例程中明确地创建一个私有变量(使用 PRIVATE 或 PARAMETERS)或声明一个同名的局部变量(使用 LOCAL)来隐藏它们。</li>
      <li styleclass="Body Text">当创建者返回到它的调用例程时，它们会自动从内存中释放，或者你也可以使用 RELEASE、CLEAR ALL 或 CLEAR MEMORY 来显式地释放它们。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">在本例中，函数 Volume() 需要传递三个参数。调用函数时，它会创建三个私有变量 nLength、nWidth 和 nHeight 来接受参数。由于这些变量是使用 PARAMETERS 语句创建的，因此使用这些名称创建的任何高级变量（无论是公有变量还是私有变量）都会被暂时隐藏，以防止它们的值在内存中被覆盖：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Volume() </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">PARAMETERS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength, nWidth, nHeight </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength * nWidth * nHeight </text></para>
    <para styleclass="Body Text">在下一个示例中，Volume() 的修改版创建了一个私有变量(假设没有其他名为 nVolume 的变量可见)来存储其返回值。如果变量 nVolume 在调用 Volume() 之前就已存在，并且对 Volume() 可见(例如，对于调用 Volume() 的例程来说，nVolume 可能是公共变量或私有变量)，那么它的值将在内存中被覆盖，并在函数返回调用例程时保持不变：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Volume() </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">PARAMETERS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength, nWidth, nHeight </text><br/><tab /><text style="font-weight:normal; font-style:normal; color:#000000;">nVolume := nLength * nWidth * nHeight </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nVolume </text></para>
    <para styleclass="Body Text">在此版本中，Volume( ) 将 nVolume 变量指定为 PRIVATE。这样做可以暂时隐藏任何同名的上层变量(无论是公共变量还是私有变量)，防止其值在内存中被覆盖：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Volume() </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">PARAMETERS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength, nWidth, nHeight </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">PRIVATE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nVolume := nLength * nWidth * nHeight </text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nVolume </text></para>
    <para styleclass="Heading1">Public</para>
    <para styleclass="Body Text">第二类未声明变量是 Public。公有变量在整个应用程序中都有生命周期和可见性，你只能用一种方式定义它们：</para>
    <para styleclass="Body Text"></para>
    <list id="4" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">在 PUBLIC 语句中列出变量名。如果此时不赋值，变量的值将是 FALSE（或数组元素的 NIL）；否则，变量的数据类型将是其赋值的数据类型。您可以随时为变量赋新值（和新的数据类型）。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">公有变量具有以下属性:</para>
    <para styleclass="Body Text"></para>
    <list id="5" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Body Text" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Body Text">一旦创建，你就可以在应用程序的任何地方访问它们。换句话说，公有变量会被应用程序中的所有例程自动继承，而无需将它们作为参数传递或作为返回值发布。</li>
      <li styleclass="Body Text">你可以通过明确地创建一个私有变量(使用 PRIVATE 或 PARAMETERS)或声明一个同名的局部变量(使用 LOCAL)来隐藏公有变量。</li>
      <li styleclass="Body Text">除非使用 RELEASE、CLEAR ALL 或 CLEAR MEMORY 明确地释放它们，否则它们不会从内存中释放。</li>
    </list>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">在本例中，函数 Volume() 的定义不带参数。相反，调用例程 Compute() 创建了三个公有变量 nLength、nWidth 和 nHeight，它们对 Volume() 自动可见：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Compute()</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 4</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Volume() </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Result: 40</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Volume()</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength * nWidth * nHeight</text></para>
    <para styleclass="Body Text">在下一个示例中，Volume() 的修改版创建了一个公有变量来存储计算出的体积，从而避免了向调用例程返回数值的麻烦。由于 nVolume 是公有变量，当 Volume() 返回时，它不会从内存中释放：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Compute() </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 4 </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">Volume() </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? nVolume </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Result: 40 , this will only compile with -undeclared</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Volume() </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nVolume </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">nVolume := nLength * nWidth * nHeight </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text">使用上一个示例中的 nVolume 变量，不需要使用 -undeclared 命令行选项，一个更好的解决方案是</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Compute() </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 4 </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">MEMVAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nVolume &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// tell the compiler that nVolume is a Public or private</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">Volume() </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? nVolume </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Result: 40 </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text">或</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">PROCEDURE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Compute() </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">PUBLIC</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 4 </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">Volume() </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? _MEMVAR-&gt;nVolume </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Result: 40 </text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><br/></para>
    <para styleclass="Body Text">请注意，不建议使用此类程序。</para>
    <para styleclass="Heading1">变量引用</para>
    <para styleclass="Body Text">一旦按照前两节的演示创建了公有或私有变量，就可以通过引用变量名来获取其值。您可以使用内置命令或函数显示变量的值：</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? nVolume</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">QOut(nVolume)</text></para>
    <para styleclass="Body Text">或使用其值作为表达式的一部分：</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">Str(nVolume, 10, 2) + &quot; cubic feet&quot;</text></para>
    <para styleclass="Body Text">对于动态作用域变量，可以使用 _MEMVAR 别名来限定变量引用。在某些情况下，你可能必须这样做，以帮助编译器解决可能会产生歧义的引用（例如，如果你有一个与内存变量同名的字段变量，并希望在表达式中使用内存变量）。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text style="font-weight:bold;">注意：</text>MEMVAR 是内存变量的缩写，与动态作用域变量同义。</para>
    <para styleclass="Body Text"><br/>假设数据库文件 Measures 有名为 nLength、nWidth 和 nHeight 字段，本示例将使用字段变量值调用 Volume()：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Calculate()</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">PRIVATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 3</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">USE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> measures</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Volume(nLength, nWidth, nHeight)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">...</text></para>
    <para styleclass="Body Text">要强制函数使用私有变量而不是字段变量，可以使用 _MEMVAR-&gt;(或更简单的 M-&gt;)别名来限定 变量名：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> Calculate()</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">PRIVATE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> nLength := 5, nWidth := 2, nHeight := 3</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">USE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> measures</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">? Volume(_MEMVAR-&gt;nLength, _MEMVAR-&gt;nWidth, _MEMVAR-&gt;nHeight)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">...</text></para>
    <para styleclass="Body Text">当然，最好还是注意使用唯一的字段名和变量名，以避免出现类似上述的含糊不清的情况，但问题是编译器在处理含糊不清的引用时有一定的默认规则。如果不想受这些默认规则的摆布，最好在任何情况下都限定变量名。</para>
    <para styleclass="Heading1">MEMVAR 声明 </para>
    <para styleclass="Body Text">虽然你可能会听到这样的说法，但在讨论动态作用域变量时提到的这些语句并不是声明。声明一词指的是旨在告知编译器某些内容的语句PRIVATE、PARAMETERS 和 PUBLIC 是在运行时生成内存变量的语句。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">事实上，你从来不需要向编译器声明动态作用域变量，这就是它们效率低下的原因。因为它们不是通过编译时声明语句创建的，所以编译器必须生成运行时代码来处理类型转换、内存管理和解决变量名的模糊引用等问题，因为同一时间有可能出现多个同名变量。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">不过，你可以使用 MEMVAR 语句声明动态作用域变量，它们将被创建为 PRIVATE 变量：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Calculate()</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">MEMVAR</text><text style="font-weight:normal; font-style:normal; color:#000000;"> nLength, nWidth, nHeight</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">nLength := 5</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">nWidth := 2</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">nHeight := 3</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">USE measures</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Volume(nLength, nWidth, nHeight)</text></para>
    <para styleclass="Body Text">在这种情况下，MEMVAR 语句会使内存变量优先于同名的字段变量，从而导致 Volume() 被调用为私有变量。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text">使用 MEMVAR 向编译器声明动态作用域变量名，可能会使程序效率略有提高(尤其是在有大量模糊引用的情况下)；但这并不能消除这些变量的运行时开销。</para>
  </body>
</topic>
