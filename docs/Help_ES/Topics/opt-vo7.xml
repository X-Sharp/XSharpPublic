<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="Geert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>-vo7</title>
  <keywords>
    <keyword>-vo7</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">-vo7<tab /><tab />Implicit casts and conversions </para>
    </header>
    <para styleclass="Normal">The -vo7 option directs the compiler to allow implicit casts and conversions that are allowed in Visual Objects but which would normally be illegal or require an explicit cast in X#.</para>
    <para styleclass="Heading2">Syntax</para>
    <para styleclass="Code with box">-vo7[+|-]</para>
    <para styleclass="Heading2">Arguments</para>
    <para styleclass="List">+ | - <tab />Specifying +, or just -vo7, directs the compiler to allow certain implicit casts and conversions that are allowed in Visual Objects. </para>
    <para styleclass="Heading2">Remarks</para>
    <para styleclass="Normal">Visual Objects allows implicit casts between types with different semantics, whereas X# normally requires explicit casts in such cases.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">For example, Visual Objects allows implicit conversions between integer types and pointer types. While pointers are integers, they have different semantics. Integers are numerical values and pointers are addresses representing memory locations. In addition to the difference in semantics, the size of a pointer is dependent upon the underlying platform whereas the size of an integer does not change from platform to platform (with the exception of System.IntPtr).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">While is it possible (and often necessary) to cast between types with different semantics, it should always be done via an explicit cast. This not only insures that the correct conversion code is generated (if necessary), it also self-documents the fact that you are casting one type to another type that has a different meaning.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">X# supports most of the casts that Visual Objects supports, but in cases where the types have different semantics, an explicit cast is usually required. However, this can cause a large number of compiler errors in existing Visual Objects code.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Using -vo7 allows the following conversions to be performed implicitly, allowing existing Visual Objects code to compile:</para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="6" colcount="3">
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">From</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">To</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">Operation Performed</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">PTR</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR)</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">None, the types are binary compatible. However, the code may fail at runtime if the data the pointer points to is not the correct type.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">INT or DWORD </para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR) </para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">None, the types are binary compatible. However, the code may fail at runtime if the data the pointer points to is not the correct type. Note that this conversion is only allowed when the target platform is set to x86.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">INT64 or UINT64</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR)</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">None, the types are binary compatible. However, the code may fail at runtime if the data the pointer points to is not the correct type. Note that this conversion is only allowed when the target platform is set to x64 or Itanium.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">OBJECT</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">any other reference type</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">Compiler inserts an explicit cast to the target type, which may fail at runtime.</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">type PTR</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">REF type</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">The compiler converts the pointer into a reference. Note that even with -vo7, not all pointers can be converted to references or else it would compromise the integrity of the garbage collector.</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Heading3">To set this compiler option in the Visual Studio development environment:</para>
    <para styleclass="Normal"></para>
    <list id="1" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Arial; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;">Open the project&apos;s Properties page.</li>
      <li styleclass="Normal" style="margin-left:13px;">Click the Dialect tab. </li>
      <li styleclass="Normal" style="margin-left:13px;">Change the value.</li>
      <li styleclass="Normal" style="margin-left:13px;"><link displaytype="text" defaultstyle="true" type="topiclink" href="PropPage-Dialect">Click here to see the property page</link></li>
    </list>
    <para styleclass="Heading3"><text styleclass="Heading2">Example</text></para>
    <para styleclass="Normal">The following code is valid in Visual Objects, but will not compile in X# unless -vo7 is used, because CreateObject() returns OBJECT and there is no implicit conversion from OBJECT to a more derived type (such a conversion cannot be guaranteed to be safe, and implicit conversions are always safe).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> f </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SYMBOL</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">s := #foo</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">f := CreateObject( s ) </text><text style="font-weight:bold; font-style:italic; color:#339966;">// no implicit conversion from &apos;OBJECT&apos; to &apos;foo&apos;</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Using -vo7 has the same effect as if the assignment into f were rewritten as:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">f := (foo) CreateObject( s )</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">In either case, the resulting code is exactly the same, and the cast to foo may fail at runtime. However, the explicit cast self-documents that you expect the return from CreateObject() to contain an instance of foo.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The following example is also valid in Visual Objects, but will not compile in X# unless -vo7 is used, because the @ operator returns the address of its operand (a typed pointer) and pointers are not the same as references in X#:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> x </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">ByRef( @x )</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ByRef( i </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">REF</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">i := 5</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The -vo7 option will automatically convert @x, which resolves to type INT PTR, into REF INT which is compatible with the function parameter. However, it is recommended that you remove the @ operator rather than use -vo7 for this purpose.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading3"></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
