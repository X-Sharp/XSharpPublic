<?xml version="1.0" encoding="utf-8"?>
<topic id="71a37628-1a90-4927-a16d-9343f5ea84f2" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <introduction>
      <para>TODO: Move introduction text here</para>
    </introduction>




     
     <para><legacyBold>Navigation:</legacyBold>&#160;
     
     <!-- TODO: Unknown topic link: xsharp.html -->X# Documentation &gt; <!-- TODO: Unknown topic link: chapter-2.html -->X# Language Reference &gt; <!-- TODO: Unknown topic link: commands-by-category.html -->Commands and Statements &gt; <!-- TODO: Unknown topic link: cmd_cat_control.html -->Program Control&#160;&gt;</para>

     
     <!-- TODO: Add named anchor: prev --><mediaLink><image xlink:href="btn_prev_n" /></mediaLink><!-- TODO: Add named anchor: main --><mediaLink><image xlink:href="btn_home_n" /></mediaLink><!-- TODO: Add named anchor: next --><mediaLink><image xlink:href="btn_next_n" /></mediaLink>
    
    <h1 class="p_Heading1" style="page-break-after: avoid;">TRY CATCH Statement</h1>

  
  <!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  
  



     <!--ZOOMRESTART-->
     <h1 class="p_Heading1" style="page-break-after: avoid;">Purpose</h1>
<para>TRY, CATCH and FINALLY are used to declare an exception handling block.</para>
<para>&#160;</para>
<para>TRY<para/>
&#160;guardedStatements<para/>
[CATCH [[variableName] AS exceptionType] [WHEN whenexpression]<para/>
&#160;exceptionHandlingStatements<para/>
] &#160; <para/>
[FINALLY<para/>
&#160;cleanupStatements<para/>
]<para/>
END TRY </para>
<para>&#160;</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Arguments</h1>
<para>&#160;</para>
<table><row><entry>variableName</entry><entry>The name of a variable that will receive the exception. The variable name is optional. If you only specify the type then the exception will still be caught but not stored in a local variable.</entry></row></table><table><row><entry>exceptionType</entry><entry>The exception type that will be caught by the CATCH block. </entry></row></table><table><row><entry>whenexpression</entry><entry>A logical expression that determines if the particular CATCH block should be active</entry></row></table><table><row><entry>exceptionHandlingStatements</entry><entry>Zero or more statements that handle the exception condition. </entry></row></table><table><row><entry>cleanupStatements</entry><entry>Zero or more statements that perform any necessary cleanup before the TRY block is exited.. </entry></row></table><h1 class="p_Heading1" style="page-break-after: avoid;">Remarks</h1>
<para>A TRY-CATCH-FINALLY block is used to trap and handle exceptions that may be thrown within a block of code. Exceptions may be generated by the CLR, the Vulcan.NET runtime library, third-party libraries or by application code using the THROW statement.</para>
<h3 class="p_Heading3" style="page-break-after: avoid;">TRY Block</h3>
<para>The statements within the TRY block are sometimes referred to as &quot;guarded&quot; statements. These are the statements that potentially can cause exceptions that you want to handle.</para>
<h3 class="p_Heading3" style="page-break-after: avoid;">CATCH Blocks</h3>
<para>A exception handling block may contain any number of CATCH blocks (including zero). Each CATCH block that declares a variable name and a type will receive exceptions of that type. CATCH blocks that receive exceptions implicitly declare a local variable that will contain the caught exception. This implicitly declared local variable is only valid within the scope of the CATCH block. The name given to the variable must not be the same as any explicitly declared LOCAL or parameter, or a compile-time error will occur. However, it is legal to use the same variable name in multiple CATCH blocks. Since each CATCH block&#39;s variable is only visible within its enclosing block, there is no conflict.</para>
<para>&#160;</para>
<para>A CATCH block may also be declared without a variable name but WITH an exception type. In that case the exception will still be caught but not stored in a local variable.</para>
<para>&#160;</para>
<para>A CATCH block may also be declared without any variable name and exception type. This type of CATCH block will catch any exception, and is equivalent to declaring a CATCH block with an exception type of System.Exception.</para>
<para>&#160;</para>
<para>If multiple CATCH blocks are declared, the order in which they appear is important. The CLR will examine the CATCH clauses in order, and invoke the first one that matches the exception being thrown. This includes not only the specific exception class that was specified, but any derived classes. For this reason, you should catch the more specific exception types before less specific ones.</para>
<para>&#160;</para>
<para>The exception type declared in a CATCH block must always be System.Exception, or a class derived from it.</para>
<para>&#160;</para>
<para>If no suitable CATCH block was declared for the exception that has been thrown, control will be passed to the next highest exception handling block. If there is no higher exception handling block, or none that can handle the exception, the application will terminate.</para>
<para>&#160;</para>
<para>Exceptions may be explicitly passed on to the next highest exception handling block by using the THROW keyword.</para>
<h3 class="p_Heading3" style="page-break-after: avoid;">Finally Block</h3>
<para>If a FINALLY block is declared, any statements within it are executed regardless of how the TRY block exits. This provides a mechanism to perform any cleanup such as releasing resources. The code within a finally block will be executed even if there is no suitable CATCH block to handle the exception.</para>
<h3 class="p_Heading3" style="page-break-after: avoid;">Compatibility Note: </h3>
<para>TRY-CATCH-FINALLY blocks are similar to, but much more flexible than BEGIN SEQUENCE-RECOVER blocks. However, BEGIN SEQUENCE and RECOVER are still supported for backwards compatibility.</para>
<para>&#160;</para>
<para>Note that exceptions thrown with BREAK will not be caught with a TRY-CATCH-FINALLY block because the data thrown by BREAK is encapsulated in a USUAL, which does not inherit from System.Exception.</para>
<para>&#160;</para>
<para>However, exceptions thrown with THROW will be caught by the next highest BEGIN SEQUENCE block (if any) and the exception will be encapsulated in a USUAL if a RECOVER USING variable has been declared.</para>
<para>&#160;</para>
<para>Also note that the CanBreak() runtime function does not detect whether execution is currently within a TRY block. CanBreak() is provided only for compatibility with existing Visual Objects code and BEGIN SEQUENCE blocks, and should not be relied upon to determine whether execution is within an exception handling block. There is no way to determine whether execution is within an exception handling block because this functionality is not present in the CLR, and execution may currently be within code that is compiled in an language other than Vulcan.NET.</para>
<h1 class="p_Heading1" style="page-break-after: avoid;">Example</h1>
<para>The following example tests for division by zero and catches the exception that will be thrown by the CLR if the divisor is zero. Any other exceptions would propagate to the next highest exception handling block (if any). Without the exception handling block, the application would terminate with an unhandled DivideByZeroException.</para>
<para>&#160;</para>
<para>FUNCTION DivisionTest( x AS INT, y AS INT ) AS INT<para/>
 &#160; TRY<para/>
 &#160; &#160;  RETURN x / y<para/>
 &#160; CATCH e AS System.DivideByZeroException<para/>
 &#160; &#160; &#160;? &quot;Divide by zero!&quot;, e<para/>
 &#160; &#160;  RETURN 0<para/>
 &#160; END TRY</para>
<para>&#160;</para>
<para>&#160;</para>
<para>The following example demonstrates multiple CATCH blocks and a FINALLY block:</para>
<para>&#160;</para>
<para>USING System.IO<para/>
&#160;<para/>
FUNCTION ReadFile( filename AS STRING ) AS STRING<para/>
 &#160; LOCAL s AS STRING<para/>
&#160;<para/>
 &#160; TRY<para/>
 &#160; &#160; &#160;s := File.ReadAllText( filename ) <para/>
 &#160; CATCH e AS DirectoryNotFoundException<para/>
 &#160; &#160; &#160;? &quot;Directory not found&quot;, e<para/>
 &#160; CATCH e AS IOException<para/>
 &#160; &#160; &#160;? &quot;IO exception occurred&quot;, e<para/>
 &#160; CATCH e AS UnauthorizedAccessException<para/>
 &#160; &#160; &#160;? &quot;Access denied&quot;, e<para/>
 &#160; CATCH<para/>
 &#160; &#160; &#160;? &quot;Some other exception&quot;<para/>
 &#160; FINALLY<para/>
 &#160; &#160; &#160;? &quot;All done!&quot;<para/>
 &#160; END TRY<para/>
&#160;<para/>
 &#160; RETURN s &#160; &#160; &#160; &#160; &#160; &#160;   &#160; &#160; &#160; &#160; &#160; &#160; &#160; &#160; </para>
<h2 class="p_Heading2" style="page-break-after: avoid;">See Also</h2>
<para><link xlink:href="8fc150d3-ff60-4982-ba29-ec8c86969a13">BEGIN SEQUENCE</link><para/>
<link xlink:href="b311f02d-ac36-46c7-a504-e068924e54c7">THROW</link></para>
<para>&#160;</para>

     <!--ZOOMSTOP-->

<!-- TODO: Review markup -->
<markup>
<script>
           var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
           if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
	   $(document).ready(function(){
		   $(window).bind('resize', function() {
				var y = $('#header').height();
				$('#content').css('margin-top', y);
				$('.hmanchor').css('margin-top', -y-20);
				$('.hmanchor').css('padding-top', y+20);
			});
		   $(window).triggerHandler('resize');	
		   $(window).triggerHandler('resize');	
                   
		});
</script>
</markup>

    <relatedTopics>
    </relatedTopics>

  </developerConceptualDocument>
</topic>
