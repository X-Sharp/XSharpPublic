<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>BEGIN SEQUENCE Statement</title>
  <keywords>
    <keyword>BEGIN SEQUENCE statement</keyword>
    <keyword>Branching</keyword>
    <keyword>BREAK statement</keyword>
    <keyword>END SEQUENCE statement</keyword>
    <keyword>Program control</keyword>
    <keyword>RECOVER statement</keyword>
    <keyword>RECOVER USING statement</keyword>
    <keyword>Statements</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">BEGIN SEQUENCE Statement</para>
    </header>
    <para styleclass="Heading1">Purpose</para>
    <para styleclass="Normal">Define a sequence of statements for a BREAK.</para>
    <para styleclass="Heading1">Syntax</para>
    <para styleclass="Code with box">BEGIN SEQUENCE<br/><tab />&lt;Statements&gt;...<br/>[BREAK [&lt;uValue&gt;]]<br/><tab />&lt;Statements&gt;... &#160;<br/>[RECOVER [USING &lt;idVar&gt;]]<br/><tab />&lt;Statements&gt;...<br/>END [SEQUENCE]</para>
        <para styleclass="Heading1"><text>Arguments</text></para>
    <para styleclass="List">BREAK &lt;uValue&gt;<tab />Branches execution to the statement immediately following the nearest RECOVER statement if one is specified, or the nearest END SEQUENCE statement. &#160;&lt;uValue&gt; is the value returned into the &lt;idVar&gt; specified in the USING clause of the RECOVER statement.</para>
    <para styleclass="List"></para>
    <para styleclass="List">RECOVER USING &lt;idVar&gt;</para>
    <para styleclass="List"><tab />A recover point in the SEQUENCE construct where control branches after a BREAK statement. &#160;If this clause is specified, &lt;idVar&gt; receives the value returned by the BREAK statement. &#160;In general, this is an error object. &#160;&lt;idVar&gt; must be a declared variable and cannot be strongly typed.</para>
    <para styleclass="List"></para>
    <para styleclass="List">END<tab />The end point of the SEQUENCE control structure. &#160;If no RECOVER statement is specified, control branches to the first statement following the END statement after a BREAK.</para>
    <para styleclass="Heading1"><text>Description</text></para>
    <para styleclass="Normal"><text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text>...<text style="font-weight:bold;">END</text> is a control structure used for exception and runtime error handling. &#160;It delimits a block of statements defining a discrete operation, including invoked procedures and functions. &#160;With the exception of the <text style="font-weight:bold;">BREAK</text> statement, the entire construct must fall within the same entity definition.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">When a BREAK is encountered anywhere in a block of statements following the <text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text> statement up to the corresponding <text style="font-weight:bold;">RECOVER</text> statement, control branches to the program statement immediately following the <text style="font-weight:bold;">RECOVER</text> statement. &#160;If a <text style="font-weight:bold;">RECOVER</text> statement is not specified, control branches to the statement following the <text style="font-weight:bold;">END</text> statement, terminating the <text style="font-weight:bold;">SEQUENCE</text>. &#160;If control reaches a <text style="font-weight:bold;">RECOVER</text> statement without encountering a <text style="font-weight:bold;">BREAK</text>, it branches to the statement following the corresponding <text style="font-weight:bold;">END</text>.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The <text style="font-weight:bold;">RECOVER</text> statement optionally receives a parameter passed by a <text style="font-weight:bold;">BREAK</text> statement that is specified with a return value. &#160;This is usually an error object, generated and returned by the current error handling block defined by ErrorBlock(). &#160;If an error object is returned, it can be sent messages to query information about the error. &#160;With this information, a runtime error can be handled within the context of the operation rather than in the current runtime error handler.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You cannot <text style="font-weight:bold;">RETURN</text>, <text style="font-weight:bold;">LOOP</text>, or <text style="font-weight:bold;">EXIT</text> between a <text style="font-weight:bold;">BEGIN</text>&#32;<text style="font-weight:bold;">SEQUENCE</text> and <text style="font-weight:bold;">RECOVER</text> statement</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Control structures can be nested to any depth. &#160;The only requirement is that each control structure be properly nested.</para>
        <para styleclass="Heading1"><text>Examples</text></para>
    <para styleclass="Normal">This code fragment demonstrates a <text style="font-weight:bold;">SEQUENCE</text> construct in which the BREAK occurs within the current procedure:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">BEGIN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SEQUENCE</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &lt;Statements&gt;...</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> lBreakCond</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">BREAK</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDIF</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RECOVER</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &lt;Recovery Statements&gt;...</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&lt;Recovery Statements&gt;...</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">This example demonstrates an error handler returning an error object to the variable specified in the USING clause of the RECOVER statement:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oLocal, bLastHandler</text><br/><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Save current and set new error handler</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">bLastHandler := ErrorBlock({|oErr| ;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;MyHandler(oErr, TRUE)})</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">BEGIN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SEQUENCE</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; .</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; . &#160;&lt;Operation that might fail&gt;...</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; .</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RECOVER</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">USING</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oLocal</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Send messages to oLocal &amp; handle the error</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; ? &quot;Error: &#160;&quot;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oLocal:GenCode != 0</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;?? oLocal:Description</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDIF</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; .</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; . &#160;</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; .</text><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><br/><br/><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Restore previous error handler</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">ErrorBlock(bLastHandler)</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> MyHandler(oError, lLocalHandler)</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Handle locally returning the error object</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> lLocalHandler</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">BREAK</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> oError</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDIF</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &lt;Other statements </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">to</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> handle the error&gt;...</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">This example re-executes a <text style="font-weight:bold;">SEQUENCE</text> statement block by issuing a <text style="font-weight:bold;">LOOP</text> from within the <text style="font-weight:bold;">RECOVER</text> statement block:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">DO</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">WHILE</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> TRUE</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">BEGIN</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">SEQUENCE</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;&lt;Operation that may fail&gt;...</text><br/><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">RECOVER</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">IF</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> PrintRecover()</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Repeat the SEQUENCE statement block</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">LOOP</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDIF</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">END</text><br/><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">EXIT</text><text style="font-weight:normal; font-style:normal; text-decoration:none; color:#000000;"> &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; text-decoration:none; color:#339966;">// Escape from the operation</text><br/><br/><text style="font-weight:bold; font-style:normal; text-decoration:none; color:#ff0000;">ENDDO</text></para>
        <para styleclass="Heading1"><text>See Also</text></para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Functions__Break.htm" domain="XSharpRef.chm">_Break()</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Functions_CanBreak.htm" domain="XSharpRef.chm">CanBreak()</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="html\T_XSharp_Error.htm" domain="XSharpRef.chm">Error Class</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="html\M_XSharp_RT_Functions_ErrorBlock.htm" domain="XSharpRef.chm">ErrorBlock()</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_RETURN">RETURN</link></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
