<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" lasteditedby="robert" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>ACCESS Statement</title>
  <keywords>
    <keyword>ACCESS statement</keyword>
    <keyword>Access() Methods</keyword>
    <keyword>Compile-time declaration</keyword>
    <keyword>Declaration statements</keyword>
    <keyword>Entity declaration</keyword>
    <keyword>Instance variables</keyword>
    <keyword>Instance variables</keyword>
    <keyword>Instance variables<keyword>accessing</keyword><keyword>non-exported</keyword><keyword>virtual variables</keyword></keyword>
    <keyword>Methods<keyword>accessing instance variables</keyword></keyword>
    <keyword>Statements</keyword>
    <keyword>Strong typing<keyword>defined</keyword></keyword>
    <keyword>Virtual variables</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">ACCESS Statement</para>
    </header>
    <para styleclass="Heading1">Purpose</para>
    <para styleclass="Normal">Declare a method to access a non-exported or virtual instance variable.</para>
    <para styleclass="Heading1">Syntax</para>
    <para styleclass="Normal"><tab />[Attributes] &#160;[Modifiers] &#160;<text style="font-weight:bold;">ACCESS </text>&lt;<text styleclass="Italic">idName</text>&gt;</para>
    <para styleclass="Normal"><tab />[([&lt;<text styleclass="Italic">idParam</text>&gt; [AS | REF &lt;<text styleclass="Italic">idType</text>&gt;] [, ...])] </para>
    <para styleclass="Normal"><tab />[AS &lt;<text styleclass="Italic">idType</text>&gt;] [&lt;<text styleclass="Italic">idConvention</text>&gt;]</para>
    <para styleclass="Normal"><tab />[CLASS &lt;<text styleclass="Italic">idClass</text>&gt;]</para>
    <para styleclass="Normal"><tab />[=&gt; &lt;expression&gt;]</para>
    <para styleclass="Normal"><tab /><text style="font-weight:bold;">CRLF</text></para>
    <para styleclass="Normal"><tab />[&lt;<text styleclass="Italic">Body</text>&gt;]</para>
    <para styleclass="Normal"><tab />[END ACCESS]</para>
    <para styleclass="Heading1">Arguments</para>
    <para styleclass="Normal"><snippet src="__IncludeMethodModifiers" inline="false"/></para>
    <para styleclass="List"><text styleclass="Normal">&lt;</text><text styleclass="Italic">idName</text><text styleclass="Normal">&gt;</text><tab /><text styleclass="Normal">A valid identifier name for the instance variable whose access method you are defining. &#160;Like other methods, access methods are entities; however, the system uses a unique naming scheme for them to prevent collisions with other entity names. &#160;Access method names must be unique within a class, but can share the same name as other entities in your application.</text></para>
    <para styleclass="Normal"><snippet src="__IncludeMethodParameters" inline="false"/></para>
    <para styleclass="List"><snippet src="__IncludeBody" inline="false"/></para>
    <para styleclass="List">END ACCESS<tab />Optional end clause to indicate the end of the ACCESS entity</para>
    <para styleclass="Heading1">Description</para>
    <para styleclass="Normal">ACCESS declares a special method, called an access method, that is automatically executed each time you access the named instance variable.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">You can define four types of instance variables in a CLASS declaration. &#160;All of these, except EXPORT, are called<text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;"> non-exported</text> instance variables because they are not directly accessible externally (i.e., outside of the class).</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">For example, if you want to access a non-exported instance variable of an object from a function, you must use a method. &#160;Indeed, this is the purpose of not exporting the variable: &#160;encapsulation by being able to control all references to it through a method. &#160;However, the syntax for referencing a method is obviously different from that of referencing a variable. &#160;This violates encapsulation and is just plain cumbersome, since users of the class must be aware of how a property of the class is implemented in order to know whether to use a functional style or a variable style of reference.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">For example, note the difference in accessing the instance variables <text styleclass="Italic">x </text>and <text styleclass="Italic">y </text>in the function UseClass() when the class uses a regular method for exporting the variable:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">EXPORT</text><text style="font-weight:bold; font-style:normal; color:#000000;"> x </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">100</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">INSTANCE</text><text style="font-weight:bold; font-style:normal; color:#000000;"> y </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">10000</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:bold; font-style:normal; color:#000000;"> GetValueY</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><text style="font-weight:bold; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:bold; font-style:normal; color:#000000;"> y</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> UseClass</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">oTest </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">{}</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:</text><text style="font-weight:bold; font-style:normal; color:#000000;">x</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:</text><text style="font-weight:bold; font-style:normal; color:#000000;">GetValueY</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Access y using method</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">If you replace the regular method with an access method, the syntax for accessing both variables is the same even though one of them is insulated by a method:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> y </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:bold; font-style:normal; color:#000000;"> y</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:bold; font-style:normal; color:#000000;"> UseClass</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">()</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#000000;">oTest </text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:=</text><text style="font-weight:bold; font-style:normal; color:#000000;"> Test</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">{}</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:</text><text style="font-weight:bold; font-style:normal; color:#000000;">x</text><br/><tab /><text style="font-weight:bold; font-style:normal; color:#0000ff;">?</text><text style="font-weight:bold; font-style:normal; color:#000000;"> oTest</text><text style="font-weight:bold; font-style:normal; color:#0000ff;">:</text><text style="font-weight:bold; font-style:normal; color:#000000;">y</text><tab /><tab /><tab /><text style="font-weight:bold; font-style:normal; color:#ff00ff;">// Using ACCESS method</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Non-exported variables come in three categories, each with its own properties (see the CLASS statement entry in this guide for details):</para>
    <list id="1" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Indented" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none; font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="Indented" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="Normal">INSTANCE</text></li>
      <li styleclass="Indented" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="Normal">PROTECT</text></li>
      <li styleclass="Indented" style="text-align:left; text-indent:0px; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; line-height:1.00; background-color:transparent; white-space:normal; page-break-inside:auto; page-break-after:auto; border:none; tabstops:none;"><tab /><text styleclass="Normal">HIDDEN</text></li>
    </list>
    <para styleclass="Normal">INSTANCE variables are specifically designed to work with access and assign methods which is the main reason for their late binding. &#160;By defining an access method with the same name as an INSTANCE variable, you effectively override the variable by causing all non-assignment references, both external and internal, to invoke the access method. &#160;</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">The exception is that within an access (or assign) method, instance variables of the same name refer to the variable — otherwise, you would never get anywhere.</para>
    <para styleclass="Normal">For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INSTANCE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name, SSN</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Refers to variable Name</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ShowName() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? Name &#160; &#160; &#160; &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Refers to ACCESS method</text></para>
    <para styleclass="Normal">You can also use PROTECT and HIDDEN variables in conjunction with access methods. &#160;By defining an access method with the same name as a PROTECT or HIDDEN variable, you can access the variable externally using the same syntax as you would inside the class. &#160;Internal references, however, always refer directly to the variable because of early binding.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">Of course, you do not have to give the access method and the instance variable the same name. &#160;This is only for your convenience. &#160;It is the return value of the method that is used when you access &lt;<text styleclass="Italic">idVar</text>&gt;. &#160;Thus, for PROTECT/HIDDEN variables, you can provide an access method with a different name. &#160;For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; PROTECT Name_Protected</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name_Protected</text></para>
    <para styleclass="Normal">A <text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">virtual variable </text>is one that is not defined as part of the class but composed from other instance variables. &#160;In other words, it is a variable that is calculated based on the values of other instance variables. &#160;As with non-exported instance variables, you could use a regular method to compute virtual variables, but this means using a different syntax for accessing them. &#160;Access methods extend the syntax used for accessing instance variables to virtual variables.</para>
    <para styleclass="Normal">For example:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INSTANCE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name, SSN</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Init(cName, cSSN) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; Name := cName</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; SSN := cSSN</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> FullID </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Name + SSN</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> UseClass()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> oFriend </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Person</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; oFriend := Person{&quot;Bill Brown&quot;, &quot;213-88-9546&quot;}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oFriend:Name &#160; &#160; &#160; &#160; </text><text style="font-weight:bold; font-style:italic; color:#339966;">// Bill Brown</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oFriend:FullID &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Bill Brown213-88-9546</text></para>
    <para styleclass="Normal">EXPORT variables are a lot faster and easier to use than non-exported variables and access methods, but using them defies the encapsulation that you should strive for to further the integrity of your application. &#160;Using access and assign methods, you can use exported variables early in the prototyping stage of an application, and later protect the variables with methods without changing the class interface.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">ACCESS is a special case of METHOD and, except for the way you invoke it (i.e., without arguments, like an instance variable), its behavior is the same as any other method. &#160;See the METHOD statement in this guide for more details.</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Bold" style="font-family:Arial; font-size:10pt; font-weight:normal; font-style:normal; text-transform:none; vertical-align:baseline; color:#000000; background-color:transparent; letter-spacing:normal; letter-scaling:100%;">Note: &#160;</text>Internal references to access methods that do not have a corresponding regular INSTANCE variable (e.g., virtual variables or public access to HIDDEN or PROTECT variables with different names) must use the SELF: &#160;prefix. &#160;Internal references means references from inside methods of the class or one of its subclasses. &#160;If the system does not find an instance variable, it assumes a memory variable (which can produce a compiler error depending on whether Allow Undeclared Variables has been chosen in the compiler settings), and it does not attempt to identify the reference as an access method, unless SELF: &#160;is used.</para>
    <para styleclass="Normal"><snippet src="__IncludeStrongTyping" inline="false"/></para>
    <para styleclass="Normal"></para>
    <para styleclass="Heading1">Examples</para>
    <para styleclass="Normal">The following example uses ACCESS to perform a calculation based on the value of other instance variables:</para>
    <para styleclass="Normal"></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Rectangle</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INSTANCE</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Length, Height </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">METHOD</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Init(nX, nY) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Rectangle</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; Length := nX</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; Height := nY</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SELF</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">ACCESS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Area </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Rectangle</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Length * Height</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> FindArea()</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> oShape </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Rectangle</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; oShape := Rectangle{3, 4}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? oShape:Area &#160; &#160; &#160;</text><text style="font-weight:bold; font-style:italic; color:#339966;">// Displays: &#160;12</text></para>
    <para styleclass="Heading1">See Also</para>
    <para styleclass="Normal"><link displaytype="text" defaultstyle="true" type="topiclink" href="command_ASSIGN">ASSIGN</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_CLASS">CLASS</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_METHOD">METHOD</link>, <link displaytype="text" defaultstyle="true" type="topiclink" href="command_PROPERTY">PROPERTY</link></para>
    <para styleclass="Normal"></para>
  </body>
</topic>
