//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.1-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\XSharp\Dev\src\Compiler\src\Compiler\XSharpCodeAnalysis\Parser\XSharp.g4 by ANTLR 4.6.1-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.1-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class XSharpParser : Parser {
	public const int
		FIRST_KEYWORD=1, ACCESS=2, ALIGN=3, AS=4, ASPEN=5, ASSIGN=6, BEGIN=7, 
		BREAK=8, CALLBACK=9, CASE=10, CAST=11, CLASS=12, CLIPPER=13, DECLARE=14, 
		DEFINE=15, DIM=16, DLL=17, DLLEXPORT=18, DO=19, DOWNTO=20, ELSE=21, ELSEIF=22, 
		END=23, ENDCASE=24, ENDDO=25, ENDIF=26, EXIT=27, EXPORT=28, FASTCALL=29, 
		FIELD=30, FOR=31, FUNCTION=32, GLOBAL=33, HIDDEN=34, IF=35, IIF=36, INHERIT=37, 
		INIT1=38, INIT2=39, INIT3=40, INSTANCE=41, IS=42, IN=43, LOCAL=44, LOOP=45, 
		MEMBER=46, MEMVAR=47, METHOD=48, NAMEOF=49, NEXT=50, OTHERWISE=51, PARAMETERS=52, 
		PASCAL=53, PRIVATE=54, PROCEDURE=55, PROTECTED=56, PUBLIC=57, RECOVER=58, 
		RETURN=59, SELF=60, SEQUENCE=61, SIZEOF=62, STATIC=63, STEP=64, STRICT=65, 
		SUPER=66, THISCALL=67, TO=68, TYPEOF=69, UNION=70, UPTO=71, USING=72, 
		WHILE=73, WINCALL=74, CATCH=75, FINALLY=76, THROW=77, FIRST_POSITIONAL_KEYWORD=78, 
		ABSTRACT=79, AUTO=80, CASTCLASS=81, CONSTRUCTOR=82, CONST=83, DEFAULT=84, 
		DELEGATE=85, DESTRUCTOR=86, ENUM=87, EVENT=88, EXPLICIT=89, FOREACH=90, 
		GET=91, IMPLEMENTS=92, IMPLICIT=93, IMPLIED=94, INITONLY=95, INTERFACE=96, 
		INTERNAL=97, LOCK=98, NAMESPACE=99, NEW=100, OPERATOR=101, OUT=102, PARTIAL=103, 
		PROPERTY=104, REPEAT=105, SCOPE=106, SEALED=107, SET=108, STRUCTURE=109, 
		TRY=110, TUPLE=111, UNTIL=112, VALUE=113, VIRTUAL=114, VOSTRUCT=115, ADD=116, 
		ARGLIST=117, ASCENDING=118, ASYNC=119, ASTYPE=120, AWAIT=121, BY=122, 
		CHECKED=123, DESCENDING=124, EQUALS=125, EXTERN=126, FIXED=127, FROM=128, 
		GROUP=129, INIT=130, INTO=131, JOIN=132, LET=133, NOP=134, OF=135, ON=136, 
		ORDERBY=137, OVERRIDE=138, PARAMS=139, REMOVE=140, SELECT=141, STACKALLOC=142, 
		SWITCH=143, UNCHECKED=144, UNSAFE=145, VAR=146, VOLATILE=147, WHEN=148, 
		WHERE=149, YIELD=150, WITH=151, LAST_POSITIONAL_KEYWORD=152, FIRST_TYPE=153, 
		ARRAY=154, BYTE=155, CODEBLOCK=156, DATE=157, DWORD=158, FLOAT=159, INT=160, 
		LOGIC=161, LONGINT=162, OBJECT=163, PSZ=164, PTR=165, REAL4=166, REAL8=167, 
		REF=168, SHORTINT=169, STRING=170, SYMBOL=171, USUAL=172, VOID=173, WORD=174, 
		CHAR=175, INT64=176, UINT64=177, DYNAMIC=178, DECIMAL=179, DATETIME=180, 
		CURRENCY=181, BINARY=182, NINT=183, NUINT=184, LAST_TYPE=185, UDC_KEYWORD=186, 
		SCRIPT_REF=187, SCRIPT_LOAD=188, ASSIGNMENT=189, DEFERRED=190, ENDCLASS=191, 
		ENDSEQUENCE=192, EXPORTED=193, FREEZE=194, FINAL=195, INLINE=196, INTRODUCE=197, 
		NOSAVE=198, READONLY=199, SHARING=200, SHARED=201, SYNC=202, ENDDEFINE=203, 
		LPARAMETERS=204, OLEPUBLIC=205, EXCLUDE=206, THISACCESS=207, HELPSTRING=208, 
		DIMENSION=209, NOINIT=210, THEN=211, FOX_M=212, SCAN=213, ENDSCAN=214, 
		ENDFOR=215, ENDFUNC=216, ENDPROC=217, ENDTRY=218, ENDWITH=219, EACH=220, 
		LAST_KEYWORD=221, FIRST_NULL=222, NIL=223, NULL=224, NULL_ARRAY=225, NULL_CODEBLOCK=226, 
		NULL_DATE=227, NULL_OBJECT=228, NULL_PSZ=229, NULL_PTR=230, NULL_STRING=231, 
		NULL_SYMBOL=232, NULL_FOX=233, LAST_NULL=234, FIRST_OPERATOR=235, LT=236, 
		LTE=237, GT=238, GTE=239, EQ=240, EEQ=241, SUBSTR=242, NEQ=243, NEQ2=244, 
		INC=245, DEC=246, PLUS=247, MINUS=248, DIV=249, MOD=250, EXP=251, LSHIFT=252, 
		RSHIFT=253, TILDE=254, MULT=255, QQMARK=256, QMARK=257, AND=258, OR=259, 
		NOT=260, BIT_NOT=261, BIT_AND=262, BIT_OR=263, BIT_XOR=264, ASSIGN_OP=265, 
		ASSIGN_ADD=266, ASSIGN_SUB=267, ASSIGN_EXP=268, ASSIGN_MUL=269, ASSIGN_DIV=270, 
		ASSIGN_MOD=271, ASSIGN_BITAND=272, ASSIGN_BITOR=273, ASSIGN_LSHIFT=274, 
		ASSIGN_RSHIFT=275, ASSIGN_XOR=276, ASSIGN_QQMARK=277, LOGIC_AND=278, LOGIC_OR=279, 
		LOGIC_NOT=280, LOGIC_XOR=281, FOX_AND=282, FOX_OR=283, FOX_NOT=284, FOX_XOR=285, 
		LPAREN=286, RPAREN=287, LCURLY=288, RCURLY=289, LBRKT=290, RBRKT=291, 
		COLON=292, COMMA=293, PIPE=294, AMP=295, ADDROF=296, ALIAS=297, DOT=298, 
		COLONCOLON=299, BACKSLASH=300, ELLIPSIS=301, BACKBACKSLASH=302, DOTDOT=303, 
		LAST_OPERATOR=304, FIRST_CONSTANT=305, FALSE_CONST=306, TRUE_CONST=307, 
		HEX_CONST=308, BIN_CONST=309, INT_CONST=310, DATE_CONST=311, DATETIME_CONST=312, 
		REAL_CONST=313, INVALID_NUMBER=314, SYMBOL_CONST=315, CHAR_CONST=316, 
		STRING_CONST=317, ESCAPED_STRING_CONST=318, INTERPOLATED_STRING_CONST=319, 
		INCOMPLETE_STRING_CONST=320, TEXT_STRING_CONST=321, BRACKETED_STRING_CONST=322, 
		BINARY_CONST=323, LAST_CONSTANT=324, PP_FIRST=325, PP_COMMAND=326, PP_DEFINE=327, 
		PP_ELSE=328, PP_ENDIF=329, PP_ENDREGION=330, PP_ERROR=331, PP_IF=332, 
		PP_IFDEF=333, PP_IFNDEF=334, PP_INCLUDE=335, PP_LINE=336, PP_REGION=337, 
		PP_STDOUT=338, PP_TRANSLATE=339, PP_UNDEF=340, PP_WARNING=341, PP_PRAGMA=342, 
		PP_TEXT=343, PP_ENDTEXT=344, PP_LAST=345, MACRO=346, UDCSEP=347, ID=348, 
		DOC_COMMENT=349, SL_COMMENT=350, ML_COMMENT=351, LINE_CONT=352, LINE_CONT_OLD=353, 
		SEMI=354, WS=355, NL=356, EOS=357, UNRECOGNIZED=358, LAST=359;
	public const int
		RULE_script = 0, RULE_scriptEntity = 1, RULE_macroScript = 2, RULE_source = 3, 
		RULE_foxsource = 4, RULE_entity = 5, RULE_eos = 6, RULE_funcproc = 7, 
		RULE_funcproctype = 8, RULE_signature = 9, RULE_vodummyclauses = 10, RULE_callingconvention = 11, 
		RULE_vodll = 12, RULE_dllcallconv = 13, RULE_foxdll = 14, RULE_foxdllparam = 15, 
		RULE_vodllmethod = 16, RULE_parameterList = 17, RULE_parameter = 18, RULE_parameterDeclMods = 19, 
		RULE_statementBlock = 20, RULE_funcprocModifiers = 21, RULE_using_ = 22, 
		RULE_voglobal = 23, RULE_method = 24, RULE_methodtype = 25, RULE_vodefine = 26, 
		RULE_vostruct = 27, RULE_vostructmember = 28, RULE_vounion = 29, RULE_votypeModifiers = 30, 
		RULE_namespace_ = 31, RULE_interface_ = 32, RULE_class_ = 33, RULE_classModifiers = 34, 
		RULE_typeparameters = 35, RULE_typeparameter = 36, RULE_typeparameterconstraintsclause = 37, 
		RULE_typeparameterconstraint = 38, RULE_structure_ = 39, RULE_delegate_ = 40, 
		RULE_enum_ = 41, RULE_enummember = 42, RULE_event_ = 43, RULE_eventLineAccessor = 44, 
		RULE_eventAccessor = 45, RULE_classvars = 46, RULE_classvarModifiers = 47, 
		RULE_classvar = 48, RULE_arraysub = 49, RULE_property = 50, RULE_propertyParameterList = 51, 
		RULE_propertyAutoAccessor = 52, RULE_propertyLineAccessor = 53, RULE_accessorModifiers = 54, 
		RULE_expressionList = 55, RULE_propertyAccessor = 56, RULE_classmember = 57, 
		RULE_constructor = 58, RULE_constructorchain = 59, RULE_constructorModifiers = 60, 
		RULE_vodeclare = 61, RULE_destructor = 62, RULE_destructorModifiers = 63, 
		RULE_overloadedOps = 64, RULE_conversionOps = 65, RULE_operator_ = 66, 
		RULE_operatorModifiers = 67, RULE_memberModifiers = 68, RULE_attributes = 69, 
		RULE_attributeBlock = 70, RULE_attributeTarget = 71, RULE_attribute = 72, 
		RULE_attributeParam = 73, RULE_globalAttributes = 74, RULE_globalAttributeTarget = 75, 
		RULE_filewidevar = 76, RULE_statement = 77, RULE_blockTokens = 78, RULE_condBlock = 79, 
		RULE_switchBlock = 80, RULE_catchBlock = 81, RULE_recoverBlock = 82, RULE_variableDeclaration = 83, 
		RULE_variableDeclarator = 84, RULE_localdecl = 85, RULE_localvar = 86, 
		RULE_impliedvar = 87, RULE_fielddecl = 88, RULE_memvardecl = 89, RULE_memvar = 90, 
		RULE_foxmemvardecl = 91, RULE_foxdimvardecl = 92, RULE_foxlparameters = 93, 
		RULE_foxdimvar = 94, RULE_foxclasslib = 95, RULE_foxlparameter = 96, RULE_foxtypedecl = 97, 
		RULE_foxmemvar = 98, RULE_localfuncproc = 99, RULE_localfuncprocModifiers = 100, 
		RULE_assignoperator = 101, RULE_expression = 102, RULE_primary = 103, 
		RULE_boundExpression = 104, RULE_aliasExpression = 105, RULE_objectOrCollectioninitializer = 106, 
		RULE_objectinitializer = 107, RULE_memberinitializer = 108, RULE_initializervalue = 109, 
		RULE_complexInitExpr = 110, RULE_initializerMember = 111, RULE_collectioninitializer = 112, 
		RULE_bracketedArgumentList = 113, RULE_unnamedArgument = 114, RULE_argumentList = 115, 
		RULE_namedArgument = 116, RULE_iif = 117, RULE_nameDot = 118, RULE_name = 119, 
		RULE_aliasedName = 120, RULE_simpleName = 121, RULE_genericArgumentList = 122, 
		RULE_identifierName = 123, RULE_varidentifier = 124, RULE_varidentifierName = 125, 
		RULE_datatype = 126, RULE_arrayRank = 127, RULE_typeName = 128, RULE_usualTypeName = 129, 
		RULE_literalArray = 130, RULE_arrayElement = 131, RULE_anonType = 132, 
		RULE_anonMember = 133, RULE_tupleType = 134, RULE_tupleTypeElement = 135, 
		RULE_tupleExpr = 136, RULE_tupleExprArgument = 137, RULE_designationExpr = 138, 
		RULE_designationTypeExpr = 139, RULE_localDesignation = 140, RULE_codeblock = 141, 
		RULE_codeblockCode = 142, RULE_lambdaParameterList = 143, RULE_codeblockParamList = 144, 
		RULE_codeblockExprList = 145, RULE_anonymousMethodExpression = 146, RULE_explicitAnonymousFunctionParamList = 147, 
		RULE_explicitAnonymousFunctionParameter = 148, RULE_linqQuery = 149, RULE_fromClause = 150, 
		RULE_queryBody = 151, RULE_queryBodyClause = 152, RULE_joinIntoClause = 153, 
		RULE_ordering = 154, RULE_selectOrGroupclause = 155, RULE_queryContinuation = 156, 
		RULE_identifier = 157, RULE_identifierString = 158, RULE_xbaseFunc = 159, 
		RULE_xbaseType = 160, RULE_nativeType = 161, RULE_literalValue = 162, 
		RULE_parserLiteralValue = 163, RULE_keywordvo = 164, RULE_keywordxs = 165, 
		RULE_keywordxpp = 166, RULE_xppclass = 167, RULE_xppclassModifiers = 168, 
		RULE_xppclassMember = 169, RULE_xppmethodvis = 170, RULE_xppvisibility = 171, 
		RULE_xppdeclareMethod = 172, RULE_xppdeclmethodparams = 173, RULE_xppisin = 174, 
		RULE_xppmemberModifiers = 175, RULE_xppclassvars = 176, RULE_xppvarassignment = 177, 
		RULE_xppdeclareproperty = 178, RULE_xppaccessors = 179, RULE_xppmethod = 180, 
		RULE_xppinlineMethod = 181, RULE_keywordfox = 182, RULE_foxclass = 183, 
		RULE_foxclassmember = 184, RULE_foxmethod = 185, RULE_foxclassvars = 186, 
		RULE_foxfield = 187, RULE_foxfieldinitializer = 188, RULE_foximplementsclause = 189, 
		RULE_foxaddobjectclause = 190, RULE_foxpemcomattrib = 191;
	public static readonly string[] ruleNames = {
		"script", "scriptEntity", "macroScript", "source", "foxsource", "entity", 
		"eos", "funcproc", "funcproctype", "signature", "vodummyclauses", "callingconvention", 
		"vodll", "dllcallconv", "foxdll", "foxdllparam", "vodllmethod", "parameterList", 
		"parameter", "parameterDeclMods", "statementBlock", "funcprocModifiers", 
		"using_", "voglobal", "method", "methodtype", "vodefine", "vostruct", 
		"vostructmember", "vounion", "votypeModifiers", "namespace_", "interface_", 
		"class_", "classModifiers", "typeparameters", "typeparameter", "typeparameterconstraintsclause", 
		"typeparameterconstraint", "structure_", "delegate_", "enum_", "enummember", 
		"event_", "eventLineAccessor", "eventAccessor", "classvars", "classvarModifiers", 
		"classvar", "arraysub", "property", "propertyParameterList", "propertyAutoAccessor", 
		"propertyLineAccessor", "accessorModifiers", "expressionList", "propertyAccessor", 
		"classmember", "constructor", "constructorchain", "constructorModifiers", 
		"vodeclare", "destructor", "destructorModifiers", "overloadedOps", "conversionOps", 
		"operator_", "operatorModifiers", "memberModifiers", "attributes", "attributeBlock", 
		"attributeTarget", "attribute", "attributeParam", "globalAttributes", 
		"globalAttributeTarget", "filewidevar", "statement", "blockTokens", "condBlock", 
		"switchBlock", "catchBlock", "recoverBlock", "variableDeclaration", "variableDeclarator", 
		"localdecl", "localvar", "impliedvar", "fielddecl", "memvardecl", "memvar", 
		"foxmemvardecl", "foxdimvardecl", "foxlparameters", "foxdimvar", "foxclasslib", 
		"foxlparameter", "foxtypedecl", "foxmemvar", "localfuncproc", "localfuncprocModifiers", 
		"assignoperator", "expression", "primary", "boundExpression", "aliasExpression", 
		"objectOrCollectioninitializer", "objectinitializer", "memberinitializer", 
		"initializervalue", "complexInitExpr", "initializerMember", "collectioninitializer", 
		"bracketedArgumentList", "unnamedArgument", "argumentList", "namedArgument", 
		"iif", "nameDot", "name", "aliasedName", "simpleName", "genericArgumentList", 
		"identifierName", "varidentifier", "varidentifierName", "datatype", "arrayRank", 
		"typeName", "usualTypeName", "literalArray", "arrayElement", "anonType", 
		"anonMember", "tupleType", "tupleTypeElement", "tupleExpr", "tupleExprArgument", 
		"designationExpr", "designationTypeExpr", "localDesignation", "codeblock", 
		"codeblockCode", "lambdaParameterList", "codeblockParamList", "codeblockExprList", 
		"anonymousMethodExpression", "explicitAnonymousFunctionParamList", "explicitAnonymousFunctionParameter", 
		"linqQuery", "fromClause", "queryBody", "queryBodyClause", "joinIntoClause", 
		"ordering", "selectOrGroupclause", "queryContinuation", "identifier", 
		"identifierString", "xbaseFunc", "xbaseType", "nativeType", "literalValue", 
		"parserLiteralValue", "keywordvo", "keywordxs", "keywordxpp", "xppclass", 
		"xppclassModifiers", "xppclassMember", "xppmethodvis", "xppvisibility", 
		"xppdeclareMethod", "xppdeclmethodparams", "xppisin", "xppmemberModifiers", 
		"xppclassvars", "xppvarassignment", "xppdeclareproperty", "xppaccessors", 
		"xppmethod", "xppinlineMethod", "keywordfox", "foxclass", "foxclassmember", 
		"foxmethod", "foxclassvars", "foxfield", "foxfieldinitializer", "foximplementsclause", 
		"foxaddobjectclause", "foxpemcomattrib"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "FIRST_KEYWORD", "ACCESS", "ALIGN", "AS", "ASPEN", "ASSIGN", "BEGIN", 
		"BREAK", "CALLBACK", "CASE", "CAST", "CLASS", "CLIPPER", "DECLARE", "DEFINE", 
		"DIM", "DLL", "DLLEXPORT", "DO", "DOWNTO", "ELSE", "ELSEIF", "END", "ENDCASE", 
		"ENDDO", "ENDIF", "EXIT", "EXPORT", "FASTCALL", "FIELD", "FOR", "FUNCTION", 
		"GLOBAL", "HIDDEN", "IF", "IIF", "INHERIT", "INIT1", "INIT2", "INIT3", 
		"INSTANCE", "IS", "IN", "LOCAL", "LOOP", "MEMBER", "MEMVAR", "METHOD", 
		"NAMEOF", "NEXT", "OTHERWISE", "PARAMETERS", "PASCAL", "PRIVATE", "PROCEDURE", 
		"PROTECTED", "PUBLIC", "RECOVER", "RETURN", "SELF", "SEQUENCE", "SIZEOF", 
		"STATIC", "STEP", "STRICT", "SUPER", "THISCALL", "TO", "TYPEOF", "UNION", 
		"UPTO", "USING", "WHILE", "WINCALL", "CATCH", "FINALLY", "THROW", "FIRST_POSITIONAL_KEYWORD", 
		"ABSTRACT", "AUTO", "CASTCLASS", "CONSTRUCTOR", "CONST", "DEFAULT", "DELEGATE", 
		"DESTRUCTOR", "ENUM", "EVENT", "EXPLICIT", "FOREACH", "GET", "IMPLEMENTS", 
		"IMPLICIT", "IMPLIED", "INITONLY", "INTERFACE", "INTERNAL", "LOCK", "NAMESPACE", 
		"NEW", "OPERATOR", "OUT", "PARTIAL", "PROPERTY", "REPEAT", "SCOPE", "SEALED", 
		"SET", "STRUCTURE", "TRY", "TUPLE", "UNTIL", "VALUE", "VIRTUAL", "VOSTRUCT", 
		"ADD", "ARGLIST", "ASCENDING", "ASYNC", "ASTYPE", "AWAIT", "BY", "CHECKED", 
		"DESCENDING", "EQUALS", "EXTERN", "FIXED", "FROM", "GROUP", "INIT", "INTO", 
		"JOIN", "LET", "NOP", "OF", "ON", "ORDERBY", "OVERRIDE", "PARAMS", "REMOVE", 
		"SELECT", "STACKALLOC", "SWITCH", "UNCHECKED", "UNSAFE", "VAR", "VOLATILE", 
		"WHEN", "WHERE", "YIELD", "WITH", "LAST_POSITIONAL_KEYWORD", "FIRST_TYPE", 
		"ARRAY", "BYTE", "CODEBLOCK", "DATE", "DWORD", "FLOAT", "INT", "LOGIC", 
		"LONGINT", "OBJECT", "PSZ", "PTR", "REAL4", "REAL8", "REF", "SHORTINT", 
		"STRING", "SYMBOL", "USUAL", "VOID", "WORD", "CHAR", "INT64", "UINT64", 
		"DYNAMIC", "DECIMAL", "DATETIME", "CURRENCY", "BINARY", "NINT", "NUINT", 
		"LAST_TYPE", "UDC_KEYWORD", "SCRIPT_REF", "SCRIPT_LOAD", "ASSIGNMENT", 
		"DEFERRED", "ENDCLASS", "ENDSEQUENCE", "EXPORTED", "FREEZE", "FINAL", 
		"INLINE", "INTRODUCE", "NOSAVE", "READONLY", "SHARING", "SHARED", "SYNC", 
		"ENDDEFINE", "LPARAMETERS", "OLEPUBLIC", "EXCLUDE", "THISACCESS", "HELPSTRING", 
		"DIMENSION", "NOINIT", "THEN", "FOX_M", "SCAN", "ENDSCAN", "ENDFOR", "ENDFUNC", 
		"ENDPROC", "ENDTRY", "ENDWITH", "EACH", "LAST_KEYWORD", "FIRST_NULL", 
		"NIL", "NULL", "NULL_ARRAY", "NULL_CODEBLOCK", "NULL_DATE", "NULL_OBJECT", 
		"NULL_PSZ", "NULL_PTR", "NULL_STRING", "NULL_SYMBOL", "NULL_FOX", "LAST_NULL", 
		"FIRST_OPERATOR", "LT", "LTE", "GT", "GTE", "EQ", "EEQ", "SUBSTR", "NEQ", 
		"NEQ2", "INC", "DEC", "PLUS", "MINUS", "DIV", "MOD", "EXP", "LSHIFT", 
		"RSHIFT", "TILDE", "MULT", "QQMARK", "QMARK", "AND", "OR", "NOT", "BIT_NOT", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "ASSIGN_OP", "ASSIGN_ADD", "ASSIGN_SUB", 
		"ASSIGN_EXP", "ASSIGN_MUL", "ASSIGN_DIV", "ASSIGN_MOD", "ASSIGN_BITAND", 
		"ASSIGN_BITOR", "ASSIGN_LSHIFT", "ASSIGN_RSHIFT", "ASSIGN_XOR", "ASSIGN_QQMARK", 
		"LOGIC_AND", "LOGIC_OR", "LOGIC_NOT", "LOGIC_XOR", "FOX_AND", "FOX_OR", 
		"FOX_NOT", "FOX_XOR", "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LBRKT", 
		"RBRKT", "COLON", "COMMA", "PIPE", "AMP", "ADDROF", "ALIAS", "DOT", "COLONCOLON", 
		"BACKSLASH", "ELLIPSIS", "BACKBACKSLASH", "DOTDOT", "LAST_OPERATOR", "FIRST_CONSTANT", 
		"FALSE_CONST", "TRUE_CONST", "HEX_CONST", "BIN_CONST", "INT_CONST", "DATE_CONST", 
		"DATETIME_CONST", "REAL_CONST", "INVALID_NUMBER", "SYMBOL_CONST", "CHAR_CONST", 
		"STRING_CONST", "ESCAPED_STRING_CONST", "INTERPOLATED_STRING_CONST", "INCOMPLETE_STRING_CONST", 
		"TEXT_STRING_CONST", "BRACKETED_STRING_CONST", "BINARY_CONST", "LAST_CONSTANT", 
		"PP_FIRST", "PP_COMMAND", "PP_DEFINE", "PP_ELSE", "PP_ENDIF", "PP_ENDREGION", 
		"PP_ERROR", "PP_IF", "PP_IFDEF", "PP_IFNDEF", "PP_INCLUDE", "PP_LINE", 
		"PP_REGION", "PP_STDOUT", "PP_TRANSLATE", "PP_UNDEF", "PP_WARNING", "PP_PRAGMA", 
		"PP_TEXT", "PP_ENDTEXT", "PP_LAST", "MACRO", "UDCSEP", "ID", "DOC_COMMENT", 
		"SL_COMMENT", "ML_COMMENT", "LINE_CONT", "LINE_CONT_OLD", "SEMI", "WS", 
		"NL", "EOS", "UNRECOGNIZED", "LAST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "XSharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public XSharpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ScriptContext : XSharpParserRuleContext {
		public IToken _STRING_CONST;
		public IList<IToken> _Includes = new List<IToken>();
		public IList<IToken> _References = new List<IToken>();
		public ScriptEntityContext _scriptEntity;
		public IList<ScriptEntityContext> _Entities = new List<ScriptEntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public ITerminalNode[] SCRIPT_LOAD() { return GetTokens(XSharpParser.SCRIPT_LOAD); }
		public ITerminalNode SCRIPT_LOAD(int i) {
			return GetToken(XSharpParser.SCRIPT_LOAD, i);
		}
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode[] SCRIPT_REF() { return GetTokens(XSharpParser.SCRIPT_REF); }
		public ITerminalNode SCRIPT_REF(int i) {
			return GetToken(XSharpParser.SCRIPT_REF, i);
		}
		public ITerminalNode[] STRING_CONST() { return GetTokens(XSharpParser.STRING_CONST); }
		public ITerminalNode STRING_CONST(int i) {
			return GetToken(XSharpParser.STRING_CONST, i);
		}
		public ScriptEntityContext[] scriptEntity() {
			return GetRuleContexts<ScriptEntityContext>();
		}
		public ScriptEntityContext scriptEntity(int i) {
			return GetRuleContext<ScriptEntityContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_script);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 390;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case SCRIPT_LOAD:
						{
						State = 384; Match(SCRIPT_LOAD);
						State = 385; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._Includes.Add(_localctx._STRING_CONST);
						State = 386; Match(EOS);
						}
						break;
					case SCRIPT_REF:
						{
						State = 387; Match(SCRIPT_REF);
						State = 388; _localctx._STRING_CONST = Match(STRING_CONST);
						_localctx._References.Add(_localctx._STRING_CONST);
						State = 389; Match(EOS);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 394;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,1,_ctx);
			}
			State = 398;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 395; _localctx._scriptEntity = scriptEntity();
					_localctx._Entities.Add(_localctx._scriptEntity);
					}
					} 
				}
				State = 400;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,2,_ctx);
			}
			State = 401; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptEntityContext : XSharpParserRuleContext {
		public StatementContext Stmt;
		public EntityContext Entity;
		public ExpressionContext Expr;
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public EntityContext entity() {
			return GetRuleContext<EntityContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ScriptEntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scriptEntity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterScriptEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitScriptEntity(this);
		}
	}

	[RuleVersion(0)]
	public ScriptEntityContext scriptEntity() {
		ScriptEntityContext _localctx = new ScriptEntityContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_scriptEntity);
		try {
			State = 406;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 403; _localctx.Stmt = statement();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404; _localctx.Entity = entity();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 405; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MacroScriptContext : XSharpParserRuleContext {
		public CodeblockContext CbExpr;
		public CodeblockCodeContext Code;
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public MacroScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_macroScript; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroScript(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroScript(this);
		}
	}

	[RuleVersion(0)]
	public MacroScriptContext macroScript() {
		MacroScriptContext _localctx = new MacroScriptContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_macroScript);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 410;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,4,_ctx) ) {
			case 1:
				{
				State = 408; _localctx.CbExpr = codeblock();
				}
				break;

			case 2:
				{
				State = 409; _localctx.Code = codeblockCode();
				}
				break;
			}
			State = 412; Match(EOS);
			State = 413; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceContext : XSharpParserRuleContext {
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public SourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_source; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSource(this);
		}
	}

	[RuleVersion(0)]
	public SourceContext source() {
		SourceContext _localctx = new SourceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_source);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 418;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 415; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 420;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			State = 421; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxsourceContext : XSharpParserRuleContext {
		public FilewidevarContext _filewidevar;
		public IList<FilewidevarContext> _Vars = new List<FilewidevarContext>();
		public StatementBlockContext StmtBlk;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public ITerminalNode Eof() { return GetToken(XSharpParser.Eof, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public FilewidevarContext[] filewidevar() {
			return GetRuleContexts<FilewidevarContext>();
		}
		public FilewidevarContext filewidevar(int i) {
			return GetRuleContext<FilewidevarContext>(i);
		}
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public FoxsourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxsource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxsource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxsource(this);
		}
	}

	[RuleVersion(0)]
	public FoxsourceContext foxsource() {
		FoxsourceContext _localctx = new FoxsourceContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_foxsource);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 426;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 423; _localctx._filewidevar = filewidevar();
					_localctx._Vars.Add(_localctx._filewidevar);
					}
					} 
				}
				State = 428;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,6,_ctx);
			}
			State = 429; _localctx.StmtBlk = statementBlock();
			State = 433;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 430; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 435;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
			}
			State = 436; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EntityContext : XSharpParserRuleContext {
		public Namespace_Context namespace_() {
			return GetRuleContext<Namespace_Context>(0);
		}
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public FoxclassContext foxclass() {
			return GetRuleContext<FoxclassContext>(0);
		}
		public XppclassContext xppclass() {
			return GetRuleContext<XppclassContext>(0);
		}
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public GlobalAttributesContext globalAttributes() {
			return GetRuleContext<GlobalAttributesContext>(0);
		}
		public VostructContext vostruct() {
			return GetRuleContext<VostructContext>(0);
		}
		public VounionContext vounion() {
			return GetRuleContext<VounionContext>(0);
		}
		public FuncprocContext funcproc() {
			return GetRuleContext<FuncprocContext>(0);
		}
		public Using_Context using_() {
			return GetRuleContext<Using_Context>(0);
		}
		public VodefineContext vodefine() {
			return GetRuleContext<VodefineContext>(0);
		}
		public VoglobalContext voglobal() {
			return GetRuleContext<VoglobalContext>(0);
		}
		public VodllContext vodll() {
			return GetRuleContext<VodllContext>(0);
		}
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public XppmethodContext xppmethod() {
			return GetRuleContext<XppmethodContext>(0);
		}
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FilewidevarContext filewidevar() {
			return GetRuleContext<FilewidevarContext>(0);
		}
		public FoxdllContext foxdll() {
			return GetRuleContext<FoxdllContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public EntityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_entity; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEntity(this);
		}
	}

	[RuleVersion(0)]
	public EntityContext entity() {
		EntityContext _localctx = new EntityContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_entity);
		try {
			State = 469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 438; namespace_();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 439; class_();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 441; foxclass();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 442;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 443; xppclass();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 444; structure_();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 445; interface_();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 446; delegate_();
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 447; event_();
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 448; enum_();
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 449; globalAttributes();
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 450;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 451; vostruct();
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 452;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 453; vounion();
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 454; funcproc();
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 455; using_();
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 456; vodefine();
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 457; voglobal();
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 458; vodll();
				}
				break;

			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 459;
				if (!(!IsXPP)) throw new FailedPredicateException(this, "!IsXPP");
				State = 460; method();
				}
				break;

			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 461;
				if (!(IsXPP)) throw new FailedPredicateException(this, "IsXPP");
				State = 462; xppmethod();
				}
				break;

			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 463; constructor();
				}
				break;

			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 464; destructor();
				}
				break;

			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 465; filewidevar();
				}
				break;

			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 466;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 467; foxdll();
				}
				break;

			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 468; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EosContext : XSharpParserRuleContext {
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public EosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eos; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEos(this);
		}
	}

	[RuleVersion(0)]
	public EosContext eos() {
		EosContext _localctx = new EosContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_eos);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 472;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 471; Match(EOS);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 474;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken InitExit;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode[] EXIT() { return GetTokens(XSharpParser.EXIT); }
		public ITerminalNode EXIT(int i) {
			return GetToken(XSharpParser.EXIT, i);
		}
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproc(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocContext funcproc() {
		FuncprocContext _localctx = new FuncprocContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funcproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 476; _localctx.Attributes = attributes();
				}
			}

			State = 480;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 479; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXIT || _la==INIT) {
				{
				State = 482;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==EXIT || _la==INIT) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 485; _localctx.T = funcproctype();
			State = 486; _localctx.Sig = signature();
			State = 488;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) {
				{
				State = 487;
				_localctx.InitExit = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3))) != 0)) ) {
					_localctx.InitExit = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 490; vodummyclauses();
			State = 491; _localctx.end = eos();
			State = 492; _localctx.StmtBlk = statementBlock();
			State = 499;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				{
				State = 496;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 493;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 494; Match(END);
					State = 495; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 498; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncproctypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public FuncproctypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcproctype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncproctype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncproctype(this);
		}
	}

	[RuleVersion(0)]
	public FuncproctypeContext funcproctype() {
		FuncproctypeContext _localctx = new FuncproctypeContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_funcproctype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 501;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==FUNCTION || _la==PROCEDURE) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignatureContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public ExpressionContext ExpressionBody;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSignature(this);
		}
	}

	[RuleVersion(0)]
	public SignatureContext signature() {
		SignatureContext _localctx = new SignatureContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 503; _localctx.Id = identifier();
			State = 505;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 504; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 508;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 507; _localctx.ParamList = parameterList();
				}
			}

			State = 512;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 510; Match(AS);
				State = 511; _localctx.Type = datatype();
				}
			}

			State = 517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 514; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 519;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 521;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 520; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 525;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 523; Match(UDCSEP);
				State = 524; _localctx.ExpressionBody = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodummyclausesContext : XSharpParserRuleContext {
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public VodummyclausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodummyclauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodummyclauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodummyclauses(this);
		}
	}

	[RuleVersion(0)]
	public VodummyclausesContext vodummyclauses() {
		VodummyclausesContext _localctx = new VodummyclausesContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_vodummyclauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 529;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXPORT) {
				{
				State = 527; Match(EXPORT);
				State = 528; Match(LOCAL);
				}
			}

			State = 533;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==DLLEXPORT) {
				{
				State = 531; Match(DLLEXPORT);
				State = 532; Match(STRING_CONST);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallingconventionContext : XSharpParserRuleContext {
		public IToken Convention;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public CallingconventionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callingconvention; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCallingconvention(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCallingconvention(this);
		}
	}

	[RuleVersion(0)]
	public CallingconventionContext callingconvention() {
		CallingconventionContext _localctx = new CallingconventionContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_callingconvention);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 535;
			_localctx.Convention = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Convention = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public FuncproctypeContext T;
		public IdentifierContext Id;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public DllcallconvContext CallingConvention;
		public IdentifierStringContext Dll;
		public IdentifierStringContext Extension;
		public IToken Ordinal;
		public IdentifierStringContext Entrypoint;
		public IToken Address;
		public IToken Number;
		public IToken CharSet;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public FuncproctypeContext funcproctype() {
			return GetRuleContext<FuncproctypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierStringContext[] identifierString() {
			return GetRuleContexts<IdentifierStringContext>();
		}
		public IdentifierStringContext identifierString(int i) {
			return GetRuleContext<IdentifierStringContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public DllcallconvContext dllcallconv() {
			return GetRuleContext<DllcallconvContext>(0);
		}
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public VodllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodll(this);
		}
	}

	[RuleVersion(0)]
	public VodllContext vodll() {
		VodllContext _localctx = new VodllContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_vodll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 538;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 537; _localctx.Attributes = attributes();
				}
			}

			State = 541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 540; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 543; _localctx.D = Match(DLL);
			State = 544; _localctx.T = funcproctype();
			State = 545; _localctx.Id = identifier();
			State = 547;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 546; _localctx.ParamList = parameterList();
				}
			}

			State = 551;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 549; Match(AS);
				State = 550; _localctx.Type = datatype();
				}
			}

			State = 554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 553; _localctx.CallingConvention = dllcallconv();
				}
			}

			State = 556; Match(COLON);
			State = 557; _localctx.Dll = identifierString();
			State = 560;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				{
				State = 558; Match(DOT);
				State = 559; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 575;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case REAL_CONST:
				{
				State = 562; _localctx.Ordinal = Match(REAL_CONST);
				}
				break;
			case DOT:
				{
				State = 563; Match(DOT);
				State = 564; _localctx.Entrypoint = identifierString();
				State = 566;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADDROF) {
					{
					State = 565; _localctx.Address = Match(ADDROF);
					}
				}

				State = 569;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INT_CONST) {
					{
					State = 568; _localctx.Number = Match(INT_CONST);
					}
				}

				State = 573;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NEQ2) {
					{
					State = 571; Match(NEQ2);
					State = 572; Match(INT_CONST);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 578;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AUTO || _la==ID) {
				{
				State = 577;
				_localctx.CharSet = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AUTO || _la==ID) ) {
					_localctx.CharSet = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 580; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DllcallconvContext : XSharpParserRuleContext {
		public IToken Cc;
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode ASPEN() { return GetToken(XSharpParser.ASPEN, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public DllcallconvContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dllcallconv; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDllcallconv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDllcallconv(this);
		}
	}

	[RuleVersion(0)]
	public DllcallconvContext dllcallconv() {
		DllcallconvContext _localctx = new DllcallconvContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_dllcallconv);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 582;
			_localctx.Cc = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) ) {
				_localctx.Cc = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public DatatypeContext Type;
		public IdentifierContext Id;
		public IdentifierContext Dll;
		public IdentifierStringContext Extension;
		public IdentifierContext Alias;
		public FoxdllparamContext _foxdllparam;
		public IList<FoxdllparamContext> _Params = new List<FoxdllparamContext>();
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierStringContext identifierString() {
			return GetRuleContext<IdentifierStringContext>(0);
		}
		public FoxdllparamContext[] foxdllparam() {
			return GetRuleContexts<FoxdllparamContext>();
		}
		public FoxdllparamContext foxdllparam(int i) {
			return GetRuleContext<FoxdllparamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdll(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllContext foxdll() {
		FoxdllContext _localctx = new FoxdllContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_foxdll);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 584; _localctx.Attributes = attributes();
				}
			}

			State = 588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 587; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 590; Match(DECLARE);
			State = 592;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				State = 591; _localctx.Type = datatype();
				}
				break;
			}
			State = 594; _localctx.Id = identifier();
			State = 595; Match(IN);
			State = 596; _localctx.Dll = identifier();
			State = 599;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,38,_ctx) ) {
			case 1:
				{
				State = 597; Match(DOT);
				State = 598; _localctx.Extension = identifierString();
				}
				break;
			}
			State = 603;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,39,_ctx) ) {
			case 1:
				{
				State = 601; Match(AS);
				State = 602; _localctx.Alias = identifier();
				}
				break;
			}
			State = 613;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,41,_ctx) ) {
			case 1:
				{
				State = 605; _localctx._foxdllparam = foxdllparam();
				_localctx._Params.Add(_localctx._foxdllparam);
				State = 610;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 606; Match(COMMA);
					State = 607; _localctx._foxdllparam = foxdllparam();
					_localctx._Params.Add(_localctx._foxdllparam);
					}
					}
					State = 612;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 615; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdllparamContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DatatypeContext Type;
		public IToken Address;
		public IdentifierContext Name;
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FoxdllparamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdllparam; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdllparam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdllparam(this);
		}
	}

	[RuleVersion(0)]
	public FoxdllparamContext foxdllparam() {
		FoxdllparamContext _localctx = new FoxdllparamContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_foxdllparam);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 618;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,42,_ctx) ) {
			case 1:
				{
				State = 617; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 620; _localctx.Type = datatype();
			State = 622;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,43,_ctx) ) {
			case 1:
				{
				State = 621; _localctx.Address = Match(ADDROF);
				}
				break;
			}
			State = 625;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,44,_ctx) ) {
			case 1:
				{
				State = 624; _localctx.Name = identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodllmethodContext : XSharpParserRuleContext {
		public IToken D;
		public IToken T;
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public VodllmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodllmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public VodllmethodContext vodllmethod() {
		VodllmethodContext _localctx = new VodllmethodContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_vodllmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 627; _localctx.D = Match(DLL);
			State = 628;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0) || _la==CONSTRUCTOR || _la==DESTRUCTOR) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 630;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0)) {
				{
				State = 629;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			State = 632; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterListContext : XSharpParserRuleContext {
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterListContext parameterList() {
		ParameterListContext _localctx = new ParameterListContext(_ctx, State);
		EnterRule(_localctx, 34, RULE_parameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 634; Match(LPAREN);
			State = 643;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,47,_ctx) ) {
			case 1:
				{
				State = 635; _localctx._parameter = parameter();
				_localctx._Params.Add(_localctx._parameter);
				State = 640;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 636; Match(COMMA);
					State = 637; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					}
					}
					State = 642;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 645; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken Self;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Default;
		public ParameterDeclModsContext Modifiers;
		public DatatypeContext Type;
		public IToken Ellipsis;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode ELLIPSIS() { return GetToken(XSharpParser.ELLIPSIS, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameter(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(_ctx, State);
		EnterRule(_localctx, 36, RULE_parameter);
		int _la;
		try {
			State = 665;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,52,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 648;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,48,_ctx) ) {
				case 1:
					{
					State = 647; _localctx.Attributes = attributes();
					}
					break;
				}
				State = 651;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,49,_ctx) ) {
				case 1:
					{
					State = 650; _localctx.Self = Match(SELF);
					}
					break;
				}
				State = 653; _localctx.Id = identifier();
				State = 657;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 654; _localctx.Op = assignoperator();
					State = 655; _localctx.Default = expression(0);
					}
				}

				State = 662;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) {
					{
					State = 659; _localctx.Modifiers = parameterDeclMods();
					State = 660; _localctx.Type = datatype();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 664; _localctx.Ellipsis = Match(ELLIPSIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclModsContext : XSharpParserRuleContext {
		public IToken _AS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _REF;
		public IToken _OUT;
		public IToken _IS;
		public IToken _PARAMS;
		public IToken _IN;
		public IToken _tset983;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ParameterDeclModsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclMods; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParameterDeclMods(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParameterDeclMods(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclModsContext parameterDeclMods() {
		ParameterDeclModsContext _localctx = new ParameterDeclModsContext(_ctx, State);
		EnterRule(_localctx, 38, RULE_parameterDeclMods);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			_localctx._tset983 = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << IS) | (1L << IN))) != 0) || _la==OUT || _la==PARAMS || _la==REF) ) {
				_localctx._tset983 = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			_localctx._Tokens.Add(_localctx._tset983);
			State = 669;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,53,_ctx) ) {
			case 1:
				{
				State = 668; Match(CONST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : XSharpParserRuleContext {
		public StatementContext _statement;
		public IList<StatementContext> _Stmts = new List<StatementContext>();
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(_ctx, State);
		EnterRule(_localctx, 40, RULE_statementBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 674;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 671; _localctx._statement = statement();
					_localctx._Stmts.Add(_localctx._statement);
					}
					} 
				}
				State = 676;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,54,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _INTERNAL;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _ASYNC;
		public IToken _tset1035;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public FuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public FuncprocModifiersContext funcprocModifiers() {
		FuncprocModifiersContext _localctx = new FuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 42, RULE_funcprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 678;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 677;
				_localctx._tset1035 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1035 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1035);
				}
				}
				State = 680;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_Context : XSharpParserRuleContext {
		public IToken Static;
		public IdentifierNameContext Alias;
		public AssignoperatorContext Op;
		public NameContext Name;
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public Using_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsing_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsing_(this);
		}
	}

	[RuleVersion(0)]
	public Using_Context using_() {
		Using_Context _localctx = new Using_Context(_ctx, State);
		EnterRule(_localctx, 44, RULE_using_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 682; Match(USING);
			State = 684;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,56,_ctx) ) {
			case 1:
				{
				State = 683; _localctx.Static = Match(STATIC);
				}
				break;
			}
			State = 689;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,57,_ctx) ) {
			case 1:
				{
				State = 686; _localctx.Alias = identifierName();
				State = 687; _localctx.Op = assignoperator();
				}
				break;
			}
			State = 691; _localctx.Name = name(0);
			State = 692; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoglobalContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public FuncprocModifiersContext Modifiers;
		public IToken Global;
		public IToken Const;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public IToken end;
		public IToken Static;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public VoglobalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voglobal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoglobal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoglobal(this);
		}
	}

	[RuleVersion(0)]
	public VoglobalContext voglobal() {
		VoglobalContext _localctx = new VoglobalContext(_ctx, State);
		EnterRule(_localctx, 46, RULE_voglobal);
		int _la;
		try {
			State = 731;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,65,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 695;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 694; _localctx.Attributes = attributes();
					}
				}

				State = 698;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
					{
					State = 697; _localctx.Modifiers = funcprocModifiers();
					}
				}

				State = 700; _localctx.Global = Match(GLOBAL);
				State = 702;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,60,_ctx) ) {
				case 1:
					{
					State = 701; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 704; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 709;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 705; Match(COMMA);
					State = 706; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 711;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 712; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 715;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					State = 714; _localctx.Attributes = attributes();
					}
				}

				State = 717; _localctx.Static = Match(STATIC);
				State = 719;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,63,_ctx) ) {
				case 1:
					{
					State = 718; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 721; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				State = 726;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 722; Match(COMMA);
					State = 723; _localctx._classvar = classvar();
					_localctx._Vars.Add(_localctx._classvar);
					}
					}
					State = 728;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 729; _localctx.end = Match(EOS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public MethodtypeContext T;
		public NameDotContext ExplicitIface;
		public SignatureContext Sig;
		public IdentifierContext ClassId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public MethodtypeContext T2;
		public IToken End;
		public VodummyclausesContext vodummyclauses() {
			return GetRuleContext<VodummyclausesContext>(0);
		}
		public MethodtypeContext[] methodtype() {
			return GetRuleContexts<MethodtypeContext>();
		}
		public MethodtypeContext methodtype(int i) {
			return GetRuleContext<MethodtypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethod(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(_ctx, State);
		EnterRule(_localctx, 48, RULE_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 734;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 733; _localctx.Attributes = attributes();
				}
			}

			State = 737;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 736; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 739; _localctx.T = methodtype();
			State = 741;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,68,_ctx) ) {
			case 1:
				{
				State = 740; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 743; _localctx.Sig = signature();
			State = 746;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 744; Match(CLASS);
				State = 745; _localctx.ClassId = identifier();
				}
			}

			State = 748; vodummyclauses();
			State = 749; _localctx.end = eos();
			State = 750; _localctx.StmtBlk = statementBlock();
			State = 755;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				State = 751; Match(END);
				State = 752; _localctx.T2 = methodtype();
				State = 753; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodtypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public MethodtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodtype; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodtype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodtype(this);
		}
	}

	[RuleVersion(0)]
	public MethodtypeContext methodtype() {
		MethodtypeContext _localctx = new MethodtypeContext(_ctx, State);
		EnterRule(_localctx, 50, RULE_methodtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 757;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodefineContext : XSharpParserRuleContext {
		public FuncprocModifiersContext Modifiers;
		public IToken D;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext DataType;
		public IToken end;
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FuncprocModifiersContext funcprocModifiers() {
			return GetRuleContext<FuncprocModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VodefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodefine; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodefine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodefine(this);
		}
	}

	[RuleVersion(0)]
	public VodefineContext vodefine() {
		VodefineContext _localctx = new VodefineContext(_ctx, State);
		EnterRule(_localctx, 52, RULE_vodefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 760;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ASYNC - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 759; _localctx.Modifiers = funcprocModifiers();
				}
			}

			State = 762; _localctx.D = Match(DEFINE);
			State = 763; _localctx.Id = identifier();
			State = 764; _localctx.Op = assignoperator();
			State = 765; _localctx.Expr = expression(0);
			State = 768;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 766; Match(AS);
				State = 767; _localctx.DataType = datatype();
				}
			}

			State = 770; _localctx.end = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken V;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public IToken Alignment;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] VOSTRUCT() { return GetTokens(XSharpParser.VOSTRUCT); }
		public ITerminalNode VOSTRUCT(int i) {
			return GetToken(XSharpParser.VOSTRUCT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VostructContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostruct; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostruct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostruct(this);
		}
	}

	[RuleVersion(0)]
	public VostructContext vostruct() {
		VostructContext _localctx = new VostructContext(_ctx, State);
		EnterRule(_localctx, 54, RULE_vostruct);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 773;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 772; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 775; _localctx.V = Match(VOSTRUCT);
			State = 777;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				State = 776; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 779; _localctx.Id = identifier();
			State = 782;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ALIGN) {
				{
				State = 780; Match(ALIGN);
				State = 781; _localctx.Alignment = Match(INT_CONST);
				}
			}

			State = 784; _localctx.e = eos();
			State = 786;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 785; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 788;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,76,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 793;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				State = 790; Match(END);
				State = 791; Match(VOSTRUCT);
				State = 792; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VostructmemberContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public IToken As;
		public DatatypeContext DataType;
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public VostructmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vostructmember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVostructmember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVostructmember(this);
		}
	}

	[RuleVersion(0)]
	public VostructmemberContext vostructmember() {
		VostructmemberContext _localctx = new VostructmemberContext(_ctx, State);
		EnterRule(_localctx, 56, RULE_vostructmember);
		int _la;
		try {
			State = 815;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,80,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 795; Match(MEMBER);
				State = 796; _localctx.Dim = Match(DIM);
				State = 797; _localctx.Id = identifier();
				State = 798; Match(LBRKT);
				State = 799; _localctx.ArraySub = arraysub();
				State = 800; Match(RBRKT);
				State = 803;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 801;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 802; _localctx.DataType = datatype();
					}
				}

				State = 805; eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 807; Match(MEMBER);
				State = 808; _localctx.Id = identifier();
				State = 811;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 809;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 810; _localctx.DataType = datatype();
					}
				}

				State = 813; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VounionContext : XSharpParserRuleContext {
		public VotypeModifiersContext Modifiers;
		public IToken U;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public EosContext e;
		public VostructmemberContext _vostructmember;
		public IList<VostructmemberContext> _Members = new List<VostructmemberContext>();
		public IToken End;
		public ITerminalNode[] UNION() { return GetTokens(XSharpParser.UNION); }
		public ITerminalNode UNION(int i) {
			return GetToken(XSharpParser.UNION, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public VotypeModifiersContext votypeModifiers() {
			return GetRuleContext<VotypeModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public VostructmemberContext[] vostructmember() {
			return GetRuleContexts<VostructmemberContext>();
		}
		public VostructmemberContext vostructmember(int i) {
			return GetRuleContext<VostructmemberContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public VounionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vounion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVounion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVounion(this);
		}
	}

	[RuleVersion(0)]
	public VounionContext vounion() {
		VounionContext _localctx = new VounionContext(_ctx, State);
		EnterRule(_localctx, 58, RULE_vounion);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 818;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) {
				{
				State = 817; _localctx.Modifiers = votypeModifiers();
				}
			}

			State = 820; _localctx.U = Match(UNION);
			State = 822;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,82,_ctx) ) {
			case 1:
				{
				State = 821; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 824; _localctx.Id = identifier();
			State = 825; _localctx.e = eos();
			State = 827;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 826; _localctx._vostructmember = vostructmember();
					_localctx._Members.Add(_localctx._vostructmember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 829;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,83,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 834;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,84,_ctx) ) {
			case 1:
				{
				State = 831; Match(END);
				State = 832; Match(UNION);
				State = 833; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VotypeModifiersContext : XSharpParserRuleContext {
		public IToken _INTERNAL;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _UNSAFE;
		public IToken _STATIC;
		public IToken _tset1511;
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public VotypeModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_votypeModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVotypeModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVotypeModifiers(this);
		}
	}

	[RuleVersion(0)]
	public VotypeModifiersContext votypeModifiers() {
		VotypeModifiersContext _localctx = new VotypeModifiersContext(_ctx, State);
		EnterRule(_localctx, 60, RULE_votypeModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 837;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 836;
				_localctx._tset1511 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE) ) {
					_localctx._tset1511 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1511);
				}
				}
				State = 839;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_Context : XSharpParserRuleContext {
		public NameContext Name;
		public EosContext e;
		public EntityContext _entity;
		public IList<EntityContext> _Entities = new List<EntityContext>();
		public IToken End;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] NAMESPACE() { return GetTokens(XSharpParser.NAMESPACE); }
		public ITerminalNode NAMESPACE(int i) {
			return GetToken(XSharpParser.NAMESPACE, i);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public EntityContext[] entity() {
			return GetRuleContexts<EntityContext>();
		}
		public EntityContext entity(int i) {
			return GetRuleContext<EntityContext>(i);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Namespace_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamespace_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamespace_(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_Context namespace_() {
		Namespace_Context _localctx = new Namespace_Context(_ctx, State);
		EnterRule(_localctx, 62, RULE_namespace_);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 841; Match(BEGIN);
			State = 842; Match(NAMESPACE);
			State = 843; _localctx.Name = name(0);
			State = 844; _localctx.e = eos();
			State = 848;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 845; _localctx._entity = entity();
					_localctx._Entities.Add(_localctx._entity);
					}
					} 
				}
				State = 850;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,86,_ctx);
			}
			State = 854;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,87,_ctx) ) {
			case 1:
				{
				State = 851; Match(END);
				State = 852; Match(NAMESPACE);
				State = 853; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken I;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Parents = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] INTERFACE() { return GetTokens(XSharpParser.INTERFACE); }
		public ITerminalNode INTERFACE(int i) {
			return GetToken(XSharpParser.INTERFACE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public Interface_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInterface_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInterface_(this);
		}
	}

	[RuleVersion(0)]
	public Interface_Context interface_() {
		Interface_Context _localctx = new Interface_Context(_ctx, State);
		EnterRule(_localctx, 64, RULE_interface_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 857;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 856; _localctx.Attributes = attributes();
				}
			}

			State = 860;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 859; _localctx.Modifiers = classModifiers();
				}
			}

			State = 862; _localctx.I = Match(INTERFACE);
			State = 864;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,90,_ctx) ) {
			case 1:
				{
				State = 863; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 866; _localctx.Id = identifier();
			State = 868;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 867; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 872;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT || _la==COLON) {
				{
				State = 870;
				_la = _input.La(1);
				if ( !(_la==INHERIT || _la==COLON) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 871; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
			}

			State = 878;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 874; Match(COMMA);
				State = 875; _localctx._datatype = datatype();
				_localctx._Parents.Add(_localctx._datatype);
				}
				}
				State = 880;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 884;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 881; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 886;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 887; _localctx.e = eos();
			State = 891;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 888; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 893;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,95,_ctx);
			}
			State = 894; Match(END);
			State = 895; Match(INTERFACE);
			State = 896; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Class_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClass_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClass_(this);
		}
	}

	[RuleVersion(0)]
	public Class_Context class_() {
		Class_Context _localctx = new Class_Context(_ctx, State);
		EnterRule(_localctx, 66, RULE_class_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 899;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 898; _localctx.Attributes = attributes();
				}
			}

			State = 902;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 901; _localctx.Modifiers = classModifiers();
				}
			}

			State = 904; _localctx.C = Match(CLASS);
			State = 906;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,98,_ctx) ) {
			case 1:
				{
				State = 905; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 908; _localctx.Id = identifier();
			State = 910;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 909; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 914;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==INHERIT) {
				{
				State = 912; Match(INHERIT);
				State = 913; _localctx.BaseType = datatype();
				}
			}

			State = 925;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 916; Match(IMPLEMENTS);
				State = 917; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 922;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 918; Match(COMMA);
					State = 919; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 924;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 930;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 927; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 932;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 933; _localctx.e = eos();
			State = 937;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 934; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 939;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,104,_ctx);
			}
			State = 940; Match(END);
			State = 941; Match(CLASS);
			State = 942; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _ABSTRACT;
		public IToken _SEALED;
		public IToken _STATIC;
		public IToken _UNSAFE;
		public IToken _PARTIAL;
		public IToken _tset1780;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] PARTIAL() { return GetTokens(XSharpParser.PARTIAL); }
		public ITerminalNode PARTIAL(int i) {
			return GetToken(XSharpParser.PARTIAL, i);
		}
		public ClassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassModifiersContext classModifiers() {
		ClassModifiersContext _localctx = new ClassModifiersContext(_ctx, State);
		EnterRule(_localctx, 68, RULE_classModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 944;
				_localctx._tset1780 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset1780 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset1780);
				}
				}
				State = 947;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparametersContext : XSharpParserRuleContext {
		public TypeparameterContext _typeparameter;
		public IList<TypeparameterContext> _TypeParams = new List<TypeparameterContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public TypeparameterContext[] typeparameter() {
			return GetRuleContexts<TypeparameterContext>();
		}
		public TypeparameterContext typeparameter(int i) {
			return GetRuleContext<TypeparameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public TypeparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameters(this);
		}
	}

	[RuleVersion(0)]
	public TypeparametersContext typeparameters() {
		TypeparametersContext _localctx = new TypeparametersContext(_ctx, State);
		EnterRule(_localctx, 70, RULE_typeparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 949; Match(LT);
			State = 950; _localctx._typeparameter = typeparameter();
			_localctx._TypeParams.Add(_localctx._typeparameter);
			State = 958;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 951; Match(COMMA);
				State = 953;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,106,_ctx) ) {
				case 1:
					{
					State = 952; attributes();
					}
					break;
				}
				State = 955; _localctx._typeparameter = typeparameter();
				_localctx._TypeParams.Add(_localctx._typeparameter);
				}
				}
				State = 960;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 961; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken VarianceKeyword;
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public TypeparameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterContext typeparameter() {
		TypeparameterContext _localctx = new TypeparameterContext(_ctx, State);
		EnterRule(_localctx, 72, RULE_typeparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 964;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,108,_ctx) ) {
			case 1:
				{
				State = 963; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 967;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,109,_ctx) ) {
			case 1:
				{
				State = 966;
				_localctx.VarianceKeyword = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==IN || _la==OUT) ) {
					_localctx.VarianceKeyword = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			State = 969; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintsclauseContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public TypeparameterconstraintContext _typeparameterconstraint;
		public IList<TypeparameterconstraintContext> _Constraints = new List<TypeparameterconstraintContext>();
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public TypeparameterconstraintContext[] typeparameterconstraint() {
			return GetRuleContexts<TypeparameterconstraintContext>();
		}
		public TypeparameterconstraintContext typeparameterconstraint(int i) {
			return GetRuleContext<TypeparameterconstraintContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TypeparameterconstraintsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraintsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeparameterconstraintsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeparameterconstraintsclause(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintsclauseContext typeparameterconstraintsclause() {
		TypeparameterconstraintsclauseContext _localctx = new TypeparameterconstraintsclauseContext(_ctx, State);
		EnterRule(_localctx, 74, RULE_typeparameterconstraintsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 971; Match(WHERE);
			State = 972; _localctx.Name = identifierName();
			State = 973; Match(IS);
			State = 974; _localctx._typeparameterconstraint = typeparameterconstraint();
			_localctx._Constraints.Add(_localctx._typeparameterconstraint);
			State = 979;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 975; Match(COMMA);
				State = 976; _localctx._typeparameterconstraint = typeparameterconstraint();
				_localctx._Constraints.Add(_localctx._typeparameterconstraint);
				}
				}
				State = 981;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeparameterconstraintContext : XSharpParserRuleContext {
		public TypeparameterconstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeparameterconstraint; } }
	 
		public TypeparameterconstraintContext() { }
		public virtual void CopyFrom(TypeparameterconstraintContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassOrStructConstraintContext : TypeparameterconstraintContext {
		public IToken Key;
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ClassOrStructConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassOrStructConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassOrStructConstraint(this);
		}
	}
	public partial class ConstructorConstraintContext : TypeparameterconstraintContext {
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ConstructorConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}
	public partial class TypeConstraintContext : TypeparameterconstraintContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeConstraintContext(TypeparameterconstraintContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeConstraint(this);
		}
	}

	[RuleVersion(0)]
	public TypeparameterconstraintContext typeparameterconstraint() {
		TypeparameterconstraintContext _localctx = new TypeparameterconstraintContext(_ctx, State);
		EnterRule(_localctx, 76, RULE_typeparameterconstraint);
		int _la;
		try {
			State = 987;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,111,_ctx) ) {
			case 1:
				_localctx = new ClassOrStructConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 982;
				((ClassOrStructConstraintContext)_localctx).Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STRUCTURE) ) {
					((ClassOrStructConstraintContext)_localctx).Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;

			case 2:
				_localctx = new TypeConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 983; ((TypeConstraintContext)_localctx).Type = typeName();
				}
				break;

			case 3:
				_localctx = new ConstructorConstraintContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 984; Match(NEW);
				State = 985; Match(LPAREN);
				State = 986; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Structure_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken S;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public ClassmemberContext _classmember;
		public IList<ClassmemberContext> _Members = new List<ClassmemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] STRUCTURE() { return GetTokens(XSharpParser.STRUCTURE); }
		public ITerminalNode STRUCTURE(int i) {
			return GetToken(XSharpParser.STRUCTURE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public ClassmemberContext[] classmember() {
			return GetRuleContexts<ClassmemberContext>();
		}
		public ClassmemberContext classmember(int i) {
			return GetRuleContext<ClassmemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public Structure_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structure_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStructure_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStructure_(this);
		}
	}

	[RuleVersion(0)]
	public Structure_Context structure_() {
		Structure_Context _localctx = new Structure_Context(_ctx, State);
		EnterRule(_localctx, 78, RULE_structure_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 990;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 989; _localctx.Attributes = attributes();
				}
			}

			State = 993;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 992; _localctx.Modifiers = classModifiers();
				}
			}

			State = 995; _localctx.S = Match(STRUCTURE);
			State = 997;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				State = 996; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 999; _localctx.Id = identifier();
			State = 1001;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1000; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1012;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 1003; Match(IMPLEMENTS);
				State = 1004; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 1009;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1005; Match(COMMA);
					State = 1006; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 1011;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 1017;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1014; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1019;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1020; _localctx.e = eos();
			State = 1024;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1021; _localctx._classmember = classmember();
					_localctx._Members.Add(_localctx._classmember);
					}
					} 
				}
				State = 1026;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,119,_ctx);
			}
			State = 1027; Match(END);
			State = 1028; Match(STRUCTURE);
			State = 1029; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken D;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public CallingconventionContext CallingConvention;
		public IToken e;
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public Delegate_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegate_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegate_(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_Context delegate_() {
		Delegate_Context _localctx = new Delegate_Context(_ctx, State);
		EnterRule(_localctx, 80, RULE_delegate_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1031; _localctx.Attributes = attributes();
				}
			}

			State = 1035;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1034; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1037; _localctx.D = Match(DELEGATE);
			State = 1039;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				State = 1038; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1041; _localctx.Id = identifier();
			State = 1043;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 1042; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 1046;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1045; _localctx.ParamList = parameterList();
				}
			}

			State = 1050;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1048; Match(AS);
				State = 1049; _localctx.Type = datatype();
				}
			}

			State = 1055;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 1052; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 1057;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1059;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1058; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1061; _localctx.e = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassModifiersContext Modifiers;
		public IToken E;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public EosContext e;
		public EnummemberContext _enummember;
		public IList<EnummemberContext> _Members = new List<EnummemberContext>();
		public IToken End;
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] ENUM() { return GetTokens(XSharpParser.ENUM); }
		public ITerminalNode ENUM(int i) {
			return GetToken(XSharpParser.ENUM, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EnummemberContext[] enummember() {
			return GetRuleContexts<EnummemberContext>();
		}
		public EnummemberContext enummember(int i) {
			return GetRuleContext<EnummemberContext>(i);
		}
		public Enum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnum_(this);
		}
	}

	[RuleVersion(0)]
	public Enum_Context enum_() {
		Enum_Context _localctx = new Enum_Context(_ctx, State);
		EnterRule(_localctx, 82, RULE_enum_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1064;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1063; _localctx.Attributes = attributes();
				}
			}

			State = 1067;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1066; _localctx.Modifiers = classModifiers();
				}
			}

			State = 1069; _localctx.E = Match(ENUM);
			State = 1071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,130,_ctx) ) {
			case 1:
				{
				State = 1070; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 1073; _localctx.Id = identifier();
			State = 1076;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==INHERIT) {
				{
				State = 1074;
				_la = _input.La(1);
				if ( !(_la==AS || _la==INHERIT) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1075; _localctx.Type = datatype();
				}
			}

			State = 1078; _localctx.e = eos();
			State = 1080;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1079; _localctx._enummember = enummember();
					_localctx._Members.Add(_localctx._enummember);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1082;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,132,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 1084; Match(END);
			State = 1086;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ENUM) {
				{
				State = 1085; Match(ENUM);
				}
			}

			State = 1088; _localctx.End = Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnummemberContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnummemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enummember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEnummember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEnummember(this);
		}
	}

	[RuleVersion(0)]
	public EnummemberContext enummember() {
		EnummemberContext _localctx = new EnummemberContext(_ctx, State);
		EnterRule(_localctx, 84, RULE_enummember);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1091;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,134,_ctx) ) {
			case 1:
				{
				State = 1090; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1094;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,135,_ctx) ) {
			case 1:
				{
				State = 1093; Match(MEMBER);
				}
				break;
			}
			State = 1096; _localctx.Id = identifier();
			State = 1100;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1097; _localctx.Op = assignoperator();
				State = 1098; _localctx.Expr = expression(0);
				}
			}

			State = 1102; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken E;
		public NameDotContext ExplicitIface;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken end;
		public EventLineAccessorContext _eventLineAccessor;
		public IList<EventLineAccessorContext> _LineAccessors = new List<EventLineAccessorContext>();
		public EosContext Multi;
		public EventAccessorContext _eventAccessor;
		public IList<EventAccessorContext> _Accessors = new List<EventAccessorContext>();
		public ITerminalNode[] EVENT() { return GetTokens(XSharpParser.EVENT); }
		public ITerminalNode EVENT(int i) {
			return GetToken(XSharpParser.EVENT, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EventLineAccessorContext[] eventLineAccessor() {
			return GetRuleContexts<EventLineAccessorContext>();
		}
		public EventLineAccessorContext eventLineAccessor(int i) {
			return GetRuleContext<EventLineAccessorContext>(i);
		}
		public EventAccessorContext[] eventAccessor() {
			return GetRuleContexts<EventAccessorContext>();
		}
		public EventAccessorContext eventAccessor(int i) {
			return GetRuleContext<EventAccessorContext>(i);
		}
		public Event_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEvent_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEvent_(this);
		}
	}

	[RuleVersion(0)]
	public Event_Context event_() {
		Event_Context _localctx = new Event_Context(_ctx, State);
		EnterRule(_localctx, 86, RULE_event_);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1104; _localctx.Attributes = attributes();
				}
			}

			State = 1108;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1107; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1110; _localctx.E = Match(EVENT);
			State = 1112;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				State = 1111; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1114; _localctx.Id = identifier();
			State = 1117;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,140,_ctx) ) {
			case 1:
				{
				State = 1115; Match(AS);
				State = 1116; _localctx.Type = datatype();
				}
				break;
			}
			State = 1139;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,144,_ctx) ) {
			case 1:
				{
				State = 1119; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1121;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1120; _localctx._eventLineAccessor = eventLineAccessor();
						_localctx._LineAccessors.Add(_localctx._eventLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1123;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,141,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1125; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1127; _localctx.Multi = eos();
				State = 1129;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1128; _localctx._eventAccessor = eventAccessor();
					_localctx._Accessors.Add(_localctx._eventAccessor);
					}
					}
					State = 1131;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (ADD - 97)) | (1L << (REMOVE - 97)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1133; Match(END);
				State = 1135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EVENT) {
					{
					State = 1134; Match(EVENT);
					}
				}

				State = 1137; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionListContext ExprList;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public EventLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventLineAccessorContext eventLineAccessor() {
		EventLineAccessorContext _localctx = new EventLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 88, RULE_eventLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,145,_ctx) ) {
			case 1:
				{
				State = 1141; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1145;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				State = 1144; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,149,_ctx) ) {
			case 1:
				{
				State = 1147;
				if (!(InputStream.La(2) != REMOVE)) throw new FailedPredicateException(this, "InputStream.La(2) != REMOVE");
				State = 1148; _localctx.Key = Match(ADD);
				State = 1150;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,147,_ctx) ) {
				case 1:
					{
					State = 1149; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1152;
				if (!(InputStream.La(2) != ADD)) throw new FailedPredicateException(this, "InputStream.La(2) != ADD");
				State = 1153; _localctx.Key = Match(REMOVE);
				State = 1155;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,148,_ctx) ) {
				case 1:
					{
					State = 1154; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1157;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ADD || _la==REMOVE) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] ADD() { return GetTokens(XSharpParser.ADD); }
		public ITerminalNode ADD(int i) {
			return GetToken(XSharpParser.ADD, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode[] REMOVE() { return GetTokens(XSharpParser.REMOVE); }
		public ITerminalNode REMOVE(int i) {
			return GetToken(XSharpParser.REMOVE, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public EventAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterEventAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitEventAccessor(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorContext eventAccessor() {
		EventAccessorContext _localctx = new EventAccessorContext(_ctx, State);
		EnterRule(_localctx, 90, RULE_eventAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1161;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1160; _localctx.Attributes = attributes();
				}
			}

			State = 1164;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1163; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,154,_ctx) ) {
			case 1:
				{
				State = 1166; _localctx.Key = Match(ADD);
				State = 1167; _localctx.end = eos();
				State = 1168; _localctx.StmtBlk = statementBlock();
				State = 1169; Match(END);
				State = 1171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ADD) {
					{
					State = 1170; Match(ADD);
					}
				}

				}
				break;

			case 2:
				{
				State = 1173; _localctx.Key = Match(ADD);
				State = 1174; Match(UDCSEP);
				State = 1175; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1176; _localctx.Key = Match(REMOVE);
				State = 1177; _localctx.end = eos();
				State = 1178; _localctx.StmtBlk = statementBlock();
				State = 1179; Match(END);
				State = 1181;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==REMOVE) {
					{
					State = 1180; Match(REMOVE);
					}
				}

				}
				break;

			case 4:
				{
				State = 1183; _localctx.Key = Match(REMOVE);
				State = 1184; Match(UDCSEP);
				State = 1185; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1188; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public ClassvarContext _classvar;
		public IList<ClassvarContext> _Vars = new List<ClassvarContext>();
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ClassvarContext[] classvar() {
			return GetRuleContexts<ClassvarContext>();
		}
		public ClassvarContext classvar(int i) {
			return GetRuleContext<ClassvarContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvars(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarsContext classvars() {
		ClassvarsContext _localctx = new ClassvarsContext(_ctx, State);
		EnterRule(_localctx, 92, RULE_classvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1191;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1190; _localctx.Attributes = attributes();
				}
			}

			State = 1193; _localctx.Modifiers = classvarModifiers();
			State = 1194; _localctx._classvar = classvar();
			_localctx._Vars.Add(_localctx._classvar);
			State = 1199;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1195; Match(COMMA);
				State = 1196; _localctx._classvar = classvar();
				_localctx._Vars.Add(_localctx._classvar);
				}
				}
				State = 1201;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1202; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarModifiersContext : XSharpParserRuleContext {
		public IToken _INSTANCE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _CONST;
		public IToken _INITONLY;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _VOLATILE;
		public IToken _UNSAFE;
		public IToken _FIXED;
		public IToken _NEW;
		public IToken _tset2492;
		public ITerminalNode[] INSTANCE() { return GetTokens(XSharpParser.INSTANCE); }
		public ITerminalNode INSTANCE(int i) {
			return GetToken(XSharpParser.INSTANCE, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] CONST() { return GetTokens(XSharpParser.CONST); }
		public ITerminalNode CONST(int i) {
			return GetToken(XSharpParser.CONST, i);
		}
		public ITerminalNode[] INITONLY() { return GetTokens(XSharpParser.INITONLY); }
		public ITerminalNode INITONLY(int i) {
			return GetToken(XSharpParser.INITONLY, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] VOLATILE() { return GetTokens(XSharpParser.VOLATILE); }
		public ITerminalNode VOLATILE(int i) {
			return GetToken(XSharpParser.VOLATILE, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ClassvarModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvarModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvarModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvarModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarModifiersContext classvarModifiers() {
		ClassvarModifiersContext _localctx = new ClassvarModifiersContext(_ctx, State);
		EnterRule(_localctx, 94, RULE_classvarModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1204;
					_localctx._tset2492 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (INSTANCE - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (CONST - 28)))) != 0) || ((((_la - 95)) & ~0x3f) == 0 && ((1L << (_la - 95)) & ((1L << (INITONLY - 95)) | (1L << (INTERNAL - 95)) | (1L << (NEW - 95)) | (1L << (FIXED - 95)) | (1L << (UNSAFE - 95)) | (1L << (VOLATILE - 95)))) != 0)) ) {
						_localctx._tset2492 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2492);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1207;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,157,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassvarContext : XSharpParserRuleContext {
		public IToken Dim;
		public IdentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken As;
		public DatatypeContext DataType;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ClassvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClassvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClassvar(this);
		}
	}

	[RuleVersion(0)]
	public ClassvarContext classvar() {
		ClassvarContext _localctx = new ClassvarContext(_ctx, State);
		EnterRule(_localctx, 96, RULE_classvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				State = 1209; _localctx.Dim = Match(DIM);
				}
				break;
			}
			State = 1212; _localctx.Id = identifier();
			State = 1217;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 1213; Match(LBRKT);
				State = 1214; _localctx.ArraySub = arraysub();
				State = 1215; Match(RBRKT);
				}
			}

			State = 1222;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 1219; _localctx.Op = assignoperator();
				State = 1220; _localctx.Initializer = expression(0);
				}
			}

			State = 1226;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS || _la==IS) {
				{
				State = 1224;
				_localctx.As = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==AS || _la==IS) ) {
					_localctx.As = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1225; _localctx.DataType = datatype();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArraysubContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ArrayIndex = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] RBRKT() { return GetTokens(XSharpParser.RBRKT); }
		public ITerminalNode RBRKT(int i) {
			return GetToken(XSharpParser.RBRKT, i);
		}
		public ITerminalNode[] LBRKT() { return GetTokens(XSharpParser.LBRKT); }
		public ITerminalNode LBRKT(int i) {
			return GetToken(XSharpParser.LBRKT, i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArraysubContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arraysub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArraysub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArraysub(this);
		}
	}

	[RuleVersion(0)]
	public ArraysubContext arraysub() {
		ArraysubContext _localctx = new ArraysubContext(_ctx, State);
		EnterRule(_localctx, 98, RULE_arraysub);
		int _la;
		try {
			int _alt;
			State = 1244;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,164,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1228; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1232;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1229; Match(RBRKT);
						State = 1230; Match(LBRKT);
						State = 1231; _localctx._expression = expression(0);
						_localctx._ArrayIndex.Add(_localctx._expression);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1234;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,162,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1236; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				State = 1239;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1237; Match(COMMA);
					State = 1238; _localctx._expression = expression(0);
					_localctx._ArrayIndex.Add(_localctx._expression);
					}
					}
					State = 1241;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==COMMA );
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1243; _localctx._expression = expression(0);
				_localctx._ArrayIndex.Add(_localctx._expression);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public IToken P;
		public NameDotContext ExplicitIface;
		public IToken Self;
		public IdentifierContext Id;
		public PropertyParameterListContext ParamList;
		public DatatypeContext Type;
		public IToken Auto;
		public PropertyAutoAccessorContext _propertyAutoAccessor;
		public IList<PropertyAutoAccessorContext> _AutoAccessors = new List<PropertyAutoAccessorContext>();
		public AssignoperatorContext Op;
		public ExpressionContext Initializer;
		public IToken end;
		public PropertyLineAccessorContext _propertyLineAccessor;
		public IList<PropertyLineAccessorContext> _LineAccessors = new List<PropertyLineAccessorContext>();
		public EosContext Multi;
		public PropertyAccessorContext _propertyAccessor;
		public IList<PropertyAccessorContext> _Accessors = new List<PropertyAccessorContext>();
		public ITerminalNode[] PROPERTY() { return GetTokens(XSharpParser.PROPERTY); }
		public ITerminalNode PROPERTY(int i) {
			return GetToken(XSharpParser.PROPERTY, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public PropertyParameterListContext propertyParameterList() {
			return GetRuleContext<PropertyParameterListContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public PropertyAutoAccessorContext[] propertyAutoAccessor() {
			return GetRuleContexts<PropertyAutoAccessorContext>();
		}
		public PropertyAutoAccessorContext propertyAutoAccessor(int i) {
			return GetRuleContext<PropertyAutoAccessorContext>(i);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyLineAccessorContext[] propertyLineAccessor() {
			return GetRuleContexts<PropertyLineAccessorContext>();
		}
		public PropertyLineAccessorContext propertyLineAccessor(int i) {
			return GetRuleContext<PropertyLineAccessorContext>(i);
		}
		public PropertyAccessorContext[] propertyAccessor() {
			return GetRuleContexts<PropertyAccessorContext>();
		}
		public PropertyAccessorContext propertyAccessor(int i) {
			return GetRuleContext<PropertyAccessorContext>(i);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(_ctx, State);
		EnterRule(_localctx, 100, RULE_property);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1247;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1246; _localctx.Attributes = attributes();
				}
			}

			State = 1250;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 1249; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 1252; _localctx.P = Match(PROPERTY);
			State = 1254;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,167,_ctx) ) {
			case 1:
				{
				State = 1253; _localctx.ExplicitIface = nameDot(0);
				}
				break;
			}
			State = 1258;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				State = 1256; _localctx.Self = Match(SELF);
				}
				break;

			case 2:
				{
				State = 1257; _localctx.Id = identifier();
				}
				break;
			}
			State = 1261;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				State = 1260; _localctx.ParamList = propertyParameterList();
				}
				break;
			}
			State = 1265;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,170,_ctx) ) {
			case 1:
				{
				State = 1263; Match(AS);
				State = 1264; _localctx.Type = datatype();
				}
				break;
			}
			State = 1299;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,176,_ctx) ) {
			case 1:
				{
				State = 1267; _localctx.Auto = Match(AUTO);
				State = 1271;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
					{
					{
					State = 1268; _localctx._propertyAutoAccessor = propertyAutoAccessor();
					_localctx._AutoAccessors.Add(_localctx._propertyAutoAccessor);
					}
					}
					State = 1273;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1277;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 1274; _localctx.Op = assignoperator();
					State = 1275; _localctx.Initializer = expression(0);
					}
				}

				State = 1279; _localctx.end = Match(EOS);
				}
				break;

			case 2:
				{
				State = 1281;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1280; _localctx._propertyLineAccessor = propertyLineAccessor();
						_localctx._LineAccessors.Add(_localctx._propertyLineAccessor);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1283;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,173,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 1285; _localctx.end = Match(EOS);
				}
				break;

			case 3:
				{
				State = 1287; _localctx.Multi = eos();
				State = 1289;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1288; _localctx._propertyAccessor = propertyAccessor();
					_localctx._Accessors.Add(_localctx._propertyAccessor);
					}
					}
					State = 1291;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (INTERNAL - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST );
				State = 1293; Match(END);
				State = 1295;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==PROPERTY) {
					{
					State = 1294; Match(PROPERTY);
					}
				}

				State = 1297; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyParameterListContext : XSharpParserRuleContext {
		public IToken L;
		public ParameterContext _parameter;
		public IList<ParameterContext> _Params = new List<ParameterContext>();
		public IToken R;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public PropertyParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyParameterList(this);
		}
	}

	[RuleVersion(0)]
	public PropertyParameterListContext propertyParameterList() {
		PropertyParameterListContext _localctx = new PropertyParameterListContext(_ctx, State);
		EnterRule(_localctx, 102, RULE_propertyParameterList);
		int _la;
		try {
			State = 1325;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1301; _localctx.L = Match(LBRKT);
				State = 1310;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,178,_ctx) ) {
				case 1:
					{
					State = 1302; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1307;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1303; Match(COMMA);
						State = 1304; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1309;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1312; _localctx.R = Match(RBRKT);
				}
				break;
			case LPAREN:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1313; _localctx.L = Match(LPAREN);
				State = 1322;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,180,_ctx) ) {
				case 1:
					{
					State = 1314; _localctx._parameter = parameter();
					_localctx._Params.Add(_localctx._parameter);
					State = 1319;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1315; Match(COMMA);
						State = 1316; _localctx._parameter = parameter();
						_localctx._Params.Add(_localctx._parameter);
						}
						}
						State = 1321;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1324; _localctx.R = Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAutoAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public PropertyAutoAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAutoAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAutoAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAutoAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAutoAccessorContext propertyAutoAccessor() {
		PropertyAutoAccessorContext _localctx = new PropertyAutoAccessorContext(_ctx, State);
		EnterRule(_localctx, 104, RULE_propertyAutoAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1328;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1327; _localctx.Attributes = attributes();
				}
			}

			State = 1331;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1330; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1333;
			_localctx.Key = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
				_localctx.Key = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyLineAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public ExpressionContext Expr;
		public ExpressionListContext ExprList;
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public PropertyLineAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyLineAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyLineAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyLineAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyLineAccessorContext propertyLineAccessor() {
		PropertyLineAccessorContext _localctx = new PropertyLineAccessorContext(_ctx, State);
		EnterRule(_localctx, 106, RULE_propertyLineAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1336;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,184,_ctx) ) {
			case 1:
				{
				State = 1335; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 1339;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,185,_ctx) ) {
			case 1:
				{
				State = 1338; _localctx.Modifiers = accessorModifiers();
				}
				break;
			}
			State = 1352;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,188,_ctx) ) {
			case 1:
				{
				State = 1341;
				if (!(InputStream.La(2) != SET && InputStream.La(2) != INIT)) throw new FailedPredicateException(this, "InputStream.La(2) != SET && InputStream.La(2) != INIT");
				State = 1342;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==GET || _la==UDCSEP) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1344;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,186,_ctx) ) {
				case 1:
					{
					State = 1343; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				{
				State = 1346;
				if (!(InputStream.La(2) != GET && InputStream.La(2) != UDCSEP)) throw new FailedPredicateException(this, "InputStream.La(2) != GET && InputStream.La(2) != UDCSEP");
				State = 1347;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1349;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,187,_ctx) ) {
				case 1:
					{
					State = 1348; _localctx.ExprList = expressionList();
					}
					break;
				}
				}
				break;

			case 3:
				{
				State = 1351;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (GET - 91)) | (1L << (SET - 91)) | (1L << (INIT - 91)))) != 0)) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifiersContext : XSharpParserRuleContext {
		public IToken _PRIVATE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _tset2944;
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public AccessorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifiersContext accessorModifiers() {
		AccessorModifiersContext _localctx = new AccessorModifiersContext(_ctx, State);
		EnterRule(_localctx, 108, RULE_accessorModifiers);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1355;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1354;
					_localctx._tset2944 = _input.Lt(1);
					_la = _input.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) ) {
						_localctx._tset2944 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					_localctx._Tokens.Add(_localctx._tset2944);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1357;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,189,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(_ctx, State);
		EnterRule(_localctx, 110, RULE_expressionList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1359; _localctx._expression = expression(0);
			_localctx._Exprs.Add(_localctx._expression);
			State = 1364;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,190,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1360; Match(COMMA);
					State = 1361; _localctx._expression = expression(0);
					_localctx._Exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 1366;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,190,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyAccessorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public AccessorModifiersContext Modifiers;
		public IToken Key;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken Key2;
		public ExpressionContext ExpressionBody;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] GET() { return GetTokens(XSharpParser.GET); }
		public ITerminalNode GET(int i) {
			return GetToken(XSharpParser.GET, i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifiersContext accessorModifiers() {
			return GetRuleContext<AccessorModifiersContext>(0);
		}
		public ITerminalNode[] SET() { return GetTokens(XSharpParser.SET); }
		public ITerminalNode SET(int i) {
			return GetToken(XSharpParser.SET, i);
		}
		public ITerminalNode[] INIT() { return GetTokens(XSharpParser.INIT); }
		public ITerminalNode INIT(int i) {
			return GetToken(XSharpParser.INIT, i);
		}
		public PropertyAccessorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyAccessor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAccessor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAccessor(this);
		}
	}

	[RuleVersion(0)]
	public PropertyAccessorContext propertyAccessor() {
		PropertyAccessorContext _localctx = new PropertyAccessorContext(_ctx, State);
		EnterRule(_localctx, 112, RULE_propertyAccessor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1368;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1367; _localctx.Attributes = attributes();
				}
			}

			State = 1371;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC))) != 0) || _la==INTERNAL) {
				{
				State = 1370; _localctx.Modifiers = accessorModifiers();
				}
			}

			State = 1393;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,195,_ctx) ) {
			case 1:
				{
				State = 1373; _localctx.Key = Match(GET);
				State = 1374; _localctx.end = eos();
				State = 1375; _localctx.StmtBlk = statementBlock();
				State = 1376; Match(END);
				State = 1378;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==GET) {
					{
					State = 1377; _localctx.Key2 = Match(GET);
					}
				}

				}
				break;

			case 2:
				{
				State = 1380; _localctx.Key = Match(GET);
				State = 1381; Match(UDCSEP);
				State = 1382; _localctx.ExpressionBody = expression(0);
				}
				break;

			case 3:
				{
				State = 1383;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1384; _localctx.end = eos();
				State = 1385; _localctx.StmtBlk = statementBlock();
				State = 1386; Match(END);
				State = 1388;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SET || _la==INIT) {
					{
					State = 1387;
					_localctx.Key2 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==SET || _la==INIT) ) {
						_localctx.Key2 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				}
				break;

			case 4:
				{
				State = 1390;
				_localctx.Key = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==SET || _la==INIT) ) {
					_localctx.Key = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1391; Match(UDCSEP);
				State = 1392; _localctx.ExpressionBody = expression(0);
				}
				break;
			}
			State = 1395; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassmemberContext : XSharpParserRuleContext {
		public ClassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classmember; } }
	 
		public ClassmemberContext() { }
		public virtual void CopyFrom(ClassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NestedClassContext : ClassmemberContext {
		public Class_Context Member;
		public Class_Context class_() {
			return GetRuleContext<Class_Context>(0);
		}
		public NestedClassContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedClass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedClass(this);
		}
	}
	public partial class NestedStructureContext : ClassmemberContext {
		public Structure_Context Member;
		public Structure_Context structure_() {
			return GetRuleContext<Structure_Context>(0);
		}
		public NestedStructureContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedStructure(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedStructure(this);
		}
	}
	public partial class NestedEventContext : ClassmemberContext {
		public Event_Context Member;
		public Event_Context event_() {
			return GetRuleContext<Event_Context>(0);
		}
		public NestedEventContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEvent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEvent(this);
		}
	}
	public partial class ClsmethodContext : ClassmemberContext {
		public MethodContext Member;
		public MethodContext method() {
			return GetRuleContext<MethodContext>(0);
		}
		public ClsmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsmethod(this);
		}
	}
	public partial class ClsdtorContext : ClassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public ClsdtorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdtor(this);
		}
	}
	public partial class ClspropertyContext : ClassmemberContext {
		public PropertyContext Member;
		public PropertyContext property() {
			return GetRuleContext<PropertyContext>(0);
		}
		public ClspropertyContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsproperty(this);
		}
	}
	public partial class ClseosContext : ClassmemberContext {
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClseosContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClseos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClseos(this);
		}
	}
	public partial class ClsctorContext : ClassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public ClsctorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsctor(this);
		}
	}
	public partial class ClsvarsContext : ClassmemberContext {
		public ClassvarsContext Member;
		public ClassvarsContext classvars() {
			return GetRuleContext<ClassvarsContext>(0);
		}
		public ClsvarsContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvars(this);
		}
	}
	public partial class NestedDelegateContext : ClassmemberContext {
		public Delegate_Context Member;
		public Delegate_Context delegate_() {
			return GetRuleContext<Delegate_Context>(0);
		}
		public NestedDelegateContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedDelegate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedDelegate(this);
		}
	}
	public partial class NestedInterfaceContext : ClassmemberContext {
		public Interface_Context Member;
		public Interface_Context interface_() {
			return GetRuleContext<Interface_Context>(0);
		}
		public NestedInterfaceContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedInterface(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedInterface(this);
		}
	}
	public partial class ClsoperatorContext : ClassmemberContext {
		public Operator_Context Member;
		public Operator_Context operator_() {
			return GetRuleContext<Operator_Context>(0);
		}
		public ClsoperatorContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsoperator(this);
		}
	}
	public partial class ClsdeclareContext : ClassmemberContext {
		public VodeclareContext decl;
		public VodeclareContext vodeclare() {
			return GetRuleContext<VodeclareContext>(0);
		}
		public ClsdeclareContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsdeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsdeclare(this);
		}
	}
	public partial class NestedEnumContext : ClassmemberContext {
		public Enum_Context Member;
		public Enum_Context enum_() {
			return GetRuleContext<Enum_Context>(0);
		}
		public NestedEnumContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNestedEnum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNestedEnum(this);
		}
	}
	public partial class ClsvodllmethodContext : ClassmemberContext {
		public VodllmethodContext Member;
		public VodllmethodContext vodllmethod() {
			return GetRuleContext<VodllmethodContext>(0);
		}
		public ClsvodllmethodContext(ClassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterClsvodllmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitClsvodllmethod(this);
		}
	}

	[RuleVersion(0)]
	public ClassmemberContext classmember() {
		ClassmemberContext _localctx = new ClassmemberContext(_ctx, State);
		EnterRule(_localctx, 114, RULE_classmember);
		try {
			State = 1413;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,196,_ctx) ) {
			case 1:
				_localctx = new ClsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1397; ((ClsmethodContext)_localctx).Member = method();
				}
				break;

			case 2:
				_localctx = new ClsdeclareContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1398; ((ClsdeclareContext)_localctx).decl = vodeclare();
				}
				break;

			case 3:
				_localctx = new ClsctorContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1399; ((ClsctorContext)_localctx).Member = constructor();
				}
				break;

			case 4:
				_localctx = new ClsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1400; ((ClsdtorContext)_localctx).Member = destructor();
				}
				break;

			case 5:
				_localctx = new ClsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1401; ((ClsvarsContext)_localctx).Member = classvars();
				}
				break;

			case 6:
				_localctx = new ClspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1402; ((ClspropertyContext)_localctx).Member = property();
				}
				break;

			case 7:
				_localctx = new ClsoperatorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1403; ((ClsoperatorContext)_localctx).Member = operator_();
				}
				break;

			case 8:
				_localctx = new NestedStructureContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1404; ((NestedStructureContext)_localctx).Member = structure_();
				}
				break;

			case 9:
				_localctx = new NestedClassContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1405; ((NestedClassContext)_localctx).Member = class_();
				}
				break;

			case 10:
				_localctx = new NestedDelegateContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1406; ((NestedDelegateContext)_localctx).Member = delegate_();
				}
				break;

			case 11:
				_localctx = new NestedEnumContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1407; ((NestedEnumContext)_localctx).Member = enum_();
				}
				break;

			case 12:
				_localctx = new NestedEventContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1408; ((NestedEventContext)_localctx).Member = event_();
				}
				break;

			case 13:
				_localctx = new NestedInterfaceContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1409; ((NestedInterfaceContext)_localctx).Member = interface_();
				}
				break;

			case 14:
				_localctx = new ClsvodllmethodContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1410;
				if (!(IsVO)) throw new FailedPredicateException(this, "IsVO");
				State = 1411; ((ClsvodllmethodContext)_localctx).Member = vodllmethod();
				}
				break;

			case 15:
				_localctx = new ClseosContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1412; eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ConstructorModifiersContext Modifiers;
		public IToken c1;
		public ParameterListContext ParamList;
		public CallingconventionContext CallingConvention;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public ConstructorchainContext Chain;
		public StatementBlockContext StmtBlk;
		public IToken c2;
		public IToken End;
		public ITerminalNode[] CONSTRUCTOR() { return GetTokens(XSharpParser.CONSTRUCTOR); }
		public ITerminalNode CONSTRUCTOR(int i) {
			return GetToken(XSharpParser.CONSTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ConstructorModifiersContext constructorModifiers() {
			return GetRuleContext<ConstructorModifiersContext>(0);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public CallingconventionContext callingconvention() {
			return GetRuleContext<CallingconventionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstructorchainContext constructorchain() {
			return GetRuleContext<ConstructorchainContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructor(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(_ctx, State);
		EnterRule(_localctx, 116, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1416;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1415; _localctx.Attributes = attributes();
				}
			}

			State = 1419;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) {
				{
				State = 1418; _localctx.Modifiers = constructorModifiers();
				}
			}

			State = 1421; _localctx.c1 = Match(CONSTRUCTOR);
			State = 1423;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1422; _localctx.ParamList = parameterList();
				}
			}

			State = 1427;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1425; Match(AS);
				State = 1426; Match(VOID);
				}
			}

			State = 1430;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASPEN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << FASTCALL) | (1L << PASCAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (STRICT - 65)) | (1L << (THISCALL - 65)) | (1L << (WINCALL - 65)))) != 0)) {
				{
				State = 1429; _localctx.CallingConvention = callingconvention();
				}
			}

			State = 1434;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1432; Match(CLASS);
				State = 1433; _localctx.ClassId = identifier();
				}
			}

			State = 1438;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1436; Match(UDCSEP);
				State = 1437; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1440; _localctx.end = eos();
			State = 1442;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,204,_ctx) ) {
			case 1:
				{
				State = 1441; _localctx.Chain = constructorchain();
				}
				break;
			}
			State = 1444; _localctx.StmtBlk = statementBlock();
			State = 1448;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,205,_ctx) ) {
			case 1:
				{
				State = 1445; Match(END);
				State = 1446; _localctx.c2 = Match(CONSTRUCTOR);
				State = 1447; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorchainContext : XSharpParserRuleContext {
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorchainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorchain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorchain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorchain(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorchainContext constructorchain() {
		ConstructorchainContext _localctx = new ConstructorchainContext(_ctx, State);
		EnterRule(_localctx, 118, RULE_constructorchain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1450;
			_la = _input.La(1);
			if ( !(_la==SELF || _la==SUPER) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1451; Match(LPAREN);
			State = 1452; _localctx.ArgList = argumentList();
			State = 1453; Match(RPAREN);
			State = 1454; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _EXPORT;
		public IToken _PROTECTED;
		public IToken _INTERNAL;
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _EXTERN;
		public IToken _STATIC;
		public IToken _tset3371;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ConstructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConstructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConstructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorModifiersContext constructorModifiers() {
		ConstructorModifiersContext _localctx = new ConstructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 120, RULE_constructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1456;
				_localctx._tset3371 = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN) ) {
					_localctx._tset3371 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3371);
				}
				}
				State = 1459;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EXPORT) | (1L << HIDDEN) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || _la==INTERNAL || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VodeclareContext : XSharpParserRuleContext {
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode[] EOS() { return GetTokens(XSharpParser.EOS); }
		public ITerminalNode EOS(int i) {
			return GetToken(XSharpParser.EOS, i);
		}
		public VodeclareContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vodeclare; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVodeclare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVodeclare(this);
		}
	}

	[RuleVersion(0)]
	public VodeclareContext vodeclare() {
		VodeclareContext _localctx = new VodeclareContext(_ctx, State);
		EnterRule(_localctx, 122, RULE_vodeclare);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1461; Match(DECLARE);
			State = 1462;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << METHOD))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1464;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1463;
				_la = _input.La(1);
				if ( _la <= 0 || (_la==EOS) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				}
				State = 1466;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << FIRST_KEYWORD) | (1L << ACCESS) | (1L << ALIGN) | (1L << AS) | (1L << ASPEN) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CALLBACK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLL) | (1L << DLLEXPORT) | (1L << DO) | (1L << DOWNTO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FASTCALL) | (1L << FIELD) | (1L << FOR) | (1L << FUNCTION) | (1L << GLOBAL) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IS) | (1L << IN) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << MEMVAR) | (1L << METHOD) | (1L << NAMEOF) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SEQUENCE) | (1L << SIZEOF) | (1L << STATIC))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (SUPER - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (TYPEOF - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WHILE - 64)) | (1L << (WINCALL - 64)) | (1L << (CATCH - 64)) | (1L << (FINALLY - 64)) | (1L << (THROW - 64)) | (1L << (FIRST_POSITIONAL_KEYWORD - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CASTCLASS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (DESTRUCTOR - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (REPEAT - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (LAST_POSITIONAL_KEYWORD - 128)) | (1L << (FIRST_TYPE - 128)) | (1L << (ARRAY - 128)) | (1L << (BYTE - 128)) | (1L << (CODEBLOCK - 128)) | (1L << (DATE - 128)) | (1L << (DWORD - 128)) | (1L << (FLOAT - 128)) | (1L << (INT - 128)) | (1L << (LOGIC - 128)) | (1L << (LONGINT - 128)) | (1L << (OBJECT - 128)) | (1L << (PSZ - 128)) | (1L << (PTR - 128)) | (1L << (REAL4 - 128)) | (1L << (REAL8 - 128)) | (1L << (REF - 128)) | (1L << (SHORTINT - 128)) | (1L << (STRING - 128)) | (1L << (SYMBOL - 128)) | (1L << (USUAL - 128)) | (1L << (VOID - 128)) | (1L << (WORD - 128)) | (1L << (CHAR - 128)) | (1L << (INT64 - 128)) | (1L << (UINT64 - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)) | (1L << (LAST_TYPE - 128)) | (1L << (UDC_KEYWORD - 128)) | (1L << (SCRIPT_REF - 128)) | (1L << (SCRIPT_LOAD - 128)) | (1L << (ASSIGNMENT - 128)) | (1L << (DEFERRED - 128)) | (1L << (ENDCLASS - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (ENDSEQUENCE - 192)) | (1L << (EXPORTED - 192)) | (1L << (FREEZE - 192)) | (1L << (FINAL - 192)) | (1L << (INLINE - 192)) | (1L << (INTRODUCE - 192)) | (1L << (NOSAVE - 192)) | (1L << (READONLY - 192)) | (1L << (SHARING - 192)) | (1L << (SHARED - 192)) | (1L << (SYNC - 192)) | (1L << (ENDDEFINE - 192)) | (1L << (LPARAMETERS - 192)) | (1L << (OLEPUBLIC - 192)) | (1L << (EXCLUDE - 192)) | (1L << (THISACCESS - 192)) | (1L << (HELPSTRING - 192)) | (1L << (DIMENSION - 192)) | (1L << (NOINIT - 192)) | (1L << (THEN - 192)) | (1L << (FOX_M - 192)) | (1L << (SCAN - 192)) | (1L << (ENDSCAN - 192)) | (1L << (ENDFOR - 192)) | (1L << (ENDFUNC - 192)) | (1L << (ENDPROC - 192)) | (1L << (ENDTRY - 192)) | (1L << (ENDWITH - 192)) | (1L << (EACH - 192)) | (1L << (LAST_KEYWORD - 192)) | (1L << (FIRST_NULL - 192)) | (1L << (NIL - 192)) | (1L << (NULL - 192)) | (1L << (NULL_ARRAY - 192)) | (1L << (NULL_CODEBLOCK - 192)) | (1L << (NULL_DATE - 192)) | (1L << (NULL_OBJECT - 192)) | (1L << (NULL_PSZ - 192)) | (1L << (NULL_PTR - 192)) | (1L << (NULL_STRING - 192)) | (1L << (NULL_SYMBOL - 192)) | (1L << (NULL_FOX - 192)) | (1L << (LAST_NULL - 192)) | (1L << (FIRST_OPERATOR - 192)) | (1L << (LT - 192)) | (1L << (LTE - 192)) | (1L << (GT - 192)) | (1L << (GTE - 192)) | (1L << (EQ - 192)) | (1L << (EEQ - 192)) | (1L << (SUBSTR - 192)) | (1L << (NEQ - 192)) | (1L << (NEQ2 - 192)) | (1L << (INC - 192)) | (1L << (DEC - 192)) | (1L << (PLUS - 192)) | (1L << (MINUS - 192)) | (1L << (DIV - 192)) | (1L << (MOD - 192)) | (1L << (EXP - 192)) | (1L << (LSHIFT - 192)) | (1L << (RSHIFT - 192)) | (1L << (TILDE - 192)) | (1L << (MULT - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (QQMARK - 256)) | (1L << (QMARK - 256)) | (1L << (AND - 256)) | (1L << (OR - 256)) | (1L << (NOT - 256)) | (1L << (BIT_NOT - 256)) | (1L << (BIT_AND - 256)) | (1L << (BIT_OR - 256)) | (1L << (BIT_XOR - 256)) | (1L << (ASSIGN_OP - 256)) | (1L << (ASSIGN_ADD - 256)) | (1L << (ASSIGN_SUB - 256)) | (1L << (ASSIGN_EXP - 256)) | (1L << (ASSIGN_MUL - 256)) | (1L << (ASSIGN_DIV - 256)) | (1L << (ASSIGN_MOD - 256)) | (1L << (ASSIGN_BITAND - 256)) | (1L << (ASSIGN_BITOR - 256)) | (1L << (ASSIGN_LSHIFT - 256)) | (1L << (ASSIGN_RSHIFT - 256)) | (1L << (ASSIGN_XOR - 256)) | (1L << (ASSIGN_QQMARK - 256)) | (1L << (LOGIC_AND - 256)) | (1L << (LOGIC_OR - 256)) | (1L << (LOGIC_NOT - 256)) | (1L << (LOGIC_XOR - 256)) | (1L << (FOX_AND - 256)) | (1L << (FOX_OR - 256)) | (1L << (FOX_NOT - 256)) | (1L << (FOX_XOR - 256)) | (1L << (LPAREN - 256)) | (1L << (RPAREN - 256)) | (1L << (LCURLY - 256)) | (1L << (RCURLY - 256)) | (1L << (LBRKT - 256)) | (1L << (RBRKT - 256)) | (1L << (COLON - 256)) | (1L << (COMMA - 256)) | (1L << (PIPE - 256)) | (1L << (AMP - 256)) | (1L << (ADDROF - 256)) | (1L << (ALIAS - 256)) | (1L << (DOT - 256)) | (1L << (COLONCOLON - 256)) | (1L << (BACKSLASH - 256)) | (1L << (ELLIPSIS - 256)) | (1L << (BACKBACKSLASH - 256)) | (1L << (DOTDOT - 256)) | (1L << (LAST_OPERATOR - 256)) | (1L << (FIRST_CONSTANT - 256)) | (1L << (FALSE_CONST - 256)) | (1L << (TRUE_CONST - 256)) | (1L << (HEX_CONST - 256)) | (1L << (BIN_CONST - 256)) | (1L << (INT_CONST - 256)) | (1L << (DATE_CONST - 256)) | (1L << (DATETIME_CONST - 256)) | (1L << (REAL_CONST - 256)) | (1L << (INVALID_NUMBER - 256)) | (1L << (SYMBOL_CONST - 256)) | (1L << (CHAR_CONST - 256)) | (1L << (STRING_CONST - 256)) | (1L << (ESCAPED_STRING_CONST - 256)) | (1L << (INTERPOLATED_STRING_CONST - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (INCOMPLETE_STRING_CONST - 320)) | (1L << (TEXT_STRING_CONST - 320)) | (1L << (BRACKETED_STRING_CONST - 320)) | (1L << (BINARY_CONST - 320)) | (1L << (LAST_CONSTANT - 320)) | (1L << (PP_FIRST - 320)) | (1L << (PP_COMMAND - 320)) | (1L << (PP_DEFINE - 320)) | (1L << (PP_ELSE - 320)) | (1L << (PP_ENDIF - 320)) | (1L << (PP_ENDREGION - 320)) | (1L << (PP_ERROR - 320)) | (1L << (PP_IF - 320)) | (1L << (PP_IFDEF - 320)) | (1L << (PP_IFNDEF - 320)) | (1L << (PP_INCLUDE - 320)) | (1L << (PP_LINE - 320)) | (1L << (PP_REGION - 320)) | (1L << (PP_STDOUT - 320)) | (1L << (PP_TRANSLATE - 320)) | (1L << (PP_UNDEF - 320)) | (1L << (PP_WARNING - 320)) | (1L << (PP_PRAGMA - 320)) | (1L << (PP_TEXT - 320)) | (1L << (PP_ENDTEXT - 320)) | (1L << (PP_LAST - 320)) | (1L << (MACRO - 320)) | (1L << (UDCSEP - 320)) | (1L << (ID - 320)) | (1L << (DOC_COMMENT - 320)) | (1L << (SL_COMMENT - 320)) | (1L << (ML_COMMENT - 320)) | (1L << (LINE_CONT - 320)) | (1L << (LINE_CONT_OLD - 320)) | (1L << (SEMI - 320)) | (1L << (WS - 320)) | (1L << (NL - 320)) | (1L << (UNRECOGNIZED - 320)) | (1L << (LAST - 320)))) != 0) );
			State = 1468; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public DestructorModifiersContext Modifiers;
		public IToken d1;
		public IdentifierContext ClassId;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken d2;
		public IToken End;
		public ITerminalNode[] DESTRUCTOR() { return GetTokens(XSharpParser.DESTRUCTOR); }
		public ITerminalNode DESTRUCTOR(int i) {
			return GetToken(XSharpParser.DESTRUCTOR, i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public DestructorModifiersContext destructorModifiers() {
			return GetRuleContext<DestructorModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructor(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(_ctx, State);
		EnterRule(_localctx, 124, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1471;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1470; _localctx.Attributes = attributes();
				}
			}

			State = 1474;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXTERN) {
				{
				State = 1473; _localctx.Modifiers = destructorModifiers();
				}
			}

			State = 1476; _localctx.d1 = Match(DESTRUCTOR);
			State = 1479;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1477; Match(LPAREN);
				State = 1478; Match(RPAREN);
				}
			}

			State = 1483;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS) {
				{
				State = 1481; Match(CLASS);
				State = 1482; _localctx.ClassId = identifier();
				}
			}

			State = 1487;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1485; Match(UDCSEP);
				State = 1486; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1489; _localctx.end = eos();
			State = 1490; _localctx.StmtBlk = statementBlock();
			State = 1494;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,213,_ctx) ) {
			case 1:
				{
				State = 1491; Match(END);
				State = 1492; _localctx.d2 = Match(DESTRUCTOR);
				State = 1493; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorModifiersContext : XSharpParserRuleContext {
		public IToken _EXTERN;
		public IList<IToken> _Tokens = new List<IToken>();
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public DestructorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDestructorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDestructorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public DestructorModifiersContext destructorModifiers() {
		DestructorModifiersContext _localctx = new DestructorModifiersContext(_ctx, State);
		EnterRule(_localctx, 126, RULE_destructorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1496; _localctx._EXTERN = Match(EXTERN);
				_localctx._Tokens.Add(_localctx._EXTERN);
				}
				}
				State = 1499;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadedOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode RSHIFT() { return GetToken(XSharpParser.RSHIFT, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public OverloadedOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadedOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOverloadedOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOverloadedOps(this);
		}
	}

	[RuleVersion(0)]
	public OverloadedOpsContext overloadedOps() {
		OverloadedOpsContext _localctx = new OverloadedOpsContext(_ctx, State);
		EnterRule(_localctx, 128, RULE_overloadedOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1501;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LT - 236)) | (1L << (LTE - 236)) | (1L << (GT - 236)) | (1L << (GTE - 236)) | (1L << (EEQ - 236)) | (1L << (NEQ - 236)) | (1L << (NEQ2 - 236)) | (1L << (INC - 236)) | (1L << (DEC - 236)) | (1L << (PLUS - 236)) | (1L << (MINUS - 236)) | (1L << (DIV - 236)) | (1L << (MOD - 236)) | (1L << (LSHIFT - 236)) | (1L << (RSHIFT - 236)) | (1L << (TILDE - 236)) | (1L << (MULT - 236)) | (1L << (AND - 236)) | (1L << (OR - 236)) | (1L << (NOT - 236)) | (1L << (PIPE - 236)) | (1L << (AMP - 236)))) != 0) || _la==FALSE_CONST || _la==TRUE_CONST) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOpsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ConversionOpsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOps; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterConversionOps(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitConversionOps(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOpsContext conversionOps() {
		ConversionOpsContext _localctx = new ConversionOpsContext(_ctx, State);
		EnterRule(_localctx, 130, RULE_conversionOps);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1503;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_Context : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public OperatorModifiersContext Modifiers;
		public IToken o1;
		public OverloadedOpsContext Operation;
		public ConversionOpsContext Conversion;
		public IToken Gt;
		public ParameterListContext ParamList;
		public DatatypeContext Type;
		public ExpressionContext ExpressionBody;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken End;
		public ITerminalNode[] OPERATOR() { return GetTokens(XSharpParser.OPERATOR); }
		public ITerminalNode OPERATOR(int i) {
			return GetToken(XSharpParser.OPERATOR, i);
		}
		public ParameterListContext parameterList() {
			return GetRuleContext<ParameterListContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public OverloadedOpsContext overloadedOps() {
			return GetRuleContext<OverloadedOpsContext>(0);
		}
		public ConversionOpsContext conversionOps() {
			return GetRuleContext<ConversionOpsContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public OperatorModifiersContext operatorModifiers() {
			return GetRuleContext<OperatorModifiersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public Operator_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperator_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperator_(this);
		}
	}

	[RuleVersion(0)]
	public Operator_Context operator_() {
		Operator_Context _localctx = new Operator_Context(_ctx, State);
		EnterRule(_localctx, 132, RULE_operator_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 1505; _localctx.Attributes = attributes();
				}
			}

			State = 1509;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==PUBLIC || _la==STATIC || _la==EXTERN) {
				{
				State = 1508; _localctx.Modifiers = operatorModifiers();
				}
			}

			State = 1511; _localctx.o1 = Match(OPERATOR);
			State = 1514;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LT:
			case LTE:
			case GT:
			case GTE:
			case EEQ:
			case NEQ:
			case NEQ2:
			case INC:
			case DEC:
			case PLUS:
			case MINUS:
			case DIV:
			case MOD:
			case LSHIFT:
			case RSHIFT:
			case TILDE:
			case MULT:
			case AND:
			case OR:
			case NOT:
			case PIPE:
			case AMP:
			case FALSE_CONST:
			case TRUE_CONST:
				{
				State = 1512; _localctx.Operation = overloadedOps();
				}
				break;
			case EXPLICIT:
			case IMPLICIT:
				{
				State = 1513; _localctx.Conversion = conversionOps();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==GT) {
				{
				State = 1516; _localctx.Gt = Match(GT);
				}
			}

			State = 1519; _localctx.ParamList = parameterList();
			State = 1522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 1520; Match(AS);
				State = 1521; _localctx.Type = datatype();
				}
			}

			State = 1526;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==UDCSEP) {
				{
				State = 1524; Match(UDCSEP);
				State = 1525; _localctx.ExpressionBody = expression(0);
				}
			}

			State = 1528; _localctx.end = eos();
			State = 1529; _localctx.StmtBlk = statementBlock();
			State = 1533;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,221,_ctx) ) {
			case 1:
				{
				State = 1530; Match(END);
				State = 1531; _localctx.o1 = Match(OPERATOR);
				State = 1532; _localctx.End = Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorModifiersContext : XSharpParserRuleContext {
		public IToken _PUBLIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _STATIC;
		public IToken _EXTERN;
		public IToken _tset3748;
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public OperatorModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOperatorModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOperatorModifiers(this);
		}
	}

	[RuleVersion(0)]
	public OperatorModifiersContext operatorModifiers() {
		OperatorModifiersContext _localctx = new OperatorModifiersContext(_ctx, State);
		EnterRule(_localctx, 134, RULE_operatorModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1536;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1535;
				_localctx._tset3748 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==PUBLIC || _la==STATIC || _la==EXTERN) ) {
					_localctx._tset3748 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3748);
				}
				}
				State = 1538;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==PUBLIC || _la==STATIC || _la==EXTERN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberModifiersContext : XSharpParserRuleContext {
		public IToken _NEW;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _PRIVATE;
		public IToken _HIDDEN;
		public IToken _PROTECTED;
		public IToken _PUBLIC;
		public IToken _EXPORT;
		public IToken _INTERNAL;
		public IToken _STATIC;
		public IToken _VIRTUAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _OVERRIDE;
		public IToken _tset3775;
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] PRIVATE() { return GetTokens(XSharpParser.PRIVATE); }
		public ITerminalNode PRIVATE(int i) {
			return GetToken(XSharpParser.PRIVATE, i);
		}
		public ITerminalNode[] HIDDEN() { return GetTokens(XSharpParser.HIDDEN); }
		public ITerminalNode HIDDEN(int i) {
			return GetToken(XSharpParser.HIDDEN, i);
		}
		public ITerminalNode[] PROTECTED() { return GetTokens(XSharpParser.PROTECTED); }
		public ITerminalNode PROTECTED(int i) {
			return GetToken(XSharpParser.PROTECTED, i);
		}
		public ITerminalNode[] PUBLIC() { return GetTokens(XSharpParser.PUBLIC); }
		public ITerminalNode PUBLIC(int i) {
			return GetToken(XSharpParser.PUBLIC, i);
		}
		public ITerminalNode[] EXPORT() { return GetTokens(XSharpParser.EXPORT); }
		public ITerminalNode EXPORT(int i) {
			return GetToken(XSharpParser.EXPORT, i);
		}
		public ITerminalNode[] INTERNAL() { return GetTokens(XSharpParser.INTERNAL); }
		public ITerminalNode INTERNAL(int i) {
			return GetToken(XSharpParser.INTERNAL, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public MemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public MemberModifiersContext memberModifiers() {
		MemberModifiersContext _localctx = new MemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 136, RULE_memberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 1540;
				_localctx._tset3775 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) ) {
					_localctx._tset3775 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset3775);
				}
				}
				State = 1543;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : XSharpParserRuleContext {
		public AttributeBlockContext _attributeBlock;
		public IList<AttributeBlockContext> _AttrBlk = new List<AttributeBlockContext>();
		public AttributeBlockContext[] attributeBlock() {
			return GetRuleContexts<AttributeBlockContext>();
		}
		public AttributeBlockContext attributeBlock(int i) {
			return GetRuleContext<AttributeBlockContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(_ctx, State);
		EnterRule(_localctx, 138, RULE_attributes);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1545; _localctx._attributeBlock = attributeBlock();
					_localctx._AttrBlk.Add(_localctx._attributeBlock);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1548;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,224,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeBlockContext : XSharpParserRuleContext {
		public AttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public AttributeBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeBlock(this);
		}
	}

	[RuleVersion(0)]
	public AttributeBlockContext attributeBlock() {
		AttributeBlockContext _localctx = new AttributeBlockContext(_ctx, State);
		EnterRule(_localctx, 140, RULE_attributeBlock);
		int _la;
		try {
			State = 1565;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1550; Match(LBRKT);
				State = 1552;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,225,_ctx) ) {
				case 1:
					{
					State = 1551; _localctx.Target = attributeTarget();
					}
					break;
				}
				State = 1554; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				State = 1559;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1555; Match(COMMA);
					State = 1556; _localctx._attribute = attribute();
					_localctx._Attributes.Add(_localctx._attribute);
					}
					}
					State = 1561;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1562; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1564; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext attributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 142, RULE_attributeTarget);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1567;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << FIELD) | (1L << METHOD) | (1L << RETURN))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (CONSTRUCTOR - 82)) | (1L << (DELEGATE - 82)) | (1L << (ENUM - 82)) | (1L << (EVENT - 82)) | (1L << (INTERFACE - 82)) | (1L << (PROPERTY - 82)) | (1L << (STRUCTURE - 82)))) != 0) || _la==ID) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 1568; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : XSharpParserRuleContext {
		public NameContext Name;
		public AttributeParamContext _attributeParam;
		public IList<AttributeParamContext> _Params = new List<AttributeParamContext>();
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AttributeParamContext[] attributeParam() {
			return GetRuleContexts<AttributeParamContext>();
		}
		public AttributeParamContext attributeParam(int i) {
			return GetRuleContext<AttributeParamContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(_ctx, State);
		EnterRule(_localctx, 144, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570; _localctx.Name = name(0);
			State = 1583;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 1571; Match(LPAREN);
				State = 1580;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,229,_ctx) ) {
				case 1:
					{
					State = 1572; _localctx._attributeParam = attributeParam();
					_localctx._Params.Add(_localctx._attributeParam);
					State = 1577;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1573; Match(COMMA);
						State = 1574; _localctx._attributeParam = attributeParam();
						_localctx._Params.Add(_localctx._attributeParam);
						}
						}
						State = 1579;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1582; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeParamContext : XSharpParserRuleContext {
		public AttributeParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeParam; } }
	 
		public AttributeParamContext() { }
		public virtual void CopyFrom(AttributeParamContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprAttributeParamContext : AttributeParamContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExprAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExprAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExprAttributeParam(this);
		}
	}
	public partial class PropertyAttributeParamContext : AttributeParamContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PropertyAttributeParamContext(AttributeParamContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPropertyAttributeParam(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPropertyAttributeParam(this);
		}
	}

	[RuleVersion(0)]
	public AttributeParamContext attributeParam() {
		AttributeParamContext _localctx = new AttributeParamContext(_ctx, State);
		EnterRule(_localctx, 146, RULE_attributeParam);
		try {
			State = 1590;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,231,_ctx) ) {
			case 1:
				_localctx = new PropertyAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1585; ((PropertyAttributeParamContext)_localctx).Name = identifierName();
				State = 1586; ((PropertyAttributeParamContext)_localctx).Op = assignoperator();
				State = 1587; ((PropertyAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;

			case 2:
				_localctx = new ExprAttributeParamContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1589; ((ExprAttributeParamContext)_localctx).Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributesContext : XSharpParserRuleContext {
		public GlobalAttributeTargetContext Target;
		public AttributeContext _attribute;
		public IList<AttributeContext> _Attributes = new List<AttributeContext>();
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GlobalAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributes(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributesContext globalAttributes() {
		GlobalAttributesContext _localctx = new GlobalAttributesContext(_ctx, State);
		EnterRule(_localctx, 148, RULE_globalAttributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1592; Match(LBRKT);
			State = 1593; _localctx.Target = globalAttributeTarget();
			State = 1594; _localctx._attribute = attribute();
			_localctx._Attributes.Add(_localctx._attribute);
			State = 1599;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1595; Match(COMMA);
				State = 1596; _localctx._attribute = attribute();
				_localctx._Attributes.Add(_localctx._attribute);
				}
				}
				State = 1601;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 1602; Match(RBRKT);
			State = 1603; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext globalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(_ctx, State);
		EnterRule(_localctx, 150, RULE_globalAttributeTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1605; _localctx.Token = Match(ID);
			State = 1606; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilewidevarContext : XSharpParserRuleContext {
		public IToken Token;
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Vars = new List<IdentifierNameContext>();
		public EosContext end;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public MemvarContext _memvar;
		public IList<MemvarContext> _XVars = new List<MemvarContext>();
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public FilewidevarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filewidevar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFilewidevar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFilewidevar(this);
		}
	}

	[RuleVersion(0)]
	public FilewidevarContext filewidevar() {
		FilewidevarContext _localctx = new FilewidevarContext(_ctx, State);
		EnterRule(_localctx, 152, RULE_filewidevar);
		int _la;
		try {
			State = 1658;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,238,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1608; _localctx.Token = Match(MEMVAR);
				State = 1609; _localctx._identifierName = identifierName();
				_localctx._Vars.Add(_localctx._identifierName);
				State = 1614;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1610; Match(COMMA);
					State = 1611; _localctx._identifierName = identifierName();
					_localctx._Vars.Add(_localctx._identifierName);
					}
					}
					State = 1616;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1617; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1619; _localctx.Token = Match(FIELD);
				State = 1620; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				State = 1625;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1621; Match(COMMA);
					State = 1622; _localctx._identifierName = identifierName();
					_localctx._Fields.Add(_localctx._identifierName);
					}
					}
					State = 1627;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1630;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==IN) {
					{
					State = 1628; Match(IN);
					State = 1629; _localctx.Alias = identifierName();
					}
				}

				State = 1632; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1634;
				if (!(!IsFox )) throw new FailedPredicateException(this, "!IsFox ");
				State = 1635; _localctx.Token = Match(PUBLIC);
				State = 1636; _localctx._memvar = memvar(_localctx.Token);
				_localctx._XVars.Add(_localctx._memvar);
				State = 1641;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1637; Match(COMMA);
					State = 1638; _localctx._memvar = memvar(_localctx.Token);
					_localctx._XVars.Add(_localctx._memvar);
					}
					}
					State = 1643;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1644; _localctx.end = eos();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1646;
				if (!(IsFox  )) throw new FailedPredicateException(this, "IsFox  ");
				State = 1647; _localctx.Token = Match(PUBLIC);
				State = 1648; _localctx._foxmemvar = foxmemvar(_localctx.Token);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				State = 1653;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 1649; Match(COMMA);
					State = 1650; _localctx._foxmemvar = foxmemvar(_localctx.Token);
					_localctx._FoxVars.Add(_localctx._foxmemvar);
					}
					}
					State = 1655;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1656; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : XSharpParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoxmemvardeclStmtContext : StatementContext {
		public FoxmemvardeclContext Decl;
		public FoxmemvardeclContext foxmemvardecl() {
			return GetRuleContext<FoxmemvardeclContext>(0);
		}
		public FoxmemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardeclStmt(this);
		}
	}
	public partial class TryStmtContext : StatementContext {
		public IToken T;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public CatchBlockContext _catchBlock;
		public IList<CatchBlockContext> _CatchBlock = new List<CatchBlockContext>();
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] TRY() { return GetTokens(XSharpParser.TRY); }
		public ITerminalNode TRY(int i) {
			return GetToken(XSharpParser.TRY, i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode[] CATCH() { return GetTokens(XSharpParser.CATCH); }
		public ITerminalNode CATCH(int i) {
			return GetToken(XSharpParser.CATCH, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDTRY() { return GetToken(XSharpParser.ENDTRY, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public CatchBlockContext[] catchBlock() {
			return GetRuleContexts<CatchBlockContext>();
		}
		public CatchBlockContext catchBlock(int i) {
			return GetRuleContext<CatchBlockContext>(i);
		}
		public TryStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTryStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTryStmt(this);
		}
	}
	public partial class YieldStmtContext : StatementContext {
		public IToken Y;
		public IToken R;
		public ExpressionContext Expr;
		public EosContext end;
		public IToken Break;
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public YieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterYieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitYieldStmt(this);
		}
	}
	public partial class MemvardeclStmtContext : StatementContext {
		public MemvardeclContext Decl;
		public MemvardeclContext memvardecl() {
			return GetRuleContext<MemvardeclContext>(0);
		}
		public MemvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardeclStmt(this);
		}
	}
	public partial class FieldStmtContext : StatementContext {
		public FielddeclContext Decl;
		public FielddeclContext fielddecl() {
			return GetRuleContext<FielddeclContext>(0);
		}
		public FieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFieldStmt(this);
		}
	}
	public partial class LocalFunctionStmtContext : StatementContext {
		public LocalfuncprocContext Decl;
		public LocalfuncprocContext localfuncproc() {
			return GetRuleContext<LocalfuncprocContext>(0);
		}
		public LocalFunctionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalFunctionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalFunctionStmt(this);
		}
	}
	public partial class QoutStmtContext : StatementContext {
		public IToken Q;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public QoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQoutStmt(this);
		}
	}
	public partial class SwitchStmtContext : StatementContext {
		public IToken S;
		public ExpressionContext Expr;
		public EosContext end;
		public SwitchBlockContext _switchBlock;
		public IList<SwitchBlockContext> _SwitchBlock = new List<SwitchBlockContext>();
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] SWITCH() { return GetTokens(XSharpParser.SWITCH); }
		public ITerminalNode SWITCH(int i) {
			return GetToken(XSharpParser.SWITCH, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public SwitchBlockContext[] switchBlock() {
			return GetRuleContexts<SwitchBlockContext>();
		}
		public SwitchBlockContext switchBlock(int i) {
			return GetRuleContext<SwitchBlockContext>(i);
		}
		public SwitchStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchStmt(this);
		}
	}
	public partial class DeclarationStmtContext : StatementContext {
		public LocaldeclContext Decl;
		public LocaldeclContext localdecl() {
			return GetRuleContext<LocaldeclContext>(0);
		}
		public DeclarationStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDeclarationStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDeclarationStmt(this);
		}
	}
	public partial class JumpStmtContext : StatementContext {
		public IToken Key;
		public EosContext end;
		public ExpressionContext Expr;
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THROW() { return GetToken(XSharpParser.THROW, 0); }
		public JumpStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJumpStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJumpStmt(this);
		}
	}
	public partial class FoxtextoutStmtContext : StatementContext {
		public IToken B;
		public IToken String;
		public IToken end;
		public ITerminalNode TEXT_STRING_CONST() { return GetToken(XSharpParser.TEXT_STRING_CONST, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public ITerminalNode BACKSLASH() { return GetToken(XSharpParser.BACKSLASH, 0); }
		public ITerminalNode BACKBACKSLASH() { return GetToken(XSharpParser.BACKBACKSLASH, 0); }
		public FoxtextoutStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtextoutStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtextoutStmt(this);
		}
	}
	public partial class FoxdimvardeclStmtContext : StatementContext {
		public FoxdimvardeclContext Decl;
		public FoxdimvardeclContext foxdimvardecl() {
			return GetRuleContext<FoxdimvardeclContext>(0);
		}
		public FoxdimvardeclStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardeclStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardeclStmt(this);
		}
	}
	public partial class DoStmtContext : StatementContext {
		public IToken D;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArgumentListContext ArgList;
		public EosContext end;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public DoStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDoStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDoStmt(this);
		}
	}
	public partial class CaseStmtContext : StatementContext {
		public EosContext end;
		public IToken c;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _CaseBlocks = new List<CondBlockContext>();
		public IToken oth;
		public StatementBlockContext OtherwiseStmtBlk;
		public IToken e;
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode[] CASE() { return GetTokens(XSharpParser.CASE); }
		public ITerminalNode CASE(int i) {
			return GetToken(XSharpParser.CASE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CaseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCaseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCaseStmt(this);
		}
	}
	public partial class NopStmtContext : StatementContext {
		public EosContext end;
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NopStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNopStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNopStmt(this);
		}
	}
	public partial class RepeatStmtContext : StatementContext {
		public IToken r;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext Expr;
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RepeatStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRepeatStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRepeatStmt(this);
		}
	}
	public partial class FoxlparametersStmtContext : StatementContext {
		public FoxlparametersContext Decl;
		public FoxlparametersContext foxlparameters() {
			return GetRuleContext<FoxlparametersContext>(0);
		}
		public FoxlparametersStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparametersStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparametersStmt(this);
		}
	}
	public partial class FoxexpressionStmtContext : StatementContext {
		public IToken Eq;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public FoxexpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxexpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxexpressionStmt(this);
		}
	}
	public partial class ForStmtContext : StatementContext {
		public IToken f;
		public ExpressionContext AssignExpr;
		public IToken ForDecl;
		public IdentifierContext ForIter;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public DatatypeContext Type;
		public IToken Dir;
		public ExpressionContext FinalExpr;
		public ExpressionContext Step;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForStmt(this);
		}
	}
	public partial class SeqStmtContext : StatementContext {
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public RecoverBlockContext RecoverBlock;
		public IToken F;
		public StatementBlockContext FinBlock;
		public IToken e;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode[] SEQUENCE() { return GetTokens(XSharpParser.SEQUENCE); }
		public ITerminalNode SEQUENCE(int i) {
			return GetToken(XSharpParser.SEQUENCE, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext[] statementBlock() {
			return GetRuleContexts<StatementBlockContext>();
		}
		public StatementBlockContext statementBlock(int i) {
			return GetRuleContext<StatementBlockContext>(i);
		}
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode ENDSEQUENCE() { return GetToken(XSharpParser.ENDSEQUENCE, 0); }
		public RecoverBlockContext recoverBlock() {
			return GetRuleContext<RecoverBlockContext>(0);
		}
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public SeqStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSeqStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSeqStmt(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public IToken w;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] WHILE() { return GetTokens(XSharpParser.WHILE); }
		public ITerminalNode WHILE(int i) {
			return GetToken(XSharpParser.WHILE, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode[] DO() { return GetTokens(XSharpParser.DO); }
		public ITerminalNode DO(int i) {
			return GetToken(XSharpParser.DO, i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
	}
	public partial class ForeachStmtContext : StatementContext {
		public IToken f;
		public IToken a;
		public IToken V;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ExpressionContext Container;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode ENDFOR() { return GetToken(XSharpParser.ENDFOR, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ForeachStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterForeachStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitForeachStmt(this);
		}
	}
	public partial class ExpressionStmtContext : StatementContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public EosContext end;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExpressionStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExpressionStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExpressionStmt(this);
		}
	}
	public partial class ReturnStmtContext : StatementContext {
		public IToken R;
		public IToken Void;
		public ExpressionContext Expr;
		public EosContext end;
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}
	public partial class WithBlockContext : StatementContext {
		public ExpressionContext Expr;
		public IToken As;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public ITerminalNode[] WITH() { return GetTokens(XSharpParser.WITH); }
		public ITerminalNode WITH(int i) {
			return GetToken(XSharpParser.WITH, i);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDWITH() { return GetToken(XSharpParser.ENDWITH, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public WithBlockContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWithBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWithBlock(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public IToken i;
		public CondBlockContext _condBlock;
		public IList<CondBlockContext> _IfBlocks = new List<CondBlockContext>();
		public IToken e;
		public IToken el;
		public StatementBlockContext ElseStmtBlk;
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] IF() { return GetTokens(XSharpParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(XSharpParser.IF, i);
		}
		public CondBlockContext[] condBlock() {
			return GetRuleContexts<CondBlockContext>();
		}
		public CondBlockContext condBlock(int i) {
			return GetRuleContext<CondBlockContext>(i);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode[] ELSEIF() { return GetTokens(XSharpParser.ELSEIF); }
		public ITerminalNode ELSEIF(int i) {
			return GetToken(XSharpParser.ELSEIF, i);
		}
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}
	public partial class BlockStmtContext : StatementContext {
		public IToken Key;
		public ExpressionContext Expr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken e;
		public VariableDeclarationContext VarDecl;
		public BlockTokensContext Key1;
		public BlockTokensContext Key2;
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] LOCK() { return GetTokens(XSharpParser.LOCK); }
		public ITerminalNode LOCK(int i) {
			return GetToken(XSharpParser.LOCK, i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode[] USING() { return GetTokens(XSharpParser.USING); }
		public ITerminalNode USING(int i) {
			return GetToken(XSharpParser.USING, i);
		}
		public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public ITerminalNode[] FIXED() { return GetTokens(XSharpParser.FIXED); }
		public ITerminalNode FIXED(int i) {
			return GetToken(XSharpParser.FIXED, i);
		}
		public BlockTokensContext[] blockTokens() {
			return GetRuleContexts<BlockTokensContext>();
		}
		public BlockTokensContext blockTokens(int i) {
			return GetRuleContext<BlockTokensContext>(i);
		}
		public BlockStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockStmt(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 154, RULE_statement);
		int _la;
		try {
			State = 2018;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,292,_ctx) ) {
			case 1:
				_localctx = new DeclarationStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1660; ((DeclarationStmtContext)_localctx).Decl = localdecl();
				}
				break;

			case 2:
				_localctx = new FoxlparametersStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1661; ((FoxlparametersStmtContext)_localctx).Decl = foxlparameters();
				}
				break;

			case 3:
				_localctx = new LocalFunctionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1662; ((LocalFunctionStmtContext)_localctx).Decl = localfuncproc();
				}
				break;

			case 4:
				_localctx = new MemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1663;
				if (!(!IsFox && HasMemVars)) throw new FailedPredicateException(this, "!IsFox && HasMemVars");
				State = 1664; ((MemvardeclStmtContext)_localctx).Decl = memvardecl();
				}
				break;

			case 5:
				_localctx = new FieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1665; ((FieldStmtContext)_localctx).Decl = fielddecl();
				}
				break;

			case 6:
				_localctx = new FoxmemvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1666;
				if (!(IsFox && HasMemVars)) throw new FailedPredicateException(this, "IsFox && HasMemVars");
				State = 1667; ((FoxmemvardeclStmtContext)_localctx).Decl = foxmemvardecl();
				}
				break;

			case 7:
				_localctx = new FoxdimvardeclStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1668;
				if (!(IsFox )) throw new FailedPredicateException(this, "IsFox ");
				State = 1669; ((FoxdimvardeclStmtContext)_localctx).Decl = foxdimvardecl();
				}
				break;

			case 8:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1671;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==DO) {
					{
					State = 1670; Match(DO);
					}
				}

				State = 1673; ((WhileStmtContext)_localctx).w = Match(WHILE);
				State = 1674; ((WhileStmtContext)_localctx).Expr = expression(0);
				State = 1675; ((WhileStmtContext)_localctx).end = eos();
				State = 1676; ((WhileStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1682;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1677; ((WhileStmtContext)_localctx).e = Match(END);
					State = 1679;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==DO || _la==WHILE) {
						{
						State = 1678;
						_la = _input.La(1);
						if ( !(_la==DO || _la==WHILE) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
					}

					}
					break;
				case ENDDO:
					{
					State = 1681; ((WhileStmtContext)_localctx).e = Match(ENDDO);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1684; eos();
				}
				break;

			case 9:
				_localctx = new NopStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1686; Match(NOP);
				State = 1689;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LPAREN) {
					{
					State = 1687; Match(LPAREN);
					State = 1688; Match(RPAREN);
					}
				}

				State = 1691; ((NopStmtContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new ForStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1692; ((ForStmtContext)_localctx).f = Match(FOR);
				State = 1713;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					State = 1693; ((ForStmtContext)_localctx).AssignExpr = expression(0);
					}
					break;

				case 2:
					{
					State = 1699;
					_errHandler.Sync(this);
					switch (_input.La(1)) {
					case LOCAL:
					case IMPLIED:
						{
						State = 1695;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==LOCAL) {
							{
							State = 1694; Match(LOCAL);
							}
						}

						State = 1697; ((ForStmtContext)_localctx).ForDecl = Match(IMPLIED);
						}
						break;
					case VAR:
						{
						State = 1698; ((ForStmtContext)_localctx).ForDecl = Match(VAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1701; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1702; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1703; ((ForStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 3:
					{
					State = 1705; ((ForStmtContext)_localctx).ForDecl = Match(LOCAL);
					State = 1706; ((ForStmtContext)_localctx).ForIter = identifier();
					State = 1707; ((ForStmtContext)_localctx).Op = assignoperator();
					State = 1708; ((ForStmtContext)_localctx).Expr = expression(0);
					State = 1711;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1709; Match(AS);
						State = 1710; ((ForStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;
				}
				State = 1715;
				((ForStmtContext)_localctx).Dir = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (DOWNTO - 20)) | (1L << (TO - 20)) | (1L << (UPTO - 20)))) != 0)) ) {
					((ForStmtContext)_localctx).Dir = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1716; ((ForStmtContext)_localctx).FinalExpr = expression(0);
				State = 1719;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STEP) {
					{
					State = 1717; Match(STEP);
					State = 1718; ((ForStmtContext)_localctx).Step = expression(0);
					}
				}

				State = 1721; ((ForStmtContext)_localctx).end = eos();
				State = 1722; ((ForStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1725;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1723; ((ForStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1724; ((ForStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1727; eos();
				}
				break;

			case 11:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1729; ((IfStmtContext)_localctx).i = Match(IF);
				State = 1730; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).i);
				((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
				State = 1735;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==ELSEIF) {
					{
					{
					State = 1731; ((IfStmtContext)_localctx).e = Match(ELSEIF);
					State = 1732; ((IfStmtContext)_localctx)._condBlock = condBlock(((IfStmtContext)_localctx).e);
					((IfStmtContext)_localctx)._IfBlocks.Add(((IfStmtContext)_localctx)._condBlock);
					}
					}
					State = 1737;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1742;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ELSE) {
					{
					State = 1738; ((IfStmtContext)_localctx).el = Match(ELSE);
					State = 1739; eos();
					State = 1740; ((IfStmtContext)_localctx).ElseStmtBlk = statementBlock();
					}
				}

				State = 1749;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1744; ((IfStmtContext)_localctx).e = Match(END);
					State = 1746;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==IF) {
						{
						State = 1745; Match(IF);
						}
					}

					}
					break;
				case ENDIF:
					{
					State = 1748; ((IfStmtContext)_localctx).e = Match(ENDIF);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1751; eos();
				}
				break;

			case 12:
				_localctx = new CaseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1753; Match(DO);
				State = 1754; Match(CASE);
				State = 1755; ((CaseStmtContext)_localctx).end = eos();
				State = 1760;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CASE) {
					{
					{
					State = 1756; ((CaseStmtContext)_localctx).c = Match(CASE);
					State = 1757; ((CaseStmtContext)_localctx)._condBlock = condBlock(((CaseStmtContext)_localctx).c);
					((CaseStmtContext)_localctx)._CaseBlocks.Add(((CaseStmtContext)_localctx)._condBlock);
					}
					}
					State = 1762;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1767;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==OTHERWISE) {
					{
					State = 1763; ((CaseStmtContext)_localctx).oth = Match(OTHERWISE);
					State = 1764; ((CaseStmtContext)_localctx).end = eos();
					State = 1765; ((CaseStmtContext)_localctx).OtherwiseStmtBlk = statementBlock();
					}
				}

				State = 1774;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1769; ((CaseStmtContext)_localctx).e = Match(END);
					State = 1771;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==CASE) {
						{
						State = 1770; Match(CASE);
						}
					}

					}
					break;
				case ENDCASE:
					{
					State = 1773; ((CaseStmtContext)_localctx).e = Match(ENDCASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1776; eos();
				}
				break;

			case 13:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1778; ((JumpStmtContext)_localctx).Key = Match(EXIT);
				State = 1779; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 14:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1780; ((JumpStmtContext)_localctx).Key = Match(LOOP);
				State = 1781; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 15:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1782; ((JumpStmtContext)_localctx).Key = Match(BREAK);
				State = 1784;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					State = 1783; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1786; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 16:
				_localctx = new ReturnStmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1787; ((ReturnStmtContext)_localctx).R = Match(RETURN);
				State = 1790;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,258,_ctx) ) {
				case 1:
					{
					State = 1788; ((ReturnStmtContext)_localctx).Void = Match(VOID);
					}
					break;

				case 2:
					{
					State = 1789; ((ReturnStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1792; ((ReturnStmtContext)_localctx).end = eos();
				}
				break;

			case 17:
				_localctx = new QoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1793;
				((QoutStmtContext)_localctx).Q = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==QQMARK || _la==QMARK) ) {
					((QoutStmtContext)_localctx).Q = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1802;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,260,_ctx) ) {
				case 1:
					{
					State = 1794; ((QoutStmtContext)_localctx)._expression = expression(0);
					((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
					State = 1799;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 1795; Match(COMMA);
						State = 1796; ((QoutStmtContext)_localctx)._expression = expression(0);
						((QoutStmtContext)_localctx)._Exprs.Add(((QoutStmtContext)_localctx)._expression);
						}
						}
						State = 1801;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					}
					break;
				}
				State = 1804; ((QoutStmtContext)_localctx).end = eos();
				}
				break;

			case 18:
				_localctx = new SeqStmtContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1805; Match(BEGIN);
				State = 1806; Match(SEQUENCE);
				State = 1807; ((SeqStmtContext)_localctx).end = eos();
				State = 1808; ((SeqStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1811;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==RECOVER) {
					{
					State = 1809; Match(RECOVER);
					State = 1810; ((SeqStmtContext)_localctx).RecoverBlock = recoverBlock();
					}
				}

				State = 1817;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1813; ((SeqStmtContext)_localctx).F = Match(FINALLY);
					State = 1814; eos();
					State = 1815; ((SeqStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1824;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					{
					State = 1819; ((SeqStmtContext)_localctx).e = Match(END);
					State = 1821;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==SEQUENCE) {
						{
						State = 1820; Match(SEQUENCE);
						}
					}

					}
					}
					break;
				case ENDSEQUENCE:
					{
					State = 1823; ((SeqStmtContext)_localctx).e = Match(ENDSEQUENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1826; eos();
				}
				break;

			case 19:
				_localctx = new RepeatStmtContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1828; ((RepeatStmtContext)_localctx).r = Match(REPEAT);
				State = 1829; ((RepeatStmtContext)_localctx).end = eos();
				State = 1830; ((RepeatStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1831; Match(UNTIL);
				State = 1832; ((RepeatStmtContext)_localctx).Expr = expression(0);
				State = 1833; eos();
				}
				break;

			case 20:
				_localctx = new ForeachStmtContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1838;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case FOREACH:
					{
					State = 1835; ((ForeachStmtContext)_localctx).f = Match(FOREACH);
					}
					break;
				case FOR:
					{
					State = 1836; ((ForeachStmtContext)_localctx).f = Match(FOR);
					State = 1837; Match(EACH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1841;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,266,_ctx) ) {
				case 1:
					{
					State = 1840; ((ForeachStmtContext)_localctx).a = Match(AWAIT);
					}
					break;
				}
				State = 1852;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,268,_ctx) ) {
				case 1:
					{
					State = 1843; ((ForeachStmtContext)_localctx).V = Match(IMPLIED);
					State = 1844; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;

				case 2:
					{
					State = 1845; ((ForeachStmtContext)_localctx).Id = varidentifier();
					State = 1848;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==AS) {
						{
						State = 1846; Match(AS);
						State = 1847; ((ForeachStmtContext)_localctx).Type = datatype();
						}
					}

					}
					break;

				case 3:
					{
					State = 1850; ((ForeachStmtContext)_localctx).V = Match(VAR);
					State = 1851; ((ForeachStmtContext)_localctx).Id = varidentifier();
					}
					break;
				}
				State = 1854; Match(IN);
				State = 1855; ((ForeachStmtContext)_localctx).Container = expression(0);
				State = 1856; ((ForeachStmtContext)_localctx).end = eos();
				State = 1857; ((ForeachStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1860;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case NEXT:
					{
					State = 1858; ((ForeachStmtContext)_localctx).e = Match(NEXT);
					}
					break;
				case ENDFOR:
					{
					State = 1859; ((ForeachStmtContext)_localctx).e = Match(ENDFOR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1862; eos();
				}
				break;

			case 21:
				_localctx = new JumpStmtContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1864; ((JumpStmtContext)_localctx).Key = Match(THROW);
				State = 1866;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,270,_ctx) ) {
				case 1:
					{
					State = 1865; ((JumpStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1868; ((JumpStmtContext)_localctx).end = eos();
				}
				break;

			case 22:
				_localctx = new TryStmtContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 1869; ((TryStmtContext)_localctx).T = Match(TRY);
				State = 1870; ((TryStmtContext)_localctx).end = eos();
				State = 1871; ((TryStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1878;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==CATCH) {
					{
					{
					State = 1872; Match(CATCH);
					State = 1874;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,271,_ctx) ) {
					case 1:
						{
						State = 1873; ((TryStmtContext)_localctx)._catchBlock = catchBlock();
						((TryStmtContext)_localctx)._CatchBlock.Add(((TryStmtContext)_localctx)._catchBlock);
						}
						break;
					}
					}
					}
					State = 1880;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 1885;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FINALLY) {
					{
					State = 1881; ((TryStmtContext)_localctx).F = Match(FINALLY);
					State = 1882; eos();
					State = 1883; ((TryStmtContext)_localctx).FinBlock = statementBlock();
					}
				}

				State = 1892;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1887; ((TryStmtContext)_localctx).e = Match(END);
					State = 1889;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==TRY) {
						{
						State = 1888; Match(TRY);
						}
					}

					}
					break;
				case ENDTRY:
					{
					State = 1891; ((TryStmtContext)_localctx).e = Match(ENDTRY);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1894; eos();
				}
				break;

			case 23:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 1896; Match(BEGIN);
				State = 1897; ((BlockStmtContext)_localctx).Key = Match(LOCK);
				State = 1898; ((BlockStmtContext)_localctx).Expr = expression(0);
				State = 1899; ((BlockStmtContext)_localctx).end = eos();
				State = 1900; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1901; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1903;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCK) {
					{
					State = 1902; Match(LOCK);
					}
				}

				State = 1905; eos();
				}
				break;

			case 24:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 1907; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1908; ((YieldStmtContext)_localctx).R = Match(RETURN);
				State = 1911;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					State = 1909; Match(VOID);
					}
					break;

				case 2:
					{
					State = 1910; ((YieldStmtContext)_localctx).Expr = expression(0);
					}
					break;
				}
				State = 1913; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 25:
				_localctx = new YieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 1914; ((YieldStmtContext)_localctx).Y = Match(YIELD);
				State = 1915;
				((YieldStmtContext)_localctx).Break = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BREAK || _la==EXIT) ) {
					((YieldStmtContext)_localctx).Break = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1916; ((YieldStmtContext)_localctx).end = eos();
				}
				break;

			case 26:
				_localctx = new SwitchStmtContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 1918;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==BEGIN || _la==DO) {
					{
					State = 1917;
					_la = _input.La(1);
					if ( !(_la==BEGIN || _la==DO) ) {
					_errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
				}

				State = 1920; ((SwitchStmtContext)_localctx).S = Match(SWITCH);
				State = 1921; ((SwitchStmtContext)_localctx).Expr = expression(0);
				State = 1922; ((SwitchStmtContext)_localctx).end = eos();
				State = 1924;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 1923; ((SwitchStmtContext)_localctx)._switchBlock = switchBlock();
					((SwitchStmtContext)_localctx)._SwitchBlock.Add(((SwitchStmtContext)_localctx)._switchBlock);
					}
					}
					State = 1926;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( _la==CASE || _la==OTHERWISE );
				State = 1928; ((SwitchStmtContext)_localctx).e = Match(END);
				State = 1930;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==SWITCH) {
					{
					State = 1929; Match(SWITCH);
					}
				}

				State = 1932; eos();
				}
				break;

			case 27:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 1934; Match(BEGIN);
				State = 1935; ((BlockStmtContext)_localctx).Key = Match(USING);
				State = 1938;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,281,_ctx) ) {
				case 1:
					{
					State = 1936; ((BlockStmtContext)_localctx).Expr = expression(0);
					}
					break;

				case 2:
					{
					State = 1937; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
					}
					break;
				}
				State = 1940; ((BlockStmtContext)_localctx).end = eos();
				State = 1941; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1942; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1944;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==USING) {
					{
					State = 1943; Match(USING);
					}
				}

				State = 1946; eos();
				}
				break;

			case 28:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 1948; Match(BEGIN);
				State = 1949; ((BlockStmtContext)_localctx).Key = Match(FIXED);
				{
				State = 1950; ((BlockStmtContext)_localctx).VarDecl = variableDeclaration();
				}
				State = 1951; ((BlockStmtContext)_localctx).end = eos();
				State = 1952; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1953; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1955;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==FIXED) {
					{
					State = 1954; Match(FIXED);
					}
				}

				State = 1957; eos();
				}
				break;

			case 29:
				_localctx = new WithBlockContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 1959; Match(WITH);
				State = 1960; ((WithBlockContext)_localctx).Expr = expression(0);
				State = 1966;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 1961; ((WithBlockContext)_localctx).As = Match(AS);
					State = 1962; ((WithBlockContext)_localctx).DataType = datatype();
					State = 1964;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 1963; foxclasslib();
						}
					}

					}
				}

				State = 1968; ((WithBlockContext)_localctx).end = eos();
				State = 1969; ((WithBlockContext)_localctx).StmtBlk = statementBlock();
				State = 1975;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case END:
					{
					State = 1970; ((WithBlockContext)_localctx).e = Match(END);
					State = 1972;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==WITH) {
						{
						State = 1971; Match(WITH);
						}
					}

					}
					break;
				case ENDWITH:
					{
					State = 1974; ((WithBlockContext)_localctx).e = Match(ENDWITH);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1977; eos();
				}
				break;

			case 30:
				_localctx = new BlockStmtContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 1979; Match(BEGIN);
				State = 1980; ((BlockStmtContext)_localctx).Key1 = blockTokens();
				State = 1981; ((BlockStmtContext)_localctx).end = eos();
				State = 1982; ((BlockStmtContext)_localctx).StmtBlk = statementBlock();
				State = 1983; ((BlockStmtContext)_localctx).e = Match(END);
				State = 1985;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) {
					{
					State = 1984; ((BlockStmtContext)_localctx).Key2 = blockTokens();
					}
				}

				State = 1987; eos();
				}
				break;

			case 31:
				_localctx = new FoxexpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 1989; ((FoxexpressionStmtContext)_localctx).Eq = Match(EQ);
				State = 1990; ((FoxexpressionStmtContext)_localctx)._expression = expression(0);
				((FoxexpressionStmtContext)_localctx)._Exprs.Add(((FoxexpressionStmtContext)_localctx)._expression);
				State = 1991; ((FoxexpressionStmtContext)_localctx).end = eos();
				}
				break;

			case 32:
				_localctx = new FoxtextoutStmtContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 1993;
				((FoxtextoutStmtContext)_localctx).B = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==BACKSLASH || _la==BACKBACKSLASH) ) {
					((FoxtextoutStmtContext)_localctx).B = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 1994; ((FoxtextoutStmtContext)_localctx).String = Match(TEXT_STRING_CONST);
				State = 1995; ((FoxtextoutStmtContext)_localctx).end = Match(EOS);
				}
				break;

			case 33:
				_localctx = new DoStmtContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 1996; ((DoStmtContext)_localctx).D = Match(DO);
				State = 1998;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,289,_ctx) ) {
				case 1:
					{
					State = 1997; ((DoStmtContext)_localctx).Amp = Match(AMP);
					}
					break;
				}
				State = 2000; ((DoStmtContext)_localctx).Id = varidentifierName();
				State = 2003;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WITH) {
					{
					State = 2001; Match(WITH);
					State = 2002; ((DoStmtContext)_localctx).ArgList = argumentList();
					}
				}

				State = 2005; ((DoStmtContext)_localctx).end = eos();
				}
				break;

			case 34:
				_localctx = new ExpressionStmtContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2007;
				if (!(validExpressionStmt())) throw new FailedPredicateException(this, "validExpressionStmt()");
				State = 2008; ((ExpressionStmtContext)_localctx)._expression = expression(0);
				((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
				State = 2013;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2009; Match(COMMA);
					State = 2010; ((ExpressionStmtContext)_localctx)._expression = expression(0);
					((ExpressionStmtContext)_localctx)._Exprs.Add(((ExpressionStmtContext)_localctx)._expression);
					}
					}
					State = 2015;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2016; ((ExpressionStmtContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockTokensContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public BlockTokensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockTokens; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBlockTokens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBlockTokens(this);
		}
	}

	[RuleVersion(0)]
	public BlockTokensContext blockTokens() {
		BlockTokensContext _localctx = new BlockTokensContext(_ctx, State);
		EnterRule(_localctx, 156, RULE_blockTokens);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2020;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 106)) & ~0x3f) == 0 && ((1L << (_la - 106)) & ((1L << (SCOPE - 106)) | (1L << (CHECKED - 106)) | (1L << (UNCHECKED - 106)) | (1L << (UNSAFE - 106)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CondBlockContext : XSharpParserRuleContext {
		public IToken st;
		public ExpressionContext Cond;
		public IToken Then;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public CondBlockContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public CondBlockContext(ParserRuleContext parent, int invokingState, IToken st)
			: base(parent, invokingState)
		{
			this.st = st;
		}
		public override int RuleIndex { get { return RULE_condBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondBlock(this);
		}
	}

	[RuleVersion(0)]
	public CondBlockContext condBlock(IToken st) {
		CondBlockContext _localctx = new CondBlockContext(_ctx, State, st);
		EnterRule(_localctx, 158, RULE_condBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2022; _localctx.Cond = expression(0);
			State = 2024;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THEN) {
				{
				State = 2023; _localctx.Then = Match(THEN);
				}
			}

			State = 2026; _localctx.end = eos();
			State = 2027; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockContext : XSharpParserRuleContext {
		public IToken Key;
		public ExpressionContext Const;
		public IToken W;
		public ExpressionContext whenexpr;
		public VaridentifierContext Id;
		public DatatypeContext DataType;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public SwitchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSwitchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSwitchBlock(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockContext switchBlock() {
		SwitchBlockContext _localctx = new SwitchBlockContext(_ctx, State);
		EnterRule(_localctx, 160, RULE_switchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,296,_ctx) ) {
			case 1:
				{
				State = 2029; _localctx.Key = Match(CASE);
				State = 2030; _localctx.Const = expression(0);
				State = 2033;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2031; _localctx.W = Match(WHEN);
					State = 2032; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 2:
				{
				State = 2035; _localctx.Key = Match(CASE);
				State = 2036; _localctx.Id = varidentifier();
				State = 2037; Match(AS);
				State = 2038; _localctx.DataType = datatype();
				State = 2041;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==WHEN) {
					{
					State = 2039; _localctx.W = Match(WHEN);
					State = 2040; _localctx.whenexpr = expression(0);
					}
				}

				}
				break;

			case 3:
				{
				State = 2043; _localctx.Key = Match(OTHERWISE);
				}
				break;
			}
			State = 2046; _localctx.end = eos();
			State = 2047; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken W;
		public ExpressionContext whenexpr;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CatchBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCatchBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCatchBlock(this);
		}
	}

	[RuleVersion(0)]
	public CatchBlockContext catchBlock() {
		CatchBlockContext _localctx = new CatchBlockContext(_ctx, State);
		EnterRule(_localctx, 162, RULE_catchBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				State = 2049; Match(TO);
				}
				break;
			}
			State = 2053;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,298,_ctx) ) {
			case 1:
				{
				State = 2052; _localctx.Id = varidentifier();
				}
				break;
			}
			State = 2057;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2055; Match(AS);
				State = 2056; _localctx.Type = datatype();
				}
			}

			State = 2061;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WHEN) {
				{
				State = 2059; _localctx.W = Match(WHEN);
				State = 2060; _localctx.whenexpr = expression(0);
				}
			}

			State = 2063; _localctx.end = eos();
			State = 2064; _localctx.StmtBlk = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecoverBlockContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public EosContext end;
		public StatementBlockContext StmtBlock;
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public RecoverBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_recoverBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterRecoverBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitRecoverBlock(this);
		}
	}

	[RuleVersion(0)]
	public RecoverBlockContext recoverBlock() {
		RecoverBlockContext _localctx = new RecoverBlockContext(_ctx, State);
		EnterRule(_localctx, 164, RULE_recoverBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2068;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==USING) {
				{
				State = 2066; Match(USING);
				State = 2067; _localctx.Id = varidentifier();
				}
			}

			State = 2070; _localctx.end = eos();
			State = 2071; _localctx.StmtBlock = statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : XSharpParserRuleContext {
		public IToken Var;
		public VariableDeclaratorContext _variableDeclarator;
		public IList<VariableDeclaratorContext> _Decl = new List<VariableDeclaratorContext>();
		public DatatypeContext Type;
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(_ctx, State);
		EnterRule(_localctx, 166, RULE_variableDeclaration);
		int _la;
		try {
			State = 2101;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,307,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2078;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LOCAL:
				case IMPLIED:
					{
					State = 2074;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2073; Match(LOCAL);
						}
					}

					State = 2076; _localctx.Var = Match(IMPLIED);
					}
					break;
				case VAR:
					{
					State = 2077; _localctx.Var = Match(VAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2080; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2085;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2081; Match(COMMA);
					State = 2082; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2087;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2088; Match(LOCAL);
				State = 2089; _localctx._variableDeclarator = variableDeclarator();
				_localctx._Decl.Add(_localctx._variableDeclarator);
				State = 2094;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2090; Match(COMMA);
					State = 2091; _localctx._variableDeclarator = variableDeclarator();
					_localctx._Decl.Add(_localctx._variableDeclarator);
					}
					}
					State = 2096;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2099;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2097; Match(AS);
					State = 2098; _localctx.Type = datatype();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(_ctx, State);
		EnterRule(_localctx, 168, RULE_variableDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2103; _localctx.Id = varidentifier();
			State = 2104; _localctx.Op = assignoperator();
			State = 2105; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocaldeclContext : XSharpParserRuleContext {
		public LocaldeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localdecl; } }
	 
		public LocaldeclContext() { }
		public virtual void CopyFrom(LocaldeclContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CommonLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public LocalvarContext _localvar;
		public IList<LocalvarContext> _LocalVars = new List<LocalvarContext>();
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public LocalvarContext[] localvar() {
			return GetRuleContexts<LocalvarContext>();
		}
		public LocalvarContext localvar(int i) {
			return GetRuleContext<LocalvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public CommonLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCommonLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCommonLocalDecl(this);
		}
	}
	public partial class VarLocalDesignationContext : LocaldeclContext {
		public DesignationExprContext Designation;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public DesignationExprContext designationExpr() {
			return GetRuleContext<DesignationExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public VarLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDesignation(this);
		}
	}
	public partial class VarLocalDeclContext : LocaldeclContext {
		public IToken Static;
		public ImpliedvarContext _impliedvar;
		public IList<ImpliedvarContext> _ImpliedVars = new List<ImpliedvarContext>();
		public EosContext end;
		public IToken Using;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ImpliedvarContext[] impliedvar() {
			return GetRuleContexts<ImpliedvarContext>();
		}
		public ImpliedvarContext impliedvar(int i) {
			return GetRuleContext<ImpliedvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode STATIC() { return GetToken(XSharpParser.STATIC, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public VarLocalDeclContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVarLocalDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVarLocalDecl(this);
		}
	}
	public partial class TypeLocalDesignationContext : LocaldeclContext {
		public DesignationTypeExprContext DesignationType;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public EosContext end;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public DesignationTypeExprContext designationTypeExpr() {
			return GetRuleContext<DesignationTypeExprContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public TypeLocalDesignationContext(LocaldeclContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocaldeclContext localdecl() {
		LocaldeclContext _localctx = new LocaldeclContext(_ctx, State);
		EnterRule(_localctx, 170, RULE_localdecl);
		int _la;
		try {
			State = 2240;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,325,_ctx) ) {
			case 1:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2107; Match(LOCAL);
				State = 2109;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,308,_ctx) ) {
				case 1:
					{
					State = 2108; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
					}
					break;
				}
				State = 2111; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2116;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2112; Match(COMMA);
					State = 2113; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2118;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2119; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 2:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2121; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2122; Match(LOCAL);
				State = 2123; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2128;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2124; Match(COMMA);
					State = 2125; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2130;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2131; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 3:
				_localctx = new CommonLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2133;
				if (!(!XSharpLexer.IsKeyword(InputStream.La(2)))) throw new FailedPredicateException(this, "!XSharpLexer.IsKeyword(InputStream.La(2))");
				State = 2134; ((CommonLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2135; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
				((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
				State = 2140;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2136; Match(COMMA);
					State = 2137; ((CommonLocalDeclContext)_localctx)._localvar = localvar();
					((CommonLocalDeclContext)_localctx)._LocalVars.Add(((CommonLocalDeclContext)_localctx)._localvar);
					}
					}
					State = 2142;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2143; ((CommonLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 4:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2146;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2145; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2148; Match(VAR);
				State = 2149; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2154;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2150; Match(COMMA);
					State = 2151; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2156;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2157; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 5:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2159; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
				State = 2161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2160; Match(LOCAL);
					}
				}

				State = 2163; Match(IMPLIED);
				State = 2164; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2169;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2165; Match(COMMA);
					State = 2166; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2171;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2172; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 6:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2174; Match(LOCAL);
				State = 2176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2175; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2178; Match(IMPLIED);
				State = 2179; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2184;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2180; Match(COMMA);
					State = 2181; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2186;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2187; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 7:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2189; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2191;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2190; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2193; Match(VAR);
				State = 2194; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2199;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2195; Match(COMMA);
					State = 2196; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2201;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2202; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 8:
				_localctx = new VarLocalDeclContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2204; ((VarLocalDeclContext)_localctx).Using = Match(USING);
				State = 2206;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==STATIC) {
					{
					State = 2205; ((VarLocalDeclContext)_localctx).Static = Match(STATIC);
					}
				}

				State = 2209;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LOCAL) {
					{
					State = 2208; Match(LOCAL);
					}
				}

				State = 2211; Match(IMPLIED);
				State = 2212; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
				((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
				State = 2217;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2213; Match(COMMA);
					State = 2214; ((VarLocalDeclContext)_localctx)._impliedvar = impliedvar();
					((VarLocalDeclContext)_localctx)._ImpliedVars.Add(((VarLocalDeclContext)_localctx)._impliedvar);
					}
					}
					State = 2219;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2220; ((VarLocalDeclContext)_localctx).end = eos();
				}
				break;

			case 9:
				_localctx = new VarLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2227;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case VAR:
					{
					State = 2222; Match(VAR);
					}
					break;
				case LOCAL:
				case IMPLIED:
					{
					State = 2224;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LOCAL) {
						{
						State = 2223; Match(LOCAL);
						}
					}

					State = 2226; Match(IMPLIED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2229; ((VarLocalDesignationContext)_localctx).Designation = designationExpr();
				State = 2230; ((VarLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2231; ((VarLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2232; ((VarLocalDesignationContext)_localctx).end = eos();
				}
				break;

			case 10:
				_localctx = new TypeLocalDesignationContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2234; Match(LOCAL);
				State = 2235; ((TypeLocalDesignationContext)_localctx).DesignationType = designationTypeExpr();
				State = 2236; ((TypeLocalDesignationContext)_localctx).Op = assignoperator();
				State = 2237; ((TypeLocalDesignationContext)_localctx).Expression = expression(0);
				State = 2238; ((TypeLocalDesignationContext)_localctx).end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalvarContext : XSharpParserRuleContext {
		public IToken Const;
		public IToken Dim;
		public VaridentifierContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public IToken As;
		public DatatypeContext DataType;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalvar(this);
		}
	}

	[RuleVersion(0)]
	public LocalvarContext localvar() {
		LocalvarContext _localctx = new LocalvarContext(_ctx, State);
		EnterRule(_localctx, 172, RULE_localvar);
		int _la;
		try {
			State = 2284;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,335,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2243;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					State = 2242; _localctx.Const = Match(CONST);
					}
					break;
				}
				State = 2246;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					State = 2245; _localctx.Dim = Match(DIM);
					}
					break;
				}
				State = 2248; _localctx.Id = varidentifier();
				State = 2253;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LBRKT) {
					{
					State = 2249; Match(LBRKT);
					State = 2250; _localctx.ArraySub = arraysub();
					State = 2251; Match(RBRKT);
					}
				}

				State = 2258;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2255; _localctx.Op = assignoperator();
					State = 2256; _localctx.Expression = expression(0);
					}
				}

				State = 2265;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2260;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2261; _localctx.DataType = datatype();
					State = 2263;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2262; foxclasslib();
						}
					}

					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2267;
				if (!(IsFox)) throw new FailedPredicateException(this, "IsFox");
				State = 2268; _localctx.Id = varidentifier();
				State = 2269; Match(LPAREN);
				State = 2270; _localctx.ArraySub = arraysub();
				State = 2271; Match(RPAREN);
				State = 2275;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==EQ || _la==ASSIGN_OP) {
					{
					State = 2272; _localctx.Op = assignoperator();
					State = 2273; _localctx.Expression = expression(0);
					}
				}

				State = 2282;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS || _la==IS) {
					{
					State = 2277;
					_localctx.As = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==AS || _la==IS) ) {
						_localctx.As = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					State = 2278; _localctx.DataType = datatype();
					State = 2280;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==OF) {
						{
						State = 2279; foxclasslib();
						}
					}

					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImpliedvarContext : XSharpParserRuleContext {
		public IToken Const;
		public VaridentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ImpliedvarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_impliedvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterImpliedvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitImpliedvar(this);
		}
	}

	[RuleVersion(0)]
	public ImpliedvarContext impliedvar() {
		ImpliedvarContext _localctx = new ImpliedvarContext(_ctx, State);
		EnterRule(_localctx, 174, RULE_impliedvar);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2287;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,336,_ctx) ) {
			case 1:
				{
				State = 2286; _localctx.Const = Match(CONST);
				}
				break;
			}
			State = 2289; _localctx.Id = varidentifier();
			State = 2290; _localctx.Op = assignoperator();
			State = 2291; _localctx.Expression = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FielddeclContext : XSharpParserRuleContext {
		public IdentifierNameContext _identifierName;
		public IList<IdentifierNameContext> _Fields = new List<IdentifierNameContext>();
		public IdentifierNameContext Alias;
		public EosContext end;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public IdentifierNameContext[] identifierName() {
			return GetRuleContexts<IdentifierNameContext>();
		}
		public IdentifierNameContext identifierName(int i) {
			return GetRuleContext<IdentifierNameContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public FielddeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fielddecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFielddecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFielddecl(this);
		}
	}

	[RuleVersion(0)]
	public FielddeclContext fielddecl() {
		FielddeclContext _localctx = new FielddeclContext(_ctx, State);
		EnterRule(_localctx, 176, RULE_fielddecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293; Match(FIELD);
			State = 2294; _localctx._identifierName = identifierName();
			_localctx._Fields.Add(_localctx._identifierName);
			State = 2299;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2295; Match(COMMA);
				State = 2296; _localctx._identifierName = identifierName();
				_localctx._Fields.Add(_localctx._identifierName);
				}
				}
				State = 2301;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2304;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 2302; Match(IN);
				State = 2303; _localctx.Alias = identifierName();
				}
			}

			State = 2306; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public MemvarContext _memvar;
		public IList<MemvarContext> _Vars = new List<MemvarContext>();
		public EosContext end;
		public MemvarContext[] memvar() {
			return GetRuleContexts<MemvarContext>();
		}
		public MemvarContext memvar(int i) {
			return GetRuleContext<MemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public MemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public MemvardeclContext memvardecl() {
		MemvardeclContext _localctx = new MemvardeclContext(_ctx, State);
		EnterRule(_localctx, 178, RULE_memvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2308;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2309; _localctx._memvar = memvar(_localctx.T);
			_localctx._Vars.Add(_localctx._memvar);
			State = 2314;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2310; Match(COMMA);
				State = 2311; _localctx._memvar = memvar(_localctx.T);
				_localctx._Vars.Add(_localctx._memvar);
				}
				}
				State = 2316;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2317; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ArraysubContext ArraySub;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ArraysubContext arraysub() {
			return GetRuleContext<ArraysubContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public MemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_memvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemvar(this);
		}
	}

	[RuleVersion(0)]
	public MemvarContext memvar(IToken T) {
		MemvarContext _localctx = new MemvarContext(_ctx, State, T);
		EnterRule(_localctx, 180, RULE_memvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2320;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,340,_ctx) ) {
			case 1:
				{
				State = 2319; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2322; _localctx.Id = varidentifierName();
			State = 2327;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT) {
				{
				State = 2323; Match(LBRKT);
				State = 2324; _localctx.ArraySub = arraysub();
				State = 2325; Match(RBRKT);
				}
			}

			State = 2332;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2329; _localctx.Op = assignoperator();
				State = 2330; _localctx.Expression = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxmemvarContext _foxmemvar;
		public IList<FoxmemvarContext> _FoxVars = new List<FoxmemvarContext>();
		public EosContext end;
		public FoxmemvarContext[] foxmemvar() {
			return GetRuleContexts<FoxmemvarContext>();
		}
		public FoxmemvarContext foxmemvar(int i) {
			return GetRuleContext<FoxmemvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxmemvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmemvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvardeclContext foxmemvardecl() {
		FoxmemvardeclContext _localctx = new FoxmemvardeclContext(_ctx, State);
		EnterRule(_localctx, 182, RULE_foxmemvardecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2334;
			_localctx.T = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MEMVAR) | (1L << PARAMETERS) | (1L << PRIVATE) | (1L << PUBLIC))) != 0)) ) {
				_localctx.T = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2335; _localctx._foxmemvar = foxmemvar(_localctx.T);
			_localctx._FoxVars.Add(_localctx._foxmemvar);
			State = 2340;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2336; Match(COMMA);
				State = 2337; _localctx._foxmemvar = foxmemvar(_localctx.T);
				_localctx._FoxVars.Add(_localctx._foxmemvar);
				}
				}
				State = 2342;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2343; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvardeclContext : XSharpParserRuleContext {
		public IToken T;
		public FoxdimvarContext _foxdimvar;
		public IList<FoxdimvarContext> _DimVars = new List<FoxdimvarContext>();
		public EosContext end;
		public FoxdimvarContext[] foxdimvar() {
			return GetRuleContexts<FoxdimvarContext>();
		}
		public FoxdimvarContext foxdimvar(int i) {
			return GetRuleContext<FoxdimvarContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public FoxdimvardeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxdimvardecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvardecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvardecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvardeclContext foxdimvardecl() {
		FoxdimvardeclContext _localctx = new FoxdimvardeclContext(_ctx, State);
		EnterRule(_localctx, 184, RULE_foxdimvardecl);
		int _la;
		try {
			State = 2382;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case DECLARE:
			case DIMENSION:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2345;
				_localctx.T = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==DECLARE || _la==DIMENSION) ) {
					_localctx.T = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2346; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2351;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2347; Match(COMMA);
					State = 2348; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2353;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2354; _localctx.end = eos();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2356; _localctx.T = Match(PUBLIC);
				State = 2358;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,345,_ctx) ) {
				case 1:
					{
					State = 2357; Match(ARRAY);
					}
					break;
				}
				State = 2360; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2365;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2361; Match(COMMA);
					State = 2362; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2367;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2368; _localctx.end = eos();
				}
				break;
			case LOCAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2370; _localctx.T = Match(LOCAL);
				State = 2371; Match(ARRAY);
				State = 2372; _localctx._foxdimvar = foxdimvar(_localctx.T);
				_localctx._DimVars.Add(_localctx._foxdimvar);
				State = 2377;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2373; Match(COMMA);
					State = 2374; _localctx._foxdimvar = foxdimvar(_localctx.T);
					_localctx._DimVars.Add(_localctx._foxdimvar);
					}
					}
					State = 2379;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2380; _localctx.end = eos();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparametersContext : XSharpParserRuleContext {
		public IToken T;
		public FoxlparameterContext _foxlparameter;
		public IList<FoxlparameterContext> _LParameters = new List<FoxlparameterContext>();
		public EosContext end;
		public ITerminalNode LPARAMETERS() { return GetToken(XSharpParser.LPARAMETERS, 0); }
		public FoxlparameterContext[] foxlparameter() {
			return GetRuleContexts<FoxlparameterContext>();
		}
		public FoxlparameterContext foxlparameter(int i) {
			return GetRuleContext<FoxlparameterContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxlparametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxlparameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameters(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparametersContext foxlparameters() {
		FoxlparametersContext _localctx = new FoxlparametersContext(_ctx, State);
		EnterRule(_localctx, 186, RULE_foxlparameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2384; _localctx.T = Match(LPARAMETERS);
			State = 2385; _localctx._foxlparameter = foxlparameter(_localctx.T);
			_localctx._LParameters.Add(_localctx._foxlparameter);
			State = 2390;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2386; Match(COMMA);
				State = 2387; _localctx._foxlparameter = foxlparameter(_localctx.T);
				_localctx._LParameters.Add(_localctx._foxlparameter);
				}
				}
				State = 2392;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2393; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxdimvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Dims = new List<ExpressionContext>();
		public FoxtypedeclContext XT;
		public ExpressionContext Expr;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxdimvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxdimvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxdimvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxdimvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxdimvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxdimvarContext foxdimvar(IToken T) {
		FoxdimvarContext _localctx = new FoxdimvarContext(_ctx, State, T);
		EnterRule(_localctx, 188, RULE_foxdimvar);
		int _la;
		try {
			State = 2454;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,359,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2396;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,350,_ctx) ) {
				case 1:
					{
					State = 2395; _localctx.Amp = Match(AMP);
					}
					break;
				}
				State = 2398; _localctx.Id = varidentifierName();
				State = 2421;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2399; Match(LBRKT);
					State = 2400; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2405;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2401; Match(COMMA);
						State = 2402; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2407;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2408; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2410; Match(LPAREN);
					State = 2411; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2416;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2412; Match(COMMA);
						State = 2413; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2418;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2419; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2424;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2423; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2426; _localctx.Expr = expression(0);
				State = 2449;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case LBRKT:
					{
					State = 2427; Match(LBRKT);
					State = 2428; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2433;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2429; Match(COMMA);
						State = 2430; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2435;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2436; Match(RBRKT);
					}
					break;
				case LPAREN:
					{
					State = 2438; Match(LPAREN);
					State = 2439; _localctx._expression = expression(0);
					_localctx._Dims.Add(_localctx._expression);
					State = 2444;
					_errHandler.Sync(this);
					_la = _input.La(1);
					while (_la==COMMA) {
						{
						{
						State = 2440; Match(COMMA);
						State = 2441; _localctx._expression = expression(0);
						_localctx._Dims.Add(_localctx._expression);
						}
						}
						State = 2446;
						_errHandler.Sync(this);
						_la = _input.La(1);
					}
					State = 2447; Match(RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2452;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 2451; _localctx.XT = foxtypedecl();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclasslibContext : XSharpParserRuleContext {
		public IToken Of;
		public IdentifierNameContext ClassLib;
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public FoxclasslibContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclasslib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclasslib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclasslib(this);
		}
	}

	[RuleVersion(0)]
	public FoxclasslibContext foxclasslib() {
		FoxclasslibContext _localctx = new FoxclasslibContext(_ctx, State);
		EnterRule(_localctx, 190, RULE_foxclasslib);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2456; _localctx.Of = Match(OF);
			State = 2457; _localctx.ClassLib = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxlparameterContext : XSharpParserRuleContext {
		public IToken T;
		public VaridentifierNameContext Name;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxlparameterContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxlparameterContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxlparameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxlparameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxlparameter(this);
		}
	}

	[RuleVersion(0)]
	public FoxlparameterContext foxlparameter(IToken T) {
		FoxlparameterContext _localctx = new FoxlparameterContext(_ctx, State, T);
		EnterRule(_localctx, 192, RULE_foxlparameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2459; _localctx.Name = varidentifierName();
			State = 2461;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2460; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxtypedeclContext : XSharpParserRuleContext {
		public IToken As;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public FoxtypedeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxtypedecl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxtypedecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxtypedecl(this);
		}
	}

	[RuleVersion(0)]
	public FoxtypedeclContext foxtypedecl() {
		FoxtypedeclContext _localctx = new FoxtypedeclContext(_ctx, State);
		EnterRule(_localctx, 194, RULE_foxtypedecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2463; _localctx.As = Match(AS);
			State = 2464; _localctx.Type = datatype();
			State = 2466;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 2465; foxclasslib();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmemvarContext : XSharpParserRuleContext {
		public IToken T;
		public IToken Amp;
		public VaridentifierNameContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expression;
		public FoxtypedeclContext XT;
		public VaridentifierNameContext varidentifierName() {
			return GetRuleContext<VaridentifierNameContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxtypedeclContext foxtypedecl() {
			return GetRuleContext<FoxtypedeclContext>(0);
		}
		public FoxmemvarContext(ParserRuleContext parent, int invokingState) : base(parent, invokingState) { }
		public FoxmemvarContext(ParserRuleContext parent, int invokingState, IToken T)
			: base(parent, invokingState)
		{
			this.T = T;
		}
		public override int RuleIndex { get { return RULE_foxmemvar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmemvar(this);
		}
	}

	[RuleVersion(0)]
	public FoxmemvarContext foxmemvar(IToken T) {
		FoxmemvarContext _localctx = new FoxmemvarContext(_ctx, State, T);
		EnterRule(_localctx, 196, RULE_foxmemvar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2469;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,362,_ctx) ) {
			case 1:
				{
				State = 2468; _localctx.Amp = Match(AMP);
				}
				break;
			}
			State = 2471; _localctx.Id = varidentifierName();
			State = 2475;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EQ || _la==ASSIGN_OP) {
				{
				State = 2472; _localctx.Op = assignoperator();
				State = 2473; _localctx.Expression = expression(0);
				}
			}

			State = 2478;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 2477; _localctx.XT = foxtypedecl();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocContext : XSharpParserRuleContext {
		public LocalfuncprocModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public LocalfuncprocModifiersContext localfuncprocModifiers() {
			return GetRuleContext<LocalfuncprocModifiersContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public LocalfuncprocContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncproc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncproc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncproc(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocContext localfuncproc() {
		LocalfuncprocContext _localctx = new LocalfuncprocContext(_ctx, State);
		EnterRule(_localctx, 198, RULE_localfuncproc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2481;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC || _la==UNSAFE) {
				{
				State = 2480; _localctx.Modifiers = localfuncprocModifiers();
				}
			}

			State = 2483; Match(LOCAL);
			State = 2484; _localctx.T = funcproctype();
			State = 2485; _localctx.Sig = signature();
			State = 2486; _localctx.end = eos();
			State = 2487; _localctx.StmtBlk = statementBlock();
			State = 2491;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDFUNC:
			case ENDPROC:
				{
				State = 2488;
				_localctx.T1 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
					_localctx.T1 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
				break;
			case END:
				{
				{
				State = 2489; Match(END);
				State = 2490; _localctx.T2 = funcproctype();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2493; Match(EOS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalfuncprocModifiersContext : XSharpParserRuleContext {
		public IToken _UNSAFE;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASYNC;
		public IToken _tset6640;
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public LocalfuncprocModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localfuncprocModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalfuncprocModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalfuncprocModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalfuncprocModifiersContext localfuncprocModifiers() {
		LocalfuncprocModifiersContext _localctx = new LocalfuncprocModifiersContext(_ctx, State);
		EnterRule(_localctx, 200, RULE_localfuncprocModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 2495;
				_localctx._tset6640 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
					_localctx._tset6640 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset6640);
				}
				}
				State = 2498;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ASYNC || _la==UNSAFE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignoperatorContext : XSharpParserRuleContext {
		public IToken Op;
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public AssignoperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignoperator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignoperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignoperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignoperatorContext assignoperator() {
		AssignoperatorContext _localctx = new AssignoperatorContext(_ctx, State);
		EnterRule(_localctx, 202, RULE_assignoperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2500;
			_localctx.Op = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==EQ || _la==ASSIGN_OP) ) {
				_localctx.Op = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : XSharpParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : ExpressionContext {
		public PrimaryContext Expr;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public PrimaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}
	public partial class CondAccessExprContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public CondAccessExprContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCondAccessExpr(this);
		}
	}
	public partial class AwaitExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AwaitExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAwaitExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAwaitExpression(this);
		}
	}
	public partial class AccessMemberWithContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public AccessMemberWithContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberWith(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberWith(this);
		}
	}
	public partial class XFunctionExpressionContext : ExpressionContext {
		public XbaseFuncContext XFunc;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public XbaseFuncContext xbaseFunc() {
			return GetRuleContext<XbaseFuncContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public XFunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXFunctionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXFunctionExpression(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ITerminalNode ASSIGN_ADD() { return GetToken(XSharpParser.ASSIGN_ADD, 0); }
		public ITerminalNode ASSIGN_SUB() { return GetToken(XSharpParser.ASSIGN_SUB, 0); }
		public ITerminalNode ASSIGN_EXP() { return GetToken(XSharpParser.ASSIGN_EXP, 0); }
		public ITerminalNode ASSIGN_MUL() { return GetToken(XSharpParser.ASSIGN_MUL, 0); }
		public ITerminalNode ASSIGN_DIV() { return GetToken(XSharpParser.ASSIGN_DIV, 0); }
		public ITerminalNode ASSIGN_MOD() { return GetToken(XSharpParser.ASSIGN_MOD, 0); }
		public ITerminalNode ASSIGN_BITAND() { return GetToken(XSharpParser.ASSIGN_BITAND, 0); }
		public ITerminalNode ASSIGN_BITOR() { return GetToken(XSharpParser.ASSIGN_BITOR, 0); }
		public ITerminalNode ASSIGN_LSHIFT() { return GetToken(XSharpParser.ASSIGN_LSHIFT, 0); }
		public ITerminalNode ASSIGN_RSHIFT() { return GetToken(XSharpParser.ASSIGN_RSHIFT, 0); }
		public ITerminalNode ASSIGN_XOR() { return GetToken(XSharpParser.ASSIGN_XOR, 0); }
		public ITerminalNode ASSIGN_QQMARK() { return GetToken(XSharpParser.ASSIGN_QQMARK, 0); }
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}
	public partial class StackAllocExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StackAllocExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterStackAllocExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitStackAllocExpression(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public ExpressionContext Right;
		public IToken Gt;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode MULT() { return GetToken(XSharpParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(XSharpParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(XSharpParser.MOD, 0); }
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode LSHIFT() { return GetToken(XSharpParser.LSHIFT, 0); }
		public ITerminalNode[] GT() { return GetTokens(XSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(XSharpParser.GT, i);
		}
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode LTE() { return GetToken(XSharpParser.LTE, 0); }
		public ITerminalNode GTE() { return GetToken(XSharpParser.GTE, 0); }
		public ITerminalNode EQ() { return GetToken(XSharpParser.EQ, 0); }
		public ITerminalNode EEQ() { return GetToken(XSharpParser.EEQ, 0); }
		public ITerminalNode SUBSTR() { return GetToken(XSharpParser.SUBSTR, 0); }
		public ITerminalNode NEQ() { return GetToken(XSharpParser.NEQ, 0); }
		public ITerminalNode NEQ2() { return GetToken(XSharpParser.NEQ2, 0); }
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode PIPE() { return GetToken(XSharpParser.PIPE, 0); }
		public ITerminalNode LOGIC_AND() { return GetToken(XSharpParser.LOGIC_AND, 0); }
		public ITerminalNode AND() { return GetToken(XSharpParser.AND, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode LOGIC_XOR() { return GetToken(XSharpParser.LOGIC_XOR, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode LOGIC_OR() { return GetToken(XSharpParser.LOGIC_OR, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode QQMARK() { return GetToken(XSharpParser.QQMARK, 0); }
		public ITerminalNode DOTDOT() { return GetToken(XSharpParser.DOTDOT, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBinaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBinaryExpression(this);
		}
	}
	public partial class TypeCastContext : ExpressionContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeCastContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCast(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCast(this);
		}
	}
	public partial class PrefixExpressionContext : ExpressionContext {
		public IToken Op;
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(XSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(XSharpParser.MINUS, 0); }
		public ITerminalNode TILDE() { return GetToken(XSharpParser.TILDE, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode LOGIC_NOT() { return GetToken(XSharpParser.LOGIC_NOT, 0); }
		public ITerminalNode NOT() { return GetToken(XSharpParser.NOT, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public PrefixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPrefixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPrefixExpression(this);
		}
	}
	public partial class TypeCheckExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public IToken Not;
		public IToken Null;
		public DatatypeContext Type;
		public VaridentifierContext Id;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public TypeCheckExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeCheckExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeCheckExpression(this);
		}
	}
	public partial class AccessMemberLateContext : ExpressionContext {
		public ExpressionContext Left;
		public IToken Op;
		public IdentifierNameContext Name;
		public ExpressionContext Right;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberLateContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMemberLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMemberLate(this);
		}
	}
	public partial class ArrayAccessContext : ExpressionContext {
		public ExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public ArrayAccessContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayAccess(this);
		}
	}
	public partial class AccessMemberContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public AccessMemberContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAccessMember(this);
		}
	}
	public partial class PostfixExpressionContext : ExpressionContext {
		public ExpressionContext Expr;
		public IToken Op;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode INC() { return GetToken(XSharpParser.INC, 0); }
		public ITerminalNode DEC() { return GetToken(XSharpParser.DEC, 0); }
		public PostfixExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}
	public partial class MethodCallContext : ExpressionContext {
		public ExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 204;
		EnterRecursionRule(_localctx, 204, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2539;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				_localctx = new AccessMemberContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2503;
				((AccessMemberContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLON - 292)) | (1L << (DOT - 292)) | (1L << (COLONCOLON - 292)))) != 0)) ) {
					((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2504; ((AccessMemberContext)_localctx).Name = simpleName();
				}
				break;

			case 2:
				{
				_localctx = new AccessMemberLateContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2505;
				((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 292)) & ~0x3f) == 0 && ((1L << (_la - 292)) & ((1L << (COLON - 292)) | (1L << (DOT - 292)) | (1L << (COLONCOLON - 292)))) != 0)) ) {
					((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2506; Match(AMP);
				State = 2512;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,368,_ctx) ) {
				case 1:
					{
					State = 2507; ((AccessMemberLateContext)_localctx).Name = identifierName();
					}
					break;

				case 2:
					{
					State = 2508; Match(LPAREN);
					State = 2509; ((AccessMemberLateContext)_localctx).Right = expression(0);
					State = 2510; Match(RPAREN);
					}
					break;
				}
				}
				break;

			case 3:
				{
				_localctx = new XFunctionExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2514; ((XFunctionExpressionContext)_localctx).XFunc = xbaseFunc();
				State = 2515; Match(LPAREN);
				State = 2516; ((XFunctionExpressionContext)_localctx).ArgList = argumentList();
				State = 2517; Match(RPAREN);
				}
				break;

			case 4:
				{
				_localctx = new TypeCastContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2519;
				if (!(IsTypeCastAllowed() )) throw new FailedPredicateException(this, "IsTypeCastAllowed() ");
				State = 2520; Match(LPAREN);
				State = 2521; ((TypeCastContext)_localctx).Type = datatype();
				State = 2522; Match(RPAREN);
				State = 2523; ((TypeCastContext)_localctx).Expr = expression(26);
				}
				break;

			case 5:
				{
				_localctx = new AwaitExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2525; ((AwaitExpressionContext)_localctx).Op = Match(AWAIT);
				State = 2526; ((AwaitExpressionContext)_localctx).Expr = expression(24);
				}
				break;

			case 6:
				{
				_localctx = new StackAllocExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2527;
				if (!(InputStream.La(2) != LPAREN )) throw new FailedPredicateException(this, "InputStream.La(2) != LPAREN ");
				State = 2528; ((StackAllocExpressionContext)_localctx).Op = Match(STACKALLOC);
				State = 2529; ((StackAllocExpressionContext)_localctx).Expr = expression(23);
				}
				break;

			case 7:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2530;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 245)) & ~0x3f) == 0 && ((1L << (_la - 245)) & ((1L << (INC - 245)) | (1L << (DEC - 245)) | (1L << (PLUS - 245)) | (1L << (MINUS - 245)) | (1L << (EXP - 245)) | (1L << (TILDE - 245)) | (1L << (ADDROF - 245)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2531; ((PrefixExpressionContext)_localctx).Expr = expression(22);
				}
				break;

			case 8:
				{
				_localctx = new PrefixExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2532;
				((PrefixExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 260)) & ~0x3f) == 0 && ((1L << (_la - 260)) & ((1L << (NOT - 260)) | (1L << (LOGIC_NOT - 260)) | (1L << (FOX_NOT - 260)))) != 0)) ) {
					((PrefixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2533; ((PrefixExpressionContext)_localctx).Expr = expression(9);
				}
				break;

			case 9:
				{
				_localctx = new BinaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2534; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
				State = 2536;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					State = 2535; ((BinaryExpressionContext)_localctx).Right = expression(0);
					}
					break;
				}
				}
				break;

			case 10:
				{
				_localctx = new PrimaryExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2538; ((PrimaryExpressionContext)_localctx).Expr = primary();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 2644;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2642;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,376,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2541;
						if (!(Precpred(_ctx, 18))) throw new FailedPredicateException(this, "Precpred(_ctx, 18)");
						State = 2542; ((BinaryExpressionContext)_localctx).Op = Match(EXP);
						State = 2543; ((BinaryExpressionContext)_localctx).Right = expression(19);
						}
						break;

					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2544;
						if (!(Precpred(_ctx, 17))) throw new FailedPredicateException(this, "Precpred(_ctx, 17)");
						State = 2545;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (DIV - 249)) | (1L << (MOD - 249)) | (1L << (MULT - 249)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2546; ((BinaryExpressionContext)_localctx).Right = expression(18);
						}
						break;

					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2547;
						if (!(Precpred(_ctx, 16))) throw new FailedPredicateException(this, "Precpred(_ctx, 16)");
						State = 2548;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2549; ((BinaryExpressionContext)_localctx).Right = expression(17);
						}
						break;

					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2550;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 2551; ((BinaryExpressionContext)_localctx).Op = Match(LSHIFT);
						State = 2552; ((BinaryExpressionContext)_localctx).Right = expression(16);
						}
						break;

					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2553;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 2554; ((BinaryExpressionContext)_localctx).Op = Match(GT);
						State = 2555; ((BinaryExpressionContext)_localctx).Gt = Match(GT);
						State = 2556; ((BinaryExpressionContext)_localctx).Right = expression(15);
						}
						break;

					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2557;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 2558;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 236)) & ~0x3f) == 0 && ((1L << (_la - 236)) & ((1L << (LT - 236)) | (1L << (LTE - 236)) | (1L << (GT - 236)) | (1L << (GTE - 236)) | (1L << (EQ - 236)) | (1L << (EEQ - 236)) | (1L << (SUBSTR - 236)) | (1L << (NEQ - 236)) | (1L << (NEQ2 - 236)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2559; ((BinaryExpressionContext)_localctx).Right = expression(14);
						}
						break;

					case 7:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2560;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 2561; ((BinaryExpressionContext)_localctx).Op = Match(AMP);
						State = 2562; ((BinaryExpressionContext)_localctx).Right = expression(13);
						}
						break;

					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2563;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 2564; ((BinaryExpressionContext)_localctx).Op = Match(TILDE);
						State = 2565; ((BinaryExpressionContext)_localctx).Right = expression(12);
						}
						break;

					case 9:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2566;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 2567; ((BinaryExpressionContext)_localctx).Op = Match(PIPE);
						State = 2568; ((BinaryExpressionContext)_localctx).Right = expression(11);
						}
						break;

					case 10:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2569;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 2570;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 258)) & ~0x3f) == 0 && ((1L << (_la - 258)) & ((1L << (AND - 258)) | (1L << (LOGIC_AND - 258)) | (1L << (FOX_AND - 258)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2571; ((BinaryExpressionContext)_localctx).Right = expression(9);
						}
						break;

					case 11:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2572;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 2573;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==LOGIC_XOR || _la==FOX_XOR) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2574; ((BinaryExpressionContext)_localctx).Right = expression(8);
						}
						break;

					case 12:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2575;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2576;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & ((1L << (OR - 259)) | (1L << (LOGIC_OR - 259)) | (1L << (FOX_OR - 259)))) != 0)) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2577; ((BinaryExpressionContext)_localctx).Right = expression(7);
						}
						break;

					case 13:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2578;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2579;
						((BinaryExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==DEFAULT || _la==QQMARK) ) {
							((BinaryExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2580; ((BinaryExpressionContext)_localctx).Right = expression(6);
						}
						break;

					case 14:
						{
						_localctx = new AssignmentExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((AssignmentExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2581;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 2582;
						((AssignmentExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(((((_la - 265)) & ~0x3f) == 0 && ((1L << (_la - 265)) & ((1L << (ASSIGN_OP - 265)) | (1L << (ASSIGN_ADD - 265)) | (1L << (ASSIGN_SUB - 265)) | (1L << (ASSIGN_EXP - 265)) | (1L << (ASSIGN_MUL - 265)) | (1L << (ASSIGN_DIV - 265)) | (1L << (ASSIGN_MOD - 265)) | (1L << (ASSIGN_BITAND - 265)) | (1L << (ASSIGN_BITOR - 265)) | (1L << (ASSIGN_LSHIFT - 265)) | (1L << (ASSIGN_RSHIFT - 265)) | (1L << (ASSIGN_XOR - 265)) | (1L << (ASSIGN_QQMARK - 265)))) != 0)) ) {
							((AssignmentExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2583; ((AssignmentExpressionContext)_localctx).Right = expression(2);
						}
						break;

					case 15:
						{
						_localctx = new AccessMemberContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2584;
						if (!(Precpred(_ctx, 35))) throw new FailedPredicateException(this, "Precpred(_ctx, 35)");
						State = 2585;
						((AccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2586; ((AccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 16:
						{
						_localctx = new AccessMemberWithContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberWithContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2587;
						if (!(Precpred(_ctx, 33))) throw new FailedPredicateException(this, "Precpred(_ctx, 33)");
						State = 2588;
						((AccessMemberWithContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberWithContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2589; Match(LPAREN);
						State = 2590; ((AccessMemberWithContext)_localctx).Right = expression(0);
						State = 2591; Match(RPAREN);
						}
						break;

					case 17:
						{
						_localctx = new AccessMemberLateContext(new ExpressionContext(_parentctx, _parentState));
						((AccessMemberLateContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2593;
						if (!(Precpred(_ctx, 32))) throw new FailedPredicateException(this, "Precpred(_ctx, 32)");
						State = 2594;
						((AccessMemberLateContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((AccessMemberLateContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2595; Match(AMP);
						State = 2601;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,371,_ctx) ) {
						case 1:
							{
							State = 2596; ((AccessMemberLateContext)_localctx).Name = identifierName();
							}
							break;

						case 2:
							{
							State = 2597; Match(LPAREN);
							State = 2598; ((AccessMemberLateContext)_localctx).Right = expression(0);
							State = 2599; Match(RPAREN);
							}
							break;
						}
						}
						break;

					case 18:
						{
						_localctx = new MethodCallContext(new ExpressionContext(_parentctx, _parentState));
						((MethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2603;
						if (!(Precpred(_ctx, 30))) throw new FailedPredicateException(this, "Precpred(_ctx, 30)");
						State = 2604; Match(LPAREN);
						State = 2605; ((MethodCallContext)_localctx).ArgList = argumentList();
						State = 2606; Match(RPAREN);
						}
						break;

					case 19:
						{
						_localctx = new ArrayAccessContext(new ExpressionContext(_parentctx, _parentState));
						((ArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2608;
						if (!(Precpred(_ctx, 28))) throw new FailedPredicateException(this, "Precpred(_ctx, 28)");
						State = 2609; Match(LBRKT);
						State = 2610; ((ArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2611; Match(RBRKT);
						}
						break;

					case 20:
						{
						_localctx = new CondAccessExprContext(new ExpressionContext(_parentctx, _parentState));
						((CondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2613;
						if (!(Precpred(_ctx, 27))) throw new FailedPredicateException(this, "Precpred(_ctx, 27)");
						State = 2614; ((CondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2615; ((CondAccessExprContext)_localctx).Right = boundExpression(0);
						}
						break;

					case 21:
						{
						_localctx = new PostfixExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((PostfixExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2616;
						if (!(Precpred(_ctx, 25))) throw new FailedPredicateException(this, "Precpred(_ctx, 25)");
						State = 2617;
						((PostfixExpressionContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==INC || _la==DEC) ) {
							((PostfixExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						}
						break;

					case 22:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2618;
						if (!(Precpred(_ctx, 21))) throw new FailedPredicateException(this, "Precpred(_ctx, 21)");
						State = 2619; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2621;
						_errHandler.Sync(this);
						_la = _input.La(1);
						if (_la==FOX_NOT) {
							{
							State = 2620; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
						}

						State = 2623; ((TypeCheckExpressionContext)_localctx).Null = Match(NULL);
						}
						break;

					case 23:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2624;
						if (!(Precpred(_ctx, 20))) throw new FailedPredicateException(this, "Precpred(_ctx, 20)");
						State = 2625; ((TypeCheckExpressionContext)_localctx).Op = Match(IS);
						State = 2627;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,373,_ctx) ) {
						case 1:
							{
							State = 2626; ((TypeCheckExpressionContext)_localctx).Not = Match(FOX_NOT);
							}
							break;
						}
						State = 2629; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						State = 2632;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,374,_ctx) ) {
						case 1:
							{
							State = 2630; Match(VAR);
							State = 2631; ((TypeCheckExpressionContext)_localctx).Id = varidentifier();
							}
							break;
						}
						}
						break;

					case 24:
						{
						_localctx = new TypeCheckExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((TypeCheckExpressionContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2634;
						if (!(Precpred(_ctx, 19))) throw new FailedPredicateException(this, "Precpred(_ctx, 19)");
						State = 2635; ((TypeCheckExpressionContext)_localctx).Op = Match(ASTYPE);
						State = 2636; ((TypeCheckExpressionContext)_localctx).Type = datatype();
						}
						break;

					case 25:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						((BinaryExpressionContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 2637;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2638; ((BinaryExpressionContext)_localctx).Op = Match(DOTDOT);
						State = 2640;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,375,_ctx) ) {
						case 1:
							{
							State = 2639; ((BinaryExpressionContext)_localctx).Right = expression(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 2646;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,377,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : XSharpParserRuleContext {
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
	 
		public PrimaryContext() { }
		public virtual void CopyFrom(PrimaryContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class VoConversionExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public VoConversionExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoConversionExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoConversionExpression(this);
		}
	}
	public partial class VoCastPtrExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Expr;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VoCastPtrExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastPtrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastPtrExpression(this);
		}
	}
	public partial class ParenExpressionContext : PrimaryContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ParenExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
	}
	public partial class SuperExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public SuperExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSuperExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSuperExpression(this);
		}
	}
	public partial class TupleExpressionContext : PrimaryContext {
		public TupleExprContext TupleExpr;
		public TupleExprContext tupleExpr() {
			return GetRuleContext<TupleExprContext>(0);
		}
		public TupleExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}
	public partial class SizeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public SizeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSizeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSizeOfExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryContext {
		public IToken ch;
		public ExpressionContext Expr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public CheckedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class VoCastExpressionContext : PrimaryContext {
		public NativeTypeContext Type;
		public ExpressionContext Expr;
		public XbaseTypeContext XType;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public ITerminalNode CASTCLASS() { return GetToken(XSharpParser.CASTCLASS, 0); }
		public VoCastExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVoCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVoCastExpression(this);
		}
	}
	public partial class NameExpressionContext : PrimaryContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public NameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNameExpression(this);
		}
	}
	public partial class TypeExpressionContext : PrimaryContext {
		public TypeNameContext Type;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public TypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeExpression(this);
		}
	}
	public partial class AnonTypeExpressionContext : PrimaryContext {
		public AnonTypeContext AnonType;
		public AnonTypeContext anonType() {
			return GetRuleContext<AnonTypeContext>(0);
		}
		public AnonTypeExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonTypeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonTypeExpression(this);
		}
	}
	public partial class MacroContext : PrimaryContext {
		public ExpressionContext Expr;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MacroContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacro(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacro(this);
		}
	}
	public partial class AliasedExpressionContext : PrimaryContext {
		public AliasExpressionContext Expr;
		public AliasExpressionContext aliasExpression() {
			return GetRuleContext<AliasExpressionContext>(0);
		}
		public AliasedExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpression(this);
		}
	}
	public partial class CtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ArgumentListContext ArgList;
		public ObjectOrCollectioninitializerContext Init;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public CtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCtorCall(this);
		}
	}
	public partial class DefaultExpressionContext : PrimaryContext {
		public IToken Key;
		public DatatypeContext Type;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public DefaultExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDefaultExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDefaultExpression(this);
		}
	}
	public partial class ArgListExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ArgListExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgListExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgListExpression(this);
		}
	}
	public partial class QueryExpressionContext : PrimaryContext {
		public LinqQueryContext Query;
		public LinqQueryContext linqQuery() {
			return GetRuleContext<LinqQueryContext>(0);
		}
		public QueryExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}
	public partial class TypeOfExpressionContext : PrimaryContext {
		public DatatypeContext Type;
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeOfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeOfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeOfExpression(this);
		}
	}
	public partial class MacroNameContext : PrimaryContext {
		public IdentifierNameContext Name;
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public MacroNameContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMacroName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMacroName(this);
		}
	}
	public partial class SelfExpressionContext : PrimaryContext {
		public IToken Key;
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public SelfExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelfExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelfExpression(this);
		}
	}
	public partial class ParserLiteralExpressionContext : PrimaryContext {
		public ParserLiteralValueContext Literal;
		public ParserLiteralValueContext parserLiteralValue() {
			return GetRuleContext<ParserLiteralValueContext>(0);
		}
		public ParserLiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralExpression(this);
		}
	}
	public partial class LiteralArrayExpressionContext : PrimaryContext {
		public LiteralArrayContext LiteralArray;
		public LiteralArrayContext literalArray() {
			return GetRuleContext<LiteralArrayContext>(0);
		}
		public LiteralArrayExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArrayExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArrayExpression(this);
		}
	}
	public partial class UsualTypeNameExpressionContext : PrimaryContext {
		public UsualTypeNameContext Name;
		public UsualTypeNameContext usualTypeName() {
			return GetRuleContext<UsualTypeNameContext>(0);
		}
		public UsualTypeNameExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeNameExpression(this);
		}
	}
	public partial class IifExpressionContext : PrimaryContext {
		public IifContext Expr;
		public IifContext iif() {
			return GetRuleContext<IifContext>(0);
		}
		public IifExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIifExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIifExpression(this);
		}
	}
	public partial class CodeblockExpressionContext : PrimaryContext {
		public CodeblockContext CbExpr;
		public AnonymousMethodExpressionContext AnoExpr;
		public CodeblockContext codeblock() {
			return GetRuleContext<CodeblockContext>(0);
		}
		public AnonymousMethodExpressionContext anonymousMethodExpression() {
			return GetRuleContext<AnonymousMethodExpressionContext>(0);
		}
		public CodeblockExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryContext {
		public LiteralValueContext Literal;
		public LiteralValueContext literalValue() {
			return GetRuleContext<LiteralValueContext>(0);
		}
		public LiteralExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class IntrinsicExpressionContext : PrimaryContext {
		public IToken Op;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public IntrinsicExpressionContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIntrinsicExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIntrinsicExpression(this);
		}
	}
	public partial class DelegateCtorCallContext : PrimaryContext {
		public DatatypeContext Type;
		public ExpressionContext Obj;
		public NameContext Func;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode ADDROF() { return GetToken(XSharpParser.ADDROF, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public DelegateCtorCallContext(PrimaryContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDelegateCtorCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDelegateCtorCall(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(_ctx, State);
		EnterRule(_localctx, 206, RULE_primary);
		int _la;
		try {
			State = 2789;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,383,_ctx) ) {
			case 1:
				_localctx = new SelfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2647; ((SelfExpressionContext)_localctx).Key = Match(SELF);
				}
				break;

			case 2:
				_localctx = new SuperExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2648; ((SuperExpressionContext)_localctx).Key = Match(SUPER);
				}
				break;

			case 3:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2649; ((DefaultExpressionContext)_localctx).Key = Match(NULL);
				State = 2650; Match(LPAREN);
				State = 2652;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,378,_ctx) ) {
				case 1:
					{
					State = 2651; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2654; Match(RPAREN);
				}
				break;

			case 4:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2655; ((LiteralExpressionContext)_localctx).Literal = literalValue();
				}
				break;

			case 5:
				_localctx = new ParserLiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2656; ((ParserLiteralExpressionContext)_localctx).Literal = parserLiteralValue();
				}
				break;

			case 6:
				_localctx = new LiteralArrayExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2657; ((LiteralArrayExpressionContext)_localctx).LiteralArray = literalArray();
				}
				break;

			case 7:
				_localctx = new AnonTypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2658; ((AnonTypeExpressionContext)_localctx).AnonType = anonType();
				}
				break;

			case 8:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2659; ((TupleExpressionContext)_localctx).TupleExpr = tupleExpr();
				}
				break;

			case 9:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 2660; ((CodeblockExpressionContext)_localctx).CbExpr = codeblock();
				}
				break;

			case 10:
				_localctx = new CodeblockExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 2661; ((CodeblockExpressionContext)_localctx).AnoExpr = anonymousMethodExpression();
				}
				break;

			case 11:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 2662; ((QueryExpressionContext)_localctx).Query = linqQuery();
				}
				break;

			case 12:
				_localctx = new DelegateCtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 2663;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2664; ((DelegateCtorCallContext)_localctx).Type = datatype();
				State = 2665; Match(LCURLY);
				State = 2666; ((DelegateCtorCallContext)_localctx).Obj = expression(0);
				State = 2667; Match(COMMA);
				State = 2668; Match(ADDROF);
				State = 2669; ((DelegateCtorCallContext)_localctx).Func = name(0);
				State = 2670; Match(LPAREN);
				State = 2671; Match(RPAREN);
				State = 2672; Match(RCURLY);
				}
				break;

			case 13:
				_localctx = new CtorCallContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 2674;
				if (!(ExpectToken(LCURLY))) throw new FailedPredicateException(this, "ExpectToken(LCURLY)");
				State = 2675; ((CtorCallContext)_localctx).Type = datatype();
				State = 2676; Match(LCURLY);
				State = 2677; ((CtorCallContext)_localctx).ArgList = argumentList();
				State = 2678; Match(RCURLY);
				State = 2680;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,379,_ctx) ) {
				case 1:
					{
					State = 2679; ((CtorCallContext)_localctx).Init = objectOrCollectioninitializer();
					}
					break;
				}
				}
				break;

			case 14:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 2682;
				((CheckedExpressionContext)_localctx).ch = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CHECKED || _la==UNCHECKED) ) {
					((CheckedExpressionContext)_localctx).ch = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2683; Match(LPAREN);
				State = 2684; ((CheckedExpressionContext)_localctx).Expr = expression(0);
				State = 2685; Match(RPAREN);
				}
				break;

			case 15:
				_localctx = new TypeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 2687; Match(TYPEOF);
				State = 2688; Match(LPAREN);
				State = 2689; ((TypeOfExpressionContext)_localctx).Type = datatype();
				State = 2690; Match(RPAREN);
				}
				break;

			case 16:
				_localctx = new SizeOfExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 2692; Match(SIZEOF);
				State = 2693; Match(LPAREN);
				State = 2694; ((SizeOfExpressionContext)_localctx).Type = datatype();
				State = 2695; Match(RPAREN);
				}
				break;

			case 17:
				_localctx = new DefaultExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 2697; ((DefaultExpressionContext)_localctx).Key = Match(DEFAULT);
				State = 2698; Match(LPAREN);
				State = 2700;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					State = 2699; ((DefaultExpressionContext)_localctx).Type = datatype();
					}
					break;
				}
				State = 2702; Match(RPAREN);
				}
				break;

			case 18:
				_localctx = new NameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 2703; ((NameExpressionContext)_localctx).Name = simpleName();
				}
				break;

			case 19:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 2704;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2705; ((VoConversionExpressionContext)_localctx).Type = nativeType();
				State = 2706; Match(LPAREN);
				State = 2707; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2708; Match(RPAREN);
				}
				break;

			case 20:
				_localctx = new VoConversionExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 2710;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2711; ((VoConversionExpressionContext)_localctx).XType = xbaseType();
				State = 2712; Match(LPAREN);
				State = 2713; ((VoConversionExpressionContext)_localctx).Expr = expression(0);
				State = 2714; Match(RPAREN);
				}
				break;

			case 21:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 2716;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2717; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2718; Match(LPAREN);
				State = 2719; Match(CAST);
				State = 2720; Match(COMMA);
				State = 2721; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2722; Match(RPAREN);
				}
				break;

			case 22:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 22);
				{
				State = 2724;
				if (!(ExpectToken(LPAREN))) throw new FailedPredicateException(this, "ExpectToken(LPAREN)");
				State = 2725; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2726; Match(LPAREN);
				State = 2727; Match(CAST);
				State = 2728; Match(COMMA);
				State = 2729; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2730; Match(RPAREN);
				}
				break;

			case 23:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 23);
				{
				State = 2732; Match(CASTCLASS);
				State = 2733; Match(LPAREN);
				State = 2734; ((VoCastExpressionContext)_localctx).Type = nativeType();
				State = 2735; Match(COMMA);
				State = 2736; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2737; Match(RPAREN);
				}
				break;

			case 24:
				_localctx = new VoCastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 24);
				{
				State = 2739; Match(CASTCLASS);
				State = 2740; Match(LPAREN);
				State = 2741; ((VoCastExpressionContext)_localctx).XType = xbaseType();
				State = 2742; Match(COMMA);
				State = 2743; ((VoCastExpressionContext)_localctx).Expr = expression(0);
				State = 2744; Match(RPAREN);
				}
				break;

			case 25:
				_localctx = new VoCastPtrExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 25);
				{
				State = 2746; Match(PTR);
				State = 2747; Match(LPAREN);
				State = 2748; ((VoCastPtrExpressionContext)_localctx).Type = datatype();
				State = 2749; Match(COMMA);
				State = 2750; ((VoCastPtrExpressionContext)_localctx).Expr = expression(0);
				State = 2751; Match(RPAREN);
				}
				break;

			case 26:
				_localctx = new UsualTypeNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 26);
				{
				State = 2753; ((UsualTypeNameExpressionContext)_localctx).Name = usualTypeName();
				}
				break;

			case 27:
				_localctx = new TypeExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 27);
				{
				State = 2754; ((TypeExpressionContext)_localctx).Type = typeName();
				}
				break;

			case 28:
				_localctx = new IifExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 28);
				{
				State = 2755; ((IifExpressionContext)_localctx).Expr = iif();
				}
				break;

			case 29:
				_localctx = new IntrinsicExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 29);
				{
				State = 2756;
				((IntrinsicExpressionContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (BIT_NOT - 261)) | (1L << (BIT_AND - 261)) | (1L << (BIT_OR - 261)) | (1L << (BIT_XOR - 261)))) != 0)) ) {
					((IntrinsicExpressionContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2757; Match(LPAREN);
				State = 2758; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
				((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
				State = 2763;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2759; Match(COMMA);
					State = 2760; ((IntrinsicExpressionContext)_localctx)._expression = expression(0);
					((IntrinsicExpressionContext)_localctx)._Exprs.Add(((IntrinsicExpressionContext)_localctx)._expression);
					}
					}
					State = 2765;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2766; Match(RPAREN);
				}
				break;

			case 30:
				_localctx = new AliasedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 30);
				{
				State = 2768;
				if (!(ExpectToken(ALIAS))) throw new FailedPredicateException(this, "ExpectToken(ALIAS)");
				State = 2769; ((AliasedExpressionContext)_localctx).Expr = aliasExpression();
				}
				break;

			case 31:
				_localctx = new MacroContext(_localctx);
				EnterOuterAlt(_localctx, 31);
				{
				State = 2770; Match(AMP);
				State = 2771; Match(LPAREN);
				State = 2772; ((MacroContext)_localctx).Expr = expression(0);
				State = 2773; Match(RPAREN);
				}
				break;

			case 32:
				_localctx = new MacroNameContext(_localctx);
				EnterOuterAlt(_localctx, 32);
				{
				State = 2775; Match(AMP);
				State = 2776; ((MacroNameContext)_localctx).Name = identifierName();
				}
				break;

			case 33:
				_localctx = new ParenExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 33);
				{
				State = 2777; Match(LPAREN);
				State = 2778; ((ParenExpressionContext)_localctx)._expression = expression(0);
				((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
				State = 2783;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2779; Match(COMMA);
					State = 2780; ((ParenExpressionContext)_localctx)._expression = expression(0);
					((ParenExpressionContext)_localctx)._Exprs.Add(((ParenExpressionContext)_localctx)._expression);
					}
					}
					State = 2785;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 2786; Match(RPAREN);
				}
				break;

			case 34:
				_localctx = new ArgListExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 34);
				{
				State = 2788; ((ArgListExpressionContext)_localctx).Key = Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoundExpressionContext : XSharpParserRuleContext {
		public BoundExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boundExpression; } }
	 
		public BoundExpressionContext() { }
		public virtual void CopyFrom(BoundExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BindMemberAccessContext : BoundExpressionContext {
		public IToken Op;
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BindMemberAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindMemberAccess(this);
		}
	}
	public partial class BoundMethodCallContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public ArgumentListContext ArgList;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public BoundMethodCallContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundMethodCall(this);
		}
	}
	public partial class BoundCondAccessExprContext : BoundExpressionContext {
		public BoundExpressionContext Left;
		public IToken Op;
		public BoundExpressionContext Right;
		public BoundExpressionContext[] boundExpression() {
			return GetRuleContexts<BoundExpressionContext>();
		}
		public BoundExpressionContext boundExpression(int i) {
			return GetRuleContext<BoundExpressionContext>(i);
		}
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public BoundCondAccessExprContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundCondAccessExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundCondAccessExpr(this);
		}
	}
	public partial class BoundArrayAccessContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BoundArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundArrayAccess(this);
		}
	}
	public partial class BindArrayAccessContext : BoundExpressionContext {
		public BracketedArgumentListContext ArgList;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public BracketedArgumentListContext bracketedArgumentList() {
			return GetRuleContext<BracketedArgumentListContext>(0);
		}
		public BindArrayAccessContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBindArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBindArrayAccess(this);
		}
	}
	public partial class BoundAccessMemberContext : BoundExpressionContext {
		public BoundExpressionContext Expr;
		public IToken Op;
		public SimpleNameContext Name;
		public BoundExpressionContext boundExpression() {
			return GetRuleContext<BoundExpressionContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public BoundAccessMemberContext(BoundExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBoundAccessMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBoundAccessMember(this);
		}
	}

	[RuleVersion(0)]
	public BoundExpressionContext boundExpression() {
		return boundExpression(0);
	}

	private BoundExpressionContext boundExpression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		BoundExpressionContext _localctx = new BoundExpressionContext(_ctx, _parentState);
		BoundExpressionContext _prevctx = _localctx;
		int _startState = 208;
		EnterRecursionRule(_localctx, 208, RULE_boundExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2798;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case COLON:
			case DOT:
				{
				_localctx = new BindMemberAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 2792;
				((BindMemberAccessContext)_localctx).Op = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==COLON || _la==DOT) ) {
					((BindMemberAccessContext)_localctx).Op = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 2793; ((BindMemberAccessContext)_localctx).Name = simpleName();
				}
				break;
			case LBRKT:
				{
				_localctx = new BindArrayAccessContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 2794; Match(LBRKT);
				State = 2795; ((BindArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
				State = 2796; Match(RBRKT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 2818;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 2816;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,385,_ctx) ) {
					case 1:
						{
						_localctx = new BoundCondAccessExprContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundCondAccessExprContext)_localctx).Left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2800;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 2801; ((BoundCondAccessExprContext)_localctx).Op = Match(QMARK);
						State = 2802; ((BoundCondAccessExprContext)_localctx).Right = boundExpression(3);
						}
						break;

					case 2:
						{
						_localctx = new BoundAccessMemberContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundAccessMemberContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2803;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 2804;
						((BoundAccessMemberContext)_localctx).Op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==COLON || _la==DOT) ) {
							((BoundAccessMemberContext)_localctx).Op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 2805; ((BoundAccessMemberContext)_localctx).Name = simpleName();
						}
						break;

					case 3:
						{
						_localctx = new BoundMethodCallContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundMethodCallContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2806;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 2807; Match(LPAREN);
						State = 2808; ((BoundMethodCallContext)_localctx).ArgList = argumentList();
						State = 2809; Match(RPAREN);
						}
						break;

					case 4:
						{
						_localctx = new BoundArrayAccessContext(new BoundExpressionContext(_parentctx, _parentState));
						((BoundArrayAccessContext)_localctx).Expr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_boundExpression);
						State = 2811;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 2812; Match(LBRKT);
						State = 2813; ((BoundArrayAccessContext)_localctx).ArgList = bracketedArgumentList();
						State = 2814; Match(RBRKT);
						}
						break;
					}
					} 
				}
				State = 2820;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,386,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasExpressionContext : XSharpParserRuleContext {
		public AliasExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasExpression; } }
	 
		public AliasExpressionContext() { }
		public virtual void CopyFrom(AliasExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AliasedMemvarContext : AliasExpressionContext {
		public IdentifierContext VarName;
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AliasedMemvarContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedMemvar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedMemvar(this);
		}
	}
	public partial class AliasedFieldLateContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public ExpressionContext Field;
		public IdentifierContext Area;
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public ITerminalNode AMP() { return GetToken(XSharpParser.AMP, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldLateContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedFieldLate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedFieldLate(this);
		}
	}
	public partial class AliasedExprContext : AliasExpressionContext {
		public IdentifierContext Id;
		public ExpressionContext Alias;
		public ExpressionContext Expr;
		public ITerminalNode ALIAS() { return GetToken(XSharpParser.ALIAS, 0); }
		public ITerminalNode[] LPAREN() { return GetTokens(XSharpParser.LPAREN); }
		public ITerminalNode LPAREN(int i) {
			return GetToken(XSharpParser.LPAREN, i);
		}
		public ITerminalNode[] RPAREN() { return GetTokens(XSharpParser.RPAREN); }
		public ITerminalNode RPAREN(int i) {
			return GetToken(XSharpParser.RPAREN, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AliasedExprContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedExpr(this);
		}
	}
	public partial class AliasedFieldContext : AliasExpressionContext {
		public IdentifierContext Alias;
		public IdentifierContext Field;
		public IdentifierContext Area;
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode[] ALIAS() { return GetTokens(XSharpParser.ALIAS); }
		public ITerminalNode ALIAS(int i) {
			return GetToken(XSharpParser.ALIAS, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AliasedFieldContext(AliasExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasedField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasedField(this);
		}
	}

	[RuleVersion(0)]
	public AliasExpressionContext aliasExpression() {
		AliasExpressionContext _localctx = new AliasExpressionContext(_ctx, State);
		EnterRule(_localctx, 210, RULE_aliasExpression);
		try {
			State = 2881;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,391,_ctx) ) {
			case 1:
				_localctx = new AliasedMemvarContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 2821;
				if (!(HasMemVars)) throw new FailedPredicateException(this, "HasMemVars");
				State = 2822; Match(MEMVAR);
				State = 2823; Match(ALIAS);
				State = 2824; ((AliasedMemvarContext)_localctx).VarName = identifier();
				}
				break;

			case 2:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 2825; Match(FIELD);
				State = 2826; Match(ALIAS);
				State = 2830;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,387,_ctx) ) {
				case 1:
					{
					State = 2827; ((AliasedFieldContext)_localctx).Alias = identifier();
					State = 2828; Match(ALIAS);
					}
					break;
				}
				State = 2832; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 3:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 2833;
				if (!(InputStream.La(4) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(4) != LPAREN");
				State = 2834; ((AliasedFieldContext)_localctx).Alias = identifier();
				State = 2835; Match(ALIAS);
				State = 2836; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 4:
				_localctx = new AliasedFieldContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 2838;
				if (!(InputStream.La(6) != LPAREN)) throw new FailedPredicateException(this, "InputStream.La(6) != LPAREN");
				State = 2839; Match(LPAREN);
				State = 2840; ((AliasedFieldContext)_localctx).Area = identifier();
				State = 2841; Match(RPAREN);
				State = 2842; Match(ALIAS);
				State = 2843; ((AliasedFieldContext)_localctx).Field = identifier();
				}
				break;

			case 5:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 2845; ((AliasedFieldLateContext)_localctx).Alias = identifier();
				State = 2846; Match(ALIAS);
				State = 2847; Match(AMP);
				State = 2848; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 6:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 2850; Match(FIELD);
				State = 2851; Match(ALIAS);
				State = 2855;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,388,_ctx) ) {
				case 1:
					{
					State = 2852; ((AliasedFieldLateContext)_localctx).Alias = identifier();
					State = 2853; Match(ALIAS);
					}
					break;
				}
				State = 2857; Match(AMP);
				State = 2858; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 7:
				_localctx = new AliasedFieldLateContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 2859; Match(LPAREN);
				State = 2860; ((AliasedFieldLateContext)_localctx).Area = identifier();
				State = 2861; Match(RPAREN);
				State = 2862; Match(ALIAS);
				State = 2863; Match(AMP);
				State = 2864; ((AliasedFieldLateContext)_localctx).Field = expression(0);
				}
				break;

			case 8:
				_localctx = new AliasedExprContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 2871;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,389,_ctx) ) {
				case 1:
					{
					State = 2866; ((AliasedExprContext)_localctx).Id = identifier();
					}
					break;

				case 2:
					{
					State = 2867; Match(LPAREN);
					State = 2868; ((AliasedExprContext)_localctx).Alias = expression(0);
					State = 2869; Match(RPAREN);
					}
					break;
				}
				State = 2873; Match(ALIAS);
				State = 2879;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,390,_ctx) ) {
				case 1:
					{
					{
					State = 2874; Match(LPAREN);
					State = 2875; ((AliasedExprContext)_localctx).Expr = expression(0);
					State = 2876; Match(RPAREN);
					}
					}
					break;

				case 2:
					{
					State = 2878; ((AliasedExprContext)_localctx).Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectioninitializerContext : XSharpParserRuleContext {
		public ObjectinitializerContext ObjInit;
		public CollectioninitializerContext CollInit;
		public ObjectinitializerContext objectinitializer() {
			return GetRuleContext<ObjectinitializerContext>(0);
		}
		public CollectioninitializerContext collectioninitializer() {
			return GetRuleContext<CollectioninitializerContext>(0);
		}
		public ObjectOrCollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
		ObjectOrCollectioninitializerContext _localctx = new ObjectOrCollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 212, RULE_objectOrCollectioninitializer);
		try {
			State = 2885;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,392,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2883; _localctx.ObjInit = objectinitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2884; _localctx.CollInit = collectioninitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectinitializerContext : XSharpParserRuleContext {
		public MemberinitializerContext _memberinitializer;
		public IList<MemberinitializerContext> _Members = new List<MemberinitializerContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public MemberinitializerContext[] memberinitializer() {
			return GetRuleContexts<MemberinitializerContext>();
		}
		public MemberinitializerContext memberinitializer(int i) {
			return GetRuleContext<MemberinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ObjectinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterObjectinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitObjectinitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectinitializerContext objectinitializer() {
		ObjectinitializerContext _localctx = new ObjectinitializerContext(_ctx, State);
		EnterRule(_localctx, 214, RULE_objectinitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2887; Match(LCURLY);
			State = 2896;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,394,_ctx) ) {
			case 1:
				{
				State = 2888; _localctx._memberinitializer = memberinitializer();
				_localctx._Members.Add(_localctx._memberinitializer);
				State = 2893;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 2889; Match(COMMA);
					State = 2890; _localctx._memberinitializer = memberinitializer();
					_localctx._Members.Add(_localctx._memberinitializer);
					}
					}
					State = 2895;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 2898; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberinitializerContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public InitializervalueContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public InitializervalueContext initializervalue() {
			return GetRuleContext<InitializervalueContext>(0);
		}
		public MemberinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterMemberinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitMemberinitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberinitializerContext memberinitializer() {
		MemberinitializerContext _localctx = new MemberinitializerContext(_ctx, State);
		EnterRule(_localctx, 216, RULE_memberinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2900; _localctx.Name = identifierName();
			State = 2901; _localctx.Op = assignoperator();
			State = 2902; _localctx.Expr = initializervalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializervalueContext : XSharpParserRuleContext {
		public ObjectOrCollectioninitializerContext Init;
		public ExpressionContext Expr;
		public ObjectOrCollectioninitializerContext objectOrCollectioninitializer() {
			return GetRuleContext<ObjectOrCollectioninitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializervalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializervalue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializervalue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializervalue(this);
		}
	}

	[RuleVersion(0)]
	public InitializervalueContext initializervalue() {
		InitializervalueContext _localctx = new InitializervalueContext(_ctx, State);
		EnterRule(_localctx, 218, RULE_initializervalue);
		try {
			State = 2906;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,395,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2904; _localctx.Init = objectOrCollectioninitializer();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2905; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComplexInitExprContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ComplexInitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_complexInitExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterComplexInitExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitComplexInitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ComplexInitExprContext complexInitExpr() {
		ComplexInitExprContext _localctx = new ComplexInitExprContext(_ctx, State);
		EnterRule(_localctx, 220, RULE_complexInitExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2908; Match(LCURLY);
			State = 2909; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2914;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2910; Match(COMMA);
				State = 2911; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2916;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2917; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerMemberContext : XSharpParserRuleContext {
		public ComplexInitExprContext Init;
		public ExpressionContext Expr;
		public ComplexInitExprContext complexInitExpr() {
			return GetRuleContext<ComplexInitExprContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public InitializerMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterInitializerMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitInitializerMember(this);
		}
	}

	[RuleVersion(0)]
	public InitializerMemberContext initializerMember() {
		InitializerMemberContext _localctx = new InitializerMemberContext(_ctx, State);
		EnterRule(_localctx, 222, RULE_initializerMember);
		try {
			State = 2921;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,397,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2919; _localctx.Init = complexInitExpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2920; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectioninitializerContext : XSharpParserRuleContext {
		public InitializerMemberContext _initializerMember;
		public IList<InitializerMemberContext> _Members = new List<InitializerMemberContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public InitializerMemberContext[] initializerMember() {
			return GetRuleContexts<InitializerMemberContext>();
		}
		public InitializerMemberContext initializerMember(int i) {
			return GetRuleContext<InitializerMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CollectioninitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectioninitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCollectioninitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCollectioninitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectioninitializerContext collectioninitializer() {
		CollectioninitializerContext _localctx = new CollectioninitializerContext(_ctx, State);
		EnterRule(_localctx, 224, RULE_collectioninitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2923; Match(LCURLY);
			State = 2924; _localctx._initializerMember = initializerMember();
			_localctx._Members.Add(_localctx._initializerMember);
			State = 2929;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2925; Match(COMMA);
				State = 2926; _localctx._initializerMember = initializerMember();
				_localctx._Members.Add(_localctx._initializerMember);
				}
				}
				State = 2931;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 2932; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketedArgumentListContext : XSharpParserRuleContext {
		public UnnamedArgumentContext _unnamedArgument;
		public IList<UnnamedArgumentContext> _Args = new List<UnnamedArgumentContext>();
		public UnnamedArgumentContext[] unnamedArgument() {
			return GetRuleContexts<UnnamedArgumentContext>();
		}
		public UnnamedArgumentContext unnamedArgument(int i) {
			return GetRuleContext<UnnamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public BracketedArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketedArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterBracketedArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitBracketedArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public BracketedArgumentListContext bracketedArgumentList() {
		BracketedArgumentListContext _localctx = new BracketedArgumentListContext(_ctx, State);
		EnterRule(_localctx, 226, RULE_bracketedArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2934; _localctx._unnamedArgument = unnamedArgument();
			_localctx._Args.Add(_localctx._unnamedArgument);
			State = 2939;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2935; Match(COMMA);
				State = 2936; _localctx._unnamedArgument = unnamedArgument();
				_localctx._Args.Add(_localctx._unnamedArgument);
				}
				}
				State = 2941;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedArgumentContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public UnnamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUnnamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUnnamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedArgumentContext unnamedArgument() {
		UnnamedArgumentContext _localctx = new UnnamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 228, RULE_unnamedArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2942; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : XSharpParserRuleContext {
		public NamedArgumentContext _namedArgument;
		public IList<NamedArgumentContext> _Args = new List<NamedArgumentContext>();
		public NamedArgumentContext[] namedArgument() {
			return GetRuleContexts<NamedArgumentContext>();
		}
		public NamedArgumentContext namedArgument(int i) {
			return GetRuleContext<NamedArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(_ctx, State);
		EnterRule(_localctx, 230, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2944; _localctx._namedArgument = namedArgument();
			_localctx._Args.Add(_localctx._namedArgument);
			State = 2949;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2945; Match(COMMA);
				State = 2946; _localctx._namedArgument = namedArgument();
				_localctx._Args.Add(_localctx._namedArgument);
				}
				}
				State = 2951;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public IToken Op;
		public IToken RefOut;
		public ExpressionContext Expr;
		public IToken Var;
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public IToken Null;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode ASSIGN_OP() { return GetToken(XSharpParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public NamedArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNamedArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNamedArgument(this);
		}
	}

	[RuleVersion(0)]
	public NamedArgumentContext namedArgument() {
		NamedArgumentContext _localctx = new NamedArgumentContext(_ctx, State);
		EnterRule(_localctx, 232, RULE_namedArgument);
		int _la;
		try {
			State = 2976;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,404,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2952;
				if (!(AllowNamedArgs)) throw new FailedPredicateException(this, "AllowNamedArgs");
				State = 2953; _localctx.Name = identifierName();
				State = 2954; _localctx.Op = Match(ASSIGN_OP);
				State = 2956;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,401,_ctx) ) {
				case 1:
					{
					State = 2955;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2958; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2960; _localctx.RefOut = Match(OUT);
				State = 2961; _localctx.Var = Match(VAR);
				State = 2962; _localctx.Id = varidentifier();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2963; _localctx.RefOut = Match(OUT);
				State = 2964; _localctx.Id = varidentifier();
				State = 2965; Match(AS);
				State = 2966; _localctx.Type = datatype();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2968; _localctx.RefOut = Match(OUT);
				State = 2969; _localctx.Null = Match(NULL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2971;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,402,_ctx) ) {
				case 1:
					{
					State = 2970;
					_localctx.RefOut = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==OUT || _la==REF) ) {
						_localctx.RefOut = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				}
				State = 2974;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,403,_ctx) ) {
				case 1:
					{
					State = 2973; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IifContext : XSharpParserRuleContext {
		public ExpressionContext Cond;
		public ExpressionContext TrueExpr;
		public ExpressionContext FalseExpr;
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IifContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iif; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIif(this);
		}
	}

	[RuleVersion(0)]
	public IifContext iif() {
		IifContext _localctx = new IifContext(_ctx, State);
		EnterRule(_localctx, 234, RULE_iif);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2978;
			_la = _input.La(1);
			if ( !(_la==IF || _la==IIF) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			State = 2979; Match(LPAREN);
			State = 2980; _localctx.Cond = expression(0);
			State = 2981; Match(COMMA);
			State = 2983;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,405,_ctx) ) {
			case 1:
				{
				State = 2982; _localctx.TrueExpr = expression(0);
				}
				break;
			}
			State = 2985; Match(COMMA);
			State = 2987;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,406,_ctx) ) {
			case 1:
				{
				State = 2986; _localctx.FalseExpr = expression(0);
				}
				break;
			}
			State = 2989; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NameDotContext : XSharpParserRuleContext {
		public NameDotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nameDot; } }
	 
		public NameDotContext() { }
		public virtual void CopyFrom(NameDotContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleOrAliasedNameDotContext : NameDotContext {
		public AliasedNameContext Name;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedNameDot(this);
		}
	}
	public partial class QualifiedNameDotContext : NameDotContext {
		public NameDotContext Left;
		public SimpleNameContext Right;
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameDotContext(NameDotContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedNameDot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedNameDot(this);
		}
	}

	[RuleVersion(0)]
	public NameDotContext nameDot() {
		return nameDot(0);
	}

	private NameDotContext nameDot(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameDotContext _localctx = new NameDotContext(_ctx, _parentState);
		NameDotContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_nameDot, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameDotContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 2992; ((SimpleOrAliasedNameDotContext)_localctx).Name = aliasedName();
			State = 2993; Match(DOT);
			}
			_ctx.stop = _input.Lt(-1);
			State = 3001;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameDotContext(new NameDotContext(_parentctx, _parentState));
					((QualifiedNameDotContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_nameDot);
					State = 2995;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 2996; ((QualifiedNameDotContext)_localctx).Right = simpleName();
					State = 2997; Match(DOT);
					}
					} 
				}
				State = 3003;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,407,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NameContext : XSharpParserRuleContext {
		public NameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name; } }
	 
		public NameContext() { }
		public virtual void CopyFrom(NameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class QualifiedNameContext : NameContext {
		public NameContext Left;
		public IToken Op;
		public SimpleNameContext Right;
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public QualifiedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}
	public partial class SimpleOrAliasedNameContext : NameContext {
		public AliasedNameContext Name;
		public AliasedNameContext aliasedName() {
			return GetRuleContext<AliasedNameContext>(0);
		}
		public SimpleOrAliasedNameContext(NameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleOrAliasedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleOrAliasedName(this);
		}
	}

	[RuleVersion(0)]
	public NameContext name() {
		return name(0);
	}

	private NameContext name(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		NameContext _localctx = new NameContext(_ctx, _parentState);
		NameContext _prevctx = _localctx;
		int _startState = 238;
		EnterRecursionRule(_localctx, 238, RULE_name, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SimpleOrAliasedNameContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 3005; ((SimpleOrAliasedNameContext)_localctx).Name = aliasedName();
			}
			_ctx.stop = _input.Lt(-1);
			State = 3012;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new QualifiedNameContext(new NameContext(_parentctx, _parentState));
					((QualifiedNameContext)_localctx).Left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_name);
					State = 3007;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 3008; ((QualifiedNameContext)_localctx).Op = Match(DOT);
					State = 3009; ((QualifiedNameContext)_localctx).Right = simpleName();
					}
					} 
				}
				State = 3014;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,408,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AliasedNameContext : XSharpParserRuleContext {
		public AliasedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasedName; } }
	 
		public AliasedNameContext() { }
		public virtual void CopyFrom(AliasedNameContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentifierOrGenericNameContext : AliasedNameContext {
		public SimpleNameContext Name;
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public IdentifierOrGenericNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierOrGenericName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierOrGenericName(this);
		}
	}
	public partial class AliasQualifiedNameContext : AliasedNameContext {
		public IdentifierNameContext Alias;
		public IToken Op;
		public SimpleNameContext Right;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public AliasQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAliasQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAliasQualifiedName(this);
		}
	}
	public partial class GlobalQualifiedNameContext : AliasedNameContext {
		public IToken Global;
		public IToken Op;
		public SimpleNameContext Right;
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode COLONCOLON() { return GetToken(XSharpParser.COLONCOLON, 0); }
		public SimpleNameContext simpleName() {
			return GetRuleContext<SimpleNameContext>(0);
		}
		public GlobalQualifiedNameContext(AliasedNameContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGlobalQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGlobalQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public AliasedNameContext aliasedName() {
		AliasedNameContext _localctx = new AliasedNameContext(_ctx, State);
		EnterRule(_localctx, 240, RULE_aliasedName);
		try {
			State = 3023;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,409,_ctx) ) {
			case 1:
				_localctx = new GlobalQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3015; ((GlobalQualifiedNameContext)_localctx).Global = Match(GLOBAL);
				State = 3016; ((GlobalQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3017; ((GlobalQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 2:
				_localctx = new AliasQualifiedNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3018; ((AliasQualifiedNameContext)_localctx).Alias = identifierName();
				State = 3019; ((AliasQualifiedNameContext)_localctx).Op = Match(COLONCOLON);
				State = 3020; ((AliasQualifiedNameContext)_localctx).Right = simpleName();
				}
				break;

			case 3:
				_localctx = new IdentifierOrGenericNameContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3022; ((IdentifierOrGenericNameContext)_localctx).Name = simpleName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public GenericArgumentListContext GenericArgList;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GenericArgumentListContext genericArgumentList() {
			return GetRuleContext<GenericArgumentListContext>(0);
		}
		public SimpleNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleName(this);
		}
	}

	[RuleVersion(0)]
	public SimpleNameContext simpleName() {
		SimpleNameContext _localctx = new SimpleNameContext(_ctx, State);
		EnterRule(_localctx, 242, RULE_simpleName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3025; _localctx.Id = identifier();
			State = 3027;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,410,_ctx) ) {
			case 1:
				{
				State = 3026; _localctx.GenericArgList = genericArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericArgumentListContext : XSharpParserRuleContext {
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _GenericArgs = new List<DatatypeContext>();
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public GenericArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGenericArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGenericArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public GenericArgumentListContext genericArgumentList() {
		GenericArgumentListContext _localctx = new GenericArgumentListContext(_ctx, State);
		EnterRule(_localctx, 244, RULE_genericArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3029; Match(LT);
			State = 3030; _localctx._datatype = datatype();
			_localctx._GenericArgs.Add(_localctx._datatype);
			State = 3035;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3031; Match(COMMA);
				State = 3032; _localctx._datatype = datatype();
				_localctx._GenericArgs.Add(_localctx._datatype);
				}
				}
				State = 3037;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3038; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierNameContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierName(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierNameContext identifierName() {
		IdentifierNameContext _localctx = new IdentifierNameContext(_ctx, State);
		EnterRule(_localctx, 246, RULE_identifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3040; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifier(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierContext varidentifier() {
		VaridentifierContext _localctx = new VaridentifierContext(_ctx, State);
		EnterRule(_localctx, 248, RULE_varidentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3044;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,412,_ctx) ) {
			case 1:
				{
				State = 3042; Match(FOX_M);
				State = 3043; Match(DOT);
				}
				break;
			}
			State = 3046; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VaridentifierNameContext : XSharpParserRuleContext {
		public IdentifierNameContext Id;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode DOT() { return GetToken(XSharpParser.DOT, 0); }
		public VaridentifierNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varidentifierName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterVaridentifierName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitVaridentifierName(this);
		}
	}

	[RuleVersion(0)]
	public VaridentifierNameContext varidentifierName() {
		VaridentifierNameContext _localctx = new VaridentifierNameContext(_ctx, State);
		EnterRule(_localctx, 250, RULE_varidentifierName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3050;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				State = 3048; Match(FOX_M);
				State = 3049; Match(DOT);
				}
				break;
			}
			State = 3052; _localctx.Id = identifierName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DatatypeContext : XSharpParserRuleContext {
		public DatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype; } }
	 
		public DatatypeContext() { }
		public virtual void CopyFrom(DatatypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NullableDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode QMARK() { return GetToken(XSharpParser.QMARK, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public NullableDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNullableDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNullableDatatype(this);
		}
	}
	public partial class ArrayOfTypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayOfTypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayOfType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayOfType(this);
		}
	}
	public partial class PtrDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public PtrDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterPtrDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitPtrDatatype(this);
		}
	}
	public partial class TupleDatatypeContext : DatatypeContext {
		public TupleTypeContext TupleType;
		public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public TupleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleDatatype(this);
		}
	}
	public partial class ArrayDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public ArrayRankContext _arrayRank;
		public IList<ArrayRankContext> _Ranks = new List<ArrayRankContext>();
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public ArrayRankContext[] arrayRank() {
			return GetRuleContexts<ArrayRankContext>();
		}
		public ArrayRankContext arrayRank(int i) {
			return GetRuleContext<ArrayRankContext>(i);
		}
		public ArrayDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayDatatype(this);
		}
	}
	public partial class SimpleDatatypeContext : DatatypeContext {
		public TypeNameContext TypeName;
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public SimpleDatatypeContext(DatatypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSimpleDatatype(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSimpleDatatype(this);
		}
	}

	[RuleVersion(0)]
	public DatatypeContext datatype() {
		DatatypeContext _localctx = new DatatypeContext(_ctx, State);
		EnterRule(_localctx, 252, RULE_datatype);
		try {
			int _alt;
			State = 3071;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,415,_ctx) ) {
			case 1:
				_localctx = new ArrayOfTypeContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3054; Match(ARRAY);
				State = 3055; Match(OF);
				State = 3056; ((ArrayOfTypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 2:
				_localctx = new PtrDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3057; ((PtrDatatypeContext)_localctx).TypeName = typeName();
				State = 3058; Match(PTR);
				}
				break;

			case 3:
				_localctx = new ArrayDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3060; ((ArrayDatatypeContext)_localctx).TypeName = typeName();
				State = 3062;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 3061; ((ArrayDatatypeContext)_localctx)._arrayRank = arrayRank();
						((ArrayDatatypeContext)_localctx)._Ranks.Add(((ArrayDatatypeContext)_localctx)._arrayRank);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 3064;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,414,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				}
				break;

			case 4:
				_localctx = new SimpleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3066; ((SimpleDatatypeContext)_localctx).TypeName = typeName();
				}
				break;

			case 5:
				_localctx = new NullableDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3067; ((NullableDatatypeContext)_localctx).TypeName = typeName();
				State = 3068; Match(QMARK);
				}
				break;

			case 6:
				_localctx = new TupleDatatypeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3070; ((TupleDatatypeContext)_localctx).TupleType = tupleType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayRankContext : XSharpParserRuleContext {
		public IToken _COMMA;
		public IList<IToken> _Commas = new List<IToken>();
		public IToken String;
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ArrayRankContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayRank; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayRank(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayRank(this);
		}
	}

	[RuleVersion(0)]
	public ArrayRankContext arrayRank() {
		ArrayRankContext _localctx = new ArrayRankContext(_ctx, State);
		EnterRule(_localctx, 254, RULE_arrayRank);
		int _la;
		try {
			State = 3082;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LBRKT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3073; Match(LBRKT);
				State = 3077;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3074; _localctx._COMMA = Match(COMMA);
					_localctx._Commas.Add(_localctx._COMMA);
					}
					}
					State = 3079;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3080; Match(RBRKT);
				}
				break;
			case BRACKETED_STRING_CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3081; _localctx.String = Match(BRACKETED_STRING_CONST);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NameContext Name;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public TypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameContext typeName() {
		TypeNameContext _localctx = new TypeNameContext(_ctx, State);
		EnterRule(_localctx, 256, RULE_typeName);
		try {
			State = 3087;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,418,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3084; _localctx.NativeType = nativeType();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3085; _localctx.XType = xbaseType();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3086; _localctx.Name = name(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsualTypeNameContext : XSharpParserRuleContext {
		public NativeTypeContext NativeType;
		public XbaseTypeContext XType;
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public UsualTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usualTypeName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterUsualTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitUsualTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UsualTypeNameContext usualTypeName() {
		UsualTypeNameContext _localctx = new UsualTypeNameContext(_ctx, State);
		EnterRule(_localctx, 258, RULE_usualTypeName);
		try {
			State = 3091;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case BYTE:
			case DWORD:
			case INT:
			case LOGIC:
			case LONGINT:
			case OBJECT:
			case PTR:
			case REAL4:
			case REAL8:
			case SHORTINT:
			case STRING:
			case VOID:
			case WORD:
			case CHAR:
			case INT64:
			case UINT64:
			case DYNAMIC:
			case DECIMAL:
			case DATETIME:
			case NINT:
			case NUINT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3089; _localctx.NativeType = nativeType();
				}
				break;
			case ARRAY:
			case CODEBLOCK:
			case DATE:
			case FLOAT:
			case PSZ:
			case SYMBOL:
			case USUAL:
			case CURRENCY:
			case BINARY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3090; _localctx.XType = xbaseType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralArrayContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public ArrayElementContext _arrayElement;
		public IList<ArrayElementContext> _Elements = new List<ArrayElementContext>();
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode LT() { return GetToken(XSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(XSharpParser.GT, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ArrayElementContext[] arrayElement() {
			return GetRuleContexts<ArrayElementContext>();
		}
		public ArrayElementContext arrayElement(int i) {
			return GetRuleContext<ArrayElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public LiteralArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalArray; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralArray(this);
		}
	}

	[RuleVersion(0)]
	public LiteralArrayContext literalArray() {
		LiteralArrayContext _localctx = new LiteralArrayContext(_ctx, State);
		EnterRule(_localctx, 260, RULE_literalArray);
		int _la;
		try {
			State = 3118;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,423,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3097;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3093; Match(LT);
					State = 3094; _localctx.Type = datatype();
					State = 3095; Match(GT);
					}
				}

				State = 3099; Match(LCURLY);
				State = 3100; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3105;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==LT) {
					{
					State = 3101; Match(LT);
					State = 3102; _localctx.Type = datatype();
					State = 3103; Match(GT);
					}
				}

				State = 3107; Match(LCURLY);
				State = 3108; _localctx._arrayElement = arrayElement();
				_localctx._Elements.Add(_localctx._arrayElement);
				State = 3113;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3109; Match(COMMA);
					State = 3110; _localctx._arrayElement = arrayElement();
					_localctx._Elements.Add(_localctx._arrayElement);
					}
					}
					State = 3115;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3116; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayElementContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterArrayElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitArrayElement(this);
		}
	}

	[RuleVersion(0)]
	public ArrayElementContext arrayElement() {
		ArrayElementContext _localctx = new ArrayElementContext(_ctx, State);
		EnterRule(_localctx, 262, RULE_arrayElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,424,_ctx) ) {
			case 1:
				{
				State = 3120; _localctx.Expr = expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonTypeContext : XSharpParserRuleContext {
		public AnonMemberContext _anonMember;
		public IList<AnonMemberContext> _Members = new List<AnonMemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public AnonMemberContext[] anonMember() {
			return GetRuleContexts<AnonMemberContext>();
		}
		public AnonMemberContext anonMember(int i) {
			return GetRuleContext<AnonMemberContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public AnonTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonType(this);
		}
	}

	[RuleVersion(0)]
	public AnonTypeContext anonType() {
		AnonTypeContext _localctx = new AnonTypeContext(_ctx, State);
		EnterRule(_localctx, 264, RULE_anonType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3123; Match(CLASS);
			State = 3124; Match(LCURLY);
			State = 3133;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,426,_ctx) ) {
			case 1:
				{
				State = 3125; _localctx._anonMember = anonMember();
				_localctx._Members.Add(_localctx._anonMember);
				State = 3130;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3126; Match(COMMA);
					State = 3127; _localctx._anonMember = anonMember();
					_localctx._Members.Add(_localctx._anonMember);
					}
					}
					State = 3132;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3135; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonMemberContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnonMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonMember; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonMember(this);
		}
	}

	[RuleVersion(0)]
	public AnonMemberContext anonMember() {
		AnonMemberContext _localctx = new AnonMemberContext(_ctx, State);
		EnterRule(_localctx, 266, RULE_anonMember);
		try {
			State = 3142;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,427,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3137; _localctx.Name = identifierName();
				State = 3138; _localctx.Op = assignoperator();
				State = 3139; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3141; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : XSharpParserRuleContext {
		public TupleTypeElementContext _tupleTypeElement;
		public IList<TupleTypeElementContext> _Elements = new List<TupleTypeElementContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public TupleTypeElementContext[] tupleTypeElement() {
			return GetRuleContexts<TupleTypeElementContext>();
		}
		public TupleTypeElementContext tupleTypeElement(int i) {
			return GetRuleContext<TupleTypeElementContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext tupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(_ctx, State);
		EnterRule(_localctx, 268, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3145;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==TUPLE) {
				{
				State = 3144; Match(TUPLE);
				}
			}

			State = 3147; Match(LPAREN);
			State = 3156;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				State = 3148; _localctx._tupleTypeElement = tupleTypeElement();
				_localctx._Elements.Add(_localctx._tupleTypeElement);
				State = 3153;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3149; Match(COMMA);
					State = 3150; _localctx._tupleTypeElement = tupleTypeElement();
					_localctx._Elements.Add(_localctx._tupleTypeElement);
					}
					}
					State = 3155;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3158; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeElementContext : XSharpParserRuleContext {
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TupleTypeElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleTypeElement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleTypeElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleTypeElement(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeElementContext tupleTypeElement() {
		TupleTypeElementContext _localctx = new TupleTypeElementContext(_ctx, State);
		EnterRule(_localctx, 270, RULE_tupleTypeElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3163;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,431,_ctx) ) {
			case 1:
				{
				State = 3160; identifierName();
				State = 3161; Match(AS);
				}
				break;
			}
			State = 3165; datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprContext : XSharpParserRuleContext {
		public TupleExprArgumentContext _tupleExprArgument;
		public IList<TupleExprArgumentContext> _Args = new List<TupleExprArgumentContext>();
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public TupleExprArgumentContext[] tupleExprArgument() {
			return GetRuleContexts<TupleExprArgumentContext>();
		}
		public TupleExprArgumentContext tupleExprArgument(int i) {
			return GetRuleContext<TupleExprArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public TupleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExpr(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprContext tupleExpr() {
		TupleExprContext _localctx = new TupleExprContext(_ctx, State);
		EnterRule(_localctx, 272, RULE_tupleExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3167; Match(TUPLE);
			State = 3168; Match(LCURLY);
			State = 3177;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				State = 3169; _localctx._tupleExprArgument = tupleExprArgument();
				_localctx._Args.Add(_localctx._tupleExprArgument);
				State = 3174;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3170; Match(COMMA);
					State = 3171; _localctx._tupleExprArgument = tupleExprArgument();
					_localctx._Args.Add(_localctx._tupleExprArgument);
					}
					}
					State = 3176;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3179; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleExprArgumentContext : XSharpParserRuleContext {
		public IdentifierNameContext Name;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public IdentifierNameContext identifierName() {
			return GetRuleContext<IdentifierNameContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleExprArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleExprArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterTupleExprArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitTupleExprArgument(this);
		}
	}

	[RuleVersion(0)]
	public TupleExprArgumentContext tupleExprArgument() {
		TupleExprArgumentContext _localctx = new TupleExprArgumentContext(_ctx, State);
		EnterRule(_localctx, 274, RULE_tupleExprArgument);
		try {
			State = 3186;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,434,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3181; _localctx.Name = identifierName();
				State = 3182; _localctx.Op = assignoperator();
				State = 3183; _localctx.Expr = expression(0);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3185; _localctx.Expr = expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationExprContext : XSharpParserRuleContext {
		public VaridentifierContext _varidentifier;
		public IList<VaridentifierContext> _Ids = new List<VaridentifierContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public VaridentifierContext[] varidentifier() {
			return GetRuleContexts<VaridentifierContext>();
		}
		public VaridentifierContext varidentifier(int i) {
			return GetRuleContext<VaridentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationExprContext designationExpr() {
		DesignationExprContext _localctx = new DesignationExprContext(_ctx, State);
		EnterRule(_localctx, 276, RULE_designationExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3188; Match(LPAREN);
			State = 3189; _localctx._varidentifier = varidentifier();
			_localctx._Ids.Add(_localctx._varidentifier);
			State = 3194;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3190; Match(COMMA);
				State = 3191; _localctx._varidentifier = varidentifier();
				_localctx._Ids.Add(_localctx._varidentifier);
				}
				}
				State = 3196;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3197; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DesignationTypeExprContext : XSharpParserRuleContext {
		public LocalDesignationContext _localDesignation;
		public IList<LocalDesignationContext> _Locals = new List<LocalDesignationContext>();
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public LocalDesignationContext[] localDesignation() {
			return GetRuleContexts<LocalDesignationContext>();
		}
		public LocalDesignationContext localDesignation(int i) {
			return GetRuleContext<LocalDesignationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public DesignationTypeExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_designationTypeExpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterDesignationTypeExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitDesignationTypeExpr(this);
		}
	}

	[RuleVersion(0)]
	public DesignationTypeExprContext designationTypeExpr() {
		DesignationTypeExprContext _localctx = new DesignationTypeExprContext(_ctx, State);
		EnterRule(_localctx, 278, RULE_designationTypeExpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3199; Match(LPAREN);
			State = 3200; _localctx._localDesignation = localDesignation();
			_localctx._Locals.Add(_localctx._localDesignation);
			State = 3205;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3201; Match(COMMA);
				State = 3202; _localctx._localDesignation = localDesignation();
				_localctx._Locals.Add(_localctx._localDesignation);
				}
				}
				State = 3207;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3208; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalDesignationContext : XSharpParserRuleContext {
		public VaridentifierContext Id;
		public DatatypeContext Type;
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public VaridentifierContext varidentifier() {
			return GetRuleContext<VaridentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public LocalDesignationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localDesignation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLocalDesignation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLocalDesignation(this);
		}
	}

	[RuleVersion(0)]
	public LocalDesignationContext localDesignation() {
		LocalDesignationContext _localctx = new LocalDesignationContext(_ctx, State);
		EnterRule(_localctx, 280, RULE_localDesignation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3210; _localctx.Id = varidentifier();
			State = 3211; Match(AS);
			State = 3212; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockContext : XSharpParserRuleContext {
		public IToken Or;
		public IToken lambda;
		public CodeblockCodeContext Code;
		public IToken P1;
		public LambdaParameterListContext LambdaParamList;
		public IToken P2;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode OR() { return GetToken(XSharpParser.OR, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode UDCSEP() { return GetToken(XSharpParser.UDCSEP, 0); }
		public ITerminalNode[] PIPE() { return GetTokens(XSharpParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(XSharpParser.PIPE, i);
		}
		public LambdaParameterListContext lambdaParameterList() {
			return GetRuleContext<LambdaParameterListContext>(0);
		}
		public CodeblockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblock(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockContext codeblock() {
		CodeblockContext _localctx = new CodeblockContext(_ctx, State);
		EnterRule(_localctx, 282, RULE_codeblock);
		try {
			State = 3242;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,441,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3214; Match(LCURLY);
				State = 3215; _localctx.Or = Match(OR);
				State = 3217;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					State = 3216; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3219; _localctx.Code = codeblockCode();
				State = 3220; Match(RCURLY);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3222; Match(LCURLY);
				State = 3223; _localctx.P1 = Match(PIPE);
				State = 3225;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,438,_ctx) ) {
				case 1:
					{
					State = 3224; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3227; _localctx.P2 = Match(PIPE);
				State = 3229;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					State = 3228; _localctx.lambda = Match(UDCSEP);
					}
					break;
				}
				State = 3231; _localctx.Code = codeblockCode();
				State = 3232; Match(RCURLY);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3234; Match(LCURLY);
				State = 3236;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					State = 3235; _localctx.LambdaParamList = lambdaParameterList();
					}
					break;
				}
				State = 3238; _localctx.lambda = Match(UDCSEP);
				State = 3239; _localctx.Code = codeblockCode();
				State = 3240; Match(RCURLY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockCodeContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public StatementBlockContext StmtBlk;
		public CodeblockExprListContext ExprList;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public CodeblockExprListContext codeblockExprList() {
			return GetRuleContext<CodeblockExprListContext>(0);
		}
		public CodeblockCodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockCode; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockCode(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockCode(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockCodeContext codeblockCode() {
		CodeblockCodeContext _localctx = new CodeblockCodeContext(_ctx, State);
		EnterRule(_localctx, 284, RULE_codeblockCode);
		try {
			State = 3251;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,443,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3245;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					State = 3244; _localctx.Expr = expression(0);
					}
					break;
				}
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3247; eos();
				State = 3248; _localctx.StmtBlk = statementBlock();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3250; _localctx.ExprList = codeblockExprList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParameterListContext : XSharpParserRuleContext {
		public CodeblockParamListContext ImplicitParams;
		public ExplicitAnonymousFunctionParamListContext ExplicitParams;
		public CodeblockParamListContext codeblockParamList() {
			return GetRuleContext<CodeblockParamListContext>(0);
		}
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public LambdaParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLambdaParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLambdaParameterList(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParameterListContext lambdaParameterList() {
		LambdaParameterListContext _localctx = new LambdaParameterListContext(_ctx, State);
		EnterRule(_localctx, 286, RULE_lambdaParameterList);
		try {
			State = 3255;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,444,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3253; _localctx.ImplicitParams = codeblockParamList();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3254; _localctx.ExplicitParams = explicitAnonymousFunctionParamList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockParamListContext : XSharpParserRuleContext {
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Ids = new List<IdentifierContext>();
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockParamList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockParamListContext codeblockParamList() {
		CodeblockParamListContext _localctx = new CodeblockParamListContext(_ctx, State);
		EnterRule(_localctx, 288, RULE_codeblockParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3257; _localctx._identifier = identifier();
			_localctx._Ids.Add(_localctx._identifier);
			State = 3262;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3258; Match(COMMA);
				State = 3259; _localctx._identifier = identifier();
				_localctx._Ids.Add(_localctx._identifier);
				}
				}
				State = 3264;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CodeblockExprListContext : XSharpParserRuleContext {
		public ExpressionContext _expression;
		public IList<ExpressionContext> _Exprs = new List<ExpressionContext>();
		public ExpressionContext ReturnExpr;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public CodeblockExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_codeblockExprList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterCodeblockExprList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitCodeblockExprList(this);
		}
	}

	[RuleVersion(0)]
	public CodeblockExprListContext codeblockExprList() {
		CodeblockExprListContext _localctx = new CodeblockExprListContext(_ctx, State);
		EnterRule(_localctx, 290, RULE_codeblockExprList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3269;
			_errHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 3266;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,446,_ctx) ) {
					case 1:
						{
						State = 3265; _localctx._expression = expression(0);
						_localctx._Exprs.Add(_localctx._expression);
						}
						break;
					}
					State = 3268; Match(COMMA);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,447,_ctx);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			State = 3273; _localctx.ReturnExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousMethodExpressionContext : XSharpParserRuleContext {
		public IToken Async;
		public IToken Delegate;
		public ExplicitAnonymousFunctionParamListContext ParamList;
		public CodeblockCodeContext Code;
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public CodeblockCodeContext codeblockCode() {
			return GetRuleContext<CodeblockCodeContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
			return GetRuleContext<ExplicitAnonymousFunctionParamListContext>(0);
		}
		public AnonymousMethodExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousMethodExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousMethodExpressionContext anonymousMethodExpression() {
		AnonymousMethodExpressionContext _localctx = new AnonymousMethodExpressionContext(_ctx, State);
		EnterRule(_localctx, 292, RULE_anonymousMethodExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3276;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASYNC) {
				{
				State = 3275; _localctx.Async = Match(ASYNC);
				}
			}

			State = 3278; _localctx.Delegate = Match(DELEGATE);
			State = 3284;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3279; Match(LPAREN);
				State = 3281;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,449,_ctx) ) {
				case 1:
					{
					State = 3280; _localctx.ParamList = explicitAnonymousFunctionParamList();
					}
					break;
				}
				State = 3283; Match(RPAREN);
				}
			}

			State = 3286; Match(LCURLY);
			State = 3287; _localctx.Code = codeblockCode();
			State = 3288; Match(RCURLY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParamListContext : XSharpParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext _explicitAnonymousFunctionParameter;
		public IList<ExplicitAnonymousFunctionParameterContext> _Params = new List<ExplicitAnonymousFunctionParameterContext>();
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParamListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParamList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParamList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParamList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParamListContext explicitAnonymousFunctionParamList() {
		ExplicitAnonymousFunctionParamListContext _localctx = new ExplicitAnonymousFunctionParamListContext(_ctx, State);
		EnterRule(_localctx, 294, RULE_explicitAnonymousFunctionParamList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3290; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
			_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
			State = 3295;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3291; Match(COMMA);
				State = 3292; _localctx._explicitAnonymousFunctionParameter = explicitAnonymousFunctionParameter();
				_localctx._Params.Add(_localctx._explicitAnonymousFunctionParameter);
				}
				}
				State = 3297;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public ParameterDeclModsContext Mod;
		public DatatypeContext Type;
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterDeclModsContext parameterDeclMods() {
			return GetRuleContext<ParameterDeclModsContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(_ctx, State);
		EnterRule(_localctx, 296, RULE_explicitAnonymousFunctionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298; _localctx.Id = identifier();
			State = 3299; _localctx.Mod = parameterDeclMods();
			State = 3300; _localctx.Type = datatype();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinqQueryContext : XSharpParserRuleContext {
		public FromClauseContext From;
		public QueryBodyContext Body;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public LinqQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linqQuery; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLinqQuery(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLinqQuery(this);
		}
	}

	[RuleVersion(0)]
	public LinqQueryContext linqQuery() {
		LinqQueryContext _localctx = new LinqQueryContext(_ctx, State);
		EnterRule(_localctx, 298, RULE_linqQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3302; _localctx.From = fromClause();
			State = 3303; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public TypeNameContext Type;
		public ExpressionContext Expr;
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(_ctx, State);
		EnterRule(_localctx, 300, RULE_fromClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3305; Match(FROM);
			State = 3306; _localctx.Id = identifier();
			State = 3309;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3307; Match(AS);
				State = 3308; _localctx.Type = typeName();
				}
			}

			State = 3311; Match(IN);
			State = 3312; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : XSharpParserRuleContext {
		public QueryBodyClauseContext _queryBodyClause;
		public IList<QueryBodyClauseContext> _Bodyclauses = new List<QueryBodyClauseContext>();
		public SelectOrGroupclauseContext SorG;
		public QueryContinuationContext Continuation;
		public SelectOrGroupclauseContext selectOrGroupclause() {
			return GetRuleContext<SelectOrGroupclauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext queryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(_ctx, State);
		EnterRule(_localctx, 302, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3317;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (ORDERBY - 128)) | (1L << (WHERE - 128)))) != 0)) {
				{
				{
				State = 3314; _localctx._queryBodyClause = queryBodyClause();
				_localctx._Bodyclauses.Add(_localctx._queryBodyClause);
				}
				}
				State = 3319;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3320; _localctx.SorG = selectOrGroupclause();
			State = 3322;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,454,_ctx) ) {
			case 1:
				{
				State = 3321; _localctx.Continuation = queryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : XSharpParserRuleContext {
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
	 
		public QueryBodyClauseContext() { }
		public virtual void CopyFrom(QueryBodyClauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhereClauseContext : QueryBodyClauseContext {
		public IToken W;
		public ExpressionContext Expr;
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}
	public partial class LetClauseContext : QueryBodyClauseContext {
		public IToken L;
		public IdentifierContext Id;
		public AssignoperatorContext Op;
		public ExpressionContext Expr;
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}
	public partial class OrderbyClauseContext : QueryBodyClauseContext {
		public IToken O;
		public OrderingContext _ordering;
		public IList<OrderingContext> _Orders = new List<OrderingContext>();
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}
	public partial class JoinClauseContext : QueryBodyClauseContext {
		public IToken J;
		public IdentifierContext Id;
		public TypeNameContext Type;
		public IToken I;
		public ExpressionContext Expr;
		public IToken O;
		public ExpressionContext OnExpr;
		public IToken E;
		public ExpressionContext EqExpr;
		public JoinIntoClauseContext Into;
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public TypeNameContext typeName() {
			return GetRuleContext<TypeNameContext>(0);
		}
		public JoinIntoClauseContext joinIntoClause() {
			return GetRuleContext<JoinIntoClauseContext>(0);
		}
		public JoinClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinClause(this);
		}
	}
	public partial class FromBodyClauseContext : QueryBodyClauseContext {
		public FromClauseContext From;
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public FromBodyClauseContext(QueryBodyClauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFromBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFromBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext queryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(_ctx, State);
		EnterRule(_localctx, 304, RULE_queryBodyClause);
		int _la;
		try {
			State = 3356;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case FROM:
				_localctx = new FromBodyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3324; ((FromBodyClauseContext)_localctx).From = fromClause();
				}
				break;
			case LET:
				_localctx = new LetClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3325; ((LetClauseContext)_localctx).L = Match(LET);
				State = 3326; ((LetClauseContext)_localctx).Id = identifier();
				State = 3327; ((LetClauseContext)_localctx).Op = assignoperator();
				State = 3328; ((LetClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case WHERE:
				_localctx = new WhereClauseContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3330; ((WhereClauseContext)_localctx).W = Match(WHERE);
				State = 3331; ((WhereClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case JOIN:
				_localctx = new JoinClauseContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3332; ((JoinClauseContext)_localctx).J = Match(JOIN);
				State = 3333; ((JoinClauseContext)_localctx).Id = identifier();
				State = 3336;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3334; Match(AS);
					State = 3335; ((JoinClauseContext)_localctx).Type = typeName();
					}
				}

				State = 3338; ((JoinClauseContext)_localctx).I = Match(IN);
				State = 3339; ((JoinClauseContext)_localctx).Expr = expression(0);
				State = 3340; ((JoinClauseContext)_localctx).O = Match(ON);
				State = 3341; ((JoinClauseContext)_localctx).OnExpr = expression(0);
				State = 3342; ((JoinClauseContext)_localctx).E = Match(EQUALS);
				State = 3343; ((JoinClauseContext)_localctx).EqExpr = expression(0);
				State = 3345;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==INTO) {
					{
					State = 3344; ((JoinClauseContext)_localctx).Into = joinIntoClause();
					}
				}

				}
				break;
			case ORDERBY:
				_localctx = new OrderbyClauseContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3347; ((OrderbyClauseContext)_localctx).O = Match(ORDERBY);
				State = 3348; ((OrderbyClauseContext)_localctx)._ordering = ordering();
				((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
				State = 3353;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3349; Match(COMMA);
					State = 3350; ((OrderbyClauseContext)_localctx)._ordering = ordering();
					((OrderbyClauseContext)_localctx)._Orders.Add(((OrderbyClauseContext)_localctx)._ordering);
					}
					}
					State = 3355;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinIntoClauseContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public JoinIntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinIntoClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterJoinIntoClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitJoinIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public JoinIntoClauseContext joinIntoClause() {
		JoinIntoClauseContext _localctx = new JoinIntoClauseContext(_ctx, State);
		EnterRule(_localctx, 306, RULE_joinIntoClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358; _localctx.I = Match(INTO);
			State = 3359; _localctx.Id = identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : XSharpParserRuleContext {
		public ExpressionContext Expr;
		public IToken Direction;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(_ctx, State);
		EnterRule(_localctx, 308, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3361; _localctx.Expr = expression(0);
			State = 3363;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 3362;
				_localctx.Direction = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.Direction = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupclauseContext : XSharpParserRuleContext {
		public SelectOrGroupclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupclause; } }
	 
		public SelectOrGroupclauseContext() { }
		public virtual void CopyFrom(SelectOrGroupclauseContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class GroupClauseContext : SelectOrGroupclauseContext {
		public IToken G;
		public ExpressionContext Expr;
		public IToken B;
		public ExpressionContext ByExpr;
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public GroupClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitGroupClause(this);
		}
	}
	public partial class SelectClauseContext : SelectOrGroupclauseContext {
		public IToken S;
		public ExpressionContext Expr;
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public SelectClauseContext(SelectOrGroupclauseContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterSelectClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitSelectClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupclauseContext selectOrGroupclause() {
		SelectOrGroupclauseContext _localctx = new SelectOrGroupclauseContext(_ctx, State);
		EnterRule(_localctx, 310, RULE_selectOrGroupclause);
		try {
			State = 3372;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case SELECT:
				_localctx = new SelectClauseContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3365; ((SelectClauseContext)_localctx).S = Match(SELECT);
				State = 3366; ((SelectClauseContext)_localctx).Expr = expression(0);
				}
				break;
			case GROUP:
				_localctx = new GroupClauseContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3367; ((GroupClauseContext)_localctx).G = Match(GROUP);
				State = 3368; ((GroupClauseContext)_localctx).Expr = expression(0);
				State = 3369; ((GroupClauseContext)_localctx).B = Match(BY);
				State = 3370; ((GroupClauseContext)_localctx).ByExpr = expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : XSharpParserRuleContext {
		public IToken I;
		public IdentifierContext Id;
		public QueryBodyContext Body;
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext queryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(_ctx, State);
		EnterRule(_localctx, 312, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3374; _localctx.I = Match(INTO);
			State = 3375; _localctx.Id = identifier();
			State = 3376; _localctx.Body = queryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 314, RULE_identifier);
		try {
			State = 3386;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,461,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3378; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3379; keywordxs();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3380; keywordxpp();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3381; keywordfox();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3382;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3383; xbaseType();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3384;
				if (!(!IsCoreVO)) throw new FailedPredicateException(this, "!IsCoreVO");
				State = 3385; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierStringContext : XSharpParserRuleContext {
		public ITerminalNode ID() { return GetToken(XSharpParser.ID, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public KeywordxsContext keywordxs() {
			return GetRuleContext<KeywordxsContext>(0);
		}
		public KeywordxppContext keywordxpp() {
			return GetRuleContext<KeywordxppContext>(0);
		}
		public KeywordfoxContext keywordfox() {
			return GetRuleContext<KeywordfoxContext>(0);
		}
		public XbaseTypeContext xbaseType() {
			return GetRuleContext<XbaseTypeContext>(0);
		}
		public NativeTypeContext nativeType() {
			return GetRuleContext<NativeTypeContext>(0);
		}
		public IdentifierStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierString; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterIdentifierString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitIdentifierString(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierStringContext identifierString() {
		IdentifierStringContext _localctx = new IdentifierStringContext(_ctx, State);
		EnterRule(_localctx, 316, RULE_identifierString);
		try {
			State = 3395;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,462,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3388; Match(ID);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3389; Match(STRING_CONST);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3390; keywordxs();
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3391; keywordxpp();
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3392; keywordfox();
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3393; xbaseType();
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3394; nativeType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseFuncContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public XbaseFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseFunc; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseFunc(this);
		}
	}

	[RuleVersion(0)]
	public XbaseFuncContext xbaseFunc() {
		XbaseFuncContext _localctx = new XbaseFuncContext(_ctx, State);
		EnterRule(_localctx, 318, RULE_xbaseFunc);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3397;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (ARRAY - 154)) | (1L << (DATE - 154)) | (1L << (DATETIME - 154)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XbaseTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ARRAY() { return GetToken(XSharpParser.ARRAY, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CODEBLOCK() { return GetToken(XSharpParser.CODEBLOCK, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DATE() { return GetToken(XSharpParser.DATE, 0); }
		public ITerminalNode FLOAT() { return GetToken(XSharpParser.FLOAT, 0); }
		public ITerminalNode PSZ() { return GetToken(XSharpParser.PSZ, 0); }
		public ITerminalNode SYMBOL() { return GetToken(XSharpParser.SYMBOL, 0); }
		public ITerminalNode USUAL() { return GetToken(XSharpParser.USUAL, 0); }
		public XbaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xbaseType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXbaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXbaseType(this);
		}
	}

	[RuleVersion(0)]
	public XbaseTypeContext xbaseType() {
		XbaseTypeContext _localctx = new XbaseTypeContext(_ctx, State);
		EnterRule(_localctx, 320, RULE_xbaseType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3399;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 154)) & ~0x3f) == 0 && ((1L << (_la - 154)) & ((1L << (ARRAY - 154)) | (1L << (CODEBLOCK - 154)) | (1L << (DATE - 154)) | (1L << (FLOAT - 154)) | (1L << (PSZ - 154)) | (1L << (SYMBOL - 154)) | (1L << (USUAL - 154)) | (1L << (CURRENCY - 154)) | (1L << (BINARY - 154)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NativeTypeContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode BYTE() { return GetToken(XSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DWORD() { return GetToken(XSharpParser.DWORD, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode INT() { return GetToken(XSharpParser.INT, 0); }
		public ITerminalNode INT64() { return GetToken(XSharpParser.INT64, 0); }
		public ITerminalNode LOGIC() { return GetToken(XSharpParser.LOGIC, 0); }
		public ITerminalNode LONGINT() { return GetToken(XSharpParser.LONGINT, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode REAL4() { return GetToken(XSharpParser.REAL4, 0); }
		public ITerminalNode REAL8() { return GetToken(XSharpParser.REAL8, 0); }
		public ITerminalNode SHORTINT() { return GetToken(XSharpParser.SHORTINT, 0); }
		public ITerminalNode STRING() { return GetToken(XSharpParser.STRING, 0); }
		public ITerminalNode UINT64() { return GetToken(XSharpParser.UINT64, 0); }
		public ITerminalNode VOID() { return GetToken(XSharpParser.VOID, 0); }
		public ITerminalNode WORD() { return GetToken(XSharpParser.WORD, 0); }
		public NativeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nativeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterNativeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitNativeType(this);
		}
	}

	[RuleVersion(0)]
	public NativeTypeContext nativeType() {
		NativeTypeContext _localctx = new NativeTypeContext(_ctx, State);
		EnterRule(_localctx, 322, RULE_nativeType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3401;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 155)) & ~0x3f) == 0 && ((1L << (_la - 155)) & ((1L << (BYTE - 155)) | (1L << (DWORD - 155)) | (1L << (INT - 155)) | (1L << (LOGIC - 155)) | (1L << (LONGINT - 155)) | (1L << (OBJECT - 155)) | (1L << (PTR - 155)) | (1L << (REAL4 - 155)) | (1L << (REAL8 - 155)) | (1L << (SHORTINT - 155)) | (1L << (STRING - 155)) | (1L << (VOID - 155)) | (1L << (WORD - 155)) | (1L << (CHAR - 155)) | (1L << (INT64 - 155)) | (1L << (UINT64 - 155)) | (1L << (DYNAMIC - 155)) | (1L << (DECIMAL - 155)) | (1L << (DATETIME - 155)) | (1L << (NINT - 155)) | (1L << (NUINT - 155)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralValueContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode TRUE_CONST() { return GetToken(XSharpParser.TRUE_CONST, 0); }
		public ITerminalNode FALSE_CONST() { return GetToken(XSharpParser.FALSE_CONST, 0); }
		public ITerminalNode CHAR_CONST() { return GetToken(XSharpParser.CHAR_CONST, 0); }
		public ITerminalNode STRING_CONST() { return GetToken(XSharpParser.STRING_CONST, 0); }
		public ITerminalNode ESCAPED_STRING_CONST() { return GetToken(XSharpParser.ESCAPED_STRING_CONST, 0); }
		public ITerminalNode INTERPOLATED_STRING_CONST() { return GetToken(XSharpParser.INTERPOLATED_STRING_CONST, 0); }
		public ITerminalNode INCOMPLETE_STRING_CONST() { return GetToken(XSharpParser.INCOMPLETE_STRING_CONST, 0); }
		public ITerminalNode BRACKETED_STRING_CONST() { return GetToken(XSharpParser.BRACKETED_STRING_CONST, 0); }
		public ITerminalNode SYMBOL_CONST() { return GetToken(XSharpParser.SYMBOL_CONST, 0); }
		public ITerminalNode HEX_CONST() { return GetToken(XSharpParser.HEX_CONST, 0); }
		public ITerminalNode BIN_CONST() { return GetToken(XSharpParser.BIN_CONST, 0); }
		public ITerminalNode BINARY_CONST() { return GetToken(XSharpParser.BINARY_CONST, 0); }
		public ITerminalNode REAL_CONST() { return GetToken(XSharpParser.REAL_CONST, 0); }
		public ITerminalNode INT_CONST() { return GetToken(XSharpParser.INT_CONST, 0); }
		public ITerminalNode INVALID_NUMBER() { return GetToken(XSharpParser.INVALID_NUMBER, 0); }
		public ITerminalNode DATE_CONST() { return GetToken(XSharpParser.DATE_CONST, 0); }
		public ITerminalNode DATETIME_CONST() { return GetToken(XSharpParser.DATETIME_CONST, 0); }
		public ITerminalNode NIL() { return GetToken(XSharpParser.NIL, 0); }
		public ITerminalNode NULL() { return GetToken(XSharpParser.NULL, 0); }
		public ITerminalNode NULL_ARRAY() { return GetToken(XSharpParser.NULL_ARRAY, 0); }
		public ITerminalNode NULL_CODEBLOCK() { return GetToken(XSharpParser.NULL_CODEBLOCK, 0); }
		public ITerminalNode NULL_DATE() { return GetToken(XSharpParser.NULL_DATE, 0); }
		public ITerminalNode NULL_OBJECT() { return GetToken(XSharpParser.NULL_OBJECT, 0); }
		public ITerminalNode NULL_PSZ() { return GetToken(XSharpParser.NULL_PSZ, 0); }
		public ITerminalNode NULL_PTR() { return GetToken(XSharpParser.NULL_PTR, 0); }
		public ITerminalNode NULL_STRING() { return GetToken(XSharpParser.NULL_STRING, 0); }
		public ITerminalNode NULL_SYMBOL() { return GetToken(XSharpParser.NULL_SYMBOL, 0); }
		public ITerminalNode NULL_FOX() { return GetToken(XSharpParser.NULL_FOX, 0); }
		public LiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public LiteralValueContext literalValue() {
		LiteralValueContext _localctx = new LiteralValueContext(_ctx, State);
		EnterRule(_localctx, 324, RULE_literalValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3403;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 223)) & ~0x3f) == 0 && ((1L << (_la - 223)) & ((1L << (NIL - 223)) | (1L << (NULL - 223)) | (1L << (NULL_ARRAY - 223)) | (1L << (NULL_CODEBLOCK - 223)) | (1L << (NULL_DATE - 223)) | (1L << (NULL_OBJECT - 223)) | (1L << (NULL_PSZ - 223)) | (1L << (NULL_PTR - 223)) | (1L << (NULL_STRING - 223)) | (1L << (NULL_SYMBOL - 223)) | (1L << (NULL_FOX - 223)))) != 0) || ((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (FALSE_CONST - 306)) | (1L << (TRUE_CONST - 306)) | (1L << (HEX_CONST - 306)) | (1L << (BIN_CONST - 306)) | (1L << (INT_CONST - 306)) | (1L << (DATE_CONST - 306)) | (1L << (DATETIME_CONST - 306)) | (1L << (REAL_CONST - 306)) | (1L << (INVALID_NUMBER - 306)) | (1L << (SYMBOL_CONST - 306)) | (1L << (CHAR_CONST - 306)) | (1L << (STRING_CONST - 306)) | (1L << (ESCAPED_STRING_CONST - 306)) | (1L << (INTERPOLATED_STRING_CONST - 306)) | (1L << (INCOMPLETE_STRING_CONST - 306)) | (1L << (BRACKETED_STRING_CONST - 306)) | (1L << (BINARY_CONST - 306)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParserLiteralValueContext : XSharpParserRuleContext {
		public IToken Year;
		public IToken Month;
		public IToken Day;
		public IToken Hours;
		public IToken Minutes;
		public IToken Seconds;
		public ITerminalNode[] DOT() { return GetTokens(XSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(XSharpParser.DOT, i);
		}
		public ITerminalNode[] INT_CONST() { return GetTokens(XSharpParser.INT_CONST); }
		public ITerminalNode INT_CONST(int i) {
			return GetToken(XSharpParser.INT_CONST, i);
		}
		public ITerminalNode LCURLY() { return GetToken(XSharpParser.LCURLY, 0); }
		public ITerminalNode EXP() { return GetToken(XSharpParser.EXP, 0); }
		public ITerminalNode[] MINUS() { return GetTokens(XSharpParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(XSharpParser.MINUS, i);
		}
		public ITerminalNode RCURLY() { return GetToken(XSharpParser.RCURLY, 0); }
		public ITerminalNode[] COLON() { return GetTokens(XSharpParser.COLON); }
		public ITerminalNode COLON(int i) {
			return GetToken(XSharpParser.COLON, i);
		}
		public ParserLiteralValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parserLiteralValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterParserLiteralValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitParserLiteralValue(this);
		}
	}

	[RuleVersion(0)]
	public ParserLiteralValueContext parserLiteralValue() {
		ParserLiteralValueContext _localctx = new ParserLiteralValueContext(_ctx, State);
		EnterRule(_localctx, 326, RULE_parserLiteralValue);
		try {
			int _alt;
			State = 3435;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_CONST:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3405; _localctx.Year = Match(INT_CONST);
				State = 3406; Match(DOT);
				State = 3407; _localctx.Month = Match(INT_CONST);
				State = 3408; Match(DOT);
				State = 3409; _localctx.Day = Match(INT_CONST);
				}
				break;
			case LCURLY:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3410; Match(LCURLY);
				State = 3411; Match(EXP);
				State = 3412; _localctx.Year = Match(INT_CONST);
				State = 3413; Match(MINUS);
				State = 3414; _localctx.Month = Match(INT_CONST);
				State = 3415; Match(MINUS);
				State = 3416; _localctx.Day = Match(INT_CONST);
				State = 3426;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					State = 3417; _localctx.Hours = Match(INT_CONST);
					State = 3424;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,464,_ctx) ) {
					case 1:
						{
						State = 3418; Match(COLON);
						State = 3419; _localctx.Minutes = Match(INT_CONST);
						State = 3422;
						_errHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(_input,463,_ctx) ) {
						case 1:
							{
							State = 3420; Match(COLON);
							State = 3421; _localctx.Seconds = Match(INT_CONST);
							}
							break;
						}
						}
						break;
					}
					}
					break;
				}
				State = 3431;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,466,_ctx);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 3428;
						MatchWildcard();
						}
						} 
					}
					State = 3433;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,466,_ctx);
				}
				State = 3434; Match(RCURLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordvoContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode ACCESS() { return GetToken(XSharpParser.ACCESS, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public ITerminalNode ASSIGN() { return GetToken(XSharpParser.ASSIGN, 0); }
		public ITerminalNode BEGIN() { return GetToken(XSharpParser.BEGIN, 0); }
		public ITerminalNode BREAK() { return GetToken(XSharpParser.BREAK, 0); }
		public ITerminalNode CASE() { return GetToken(XSharpParser.CASE, 0); }
		public ITerminalNode CAST() { return GetToken(XSharpParser.CAST, 0); }
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public ITerminalNode DLL() { return GetToken(XSharpParser.DLL, 0); }
		public ITerminalNode DO() { return GetToken(XSharpParser.DO, 0); }
		public ITerminalNode ELSE() { return GetToken(XSharpParser.ELSE, 0); }
		public ITerminalNode ELSEIF() { return GetToken(XSharpParser.ELSEIF, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode ENDCASE() { return GetToken(XSharpParser.ENDCASE, 0); }
		public ITerminalNode ENDDO() { return GetToken(XSharpParser.ENDDO, 0); }
		public ITerminalNode ENDIF() { return GetToken(XSharpParser.ENDIF, 0); }
		public ITerminalNode EXIT() { return GetToken(XSharpParser.EXIT, 0); }
		public ITerminalNode EXPORT() { return GetToken(XSharpParser.EXPORT, 0); }
		public ITerminalNode FOR() { return GetToken(XSharpParser.FOR, 0); }
		public ITerminalNode FUNCTION() { return GetToken(XSharpParser.FUNCTION, 0); }
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode IF() { return GetToken(XSharpParser.IF, 0); }
		public ITerminalNode IIF() { return GetToken(XSharpParser.IIF, 0); }
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public ITerminalNode LOCAL() { return GetToken(XSharpParser.LOCAL, 0); }
		public ITerminalNode LOOP() { return GetToken(XSharpParser.LOOP, 0); }
		public ITerminalNode MEMBER() { return GetToken(XSharpParser.MEMBER, 0); }
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public ITerminalNode NEXT() { return GetToken(XSharpParser.NEXT, 0); }
		public ITerminalNode OTHERWISE() { return GetToken(XSharpParser.OTHERWISE, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public ITerminalNode PROCEDURE() { return GetToken(XSharpParser.PROCEDURE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode PTR() { return GetToken(XSharpParser.PTR, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode RECOVER() { return GetToken(XSharpParser.RECOVER, 0); }
		public ITerminalNode RETURN() { return GetToken(XSharpParser.RETURN, 0); }
		public ITerminalNode SELF() { return GetToken(XSharpParser.SELF, 0); }
		public ITerminalNode SIZEOF() { return GetToken(XSharpParser.SIZEOF, 0); }
		public ITerminalNode SUPER() { return GetToken(XSharpParser.SUPER, 0); }
		public ITerminalNode TYPEOF() { return GetToken(XSharpParser.TYPEOF, 0); }
		public ITerminalNode WHILE() { return GetToken(XSharpParser.WHILE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode BIT_AND() { return GetToken(XSharpParser.BIT_AND, 0); }
		public ITerminalNode BIT_NOT() { return GetToken(XSharpParser.BIT_NOT, 0); }
		public ITerminalNode BIT_OR() { return GetToken(XSharpParser.BIT_OR, 0); }
		public ITerminalNode BIT_XOR() { return GetToken(XSharpParser.BIT_XOR, 0); }
		public ITerminalNode REPEAT() { return GetToken(XSharpParser.REPEAT, 0); }
		public ITerminalNode CONSTRUCTOR() { return GetToken(XSharpParser.CONSTRUCTOR, 0); }
		public ITerminalNode CATCH() { return GetToken(XSharpParser.CATCH, 0); }
		public ITerminalNode DESTRUCTOR() { return GetToken(XSharpParser.DESTRUCTOR, 0); }
		public ITerminalNode FINALLY() { return GetToken(XSharpParser.FINALLY, 0); }
		public KeywordvoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordvo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordvo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordvo(this);
		}
	}

	[RuleVersion(0)]
	public KeywordvoContext keywordvo() {
		KeywordvoContext _localctx = new KeywordvoContext(_ctx, State);
		EnterRule(_localctx, 328, RULE_keywordvo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3437;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << AS) | (1L << ASSIGN) | (1L << BEGIN) | (1L << BREAK) | (1L << CASE) | (1L << CAST) | (1L << CLASS) | (1L << DLL) | (1L << DO) | (1L << ELSE) | (1L << ELSEIF) | (1L << END) | (1L << ENDCASE) | (1L << ENDDO) | (1L << ENDIF) | (1L << EXIT) | (1L << EXPORT) | (1L << FOR) | (1L << FUNCTION) | (1L << HIDDEN) | (1L << IF) | (1L << IIF) | (1L << IS) | (1L << LOCAL) | (1L << LOOP) | (1L << MEMBER) | (1L << METHOD) | (1L << NEXT) | (1L << OTHERWISE) | (1L << PRIVATE) | (1L << PROCEDURE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RECOVER) | (1L << RETURN) | (1L << SELF) | (1L << SIZEOF))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (SUPER - 66)) | (1L << (TYPEOF - 66)) | (1L << (WHILE - 66)) | (1L << (CATCH - 66)) | (1L << (FINALLY - 66)) | (1L << (CONSTRUCTOR - 66)) | (1L << (DESTRUCTOR - 66)) | (1L << (REPEAT - 66)) | (1L << (TRY - 66)))) != 0) || _la==PTR || ((((_la - 261)) & ~0x3f) == 0 && ((1L << (_la - 261)) & ((1L << (BIT_NOT - 261)) | (1L << (BIT_AND - 261)) | (1L << (BIT_OR - 261)) | (1L << (BIT_XOR - 261)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxsContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode AUTO() { return GetToken(XSharpParser.AUTO, 0); }
		public ITerminalNode CHAR() { return GetToken(XSharpParser.CHAR, 0); }
		public ITerminalNode CONST() { return GetToken(XSharpParser.CONST, 0); }
		public ITerminalNode DEFAULT() { return GetToken(XSharpParser.DEFAULT, 0); }
		public ITerminalNode GET() { return GetToken(XSharpParser.GET, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public ITerminalNode NEW() { return GetToken(XSharpParser.NEW, 0); }
		public ITerminalNode OUT() { return GetToken(XSharpParser.OUT, 0); }
		public ITerminalNode REF() { return GetToken(XSharpParser.REF, 0); }
		public ITerminalNode SET() { return GetToken(XSharpParser.SET, 0); }
		public ITerminalNode VALUE() { return GetToken(XSharpParser.VALUE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(XSharpParser.VIRTUAL, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode ARGLIST() { return GetToken(XSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(XSharpParser.ASCENDING, 0); }
		public ITerminalNode ASTYPE() { return GetToken(XSharpParser.ASTYPE, 0); }
		public ITerminalNode ASYNC() { return GetToken(XSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(XSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(XSharpParser.BY, 0); }
		public ITerminalNode CHECKED() { return GetToken(XSharpParser.CHECKED, 0); }
		public ITerminalNode DESCENDING() { return GetToken(XSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(XSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(XSharpParser.EQUALS, 0); }
		public ITerminalNode EXTERN() { return GetToken(XSharpParser.EXTERN, 0); }
		public ITerminalNode FIXED() { return GetToken(XSharpParser.FIXED, 0); }
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode GROUP() { return GetToken(XSharpParser.GROUP, 0); }
		public ITerminalNode INIT() { return GetToken(XSharpParser.INIT, 0); }
		public ITerminalNode INTO() { return GetToken(XSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(XSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(XSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(XSharpParser.NAMEOF, 0); }
		public ITerminalNode OF() { return GetToken(XSharpParser.OF, 0); }
		public ITerminalNode ON() { return GetToken(XSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(XSharpParser.ORDERBY, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(XSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(XSharpParser.PARAMS, 0); }
		public ITerminalNode REMOVE() { return GetToken(XSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(XSharpParser.SELECT, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(XSharpParser.STACKALLOC, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(XSharpParser.UNCHECKED, 0); }
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode VOLATILE() { return GetToken(XSharpParser.VOLATILE, 0); }
		public ITerminalNode WHEN() { return GetToken(XSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(XSharpParser.WHERE, 0); }
		public ITerminalNode BINARY() { return GetToken(XSharpParser.BINARY, 0); }
		public ITerminalNode CURRENCY() { return GetToken(XSharpParser.CURRENCY, 0); }
		public ITerminalNode DECIMAL() { return GetToken(XSharpParser.DECIMAL, 0); }
		public ITerminalNode DATETIME() { return GetToken(XSharpParser.DATETIME, 0); }
		public ITerminalNode NINT() { return GetToken(XSharpParser.NINT, 0); }
		public ITerminalNode NUINT() { return GetToken(XSharpParser.NUINT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(XSharpParser.DELEGATE, 0); }
		public ITerminalNode ENUM() { return GetToken(XSharpParser.ENUM, 0); }
		public ITerminalNode GLOBAL() { return GetToken(XSharpParser.GLOBAL, 0); }
		public ITerminalNode INHERIT() { return GetToken(XSharpParser.INHERIT, 0); }
		public ITerminalNode STRUCTURE() { return GetToken(XSharpParser.STRUCTURE, 0); }
		public ITerminalNode ALIGN() { return GetToken(XSharpParser.ALIGN, 0); }
		public ITerminalNode CALLBACK() { return GetToken(XSharpParser.CALLBACK, 0); }
		public ITerminalNode CLIPPER() { return GetToken(XSharpParser.CLIPPER, 0); }
		public ITerminalNode DIM() { return GetToken(XSharpParser.DIM, 0); }
		public ITerminalNode DOWNTO() { return GetToken(XSharpParser.DOWNTO, 0); }
		public ITerminalNode DLLEXPORT() { return GetToken(XSharpParser.DLLEXPORT, 0); }
		public ITerminalNode FASTCALL() { return GetToken(XSharpParser.FASTCALL, 0); }
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode INIT1() { return GetToken(XSharpParser.INIT1, 0); }
		public ITerminalNode INIT2() { return GetToken(XSharpParser.INIT2, 0); }
		public ITerminalNode INIT3() { return GetToken(XSharpParser.INIT3, 0); }
		public ITerminalNode INSTANCE() { return GetToken(XSharpParser.INSTANCE, 0); }
		public ITerminalNode PASCAL() { return GetToken(XSharpParser.PASCAL, 0); }
		public ITerminalNode SEQUENCE() { return GetToken(XSharpParser.SEQUENCE, 0); }
		public ITerminalNode STEP() { return GetToken(XSharpParser.STEP, 0); }
		public ITerminalNode STRICT() { return GetToken(XSharpParser.STRICT, 0); }
		public ITerminalNode TO() { return GetToken(XSharpParser.TO, 0); }
		public ITerminalNode THISCALL() { return GetToken(XSharpParser.THISCALL, 0); }
		public ITerminalNode TUPLE() { return GetToken(XSharpParser.TUPLE, 0); }
		public ITerminalNode UPTO() { return GetToken(XSharpParser.UPTO, 0); }
		public ITerminalNode USING() { return GetToken(XSharpParser.USING, 0); }
		public ITerminalNode WINCALL() { return GetToken(XSharpParser.WINCALL, 0); }
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public ITerminalNode DEFINE() { return GetToken(XSharpParser.DEFINE, 0); }
		public ITerminalNode TRY() { return GetToken(XSharpParser.TRY, 0); }
		public ITerminalNode SWITCH() { return GetToken(XSharpParser.SWITCH, 0); }
		public ITerminalNode EVENT() { return GetToken(XSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(XSharpParser.EXPLICIT, 0); }
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public ITerminalNode FOREACH() { return GetToken(XSharpParser.FOREACH, 0); }
		public ITerminalNode UNTIL() { return GetToken(XSharpParser.UNTIL, 0); }
		public ITerminalNode PARAMETERS() { return GetToken(XSharpParser.PARAMETERS, 0); }
		public ITerminalNode YIELD() { return GetToken(XSharpParser.YIELD, 0); }
		public ITerminalNode MEMVAR() { return GetToken(XSharpParser.MEMVAR, 0); }
		public ITerminalNode NOP() { return GetToken(XSharpParser.NOP, 0); }
		public ITerminalNode PARTIAL() { return GetToken(XSharpParser.PARTIAL, 0); }
		public ITerminalNode SEALED() { return GetToken(XSharpParser.SEALED, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(XSharpParser.ABSTRACT, 0); }
		public ITerminalNode UNSAFE() { return GetToken(XSharpParser.UNSAFE, 0); }
		public ITerminalNode SCOPE() { return GetToken(XSharpParser.SCOPE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(XSharpParser.NAMESPACE, 0); }
		public ITerminalNode LOCK() { return GetToken(XSharpParser.LOCK, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(XSharpParser.IMPLICIT, 0); }
		public ITerminalNode IMPLIED() { return GetToken(XSharpParser.IMPLIED, 0); }
		public ITerminalNode INITONLY() { return GetToken(XSharpParser.INITONLY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(XSharpParser.PROPERTY, 0); }
		public ITerminalNode INTERFACE() { return GetToken(XSharpParser.INTERFACE, 0); }
		public ITerminalNode VOSTRUCT() { return GetToken(XSharpParser.VOSTRUCT, 0); }
		public ITerminalNode UNION() { return GetToken(XSharpParser.UNION, 0); }
		public ITerminalNode DECLARE() { return GetToken(XSharpParser.DECLARE, 0); }
		public ITerminalNode OPERATOR() { return GetToken(XSharpParser.OPERATOR, 0); }
		public KeywordxsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxs(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxsContext keywordxs() {
		KeywordxsContext _localctx = new KeywordxsContext(_ctx, State);
		EnterRule(_localctx, 330, RULE_keywordxs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3439;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALIGN) | (1L << CALLBACK) | (1L << CLIPPER) | (1L << DECLARE) | (1L << DEFINE) | (1L << DIM) | (1L << DLLEXPORT) | (1L << DOWNTO) | (1L << FASTCALL) | (1L << FIELD) | (1L << GLOBAL) | (1L << INHERIT) | (1L << INIT1) | (1L << INIT2) | (1L << INIT3) | (1L << INSTANCE) | (1L << IN) | (1L << MEMVAR) | (1L << NAMEOF) | (1L << PARAMETERS) | (1L << PASCAL) | (1L << SEQUENCE))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (STEP - 64)) | (1L << (STRICT - 64)) | (1L << (THISCALL - 64)) | (1L << (TO - 64)) | (1L << (UNION - 64)) | (1L << (UPTO - 64)) | (1L << (USING - 64)) | (1L << (WINCALL - 64)) | (1L << (ABSTRACT - 64)) | (1L << (AUTO - 64)) | (1L << (CONST - 64)) | (1L << (DEFAULT - 64)) | (1L << (DELEGATE - 64)) | (1L << (ENUM - 64)) | (1L << (EVENT - 64)) | (1L << (EXPLICIT - 64)) | (1L << (FOREACH - 64)) | (1L << (GET - 64)) | (1L << (IMPLEMENTS - 64)) | (1L << (IMPLICIT - 64)) | (1L << (IMPLIED - 64)) | (1L << (INITONLY - 64)) | (1L << (INTERFACE - 64)) | (1L << (INTERNAL - 64)) | (1L << (LOCK - 64)) | (1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (PROPERTY - 64)) | (1L << (SCOPE - 64)) | (1L << (SEALED - 64)) | (1L << (SET - 64)) | (1L << (STRUCTURE - 64)) | (1L << (TRY - 64)) | (1L << (TUPLE - 64)) | (1L << (UNTIL - 64)) | (1L << (VALUE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOSTRUCT - 64)) | (1L << (ADD - 64)) | (1L << (ARGLIST - 64)) | (1L << (ASCENDING - 64)) | (1L << (ASYNC - 64)) | (1L << (ASTYPE - 64)) | (1L << (AWAIT - 64)) | (1L << (BY - 64)) | (1L << (CHECKED - 64)) | (1L << (DESCENDING - 64)) | (1L << (EQUALS - 64)) | (1L << (EXTERN - 64)) | (1L << (FIXED - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (FROM - 128)) | (1L << (GROUP - 128)) | (1L << (INIT - 128)) | (1L << (INTO - 128)) | (1L << (JOIN - 128)) | (1L << (LET - 128)) | (1L << (NOP - 128)) | (1L << (OF - 128)) | (1L << (ON - 128)) | (1L << (ORDERBY - 128)) | (1L << (OVERRIDE - 128)) | (1L << (PARAMS - 128)) | (1L << (REMOVE - 128)) | (1L << (SELECT - 128)) | (1L << (STACKALLOC - 128)) | (1L << (SWITCH - 128)) | (1L << (UNCHECKED - 128)) | (1L << (UNSAFE - 128)) | (1L << (VAR - 128)) | (1L << (VOLATILE - 128)) | (1L << (WHEN - 128)) | (1L << (WHERE - 128)) | (1L << (YIELD - 128)) | (1L << (WITH - 128)) | (1L << (REF - 128)) | (1L << (CHAR - 128)) | (1L << (DYNAMIC - 128)) | (1L << (DECIMAL - 128)) | (1L << (DATETIME - 128)) | (1L << (CURRENCY - 128)) | (1L << (BINARY - 128)) | (1L << (NINT - 128)) | (1L << (NUINT - 128)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordxppContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public KeywordxppContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordxpp; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordxpp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordxpp(this);
		}
	}

	[RuleVersion(0)]
	public KeywordxppContext keywordxpp() {
		KeywordxppContext _localctx = new KeywordxppContext(_ctx, State);
		EnterRule(_localctx, 332, RULE_keywordxpp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3441;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 189)) & ~0x3f) == 0 && ((1L << (_la - 189)) & ((1L << (ASSIGNMENT - 189)) | (1L << (EXPORTED - 189)) | (1L << (NOSAVE - 189)) | (1L << (READONLY - 189)) | (1L << (SHARING - 189)) | (1L << (SHARED - 189)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppclassModifiersContext Modifiers;
		public IToken C;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public IToken From;
		public DatatypeContext _datatype;
		public IList<DatatypeContext> _BaseTypes = new List<DatatypeContext>();
		public IList<DatatypeContext> _Implements = new List<DatatypeContext>();
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public XppclassMemberContext _xppclassMember;
		public IList<XppclassMemberContext> _Members = new List<XppclassMemberContext>();
		public ITerminalNode ENDCLASS() { return GetToken(XSharpParser.ENDCLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppclassModifiersContext xppclassModifiers() {
			return GetRuleContext<XppclassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext[] datatype() {
			return GetRuleContexts<DatatypeContext>();
		}
		public DatatypeContext datatype(int i) {
			return GetRuleContext<DatatypeContext>(i);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public XppclassMemberContext[] xppclassMember() {
			return GetRuleContexts<XppclassMemberContext>();
		}
		public XppclassMemberContext xppclassMember(int i) {
			return GetRuleContext<XppclassMemberContext>(i);
		}
		public ITerminalNode FROM() { return GetToken(XSharpParser.FROM, 0); }
		public ITerminalNode SHARING() { return GetToken(XSharpParser.SHARING, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclass(this);
		}
	}

	[RuleVersion(0)]
	public XppclassContext xppclass() {
		XppclassContext _localctx = new XppclassContext(_ctx, State);
		EnterRule(_localctx, 334, RULE_xppclass);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3444;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3443; _localctx.Attributes = attributes();
				}
			}

			State = 3447;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) {
				{
				State = 3446; _localctx.Modifiers = xppclassModifiers();
				}
			}

			State = 3449; _localctx.C = Match(CLASS);
			State = 3451;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,470,_ctx) ) {
			case 1:
				{
				State = 3450; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3453; _localctx.Id = identifier();
			State = 3455;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3454; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3466;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==FROM || _la==SHARING) {
				{
				State = 3457;
				_localctx.From = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==FROM || _la==SHARING) ) {
					_localctx.From = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 3458; _localctx._datatype = datatype();
				_localctx._BaseTypes.Add(_localctx._datatype);
				State = 3463;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3459; Match(COMMA);
					State = 3460; _localctx._datatype = datatype();
					_localctx._BaseTypes.Add(_localctx._datatype);
					}
					}
					State = 3465;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3477;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IMPLEMENTS) {
				{
				State = 3468; Match(IMPLEMENTS);
				State = 3469; _localctx._datatype = datatype();
				_localctx._Implements.Add(_localctx._datatype);
				State = 3474;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3470; Match(COMMA);
					State = 3471; _localctx._datatype = datatype();
					_localctx._Implements.Add(_localctx._datatype);
					}
					}
					State = 3476;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3482;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3479; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3484;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3485; _localctx.e = eos();
			State = 3489;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ACCESS) | (1L << ASSIGN) | (1L << CLASS) | (1L << HIDDEN) | (1L << METHOD) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC))) != 0) || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (INTERNAL - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (VAR - 145)) | (1L << (DEFERRED - 145)) | (1L << (EXPORTED - 145)) | (1L << (FINAL - 145)) | (1L << (INLINE - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) || _la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				{
				State = 3486; _localctx._xppclassMember = xppclassMember();
				_localctx._Members.Add(_localctx._xppclassMember);
				}
				}
				State = 3491;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3492; Match(ENDCLASS);
			State = 3493; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassModifiersContext : XSharpParserRuleContext {
		public IToken _STATIC;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FREEZE;
		public IToken _FINAL;
		public IToken _SEALED;
		public IToken _ABSTRACT;
		public IToken _tset11264;
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] FREEZE() { return GetTokens(XSharpParser.FREEZE); }
		public ITerminalNode FREEZE(int i) {
			return GetToken(XSharpParser.FREEZE, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] SEALED() { return GetTokens(XSharpParser.SEALED); }
		public ITerminalNode SEALED(int i) {
			return GetToken(XSharpParser.SEALED, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public XppclassModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppclassModifiersContext xppclassModifiers() {
		XppclassModifiersContext _localctx = new XppclassModifiersContext(_ctx, State);
		EnterRule(_localctx, 336, RULE_xppclassModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3496;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3495;
				_localctx._tset11264 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL) ) {
					_localctx._tset11264 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11264);
				}
				}
				State = 3498;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( ((((_la - 63)) & ~0x3f) == 0 && ((1L << (_la - 63)) & ((1L << (STATIC - 63)) | (1L << (ABSTRACT - 63)) | (1L << (SEALED - 63)))) != 0) || _la==FREEZE || _la==FINAL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassMemberContext : XSharpParserRuleContext {
		public XppclassMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassMember; } }
	 
		public XppclassMemberContext() { }
		public virtual void CopyFrom(XppclassMemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class XppclsvisibilityContext : XppclassMemberContext {
		public XppmethodvisContext Member;
		public XppmethodvisContext xppmethodvis() {
			return GetRuleContext<XppmethodvisContext>(0);
		}
		public XppclsvisibilityContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvisibility(this);
		}
	}
	public partial class XppclsdeclaremethodContext : XppclassMemberContext {
		public XppdeclareMethodContext Member;
		public XppdeclareMethodContext xppdeclareMethod() {
			return GetRuleContext<XppdeclareMethodContext>(0);
		}
		public XppclsdeclaremethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsdeclaremethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsdeclaremethod(this);
		}
	}
	public partial class XppclsinlinemethodContext : XppclassMemberContext {
		public XppinlineMethodContext Member;
		public XppinlineMethodContext xppinlineMethod() {
			return GetRuleContext<XppinlineMethodContext>(0);
		}
		public XppclsinlinemethodContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsinlinemethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsinlinemethod(this);
		}
	}
	public partial class XppclspropertyContext : XppclassMemberContext {
		public XppdeclarepropertyContext Member;
		public XppdeclarepropertyContext xppdeclareproperty() {
			return GetRuleContext<XppdeclarepropertyContext>(0);
		}
		public XppclspropertyContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsproperty(this);
		}
	}
	public partial class XppclsvarsContext : XppclassMemberContext {
		public XppclassvarsContext Member;
		public XppclassvarsContext xppclassvars() {
			return GetRuleContext<XppclassvarsContext>(0);
		}
		public XppclsvarsContext(XppclassMemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclsvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassMemberContext xppclassMember() {
		XppclassMemberContext _localctx = new XppclassMemberContext(_ctx, State);
		EnterRule(_localctx, 338, RULE_xppclassMember);
		try {
			State = 3505;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,479,_ctx) ) {
			case 1:
				_localctx = new XppclsvisibilityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3500; ((XppclsvisibilityContext)_localctx).Member = xppmethodvis();
				}
				break;

			case 2:
				_localctx = new XppclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3501; ((XppclsvarsContext)_localctx).Member = xppclassvars();
				}
				break;

			case 3:
				_localctx = new XppclsinlinemethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3502; ((XppclsinlinemethodContext)_localctx).Member = xppinlineMethod();
				}
				break;

			case 4:
				_localctx = new XppclsdeclaremethodContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3503; ((XppclsdeclaremethodContext)_localctx).Member = xppdeclareMethod();
				}
				break;

			case 5:
				_localctx = new XppclspropertyContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3504; ((XppclspropertyContext)_localctx).Member = xppdeclareproperty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodvisContext : XSharpParserRuleContext {
		public XppvisibilityContext Vis;
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppmethodvisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethodvis; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethodvis(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethodvis(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodvisContext xppmethodvis() {
		XppmethodvisContext _localctx = new XppmethodvisContext(_ctx, State);
		EnterRule(_localctx, 340, RULE_xppmethodvis);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507; _localctx.Vis = xppvisibility();
			State = 3508; Match(COLON);
			State = 3509; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvisibilityContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode HIDDEN() { return GetToken(XSharpParser.HIDDEN, 0); }
		public ITerminalNode PROTECTED() { return GetToken(XSharpParser.PROTECTED, 0); }
		public ITerminalNode EXPORTED() { return GetToken(XSharpParser.EXPORTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(XSharpParser.INTERNAL, 0); }
		public ITerminalNode PUBLIC() { return GetToken(XSharpParser.PUBLIC, 0); }
		public ITerminalNode PRIVATE() { return GetToken(XSharpParser.PRIVATE, 0); }
		public XppvisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvisibility; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvisibility(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvisibility(this);
		}
	}

	[RuleVersion(0)]
	public XppvisibilityContext xppvisibility() {
		XppvisibilityContext _localctx = new XppvisibilityContext(_ctx, State);
		EnterRule(_localctx, 342, RULE_xppvisibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3511;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 34)) & ~0x3f) == 0 && ((1L << (_la - 34)) & ((1L << (HIDDEN - 34)) | (1L << (PRIVATE - 34)) | (1L << (PROTECTED - 34)) | (1L << (PUBLIC - 34)) | (1L << (INTERNAL - 34)))) != 0) || _la==EXPORTED) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclareMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Methods = new List<IdentifierContext>();
		public XppisinContext Is;
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppdeclmethodparamsContext[] xppdeclmethodparams() {
			return GetRuleContexts<XppdeclmethodparamsContext>();
		}
		public XppdeclmethodparamsContext xppdeclmethodparams(int i) {
			return GetRuleContext<XppdeclmethodparamsContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclareMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclareMethodContext xppdeclareMethod() {
		XppdeclareMethodContext _localctx = new XppdeclareMethodContext(_ctx, State);
		EnterRule(_localctx, 344, RULE_xppdeclareMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3514;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3513; _localctx.Attributes = attributes();
				}
			}

			State = 3517;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3516; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3519; Match(METHOD);
			State = 3520; _localctx._identifier = identifier();
			_localctx._Methods.Add(_localctx._identifier);
			State = 3522;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LPAREN) {
				{
				State = 3521; xppdeclmethodparams();
				}
			}

			State = 3535;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,485,_ctx) ) {
			case 1:
				{
				State = 3524; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				State = 3532;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3525; Match(COMMA);
					State = 3526; _localctx._identifier = identifier();
					_localctx._Methods.Add(_localctx._identifier);
					State = 3528;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==LPAREN) {
						{
						State = 3527; xppdeclmethodparams();
						}
					}

					}
					}
					State = 3534;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3537; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclmethodparamsContext : XSharpParserRuleContext {
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public XppdeclmethodparamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclmethodparams; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclmethodparams(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclmethodparams(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclmethodparamsContext xppdeclmethodparams() {
		XppdeclmethodparamsContext _localctx = new XppdeclmethodparamsContext(_ctx, State);
		EnterRule(_localctx, 346, RULE_xppdeclmethodparams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3539; Match(LPAREN);
			State = 3548;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,487,_ctx) ) {
			case 1:
				{
				State = 3540; identifier();
				State = 3545;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3541; Match(COMMA);
					State = 3542; identifier();
					}
					}
					State = 3547;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			}
			State = 3550; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppisinContext : XSharpParserRuleContext {
		public ITerminalNode IS() { return GetToken(XSharpParser.IS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public XppisinContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppisin; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppisin(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppisin(this);
		}
	}

	[RuleVersion(0)]
	public XppisinContext xppisin() {
		XppisinContext _localctx = new XppisinContext(_ctx, State);
		EnterRule(_localctx, 348, RULE_xppisin);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3554;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IS) {
				{
				State = 3552; Match(IS);
				State = 3553; identifier();
				}
			}

			State = 3558;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3556; Match(IN);
				State = 3557; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmemberModifiersContext : XSharpParserRuleContext {
		public IToken _DEFERRED;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _FINAL;
		public IToken _INTRODUCE;
		public IToken _OVERRIDE;
		public IToken _CLASS;
		public IToken _SYNC;
		public IToken _STATIC;
		public IToken _ABSTRACT;
		public IToken _NEW;
		public IToken _ASYNC;
		public IToken _UNSAFE;
		public IToken _EXTERN;
		public IToken _VIRTUAL;
		public IToken _tset11502;
		public ITerminalNode[] DEFERRED() { return GetTokens(XSharpParser.DEFERRED); }
		public ITerminalNode DEFERRED(int i) {
			return GetToken(XSharpParser.DEFERRED, i);
		}
		public ITerminalNode[] FINAL() { return GetTokens(XSharpParser.FINAL); }
		public ITerminalNode FINAL(int i) {
			return GetToken(XSharpParser.FINAL, i);
		}
		public ITerminalNode[] INTRODUCE() { return GetTokens(XSharpParser.INTRODUCE); }
		public ITerminalNode INTRODUCE(int i) {
			return GetToken(XSharpParser.INTRODUCE, i);
		}
		public ITerminalNode[] OVERRIDE() { return GetTokens(XSharpParser.OVERRIDE); }
		public ITerminalNode OVERRIDE(int i) {
			return GetToken(XSharpParser.OVERRIDE, i);
		}
		public ITerminalNode[] CLASS() { return GetTokens(XSharpParser.CLASS); }
		public ITerminalNode CLASS(int i) {
			return GetToken(XSharpParser.CLASS, i);
		}
		public ITerminalNode[] SYNC() { return GetTokens(XSharpParser.SYNC); }
		public ITerminalNode SYNC(int i) {
			return GetToken(XSharpParser.SYNC, i);
		}
		public ITerminalNode[] STATIC() { return GetTokens(XSharpParser.STATIC); }
		public ITerminalNode STATIC(int i) {
			return GetToken(XSharpParser.STATIC, i);
		}
		public ITerminalNode[] ABSTRACT() { return GetTokens(XSharpParser.ABSTRACT); }
		public ITerminalNode ABSTRACT(int i) {
			return GetToken(XSharpParser.ABSTRACT, i);
		}
		public ITerminalNode[] NEW() { return GetTokens(XSharpParser.NEW); }
		public ITerminalNode NEW(int i) {
			return GetToken(XSharpParser.NEW, i);
		}
		public ITerminalNode[] ASYNC() { return GetTokens(XSharpParser.ASYNC); }
		public ITerminalNode ASYNC(int i) {
			return GetToken(XSharpParser.ASYNC, i);
		}
		public ITerminalNode[] UNSAFE() { return GetTokens(XSharpParser.UNSAFE); }
		public ITerminalNode UNSAFE(int i) {
			return GetToken(XSharpParser.UNSAFE, i);
		}
		public ITerminalNode[] EXTERN() { return GetTokens(XSharpParser.EXTERN); }
		public ITerminalNode EXTERN(int i) {
			return GetToken(XSharpParser.EXTERN, i);
		}
		public ITerminalNode[] VIRTUAL() { return GetTokens(XSharpParser.VIRTUAL); }
		public ITerminalNode VIRTUAL(int i) {
			return GetToken(XSharpParser.VIRTUAL, i);
		}
		public XppmemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmemberModifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public XppmemberModifiersContext xppmemberModifiers() {
		XppmemberModifiersContext _localctx = new XppmemberModifiersContext(_ctx, State);
		EnterRule(_localctx, 350, RULE_xppmemberModifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3561;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3560;
				_localctx._tset11502 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) ) {
					_localctx._tset11502 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11502);
				}
				}
				State = 3563;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppclassvarsContext : XSharpParserRuleContext {
		public XppmemberModifiersContext Modifiers;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public XppisinContext Is;
		public DatatypeContext DataType;
		public IToken Shared;
		public IToken ReadOnly;
		public XppvarassignmentContext Assignment;
		public IToken Nosave;
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public XppisinContext xppisin() {
			return GetRuleContext<XppisinContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public ITerminalNode SHARED() { return GetToken(XSharpParser.SHARED, 0); }
		public ITerminalNode READONLY() { return GetToken(XSharpParser.READONLY, 0); }
		public XppvarassignmentContext xppvarassignment() {
			return GetRuleContext<XppvarassignmentContext>(0);
		}
		public ITerminalNode NOSAVE() { return GetToken(XSharpParser.NOSAVE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppclassvars(this);
		}
	}

	[RuleVersion(0)]
	public XppclassvarsContext xppclassvars() {
		XppclassvarsContext _localctx = new XppclassvarsContext(_ctx, State);
		EnterRule(_localctx, 352, RULE_xppclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3566;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3565; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3568; Match(VAR);
			State = 3569; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3582;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,494,_ctx) ) {
			case 1:
				{
				State = 3570; _localctx.Is = xppisin();
				}
				break;

			case 2:
				{
				{
				State = 3575;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3571; Match(COMMA);
					State = 3572; _localctx._identifier = identifier();
					_localctx._Vars.Add(_localctx._identifier);
					}
					}
					State = 3577;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 3580;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==AS) {
					{
					State = 3578; Match(AS);
					State = 3579; _localctx.DataType = datatype();
					}
				}

				}
				}
				break;
			}
			State = 3585;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==SHARED) {
				{
				State = 3584; _localctx.Shared = Match(SHARED);
				}
			}

			State = 3588;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==READONLY) {
				{
				State = 3587; _localctx.ReadOnly = Match(READONLY);
				}
			}

			State = 3591;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3590; _localctx.Assignment = xppvarassignment();
				}
			}

			State = 3594;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOSAVE) {
				{
				State = 3593; _localctx.Nosave = Match(NOSAVE);
				}
			}

			State = 3596; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppvarassignmentContext : XSharpParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(XSharpParser.ASSIGNMENT, 0); }
		public XppvisibilityContext xppvisibility() {
			return GetRuleContext<XppvisibilityContext>(0);
		}
		public XppvarassignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppvarassignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppvarassignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppvarassignment(this);
		}
	}

	[RuleVersion(0)]
	public XppvarassignmentContext xppvarassignment() {
		XppvarassignmentContext _localctx = new XppvarassignmentContext(_ctx, State);
		EnterRule(_localctx, 354, RULE_xppvarassignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3598; Match(ASSIGNMENT);
			State = 3599; xppvisibility();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppdeclarepropertyContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext Id;
		public IdentifierContext VarName;
		public DatatypeContext Type;
		public EosContext end;
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public ITerminalNode METHOD() { return GetToken(XSharpParser.METHOD, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode VAR() { return GetToken(XSharpParser.VAR, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public XppdeclarepropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppdeclareproperty; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppdeclareproperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppdeclareproperty(this);
		}
	}

	[RuleVersion(0)]
	public XppdeclarepropertyContext xppdeclareproperty() {
		XppdeclarepropertyContext _localctx = new XppdeclarepropertyContext(_ctx, State);
		EnterRule(_localctx, 356, RULE_xppdeclareproperty);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3602;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3601; _localctx.Attributes = attributes();
				}
			}

			State = 3604; _localctx.Accessors = xppaccessors();
			State = 3606;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3605; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3608; _localctx.M = Match(METHOD);
			State = 3609; _localctx.Id = identifier();
			State = 3612;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==VAR) {
				{
				State = 3610; Match(VAR);
				State = 3611; _localctx.VarName = identifier();
				}
			}

			State = 3616;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3614; Match(AS);
				State = 3615; _localctx.Type = datatype();
				}
			}

			State = 3618; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppaccessorsContext : XSharpParserRuleContext {
		public IToken _ACCESS;
		public IList<IToken> _Tokens = new List<IToken>();
		public IToken _ASSIGN;
		public IToken _tset11736;
		public ITerminalNode[] ACCESS() { return GetTokens(XSharpParser.ACCESS); }
		public ITerminalNode ACCESS(int i) {
			return GetToken(XSharpParser.ACCESS, i);
		}
		public ITerminalNode[] ASSIGN() { return GetTokens(XSharpParser.ASSIGN); }
		public ITerminalNode ASSIGN(int i) {
			return GetToken(XSharpParser.ASSIGN, i);
		}
		public XppaccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppaccessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppaccessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppaccessors(this);
		}
	}

	[RuleVersion(0)]
	public XppaccessorsContext xppaccessors() {
		XppaccessorsContext _localctx = new XppaccessorsContext(_ctx, State);
		EnterRule(_localctx, 358, RULE_xppaccessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3621;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 3620;
				_localctx._tset11736 = _input.Lt(1);
				_la = _input.La(1);
				if ( !(_la==ACCESS || _la==ASSIGN) ) {
					_localctx._tset11736 = _errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				_localctx._Tokens.Add(_localctx._tset11736);
				}
				}
				State = 3623;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ACCESS || _la==ASSIGN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public IToken M;
		public IdentifierContext ClassId;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(XSharpParser.COLON, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public XppmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppmethod(this);
		}
	}

	[RuleVersion(0)]
	public XppmethodContext xppmethod() {
		XppmethodContext _localctx = new XppmethodContext(_ctx, State);
		EnterRule(_localctx, 360, RULE_xppmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3626;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3625; _localctx.Attributes = attributes();
				}
			}

			State = 3629;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3628; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3632;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3631; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3634; _localctx.M = Match(METHOD);
			State = 3638;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				State = 3635; _localctx.ClassId = identifier();
				State = 3636; Match(COLON);
				}
				break;
			}
			State = 3640; _localctx.Sig = signature();
			State = 3641; _localctx.end = eos();
			State = 3642; _localctx.StmtBlk = statementBlock();
			State = 3646;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,508,_ctx) ) {
			case 1:
				{
				State = 3643; Match(END);
				State = 3644; Match(METHOD);
				State = 3645; eos();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XppinlineMethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken I;
		public XppaccessorsContext Accessors;
		public XppmemberModifiersContext Modifiers;
		public SignatureContext Sig;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public ITerminalNode[] METHOD() { return GetTokens(XSharpParser.METHOD); }
		public ITerminalNode METHOD(int i) {
			return GetToken(XSharpParser.METHOD, i);
		}
		public ITerminalNode INLINE() { return GetToken(XSharpParser.INLINE, 0); }
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public XppaccessorsContext xppaccessors() {
			return GetRuleContext<XppaccessorsContext>(0);
		}
		public XppmemberModifiersContext xppmemberModifiers() {
			return GetRuleContext<XppmemberModifiersContext>(0);
		}
		public XppinlineMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xppinlineMethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterXppinlineMethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitXppinlineMethod(this);
		}
	}

	[RuleVersion(0)]
	public XppinlineMethodContext xppinlineMethod() {
		XppinlineMethodContext _localctx = new XppinlineMethodContext(_ctx, State);
		EnterRule(_localctx, 362, RULE_xppinlineMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3649;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3648; _localctx.Attributes = attributes();
				}
			}

			State = 3651; _localctx.I = Match(INLINE);
			State = 3653;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ACCESS || _la==ASSIGN) {
				{
				State = 3652; _localctx.Accessors = xppaccessors();
				}
			}

			State = 3656;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==CLASS || _la==STATIC || ((((_la - 79)) & ~0x3f) == 0 && ((1L << (_la - 79)) & ((1L << (ABSTRACT - 79)) | (1L << (NEW - 79)) | (1L << (VIRTUAL - 79)) | (1L << (ASYNC - 79)) | (1L << (EXTERN - 79)) | (1L << (OVERRIDE - 79)))) != 0) || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (UNSAFE - 145)) | (1L << (DEFERRED - 145)) | (1L << (FINAL - 145)) | (1L << (INTRODUCE - 145)) | (1L << (SYNC - 145)))) != 0)) {
				{
				State = 3655; _localctx.Modifiers = xppmemberModifiers();
				}
			}

			State = 3658; Match(METHOD);
			State = 3659; _localctx.Sig = signature();
			State = 3660; _localctx.end = eos();
			State = 3661; _localctx.StmtBlk = statementBlock();
			State = 3665;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==END) {
				{
				State = 3662; Match(END);
				State = 3663; Match(METHOD);
				State = 3664; eos();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordfoxContext : XSharpParserRuleContext {
		public IToken Token;
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public ITerminalNode FOX_AND() { return GetToken(XSharpParser.FOX_AND, 0); }
		public ITerminalNode FOX_OR() { return GetToken(XSharpParser.FOX_OR, 0); }
		public ITerminalNode FOX_NOT() { return GetToken(XSharpParser.FOX_NOT, 0); }
		public ITerminalNode FOX_XOR() { return GetToken(XSharpParser.FOX_XOR, 0); }
		public ITerminalNode THEN() { return GetToken(XSharpParser.THEN, 0); }
		public ITerminalNode FOX_M() { return GetToken(XSharpParser.FOX_M, 0); }
		public ITerminalNode EACH() { return GetToken(XSharpParser.EACH, 0); }
		public KeywordfoxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywordfox; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterKeywordfox(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitKeywordfox(this);
		}
	}

	[RuleVersion(0)]
	public KeywordfoxContext keywordfox() {
		KeywordfoxContext _localctx = new KeywordfoxContext(_ctx, State);
		EnterRule(_localctx, 364, RULE_keywordfox);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3667;
			_localctx.Token = _input.Lt(1);
			_la = _input.La(1);
			if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (OLEPUBLIC - 205)) | (1L << (EXCLUDE - 205)) | (1L << (THISACCESS - 205)) | (1L << (HELPSTRING - 205)) | (1L << (NOINIT - 205)) | (1L << (THEN - 205)) | (1L << (FOX_M - 205)) | (1L << (EACH - 205)))) != 0) || ((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (FOX_AND - 282)) | (1L << (FOX_OR - 282)) | (1L << (FOX_NOT - 282)) | (1L << (FOX_XOR - 282)))) != 0)) ) {
				_localctx.Token = _errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public IToken D;
		public ClassModifiersContext Modifiers;
		public NameDotContext Namespace;
		public IdentifierContext Id;
		public TypeparametersContext TypeParameters;
		public DatatypeContext BaseType;
		public TypeparameterconstraintsclauseContext _typeparameterconstraintsclause;
		public IList<TypeparameterconstraintsclauseContext> _ConstraintsClauses = new List<TypeparameterconstraintsclauseContext>();
		public EosContext e;
		public FoxclassmemberContext _foxclassmember;
		public IList<FoxclassmemberContext> _Members = new List<FoxclassmemberContext>();
		public ITerminalNode CLASS() { return GetToken(XSharpParser.CLASS, 0); }
		public EosContext[] eos() {
			return GetRuleContexts<EosContext>();
		}
		public EosContext eos(int i) {
			return GetRuleContext<EosContext>(i);
		}
		public ITerminalNode[] DEFINE() { return GetTokens(XSharpParser.DEFINE); }
		public ITerminalNode DEFINE(int i) {
			return GetToken(XSharpParser.DEFINE, i);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDDEFINE() { return GetToken(XSharpParser.ENDDEFINE, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public FoxclasslibContext foxclasslib() {
			return GetRuleContext<FoxclasslibContext>(0);
		}
		public ITerminalNode OLEPUBLIC() { return GetToken(XSharpParser.OLEPUBLIC, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassModifiersContext classModifiers() {
			return GetRuleContext<ClassModifiersContext>(0);
		}
		public NameDotContext nameDot() {
			return GetRuleContext<NameDotContext>(0);
		}
		public TypeparametersContext typeparameters() {
			return GetRuleContext<TypeparametersContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public TypeparameterconstraintsclauseContext[] typeparameterconstraintsclause() {
			return GetRuleContexts<TypeparameterconstraintsclauseContext>();
		}
		public TypeparameterconstraintsclauseContext typeparameterconstraintsclause(int i) {
			return GetRuleContext<TypeparameterconstraintsclauseContext>(i);
		}
		public FoxclassmemberContext[] foxclassmember() {
			return GetRuleContexts<FoxclassmemberContext>();
		}
		public FoxclassmemberContext foxclassmember(int i) {
			return GetRuleContext<FoxclassmemberContext>(i);
		}
		public FoxclassContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclass; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclass(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclass(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassContext foxclass() {
		FoxclassContext _localctx = new FoxclassContext(_ctx, State);
		EnterRule(_localctx, 366, RULE_foxclass);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3670;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3669; _localctx.Attributes = attributes();
				}
			}

			State = 3672; _localctx.D = Match(DEFINE);
			State = 3674;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (PARTIAL - 97)) | (1L << (SEALED - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3673; _localctx.Modifiers = classModifiers();
				}
			}

			State = 3676; Match(CLASS);
			State = 3678;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,515,_ctx) ) {
			case 1:
				{
				State = 3677; _localctx.Namespace = nameDot(0);
				}
				break;
			}
			State = 3680; _localctx.Id = identifier();
			State = 3682;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LT) {
				{
				State = 3681; _localctx.TypeParameters = typeparameters();
				}
			}

			State = 3686;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3684; Match(AS);
				State = 3685; _localctx.BaseType = datatype();
				}
			}

			State = 3689;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OF) {
				{
				State = 3688; foxclasslib();
				}
			}

			State = 3694;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==WHERE) {
				{
				{
				State = 3691; _localctx._typeparameterconstraintsclause = typeparameterconstraintsclause();
				_localctx._ConstraintsClauses.Add(_localctx._typeparameterconstraintsclause);
				}
				}
				State = 3696;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3698;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==OLEPUBLIC) {
				{
				State = 3697; Match(OLEPUBLIC);
				}
			}

			State = 3700; _localctx.e = eos();
			State = 3704;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,521,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3701; _localctx._foxclassmember = foxclassmember();
					_localctx._Members.Add(_localctx._foxclassmember);
					}
					} 
				}
				State = 3706;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,521,_ctx);
			}
			State = 3710;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case ENDDEFINE:
				{
				State = 3707; Match(ENDDEFINE);
				}
				break;
			case END:
				{
				State = 3708; Match(END);
				State = 3709; Match(DEFINE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 3712; eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassmemberContext : XSharpParserRuleContext {
		public FoxclassmemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassmember; } }
	 
		public FoxclassmemberContext() { }
		public virtual void CopyFrom(FoxclassmemberContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FoximplementsContext : FoxclassmemberContext {
		public FoximplementsclauseContext Member;
		public FoximplementsclauseContext foximplementsclause() {
			return GetRuleContext<FoximplementsclauseContext>(0);
		}
		public FoximplementsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplements(this);
		}
	}
	public partial class FoxaddobjectContext : FoxclassmemberContext {
		public FoxaddobjectclauseContext Member;
		public FoxaddobjectclauseContext foxaddobjectclause() {
			return GetRuleContext<FoxaddobjectclauseContext>(0);
		}
		public FoxaddobjectContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobject(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobject(this);
		}
	}
	public partial class FoxclsvarinitContext : FoxclassmemberContext {
		public FoxfieldContext Member;
		public FoxfieldContext foxfield() {
			return GetRuleContext<FoxfieldContext>(0);
		}
		public FoxclsvarinitContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvarinit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvarinit(this);
		}
	}
	public partial class FoxclsmethodContext : FoxclassmemberContext {
		public FoxmethodContext Member;
		public FoxmethodContext foxmethod() {
			return GetRuleContext<FoxmethodContext>(0);
		}
		public FoxclsmethodContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsmethod(this);
		}
	}
	public partial class FoxclsdtorContext : FoxclassmemberContext {
		public DestructorContext Member;
		public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public FoxclsdtorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsdtor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsdtor(this);
		}
	}
	public partial class FoxclsvarsContext : FoxclassmemberContext {
		public FoxclassvarsContext Member;
		public FoxclassvarsContext foxclassvars() {
			return GetRuleContext<FoxclassvarsContext>(0);
		}
		public FoxclsvarsContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsvars(this);
		}
	}
	public partial class FoxpemcomContext : FoxclassmemberContext {
		public FoxpemcomattribContext Member;
		public FoxpemcomattribContext foxpemcomattrib() {
			return GetRuleContext<FoxpemcomattribContext>(0);
		}
		public FoxpemcomContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcom(this);
		}
	}
	public partial class FoxclsctorContext : FoxclassmemberContext {
		public ConstructorContext Member;
		public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		public FoxclsctorContext(FoxclassmemberContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclsctor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclsctor(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassmemberContext foxclassmember() {
		FoxclassmemberContext _localctx = new FoxclassmemberContext(_ctx, State);
		EnterRule(_localctx, 368, RULE_foxclassmember);
		try {
			State = 3722;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,523,_ctx) ) {
			case 1:
				_localctx = new FoxclsvarsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 3714; ((FoxclsvarsContext)_localctx).Member = foxclassvars();
				}
				break;

			case 2:
				_localctx = new FoxclsvarinitContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 3715; ((FoxclsvarinitContext)_localctx).Member = foxfield();
				}
				break;

			case 3:
				_localctx = new FoxclsmethodContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 3716; ((FoxclsmethodContext)_localctx).Member = foxmethod();
				}
				break;

			case 4:
				_localctx = new FoximplementsContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 3717; ((FoximplementsContext)_localctx).Member = foximplementsclause();
				}
				break;

			case 5:
				_localctx = new FoxaddobjectContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 3718; ((FoxaddobjectContext)_localctx).Member = foxaddobjectclause();
				}
				break;

			case 6:
				_localctx = new FoxpemcomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 3719; ((FoxpemcomContext)_localctx).Member = foxpemcomattrib();
				}
				break;

			case 7:
				_localctx = new FoxclsctorContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 3720; ((FoxclsctorContext)_localctx).Member = constructor();
				}
				break;

			case 8:
				_localctx = new FoxclsdtorContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 3721; ((FoxclsdtorContext)_localctx).Member = destructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxmethodContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public MemberModifiersContext Modifiers;
		public FuncproctypeContext T;
		public SignatureContext Sig;
		public IToken HelpString;
		public ExpressionContext HelpText;
		public IToken ThisAccess;
		public IdentifierContext MemberId;
		public EosContext end;
		public StatementBlockContext StmtBlk;
		public IToken T1;
		public FuncproctypeContext T2;
		public FuncproctypeContext[] funcproctype() {
			return GetRuleContexts<FuncproctypeContext>();
		}
		public FuncproctypeContext funcproctype(int i) {
			return GetRuleContext<FuncproctypeContext>(i);
		}
		public SignatureContext signature() {
			return GetRuleContext<SignatureContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public ITerminalNode EOS() { return GetToken(XSharpParser.EOS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public MemberModifiersContext memberModifiers() {
			return GetRuleContext<MemberModifiersContext>(0);
		}
		public ITerminalNode HELPSTRING() { return GetToken(XSharpParser.HELPSTRING, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THISACCESS() { return GetToken(XSharpParser.THISACCESS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ENDFUNC() { return GetToken(XSharpParser.ENDFUNC, 0); }
		public ITerminalNode ENDPROC() { return GetToken(XSharpParser.ENDPROC, 0); }
		public ITerminalNode END() { return GetToken(XSharpParser.END, 0); }
		public FoxmethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxmethod; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxmethod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxmethod(this);
		}
	}

	[RuleVersion(0)]
	public FoxmethodContext foxmethod() {
		FoxmethodContext _localctx = new FoxmethodContext(_ctx, State);
		EnterRule(_localctx, 370, RULE_foxmethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3725;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3724; _localctx.Attributes = attributes();
				}
			}

			State = 3728;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (((((_la - 28)) & ~0x3f) == 0 && ((1L << (_la - 28)) & ((1L << (EXPORT - 28)) | (1L << (HIDDEN - 28)) | (1L << (PRIVATE - 28)) | (1L << (PROTECTED - 28)) | (1L << (PUBLIC - 28)) | (1L << (STATIC - 28)) | (1L << (ABSTRACT - 28)))) != 0) || ((((_la - 97)) & ~0x3f) == 0 && ((1L << (_la - 97)) & ((1L << (INTERNAL - 97)) | (1L << (NEW - 97)) | (1L << (SEALED - 97)) | (1L << (VIRTUAL - 97)) | (1L << (ASYNC - 97)) | (1L << (EXTERN - 97)) | (1L << (OVERRIDE - 97)) | (1L << (UNSAFE - 97)))) != 0)) {
				{
				State = 3727; _localctx.Modifiers = memberModifiers();
				}
			}

			State = 3730; _localctx.T = funcproctype();
			State = 3731; _localctx.Sig = signature();
			State = 3734;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==HELPSTRING) {
				{
				State = 3732; _localctx.HelpString = Match(HELPSTRING);
				State = 3733; _localctx.HelpText = expression(0);
				}
			}

			State = 3741;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==THISACCESS) {
				{
				State = 3736; _localctx.ThisAccess = Match(THISACCESS);
				State = 3737; Match(LPAREN);
				State = 3738; _localctx.MemberId = identifier();
				State = 3739; Match(RPAREN);
				}
			}

			State = 3743; _localctx.end = eos();
			State = 3744; _localctx.StmtBlk = statementBlock();
			State = 3751;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				State = 3748;
				_errHandler.Sync(this);
				switch (_input.La(1)) {
				case ENDFUNC:
				case ENDPROC:
					{
					State = 3745;
					_localctx.T1 = _input.Lt(1);
					_la = _input.La(1);
					if ( !(_la==ENDFUNC || _la==ENDPROC) ) {
						_localctx.T1 = _errHandler.RecoverInline(this);
					} else {
						if (_input.La(1) == TokenConstants.Eof) {
							matchedEOF = true;
						}

						_errHandler.ReportMatch(this);
						Consume();
					}
					}
					break;
				case END:
					{
					{
					State = 3746; Match(END);
					State = 3747; _localctx.T2 = funcproctype();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 3750; Match(EOS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxclassvarsContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public IdentifierContext _identifier;
		public IList<IdentifierContext> _Vars = new List<IdentifierContext>();
		public DatatypeContext DataType;
		public EosContext end;
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public FoxclassvarsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxclassvars; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxclassvars(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxclassvars(this);
		}
	}

	[RuleVersion(0)]
	public FoxclassvarsContext foxclassvars() {
		FoxclassvarsContext _localctx = new FoxclassvarsContext(_ctx, State);
		EnterRule(_localctx, 372, RULE_foxclassvars);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3754;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				State = 3753; _localctx.Attributes = attributes();
				}
				break;
			}
			State = 3757;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				State = 3756; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3760;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				State = 3759; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3762; _localctx._identifier = identifier();
			_localctx._Vars.Add(_localctx._identifier);
			State = 3767;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3763; Match(COMMA);
				State = 3764; _localctx._identifier = identifier();
				_localctx._Vars.Add(_localctx._identifier);
				}
				}
				State = 3769;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 3772;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==AS) {
				{
				State = 3770; Match(AS);
				State = 3771; _localctx.DataType = datatype();
				}
			}

			State = 3774; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldContext : XSharpParserRuleContext {
		public ClassvarModifiersContext Modifiers;
		public IToken Fld;
		public FoxfieldinitializerContext F;
		public EosContext end;
		public FoxfieldinitializerContext foxfieldinitializer() {
			return GetRuleContext<FoxfieldinitializerContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode FIELD() { return GetToken(XSharpParser.FIELD, 0); }
		public FoxfieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfield; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfield(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfield(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldContext foxfield() {
		FoxfieldContext _localctx = new FoxfieldContext(_ctx, State);
		EnterRule(_localctx, 374, RULE_foxfield);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3777;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,535,_ctx) ) {
			case 1:
				{
				State = 3776; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3780;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,536,_ctx) ) {
			case 1:
				{
				State = 3779; _localctx.Fld = Match(FIELD);
				}
				break;
			}
			State = 3782; _localctx.F = foxfieldinitializer();
			State = 3783; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxfieldinitializerContext : XSharpParserRuleContext {
		public NameContext Name;
		public ExpressionContext Expr;
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public NameContext name() {
			return GetRuleContext<NameContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoxfieldinitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxfieldinitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxfieldinitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxfieldinitializer(this);
		}
	}

	[RuleVersion(0)]
	public FoxfieldinitializerContext foxfieldinitializer() {
		FoxfieldinitializerContext _localctx = new FoxfieldinitializerContext(_ctx, State);
		EnterRule(_localctx, 376, RULE_foxfieldinitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3785; _localctx.Name = name(0);
			State = 3786; assignoperator();
			State = 3787; _localctx.Expr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoximplementsclauseContext : XSharpParserRuleContext {
		public DatatypeContext Type;
		public IToken Excl;
		public ExpressionContext Library;
		public EosContext end;
		public ITerminalNode IMPLEMENTS() { return GetToken(XSharpParser.IMPLEMENTS, 0); }
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode IN() { return GetToken(XSharpParser.IN, 0); }
		public ITerminalNode EXCLUDE() { return GetToken(XSharpParser.EXCLUDE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FoximplementsclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foximplementsclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoximplementsclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoximplementsclause(this);
		}
	}

	[RuleVersion(0)]
	public FoximplementsclauseContext foximplementsclause() {
		FoximplementsclauseContext _localctx = new FoximplementsclauseContext(_ctx, State);
		EnterRule(_localctx, 378, RULE_foximplementsclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3789; Match(IMPLEMENTS);
			State = 3790; _localctx.Type = datatype();
			State = 3792;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==EXCLUDE) {
				{
				State = 3791; _localctx.Excl = Match(EXCLUDE);
				}
			}

			State = 3796;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==IN) {
				{
				State = 3794; Match(IN);
				State = 3795; _localctx.Library = expression(0);
				}
			}

			State = 3798; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxaddobjectclauseContext : XSharpParserRuleContext {
		public AttributesContext Attributes;
		public ClassvarModifiersContext Modifiers;
		public IdentifierContext Id;
		public DatatypeContext Type;
		public IToken NoInit;
		public FoxfieldinitializerContext _foxfieldinitializer;
		public IList<FoxfieldinitializerContext> _FieldsInits = new List<FoxfieldinitializerContext>();
		public EosContext end;
		public ITerminalNode ADD() { return GetToken(XSharpParser.ADD, 0); }
		public ITerminalNode OBJECT() { return GetToken(XSharpParser.OBJECT, 0); }
		public ITerminalNode AS() { return GetToken(XSharpParser.AS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DatatypeContext datatype() {
			return GetRuleContext<DatatypeContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode WITH() { return GetToken(XSharpParser.WITH, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ClassvarModifiersContext classvarModifiers() {
			return GetRuleContext<ClassvarModifiersContext>(0);
		}
		public ITerminalNode NOINIT() { return GetToken(XSharpParser.NOINIT, 0); }
		public FoxfieldinitializerContext[] foxfieldinitializer() {
			return GetRuleContexts<FoxfieldinitializerContext>();
		}
		public FoxfieldinitializerContext foxfieldinitializer(int i) {
			return GetRuleContext<FoxfieldinitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(XSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(XSharpParser.COMMA, i);
		}
		public FoxaddobjectclauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxaddobjectclause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxaddobjectclause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxaddobjectclause(this);
		}
	}

	[RuleVersion(0)]
	public FoxaddobjectclauseContext foxaddobjectclause() {
		FoxaddobjectclauseContext _localctx = new FoxaddobjectclauseContext(_ctx, State);
		EnterRule(_localctx, 380, RULE_foxaddobjectclause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3801;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LBRKT || _la==BRACKETED_STRING_CONST) {
				{
				State = 3800; _localctx.Attributes = attributes();
				}
			}

			State = 3803; Match(ADD);
			State = 3804; Match(OBJECT);
			State = 3806;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,540,_ctx) ) {
			case 1:
				{
				State = 3805; _localctx.Modifiers = classvarModifiers();
				}
				break;
			}
			State = 3808; _localctx.Id = identifier();
			State = 3809; Match(AS);
			State = 3810; _localctx.Type = datatype();
			State = 3812;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==NOINIT) {
				{
				State = 3811; _localctx.NoInit = Match(NOINIT);
				}
			}

			State = 3823;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==WITH) {
				{
				State = 3814; Match(WITH);
				State = 3815; _localctx._foxfieldinitializer = foxfieldinitializer();
				_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
				State = 3820;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 3816; Match(COMMA);
					State = 3817; _localctx._foxfieldinitializer = foxfieldinitializer();
					_localctx._FieldsInits.Add(_localctx._foxfieldinitializer);
					}
					}
					State = 3822;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 3825; _localctx.end = eos();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FoxpemcomattribContext : XSharpParserRuleContext {
		public IdentifierContext Id;
		public EosContext end;
		public ITerminalNode DIMENSION() { return GetToken(XSharpParser.DIMENSION, 0); }
		public ITerminalNode LBRKT() { return GetToken(XSharpParser.LBRKT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode RBRKT() { return GetToken(XSharpParser.RBRKT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EosContext eos() {
			return GetRuleContext<EosContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(XSharpParser.COMMA, 0); }
		public ITerminalNode LPAREN() { return GetToken(XSharpParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(XSharpParser.RPAREN, 0); }
		public AssignoperatorContext assignoperator() {
			return GetRuleContext<AssignoperatorContext>(0);
		}
		public FoxpemcomattribContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foxpemcomattrib; } }
		public override void EnterRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.EnterFoxpemcomattrib(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IXSharpListener typedListener = listener as IXSharpListener;
			if (typedListener != null) typedListener.ExitFoxpemcomattrib(this);
		}
	}

	[RuleVersion(0)]
	public FoxpemcomattribContext foxpemcomattrib() {
		FoxpemcomattribContext _localctx = new FoxpemcomattribContext(_ctx, State);
		EnterRule(_localctx, 382, RULE_foxpemcomattrib);
		int _la;
		try {
			State = 3857;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,546,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3827; Match(DIMENSION);
				State = 3828; _localctx.Id = identifier();
				State = 3829; Match(LBRKT);
				State = 3830; expression(0);
				State = 3833;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3831; Match(COMMA);
					State = 3832; expression(0);
					}
				}

				State = 3835; Match(RBRKT);
				State = 3836; _localctx.end = eos();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3838; Match(DIMENSION);
				State = 3839; _localctx.Id = identifier();
				State = 3840; Match(LPAREN);
				State = 3841; expression(0);
				State = 3844;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==COMMA) {
					{
					State = 3842; Match(COMMA);
					State = 3843; expression(0);
					}
				}

				State = 3846; Match(RPAREN);
				State = 3847; _localctx.end = eos();
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3849; _localctx.Id = identifier();
				State = 3850; Match(LBRKT);
				State = 3851; expression(0);
				State = 3852; Match(RBRKT);
				State = 3853; assignoperator();
				State = 3854; expression(0);
				State = 3855; _localctx.end = eos();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return entity_sempred((EntityContext)_localctx, predIndex);

		case 44: return eventLineAccessor_sempred((EventLineAccessorContext)_localctx, predIndex);

		case 53: return propertyLineAccessor_sempred((PropertyLineAccessorContext)_localctx, predIndex);

		case 57: return classmember_sempred((ClassmemberContext)_localctx, predIndex);

		case 76: return filewidevar_sempred((FilewidevarContext)_localctx, predIndex);

		case 77: return statement_sempred((StatementContext)_localctx, predIndex);

		case 85: return localdecl_sempred((LocaldeclContext)_localctx, predIndex);

		case 86: return localvar_sempred((LocalvarContext)_localctx, predIndex);

		case 102: return expression_sempred((ExpressionContext)_localctx, predIndex);

		case 103: return primary_sempred((PrimaryContext)_localctx, predIndex);

		case 104: return boundExpression_sempred((BoundExpressionContext)_localctx, predIndex);

		case 105: return aliasExpression_sempred((AliasExpressionContext)_localctx, predIndex);

		case 116: return namedArgument_sempred((NamedArgumentContext)_localctx, predIndex);

		case 118: return nameDot_sempred((NameDotContext)_localctx, predIndex);

		case 119: return name_sempred((NameContext)_localctx, predIndex);

		case 157: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool entity_sempred(EntityContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return IsFox;

		case 1: return IsXPP;

		case 2: return IsVO;

		case 3: return IsVO;

		case 4: return !IsXPP;

		case 5: return IsXPP;

		case 6: return IsFox;
		}
		return true;
	}
	private bool eventLineAccessor_sempred(EventLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 7: return InputStream.La(2) != REMOVE;

		case 8: return InputStream.La(2) != ADD;
		}
		return true;
	}
	private bool propertyLineAccessor_sempred(PropertyLineAccessorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return InputStream.La(2) != SET && InputStream.La(2) != INIT;

		case 10: return InputStream.La(2) != GET && InputStream.La(2) != UDCSEP;
		}
		return true;
	}
	private bool classmember_sempred(ClassmemberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return IsVO;
		}
		return true;
	}
	private bool filewidevar_sempred(FilewidevarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return !IsFox ;

		case 13: return IsFox  ;
		}
		return true;
	}
	private bool statement_sempred(StatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return !IsFox && HasMemVars;

		case 15: return IsFox && HasMemVars;

		case 16: return IsFox ;

		case 17: return validExpressionStmt();
		}
		return true;
	}
	private bool localdecl_sempred(LocaldeclContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return !XSharpLexer.IsKeyword(InputStream.La(2));
		}
		return true;
	}
	private bool localvar_sempred(LocalvarContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return IsFox;
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return IsTypeCastAllowed() ;

		case 21: return InputStream.La(2) != LPAREN ;

		case 22: return Precpred(_ctx, 18);

		case 23: return Precpred(_ctx, 17);

		case 24: return Precpred(_ctx, 16);

		case 25: return Precpred(_ctx, 15);

		case 26: return Precpred(_ctx, 14);

		case 27: return Precpred(_ctx, 13);

		case 28: return Precpred(_ctx, 12);

		case 29: return Precpred(_ctx, 11);

		case 30: return Precpred(_ctx, 10);

		case 31: return Precpred(_ctx, 8);

		case 32: return Precpred(_ctx, 7);

		case 33: return Precpred(_ctx, 6);

		case 34: return Precpred(_ctx, 5);

		case 35: return Precpred(_ctx, 2);

		case 36: return Precpred(_ctx, 35);

		case 37: return Precpred(_ctx, 33);

		case 38: return Precpred(_ctx, 32);

		case 39: return Precpred(_ctx, 30);

		case 40: return Precpred(_ctx, 28);

		case 41: return Precpred(_ctx, 27);

		case 42: return Precpred(_ctx, 25);

		case 43: return Precpred(_ctx, 21);

		case 44: return Precpred(_ctx, 20);

		case 45: return Precpred(_ctx, 19);

		case 46: return Precpred(_ctx, 3);
		}
		return true;
	}
	private bool primary_sempred(PrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return ExpectToken(LCURLY);

		case 48: return ExpectToken(LCURLY);

		case 49: return ExpectToken(LPAREN);

		case 50: return ExpectToken(LPAREN);

		case 51: return ExpectToken(LPAREN);

		case 52: return ExpectToken(LPAREN);

		case 53: return ExpectToken(ALIAS);
		}
		return true;
	}
	private bool boundExpression_sempred(BoundExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(_ctx, 3);

		case 55: return Precpred(_ctx, 6);

		case 56: return Precpred(_ctx, 5);

		case 57: return Precpred(_ctx, 4);
		}
		return true;
	}
	private bool aliasExpression_sempred(AliasExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return HasMemVars;

		case 59: return InputStream.La(4) != LPAREN;

		case 60: return InputStream.La(6) != LPAREN;
		}
		return true;
	}
	private bool namedArgument_sempred(NamedArgumentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return AllowNamedArgs;
		}
		return true;
	}
	private bool nameDot_sempred(NameDotContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool name_sempred(NameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return !IsCoreVO;

		case 65: return !IsCoreVO;
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x169\xF16\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2"+
		"\x3\x2\a\x2\x189\n\x2\f\x2\xE\x2\x18C\v\x2\x3\x2\a\x2\x18F\n\x2\f\x2\xE"+
		"\x2\x192\v\x2\x3\x2\x3\x2\x3\x3\x3\x3\x3\x3\x5\x3\x199\n\x3\x3\x4\x3\x4"+
		"\x5\x4\x19D\n\x4\x3\x4\x3\x4\x3\x4\x3\x5\a\x5\x1A3\n\x5\f\x5\xE\x5\x1A6"+
		"\v\x5\x3\x5\x3\x5\x3\x6\a\x6\x1AB\n\x6\f\x6\xE\x6\x1AE\v\x6\x3\x6\x3\x6"+
		"\a\x6\x1B2\n\x6\f\x6\xE\x6\x1B5\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\x1D8"+
		"\n\a\x3\b\x6\b\x1DB\n\b\r\b\xE\b\x1DC\x3\t\x5\t\x1E0\n\t\x3\t\x5\t\x1E3"+
		"\n\t\x3\t\x5\t\x1E6\n\t\x3\t\x3\t\x3\t\x5\t\x1EB\n\t\x3\t\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x5\t\x1F3\n\t\x3\t\x5\t\x1F6\n\t\x3\n\x3\n\x3\v\x3\v\x5\v"+
		"\x1FC\n\v\x3\v\x5\v\x1FF\n\v\x3\v\x3\v\x5\v\x203\n\v\x3\v\a\v\x206\n\v"+
		"\f\v\xE\v\x209\v\v\x3\v\x5\v\x20C\n\v\x3\v\x3\v\x5\v\x210\n\v\x3\f\x3"+
		"\f\x5\f\x214\n\f\x3\f\x3\f\x5\f\x218\n\f\x3\r\x3\r\x3\xE\x5\xE\x21D\n"+
		"\xE\x3\xE\x5\xE\x220\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x226\n\xE\x3\xE"+
		"\x3\xE\x5\xE\x22A\n\xE\x3\xE\x5\xE\x22D\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5"+
		"\xE\x233\n\xE\x3\xE\x3\xE\x3\xE\x3\xE\x5\xE\x239\n\xE\x3\xE\x5\xE\x23C"+
		"\n\xE\x3\xE\x3\xE\x5\xE\x240\n\xE\x5\xE\x242\n\xE\x3\xE\x5\xE\x245\n\xE"+
		"\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x5\x10\x24C\n\x10\x3\x10\x5\x10\x24F\n"+
		"\x10\x3\x10\x3\x10\x5\x10\x253\n\x10\x3\x10\x3\x10\x3\x10\x3\x10\x3\x10"+
		"\x5\x10\x25A\n\x10\x3\x10\x3\x10\x5\x10\x25E\n\x10\x3\x10\x3\x10\x3\x10"+
		"\a\x10\x263\n\x10\f\x10\xE\x10\x266\v\x10\x5\x10\x268\n\x10\x3\x10\x3"+
		"\x10\x3\x11\x5\x11\x26D\n\x11\x3\x11\x3\x11\x5\x11\x271\n\x11\x3\x11\x5"+
		"\x11\x274\n\x11\x3\x12\x3\x12\x3\x12\x5\x12\x279\n\x12\x3\x12\x3\x12\x3"+
		"\x13\x3\x13\x3\x13\x3\x13\a\x13\x281\n\x13\f\x13\xE\x13\x284\v\x13\x5"+
		"\x13\x286\n\x13\x3\x13\x3\x13\x3\x14\x5\x14\x28B\n\x14\x3\x14\x5\x14\x28E"+
		"\n\x14\x3\x14\x3\x14\x3\x14\x3\x14\x5\x14\x294\n\x14\x3\x14\x3\x14\x3"+
		"\x14\x5\x14\x299\n\x14\x3\x14\x5\x14\x29C\n\x14\x3\x15\x3\x15\x5\x15\x2A0"+
		"\n\x15\x3\x16\a\x16\x2A3\n\x16\f\x16\xE\x16\x2A6\v\x16\x3\x17\x6\x17\x2A9"+
		"\n\x17\r\x17\xE\x17\x2AA\x3\x18\x3\x18\x5\x18\x2AF\n\x18\x3\x18\x3\x18"+
		"\x3\x18\x5\x18\x2B4\n\x18\x3\x18\x3\x18\x3\x18\x3\x19\x5\x19\x2BA\n\x19"+
		"\x3\x19\x5\x19\x2BD\n\x19\x3\x19\x3\x19\x5\x19\x2C1\n\x19\x3\x19\x3\x19"+
		"\x3\x19\a\x19\x2C6\n\x19\f\x19\xE\x19\x2C9\v\x19\x3\x19\x3\x19\x3\x19"+
		"\x5\x19\x2CE\n\x19\x3\x19\x3\x19\x5\x19\x2D2\n\x19\x3\x19\x3\x19\x3\x19"+
		"\a\x19\x2D7\n\x19\f\x19\xE\x19\x2DA\v\x19\x3\x19\x3\x19\x5\x19\x2DE\n"+
		"\x19\x3\x1A\x5\x1A\x2E1\n\x1A\x3\x1A\x5\x1A\x2E4\n\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x2E8\n\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2ED\n\x1A\x3\x1A\x3\x1A\x3"+
		"\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5\x1A\x2F6\n\x1A\x3\x1B\x3\x1B\x3\x1C"+
		"\x5\x1C\x2FB\n\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\x303"+
		"\n\x1C\x3\x1C\x3\x1C\x3\x1D\x5\x1D\x308\n\x1D\x3\x1D\x3\x1D\x5\x1D\x30C"+
		"\n\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x311\n\x1D\x3\x1D\x3\x1D\x6\x1D\x315"+
		"\n\x1D\r\x1D\xE\x1D\x316\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x31C\n\x1D\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x326\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x32E\n\x1E\x3\x1E\x3\x1E"+
		"\x5\x1E\x332\n\x1E\x3\x1F\x5\x1F\x335\n\x1F\x3\x1F\x3\x1F\x5\x1F\x339"+
		"\n\x1F\x3\x1F\x3\x1F\x3\x1F\x6\x1F\x33E\n\x1F\r\x1F\xE\x1F\x33F\x3\x1F"+
		"\x3\x1F\x3\x1F\x5\x1F\x345\n\x1F\x3 \x6 \x348\n \r \xE \x349\x3!\x3!\x3"+
		"!\x3!\x3!\a!\x351\n!\f!\xE!\x354\v!\x3!\x3!\x3!\x5!\x359\n!\x3\"\x5\""+
		"\x35C\n\"\x3\"\x5\"\x35F\n\"\x3\"\x3\"\x5\"\x363\n\"\x3\"\x3\"\x5\"\x367"+
		"\n\"\x3\"\x3\"\x5\"\x36B\n\"\x3\"\x3\"\a\"\x36F\n\"\f\"\xE\"\x372\v\""+
		"\x3\"\a\"\x375\n\"\f\"\xE\"\x378\v\"\x3\"\x3\"\a\"\x37C\n\"\f\"\xE\"\x37F"+
		"\v\"\x3\"\x3\"\x3\"\x3\"\x3#\x5#\x386\n#\x3#\x5#\x389\n#\x3#\x3#\x5#\x38D"+
		"\n#\x3#\x3#\x5#\x391\n#\x3#\x3#\x5#\x395\n#\x3#\x3#\x3#\x3#\a#\x39B\n"+
		"#\f#\xE#\x39E\v#\x5#\x3A0\n#\x3#\a#\x3A3\n#\f#\xE#\x3A6\v#\x3#\x3#\a#"+
		"\x3AA\n#\f#\xE#\x3AD\v#\x3#\x3#\x3#\x3#\x3$\x6$\x3B4\n$\r$\xE$\x3B5\x3"+
		"%\x3%\x3%\x3%\x5%\x3BC\n%\x3%\a%\x3BF\n%\f%\xE%\x3C2\v%\x3%\x3%\x3&\x5"+
		"&\x3C7\n&\x3&\x5&\x3CA\n&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\a\'\x3D4"+
		"\n\'\f\'\xE\'\x3D7\v\'\x3(\x3(\x3(\x3(\x3(\x5(\x3DE\n(\x3)\x5)\x3E1\n"+
		")\x3)\x5)\x3E4\n)\x3)\x3)\x5)\x3E8\n)\x3)\x3)\x5)\x3EC\n)\x3)\x3)\x3)"+
		"\x3)\a)\x3F2\n)\f)\xE)\x3F5\v)\x5)\x3F7\n)\x3)\a)\x3FA\n)\f)\xE)\x3FD"+
		"\v)\x3)\x3)\a)\x401\n)\f)\xE)\x404\v)\x3)\x3)\x3)\x3)\x3*\x5*\x40B\n*"+
		"\x3*\x5*\x40E\n*\x3*\x3*\x5*\x412\n*\x3*\x3*\x5*\x416\n*\x3*\x5*\x419"+
		"\n*\x3*\x3*\x5*\x41D\n*\x3*\a*\x420\n*\f*\xE*\x423\v*\x3*\x5*\x426\n*"+
		"\x3*\x3*\x3+\x5+\x42B\n+\x3+\x5+\x42E\n+\x3+\x3+\x5+\x432\n+\x3+\x3+\x3"+
		"+\x5+\x437\n+\x3+\x3+\x6+\x43B\n+\r+\xE+\x43C\x3+\x3+\x5+\x441\n+\x3+"+
		"\x3+\x3,\x5,\x446\n,\x3,\x5,\x449\n,\x3,\x3,\x3,\x3,\x5,\x44F\n,\x3,\x3"+
		",\x3-\x5-\x454\n-\x3-\x5-\x457\n-\x3-\x3-\x5-\x45B\n-\x3-\x3-\x3-\x5-"+
		"\x460\n-\x3-\x3-\x6-\x464\n-\r-\xE-\x465\x3-\x3-\x3-\x3-\x6-\x46C\n-\r"+
		"-\xE-\x46D\x3-\x3-\x5-\x472\n-\x3-\x3-\x5-\x476\n-\x3.\x5.\x479\n.\x3"+
		".\x5.\x47C\n.\x3.\x3.\x3.\x5.\x481\n.\x3.\x3.\x3.\x5.\x486\n.\x3.\x5."+
		"\x489\n.\x3/\x5/\x48C\n/\x3/\x5/\x48F\n/\x3/\x3/\x3/\x3/\x3/\x5/\x496"+
		"\n/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x3/\x5/\x4A0\n/\x3/\x3/\x3/\x5/\x4A5\n"+
		"/\x3/\x3/\x3\x30\x5\x30\x4AA\n\x30\x3\x30\x3\x30\x3\x30\x3\x30\a\x30\x4B0"+
		"\n\x30\f\x30\xE\x30\x4B3\v\x30\x3\x30\x3\x30\x3\x31\x6\x31\x4B8\n\x31"+
		"\r\x31\xE\x31\x4B9\x3\x32\x5\x32\x4BD\n\x32\x3\x32\x3\x32\x3\x32\x3\x32"+
		"\x3\x32\x5\x32\x4C4\n\x32\x3\x32\x3\x32\x3\x32\x5\x32\x4C9\n\x32\x3\x32"+
		"\x3\x32\x5\x32\x4CD\n\x32\x3\x33\x3\x33\x3\x33\x3\x33\x6\x33\x4D3\n\x33"+
		"\r\x33\xE\x33\x4D4\x3\x33\x3\x33\x3\x33\x6\x33\x4DA\n\x33\r\x33\xE\x33"+
		"\x4DB\x3\x33\x5\x33\x4DF\n\x33\x3\x34\x5\x34\x4E2\n\x34\x3\x34\x5\x34"+
		"\x4E5\n\x34\x3\x34\x3\x34\x5\x34\x4E9\n\x34\x3\x34\x3\x34\x5\x34\x4ED"+
		"\n\x34\x3\x34\x5\x34\x4F0\n\x34\x3\x34\x3\x34\x5\x34\x4F4\n\x34\x3\x34"+
		"\x3\x34\a\x34\x4F8\n\x34\f\x34\xE\x34\x4FB\v\x34\x3\x34\x3\x34\x3\x34"+
		"\x5\x34\x500\n\x34\x3\x34\x3\x34\x6\x34\x504\n\x34\r\x34\xE\x34\x505\x3"+
		"\x34\x3\x34\x3\x34\x3\x34\x6\x34\x50C\n\x34\r\x34\xE\x34\x50D\x3\x34\x3"+
		"\x34\x5\x34\x512\n\x34\x3\x34\x3\x34\x5\x34\x516\n\x34\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\a\x35\x51C\n\x35\f\x35\xE\x35\x51F\v\x35\x5\x35\x521\n\x35"+
		"\x3\x35\x3\x35\x3\x35\x3\x35\x3\x35\a\x35\x528\n\x35\f\x35\xE\x35\x52B"+
		"\v\x35\x5\x35\x52D\n\x35\x3\x35\x5\x35\x530\n\x35\x3\x36\x5\x36\x533\n"+
		"\x36\x3\x36\x5\x36\x536\n\x36\x3\x36\x3\x36\x3\x37\x5\x37\x53B\n\x37\x3"+
		"\x37\x5\x37\x53E\n\x37\x3\x37\x3\x37\x3\x37\x5\x37\x543\n\x37\x3\x37\x3"+
		"\x37\x3\x37\x5\x37\x548\n\x37\x3\x37\x5\x37\x54B\n\x37\x3\x38\x6\x38\x54E"+
		"\n\x38\r\x38\xE\x38\x54F\x3\x39\x3\x39\x3\x39\a\x39\x555\n\x39\f\x39\xE"+
		"\x39\x558\v\x39\x3:\x5:\x55B\n:\x3:\x5:\x55E\n:\x3:\x3:\x3:\x3:\x3:\x5"+
		":\x565\n:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x3:\x5:\x56F\n:\x3:\x3:\x3:\x5:"+
		"\x574\n:\x3:\x3:\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3;\x3"+
		";\x3;\x3;\x5;\x588\n;\x3<\x5<\x58B\n<\x3<\x5<\x58E\n<\x3<\x3<\x5<\x592"+
		"\n<\x3<\x3<\x5<\x596\n<\x3<\x5<\x599\n<\x3<\x3<\x5<\x59D\n<\x3<\x3<\x5"+
		"<\x5A1\n<\x3<\x3<\x5<\x5A5\n<\x3<\x3<\x3<\x3<\x5<\x5AB\n<\x3=\x3=\x3="+
		"\x3=\x3=\x3=\x3>\x6>\x5B4\n>\r>\xE>\x5B5\x3?\x3?\x3?\x6?\x5BB\n?\r?\xE"+
		"?\x5BC\x3?\x3?\x3@\x5@\x5C2\n@\x3@\x5@\x5C5\n@\x3@\x3@\x3@\x5@\x5CA\n"+
		"@\x3@\x3@\x5@\x5CE\n@\x3@\x3@\x5@\x5D2\n@\x3@\x3@\x3@\x3@\x3@\x5@\x5D9"+
		"\n@\x3\x41\x6\x41\x5DC\n\x41\r\x41\xE\x41\x5DD\x3\x42\x3\x42\x3\x43\x3"+
		"\x43\x3\x44\x5\x44\x5E5\n\x44\x3\x44\x5\x44\x5E8\n\x44\x3\x44\x3\x44\x3"+
		"\x44\x5\x44\x5ED\n\x44\x3\x44\x5\x44\x5F0\n\x44\x3\x44\x3\x44\x3\x44\x5"+
		"\x44\x5F5\n\x44\x3\x44\x3\x44\x5\x44\x5F9\n\x44\x3\x44\x3\x44\x3\x44\x3"+
		"\x44\x3\x44\x5\x44\x600\n\x44\x3\x45\x6\x45\x603\n\x45\r\x45\xE\x45\x604"+
		"\x3\x46\x6\x46\x608\n\x46\r\x46\xE\x46\x609\x3G\x6G\x60D\nG\rG\xEG\x60E"+
		"\x3H\x3H\x5H\x613\nH\x3H\x3H\x3H\aH\x618\nH\fH\xEH\x61B\vH\x3H\x3H\x3"+
		"H\x5H\x620\nH\x3I\x3I\x3I\x3J\x3J\x3J\x3J\x3J\aJ\x62A\nJ\fJ\xEJ\x62D\v"+
		"J\x5J\x62F\nJ\x3J\x5J\x632\nJ\x3K\x3K\x3K\x3K\x3K\x5K\x639\nK\x3L\x3L"+
		"\x3L\x3L\x3L\aL\x640\nL\fL\xEL\x643\vL\x3L\x3L\x3L\x3M\x3M\x3M\x3N\x3"+
		"N\x3N\x3N\aN\x64F\nN\fN\xEN\x652\vN\x3N\x3N\x3N\x3N\x3N\x3N\aN\x65A\n"+
		"N\fN\xEN\x65D\vN\x3N\x3N\x5N\x661\nN\x3N\x3N\x3N\x3N\x3N\x3N\x3N\aN\x66A"+
		"\nN\fN\xEN\x66D\vN\x3N\x3N\x3N\x3N\x3N\x3N\x3N\aN\x676\nN\fN\xEN\x679"+
		"\vN\x3N\x3N\x5N\x67D\nN\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5"+
		"O\x68A\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x692\nO\x3O\x5O\x695\nO\x3O\x3O"+
		"\x3O\x3O\x3O\x5O\x69C\nO\x3O\x3O\x3O\x3O\x5O\x6A2\nO\x3O\x3O\x5O\x6A6"+
		"\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x6B2\nO\x5O\x6B4\nO\x3"+
		"O\x3O\x3O\x3O\x5O\x6BA\nO\x3O\x3O\x3O\x3O\x5O\x6C0\nO\x3O\x3O\x3O\x3O"+
		"\x3O\x3O\aO\x6C8\nO\fO\xEO\x6CB\vO\x3O\x3O\x3O\x3O\x5O\x6D1\nO\x3O\x3"+
		"O\x5O\x6D5\nO\x3O\x5O\x6D8\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\aO\x6E1\nO\f"+
		"O\xEO\x6E4\vO\x3O\x3O\x3O\x3O\x5O\x6EA\nO\x3O\x3O\x5O\x6EE\nO\x3O\x5O"+
		"\x6F1\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x6FB\nO\x3O\x3O\x3O\x3O\x5"+
		"O\x701\nO\x3O\x3O\x3O\x3O\x3O\aO\x708\nO\fO\xEO\x70B\vO\x5O\x70D\nO\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x716\nO\x3O\x3O\x3O\x3O\x5O\x71C\nO\x3O"+
		"\x3O\x5O\x720\nO\x3O\x5O\x723\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3"+
		"O\x3O\x3O\x5O\x731\nO\x3O\x5O\x734\nO\x3O\x3O\x3O\x3O\x3O\x5O\x73B\nO"+
		"\x3O\x3O\x5O\x73F\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x747\nO\x3O\x3O\x3O\x3"+
		"O\x5O\x74D\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x755\nO\aO\x757\nO\fO\xEO\x75A"+
		"\vO\x3O\x3O\x3O\x3O\x5O\x760\nO\x3O\x3O\x5O\x764\nO\x3O\x5O\x767\nO\x3"+
		"O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x772\nO\x3O\x3O\x3O\x3O\x3O\x3O"+
		"\x5O\x77A\nO\x3O\x3O\x3O\x3O\x3O\x5O\x781\nO\x3O\x3O\x3O\x3O\x6O\x787"+
		"\nO\rO\xEO\x788\x3O\x3O\x5O\x78D\nO\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x795\n"+
		"O\x3O\x3O\x3O\x3O\x5O\x79B\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O"+
		"\x7A6\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7AF\nO\x5O\x7B1\nO\x3O\x3O\x3"+
		"O\x3O\x5O\x7B7\nO\x3O\x5O\x7BA\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O"+
		"\x7C4\nO\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x3O\x5O\x7D1\nO\x3O\x3"+
		"O\x3O\x5O\x7D6\nO\x3O\x3O\x3O\x3O\x3O\x3O\aO\x7DE\nO\fO\xEO\x7E1\vO\x3"+
		"O\x3O\x5O\x7E5\nO\x3P\x3P\x3Q\x3Q\x5Q\x7EB\nQ\x3Q\x3Q\x3Q\x3R\x3R\x3R"+
		"\x3R\x5R\x7F4\nR\x3R\x3R\x3R\x3R\x3R\x3R\x5R\x7FC\nR\x3R\x5R\x7FF\nR\x3"+
		"R\x3R\x3R\x3S\x5S\x805\nS\x3S\x5S\x808\nS\x3S\x3S\x5S\x80C\nS\x3S\x3S"+
		"\x5S\x810\nS\x3S\x3S\x3S\x3T\x3T\x5T\x817\nT\x3T\x3T\x3T\x3U\x5U\x81D"+
		"\nU\x3U\x3U\x5U\x821\nU\x3U\x3U\x3U\aU\x826\nU\fU\xEU\x829\vU\x3U\x3U"+
		"\x3U\x3U\aU\x82F\nU\fU\xEU\x832\vU\x3U\x3U\x5U\x836\nU\x5U\x838\nU\x3"+
		"V\x3V\x3V\x3V\x3W\x3W\x5W\x840\nW\x3W\x3W\x3W\aW\x845\nW\fW\xEW\x848\v"+
		"W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\aW\x851\nW\fW\xEW\x854\vW\x3W\x3W\x3W\x3"+
		"W\x3W\x3W\x3W\aW\x85D\nW\fW\xEW\x860\vW\x3W\x3W\x3W\x5W\x865\nW\x3W\x3"+
		"W\x3W\x3W\aW\x86B\nW\fW\xEW\x86E\vW\x3W\x3W\x3W\x3W\x5W\x874\nW\x3W\x3"+
		"W\x3W\x3W\aW\x87A\nW\fW\xEW\x87D\vW\x3W\x3W\x3W\x3W\x5W\x883\nW\x3W\x3"+
		"W\x3W\x3W\aW\x889\nW\fW\xEW\x88C\vW\x3W\x3W\x3W\x3W\x5W\x892\nW\x3W\x3"+
		"W\x3W\x3W\aW\x898\nW\fW\xEW\x89B\vW\x3W\x3W\x3W\x3W\x5W\x8A1\nW\x3W\x5"+
		"W\x8A4\nW\x3W\x3W\x3W\x3W\aW\x8AA\nW\fW\xEW\x8AD\vW\x3W\x3W\x3W\x3W\x5"+
		"W\x8B3\nW\x3W\x5W\x8B6\nW\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W\x3W"+
		"\x5W\x8C3\nW\x3X\x5X\x8C6\nX\x3X\x5X\x8C9\nX\x3X\x3X\x3X\x3X\x3X\x5X\x8D0"+
		"\nX\x3X\x3X\x3X\x5X\x8D5\nX\x3X\x3X\x3X\x5X\x8DA\nX\x5X\x8DC\nX\x3X\x3"+
		"X\x3X\x3X\x3X\x3X\x3X\x3X\x5X\x8E6\nX\x3X\x3X\x3X\x5X\x8EB\nX\x5X\x8ED"+
		"\nX\x5X\x8EF\nX\x3Y\x5Y\x8F2\nY\x3Y\x3Y\x3Y\x3Y\x3Z\x3Z\x3Z\x3Z\aZ\x8FC"+
		"\nZ\fZ\xEZ\x8FF\vZ\x3Z\x3Z\x5Z\x903\nZ\x3Z\x3Z\x3[\x3[\x3[\x3[\a[\x90B"+
		"\n[\f[\xE[\x90E\v[\x3[\x3[\x3\\\x5\\\x913\n\\\x3\\\x3\\\x3\\\x3\\\x3\\"+
		"\x5\\\x91A\n\\\x3\\\x3\\\x3\\\x5\\\x91F\n\\\x3]\x3]\x3]\x3]\a]\x925\n"+
		"]\f]\xE]\x928\v]\x3]\x3]\x3^\x3^\x3^\x3^\a^\x930\n^\f^\xE^\x933\v^\x3"+
		"^\x3^\x3^\x3^\x5^\x939\n^\x3^\x3^\x3^\a^\x93E\n^\f^\xE^\x941\v^\x3^\x3"+
		"^\x3^\x3^\x3^\x3^\x3^\a^\x94A\n^\f^\xE^\x94D\v^\x3^\x3^\x5^\x951\n^\x3"+
		"_\x3_\x3_\x3_\a_\x957\n_\f_\xE_\x95A\v_\x3_\x3_\x3`\x5`\x95F\n`\x3`\x3"+
		"`\x3`\x3`\x3`\a`\x966\n`\f`\xE`\x969\v`\x3`\x3`\x3`\x3`\x3`\x3`\a`\x971"+
		"\n`\f`\xE`\x974\v`\x3`\x3`\x5`\x978\n`\x3`\x5`\x97B\n`\x3`\x3`\x3`\x3"+
		"`\x3`\a`\x982\n`\f`\xE`\x985\v`\x3`\x3`\x3`\x3`\x3`\x3`\a`\x98D\n`\f`"+
		"\xE`\x990\v`\x3`\x3`\x5`\x994\n`\x3`\x5`\x997\n`\x5`\x999\n`\x3\x61\x3"+
		"\x61\x3\x61\x3\x62\x3\x62\x5\x62\x9A0\n\x62\x3\x63\x3\x63\x3\x63\x5\x63"+
		"\x9A5\n\x63\x3\x64\x5\x64\x9A8\n\x64\x3\x64\x3\x64\x3\x64\x3\x64\x5\x64"+
		"\x9AE\n\x64\x3\x64\x5\x64\x9B1\n\x64\x3\x65\x5\x65\x9B4\n\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x5\x65\x9BE\n\x65\x3\x65"+
		"\x3\x65\x3\x66\x6\x66\x9C3\n\x66\r\x66\xE\x66\x9C4\x3g\x3g\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x9D3\nh\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\x9EB"+
		"\nh\x3h\x5h\x9EE\nh\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xA2C\nh\x3h\x3h"+
		"\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x3h\x5h\xA40"+
		"\nh\x3h\x3h\x3h\x3h\x5h\xA46\nh\x3h\x3h\x3h\x5h\xA4B\nh\x3h\x3h\x3h\x3"+
		"h\x3h\x3h\x5h\xA53\nh\ah\xA55\nh\fh\xEh\xA58\vh\x3i\x3i\x3i\x3i\x3i\x5"+
		"i\xA5F\ni\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA7B\ni\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x5i\xA8F\ni"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i"+
		"\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\ai\xACC\ni\fi\xEi\xACF\vi\x3i\x3i\x3i\x3i\x3"+
		"i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\x3i\ai\xAE0\ni\fi\xEi\xAE3\vi\x3"+
		"i\x3i\x3i\x5i\xAE8\ni\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x5j\xAF1\nj\x3j\x3j"+
		"\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\x3j\aj\xB03\nj\f"+
		"j\xEj\xB06\vj\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xB11\nk\x3k\x3k"+
		"\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3"+
		"k\x3k\x3k\x3k\x5k\xB2A\nk\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k\x3k"+
		"\x3k\x3k\x3k\x5k\xB3A\nk\x3k\x3k\x3k\x3k\x3k\x3k\x5k\xB42\nk\x5k\xB44"+
		"\nk\x3l\x3l\x5l\xB48\nl\x3m\x3m\x3m\x3m\am\xB4E\nm\fm\xEm\xB51\vm\x5m"+
		"\xB53\nm\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x5o\xB5D\no\x3p\x3p\x3p\x3p\a"+
		"p\xB63\np\fp\xEp\xB66\vp\x3p\x3p\x3q\x3q\x5q\xB6C\nq\x3r\x3r\x3r\x3r\a"+
		"r\xB72\nr\fr\xEr\xB75\vr\x3r\x3r\x3s\x3s\x3s\as\xB7C\ns\fs\xEs\xB7F\v"+
		"s\x3t\x3t\x3u\x3u\x3u\au\xB86\nu\fu\xEu\xB89\vu\x3v\x3v\x3v\x3v\x5v\xB8F"+
		"\nv\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x3v\x5v\xB9E\nv\x3"+
		"v\x5v\xBA1\nv\x5v\xBA3\nv\x3w\x3w\x3w\x3w\x3w\x5w\xBAA\nw\x3w\x3w\x5w"+
		"\xBAE\nw\x3w\x3w\x3x\x3x\x3x\x3x\x3x\x3x\x3x\x3x\ax\xBBA\nx\fx\xEx\xBBD"+
		"\vx\x3y\x3y\x3y\x3y\x3y\x3y\ay\xBC5\ny\fy\xEy\xBC8\vy\x3z\x3z\x3z\x3z"+
		"\x3z\x3z\x3z\x3z\x5z\xBD2\nz\x3{\x3{\x5{\xBD6\n{\x3|\x3|\x3|\x3|\a|\xBDC"+
		"\n|\f|\xE|\xBDF\v|\x3|\x3|\x3}\x3}\x3~\x3~\x5~\xBE7\n~\x3~\x3~\x3\x7F"+
		"\x3\x7F\x5\x7F\xBED\n\x7F\x3\x7F\x3\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3"+
		"\x80\x3\x80\x3\x80\x3\x80\x6\x80\xBF9\n\x80\r\x80\xE\x80\xBFA\x3\x80\x3"+
		"\x80\x3\x80\x3\x80\x3\x80\x5\x80\xC02\n\x80\x3\x81\x3\x81\a\x81\xC06\n"+
		"\x81\f\x81\xE\x81\xC09\v\x81\x3\x81\x3\x81\x5\x81\xC0D\n\x81\x3\x82\x3"+
		"\x82\x3\x82\x5\x82\xC12\n\x82\x3\x83\x3\x83\x5\x83\xC16\n\x83\x3\x84\x3"+
		"\x84\x3\x84\x3\x84\x5\x84\xC1C\n\x84\x3\x84\x3\x84\x3\x84\x3\x84\x3\x84"+
		"\x3\x84\x5\x84\xC24\n\x84\x3\x84\x3\x84\x3\x84\x3\x84\a\x84\xC2A\n\x84"+
		"\f\x84\xE\x84\xC2D\v\x84\x3\x84\x3\x84\x5\x84\xC31\n\x84\x3\x85\x5\x85"+
		"\xC34\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\a\x86\xC3B\n\x86\f\x86"+
		"\xE\x86\xC3E\v\x86\x5\x86\xC40\n\x86\x3\x86\x3\x86\x3\x87\x3\x87\x3\x87"+
		"\x3\x87\x3\x87\x5\x87\xC49\n\x87\x3\x88\x5\x88\xC4C\n\x88\x3\x88\x3\x88"+
		"\x3\x88\x3\x88\a\x88\xC52\n\x88\f\x88\xE\x88\xC55\v\x88\x5\x88\xC57\n"+
		"\x88\x3\x88\x3\x88\x3\x89\x3\x89\x3\x89\x5\x89\xC5E\n\x89\x3\x89\x3\x89"+
		"\x3\x8A\x3\x8A\x3\x8A\x3\x8A\x3\x8A\a\x8A\xC67\n\x8A\f\x8A\xE\x8A\xC6A"+
		"\v\x8A\x5\x8A\xC6C\n\x8A\x3\x8A\x3\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3"+
		"\x8B\x5\x8B\xC75\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\a\x8C\xC7B\n\x8C\f"+
		"\x8C\xE\x8C\xC7E\v\x8C\x3\x8C\x3\x8C\x3\x8D\x3\x8D\x3\x8D\x3\x8D\a\x8D"+
		"\xC86\n\x8D\f\x8D\xE\x8D\xC89\v\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xC94\n\x8F\x3\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x5\x8F\xC9C\n\x8F\x3\x8F\x3\x8F\x5\x8F\xCA0\n\x8F\x3"+
		"\x8F\x3\x8F\x3\x8F\x3\x8F\x3\x8F\x5\x8F\xCA7\n\x8F\x3\x8F\x3\x8F\x3\x8F"+
		"\x3\x8F\x5\x8F\xCAD\n\x8F\x3\x90\x5\x90\xCB0\n\x90\x3\x90\x3\x90\x3\x90"+
		"\x3\x90\x5\x90\xCB6\n\x90\x3\x91\x3\x91\x5\x91\xCBA\n\x91\x3\x92\x3\x92"+
		"\x3\x92\a\x92\xCBF\n\x92\f\x92\xE\x92\xCC2\v\x92\x3\x93\x5\x93\xCC5\n"+
		"\x93\x3\x93\x6\x93\xCC8\n\x93\r\x93\xE\x93\xCC9\x3\x93\x3\x93\x3\x94\x5"+
		"\x94\xCCF\n\x94\x3\x94\x3\x94\x3\x94\x5\x94\xCD4\n\x94\x3\x94\x5\x94\xCD7"+
		"\n\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95\a\x95\xCE0\n\x95"+
		"\f\x95\xE\x95\xCE3\v\x95\x3\x96\x3\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3"+
		"\x97\x3\x98\x3\x98\x3\x98\x3\x98\x5\x98\xCF0\n\x98\x3\x98\x3\x98\x3\x98"+
		"\x3\x99\a\x99\xCF6\n\x99\f\x99\xE\x99\xCF9\v\x99\x3\x99\x3\x99\x5\x99"+
		"\xCFD\n\x99\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\x3"+
		"\x9A\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD0B\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A"+
		"\x3\x9A\x3\x9A\x3\x9A\x5\x9A\xD14\n\x9A\x3\x9A\x3\x9A\x3\x9A\x3\x9A\a"+
		"\x9A\xD1A\n\x9A\f\x9A\xE\x9A\xD1D\v\x9A\x5\x9A\xD1F\n\x9A\x3\x9B\x3\x9B"+
		"\x3\x9B\x3\x9C\x3\x9C\x5\x9C\xD26\n\x9C\x3\x9D\x3\x9D\x3\x9D\x3\x9D\x3"+
		"\x9D\x3\x9D\x3\x9D\x5\x9D\xD2F\n\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x3\x9F"+
		"\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x3\x9F\x5\x9F\xD3D\n\x9F\x3"+
		"\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x3\xA0\x5\xA0\xD46\n\xA0\x3\xA1"+
		"\x3\xA1\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x3\xA5"+
		"\x3\xA5\x3\xA5\x3\xA5\x3\xA5\x5\xA5\xD61\n\xA5\x5\xA5\xD63\n\xA5\x5\xA5"+
		"\xD65\n\xA5\x3\xA5\a\xA5\xD68\n\xA5\f\xA5\xE\xA5\xD6B\v\xA5\x3\xA5\x5"+
		"\xA5\xD6E\n\xA5\x3\xA6\x3\xA6\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA9\x5\xA9"+
		"\xD77\n\xA9\x3\xA9\x5\xA9\xD7A\n\xA9\x3\xA9\x3\xA9\x5\xA9\xD7E\n\xA9\x3"+
		"\xA9\x3\xA9\x5\xA9\xD82\n\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xA9\a\xA9\xD88\n"+
		"\xA9\f\xA9\xE\xA9\xD8B\v\xA9\x5\xA9\xD8D\n\xA9\x3\xA9\x3\xA9\x3\xA9\x3"+
		"\xA9\a\xA9\xD93\n\xA9\f\xA9\xE\xA9\xD96\v\xA9\x5\xA9\xD98\n\xA9\x3\xA9"+
		"\a\xA9\xD9B\n\xA9\f\xA9\xE\xA9\xD9E\v\xA9\x3\xA9\x3\xA9\a\xA9\xDA2\n\xA9"+
		"\f\xA9\xE\xA9\xDA5\v\xA9\x3\xA9\x3\xA9\x3\xA9\x3\xAA\x6\xAA\xDAB\n\xAA"+
		"\r\xAA\xE\xAA\xDAC\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x3\xAB\x5\xAB\xDB4\n\xAB"+
		"\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x3\xAD\x3\xAE\x5\xAE\xDBD\n\xAE\x3"+
		"\xAE\x5\xAE\xDC0\n\xAE\x3\xAE\x3\xAE\x3\xAE\x5\xAE\xDC5\n\xAE\x3\xAE\x3"+
		"\xAE\x3\xAE\x3\xAE\x5\xAE\xDCB\n\xAE\a\xAE\xDCD\n\xAE\f\xAE\xE\xAE\xDD0"+
		"\v\xAE\x5\xAE\xDD2\n\xAE\x3\xAE\x3\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF\a\xAF"+
		"\xDDA\n\xAF\f\xAF\xE\xAF\xDDD\v\xAF\x5\xAF\xDDF\n\xAF\x3\xAF\x3\xAF\x3"+
		"\xB0\x3\xB0\x5\xB0\xDE5\n\xB0\x3\xB0\x3\xB0\x5\xB0\xDE9\n\xB0\x3\xB1\x6"+
		"\xB1\xDEC\n\xB1\r\xB1\xE\xB1\xDED\x3\xB2\x5\xB2\xDF1\n\xB2\x3\xB2\x3\xB2"+
		"\x3\xB2\x3\xB2\x3\xB2\a\xB2\xDF8\n\xB2\f\xB2\xE\xB2\xDFB\v\xB2\x3\xB2"+
		"\x3\xB2\x5\xB2\xDFF\n\xB2\x5\xB2\xE01\n\xB2\x3\xB2\x5\xB2\xE04\n\xB2\x3"+
		"\xB2\x5\xB2\xE07\n\xB2\x3\xB2\x5\xB2\xE0A\n\xB2\x3\xB2\x5\xB2\xE0D\n\xB2"+
		"\x3\xB2\x3\xB2\x3\xB3\x3\xB3\x3\xB3\x3\xB4\x5\xB4\xE15\n\xB4\x3\xB4\x3"+
		"\xB4\x5\xB4\xE19\n\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x5\xB4\xE1F\n\xB4\x3"+
		"\xB4\x3\xB4\x5\xB4\xE23\n\xB4\x3\xB4\x3\xB4\x3\xB5\x6\xB5\xE28\n\xB5\r"+
		"\xB5\xE\xB5\xE29\x3\xB6\x5\xB6\xE2D\n\xB6\x3\xB6\x5\xB6\xE30\n\xB6\x3"+
		"\xB6\x5\xB6\xE33\n\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\xE39\n\xB6\x3"+
		"\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x3\xB6\x5\xB6\xE41\n\xB6\x3\xB7\x5\xB7"+
		"\xE44\n\xB7\x3\xB7\x3\xB7\x5\xB7\xE48\n\xB7\x3\xB7\x5\xB7\xE4B\n\xB7\x3"+
		"\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x5\xB7\xE54\n\xB7\x3\xB8"+
		"\x3\xB8\x3\xB9\x5\xB9\xE59\n\xB9\x3\xB9\x3\xB9\x5\xB9\xE5D\n\xB9\x3\xB9"+
		"\x3\xB9\x5\xB9\xE61\n\xB9\x3\xB9\x3\xB9\x5\xB9\xE65\n\xB9\x3\xB9\x3\xB9"+
		"\x5\xB9\xE69\n\xB9\x3\xB9\x5\xB9\xE6C\n\xB9\x3\xB9\a\xB9\xE6F\n\xB9\f"+
		"\xB9\xE\xB9\xE72\v\xB9\x3\xB9\x5\xB9\xE75\n\xB9\x3\xB9\x3\xB9\a\xB9\xE79"+
		"\n\xB9\f\xB9\xE\xB9\xE7C\v\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\xE81\n\xB9"+
		"\x3\xB9\x3\xB9\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA\x3\xBA"+
		"\x5\xBA\xE8D\n\xBA\x3\xBB\x5\xBB\xE90\n\xBB\x3\xBB\x5\xBB\xE93\n\xBB\x3"+
		"\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\xE99\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB"+
		"\x3\xBB\x5\xBB\xEA0\n\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x3\xBB\x5\xBB\xEA7"+
		"\n\xBB\x3\xBB\x5\xBB\xEAA\n\xBB\x3\xBC\x5\xBC\xEAD\n\xBC\x3\xBC\x5\xBC"+
		"\xEB0\n\xBC\x3\xBC\x5\xBC\xEB3\n\xBC\x3\xBC\x3\xBC\x3\xBC\a\xBC\xEB8\n"+
		"\xBC\f\xBC\xE\xBC\xEBB\v\xBC\x3\xBC\x3\xBC\x5\xBC\xEBF\n\xBC\x3\xBC\x3"+
		"\xBC\x3\xBD\x5\xBD\xEC4\n\xBD\x3\xBD\x5\xBD\xEC7\n\xBD\x3\xBD\x3\xBD\x3"+
		"\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xBF\x5\xBF\xED3\n\xBF"+
		"\x3\xBF\x3\xBF\x5\xBF\xED7\n\xBF\x3\xBF\x3\xBF\x3\xC0\x5\xC0\xEDC\n\xC0"+
		"\x3\xC0\x3\xC0\x3\xC0\x5\xC0\xEE1\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\x5"+
		"\xC0\xEE7\n\xC0\x3\xC0\x3\xC0\x3\xC0\x3\xC0\a\xC0\xEED\n\xC0\f\xC0\xE"+
		"\xC0\xEF0\v\xC0\x5\xC0\xEF2\n\xC0\x3\xC0\x3\xC0\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x5\xC1\xEFC\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1"+
		"\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\xF07\n\xC1\x3\xC1\x3\xC1\x3\xC1\x3"+
		"\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x3\xC1\x5\xC1\xF14\n\xC1"+
		"\x3\xC1\x3\xD69\x2\x6\xCE\xD2\xEE\xF0\xC2\x2\x2\x4\x2\x6\x2\b\x2\n\x2"+
		"\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C\x2\x1E\x2 \x2"+
		"\"\x2$\x2&\x2(\x2*\x2,\x2.\x2\x30\x2\x32\x2\x34\x2\x36\x2\x38\x2:\x2<"+
		"\x2>\x2@\x2\x42\x2\x44\x2\x46\x2H\x2J\x2L\x2N\x2P\x2R\x2T\x2V\x2X\x2Z"+
		"\x2\\\x2^\x2`\x2\x62\x2\x64\x2\x66\x2h\x2j\x2l\x2n\x2p\x2r\x2t\x2v\x2"+
		"x\x2z\x2|\x2~\x2\x80\x2\x82\x2\x84\x2\x86\x2\x88\x2\x8A\x2\x8C\x2\x8E"+
		"\x2\x90\x2\x92\x2\x94\x2\x96\x2\x98\x2\x9A\x2\x9C\x2\x9E\x2\xA0\x2\xA2"+
		"\x2\xA4\x2\xA6\x2\xA8\x2\xAA\x2\xAC\x2\xAE\x2\xB0\x2\xB2\x2\xB4\x2\xB6"+
		"\x2\xB8\x2\xBA\x2\xBC\x2\xBE\x2\xC0\x2\xC2\x2\xC4\x2\xC6\x2\xC8\x2\xCA"+
		"\x2\xCC\x2\xCE\x2\xD0\x2\xD2\x2\xD4\x2\xD6\x2\xD8\x2\xDA\x2\xDC\x2\xDE"+
		"\x2\xE0\x2\xE2\x2\xE4\x2\xE6\x2\xE8\x2\xEA\x2\xEC\x2\xEE\x2\xF0\x2\xF2"+
		"\x2\xF4\x2\xF6\x2\xF8\x2\xFA\x2\xFC\x2\xFE\x2\x100\x2\x102\x2\x104\x2"+
		"\x106\x2\x108\x2\x10A\x2\x10C\x2\x10E\x2\x110\x2\x112\x2\x114\x2\x116"+
		"\x2\x118\x2\x11A\x2\x11C\x2\x11E\x2\x120\x2\x122\x2\x124\x2\x126\x2\x128"+
		"\x2\x12A\x2\x12C\x2\x12E\x2\x130\x2\x132\x2\x134\x2\x136\x2\x138\x2\x13A"+
		"\x2\x13C\x2\x13E\x2\x140\x2\x142\x2\x144\x2\x146\x2\x148\x2\x14A\x2\x14C"+
		"\x2\x14E\x2\x150\x2\x152\x2\x154\x2\x156\x2\x158\x2\x15A\x2\x15C\x2\x15E"+
		"\x2\x160\x2\x162\x2\x164\x2\x166\x2\x168\x2\x16A\x2\x16C\x2\x16E\x2\x170"+
		"\x2\x172\x2\x174\x2\x176\x2\x178\x2\x17A\x2\x17C\x2\x17E\x2\x180\x2\x2"+
		"K\x4\x2\x1D\x1D\x84\x84\x4\x2\x1D\x1D(*\x3\x2\xDA\xDB\x4\x2\"\"\x39\x39"+
		"\n\x2\a\a\v\v\xF\xF\x1F\x1F\x37\x37\x43\x43\x45\x45LL\x4\x2RR\x15E\x15E"+
		"\a\x2\x4\x4\b\b\x32\x32TTXX\x3\x2\x167\x167\a\x2\x6\x6,-hh\x8D\x8D\xAA"+
		"\xAA\b\x2\x1E\x1E;;\x41\x41\x63\x63yy\x93\x93\x5\x2\x4\x4\b\b\x32\x32"+
		"\x4\x2\x6\x6,,\a\x2\x1E\x1E;;\x41\x41\x63\x63\x93\x93\x4\x2\'\'\x126\x126"+
		"\r\x2\x1E\x1E$$\x38\x38:;\x41\x41QQ\x63\x63\x66\x66iimm\x93\x93\x4\x2"+
		"--hh\x4\x2\xE\xEoo\x4\x2\x6\x6\'\'\x4\x2vv\x8E\x8E\xF\x2\x1E\x1E$$++\x38"+
		"\x38:;\x41\x41UU\x61\x61\x63\x63\x66\x66\x81\x81\x93\x93\x95\x95\x5\x2"+
		"]]nn\x84\x84\x4\x2]]\x15D\x15D\x4\x2nn\x84\x84\a\x2\x1E\x1E$$\x38\x38"+
		":;\x63\x63\x4\x2>>\x44\x44\t\x2\x1E\x1E$$\x38\x38:;\x41\x41\x63\x63\x80"+
		"\x80\t\x2\xEE\xF1\xF3\xF3\xF5\xFC\xFE\x101\x104\x106\x128\x129\x134\x135"+
		"\x4\x2[[__\x5\x2;;\x41\x41\x80\x80\x10\x2\x1E\x1E$$\x38\x38:;\x41\x41"+
		"QQ\x63\x63\x66\x66mmttyy\x80\x80\x8C\x8C\x93\x93\r\x2\xE\xE  \x32\x32"+
		"==TTWWYZ\x62\x62jjoo\x15E\x15E\x4\x2\x15\x15KK\x5\x2\x16\x16\x46\x46I"+
		"I\x3\x2\x102\x103\x4\x2\n\n\x1D\x1D\x4\x2\t\t\x15\x15\x4\x2\x12E\x12E"+
		"\x130\x130\x5\x2ll}}\x92\x93\x6\x2\x31\x31\x36\x36\x38\x38;;\x4\x2\x10"+
		"\x10\xD3\xD3\x4\x2yy\x93\x93\x4\x2\xF2\xF2\x10B\x10B\x4\x2\x126\x126\x12C"+
		"\x12D\x6\x2\xF7\xFA\xFD\xFD\x100\x100\x12A\x12A\x5\x2\x106\x106\x11A\x11A"+
		"\x11E\x11E\x4\x2\xFB\xFC\x101\x101\x3\x2\xF9\xFA\x3\x2\xEE\xF6\x5\x2\x104"+
		"\x104\x118\x118\x11C\x11C\x4\x2\x11B\x11B\x11F\x11F\x5\x2\x105\x105\x119"+
		"\x119\x11D\x11D\x4\x2VV\x102\x102\x3\x2\x10B\x117\x4\x2\x126\x126\x12C"+
		"\x12C\x3\x2\xF7\xF8\x4\x2}}\x92\x92\x3\x2\x107\x10A\x4\x2hh\xAA\xAA\x3"+
		"\x2%&\x4\x2xx~~\x5\x2\x9C\x9C\x9F\x9F\xB6\xB6\b\x2\x9C\x9C\x9E\x9F\xA1"+
		"\xA1\xA6\xA6\xAD\xAE\xB7\xB8\t\x2\x9D\x9D\xA0\xA0\xA2\xA5\xA7\xA9\xAB"+
		"\xAC\xAF\xB6\xB9\xBA\x5\x2\xE1\xEB\x134\x142\x144\x145\x1B\x2\x4\x4\x6"+
		"\x6\b\n\f\xE\x13\x13\x15\x15\x17\x1E!\"$&,,.\x30\x32\x32\x34\x35\x38>"+
		"@@\x44\x44GGKKMNTTXXkkpp\xA7\xA7\x107\x10A\x1A\x2\x5\x5\v\v\xF\x12\x14"+
		"\x14\x16\x16\x1F ##\'+--\x31\x31\x33\x33\x36\x37??\x42\x43\x45\x46HJL"+
		"LQRUWYjl\x99\xAA\xAA\xB1\xB1\xB4\xBA\x5\x2\xBF\xBF\xC3\xC3\xC8\xCB\x4"+
		"\x2\x82\x82\xCA\xCA\x6\x2\x41\x41QQmm\xC4\xC5\a\x2$$\x38\x38:;\x63\x63"+
		"\xC3\xC3\xF\x2\xE\xE\x41\x41QQ\x66\x66ttyy\x80\x80\x8C\x8C\x93\x93\xC0"+
		"\xC0\xC5\xC5\xC7\xC7\xCC\xCC\x4\x2\x4\x4\b\b\x6\x2\xCF\xD2\xD4\xD6\xDE"+
		"\xDE\x11C\x11F\x113E\x2\x18A\x3\x2\x2\x2\x4\x198\x3\x2\x2\x2\x6\x19C\x3"+
		"\x2\x2\x2\b\x1A4\x3\x2\x2\x2\n\x1AC\x3\x2\x2\x2\f\x1D7\x3\x2\x2\x2\xE"+
		"\x1DA\x3\x2\x2\x2\x10\x1DF\x3\x2\x2\x2\x12\x1F7\x3\x2\x2\x2\x14\x1F9\x3"+
		"\x2\x2\x2\x16\x213\x3\x2\x2\x2\x18\x219\x3\x2\x2\x2\x1A\x21C\x3\x2\x2"+
		"\x2\x1C\x248\x3\x2\x2\x2\x1E\x24B\x3\x2\x2\x2 \x26C\x3\x2\x2\x2\"\x275"+
		"\x3\x2\x2\x2$\x27C\x3\x2\x2\x2&\x29B\x3\x2\x2\x2(\x29D\x3\x2\x2\x2*\x2A4"+
		"\x3\x2\x2\x2,\x2A8\x3\x2\x2\x2.\x2AC\x3\x2\x2\x2\x30\x2DD\x3\x2\x2\x2"+
		"\x32\x2E0\x3\x2\x2\x2\x34\x2F7\x3\x2\x2\x2\x36\x2FA\x3\x2\x2\x2\x38\x307"+
		"\x3\x2\x2\x2:\x331\x3\x2\x2\x2<\x334\x3\x2\x2\x2>\x347\x3\x2\x2\x2@\x34B"+
		"\x3\x2\x2\x2\x42\x35B\x3\x2\x2\x2\x44\x385\x3\x2\x2\x2\x46\x3B3\x3\x2"+
		"\x2\x2H\x3B7\x3\x2\x2\x2J\x3C6\x3\x2\x2\x2L\x3CD\x3\x2\x2\x2N\x3DD\x3"+
		"\x2\x2\x2P\x3E0\x3\x2\x2\x2R\x40A\x3\x2\x2\x2T\x42A\x3\x2\x2\x2V\x445"+
		"\x3\x2\x2\x2X\x453\x3\x2\x2\x2Z\x478\x3\x2\x2\x2\\\x48B\x3\x2\x2\x2^\x4A9"+
		"\x3\x2\x2\x2`\x4B7\x3\x2\x2\x2\x62\x4BC\x3\x2\x2\x2\x64\x4DE\x3\x2\x2"+
		"\x2\x66\x4E1\x3\x2\x2\x2h\x52F\x3\x2\x2\x2j\x532\x3\x2\x2\x2l\x53A\x3"+
		"\x2\x2\x2n\x54D\x3\x2\x2\x2p\x551\x3\x2\x2\x2r\x55A\x3\x2\x2\x2t\x587"+
		"\x3\x2\x2\x2v\x58A\x3\x2\x2\x2x\x5AC\x3\x2\x2\x2z\x5B3\x3\x2\x2\x2|\x5B7"+
		"\x3\x2\x2\x2~\x5C1\x3\x2\x2\x2\x80\x5DB\x3\x2\x2\x2\x82\x5DF\x3\x2\x2"+
		"\x2\x84\x5E1\x3\x2\x2\x2\x86\x5E4\x3\x2\x2\x2\x88\x602\x3\x2\x2\x2\x8A"+
		"\x607\x3\x2\x2\x2\x8C\x60C\x3\x2\x2\x2\x8E\x61F\x3\x2\x2\x2\x90\x621\x3"+
		"\x2\x2\x2\x92\x624\x3\x2\x2\x2\x94\x638\x3\x2\x2\x2\x96\x63A\x3\x2\x2"+
		"\x2\x98\x647\x3\x2\x2\x2\x9A\x67C\x3\x2\x2\x2\x9C\x7E4\x3\x2\x2\x2\x9E"+
		"\x7E6\x3\x2\x2\x2\xA0\x7E8\x3\x2\x2\x2\xA2\x7FE\x3\x2\x2\x2\xA4\x804\x3"+
		"\x2\x2\x2\xA6\x816\x3\x2\x2\x2\xA8\x837\x3\x2\x2\x2\xAA\x839\x3\x2\x2"+
		"\x2\xAC\x8C2\x3\x2\x2\x2\xAE\x8EE\x3\x2\x2\x2\xB0\x8F1\x3\x2\x2\x2\xB2"+
		"\x8F7\x3\x2\x2\x2\xB4\x906\x3\x2\x2\x2\xB6\x912\x3\x2\x2\x2\xB8\x920\x3"+
		"\x2\x2\x2\xBA\x950\x3\x2\x2\x2\xBC\x952\x3\x2\x2\x2\xBE\x998\x3\x2\x2"+
		"\x2\xC0\x99A\x3\x2\x2\x2\xC2\x99D\x3\x2\x2\x2\xC4\x9A1\x3\x2\x2\x2\xC6"+
		"\x9A7\x3\x2\x2\x2\xC8\x9B3\x3\x2\x2\x2\xCA\x9C2\x3\x2\x2\x2\xCC\x9C6\x3"+
		"\x2\x2\x2\xCE\x9ED\x3\x2\x2\x2\xD0\xAE7\x3\x2\x2\x2\xD2\xAF0\x3\x2\x2"+
		"\x2\xD4\xB43\x3\x2\x2\x2\xD6\xB47\x3\x2\x2\x2\xD8\xB49\x3\x2\x2\x2\xDA"+
		"\xB56\x3\x2\x2\x2\xDC\xB5C\x3\x2\x2\x2\xDE\xB5E\x3\x2\x2\x2\xE0\xB6B\x3"+
		"\x2\x2\x2\xE2\xB6D\x3\x2\x2\x2\xE4\xB78\x3\x2\x2\x2\xE6\xB80\x3\x2\x2"+
		"\x2\xE8\xB82\x3\x2\x2\x2\xEA\xBA2\x3\x2\x2\x2\xEC\xBA4\x3\x2\x2\x2\xEE"+
		"\xBB1\x3\x2\x2\x2\xF0\xBBE\x3\x2\x2\x2\xF2\xBD1\x3\x2\x2\x2\xF4\xBD3\x3"+
		"\x2\x2\x2\xF6\xBD7\x3\x2\x2\x2\xF8\xBE2\x3\x2\x2\x2\xFA\xBE6\x3\x2\x2"+
		"\x2\xFC\xBEC\x3\x2\x2\x2\xFE\xC01\x3\x2\x2\x2\x100\xC0C\x3\x2\x2\x2\x102"+
		"\xC11\x3\x2\x2\x2\x104\xC15\x3\x2\x2\x2\x106\xC30\x3\x2\x2\x2\x108\xC33"+
		"\x3\x2\x2\x2\x10A\xC35\x3\x2\x2\x2\x10C\xC48\x3\x2\x2\x2\x10E\xC4B\x3"+
		"\x2\x2\x2\x110\xC5D\x3\x2\x2\x2\x112\xC61\x3\x2\x2\x2\x114\xC74\x3\x2"+
		"\x2\x2\x116\xC76\x3\x2\x2\x2\x118\xC81\x3\x2\x2\x2\x11A\xC8C\x3\x2\x2"+
		"\x2\x11C\xCAC\x3\x2\x2\x2\x11E\xCB5\x3\x2\x2\x2\x120\xCB9\x3\x2\x2\x2"+
		"\x122\xCBB\x3\x2\x2\x2\x124\xCC7\x3\x2\x2\x2\x126\xCCE\x3\x2\x2\x2\x128"+
		"\xCDC\x3\x2\x2\x2\x12A\xCE4\x3\x2\x2\x2\x12C\xCE8\x3\x2\x2\x2\x12E\xCEB"+
		"\x3\x2\x2\x2\x130\xCF7\x3\x2\x2\x2\x132\xD1E\x3\x2\x2\x2\x134\xD20\x3"+
		"\x2\x2\x2\x136\xD23\x3\x2\x2\x2\x138\xD2E\x3\x2\x2\x2\x13A\xD30\x3\x2"+
		"\x2\x2\x13C\xD3C\x3\x2\x2\x2\x13E\xD45\x3\x2\x2\x2\x140\xD47\x3\x2\x2"+
		"\x2\x142\xD49\x3\x2\x2\x2\x144\xD4B\x3\x2\x2\x2\x146\xD4D\x3\x2\x2\x2"+
		"\x148\xD6D\x3\x2\x2\x2\x14A\xD6F\x3\x2\x2\x2\x14C\xD71\x3\x2\x2\x2\x14E"+
		"\xD73\x3\x2\x2\x2\x150\xD76\x3\x2\x2\x2\x152\xDAA\x3\x2\x2\x2\x154\xDB3"+
		"\x3\x2\x2\x2\x156\xDB5\x3\x2\x2\x2\x158\xDB9\x3\x2\x2\x2\x15A\xDBC\x3"+
		"\x2\x2\x2\x15C\xDD5\x3\x2\x2\x2\x15E\xDE4\x3\x2\x2\x2\x160\xDEB\x3\x2"+
		"\x2\x2\x162\xDF0\x3\x2\x2\x2\x164\xE10\x3\x2\x2\x2\x166\xE14\x3\x2\x2"+
		"\x2\x168\xE27\x3\x2\x2\x2\x16A\xE2C\x3\x2\x2\x2\x16C\xE43\x3\x2\x2\x2"+
		"\x16E\xE55\x3\x2\x2\x2\x170\xE58\x3\x2\x2\x2\x172\xE8C\x3\x2\x2\x2\x174"+
		"\xE8F\x3\x2\x2\x2\x176\xEAC\x3\x2\x2\x2\x178\xEC3\x3\x2\x2\x2\x17A\xECB"+
		"\x3\x2\x2\x2\x17C\xECF\x3\x2\x2\x2\x17E\xEDB\x3\x2\x2\x2\x180\xF13\x3"+
		"\x2\x2\x2\x182\x183\a\xBE\x2\x2\x183\x184\a\x13F\x2\x2\x184\x189\a\x167"+
		"\x2\x2\x185\x186\a\xBD\x2\x2\x186\x187\a\x13F\x2\x2\x187\x189\a\x167\x2"+
		"\x2\x188\x182\x3\x2\x2\x2\x188\x185\x3\x2\x2\x2\x189\x18C\x3\x2\x2\x2"+
		"\x18A\x188\x3\x2\x2\x2\x18A\x18B\x3\x2\x2\x2\x18B\x190\x3\x2\x2\x2\x18C"+
		"\x18A\x3\x2\x2\x2\x18D\x18F\x5\x4\x3\x2\x18E\x18D\x3\x2\x2\x2\x18F\x192"+
		"\x3\x2\x2\x2\x190\x18E\x3\x2\x2\x2\x190\x191\x3\x2\x2\x2\x191\x193\x3"+
		"\x2\x2\x2\x192\x190\x3\x2\x2\x2\x193\x194\a\x2\x2\x3\x194\x3\x3\x2\x2"+
		"\x2\x195\x199\x5\x9CO\x2\x196\x199\x5\f\a\x2\x197\x199\x5\xCEh\x2\x198"+
		"\x195\x3\x2\x2\x2\x198\x196\x3\x2\x2\x2\x198\x197\x3\x2\x2\x2\x199\x5"+
		"\x3\x2\x2\x2\x19A\x19D\x5\x11C\x8F\x2\x19B\x19D\x5\x11E\x90\x2\x19C\x19A"+
		"\x3\x2\x2\x2\x19C\x19B\x3\x2\x2\x2\x19D\x19E\x3\x2\x2\x2\x19E\x19F\a\x167"+
		"\x2\x2\x19F\x1A0\a\x2\x2\x3\x1A0\a\x3\x2\x2\x2\x1A1\x1A3\x5\f\a\x2\x1A2"+
		"\x1A1\x3\x2\x2\x2\x1A3\x1A6\x3\x2\x2\x2\x1A4\x1A2\x3\x2\x2\x2\x1A4\x1A5"+
		"\x3\x2\x2\x2\x1A5\x1A7\x3\x2\x2\x2\x1A6\x1A4\x3\x2\x2\x2\x1A7\x1A8\a\x2"+
		"\x2\x3\x1A8\t\x3\x2\x2\x2\x1A9\x1AB\x5\x9AN\x2\x1AA\x1A9\x3\x2\x2\x2\x1AB"+
		"\x1AE\x3\x2\x2\x2\x1AC\x1AA\x3\x2\x2\x2\x1AC\x1AD\x3\x2\x2\x2\x1AD\x1AF"+
		"\x3\x2\x2\x2\x1AE\x1AC\x3\x2\x2\x2\x1AF\x1B3\x5*\x16\x2\x1B0\x1B2\x5\f"+
		"\a\x2\x1B1\x1B0\x3\x2\x2\x2\x1B2\x1B5\x3\x2\x2\x2\x1B3\x1B1\x3\x2\x2\x2"+
		"\x1B3\x1B4\x3\x2\x2\x2\x1B4\x1B6\x3\x2\x2\x2\x1B5\x1B3\x3\x2\x2\x2\x1B6"+
		"\x1B7\a\x2\x2\x3\x1B7\v\x3\x2\x2\x2\x1B8\x1D8\x5@!\x2\x1B9\x1D8\x5\x44"+
		"#\x2\x1BA\x1BB\x6\a\x2\x2\x1BB\x1D8\x5\x170\xB9\x2\x1BC\x1BD\x6\a\x3\x2"+
		"\x1BD\x1D8\x5\x150\xA9\x2\x1BE\x1D8\x5P)\x2\x1BF\x1D8\x5\x42\"\x2\x1C0"+
		"\x1D8\x5R*\x2\x1C1\x1D8\x5X-\x2\x1C2\x1D8\x5T+\x2\x1C3\x1D8\x5\x96L\x2"+
		"\x1C4\x1C5\x6\a\x4\x2\x1C5\x1D8\x5\x38\x1D\x2\x1C6\x1C7\x6\a\x5\x2\x1C7"+
		"\x1D8\x5<\x1F\x2\x1C8\x1D8\x5\x10\t\x2\x1C9\x1D8\x5.\x18\x2\x1CA\x1D8"+
		"\x5\x36\x1C\x2\x1CB\x1D8\x5\x30\x19\x2\x1CC\x1D8\x5\x1A\xE\x2\x1CD\x1CE"+
		"\x6\a\x6\x2\x1CE\x1D8\x5\x32\x1A\x2\x1CF\x1D0\x6\a\a\x2\x1D0\x1D8\x5\x16A"+
		"\xB6\x2\x1D1\x1D8\x5v<\x2\x1D2\x1D8\x5~@\x2\x1D3\x1D8\x5\x9AN\x2\x1D4"+
		"\x1D5\x6\a\b\x2\x1D5\x1D8\x5\x1E\x10\x2\x1D6\x1D8\x5\xE\b\x2\x1D7\x1B8"+
		"\x3\x2\x2\x2\x1D7\x1B9\x3\x2\x2\x2\x1D7\x1BA\x3\x2\x2\x2\x1D7\x1BC\x3"+
		"\x2\x2\x2\x1D7\x1BE\x3\x2\x2\x2\x1D7\x1BF\x3\x2\x2\x2\x1D7\x1C0\x3\x2"+
		"\x2\x2\x1D7\x1C1\x3\x2\x2\x2\x1D7\x1C2\x3\x2\x2\x2\x1D7\x1C3\x3\x2\x2"+
		"\x2\x1D7\x1C4\x3\x2\x2\x2\x1D7\x1C6\x3\x2\x2\x2\x1D7\x1C8\x3\x2\x2\x2"+
		"\x1D7\x1C9\x3\x2\x2\x2\x1D7\x1CA\x3\x2\x2\x2\x1D7\x1CB\x3\x2\x2\x2\x1D7"+
		"\x1CC\x3\x2\x2\x2\x1D7\x1CD\x3\x2\x2\x2\x1D7\x1CF\x3\x2\x2\x2\x1D7\x1D1"+
		"\x3\x2\x2\x2\x1D7\x1D2\x3\x2\x2\x2\x1D7\x1D3\x3\x2\x2\x2\x1D7\x1D4\x3"+
		"\x2\x2\x2\x1D7\x1D6\x3\x2\x2\x2\x1D8\r\x3\x2\x2\x2\x1D9\x1DB\a\x167\x2"+
		"\x2\x1DA\x1D9\x3\x2\x2\x2\x1DB\x1DC\x3\x2\x2\x2\x1DC\x1DA\x3\x2\x2\x2"+
		"\x1DC\x1DD\x3\x2\x2\x2\x1DD\xF\x3\x2\x2\x2\x1DE\x1E0\x5\x8CG\x2\x1DF\x1DE"+
		"\x3\x2\x2\x2\x1DF\x1E0\x3\x2\x2\x2\x1E0\x1E2\x3\x2\x2\x2\x1E1\x1E3\x5"+
		",\x17\x2\x1E2\x1E1\x3\x2\x2\x2\x1E2\x1E3\x3\x2\x2\x2\x1E3\x1E5\x3\x2\x2"+
		"\x2\x1E4\x1E6\t\x2\x2\x2\x1E5\x1E4\x3\x2\x2\x2\x1E5\x1E6\x3\x2\x2\x2\x1E6"+
		"\x1E7\x3\x2\x2\x2\x1E7\x1E8\x5\x12\n\x2\x1E8\x1EA\x5\x14\v\x2\x1E9\x1EB"+
		"\t\x3\x2\x2\x1EA\x1E9\x3\x2\x2\x2\x1EA\x1EB\x3\x2\x2\x2\x1EB\x1EC\x3\x2"+
		"\x2\x2\x1EC\x1ED\x5\x16\f\x2\x1ED\x1EE\x5\xE\b\x2\x1EE\x1F5\x5*\x16\x2"+
		"\x1EF\x1F3\t\x4\x2\x2\x1F0\x1F1\a\x19\x2\x2\x1F1\x1F3\x5\x12\n\x2\x1F2"+
		"\x1EF\x3\x2\x2\x2\x1F2\x1F0\x3\x2\x2\x2\x1F3\x1F4\x3\x2\x2\x2\x1F4\x1F6"+
		"\a\x167\x2\x2\x1F5\x1F2\x3\x2\x2\x2\x1F5\x1F6\x3\x2\x2\x2\x1F6\x11\x3"+
		"\x2\x2\x2\x1F7\x1F8\t\x5\x2\x2\x1F8\x13\x3\x2\x2\x2\x1F9\x1FB\x5\x13C"+
		"\x9F\x2\x1FA\x1FC\x5H%\x2\x1FB\x1FA\x3\x2\x2\x2\x1FB\x1FC\x3\x2\x2\x2"+
		"\x1FC\x1FE\x3\x2\x2\x2\x1FD\x1FF\x5$\x13\x2\x1FE\x1FD\x3\x2\x2\x2\x1FE"+
		"\x1FF\x3\x2\x2\x2\x1FF\x202\x3\x2\x2\x2\x200\x201\a\x6\x2\x2\x201\x203"+
		"\x5\xFE\x80\x2\x202\x200\x3\x2\x2\x2\x202\x203\x3\x2\x2\x2\x203\x207\x3"+
		"\x2\x2\x2\x204\x206\x5L\'\x2\x205\x204\x3\x2\x2\x2\x206\x209\x3\x2\x2"+
		"\x2\x207\x205\x3\x2\x2\x2\x207\x208\x3\x2\x2\x2\x208\x20B\x3\x2\x2\x2"+
		"\x209\x207\x3\x2\x2\x2\x20A\x20C\x5\x18\r\x2\x20B\x20A\x3\x2\x2\x2\x20B"+
		"\x20C\x3\x2\x2\x2\x20C\x20F\x3\x2\x2\x2\x20D\x20E\a\x15D\x2\x2\x20E\x210"+
		"\x5\xCEh\x2\x20F\x20D\x3\x2\x2\x2\x20F\x210\x3\x2\x2\x2\x210\x15\x3\x2"+
		"\x2\x2\x211\x212\a\x1E\x2\x2\x212\x214\a.\x2\x2\x213\x211\x3\x2\x2\x2"+
		"\x213\x214\x3\x2\x2\x2\x214\x217\x3\x2\x2\x2\x215\x216\a\x14\x2\x2\x216"+
		"\x218\a\x13F\x2\x2\x217\x215\x3\x2\x2\x2\x217\x218\x3\x2\x2\x2\x218\x17"+
		"\x3\x2\x2\x2\x219\x21A\t\x6\x2\x2\x21A\x19\x3\x2\x2\x2\x21B\x21D\x5\x8C"+
		"G\x2\x21C\x21B\x3\x2\x2\x2\x21C\x21D\x3\x2\x2\x2\x21D\x21F\x3\x2\x2\x2"+
		"\x21E\x220\x5,\x17\x2\x21F\x21E\x3\x2\x2\x2\x21F\x220\x3\x2\x2\x2\x220"+
		"\x221\x3\x2\x2\x2\x221\x222\a\x13\x2\x2\x222\x223\x5\x12\n\x2\x223\x225"+
		"\x5\x13C\x9F\x2\x224\x226\x5$\x13\x2\x225\x224\x3\x2\x2\x2\x225\x226\x3"+
		"\x2\x2\x2\x226\x229\x3\x2\x2\x2\x227\x228\a\x6\x2\x2\x228\x22A\x5\xFE"+
		"\x80\x2\x229\x227\x3\x2\x2\x2\x229\x22A\x3\x2\x2\x2\x22A\x22C\x3\x2\x2"+
		"\x2\x22B\x22D\x5\x1C\xF\x2\x22C\x22B\x3\x2\x2\x2\x22C\x22D\x3\x2\x2\x2"+
		"\x22D\x22E\x3\x2\x2\x2\x22E\x22F\a\x126\x2\x2\x22F\x232\x5\x13E\xA0\x2"+
		"\x230\x231\a\x12C\x2\x2\x231\x233\x5\x13E\xA0\x2\x232\x230\x3\x2\x2\x2"+
		"\x232\x233\x3\x2\x2\x2\x233\x241\x3\x2\x2\x2\x234\x242\a\x13B\x2\x2\x235"+
		"\x236\a\x12C\x2\x2\x236\x238\x5\x13E\xA0\x2\x237\x239\a\x12A\x2\x2\x238"+
		"\x237\x3\x2\x2\x2\x238\x239\x3\x2\x2\x2\x239\x23B\x3\x2\x2\x2\x23A\x23C"+
		"\a\x138\x2\x2\x23B\x23A\x3\x2\x2\x2\x23B\x23C\x3\x2\x2\x2\x23C\x23F\x3"+
		"\x2\x2\x2\x23D\x23E\a\xF6\x2\x2\x23E\x240\a\x138\x2\x2\x23F\x23D\x3\x2"+
		"\x2\x2\x23F\x240\x3\x2\x2\x2\x240\x242\x3\x2\x2\x2\x241\x234\x3\x2\x2"+
		"\x2\x241\x235\x3\x2\x2\x2\x242\x244\x3\x2\x2\x2\x243\x245\t\a\x2\x2\x244"+
		"\x243\x3\x2\x2\x2\x244\x245\x3\x2\x2\x2\x245\x246\x3\x2\x2\x2\x246\x247"+
		"\a\x167\x2\x2\x247\x1B\x3\x2\x2\x2\x248\x249\t\x6\x2\x2\x249\x1D\x3\x2"+
		"\x2\x2\x24A\x24C\x5\x8CG\x2\x24B\x24A\x3\x2\x2\x2\x24B\x24C\x3\x2\x2\x2"+
		"\x24C\x24E\x3\x2\x2\x2\x24D\x24F\x5,\x17\x2\x24E\x24D\x3\x2\x2\x2\x24E"+
		"\x24F\x3\x2\x2\x2\x24F\x250\x3\x2\x2\x2\x250\x252\a\x10\x2\x2\x251\x253"+
		"\x5\xFE\x80\x2\x252\x251\x3\x2\x2\x2\x252\x253\x3\x2\x2\x2\x253\x254\x3"+
		"\x2\x2\x2\x254\x255\x5\x13C\x9F\x2\x255\x256\a-\x2\x2\x256\x259\x5\x13C"+
		"\x9F\x2\x257\x258\a\x12C\x2\x2\x258\x25A\x5\x13E\xA0\x2\x259\x257\x3\x2"+
		"\x2\x2\x259\x25A\x3\x2\x2\x2\x25A\x25D\x3\x2\x2\x2\x25B\x25C\a\x6\x2\x2"+
		"\x25C\x25E\x5\x13C\x9F\x2\x25D\x25B\x3\x2\x2\x2\x25D\x25E\x3\x2\x2\x2"+
		"\x25E\x267\x3\x2\x2\x2\x25F\x264\x5 \x11\x2\x260\x261\a\x127\x2\x2\x261"+
		"\x263\x5 \x11\x2\x262\x260\x3\x2\x2\x2\x263\x266\x3\x2\x2\x2\x264\x262"+
		"\x3\x2\x2\x2\x264\x265\x3\x2\x2\x2\x265\x268\x3\x2\x2\x2\x266\x264\x3"+
		"\x2\x2\x2\x267\x25F\x3\x2\x2\x2\x267\x268\x3\x2\x2\x2\x268\x269\x3\x2"+
		"\x2\x2\x269\x26A\a\x167\x2\x2\x26A\x1F\x3\x2\x2\x2\x26B\x26D\x5\x8CG\x2"+
		"\x26C\x26B\x3\x2\x2\x2\x26C\x26D\x3\x2\x2\x2\x26D\x26E\x3\x2\x2\x2\x26E"+
		"\x270\x5\xFE\x80\x2\x26F\x271\a\x12A\x2\x2\x270\x26F\x3\x2\x2\x2\x270"+
		"\x271\x3\x2\x2\x2\x271\x273\x3\x2\x2\x2\x272\x274\x5\x13C\x9F\x2\x273"+
		"\x272\x3\x2\x2\x2\x273\x274\x3\x2\x2\x2\x274!\x3\x2\x2\x2\x275\x276\a"+
		"\x13\x2\x2\x276\x278\t\b\x2\x2\x277\x279\n\t\x2\x2\x278\x277\x3\x2\x2"+
		"\x2\x278\x279\x3\x2\x2\x2\x279\x27A\x3\x2\x2\x2\x27A\x27B\a\x167\x2\x2"+
		"\x27B#\x3\x2\x2\x2\x27C\x285\a\x120\x2\x2\x27D\x282\x5&\x14\x2\x27E\x27F"+
		"\a\x127\x2\x2\x27F\x281\x5&\x14\x2\x280\x27E\x3\x2\x2\x2\x281\x284\x3"+
		"\x2\x2\x2\x282\x280\x3\x2\x2\x2\x282\x283\x3\x2\x2\x2\x283\x286\x3\x2"+
		"\x2\x2\x284\x282\x3\x2\x2\x2\x285\x27D\x3\x2\x2\x2\x285\x286\x3\x2\x2"+
		"\x2\x286\x287\x3\x2\x2\x2\x287\x288\a\x121\x2\x2\x288%\x3\x2\x2\x2\x289"+
		"\x28B\x5\x8CG\x2\x28A\x289\x3\x2\x2\x2\x28A\x28B\x3\x2\x2\x2\x28B\x28D"+
		"\x3\x2\x2\x2\x28C\x28E\a>\x2\x2\x28D\x28C\x3\x2\x2\x2\x28D\x28E\x3\x2"+
		"\x2\x2\x28E\x28F\x3\x2\x2\x2\x28F\x293\x5\x13C\x9F\x2\x290\x291\x5\xCC"+
		"g\x2\x291\x292\x5\xCEh\x2\x292\x294\x3\x2\x2\x2\x293\x290\x3\x2\x2\x2"+
		"\x293\x294\x3\x2\x2\x2\x294\x298\x3\x2\x2\x2\x295\x296\x5(\x15\x2\x296"+
		"\x297\x5\xFE\x80\x2\x297\x299\x3\x2\x2\x2\x298\x295\x3\x2\x2\x2\x298\x299"+
		"\x3\x2\x2\x2\x299\x29C\x3\x2\x2\x2\x29A\x29C\a\x12F\x2\x2\x29B\x28A\x3"+
		"\x2\x2\x2\x29B\x29A\x3\x2\x2\x2\x29C\'\x3\x2\x2\x2\x29D\x29F\t\n\x2\x2"+
		"\x29E\x2A0\aU\x2\x2\x29F\x29E\x3\x2\x2\x2\x29F\x2A0\x3\x2\x2\x2\x2A0)"+
		"\x3\x2\x2\x2\x2A1\x2A3\x5\x9CO\x2\x2A2\x2A1\x3\x2\x2\x2\x2A3\x2A6\x3\x2"+
		"\x2\x2\x2A4\x2A2\x3\x2\x2\x2\x2A4\x2A5\x3\x2\x2\x2\x2A5+\x3\x2\x2\x2\x2A6"+
		"\x2A4\x3\x2\x2\x2\x2A7\x2A9\t\v\x2\x2\x2A8\x2A7\x3\x2\x2\x2\x2A9\x2AA"+
		"\x3\x2\x2\x2\x2AA\x2A8\x3\x2\x2\x2\x2AA\x2AB\x3\x2\x2\x2\x2AB-\x3\x2\x2"+
		"\x2\x2AC\x2AE\aJ\x2\x2\x2AD\x2AF\a\x41\x2\x2\x2AE\x2AD\x3\x2\x2\x2\x2AE"+
		"\x2AF\x3\x2\x2\x2\x2AF\x2B3\x3\x2\x2\x2\x2B0\x2B1\x5\xF8}\x2\x2B1\x2B2"+
		"\x5\xCCg\x2\x2B2\x2B4\x3\x2\x2\x2\x2B3\x2B0\x3\x2\x2\x2\x2B3\x2B4\x3\x2"+
		"\x2\x2\x2B4\x2B5\x3\x2\x2\x2\x2B5\x2B6\x5\xF0y\x2\x2B6\x2B7\a\x167\x2"+
		"\x2\x2B7/\x3\x2\x2\x2\x2B8\x2BA\x5\x8CG\x2\x2B9\x2B8\x3\x2\x2\x2\x2B9"+
		"\x2BA\x3\x2\x2\x2\x2BA\x2BC\x3\x2\x2\x2\x2BB\x2BD\x5,\x17\x2\x2BC\x2BB"+
		"\x3\x2\x2\x2\x2BC\x2BD\x3\x2\x2\x2\x2BD\x2BE\x3\x2\x2\x2\x2BE\x2C0\a#"+
		"\x2\x2\x2BF\x2C1\aU\x2\x2\x2C0\x2BF\x3\x2\x2\x2\x2C0\x2C1\x3\x2\x2\x2"+
		"\x2C1\x2C2\x3\x2\x2\x2\x2C2\x2C7\x5\x62\x32\x2\x2C3\x2C4\a\x127\x2\x2"+
		"\x2C4\x2C6\x5\x62\x32\x2\x2C5\x2C3\x3\x2\x2\x2\x2C6\x2C9\x3\x2\x2\x2\x2C7"+
		"\x2C5\x3\x2\x2\x2\x2C7\x2C8\x3\x2\x2\x2\x2C8\x2CA\x3\x2\x2\x2\x2C9\x2C7"+
		"\x3\x2\x2\x2\x2CA\x2CB\a\x167\x2\x2\x2CB\x2DE\x3\x2\x2\x2\x2CC\x2CE\x5"+
		"\x8CG\x2\x2CD\x2CC\x3\x2\x2\x2\x2CD\x2CE\x3\x2\x2\x2\x2CE\x2CF\x3\x2\x2"+
		"\x2\x2CF\x2D1\a\x41\x2\x2\x2D0\x2D2\aU\x2\x2\x2D1\x2D0\x3\x2\x2\x2\x2D1"+
		"\x2D2\x3\x2\x2\x2\x2D2\x2D3\x3\x2\x2\x2\x2D3\x2D8\x5\x62\x32\x2\x2D4\x2D5"+
		"\a\x127\x2\x2\x2D5\x2D7\x5\x62\x32\x2\x2D6\x2D4\x3\x2\x2\x2\x2D7\x2DA"+
		"\x3\x2\x2\x2\x2D8\x2D6\x3\x2\x2\x2\x2D8\x2D9\x3\x2\x2\x2\x2D9\x2DB\x3"+
		"\x2\x2\x2\x2DA\x2D8\x3\x2\x2\x2\x2DB\x2DC\a\x167\x2\x2\x2DC\x2DE\x3\x2"+
		"\x2\x2\x2DD\x2B9\x3\x2\x2\x2\x2DD\x2CD\x3\x2\x2\x2\x2DE\x31\x3\x2\x2\x2"+
		"\x2DF\x2E1\x5\x8CG\x2\x2E0\x2DF\x3\x2\x2\x2\x2E0\x2E1\x3\x2\x2\x2\x2E1"+
		"\x2E3\x3\x2\x2\x2\x2E2\x2E4\x5\x8A\x46\x2\x2E3\x2E2\x3\x2\x2\x2\x2E3\x2E4"+
		"\x3\x2\x2\x2\x2E4\x2E5\x3\x2\x2\x2\x2E5\x2E7\x5\x34\x1B\x2\x2E6\x2E8\x5"+
		"\xEEx\x2\x2E7\x2E6\x3\x2\x2\x2\x2E7\x2E8\x3\x2\x2\x2\x2E8\x2E9\x3\x2\x2"+
		"\x2\x2E9\x2EC\x5\x14\v\x2\x2EA\x2EB\a\xE\x2\x2\x2EB\x2ED\x5\x13C\x9F\x2"+
		"\x2EC\x2EA\x3\x2\x2\x2\x2EC\x2ED\x3\x2\x2\x2\x2ED\x2EE\x3\x2\x2\x2\x2EE"+
		"\x2EF\x5\x16\f\x2\x2EF\x2F0\x5\xE\b\x2\x2F0\x2F5\x5*\x16\x2\x2F1\x2F2"+
		"\a\x19\x2\x2\x2F2\x2F3\x5\x34\x1B\x2\x2F3\x2F4\a\x167\x2\x2\x2F4\x2F6"+
		"\x3\x2\x2\x2\x2F5\x2F1\x3\x2\x2\x2\x2F5\x2F6\x3\x2\x2\x2\x2F6\x33\x3\x2"+
		"\x2\x2\x2F7\x2F8\t\f\x2\x2\x2F8\x35\x3\x2\x2\x2\x2F9\x2FB\x5,\x17\x2\x2FA"+
		"\x2F9\x3\x2\x2\x2\x2FA\x2FB\x3\x2\x2\x2\x2FB\x2FC\x3\x2\x2\x2\x2FC\x2FD"+
		"\a\x11\x2\x2\x2FD\x2FE\x5\x13C\x9F\x2\x2FE\x2FF\x5\xCCg\x2\x2FF\x302\x5"+
		"\xCEh\x2\x300\x301\a\x6\x2\x2\x301\x303\x5\xFE\x80\x2\x302\x300\x3\x2"+
		"\x2\x2\x302\x303\x3\x2\x2\x2\x303\x304\x3\x2\x2\x2\x304\x305\a\x167\x2"+
		"\x2\x305\x37\x3\x2\x2\x2\x306\x308\x5> \x2\x307\x306\x3\x2\x2\x2\x307"+
		"\x308\x3\x2\x2\x2\x308\x309\x3\x2\x2\x2\x309\x30B\au\x2\x2\x30A\x30C\x5"+
		"\xEEx\x2\x30B\x30A\x3\x2\x2\x2\x30B\x30C\x3\x2\x2\x2\x30C\x30D\x3\x2\x2"+
		"\x2\x30D\x310\x5\x13C\x9F\x2\x30E\x30F\a\x5\x2\x2\x30F\x311\a\x138\x2"+
		"\x2\x310\x30E\x3\x2\x2\x2\x310\x311\x3\x2\x2\x2\x311\x312\x3\x2\x2\x2"+
		"\x312\x314\x5\xE\b\x2\x313\x315\x5:\x1E\x2\x314\x313\x3\x2\x2\x2\x315"+
		"\x316\x3\x2\x2\x2\x316\x314\x3\x2\x2\x2\x316\x317\x3\x2\x2\x2\x317\x31B"+
		"\x3\x2\x2\x2\x318\x319\a\x19\x2\x2\x319\x31A\au\x2\x2\x31A\x31C\a\x167"+
		"\x2\x2\x31B\x318\x3\x2\x2\x2\x31B\x31C\x3\x2\x2\x2\x31C\x39\x3\x2\x2\x2"+
		"\x31D\x31E\a\x30\x2\x2\x31E\x31F\a\x12\x2\x2\x31F\x320\x5\x13C\x9F\x2"+
		"\x320\x321\a\x124\x2\x2\x321\x322\x5\x64\x33\x2\x322\x325\a\x125\x2\x2"+
		"\x323\x324\t\r\x2\x2\x324\x326\x5\xFE\x80\x2\x325\x323\x3\x2\x2\x2\x325"+
		"\x326\x3\x2\x2\x2\x326\x327\x3\x2\x2\x2\x327\x328\x5\xE\b\x2\x328\x332"+
		"\x3\x2\x2\x2\x329\x32A\a\x30\x2\x2\x32A\x32D\x5\x13C\x9F\x2\x32B\x32C"+
		"\t\r\x2\x2\x32C\x32E\x5\xFE\x80\x2\x32D\x32B\x3\x2\x2\x2\x32D\x32E\x3"+
		"\x2\x2\x2\x32E\x32F\x3\x2\x2\x2\x32F\x330\x5\xE\b\x2\x330\x332\x3\x2\x2"+
		"\x2\x331\x31D\x3\x2\x2\x2\x331\x329\x3\x2\x2\x2\x332;\x3\x2\x2\x2\x333"+
		"\x335\x5> \x2\x334\x333\x3\x2\x2\x2\x334\x335\x3\x2\x2\x2\x335\x336\x3"+
		"\x2\x2\x2\x336\x338\aH\x2\x2\x337\x339\x5\xEEx\x2\x338\x337\x3\x2\x2\x2"+
		"\x338\x339\x3\x2\x2\x2\x339\x33A\x3\x2\x2\x2\x33A\x33B\x5\x13C\x9F\x2"+
		"\x33B\x33D\x5\xE\b\x2\x33C\x33E\x5:\x1E\x2\x33D\x33C\x3\x2\x2\x2\x33E"+
		"\x33F\x3\x2\x2\x2\x33F\x33D\x3\x2\x2\x2\x33F\x340\x3\x2\x2\x2\x340\x344"+
		"\x3\x2\x2\x2\x341\x342\a\x19\x2\x2\x342\x343\aH\x2\x2\x343\x345\a\x167"+
		"\x2\x2\x344\x341\x3\x2\x2\x2\x344\x345\x3\x2\x2\x2\x345=\x3\x2\x2\x2\x346"+
		"\x348\t\xE\x2\x2\x347\x346\x3\x2\x2\x2\x348\x349\x3\x2\x2\x2\x349\x347"+
		"\x3\x2\x2\x2\x349\x34A\x3\x2\x2\x2\x34A?\x3\x2\x2\x2\x34B\x34C\a\t\x2"+
		"\x2\x34C\x34D\a\x65\x2\x2\x34D\x34E\x5\xF0y\x2\x34E\x352\x5\xE\b\x2\x34F"+
		"\x351\x5\f\a\x2\x350\x34F\x3\x2\x2\x2\x351\x354\x3\x2\x2\x2\x352\x350"+
		"\x3\x2\x2\x2\x352\x353\x3\x2\x2\x2\x353\x358\x3\x2\x2\x2\x354\x352\x3"+
		"\x2\x2\x2\x355\x356\a\x19\x2\x2\x356\x357\a\x65\x2\x2\x357\x359\a\x167"+
		"\x2\x2\x358\x355\x3\x2\x2\x2\x358\x359\x3\x2\x2\x2\x359\x41\x3\x2\x2\x2"+
		"\x35A\x35C\x5\x8CG\x2\x35B\x35A\x3\x2\x2\x2\x35B\x35C\x3\x2\x2\x2\x35C"+
		"\x35E\x3\x2\x2\x2\x35D\x35F\x5\x46$\x2\x35E\x35D\x3\x2\x2\x2\x35E\x35F"+
		"\x3\x2\x2\x2\x35F\x360\x3\x2\x2\x2\x360\x362\a\x62\x2\x2\x361\x363\x5"+
		"\xEEx\x2\x362\x361\x3\x2\x2\x2\x362\x363\x3\x2\x2\x2\x363\x364\x3\x2\x2"+
		"\x2\x364\x366\x5\x13C\x9F\x2\x365\x367\x5H%\x2\x366\x365\x3\x2\x2\x2\x366"+
		"\x367\x3\x2\x2\x2\x367\x36A\x3\x2\x2\x2\x368\x369\t\xF\x2\x2\x369\x36B"+
		"\x5\xFE\x80\x2\x36A\x368\x3\x2\x2\x2\x36A\x36B\x3\x2\x2\x2\x36B\x370\x3"+
		"\x2\x2\x2\x36C\x36D\a\x127\x2\x2\x36D\x36F\x5\xFE\x80\x2\x36E\x36C\x3"+
		"\x2\x2\x2\x36F\x372\x3\x2\x2\x2\x370\x36E\x3\x2\x2\x2\x370\x371\x3\x2"+
		"\x2\x2\x371\x376\x3\x2\x2\x2\x372\x370\x3\x2\x2\x2\x373\x375\x5L\'\x2"+
		"\x374\x373\x3\x2\x2\x2\x375\x378\x3\x2\x2\x2\x376\x374\x3\x2\x2\x2\x376"+
		"\x377\x3\x2\x2\x2\x377\x379\x3\x2\x2\x2\x378\x376\x3\x2\x2\x2\x379\x37D"+
		"\x5\xE\b\x2\x37A\x37C\x5t;\x2\x37B\x37A\x3\x2\x2\x2\x37C\x37F\x3\x2\x2"+
		"\x2\x37D\x37B\x3\x2\x2\x2\x37D\x37E\x3\x2\x2\x2\x37E\x380\x3\x2\x2\x2"+
		"\x37F\x37D\x3\x2\x2\x2\x380\x381\a\x19\x2\x2\x381\x382\a\x62\x2\x2\x382"+
		"\x383\a\x167\x2\x2\x383\x43\x3\x2\x2\x2\x384\x386\x5\x8CG\x2\x385\x384"+
		"\x3\x2\x2\x2\x385\x386\x3\x2\x2\x2\x386\x388\x3\x2\x2\x2\x387\x389\x5"+
		"\x46$\x2\x388\x387\x3\x2\x2\x2\x388\x389\x3\x2\x2\x2\x389\x38A\x3\x2\x2"+
		"\x2\x38A\x38C\a\xE\x2\x2\x38B\x38D\x5\xEEx\x2\x38C\x38B\x3\x2\x2\x2\x38C"+
		"\x38D\x3\x2\x2\x2\x38D\x38E\x3\x2\x2\x2\x38E\x390\x5\x13C\x9F\x2\x38F"+
		"\x391\x5H%\x2\x390\x38F\x3\x2\x2\x2\x390\x391\x3\x2\x2\x2\x391\x394\x3"+
		"\x2\x2\x2\x392\x393\a\'\x2\x2\x393\x395\x5\xFE\x80\x2\x394\x392\x3\x2"+
		"\x2\x2\x394\x395\x3\x2\x2\x2\x395\x39F\x3\x2\x2\x2\x396\x397\a^\x2\x2"+
		"\x397\x39C\x5\xFE\x80\x2\x398\x399\a\x127\x2\x2\x399\x39B\x5\xFE\x80\x2"+
		"\x39A\x398\x3\x2\x2\x2\x39B\x39E\x3\x2\x2\x2\x39C\x39A\x3\x2\x2\x2\x39C"+
		"\x39D\x3\x2\x2\x2\x39D\x3A0\x3\x2\x2\x2\x39E\x39C\x3\x2\x2\x2\x39F\x396"+
		"\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A4\x3\x2\x2\x2\x3A1\x3A3\x5"+
		"L\'\x2\x3A2\x3A1\x3\x2\x2\x2\x3A3\x3A6\x3\x2\x2\x2\x3A4\x3A2\x3\x2\x2"+
		"\x2\x3A4\x3A5\x3\x2\x2\x2\x3A5\x3A7\x3\x2\x2\x2\x3A6\x3A4\x3\x2\x2\x2"+
		"\x3A7\x3AB\x5\xE\b\x2\x3A8\x3AA\x5t;\x2\x3A9\x3A8\x3\x2\x2\x2\x3AA\x3AD"+
		"\x3\x2\x2\x2\x3AB\x3A9\x3\x2\x2\x2\x3AB\x3AC\x3\x2\x2\x2\x3AC\x3AE\x3"+
		"\x2\x2\x2\x3AD\x3AB\x3\x2\x2\x2\x3AE\x3AF\a\x19\x2\x2\x3AF\x3B0\a\xE\x2"+
		"\x2\x3B0\x3B1\a\x167\x2\x2\x3B1\x45\x3\x2\x2\x2\x3B2\x3B4\t\x10\x2\x2"+
		"\x3B3\x3B2\x3\x2\x2\x2\x3B4\x3B5\x3\x2\x2\x2\x3B5\x3B3\x3\x2\x2\x2\x3B5"+
		"\x3B6\x3\x2\x2\x2\x3B6G\x3\x2\x2\x2\x3B7\x3B8\a\xEE\x2\x2\x3B8\x3C0\x5"+
		"J&\x2\x3B9\x3BB\a\x127\x2\x2\x3BA\x3BC\x5\x8CG\x2\x3BB\x3BA\x3\x2\x2\x2"+
		"\x3BB\x3BC\x3\x2\x2\x2\x3BC\x3BD\x3\x2\x2\x2\x3BD\x3BF\x5J&\x2\x3BE\x3B9"+
		"\x3\x2\x2\x2\x3BF\x3C2\x3\x2\x2\x2\x3C0\x3BE\x3\x2\x2\x2\x3C0\x3C1\x3"+
		"\x2\x2\x2\x3C1\x3C3\x3\x2\x2\x2\x3C2\x3C0\x3\x2\x2\x2\x3C3\x3C4\a\xF0"+
		"\x2\x2\x3C4I\x3\x2\x2\x2\x3C5\x3C7\x5\x8CG\x2\x3C6\x3C5\x3\x2\x2\x2\x3C6"+
		"\x3C7\x3\x2\x2\x2\x3C7\x3C9\x3\x2\x2\x2\x3C8\x3CA\t\x11\x2\x2\x3C9\x3C8"+
		"\x3\x2\x2\x2\x3C9\x3CA\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3CC\x5"+
		"\x13C\x9F\x2\x3CCK\x3\x2\x2\x2\x3CD\x3CE\a\x97\x2\x2\x3CE\x3CF\x5\xF8"+
		"}\x2\x3CF\x3D0\a,\x2\x2\x3D0\x3D5\x5N(\x2\x3D1\x3D2\a\x127\x2\x2\x3D2"+
		"\x3D4\x5N(\x2\x3D3\x3D1\x3\x2\x2\x2\x3D4\x3D7\x3\x2\x2\x2\x3D5\x3D3\x3"+
		"\x2\x2\x2\x3D5\x3D6\x3\x2\x2\x2\x3D6M\x3\x2\x2\x2\x3D7\x3D5\x3\x2\x2\x2"+
		"\x3D8\x3DE\t\x12\x2\x2\x3D9\x3DE\x5\x102\x82\x2\x3DA\x3DB\a\x66\x2\x2"+
		"\x3DB\x3DC\a\x120\x2\x2\x3DC\x3DE\a\x121\x2\x2\x3DD\x3D8\x3\x2\x2\x2\x3DD"+
		"\x3D9\x3\x2\x2\x2\x3DD\x3DA\x3\x2\x2\x2\x3DEO\x3\x2\x2\x2\x3DF\x3E1\x5"+
		"\x8CG\x2\x3E0\x3DF\x3\x2\x2\x2\x3E0\x3E1\x3\x2\x2\x2\x3E1\x3E3\x3\x2\x2"+
		"\x2\x3E2\x3E4\x5\x46$\x2\x3E3\x3E2\x3\x2\x2\x2\x3E3\x3E4\x3\x2\x2\x2\x3E4"+
		"\x3E5\x3\x2\x2\x2\x3E5\x3E7\ao\x2\x2\x3E6\x3E8\x5\xEEx\x2\x3E7\x3E6\x3"+
		"\x2\x2\x2\x3E7\x3E8\x3\x2\x2\x2\x3E8\x3E9\x3\x2\x2\x2\x3E9\x3EB\x5\x13C"+
		"\x9F\x2\x3EA\x3EC\x5H%\x2\x3EB\x3EA\x3\x2\x2\x2\x3EB\x3EC\x3\x2\x2\x2"+
		"\x3EC\x3F6\x3\x2\x2\x2\x3ED\x3EE\a^\x2\x2\x3EE\x3F3\x5\xFE\x80\x2\x3EF"+
		"\x3F0\a\x127\x2\x2\x3F0\x3F2\x5\xFE\x80\x2\x3F1\x3EF\x3\x2\x2\x2\x3F2"+
		"\x3F5\x3\x2\x2\x2\x3F3\x3F1\x3\x2\x2\x2\x3F3\x3F4\x3\x2\x2\x2\x3F4\x3F7"+
		"\x3\x2\x2\x2\x3F5\x3F3\x3\x2\x2\x2\x3F6\x3ED\x3\x2\x2\x2\x3F6\x3F7\x3"+
		"\x2\x2\x2\x3F7\x3FB\x3\x2\x2\x2\x3F8\x3FA\x5L\'\x2\x3F9\x3F8\x3\x2\x2"+
		"\x2\x3FA\x3FD\x3\x2\x2\x2\x3FB\x3F9\x3\x2\x2\x2\x3FB\x3FC\x3\x2\x2\x2"+
		"\x3FC\x3FE\x3\x2\x2\x2\x3FD\x3FB\x3\x2\x2\x2\x3FE\x402\x5\xE\b\x2\x3FF"+
		"\x401\x5t;\x2\x400\x3FF\x3\x2\x2\x2\x401\x404\x3\x2\x2\x2\x402\x400\x3"+
		"\x2\x2\x2\x402\x403\x3\x2\x2\x2\x403\x405\x3\x2\x2\x2\x404\x402\x3\x2"+
		"\x2\x2\x405\x406\a\x19\x2\x2\x406\x407\ao\x2\x2\x407\x408\a\x167\x2\x2"+
		"\x408Q\x3\x2\x2\x2\x409\x40B\x5\x8CG\x2\x40A\x409\x3\x2\x2\x2\x40A\x40B"+
		"\x3\x2\x2\x2\x40B\x40D\x3\x2\x2\x2\x40C\x40E\x5\x46$\x2\x40D\x40C\x3\x2"+
		"\x2\x2\x40D\x40E\x3\x2\x2\x2\x40E\x40F\x3\x2\x2\x2\x40F\x411\aW\x2\x2"+
		"\x410\x412\x5\xEEx\x2\x411\x410\x3\x2\x2\x2\x411\x412\x3\x2\x2\x2\x412"+
		"\x413\x3\x2\x2\x2\x413\x415\x5\x13C\x9F\x2\x414\x416\x5H%\x2\x415\x414"+
		"\x3\x2\x2\x2\x415\x416\x3\x2\x2\x2\x416\x418\x3\x2\x2\x2\x417\x419\x5"+
		"$\x13\x2\x418\x417\x3\x2\x2\x2\x418\x419\x3\x2\x2\x2\x419\x41C\x3\x2\x2"+
		"\x2\x41A\x41B\a\x6\x2\x2\x41B\x41D\x5\xFE\x80\x2\x41C\x41A\x3\x2\x2\x2"+
		"\x41C\x41D\x3\x2\x2\x2\x41D\x421\x3\x2\x2\x2\x41E\x420\x5L\'\x2\x41F\x41E"+
		"\x3\x2\x2\x2\x420\x423\x3\x2\x2\x2\x421\x41F\x3\x2\x2\x2\x421\x422\x3"+
		"\x2\x2\x2\x422\x425\x3\x2\x2\x2\x423\x421\x3\x2\x2\x2\x424\x426\x5\x18"+
		"\r\x2\x425\x424\x3\x2\x2\x2\x425\x426\x3\x2\x2\x2\x426\x427\x3\x2\x2\x2"+
		"\x427\x428\a\x167\x2\x2\x428S\x3\x2\x2\x2\x429\x42B\x5\x8CG\x2\x42A\x429"+
		"\x3\x2\x2\x2\x42A\x42B\x3\x2\x2\x2\x42B\x42D\x3\x2\x2\x2\x42C\x42E\x5"+
		"\x46$\x2\x42D\x42C\x3\x2\x2\x2\x42D\x42E\x3\x2\x2\x2\x42E\x42F\x3\x2\x2"+
		"\x2\x42F\x431\aY\x2\x2\x430\x432\x5\xEEx\x2\x431\x430\x3\x2\x2\x2\x431"+
		"\x432\x3\x2\x2\x2\x432\x433\x3\x2\x2\x2\x433\x436\x5\x13C\x9F\x2\x434"+
		"\x435\t\x13\x2\x2\x435\x437\x5\xFE\x80\x2\x436\x434\x3\x2\x2\x2\x436\x437"+
		"\x3\x2\x2\x2\x437\x438\x3\x2\x2\x2\x438\x43A\x5\xE\b\x2\x439\x43B\x5V"+
		",\x2\x43A\x439\x3\x2\x2\x2\x43B\x43C\x3\x2\x2\x2\x43C\x43A\x3\x2\x2\x2"+
		"\x43C\x43D\x3\x2\x2\x2\x43D\x43E\x3\x2\x2\x2\x43E\x440\a\x19\x2\x2\x43F"+
		"\x441\aY\x2\x2\x440\x43F\x3\x2\x2\x2\x440\x441\x3\x2\x2\x2\x441\x442\x3"+
		"\x2\x2\x2\x442\x443\a\x167\x2\x2\x443U\x3\x2\x2\x2\x444\x446\x5\x8CG\x2"+
		"\x445\x444\x3\x2\x2\x2\x445\x446\x3\x2\x2\x2\x446\x448\x3\x2\x2\x2\x447"+
		"\x449\a\x30\x2\x2\x448\x447\x3\x2\x2\x2\x448\x449\x3\x2\x2\x2\x449\x44A"+
		"\x3\x2\x2\x2\x44A\x44E\x5\x13C\x9F\x2\x44B\x44C\x5\xCCg\x2\x44C\x44D\x5"+
		"\xCEh\x2\x44D\x44F\x3\x2\x2\x2\x44E\x44B\x3\x2\x2\x2\x44E\x44F\x3\x2\x2"+
		"\x2\x44F\x450\x3\x2\x2\x2\x450\x451\x5\xE\b\x2\x451W\x3\x2\x2\x2\x452"+
		"\x454\x5\x8CG\x2\x453\x452\x3\x2\x2\x2\x453\x454\x3\x2\x2\x2\x454\x456"+
		"\x3\x2\x2\x2\x455\x457\x5\x8A\x46\x2\x456\x455\x3\x2\x2\x2\x456\x457\x3"+
		"\x2\x2\x2\x457\x458\x3\x2\x2\x2\x458\x45A\aZ\x2\x2\x459\x45B\x5\xEEx\x2"+
		"\x45A\x459\x3\x2\x2\x2\x45A\x45B\x3\x2\x2\x2\x45B\x45C\x3\x2\x2\x2\x45C"+
		"\x45F\x5\x13C\x9F\x2\x45D\x45E\a\x6\x2\x2\x45E\x460\x5\xFE\x80\x2\x45F"+
		"\x45D\x3\x2\x2\x2\x45F\x460\x3\x2\x2\x2\x460\x475\x3\x2\x2\x2\x461\x476"+
		"\a\x167\x2\x2\x462\x464\x5Z.\x2\x463\x462\x3\x2\x2\x2\x464\x465\x3\x2"+
		"\x2\x2\x465\x463\x3\x2\x2\x2\x465\x466\x3\x2\x2\x2\x466\x467\x3\x2\x2"+
		"\x2\x467\x468\a\x167\x2\x2\x468\x476\x3\x2\x2\x2\x469\x46B\x5\xE\b\x2"+
		"\x46A\x46C\x5\\/\x2\x46B\x46A\x3\x2\x2\x2\x46C\x46D\x3\x2\x2\x2\x46D\x46B"+
		"\x3\x2\x2\x2\x46D\x46E\x3\x2\x2\x2\x46E\x46F\x3\x2\x2\x2\x46F\x471\a\x19"+
		"\x2\x2\x470\x472\aZ\x2\x2\x471\x470\x3\x2\x2\x2\x471\x472\x3\x2\x2\x2"+
		"\x472\x473\x3\x2\x2\x2\x473\x474\a\x167\x2\x2\x474\x476\x3\x2\x2\x2\x475"+
		"\x461\x3\x2\x2\x2\x475\x463\x3\x2\x2\x2\x475\x469\x3\x2\x2\x2\x476Y\x3"+
		"\x2\x2\x2\x477\x479\x5\x8CG\x2\x478\x477\x3\x2\x2\x2\x478\x479\x3\x2\x2"+
		"\x2\x479\x47B\x3\x2\x2\x2\x47A\x47C\x5n\x38\x2\x47B\x47A\x3\x2\x2\x2\x47B"+
		"\x47C\x3\x2\x2\x2\x47C\x488\x3\x2\x2\x2\x47D\x47E\x6.\t\x2\x47E\x480\a"+
		"v\x2\x2\x47F\x481\x5p\x39\x2\x480\x47F\x3\x2\x2\x2\x480\x481\x3\x2\x2"+
		"\x2\x481\x489\x3\x2\x2\x2\x482\x483\x6.\n\x2\x483\x485\a\x8E\x2\x2\x484"+
		"\x486\x5p\x39\x2\x485\x484\x3\x2\x2\x2\x485\x486\x3\x2\x2\x2\x486\x489"+
		"\x3\x2\x2\x2\x487\x489\t\x14\x2\x2\x488\x47D\x3\x2\x2\x2\x488\x482\x3"+
		"\x2\x2\x2\x488\x487\x3\x2\x2\x2\x489[\x3\x2\x2\x2\x48A\x48C\x5\x8CG\x2"+
		"\x48B\x48A\x3\x2\x2\x2\x48B\x48C\x3\x2\x2\x2\x48C\x48E\x3\x2\x2\x2\x48D"+
		"\x48F\x5n\x38\x2\x48E\x48D\x3\x2\x2\x2\x48E\x48F\x3\x2\x2\x2\x48F\x4A4"+
		"\x3\x2\x2\x2\x490\x491\av\x2\x2\x491\x492\x5\xE\b\x2\x492\x493\x5*\x16"+
		"\x2\x493\x495\a\x19\x2\x2\x494\x496\av\x2\x2\x495\x494\x3\x2\x2\x2\x495"+
		"\x496\x3\x2\x2\x2\x496\x4A5\x3\x2\x2\x2\x497\x498\av\x2\x2\x498\x499\a"+
		"\x15D\x2\x2\x499\x4A5\x5\xCEh\x2\x49A\x49B\a\x8E\x2\x2\x49B\x49C\x5\xE"+
		"\b\x2\x49C\x49D\x5*\x16\x2\x49D\x49F\a\x19\x2\x2\x49E\x4A0\a\x8E\x2\x2"+
		"\x49F\x49E\x3\x2\x2\x2\x49F\x4A0\x3\x2\x2\x2\x4A0\x4A5\x3\x2\x2\x2\x4A1"+
		"\x4A2\a\x8E\x2\x2\x4A2\x4A3\a\x15D\x2\x2\x4A3\x4A5\x5\xCEh\x2\x4A4\x490"+
		"\x3\x2\x2\x2\x4A4\x497\x3\x2\x2\x2\x4A4\x49A\x3\x2\x2\x2\x4A4\x4A1\x3"+
		"\x2\x2\x2\x4A5\x4A6\x3\x2\x2\x2\x4A6\x4A7\x5\xE\b\x2\x4A7]\x3\x2\x2\x2"+
		"\x4A8\x4AA\x5\x8CG\x2\x4A9\x4A8\x3\x2\x2\x2\x4A9\x4AA\x3\x2\x2\x2\x4AA"+
		"\x4AB\x3\x2\x2\x2\x4AB\x4AC\x5`\x31\x2\x4AC\x4B1\x5\x62\x32\x2\x4AD\x4AE"+
		"\a\x127\x2\x2\x4AE\x4B0\x5\x62\x32\x2\x4AF\x4AD\x3\x2\x2\x2\x4B0\x4B3"+
		"\x3\x2\x2\x2\x4B1\x4AF\x3\x2\x2\x2\x4B1\x4B2\x3\x2\x2\x2\x4B2\x4B4\x3"+
		"\x2\x2\x2\x4B3\x4B1\x3\x2\x2\x2\x4B4\x4B5\x5\xE\b\x2\x4B5_\x3\x2\x2\x2"+
		"\x4B6\x4B8\t\x15\x2\x2\x4B7\x4B6\x3\x2\x2\x2\x4B8\x4B9\x3\x2\x2\x2\x4B9"+
		"\x4B7\x3\x2\x2\x2\x4B9\x4BA\x3\x2\x2\x2\x4BA\x61\x3\x2\x2\x2\x4BB\x4BD"+
		"\a\x12\x2\x2\x4BC\x4BB\x3\x2\x2\x2\x4BC\x4BD\x3\x2\x2\x2\x4BD\x4BE\x3"+
		"\x2\x2\x2\x4BE\x4C3\x5\x13C\x9F\x2\x4BF\x4C0\a\x124\x2\x2\x4C0\x4C1\x5"+
		"\x64\x33\x2\x4C1\x4C2\a\x125\x2\x2\x4C2\x4C4\x3\x2\x2\x2\x4C3\x4BF\x3"+
		"\x2\x2\x2\x4C3\x4C4\x3\x2\x2\x2\x4C4\x4C8\x3\x2\x2\x2\x4C5\x4C6\x5\xCC"+
		"g\x2\x4C6\x4C7\x5\xCEh\x2\x4C7\x4C9\x3\x2\x2\x2\x4C8\x4C5\x3\x2\x2\x2"+
		"\x4C8\x4C9\x3\x2\x2\x2\x4C9\x4CC\x3\x2\x2\x2\x4CA\x4CB\t\r\x2\x2\x4CB"+
		"\x4CD\x5\xFE\x80\x2\x4CC\x4CA\x3\x2\x2\x2\x4CC\x4CD\x3\x2\x2\x2\x4CD\x63"+
		"\x3\x2\x2\x2\x4CE\x4D2\x5\xCEh\x2\x4CF\x4D0\a\x125\x2\x2\x4D0\x4D1\a\x124"+
		"\x2\x2\x4D1\x4D3\x5\xCEh\x2\x4D2\x4CF\x3\x2\x2\x2\x4D3\x4D4\x3\x2\x2\x2"+
		"\x4D4\x4D2\x3\x2\x2\x2\x4D4\x4D5\x3\x2\x2\x2\x4D5\x4DF\x3\x2\x2\x2\x4D6"+
		"\x4D9\x5\xCEh\x2\x4D7\x4D8\a\x127\x2\x2\x4D8\x4DA\x5\xCEh\x2\x4D9\x4D7"+
		"\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4D9\x3\x2\x2\x2\x4DB\x4DC\x3"+
		"\x2\x2\x2\x4DC\x4DF\x3\x2\x2\x2\x4DD\x4DF\x5\xCEh\x2\x4DE\x4CE\x3\x2\x2"+
		"\x2\x4DE\x4D6\x3\x2\x2\x2\x4DE\x4DD\x3\x2\x2\x2\x4DF\x65\x3\x2\x2\x2\x4E0"+
		"\x4E2\x5\x8CG\x2\x4E1\x4E0\x3\x2\x2\x2\x4E1\x4E2\x3\x2\x2\x2\x4E2\x4E4"+
		"\x3\x2\x2\x2\x4E3\x4E5\x5\x8A\x46\x2\x4E4\x4E3\x3\x2\x2\x2\x4E4\x4E5\x3"+
		"\x2\x2\x2\x4E5\x4E6\x3\x2\x2\x2\x4E6\x4E8\aj\x2\x2\x4E7\x4E9\x5\xEEx\x2"+
		"\x4E8\x4E7\x3\x2\x2\x2\x4E8\x4E9\x3\x2\x2\x2\x4E9\x4EC\x3\x2\x2\x2\x4EA"+
		"\x4ED\a>\x2\x2\x4EB\x4ED\x5\x13C\x9F\x2\x4EC\x4EA\x3\x2\x2\x2\x4EC\x4EB"+
		"\x3\x2\x2\x2\x4ED\x4EF\x3\x2\x2\x2\x4EE\x4F0\x5h\x35\x2\x4EF\x4EE\x3\x2"+
		"\x2\x2\x4EF\x4F0\x3\x2\x2\x2\x4F0\x4F3\x3\x2\x2\x2\x4F1\x4F2\a\x6\x2\x2"+
		"\x4F2\x4F4\x5\xFE\x80\x2\x4F3\x4F1\x3\x2\x2\x2\x4F3\x4F4\x3\x2\x2\x2\x4F4"+
		"\x515\x3\x2\x2\x2\x4F5\x4F9\aR\x2\x2\x4F6\x4F8\x5j\x36\x2\x4F7\x4F6\x3"+
		"\x2\x2\x2\x4F8\x4FB\x3\x2\x2\x2\x4F9\x4F7\x3\x2\x2\x2\x4F9\x4FA\x3\x2"+
		"\x2\x2\x4FA\x4FF\x3\x2\x2\x2\x4FB\x4F9\x3\x2\x2\x2\x4FC\x4FD\x5\xCCg\x2"+
		"\x4FD\x4FE\x5\xCEh\x2\x4FE\x500\x3\x2\x2\x2\x4FF\x4FC\x3\x2\x2\x2\x4FF"+
		"\x500\x3\x2\x2\x2\x500\x501\x3\x2\x2\x2\x501\x516\a\x167\x2\x2\x502\x504"+
		"\x5l\x37\x2\x503\x502\x3\x2\x2\x2\x504\x505\x3\x2\x2\x2\x505\x503\x3\x2"+
		"\x2\x2\x505\x506\x3\x2\x2\x2\x506\x507\x3\x2\x2\x2\x507\x508\a\x167\x2"+
		"\x2\x508\x516\x3\x2\x2\x2\x509\x50B\x5\xE\b\x2\x50A\x50C\x5r:\x2\x50B"+
		"\x50A\x3\x2\x2\x2\x50C\x50D\x3\x2\x2\x2\x50D\x50B\x3\x2\x2\x2\x50D\x50E"+
		"\x3\x2\x2\x2\x50E\x50F\x3\x2\x2\x2\x50F\x511\a\x19\x2\x2\x510\x512\aj"+
		"\x2\x2\x511\x510\x3\x2\x2\x2\x511\x512\x3\x2\x2\x2\x512\x513\x3\x2\x2"+
		"\x2\x513\x514\a\x167\x2\x2\x514\x516\x3\x2\x2\x2\x515\x4F5\x3\x2\x2\x2"+
		"\x515\x503\x3\x2\x2\x2\x515\x509\x3\x2\x2\x2\x516g\x3\x2\x2\x2\x517\x520"+
		"\a\x124\x2\x2\x518\x51D\x5&\x14\x2\x519\x51A\a\x127\x2\x2\x51A\x51C\x5"+
		"&\x14\x2\x51B\x519\x3\x2\x2\x2\x51C\x51F\x3\x2\x2\x2\x51D\x51B\x3\x2\x2"+
		"\x2\x51D\x51E\x3\x2\x2\x2\x51E\x521\x3\x2\x2\x2\x51F\x51D\x3\x2\x2\x2"+
		"\x520\x518\x3\x2\x2\x2\x520\x521\x3\x2\x2\x2\x521\x522\x3\x2\x2\x2\x522"+
		"\x530\a\x125\x2\x2\x523\x52C\a\x120\x2\x2\x524\x529\x5&\x14\x2\x525\x526"+
		"\a\x127\x2\x2\x526\x528\x5&\x14\x2\x527\x525\x3\x2\x2\x2\x528\x52B\x3"+
		"\x2\x2\x2\x529\x527\x3\x2\x2\x2\x529\x52A\x3\x2\x2\x2\x52A\x52D\x3\x2"+
		"\x2\x2\x52B\x529\x3\x2\x2\x2\x52C\x524\x3\x2\x2\x2\x52C\x52D\x3\x2\x2"+
		"\x2\x52D\x52E\x3\x2\x2\x2\x52E\x530\a\x121\x2\x2\x52F\x517\x3\x2\x2\x2"+
		"\x52F\x523\x3\x2\x2\x2\x530i\x3\x2\x2\x2\x531\x533\x5\x8CG\x2\x532\x531"+
		"\x3\x2\x2\x2\x532\x533\x3\x2\x2\x2\x533\x535\x3\x2\x2\x2\x534\x536\x5"+
		"n\x38\x2\x535\x534\x3\x2\x2\x2\x535\x536\x3\x2\x2\x2\x536\x537\x3\x2\x2"+
		"\x2\x537\x538\t\x16\x2\x2\x538k\x3\x2\x2\x2\x539\x53B\x5\x8CG\x2\x53A"+
		"\x539\x3\x2\x2\x2\x53A\x53B\x3\x2\x2\x2\x53B\x53D\x3\x2\x2\x2\x53C\x53E"+
		"\x5n\x38\x2\x53D\x53C\x3\x2\x2\x2\x53D\x53E\x3\x2\x2\x2\x53E\x54A\x3\x2"+
		"\x2\x2\x53F\x540\x6\x37\v\x2\x540\x542\t\x17\x2\x2\x541\x543\x5\xCEh\x2"+
		"\x542\x541\x3\x2\x2\x2\x542\x543\x3\x2\x2\x2\x543\x54B\x3\x2\x2\x2\x544"+
		"\x545\x6\x37\f\x2\x545\x547\t\x18\x2\x2\x546\x548\x5p\x39\x2\x547\x546"+
		"\x3\x2\x2\x2\x547\x548\x3\x2\x2\x2\x548\x54B\x3\x2\x2\x2\x549\x54B\t\x16"+
		"\x2\x2\x54A\x53F\x3\x2\x2\x2\x54A\x544\x3\x2\x2\x2\x54A\x549\x3\x2\x2"+
		"\x2\x54Bm\x3\x2\x2\x2\x54C\x54E\t\x19\x2\x2\x54D\x54C\x3\x2\x2\x2\x54E"+
		"\x54F\x3\x2\x2\x2\x54F\x54D\x3\x2\x2\x2\x54F\x550\x3\x2\x2\x2\x550o\x3"+
		"\x2\x2\x2\x551\x556\x5\xCEh\x2\x552\x553\a\x127\x2\x2\x553\x555\x5\xCE"+
		"h\x2\x554\x552\x3\x2\x2\x2\x555\x558\x3\x2\x2\x2\x556\x554\x3\x2\x2\x2"+
		"\x556\x557\x3\x2\x2\x2\x557q\x3\x2\x2\x2\x558\x556\x3\x2\x2\x2\x559\x55B"+
		"\x5\x8CG\x2\x55A\x559\x3\x2\x2\x2\x55A\x55B\x3\x2\x2\x2\x55B\x55D\x3\x2"+
		"\x2\x2\x55C\x55E\x5n\x38\x2\x55D\x55C\x3\x2\x2\x2\x55D\x55E\x3\x2\x2\x2"+
		"\x55E\x573\x3\x2\x2\x2\x55F\x560\a]\x2\x2\x560\x561\x5\xE\b\x2\x561\x562"+
		"\x5*\x16\x2\x562\x564\a\x19\x2\x2\x563\x565\a]\x2\x2\x564\x563\x3\x2\x2"+
		"\x2\x564\x565\x3\x2\x2\x2\x565\x574\x3\x2\x2\x2\x566\x567\a]\x2\x2\x567"+
		"\x568\a\x15D\x2\x2\x568\x574\x5\xCEh\x2\x569\x56A\t\x18\x2\x2\x56A\x56B"+
		"\x5\xE\b\x2\x56B\x56C\x5*\x16\x2\x56C\x56E\a\x19\x2\x2\x56D\x56F\t\x18"+
		"\x2\x2\x56E\x56D\x3\x2\x2\x2\x56E\x56F\x3\x2\x2\x2\x56F\x574\x3\x2\x2"+
		"\x2\x570\x571\t\x18\x2\x2\x571\x572\a\x15D\x2\x2\x572\x574\x5\xCEh\x2"+
		"\x573\x55F\x3\x2\x2\x2\x573\x566\x3\x2\x2\x2\x573\x569\x3\x2\x2\x2\x573"+
		"\x570\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x576\x5\xE\b\x2\x576s\x3"+
		"\x2\x2\x2\x577\x588\x5\x32\x1A\x2\x578\x588\x5|?\x2\x579\x588\x5v<\x2"+
		"\x57A\x588\x5~@\x2\x57B\x588\x5^\x30\x2\x57C\x588\x5\x66\x34\x2\x57D\x588"+
		"\x5\x86\x44\x2\x57E\x588\x5P)\x2\x57F\x588\x5\x44#\x2\x580\x588\x5R*\x2"+
		"\x581\x588\x5T+\x2\x582\x588\x5X-\x2\x583\x588\x5\x42\"\x2\x584\x585\x6"+
		";\r\x2\x585\x588\x5\"\x12\x2\x586\x588\x5\xE\b\x2\x587\x577\x3\x2\x2\x2"+
		"\x587\x578\x3\x2\x2\x2\x587\x579\x3\x2\x2\x2\x587\x57A\x3\x2\x2\x2\x587"+
		"\x57B\x3\x2\x2\x2\x587\x57C\x3\x2\x2\x2\x587\x57D\x3\x2\x2\x2\x587\x57E"+
		"\x3\x2\x2\x2\x587\x57F\x3\x2\x2\x2\x587\x580\x3\x2\x2\x2\x587\x581\x3"+
		"\x2\x2\x2\x587\x582\x3\x2\x2\x2\x587\x583\x3\x2\x2\x2\x587\x584\x3\x2"+
		"\x2\x2\x587\x586\x3\x2\x2\x2\x588u\x3\x2\x2\x2\x589\x58B\x5\x8CG\x2\x58A"+
		"\x589\x3\x2\x2\x2\x58A\x58B\x3\x2\x2\x2\x58B\x58D\x3\x2\x2\x2\x58C\x58E"+
		"\x5z>\x2\x58D\x58C\x3\x2\x2\x2\x58D\x58E\x3\x2\x2\x2\x58E\x58F\x3\x2\x2"+
		"\x2\x58F\x591\aT\x2\x2\x590\x592\x5$\x13\x2\x591\x590\x3\x2\x2\x2\x591"+
		"\x592\x3\x2\x2\x2\x592\x595\x3\x2\x2\x2\x593\x594\a\x6\x2\x2\x594\x596"+
		"\a\xAF\x2\x2\x595\x593\x3\x2\x2\x2\x595\x596\x3\x2\x2\x2\x596\x598\x3"+
		"\x2\x2\x2\x597\x599\x5\x18\r\x2\x598\x597\x3\x2\x2\x2\x598\x599\x3\x2"+
		"\x2\x2\x599\x59C\x3\x2\x2\x2\x59A\x59B\a\xE\x2\x2\x59B\x59D\x5\x13C\x9F"+
		"\x2\x59C\x59A\x3\x2\x2\x2\x59C\x59D\x3\x2\x2\x2\x59D\x5A0\x3\x2\x2\x2"+
		"\x59E\x59F\a\x15D\x2\x2\x59F\x5A1\x5\xCEh\x2\x5A0\x59E\x3\x2\x2\x2\x5A0"+
		"\x5A1\x3\x2\x2\x2\x5A1\x5A2\x3\x2\x2\x2\x5A2\x5A4\x5\xE\b\x2\x5A3\x5A5"+
		"\x5x=\x2\x5A4\x5A3\x3\x2\x2\x2\x5A4\x5A5\x3\x2\x2\x2\x5A5\x5A6\x3\x2\x2"+
		"\x2\x5A6\x5AA\x5*\x16\x2\x5A7\x5A8\a\x19\x2\x2\x5A8\x5A9\aT\x2\x2\x5A9"+
		"\x5AB\a\x167\x2\x2\x5AA\x5A7\x3\x2\x2\x2\x5AA\x5AB\x3\x2\x2\x2\x5ABw\x3"+
		"\x2\x2\x2\x5AC\x5AD\t\x1A\x2\x2\x5AD\x5AE\a\x120\x2\x2\x5AE\x5AF\x5\xE8"+
		"u\x2\x5AF\x5B0\a\x121\x2\x2\x5B0\x5B1\x5\xE\b\x2\x5B1y\x3\x2\x2\x2\x5B2"+
		"\x5B4\t\x1B\x2\x2\x5B3\x5B2\x3\x2\x2\x2\x5B4\x5B5\x3\x2\x2\x2\x5B5\x5B3"+
		"\x3\x2\x2\x2\x5B5\x5B6\x3\x2\x2\x2\x5B6{\x3\x2\x2\x2\x5B7\x5B8\a\x10\x2"+
		"\x2\x5B8\x5BA\t\f\x2\x2\x5B9\x5BB\n\t\x2\x2\x5BA\x5B9\x3\x2\x2\x2\x5BB"+
		"\x5BC\x3\x2\x2\x2\x5BC\x5BA\x3\x2\x2\x2\x5BC\x5BD\x3\x2\x2\x2\x5BD\x5BE"+
		"\x3\x2\x2\x2\x5BE\x5BF\x5\xE\b\x2\x5BF}\x3\x2\x2\x2\x5C0\x5C2\x5\x8CG"+
		"\x2\x5C1\x5C0\x3\x2\x2\x2\x5C1\x5C2\x3\x2\x2\x2\x5C2\x5C4\x3\x2\x2\x2"+
		"\x5C3\x5C5\x5\x80\x41\x2\x5C4\x5C3\x3\x2\x2\x2\x5C4\x5C5\x3\x2\x2\x2\x5C5"+
		"\x5C6\x3\x2\x2\x2\x5C6\x5C9\aX\x2\x2\x5C7\x5C8\a\x120\x2\x2\x5C8\x5CA"+
		"\a\x121\x2\x2\x5C9\x5C7\x3\x2\x2\x2\x5C9\x5CA\x3\x2\x2\x2\x5CA\x5CD\x3"+
		"\x2\x2\x2\x5CB\x5CC\a\xE\x2\x2\x5CC\x5CE\x5\x13C\x9F\x2\x5CD\x5CB\x3\x2"+
		"\x2\x2\x5CD\x5CE\x3\x2\x2\x2\x5CE\x5D1\x3\x2\x2\x2\x5CF\x5D0\a\x15D\x2"+
		"\x2\x5D0\x5D2\x5\xCEh\x2\x5D1\x5CF\x3\x2\x2\x2\x5D1\x5D2\x3\x2\x2\x2\x5D2"+
		"\x5D3\x3\x2\x2\x2\x5D3\x5D4\x5\xE\b\x2\x5D4\x5D8\x5*\x16\x2\x5D5\x5D6"+
		"\a\x19\x2\x2\x5D6\x5D7\aX\x2\x2\x5D7\x5D9\a\x167\x2\x2\x5D8\x5D5\x3\x2"+
		"\x2\x2\x5D8\x5D9\x3\x2\x2\x2\x5D9\x7F\x3\x2\x2\x2\x5DA\x5DC\a\x80\x2\x2"+
		"\x5DB\x5DA\x3\x2\x2\x2\x5DC\x5DD\x3\x2\x2\x2\x5DD\x5DB\x3\x2\x2\x2\x5DD"+
		"\x5DE\x3\x2\x2\x2\x5DE\x81\x3\x2\x2\x2\x5DF\x5E0\t\x1C\x2\x2\x5E0\x83"+
		"\x3\x2\x2\x2\x5E1\x5E2\t\x1D\x2\x2\x5E2\x85\x3\x2\x2\x2\x5E3\x5E5\x5\x8C"+
		"G\x2\x5E4\x5E3\x3\x2\x2\x2\x5E4\x5E5\x3\x2\x2\x2\x5E5\x5E7\x3\x2\x2\x2"+
		"\x5E6\x5E8\x5\x88\x45\x2\x5E7\x5E6\x3\x2\x2\x2\x5E7\x5E8\x3\x2\x2\x2\x5E8"+
		"\x5E9\x3\x2\x2\x2\x5E9\x5EC\ag\x2\x2\x5EA\x5ED\x5\x82\x42\x2\x5EB\x5ED"+
		"\x5\x84\x43\x2\x5EC\x5EA\x3\x2\x2\x2\x5EC\x5EB\x3\x2\x2\x2\x5ED\x5EF\x3"+
		"\x2\x2\x2\x5EE\x5F0\a\xF0\x2\x2\x5EF\x5EE\x3\x2\x2\x2\x5EF\x5F0\x3\x2"+
		"\x2\x2\x5F0\x5F1\x3\x2\x2\x2\x5F1\x5F4\x5$\x13\x2\x5F2\x5F3\a\x6\x2\x2"+
		"\x5F3\x5F5\x5\xFE\x80\x2\x5F4\x5F2\x3\x2\x2\x2\x5F4\x5F5\x3\x2\x2\x2\x5F5"+
		"\x5F8\x3\x2\x2\x2\x5F6\x5F7\a\x15D\x2\x2\x5F7\x5F9\x5\xCEh\x2\x5F8\x5F6"+
		"\x3\x2\x2\x2\x5F8\x5F9\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FB\x5"+
		"\xE\b\x2\x5FB\x5FF\x5*\x16\x2\x5FC\x5FD\a\x19\x2\x2\x5FD\x5FE\ag\x2\x2"+
		"\x5FE\x600\a\x167\x2\x2\x5FF\x5FC\x3\x2\x2\x2\x5FF\x600\x3\x2\x2\x2\x600"+
		"\x87\x3\x2\x2\x2\x601\x603\t\x1E\x2\x2\x602\x601\x3\x2\x2\x2\x603\x604"+
		"\x3\x2\x2\x2\x604\x602\x3\x2\x2\x2\x604\x605\x3\x2\x2\x2\x605\x89\x3\x2"+
		"\x2\x2\x606\x608\t\x1F\x2\x2\x607\x606\x3\x2\x2\x2\x608\x609\x3\x2\x2"+
		"\x2\x609\x607\x3\x2\x2\x2\x609\x60A\x3\x2\x2\x2\x60A\x8B\x3\x2\x2\x2\x60B"+
		"\x60D\x5\x8EH\x2\x60C\x60B\x3\x2\x2\x2\x60D\x60E\x3\x2\x2\x2\x60E\x60C"+
		"\x3\x2\x2\x2\x60E\x60F\x3\x2\x2\x2\x60F\x8D\x3\x2\x2\x2\x610\x612\a\x124"+
		"\x2\x2\x611\x613\x5\x90I\x2\x612\x611\x3\x2\x2\x2\x612\x613\x3\x2\x2\x2"+
		"\x613\x614\x3\x2\x2\x2\x614\x619\x5\x92J\x2\x615\x616\a\x127\x2\x2\x616"+
		"\x618\x5\x92J\x2\x617\x615\x3\x2\x2\x2\x618\x61B\x3\x2\x2\x2\x619\x617"+
		"\x3\x2\x2\x2\x619\x61A\x3\x2\x2\x2\x61A\x61C\x3\x2\x2\x2\x61B\x619\x3"+
		"\x2\x2\x2\x61C\x61D\a\x125\x2\x2\x61D\x620\x3\x2\x2\x2\x61E\x620\a\x144"+
		"\x2\x2\x61F\x610\x3\x2\x2\x2\x61F\x61E\x3\x2\x2\x2\x620\x8F\x3\x2\x2\x2"+
		"\x621\x622\t \x2\x2\x622\x623\a\x126\x2\x2\x623\x91\x3\x2\x2\x2\x624\x631"+
		"\x5\xF0y\x2\x625\x62E\a\x120\x2\x2\x626\x62B\x5\x94K\x2\x627\x628\a\x127"+
		"\x2\x2\x628\x62A\x5\x94K\x2\x629\x627\x3\x2\x2\x2\x62A\x62D\x3\x2\x2\x2"+
		"\x62B\x629\x3\x2\x2\x2\x62B\x62C\x3\x2\x2\x2\x62C\x62F\x3\x2\x2\x2\x62D"+
		"\x62B\x3\x2\x2\x2\x62E\x626\x3\x2\x2\x2\x62E\x62F\x3\x2\x2\x2\x62F\x630"+
		"\x3\x2\x2\x2\x630\x632\a\x121\x2\x2\x631\x625\x3\x2\x2\x2\x631\x632\x3"+
		"\x2\x2\x2\x632\x93\x3\x2\x2\x2\x633\x634\x5\xF8}\x2\x634\x635\x5\xCCg"+
		"\x2\x635\x636\x5\xCEh\x2\x636\x639\x3\x2\x2\x2\x637\x639\x5\xCEh\x2\x638"+
		"\x633\x3\x2\x2\x2\x638\x637\x3\x2\x2\x2\x639\x95\x3\x2\x2\x2\x63A\x63B"+
		"\a\x124\x2\x2\x63B\x63C\x5\x98M\x2\x63C\x641\x5\x92J\x2\x63D\x63E\a\x127"+
		"\x2\x2\x63E\x640\x5\x92J\x2\x63F\x63D\x3\x2\x2\x2\x640\x643\x3\x2\x2\x2"+
		"\x641\x63F\x3\x2\x2\x2\x641\x642\x3\x2\x2\x2\x642\x644\x3\x2\x2\x2\x643"+
		"\x641\x3\x2\x2\x2\x644\x645\a\x125\x2\x2\x645\x646\a\x167\x2\x2\x646\x97"+
		"\x3\x2\x2\x2\x647\x648\a\x15E\x2\x2\x648\x649\a\x126\x2\x2\x649\x99\x3"+
		"\x2\x2\x2\x64A\x64B\a\x31\x2\x2\x64B\x650\x5\xF8}\x2\x64C\x64D\a\x127"+
		"\x2\x2\x64D\x64F\x5\xF8}\x2\x64E\x64C\x3\x2\x2\x2\x64F\x652\x3\x2\x2\x2"+
		"\x650\x64E\x3\x2\x2\x2\x650\x651\x3\x2\x2\x2\x651\x653\x3\x2\x2\x2\x652"+
		"\x650\x3\x2\x2\x2\x653\x654\x5\xE\b\x2\x654\x67D\x3\x2\x2\x2\x655\x656"+
		"\a \x2\x2\x656\x65B\x5\xF8}\x2\x657\x658\a\x127\x2\x2\x658\x65A\x5\xF8"+
		"}\x2\x659\x657\x3\x2\x2\x2\x65A\x65D\x3\x2\x2\x2\x65B\x659\x3\x2\x2\x2"+
		"\x65B\x65C\x3\x2\x2\x2\x65C\x660\x3\x2\x2\x2\x65D\x65B\x3\x2\x2\x2\x65E"+
		"\x65F\a-\x2\x2\x65F\x661\x5\xF8}\x2\x660\x65E\x3\x2\x2\x2\x660\x661\x3"+
		"\x2\x2\x2\x661\x662\x3\x2\x2\x2\x662\x663\x5\xE\b\x2\x663\x67D\x3\x2\x2"+
		"\x2\x664\x665\x6N\xE\x2\x665\x666\a;\x2\x2\x666\x66B\x5\xB6\\\x2\x667"+
		"\x668\a\x127\x2\x2\x668\x66A\x5\xB6\\\x2\x669\x667\x3\x2\x2\x2\x66A\x66D"+
		"\x3\x2\x2\x2\x66B\x669\x3\x2\x2\x2\x66B\x66C\x3\x2\x2\x2\x66C\x66E\x3"+
		"\x2\x2\x2\x66D\x66B\x3\x2\x2\x2\x66E\x66F\x5\xE\b\x2\x66F\x67D\x3\x2\x2"+
		"\x2\x670\x671\x6N\xF\x2\x671\x672\a;\x2\x2\x672\x677\x5\xC6\x64\x2\x673"+
		"\x674\a\x127\x2\x2\x674\x676\x5\xC6\x64\x2\x675\x673\x3\x2\x2\x2\x676"+
		"\x679\x3\x2\x2\x2\x677\x675\x3\x2\x2\x2\x677\x678\x3\x2\x2\x2\x678\x67A"+
		"\x3\x2\x2\x2\x679\x677\x3\x2\x2\x2\x67A\x67B\x5\xE\b\x2\x67B\x67D\x3\x2"+
		"\x2\x2\x67C\x64A\x3\x2\x2\x2\x67C\x655\x3\x2\x2\x2\x67C\x664\x3\x2\x2"+
		"\x2\x67C\x670\x3\x2\x2\x2\x67D\x9B\x3\x2\x2\x2\x67E\x7E5\x5\xACW\x2\x67F"+
		"\x7E5\x5\xBC_\x2\x680\x7E5\x5\xC8\x65\x2\x681\x682\x6O\x10\x2\x682\x7E5"+
		"\x5\xB4[\x2\x683\x7E5\x5\xB2Z\x2\x684\x685\x6O\x11\x2\x685\x7E5\x5\xB8"+
		"]\x2\x686\x687\x6O\x12\x2\x687\x7E5\x5\xBA^\x2\x688\x68A\a\x15\x2\x2\x689"+
		"\x688\x3\x2\x2\x2\x689\x68A\x3\x2\x2\x2\x68A\x68B\x3\x2\x2\x2\x68B\x68C"+
		"\aK\x2\x2\x68C\x68D\x5\xCEh\x2\x68D\x68E\x5\xE\b\x2\x68E\x694\x5*\x16"+
		"\x2\x68F\x691\a\x19\x2\x2\x690\x692\t!\x2\x2\x691\x690\x3\x2\x2\x2\x691"+
		"\x692\x3\x2\x2\x2\x692\x695\x3\x2\x2\x2\x693\x695\a\x1B\x2\x2\x694\x68F"+
		"\x3\x2\x2\x2\x694\x693\x3\x2\x2\x2\x695\x696\x3\x2\x2\x2\x696\x697\x5"+
		"\xE\b\x2\x697\x7E5\x3\x2\x2\x2\x698\x69B\a\x88\x2\x2\x699\x69A\a\x120"+
		"\x2\x2\x69A\x69C\a\x121\x2\x2\x69B\x699\x3\x2\x2\x2\x69B\x69C\x3\x2\x2"+
		"\x2\x69C\x69D\x3\x2\x2\x2\x69D\x7E5\x5\xE\b\x2\x69E\x6B3\a!\x2\x2\x69F"+
		"\x6B4\x5\xCEh\x2\x6A0\x6A2\a.\x2\x2\x6A1\x6A0\x3\x2\x2\x2\x6A1\x6A2\x3"+
		"\x2\x2\x2\x6A2\x6A3\x3\x2\x2\x2\x6A3\x6A6\a`\x2\x2\x6A4\x6A6\a\x94\x2"+
		"\x2\x6A5\x6A1\x3\x2\x2\x2\x6A5\x6A4\x3\x2\x2\x2\x6A6\x6A7\x3\x2\x2\x2"+
		"\x6A7\x6A8\x5\x13C\x9F\x2\x6A8\x6A9\x5\xCCg\x2\x6A9\x6AA\x5\xCEh\x2\x6AA"+
		"\x6B4\x3\x2\x2\x2\x6AB\x6AC\a.\x2\x2\x6AC\x6AD\x5\x13C\x9F\x2\x6AD\x6AE"+
		"\x5\xCCg\x2\x6AE\x6B1\x5\xCEh\x2\x6AF\x6B0\a\x6\x2\x2\x6B0\x6B2\x5\xFE"+
		"\x80\x2\x6B1\x6AF\x3\x2\x2\x2\x6B1\x6B2\x3\x2\x2\x2\x6B2\x6B4\x3\x2\x2"+
		"\x2\x6B3\x69F\x3\x2\x2\x2\x6B3\x6A5\x3\x2\x2\x2\x6B3\x6AB\x3\x2\x2\x2"+
		"\x6B4\x6B5\x3\x2\x2\x2\x6B5\x6B6\t\"\x2\x2\x6B6\x6B9\x5\xCEh\x2\x6B7\x6B8"+
		"\a\x42\x2\x2\x6B8\x6BA\x5\xCEh\x2\x6B9\x6B7\x3\x2\x2\x2\x6B9\x6BA\x3\x2"+
		"\x2\x2\x6BA\x6BB\x3\x2\x2\x2\x6BB\x6BC\x5\xE\b\x2\x6BC\x6BF\x5*\x16\x2"+
		"\x6BD\x6C0\a\x34\x2\x2\x6BE\x6C0\a\xD9\x2\x2\x6BF\x6BD\x3\x2\x2\x2\x6BF"+
		"\x6BE\x3\x2\x2\x2\x6C0\x6C1\x3\x2\x2\x2\x6C1\x6C2\x5\xE\b\x2\x6C2\x7E5"+
		"\x3\x2\x2\x2\x6C3\x6C4\a%\x2\x2\x6C4\x6C9\x5\xA0Q\x2\x6C5\x6C6\a\x18\x2"+
		"\x2\x6C6\x6C8\x5\xA0Q\x2\x6C7\x6C5\x3\x2\x2\x2\x6C8\x6CB\x3\x2\x2\x2\x6C9"+
		"\x6C7\x3\x2\x2\x2\x6C9\x6CA\x3\x2\x2\x2\x6CA\x6D0\x3\x2\x2\x2\x6CB\x6C9"+
		"\x3\x2\x2\x2\x6CC\x6CD\a\x17\x2\x2\x6CD\x6CE\x5\xE\b\x2\x6CE\x6CF\x5*"+
		"\x16\x2\x6CF\x6D1\x3\x2\x2\x2\x6D0\x6CC\x3\x2\x2\x2\x6D0\x6D1\x3\x2\x2"+
		"\x2\x6D1\x6D7\x3\x2\x2\x2\x6D2\x6D4\a\x19\x2\x2\x6D3\x6D5\a%\x2\x2\x6D4"+
		"\x6D3\x3\x2\x2\x2\x6D4\x6D5\x3\x2\x2\x2\x6D5\x6D8\x3\x2\x2\x2\x6D6\x6D8"+
		"\a\x1C\x2\x2\x6D7\x6D2\x3\x2\x2\x2\x6D7\x6D6\x3\x2\x2\x2\x6D8\x6D9\x3"+
		"\x2\x2\x2\x6D9\x6DA\x5\xE\b\x2\x6DA\x7E5\x3\x2\x2\x2\x6DB\x6DC\a\x15\x2"+
		"\x2\x6DC\x6DD\a\f\x2\x2\x6DD\x6E2\x5\xE\b\x2\x6DE\x6DF\a\f\x2\x2\x6DF"+
		"\x6E1\x5\xA0Q\x2\x6E0\x6DE\x3\x2\x2\x2\x6E1\x6E4\x3\x2\x2\x2\x6E2\x6E0"+
		"\x3\x2\x2\x2\x6E2\x6E3\x3\x2\x2\x2\x6E3\x6E9\x3\x2\x2\x2\x6E4\x6E2\x3"+
		"\x2\x2\x2\x6E5\x6E6\a\x35\x2\x2\x6E6\x6E7\x5\xE\b\x2\x6E7\x6E8\x5*\x16"+
		"\x2\x6E8\x6EA\x3\x2\x2\x2\x6E9\x6E5\x3\x2\x2\x2\x6E9\x6EA\x3\x2\x2\x2"+
		"\x6EA\x6F0\x3\x2\x2\x2\x6EB\x6ED\a\x19\x2\x2\x6EC\x6EE\a\f\x2\x2\x6ED"+
		"\x6EC\x3\x2\x2\x2\x6ED\x6EE\x3\x2\x2\x2\x6EE\x6F1\x3\x2\x2\x2\x6EF\x6F1"+
		"\a\x1A\x2\x2\x6F0\x6EB\x3\x2\x2\x2\x6F0\x6EF\x3\x2\x2\x2\x6F1\x6F2\x3"+
		"\x2\x2\x2\x6F2\x6F3\x5\xE\b\x2\x6F3\x7E5\x3\x2\x2\x2\x6F4\x6F5\a\x1D\x2"+
		"\x2\x6F5\x7E5\x5\xE\b\x2\x6F6\x6F7\a/\x2\x2\x6F7\x7E5\x5\xE\b\x2\x6F8"+
		"\x6FA\a\n\x2\x2\x6F9\x6FB\x5\xCEh\x2\x6FA\x6F9\x3\x2\x2\x2\x6FA\x6FB\x3"+
		"\x2\x2\x2\x6FB\x6FC\x3\x2\x2\x2\x6FC\x7E5\x5\xE\b\x2\x6FD\x700\a=\x2\x2"+
		"\x6FE\x701\a\xAF\x2\x2\x6FF\x701\x5\xCEh\x2\x700\x6FE\x3\x2\x2\x2\x700"+
		"\x6FF\x3\x2\x2\x2\x700\x701\x3\x2\x2\x2\x701\x702\x3\x2\x2\x2\x702\x7E5"+
		"\x5\xE\b\x2\x703\x70C\t#\x2\x2\x704\x709\x5\xCEh\x2\x705\x706\a\x127\x2"+
		"\x2\x706\x708\x5\xCEh\x2\x707\x705\x3\x2\x2\x2\x708\x70B\x3\x2\x2\x2\x709"+
		"\x707\x3\x2\x2\x2\x709\x70A\x3\x2\x2\x2\x70A\x70D\x3\x2\x2\x2\x70B\x709"+
		"\x3\x2\x2\x2\x70C\x704\x3\x2\x2\x2\x70C\x70D\x3\x2\x2\x2\x70D\x70E\x3"+
		"\x2\x2\x2\x70E\x7E5\x5\xE\b\x2\x70F\x710\a\t\x2\x2\x710\x711\a?\x2\x2"+
		"\x711\x712\x5\xE\b\x2\x712\x715\x5*\x16\x2\x713\x714\a<\x2\x2\x714\x716"+
		"\x5\xA6T\x2\x715\x713\x3\x2\x2\x2\x715\x716\x3\x2\x2\x2\x716\x71B\x3\x2"+
		"\x2\x2\x717\x718\aN\x2\x2\x718\x719\x5\xE\b\x2\x719\x71A\x5*\x16\x2\x71A"+
		"\x71C\x3\x2\x2\x2\x71B\x717\x3\x2\x2\x2\x71B\x71C\x3\x2\x2\x2\x71C\x722"+
		"\x3\x2\x2\x2\x71D\x71F\a\x19\x2\x2\x71E\x720\a?\x2\x2\x71F\x71E\x3\x2"+
		"\x2\x2\x71F\x720\x3\x2\x2\x2\x720\x723\x3\x2\x2\x2\x721\x723\a\xC2\x2"+
		"\x2\x722\x71D\x3\x2\x2\x2\x722\x721\x3\x2\x2\x2\x723\x724\x3\x2\x2\x2"+
		"\x724\x725\x5\xE\b\x2\x725\x7E5\x3\x2\x2\x2\x726\x727\ak\x2\x2\x727\x728"+
		"\x5\xE\b\x2\x728\x729\x5*\x16\x2\x729\x72A\ar\x2\x2\x72A\x72B\x5\xCEh"+
		"\x2\x72B\x72C\x5\xE\b\x2\x72C\x7E5\x3\x2\x2\x2\x72D\x731\a\\\x2\x2\x72E"+
		"\x72F\a!\x2\x2\x72F\x731\a\xDE\x2\x2\x730\x72D\x3\x2\x2\x2\x730\x72E\x3"+
		"\x2\x2\x2\x731\x733\x3\x2\x2\x2\x732\x734\a{\x2\x2\x733\x732\x3\x2\x2"+
		"\x2\x733\x734\x3\x2\x2\x2\x734\x73E\x3\x2\x2\x2\x735\x736\a`\x2\x2\x736"+
		"\x73F\x5\xFA~\x2\x737\x73A\x5\xFA~\x2\x738\x739\a\x6\x2\x2\x739\x73B\x5"+
		"\xFE\x80\x2\x73A\x738\x3\x2\x2\x2\x73A\x73B\x3\x2\x2\x2\x73B\x73F\x3\x2"+
		"\x2\x2\x73C\x73D\a\x94\x2\x2\x73D\x73F\x5\xFA~\x2\x73E\x735\x3\x2\x2\x2"+
		"\x73E\x737\x3\x2\x2\x2\x73E\x73C\x3\x2\x2\x2\x73F\x740\x3\x2\x2\x2\x740"+
		"\x741\a-\x2\x2\x741\x742\x5\xCEh\x2\x742\x743\x5\xE\b\x2\x743\x746\x5"+
		"*\x16\x2\x744\x747\a\x34\x2\x2\x745\x747\a\xD9\x2\x2\x746\x744\x3\x2\x2"+
		"\x2\x746\x745\x3\x2\x2\x2\x747\x748\x3\x2\x2\x2\x748\x749\x5\xE\b\x2\x749"+
		"\x7E5\x3\x2\x2\x2\x74A\x74C\aO\x2\x2\x74B\x74D\x5\xCEh\x2\x74C\x74B\x3"+
		"\x2\x2\x2\x74C\x74D\x3\x2\x2\x2\x74D\x74E\x3\x2\x2\x2\x74E\x7E5\x5\xE"+
		"\b\x2\x74F\x750\ap\x2\x2\x750\x751\x5\xE\b\x2\x751\x758\x5*\x16\x2\x752"+
		"\x754\aM\x2\x2\x753\x755\x5\xA4S\x2\x754\x753\x3\x2\x2\x2\x754\x755\x3"+
		"\x2\x2\x2\x755\x757\x3\x2\x2\x2\x756\x752\x3\x2\x2\x2\x757\x75A\x3\x2"+
		"\x2\x2\x758\x756\x3\x2\x2\x2\x758\x759\x3\x2\x2\x2\x759\x75F\x3\x2\x2"+
		"\x2\x75A\x758\x3\x2\x2\x2\x75B\x75C\aN\x2\x2\x75C\x75D\x5\xE\b\x2\x75D"+
		"\x75E\x5*\x16\x2\x75E\x760\x3\x2\x2\x2\x75F\x75B\x3\x2\x2\x2\x75F\x760"+
		"\x3\x2\x2\x2\x760\x766\x3\x2\x2\x2\x761\x763\a\x19\x2\x2\x762\x764\ap"+
		"\x2\x2\x763\x762\x3\x2\x2\x2\x763\x764\x3\x2\x2\x2\x764\x767\x3\x2\x2"+
		"\x2\x765\x767\a\xDC\x2\x2\x766\x761\x3\x2\x2\x2\x766\x765\x3\x2\x2\x2"+
		"\x767\x768\x3\x2\x2\x2\x768\x769\x5\xE\b\x2\x769\x7E5\x3\x2\x2\x2\x76A"+
		"\x76B\a\t\x2\x2\x76B\x76C\a\x64\x2\x2\x76C\x76D\x5\xCEh\x2\x76D\x76E\x5"+
		"\xE\b\x2\x76E\x76F\x5*\x16\x2\x76F\x771\a\x19\x2\x2\x770\x772\a\x64\x2"+
		"\x2\x771\x770\x3\x2\x2\x2\x771\x772\x3\x2\x2\x2\x772\x773\x3\x2\x2\x2"+
		"\x773\x774\x5\xE\b\x2\x774\x7E5\x3\x2\x2\x2\x775\x776\a\x98\x2\x2\x776"+
		"\x779\a=\x2\x2\x777\x77A\a\xAF\x2\x2\x778\x77A\x5\xCEh\x2\x779\x777\x3"+
		"\x2\x2\x2\x779\x778\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2\x77A\x77B\x3\x2"+
		"\x2\x2\x77B\x7E5\x5\xE\b\x2\x77C\x77D\a\x98\x2\x2\x77D\x77E\t$\x2\x2\x77E"+
		"\x7E5\x5\xE\b\x2\x77F\x781\t%\x2\x2\x780\x77F\x3\x2\x2\x2\x780\x781\x3"+
		"\x2\x2\x2\x781\x782\x3\x2\x2\x2\x782\x783\a\x91\x2\x2\x783\x784\x5\xCE"+
		"h\x2\x784\x786\x5\xE\b\x2\x785\x787\x5\xA2R\x2\x786\x785\x3\x2\x2\x2\x787"+
		"\x788\x3\x2\x2\x2\x788\x786\x3\x2\x2\x2\x788\x789\x3\x2\x2\x2\x789\x78A"+
		"\x3\x2\x2\x2\x78A\x78C\a\x19\x2\x2\x78B\x78D\a\x91\x2\x2\x78C\x78B\x3"+
		"\x2\x2\x2\x78C\x78D\x3\x2\x2\x2\x78D\x78E\x3\x2\x2\x2\x78E\x78F\x5\xE"+
		"\b\x2\x78F\x7E5\x3\x2\x2\x2\x790\x791\a\t\x2\x2\x791\x794\aJ\x2\x2\x792"+
		"\x795\x5\xCEh\x2\x793\x795\x5\xA8U\x2\x794\x792\x3\x2\x2\x2\x794\x793"+
		"\x3\x2\x2\x2\x795\x796\x3\x2\x2\x2\x796\x797\x5\xE\b\x2\x797\x798\x5*"+
		"\x16\x2\x798\x79A\a\x19\x2\x2\x799\x79B\aJ\x2\x2\x79A\x799\x3\x2\x2\x2"+
		"\x79A\x79B\x3\x2\x2\x2\x79B\x79C\x3\x2\x2\x2\x79C\x79D\x5\xE\b\x2\x79D"+
		"\x7E5\x3\x2\x2\x2\x79E\x79F\a\t\x2\x2\x79F\x7A0\a\x81\x2\x2\x7A0\x7A1"+
		"\x5\xA8U\x2\x7A1\x7A2\x5\xE\b\x2\x7A2\x7A3\x5*\x16\x2\x7A3\x7A5\a\x19"+
		"\x2\x2\x7A4\x7A6\a\x81\x2\x2\x7A5\x7A4\x3\x2\x2\x2\x7A5\x7A6\x3\x2\x2"+
		"\x2\x7A6\x7A7\x3\x2\x2\x2\x7A7\x7A8\x5\xE\b\x2\x7A8\x7E5\x3\x2\x2\x2\x7A9"+
		"\x7AA\a\x99\x2\x2\x7AA\x7B0\x5\xCEh\x2\x7AB\x7AC\a\x6\x2\x2\x7AC\x7AE"+
		"\x5\xFE\x80\x2\x7AD\x7AF\x5\xC0\x61\x2\x7AE\x7AD\x3\x2\x2\x2\x7AE\x7AF"+
		"\x3\x2\x2\x2\x7AF\x7B1\x3\x2\x2\x2\x7B0\x7AB\x3\x2\x2\x2\x7B0\x7B1\x3"+
		"\x2\x2\x2\x7B1\x7B2\x3\x2\x2\x2\x7B2\x7B3\x5\xE\b\x2\x7B3\x7B9\x5*\x16"+
		"\x2\x7B4\x7B6\a\x19\x2\x2\x7B5\x7B7\a\x99\x2\x2\x7B6\x7B5\x3\x2\x2\x2"+
		"\x7B6\x7B7\x3\x2\x2\x2\x7B7\x7BA\x3\x2\x2\x2\x7B8\x7BA\a\xDD\x2\x2\x7B9"+
		"\x7B4\x3\x2\x2\x2\x7B9\x7B8\x3\x2\x2\x2\x7BA\x7BB\x3\x2\x2\x2\x7BB\x7BC"+
		"\x5\xE\b\x2\x7BC\x7E5\x3\x2\x2\x2\x7BD\x7BE\a\t\x2\x2\x7BE\x7BF\x5\x9E"+
		"P\x2\x7BF\x7C0\x5\xE\b\x2\x7C0\x7C1\x5*\x16\x2\x7C1\x7C3\a\x19\x2\x2\x7C2"+
		"\x7C4\x5\x9EP\x2\x7C3\x7C2\x3\x2\x2\x2\x7C3\x7C4\x3\x2\x2\x2\x7C4\x7C5"+
		"\x3\x2\x2\x2\x7C5\x7C6\x5\xE\b\x2\x7C6\x7E5\x3\x2\x2\x2\x7C7\x7C8\a\xF2"+
		"\x2\x2\x7C8\x7C9\x5\xCEh\x2\x7C9\x7CA\x5\xE\b\x2\x7CA\x7E5\x3\x2\x2\x2"+
		"\x7CB\x7CC\t&\x2\x2\x7CC\x7CD\a\x143\x2\x2\x7CD\x7E5\a\x167\x2\x2\x7CE"+
		"\x7D0\a\x15\x2\x2\x7CF\x7D1\a\x129\x2\x2\x7D0\x7CF\x3\x2\x2\x2\x7D0\x7D1"+
		"\x3\x2\x2\x2\x7D1\x7D2\x3\x2\x2\x2\x7D2\x7D5\x5\xFC\x7F\x2\x7D3\x7D4\a"+
		"\x99\x2\x2\x7D4\x7D6\x5\xE8u\x2\x7D5\x7D3\x3\x2\x2\x2\x7D5\x7D6\x3\x2"+
		"\x2\x2\x7D6\x7D7\x3\x2\x2\x2\x7D7\x7D8\x5\xE\b\x2\x7D8\x7E5\x3\x2\x2\x2"+
		"\x7D9\x7DA\x6O\x13\x2\x7DA\x7DF\x5\xCEh\x2\x7DB\x7DC\a\x127\x2\x2\x7DC"+
		"\x7DE\x5\xCEh\x2\x7DD\x7DB\x3\x2\x2\x2\x7DE\x7E1\x3\x2\x2\x2\x7DF\x7DD"+
		"\x3\x2\x2\x2\x7DF\x7E0\x3\x2\x2\x2\x7E0\x7E2\x3\x2\x2\x2\x7E1\x7DF\x3"+
		"\x2\x2\x2\x7E2\x7E3\x5\xE\b\x2\x7E3\x7E5\x3\x2\x2\x2\x7E4\x67E\x3\x2\x2"+
		"\x2\x7E4\x67F\x3\x2\x2\x2\x7E4\x680\x3\x2\x2\x2\x7E4\x681\x3\x2\x2\x2"+
		"\x7E4\x683\x3\x2\x2\x2\x7E4\x684\x3\x2\x2\x2\x7E4\x686\x3\x2\x2\x2\x7E4"+
		"\x689\x3\x2\x2\x2\x7E4\x698\x3\x2\x2\x2\x7E4\x69E\x3\x2\x2\x2\x7E4\x6C3"+
		"\x3\x2\x2\x2\x7E4\x6DB\x3\x2\x2\x2\x7E4\x6F4\x3\x2\x2\x2\x7E4\x6F6\x3"+
		"\x2\x2\x2\x7E4\x6F8\x3\x2\x2\x2\x7E4\x6FD\x3\x2\x2\x2\x7E4\x703\x3\x2"+
		"\x2\x2\x7E4\x70F\x3\x2\x2\x2\x7E4\x726\x3\x2\x2\x2\x7E4\x730\x3\x2\x2"+
		"\x2\x7E4\x74A\x3\x2\x2\x2\x7E4\x74F\x3\x2\x2\x2\x7E4\x76A\x3\x2\x2\x2"+
		"\x7E4\x775\x3\x2\x2\x2\x7E4\x77C\x3\x2\x2\x2\x7E4\x780\x3\x2\x2\x2\x7E4"+
		"\x790\x3\x2\x2\x2\x7E4\x79E\x3\x2\x2\x2\x7E4\x7A9\x3\x2\x2\x2\x7E4\x7BD"+
		"\x3\x2\x2\x2\x7E4\x7C7\x3\x2\x2\x2\x7E4\x7CB\x3\x2\x2\x2\x7E4\x7CE\x3"+
		"\x2\x2\x2\x7E4\x7D9\x3\x2\x2\x2\x7E5\x9D\x3\x2\x2\x2\x7E6\x7E7\t\'\x2"+
		"\x2\x7E7\x9F\x3\x2\x2\x2\x7E8\x7EA\x5\xCEh\x2\x7E9\x7EB\a\xD5\x2\x2\x7EA"+
		"\x7E9\x3\x2\x2\x2\x7EA\x7EB\x3\x2\x2\x2\x7EB\x7EC\x3\x2\x2\x2\x7EC\x7ED"+
		"\x5\xE\b\x2\x7ED\x7EE\x5*\x16\x2\x7EE\xA1\x3\x2\x2\x2\x7EF\x7F0\a\f\x2"+
		"\x2\x7F0\x7F3\x5\xCEh\x2\x7F1\x7F2\a\x96\x2\x2\x7F2\x7F4\x5\xCEh\x2\x7F3"+
		"\x7F1\x3\x2\x2\x2\x7F3\x7F4\x3\x2\x2\x2\x7F4\x7FF\x3\x2\x2\x2\x7F5\x7F6"+
		"\a\f\x2\x2\x7F6\x7F7\x5\xFA~\x2\x7F7\x7F8\a\x6\x2\x2\x7F8\x7FB\x5\xFE"+
		"\x80\x2\x7F9\x7FA\a\x96\x2\x2\x7FA\x7FC\x5\xCEh\x2\x7FB\x7F9\x3\x2\x2"+
		"\x2\x7FB\x7FC\x3\x2\x2\x2\x7FC\x7FF\x3\x2\x2\x2\x7FD\x7FF\a\x35\x2\x2"+
		"\x7FE\x7EF\x3\x2\x2\x2\x7FE\x7F5\x3\x2\x2\x2\x7FE\x7FD\x3\x2\x2\x2\x7FF"+
		"\x800\x3\x2\x2\x2\x800\x801\x5\xE\b\x2\x801\x802\x5*\x16\x2\x802\xA3\x3"+
		"\x2\x2\x2\x803\x805\a\x46\x2\x2\x804\x803\x3\x2\x2\x2\x804\x805\x3\x2"+
		"\x2\x2\x805\x807\x3\x2\x2\x2\x806\x808\x5\xFA~\x2\x807\x806\x3\x2\x2\x2"+
		"\x807\x808\x3\x2\x2\x2\x808\x80B\x3\x2\x2\x2\x809\x80A\a\x6\x2\x2\x80A"+
		"\x80C\x5\xFE\x80\x2\x80B\x809\x3\x2\x2\x2\x80B\x80C\x3\x2\x2\x2\x80C\x80F"+
		"\x3\x2\x2\x2\x80D\x80E\a\x96\x2\x2\x80E\x810\x5\xCEh\x2\x80F\x80D\x3\x2"+
		"\x2\x2\x80F\x810\x3\x2\x2\x2\x810\x811\x3\x2\x2\x2\x811\x812\x5\xE\b\x2"+
		"\x812\x813\x5*\x16\x2\x813\xA5\x3\x2\x2\x2\x814\x815\aJ\x2\x2\x815\x817"+
		"\x5\xFA~\x2\x816\x814\x3\x2\x2\x2\x816\x817\x3\x2\x2\x2\x817\x818\x3\x2"+
		"\x2\x2\x818\x819\x5\xE\b\x2\x819\x81A\x5*\x16\x2\x81A\xA7\x3\x2\x2\x2"+
		"\x81B\x81D\a.\x2\x2\x81C\x81B\x3\x2\x2\x2\x81C\x81D\x3\x2\x2\x2\x81D\x81E"+
		"\x3\x2\x2\x2\x81E\x821\a`\x2\x2\x81F\x821\a\x94\x2\x2\x820\x81C\x3\x2"+
		"\x2\x2\x820\x81F\x3\x2\x2\x2\x821\x822\x3\x2\x2\x2\x822\x827\x5\xAAV\x2"+
		"\x823\x824\a\x127\x2\x2\x824\x826\x5\xAAV\x2\x825\x823\x3\x2\x2\x2\x826"+
		"\x829\x3\x2\x2\x2\x827\x825\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x838"+
		"\x3\x2\x2\x2\x829\x827\x3\x2\x2\x2\x82A\x82B\a.\x2\x2\x82B\x830\x5\xAA"+
		"V\x2\x82C\x82D\a\x127\x2\x2\x82D\x82F\x5\xAAV\x2\x82E\x82C\x3\x2\x2\x2"+
		"\x82F\x832\x3\x2\x2\x2\x830\x82E\x3\x2\x2\x2\x830\x831\x3\x2\x2\x2\x831"+
		"\x835\x3\x2\x2\x2\x832\x830\x3\x2\x2\x2\x833\x834\a\x6\x2\x2\x834\x836"+
		"\x5\xFE\x80\x2\x835\x833\x3\x2\x2\x2\x835\x836\x3\x2\x2\x2\x836\x838\x3"+
		"\x2\x2\x2\x837\x820\x3\x2\x2\x2\x837\x82A\x3\x2\x2\x2\x838\xA9\x3\x2\x2"+
		"\x2\x839\x83A\x5\xFA~\x2\x83A\x83B\x5\xCCg\x2\x83B\x83C\x5\xCEh\x2\x83C"+
		"\xAB\x3\x2\x2\x2\x83D\x83F\a.\x2\x2\x83E\x840\a\x41\x2\x2\x83F\x83E\x3"+
		"\x2\x2\x2\x83F\x840\x3\x2\x2\x2\x840\x841\x3\x2\x2\x2\x841\x846\x5\xAE"+
		"X\x2\x842\x843\a\x127\x2\x2\x843\x845\x5\xAEX\x2\x844\x842\x3\x2\x2\x2"+
		"\x845\x848\x3\x2\x2\x2\x846\x844\x3\x2\x2\x2\x846\x847\x3\x2\x2\x2\x847"+
		"\x849\x3\x2\x2\x2\x848\x846\x3\x2\x2\x2\x849\x84A\x5\xE\b\x2\x84A\x8C3"+
		"\x3\x2\x2\x2\x84B\x84C\a\x41\x2\x2\x84C\x84D\a.\x2\x2\x84D\x852\x5\xAE"+
		"X\x2\x84E\x84F\a\x127\x2\x2\x84F\x851\x5\xAEX\x2\x850\x84E\x3\x2\x2\x2"+
		"\x851\x854\x3\x2\x2\x2\x852\x850\x3\x2\x2\x2\x852\x853\x3\x2\x2\x2\x853"+
		"\x855\x3\x2\x2\x2\x854\x852\x3\x2\x2\x2\x855\x856\x5\xE\b\x2\x856\x8C3"+
		"\x3\x2\x2\x2\x857\x858\x6W\x14\x2\x858\x859\a\x41\x2\x2\x859\x85E\x5\xAE"+
		"X\x2\x85A\x85B\a\x127\x2\x2\x85B\x85D\x5\xAEX\x2\x85C\x85A\x3\x2\x2\x2"+
		"\x85D\x860\x3\x2\x2\x2\x85E\x85C\x3\x2\x2\x2\x85E\x85F\x3\x2\x2\x2\x85F"+
		"\x861\x3\x2\x2\x2\x860\x85E\x3\x2\x2\x2\x861\x862\x5\xE\b\x2\x862\x8C3"+
		"\x3\x2\x2\x2\x863\x865\a\x41\x2\x2\x864\x863\x3\x2\x2\x2\x864\x865\x3"+
		"\x2\x2\x2\x865\x866\x3\x2\x2\x2\x866\x867\a\x94\x2\x2\x867\x86C\x5\xB0"+
		"Y\x2\x868\x869\a\x127\x2\x2\x869\x86B\x5\xB0Y\x2\x86A\x868\x3\x2\x2\x2"+
		"\x86B\x86E\x3\x2\x2\x2\x86C\x86A\x3\x2\x2\x2\x86C\x86D\x3\x2\x2\x2\x86D"+
		"\x86F\x3\x2\x2\x2\x86E\x86C\x3\x2\x2\x2\x86F\x870\x5\xE\b\x2\x870\x8C3"+
		"\x3\x2\x2\x2\x871\x873\a\x41\x2\x2\x872\x874\a.\x2\x2\x873\x872\x3\x2"+
		"\x2\x2\x873\x874\x3\x2\x2\x2\x874\x875\x3\x2\x2\x2\x875\x876\a`\x2\x2"+
		"\x876\x87B\x5\xB0Y\x2\x877\x878\a\x127\x2\x2\x878\x87A\x5\xB0Y\x2\x879"+
		"\x877\x3\x2\x2\x2\x87A\x87D\x3\x2\x2\x2\x87B\x879\x3\x2\x2\x2\x87B\x87C"+
		"\x3\x2\x2\x2\x87C\x87E\x3\x2\x2\x2\x87D\x87B\x3\x2\x2\x2\x87E\x87F\x5"+
		"\xE\b\x2\x87F\x8C3\x3\x2\x2\x2\x880\x882\a.\x2\x2\x881\x883\a\x41\x2\x2"+
		"\x882\x881\x3\x2\x2\x2\x882\x883\x3\x2\x2\x2\x883\x884\x3\x2\x2\x2\x884"+
		"\x885\a`\x2\x2\x885\x88A\x5\xB0Y\x2\x886\x887\a\x127\x2\x2\x887\x889\x5"+
		"\xB0Y\x2\x888\x886\x3\x2\x2\x2\x889\x88C\x3\x2\x2\x2\x88A\x888\x3\x2\x2"+
		"\x2\x88A\x88B\x3\x2\x2\x2\x88B\x88D\x3\x2\x2\x2\x88C\x88A\x3\x2\x2\x2"+
		"\x88D\x88E\x5\xE\b\x2\x88E\x8C3\x3\x2\x2\x2\x88F\x891\aJ\x2\x2\x890\x892"+
		"\a\x41\x2\x2\x891\x890\x3\x2\x2\x2\x891\x892\x3\x2\x2\x2\x892\x893\x3"+
		"\x2\x2\x2\x893\x894\a\x94\x2\x2\x894\x899\x5\xB0Y\x2\x895\x896\a\x127"+
		"\x2\x2\x896\x898\x5\xB0Y\x2\x897\x895\x3\x2\x2\x2\x898\x89B\x3\x2\x2\x2"+
		"\x899\x897\x3\x2\x2\x2\x899\x89A\x3\x2\x2\x2\x89A\x89C\x3\x2\x2\x2\x89B"+
		"\x899\x3\x2\x2\x2\x89C\x89D\x5\xE\b\x2\x89D\x8C3\x3\x2\x2\x2\x89E\x8A0"+
		"\aJ\x2\x2\x89F\x8A1\a\x41\x2\x2\x8A0\x89F\x3\x2\x2\x2\x8A0\x8A1\x3\x2"+
		"\x2\x2\x8A1\x8A3\x3\x2\x2\x2\x8A2\x8A4\a.\x2\x2\x8A3\x8A2\x3\x2\x2\x2"+
		"\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A5\x3\x2\x2\x2\x8A5\x8A6\a`\x2\x2\x8A6\x8AB"+
		"\x5\xB0Y\x2\x8A7\x8A8\a\x127\x2\x2\x8A8\x8AA\x5\xB0Y\x2\x8A9\x8A7\x3\x2"+
		"\x2\x2\x8AA\x8AD\x3\x2\x2\x2\x8AB\x8A9\x3\x2\x2\x2\x8AB\x8AC\x3\x2\x2"+
		"\x2\x8AC\x8AE\x3\x2\x2\x2\x8AD\x8AB\x3\x2\x2\x2\x8AE\x8AF\x5\xE\b\x2\x8AF"+
		"\x8C3\x3\x2\x2\x2\x8B0\x8B6\a\x94\x2\x2\x8B1\x8B3\a.\x2\x2\x8B2\x8B1\x3"+
		"\x2\x2\x2\x8B2\x8B3\x3\x2\x2\x2\x8B3\x8B4\x3\x2\x2\x2\x8B4\x8B6\a`\x2"+
		"\x2\x8B5\x8B0\x3\x2\x2\x2\x8B5\x8B2\x3\x2\x2\x2\x8B6\x8B7\x3\x2\x2\x2"+
		"\x8B7\x8B8\x5\x116\x8C\x2\x8B8\x8B9\x5\xCCg\x2\x8B9\x8BA\x5\xCEh\x2\x8BA"+
		"\x8BB\x5\xE\b\x2\x8BB\x8C3\x3\x2\x2\x2\x8BC\x8BD\a.\x2\x2\x8BD\x8BE\x5"+
		"\x118\x8D\x2\x8BE\x8BF\x5\xCCg\x2\x8BF\x8C0\x5\xCEh\x2\x8C0\x8C1\x5\xE"+
		"\b\x2\x8C1\x8C3\x3\x2\x2\x2\x8C2\x83D\x3\x2\x2\x2\x8C2\x84B\x3\x2\x2\x2"+
		"\x8C2\x857\x3\x2\x2\x2\x8C2\x864\x3\x2\x2\x2\x8C2\x871\x3\x2\x2\x2\x8C2"+
		"\x880\x3\x2\x2\x2\x8C2\x88F\x3\x2\x2\x2\x8C2\x89E\x3\x2\x2\x2\x8C2\x8B5"+
		"\x3\x2\x2\x2\x8C2\x8BC\x3\x2\x2\x2\x8C3\xAD\x3\x2\x2\x2\x8C4\x8C6\aU\x2"+
		"\x2\x8C5\x8C4\x3\x2\x2\x2\x8C5\x8C6\x3\x2\x2\x2\x8C6\x8C8\x3\x2\x2\x2"+
		"\x8C7\x8C9\a\x12\x2\x2\x8C8\x8C7\x3\x2\x2\x2\x8C8\x8C9\x3\x2\x2\x2\x8C9"+
		"\x8CA\x3\x2\x2\x2\x8CA\x8CF\x5\xFA~\x2\x8CB\x8CC\a\x124\x2\x2\x8CC\x8CD"+
		"\x5\x64\x33\x2\x8CD\x8CE\a\x125\x2\x2\x8CE\x8D0\x3\x2\x2\x2\x8CF\x8CB"+
		"\x3\x2\x2\x2\x8CF\x8D0\x3\x2\x2\x2\x8D0\x8D4\x3\x2\x2\x2\x8D1\x8D2\x5"+
		"\xCCg\x2\x8D2\x8D3\x5\xCEh\x2\x8D3\x8D5\x3\x2\x2\x2\x8D4\x8D1\x3\x2\x2"+
		"\x2\x8D4\x8D5\x3\x2\x2\x2\x8D5\x8DB\x3\x2\x2\x2\x8D6\x8D7\t\r\x2\x2\x8D7"+
		"\x8D9\x5\xFE\x80\x2\x8D8\x8DA\x5\xC0\x61\x2\x8D9\x8D8\x3\x2\x2\x2\x8D9"+
		"\x8DA\x3\x2\x2\x2\x8DA\x8DC\x3\x2\x2\x2\x8DB\x8D6\x3\x2\x2\x2\x8DB\x8DC"+
		"\x3\x2\x2\x2\x8DC\x8EF\x3\x2\x2\x2\x8DD\x8DE\x6X\x15\x2\x8DE\x8DF\x5\xFA"+
		"~\x2\x8DF\x8E0\a\x120\x2\x2\x8E0\x8E1\x5\x64\x33\x2\x8E1\x8E5\a\x121\x2"+
		"\x2\x8E2\x8E3\x5\xCCg\x2\x8E3\x8E4\x5\xCEh\x2\x8E4\x8E6\x3\x2\x2\x2\x8E5"+
		"\x8E2\x3\x2\x2\x2\x8E5\x8E6\x3\x2\x2\x2\x8E6\x8EC\x3\x2\x2\x2\x8E7\x8E8"+
		"\t\r\x2\x2\x8E8\x8EA\x5\xFE\x80\x2\x8E9\x8EB\x5\xC0\x61\x2\x8EA\x8E9\x3"+
		"\x2\x2\x2\x8EA\x8EB\x3\x2\x2\x2\x8EB\x8ED\x3\x2\x2\x2\x8EC\x8E7\x3\x2"+
		"\x2\x2\x8EC\x8ED\x3\x2\x2\x2\x8ED\x8EF\x3\x2\x2\x2\x8EE\x8C5\x3\x2\x2"+
		"\x2\x8EE\x8DD\x3\x2\x2\x2\x8EF\xAF\x3\x2\x2\x2\x8F0\x8F2\aU\x2\x2\x8F1"+
		"\x8F0\x3\x2\x2\x2\x8F1\x8F2\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F4"+
		"\x5\xFA~\x2\x8F4\x8F5\x5\xCCg\x2\x8F5\x8F6\x5\xCEh\x2\x8F6\xB1\x3\x2\x2"+
		"\x2\x8F7\x8F8\a \x2\x2\x8F8\x8FD\x5\xF8}\x2\x8F9\x8FA\a\x127\x2\x2\x8FA"+
		"\x8FC\x5\xF8}\x2\x8FB\x8F9\x3\x2\x2\x2\x8FC\x8FF\x3\x2\x2\x2\x8FD\x8FB"+
		"\x3\x2\x2\x2\x8FD\x8FE\x3\x2\x2\x2\x8FE\x902\x3\x2\x2\x2\x8FF\x8FD\x3"+
		"\x2\x2\x2\x900\x901\a-\x2\x2\x901\x903\x5\xF8}\x2\x902\x900\x3\x2\x2\x2"+
		"\x902\x903\x3\x2\x2\x2\x903\x904\x3\x2\x2\x2\x904\x905\x5\xE\b\x2\x905"+
		"\xB3\x3\x2\x2\x2\x906\x907\t(\x2\x2\x907\x90C\x5\xB6\\\x2\x908\x909\a"+
		"\x127\x2\x2\x909\x90B\x5\xB6\\\x2\x90A\x908\x3\x2\x2\x2\x90B\x90E\x3\x2"+
		"\x2\x2\x90C\x90A\x3\x2\x2\x2\x90C\x90D\x3\x2\x2\x2\x90D\x90F\x3\x2\x2"+
		"\x2\x90E\x90C\x3\x2\x2\x2\x90F\x910\x5\xE\b\x2\x910\xB5\x3\x2\x2\x2\x911"+
		"\x913\a\x129\x2\x2\x912\x911\x3\x2\x2\x2\x912\x913\x3\x2\x2\x2\x913\x914"+
		"\x3\x2\x2\x2\x914\x919\x5\xFC\x7F\x2\x915\x916\a\x124\x2\x2\x916\x917"+
		"\x5\x64\x33\x2\x917\x918\a\x125\x2\x2\x918\x91A\x3\x2\x2\x2\x919\x915"+
		"\x3\x2\x2\x2\x919\x91A\x3\x2\x2\x2\x91A\x91E\x3\x2\x2\x2\x91B\x91C\x5"+
		"\xCCg\x2\x91C\x91D\x5\xCEh\x2\x91D\x91F\x3\x2\x2\x2\x91E\x91B\x3\x2\x2"+
		"\x2\x91E\x91F\x3\x2\x2\x2\x91F\xB7\x3\x2\x2\x2\x920\x921\t(\x2\x2\x921"+
		"\x926\x5\xC6\x64\x2\x922\x923\a\x127\x2\x2\x923\x925\x5\xC6\x64\x2\x924"+
		"\x922\x3\x2\x2\x2\x925\x928\x3\x2\x2\x2\x926\x924\x3\x2\x2\x2\x926\x927"+
		"\x3\x2\x2\x2\x927\x929\x3\x2\x2\x2\x928\x926\x3\x2\x2\x2\x929\x92A\x5"+
		"\xE\b\x2\x92A\xB9\x3\x2\x2\x2\x92B\x92C\t)\x2\x2\x92C\x931\x5\xBE`\x2"+
		"\x92D\x92E\a\x127\x2\x2\x92E\x930\x5\xBE`\x2\x92F\x92D\x3\x2\x2\x2\x930"+
		"\x933\x3\x2\x2\x2\x931\x92F\x3\x2\x2\x2\x931\x932\x3\x2\x2\x2\x932\x934"+
		"\x3\x2\x2\x2\x933\x931\x3\x2\x2\x2\x934\x935\x5\xE\b\x2\x935\x951\x3\x2"+
		"\x2\x2\x936\x938\a;\x2\x2\x937\x939\a\x9C\x2\x2\x938\x937\x3\x2\x2\x2"+
		"\x938\x939\x3\x2\x2\x2\x939\x93A\x3\x2\x2\x2\x93A\x93F\x5\xBE`\x2\x93B"+
		"\x93C\a\x127\x2\x2\x93C\x93E\x5\xBE`\x2\x93D\x93B\x3\x2\x2\x2\x93E\x941"+
		"\x3\x2\x2\x2\x93F\x93D\x3\x2\x2\x2\x93F\x940\x3\x2\x2\x2\x940\x942\x3"+
		"\x2\x2\x2\x941\x93F\x3\x2\x2\x2\x942\x943\x5\xE\b\x2\x943\x951\x3\x2\x2"+
		"\x2\x944\x945\a.\x2\x2\x945\x946\a\x9C\x2\x2\x946\x94B\x5\xBE`\x2\x947"+
		"\x948\a\x127\x2\x2\x948\x94A\x5\xBE`\x2\x949\x947\x3\x2\x2\x2\x94A\x94D"+
		"\x3\x2\x2\x2\x94B\x949\x3\x2\x2\x2\x94B\x94C\x3\x2\x2\x2\x94C\x94E\x3"+
		"\x2\x2\x2\x94D\x94B\x3\x2\x2\x2\x94E\x94F\x5\xE\b\x2\x94F\x951\x3\x2\x2"+
		"\x2\x950\x92B\x3\x2\x2\x2\x950\x936\x3\x2\x2\x2\x950\x944\x3\x2\x2\x2"+
		"\x951\xBB\x3\x2\x2\x2\x952\x953\a\xCE\x2\x2\x953\x958\x5\xC2\x62\x2\x954"+
		"\x955\a\x127\x2\x2\x955\x957\x5\xC2\x62\x2\x956\x954\x3\x2\x2\x2\x957"+
		"\x95A\x3\x2\x2\x2\x958\x956\x3\x2\x2\x2\x958\x959\x3\x2\x2\x2\x959\x95B"+
		"\x3\x2\x2\x2\x95A\x958\x3\x2\x2\x2\x95B\x95C\x5\xE\b\x2\x95C\xBD\x3\x2"+
		"\x2\x2\x95D\x95F\a\x129\x2\x2\x95E\x95D\x3\x2\x2\x2\x95E\x95F\x3\x2\x2"+
		"\x2\x95F\x960\x3\x2\x2\x2\x960\x977\x5\xFC\x7F\x2\x961\x962\a\x124\x2"+
		"\x2\x962\x967\x5\xCEh\x2\x963\x964\a\x127\x2\x2\x964\x966\x5\xCEh\x2\x965"+
		"\x963\x3\x2\x2\x2\x966\x969\x3\x2\x2\x2\x967\x965\x3\x2\x2\x2\x967\x968"+
		"\x3\x2\x2\x2\x968\x96A\x3\x2\x2\x2\x969\x967\x3\x2\x2\x2\x96A\x96B\a\x125"+
		"\x2\x2\x96B\x978\x3\x2\x2\x2\x96C\x96D\a\x120\x2\x2\x96D\x972\x5\xCEh"+
		"\x2\x96E\x96F\a\x127\x2\x2\x96F\x971\x5\xCEh\x2\x970\x96E\x3\x2\x2\x2"+
		"\x971\x974\x3\x2\x2\x2\x972\x970\x3\x2\x2\x2\x972\x973\x3\x2\x2\x2\x973"+
		"\x975\x3\x2\x2\x2\x974\x972\x3\x2\x2\x2\x975\x976\a\x121\x2\x2\x976\x978"+
		"\x3\x2\x2\x2\x977\x961\x3\x2\x2\x2\x977\x96C\x3\x2\x2\x2\x978\x97A\x3"+
		"\x2\x2\x2\x979\x97B\x5\xC4\x63\x2\x97A\x979\x3\x2\x2\x2\x97A\x97B\x3\x2"+
		"\x2\x2\x97B\x999\x3\x2\x2\x2\x97C\x993\x5\xCEh\x2\x97D\x97E\a\x124\x2"+
		"\x2\x97E\x983\x5\xCEh\x2\x97F\x980\a\x127\x2\x2\x980\x982\x5\xCEh\x2\x981"+
		"\x97F\x3\x2\x2\x2\x982\x985\x3\x2\x2\x2\x983\x981\x3\x2\x2\x2\x983\x984"+
		"\x3\x2\x2\x2\x984\x986\x3\x2\x2\x2\x985\x983\x3\x2\x2\x2\x986\x987\a\x125"+
		"\x2\x2\x987\x994\x3\x2\x2\x2\x988\x989\a\x120\x2\x2\x989\x98E\x5\xCEh"+
		"\x2\x98A\x98B\a\x127\x2\x2\x98B\x98D\x5\xCEh\x2\x98C\x98A\x3\x2\x2\x2"+
		"\x98D\x990\x3\x2\x2\x2\x98E\x98C\x3\x2\x2\x2\x98E\x98F\x3\x2\x2\x2\x98F"+
		"\x991\x3\x2\x2\x2\x990\x98E\x3\x2\x2\x2\x991\x992\a\x121\x2\x2\x992\x994"+
		"\x3\x2\x2\x2\x993\x97D\x3\x2\x2\x2\x993\x988\x3\x2\x2\x2\x994\x996\x3"+
		"\x2\x2\x2\x995\x997\x5\xC4\x63\x2\x996\x995\x3\x2\x2\x2\x996\x997\x3\x2"+
		"\x2\x2\x997\x999\x3\x2\x2\x2\x998\x95E\x3\x2\x2\x2\x998\x97C\x3\x2\x2"+
		"\x2\x999\xBF\x3\x2\x2\x2\x99A\x99B\a\x89\x2\x2\x99B\x99C\x5\xF8}\x2\x99C"+
		"\xC1\x3\x2\x2\x2\x99D\x99F\x5\xFC\x7F\x2\x99E\x9A0\x5\xC4\x63\x2\x99F"+
		"\x99E\x3\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\xC3\x3\x2\x2\x2\x9A1\x9A2"+
		"\a\x6\x2\x2\x9A2\x9A4\x5\xFE\x80\x2\x9A3\x9A5\x5\xC0\x61\x2\x9A4\x9A3"+
		"\x3\x2\x2\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\xC5\x3\x2\x2\x2\x9A6\x9A8\a\x129"+
		"\x2\x2\x9A7\x9A6\x3\x2\x2\x2\x9A7\x9A8\x3\x2\x2\x2\x9A8\x9A9\x3\x2\x2"+
		"\x2\x9A9\x9AD\x5\xFC\x7F\x2\x9AA\x9AB\x5\xCCg\x2\x9AB\x9AC\x5\xCEh\x2"+
		"\x9AC\x9AE\x3\x2\x2\x2\x9AD\x9AA\x3\x2\x2\x2\x9AD\x9AE\x3\x2\x2\x2\x9AE"+
		"\x9B0\x3\x2\x2\x2\x9AF\x9B1\x5\xC4\x63\x2\x9B0\x9AF\x3\x2\x2\x2\x9B0\x9B1"+
		"\x3\x2\x2\x2\x9B1\xC7\x3\x2\x2\x2\x9B2\x9B4\x5\xCA\x66\x2\x9B3\x9B2\x3"+
		"\x2\x2\x2\x9B3\x9B4\x3\x2\x2\x2\x9B4\x9B5\x3\x2\x2\x2\x9B5\x9B6\a.\x2"+
		"\x2\x9B6\x9B7\x5\x12\n\x2\x9B7\x9B8\x5\x14\v\x2\x9B8\x9B9\x5\xE\b\x2\x9B9"+
		"\x9BD\x5*\x16\x2\x9BA\x9BE\t\x4\x2\x2\x9BB\x9BC\a\x19\x2\x2\x9BC\x9BE"+
		"\x5\x12\n\x2\x9BD\x9BA\x3\x2\x2\x2\x9BD\x9BB\x3\x2\x2\x2\x9BE\x9BF\x3"+
		"\x2\x2\x2\x9BF\x9C0\a\x167\x2\x2\x9C0\xC9\x3\x2\x2\x2\x9C1\x9C3\t*\x2"+
		"\x2\x9C2\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C2\x3\x2\x2\x2"+
		"\x9C4\x9C5\x3\x2\x2\x2\x9C5\xCB\x3\x2\x2\x2\x9C6\x9C7\t+\x2\x2\x9C7\xCD"+
		"\x3\x2\x2\x2\x9C8\x9C9\bh\x1\x2\x9C9\x9CA\t,\x2\x2\x9CA\x9EE\x5\xF4{\x2"+
		"\x9CB\x9CC\t,\x2\x2\x9CC\x9D2\a\x129\x2\x2\x9CD\x9D3\x5\xF8}\x2\x9CE\x9CF"+
		"\a\x120\x2\x2\x9CF\x9D0\x5\xCEh\x2\x9D0\x9D1\a\x121\x2\x2\x9D1\x9D3\x3"+
		"\x2\x2\x2\x9D2\x9CD\x3\x2\x2\x2\x9D2\x9CE\x3\x2\x2\x2\x9D3\x9EE\x3\x2"+
		"\x2\x2\x9D4\x9D5\x5\x140\xA1\x2\x9D5\x9D6\a\x120\x2\x2\x9D6\x9D7\x5\xE8"+
		"u\x2\x9D7\x9D8\a\x121\x2\x2\x9D8\x9EE\x3\x2\x2\x2\x9D9\x9DA\x6h\x16\x2"+
		"\x9DA\x9DB\a\x120\x2\x2\x9DB\x9DC\x5\xFE\x80\x2\x9DC\x9DD\a\x121\x2\x2"+
		"\x9DD\x9DE\x5\xCEh\x1C\x9DE\x9EE\x3\x2\x2\x2\x9DF\x9E0\a{\x2\x2\x9E0\x9EE"+
		"\x5\xCEh\x1A\x9E1\x9E2\x6h\x17\x2\x9E2\x9E3\a\x90\x2\x2\x9E3\x9EE\x5\xCE"+
		"h\x19\x9E4\x9E5\t-\x2\x2\x9E5\x9EE\x5\xCEh\x18\x9E6\x9E7\t.\x2\x2\x9E7"+
		"\x9EE\x5\xCEh\v\x9E8\x9EA\a\x131\x2\x2\x9E9\x9EB\x5\xCEh\x2\x9EA\x9E9"+
		"\x3\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2\x9EB\x9EE\x3\x2\x2\x2\x9EC\x9EE\x5"+
		"\xD0i\x2\x9ED\x9C8\x3\x2\x2\x2\x9ED\x9CB\x3\x2\x2\x2\x9ED\x9D4\x3\x2\x2"+
		"\x2\x9ED\x9D9\x3\x2\x2\x2\x9ED\x9DF\x3\x2\x2\x2\x9ED\x9E1\x3\x2\x2\x2"+
		"\x9ED\x9E4\x3\x2\x2\x2\x9ED\x9E6\x3\x2\x2\x2\x9ED\x9E8\x3\x2\x2\x2\x9ED"+
		"\x9EC\x3\x2\x2\x2\x9EE\xA56\x3\x2\x2\x2\x9EF\x9F0\f\x14\x2\x2\x9F0\x9F1"+
		"\a\xFD\x2\x2\x9F1\xA55\x5\xCEh\x15\x9F2\x9F3\f\x13\x2\x2\x9F3\x9F4\t/"+
		"\x2\x2\x9F4\xA55\x5\xCEh\x14\x9F5\x9F6\f\x12\x2\x2\x9F6\x9F7\t\x30\x2"+
		"\x2\x9F7\xA55\x5\xCEh\x13\x9F8\x9F9\f\x11\x2\x2\x9F9\x9FA\a\xFE\x2\x2"+
		"\x9FA\xA55\x5\xCEh\x12\x9FB\x9FC\f\x10\x2\x2\x9FC\x9FD\a\xF0\x2\x2\x9FD"+
		"\x9FE\a\xF0\x2\x2\x9FE\xA55\x5\xCEh\x11\x9FF\xA00\f\xF\x2\x2\xA00\xA01"+
		"\t\x31\x2\x2\xA01\xA55\x5\xCEh\x10\xA02\xA03\f\xE\x2\x2\xA03\xA04\a\x129"+
		"\x2\x2\xA04\xA55\x5\xCEh\xF\xA05\xA06\f\r\x2\x2\xA06\xA07\a\x100\x2\x2"+
		"\xA07\xA55\x5\xCEh\xE\xA08\xA09\f\f\x2\x2\xA09\xA0A\a\x128\x2\x2\xA0A"+
		"\xA55\x5\xCEh\r\xA0B\xA0C\f\n\x2\x2\xA0C\xA0D\t\x32\x2\x2\xA0D\xA55\x5"+
		"\xCEh\v\xA0E\xA0F\f\t\x2\x2\xA0F\xA10\t\x33\x2\x2\xA10\xA55\x5\xCEh\n"+
		"\xA11\xA12\f\b\x2\x2\xA12\xA13\t\x34\x2\x2\xA13\xA55\x5\xCEh\t\xA14\xA15"+
		"\f\a\x2\x2\xA15\xA16\t\x35\x2\x2\xA16\xA55\x5\xCEh\b\xA17\xA18\f\x4\x2"+
		"\x2\xA18\xA19\t\x36\x2\x2\xA19\xA55\x5\xCEh\x4\xA1A\xA1B\f%\x2\x2\xA1B"+
		"\xA1C\t\x37\x2\x2\xA1C\xA55\x5\xF4{\x2\xA1D\xA1E\f#\x2\x2\xA1E\xA1F\t"+
		"\x37\x2\x2\xA1F\xA20\a\x120\x2\x2\xA20\xA21\x5\xCEh\x2\xA21\xA22\a\x121"+
		"\x2\x2\xA22\xA55\x3\x2\x2\x2\xA23\xA24\f\"\x2\x2\xA24\xA25\t\x37\x2\x2"+
		"\xA25\xA2B\a\x129\x2\x2\xA26\xA2C\x5\xF8}\x2\xA27\xA28\a\x120\x2\x2\xA28"+
		"\xA29\x5\xCEh\x2\xA29\xA2A\a\x121\x2\x2\xA2A\xA2C\x3\x2\x2\x2\xA2B\xA26"+
		"\x3\x2\x2\x2\xA2B\xA27\x3\x2\x2\x2\xA2C\xA55\x3\x2\x2\x2\xA2D\xA2E\f "+
		"\x2\x2\xA2E\xA2F\a\x120\x2\x2\xA2F\xA30\x5\xE8u\x2\xA30\xA31\a\x121\x2"+
		"\x2\xA31\xA55\x3\x2\x2\x2\xA32\xA33\f\x1E\x2\x2\xA33\xA34\a\x124\x2\x2"+
		"\xA34\xA35\x5\xE4s\x2\xA35\xA36\a\x125\x2\x2\xA36\xA55\x3\x2\x2\x2\xA37"+
		"\xA38\f\x1D\x2\x2\xA38\xA39\a\x103\x2\x2\xA39\xA55\x5\xD2j\x2\xA3A\xA3B"+
		"\f\x1B\x2\x2\xA3B\xA55\t\x38\x2\x2\xA3C\xA3D\f\x17\x2\x2\xA3D\xA3F\a,"+
		"\x2\x2\xA3E\xA40\a\x11E\x2\x2\xA3F\xA3E\x3\x2\x2\x2\xA3F\xA40\x3\x2\x2"+
		"\x2\xA40\xA41\x3\x2\x2\x2\xA41\xA55\a\xE2\x2\x2\xA42\xA43\f\x16\x2\x2"+
		"\xA43\xA45\a,\x2\x2\xA44\xA46\a\x11E\x2\x2\xA45\xA44\x3\x2\x2\x2\xA45"+
		"\xA46\x3\x2\x2\x2\xA46\xA47\x3\x2\x2\x2\xA47\xA4A\x5\xFE\x80\x2\xA48\xA49"+
		"\a\x94\x2\x2\xA49\xA4B\x5\xFA~\x2\xA4A\xA48\x3\x2\x2\x2\xA4A\xA4B\x3\x2"+
		"\x2\x2\xA4B\xA55\x3\x2\x2\x2\xA4C\xA4D\f\x15\x2\x2\xA4D\xA4E\az\x2\x2"+
		"\xA4E\xA55\x5\xFE\x80\x2\xA4F\xA50\f\x5\x2\x2\xA50\xA52\a\x131\x2\x2\xA51"+
		"\xA53\x5\xCEh\x2\xA52\xA51\x3\x2\x2\x2\xA52\xA53\x3\x2\x2\x2\xA53\xA55"+
		"\x3\x2\x2\x2\xA54\x9EF\x3\x2\x2\x2\xA54\x9F2\x3\x2\x2\x2\xA54\x9F5\x3"+
		"\x2\x2\x2\xA54\x9F8\x3\x2\x2\x2\xA54\x9FB\x3\x2\x2\x2\xA54\x9FF\x3\x2"+
		"\x2\x2\xA54\xA02\x3\x2\x2\x2\xA54\xA05\x3\x2\x2\x2\xA54\xA08\x3\x2\x2"+
		"\x2\xA54\xA0B\x3\x2\x2\x2\xA54\xA0E\x3\x2\x2\x2\xA54\xA11\x3\x2\x2\x2"+
		"\xA54\xA14\x3\x2\x2\x2\xA54\xA17\x3\x2\x2\x2\xA54\xA1A\x3\x2\x2\x2\xA54"+
		"\xA1D\x3\x2\x2\x2\xA54\xA23\x3\x2\x2\x2\xA54\xA2D\x3\x2\x2\x2\xA54\xA32"+
		"\x3\x2\x2\x2\xA54\xA37\x3\x2\x2\x2\xA54\xA3A\x3\x2\x2\x2\xA54\xA3C\x3"+
		"\x2\x2\x2\xA54\xA42\x3\x2\x2\x2\xA54\xA4C\x3\x2\x2\x2\xA54\xA4F\x3\x2"+
		"\x2\x2\xA55\xA58\x3\x2\x2\x2\xA56\xA54\x3\x2\x2\x2\xA56\xA57\x3\x2\x2"+
		"\x2\xA57\xCF\x3\x2\x2\x2\xA58\xA56\x3\x2\x2\x2\xA59\xAE8\a>\x2\x2\xA5A"+
		"\xAE8\a\x44\x2\x2\xA5B\xA5C\a\xE2\x2\x2\xA5C\xA5E\a\x120\x2\x2\xA5D\xA5F"+
		"\x5\xFE\x80\x2\xA5E\xA5D\x3\x2\x2\x2\xA5E\xA5F\x3\x2\x2\x2\xA5F\xA60\x3"+
		"\x2\x2\x2\xA60\xAE8\a\x121\x2\x2\xA61\xAE8\x5\x146\xA4\x2\xA62\xAE8\x5"+
		"\x148\xA5\x2\xA63\xAE8\x5\x106\x84\x2\xA64\xAE8\x5\x10A\x86\x2\xA65\xAE8"+
		"\x5\x112\x8A\x2\xA66\xAE8\x5\x11C\x8F\x2\xA67\xAE8\x5\x126\x94\x2\xA68"+
		"\xAE8\x5\x12C\x97\x2\xA69\xA6A\x6i\x31\x2\xA6A\xA6B\x5\xFE\x80\x2\xA6B"+
		"\xA6C\a\x122\x2\x2\xA6C\xA6D\x5\xCEh\x2\xA6D\xA6E\a\x127\x2\x2\xA6E\xA6F"+
		"\a\x12A\x2\x2\xA6F\xA70\x5\xF0y\x2\xA70\xA71\a\x120\x2\x2\xA71\xA72\a"+
		"\x121\x2\x2\xA72\xA73\a\x123\x2\x2\xA73\xAE8\x3\x2\x2\x2\xA74\xA75\x6"+
		"i\x32\x2\xA75\xA76\x5\xFE\x80\x2\xA76\xA77\a\x122\x2\x2\xA77\xA78\x5\xE8"+
		"u\x2\xA78\xA7A\a\x123\x2\x2\xA79\xA7B\x5\xD6l\x2\xA7A\xA79\x3\x2\x2\x2"+
		"\xA7A\xA7B\x3\x2\x2\x2\xA7B\xAE8\x3\x2\x2\x2\xA7C\xA7D\t\x39\x2\x2\xA7D"+
		"\xA7E\a\x120\x2\x2\xA7E\xA7F\x5\xCEh\x2\xA7F\xA80\a\x121\x2\x2\xA80\xAE8"+
		"\x3\x2\x2\x2\xA81\xA82\aG\x2\x2\xA82\xA83\a\x120\x2\x2\xA83\xA84\x5\xFE"+
		"\x80\x2\xA84\xA85\a\x121\x2\x2\xA85\xAE8\x3\x2\x2\x2\xA86\xA87\a@\x2\x2"+
		"\xA87\xA88\a\x120\x2\x2\xA88\xA89\x5\xFE\x80\x2\xA89\xA8A\a\x121\x2\x2"+
		"\xA8A\xAE8\x3\x2\x2\x2\xA8B\xA8C\aV\x2\x2\xA8C\xA8E\a\x120\x2\x2\xA8D"+
		"\xA8F\x5\xFE\x80\x2\xA8E\xA8D\x3\x2\x2\x2\xA8E\xA8F\x3\x2\x2\x2\xA8F\xA90"+
		"\x3\x2\x2\x2\xA90\xAE8\a\x121\x2\x2\xA91\xAE8\x5\xF4{\x2\xA92\xA93\x6"+
		"i\x33\x2\xA93\xA94\x5\x144\xA3\x2\xA94\xA95\a\x120\x2\x2\xA95\xA96\x5"+
		"\xCEh\x2\xA96\xA97\a\x121\x2\x2\xA97\xAE8\x3\x2\x2\x2\xA98\xA99\x6i\x34"+
		"\x2\xA99\xA9A\x5\x142\xA2\x2\xA9A\xA9B\a\x120\x2\x2\xA9B\xA9C\x5\xCEh"+
		"\x2\xA9C\xA9D\a\x121\x2\x2\xA9D\xAE8\x3\x2\x2\x2\xA9E\xA9F\x6i\x35\x2"+
		"\xA9F\xAA0\x5\x144\xA3\x2\xAA0\xAA1\a\x120\x2\x2\xAA1\xAA2\a\r\x2\x2\xAA2"+
		"\xAA3\a\x127\x2\x2\xAA3\xAA4\x5\xCEh\x2\xAA4\xAA5\a\x121\x2\x2\xAA5\xAE8"+
		"\x3\x2\x2\x2\xAA6\xAA7\x6i\x36\x2\xAA7\xAA8\x5\x142\xA2\x2\xAA8\xAA9\a"+
		"\x120\x2\x2\xAA9\xAAA\a\r\x2\x2\xAAA\xAAB\a\x127\x2\x2\xAAB\xAAC\x5\xCE"+
		"h\x2\xAAC\xAAD\a\x121\x2\x2\xAAD\xAE8\x3\x2\x2\x2\xAAE\xAAF\aS\x2\x2\xAAF"+
		"\xAB0\a\x120\x2\x2\xAB0\xAB1\x5\x144\xA3\x2\xAB1\xAB2\a\x127\x2\x2\xAB2"+
		"\xAB3\x5\xCEh\x2\xAB3\xAB4\a\x121\x2\x2\xAB4\xAE8\x3\x2\x2\x2\xAB5\xAB6"+
		"\aS\x2\x2\xAB6\xAB7\a\x120\x2\x2\xAB7\xAB8\x5\x142\xA2\x2\xAB8\xAB9\a"+
		"\x127\x2\x2\xAB9\xABA\x5\xCEh\x2\xABA\xABB\a\x121\x2\x2\xABB\xAE8\x3\x2"+
		"\x2\x2\xABC\xABD\a\xA7\x2\x2\xABD\xABE\a\x120\x2\x2\xABE\xABF\x5\xFE\x80"+
		"\x2\xABF\xAC0\a\x127\x2\x2\xAC0\xAC1\x5\xCEh\x2\xAC1\xAC2\a\x121\x2\x2"+
		"\xAC2\xAE8\x3\x2\x2\x2\xAC3\xAE8\x5\x104\x83\x2\xAC4\xAE8\x5\x102\x82"+
		"\x2\xAC5\xAE8\x5\xECw\x2\xAC6\xAC7\t:\x2\x2\xAC7\xAC8\a\x120\x2\x2\xAC8"+
		"\xACD\x5\xCEh\x2\xAC9\xACA\a\x127\x2\x2\xACA\xACC\x5\xCEh\x2\xACB\xAC9"+
		"\x3\x2\x2\x2\xACC\xACF\x3\x2\x2\x2\xACD\xACB\x3\x2\x2\x2\xACD\xACE\x3"+
		"\x2\x2\x2\xACE\xAD0\x3\x2\x2\x2\xACF\xACD\x3\x2\x2\x2\xAD0\xAD1\a\x121"+
		"\x2\x2\xAD1\xAE8\x3\x2\x2\x2\xAD2\xAD3\x6i\x37\x2\xAD3\xAE8\x5\xD4k\x2"+
		"\xAD4\xAD5\a\x129\x2\x2\xAD5\xAD6\a\x120\x2\x2\xAD6\xAD7\x5\xCEh\x2\xAD7"+
		"\xAD8\a\x121\x2\x2\xAD8\xAE8\x3\x2\x2\x2\xAD9\xADA\a\x129\x2\x2\xADA\xAE8"+
		"\x5\xF8}\x2\xADB\xADC\a\x120\x2\x2\xADC\xAE1\x5\xCEh\x2\xADD\xADE\a\x127"+
		"\x2\x2\xADE\xAE0\x5\xCEh\x2\xADF\xADD\x3\x2\x2\x2\xAE0\xAE3\x3\x2\x2\x2"+
		"\xAE1\xADF\x3\x2\x2\x2\xAE1\xAE2\x3\x2\x2\x2\xAE2\xAE4\x3\x2\x2\x2\xAE3"+
		"\xAE1\x3\x2\x2\x2\xAE4\xAE5\a\x121\x2\x2\xAE5\xAE8\x3\x2\x2\x2\xAE6\xAE8"+
		"\aw\x2\x2\xAE7\xA59\x3\x2\x2\x2\xAE7\xA5A\x3\x2\x2\x2\xAE7\xA5B\x3\x2"+
		"\x2\x2\xAE7\xA61\x3\x2\x2\x2\xAE7\xA62\x3\x2\x2\x2\xAE7\xA63\x3\x2\x2"+
		"\x2\xAE7\xA64\x3\x2\x2\x2\xAE7\xA65\x3\x2\x2\x2\xAE7\xA66\x3\x2\x2\x2"+
		"\xAE7\xA67\x3\x2\x2\x2\xAE7\xA68\x3\x2\x2\x2\xAE7\xA69\x3\x2\x2\x2\xAE7"+
		"\xA74\x3\x2\x2\x2\xAE7\xA7C\x3\x2\x2\x2\xAE7\xA81\x3\x2\x2\x2\xAE7\xA86"+
		"\x3\x2\x2\x2\xAE7\xA8B\x3\x2\x2\x2\xAE7\xA91\x3\x2\x2\x2\xAE7\xA92\x3"+
		"\x2\x2\x2\xAE7\xA98\x3\x2\x2\x2\xAE7\xA9E\x3\x2\x2\x2\xAE7\xAA6\x3\x2"+
		"\x2\x2\xAE7\xAAE\x3\x2\x2\x2\xAE7\xAB5\x3\x2\x2\x2\xAE7\xABC\x3\x2\x2"+
		"\x2\xAE7\xAC3\x3\x2\x2\x2\xAE7\xAC4\x3\x2\x2\x2\xAE7\xAC5\x3\x2\x2\x2"+
		"\xAE7\xAC6\x3\x2\x2\x2\xAE7\xAD2\x3\x2\x2\x2\xAE7\xAD4\x3\x2\x2\x2\xAE7"+
		"\xAD9\x3\x2\x2\x2\xAE7\xADB\x3\x2\x2\x2\xAE7\xAE6\x3\x2\x2\x2\xAE8\xD1"+
		"\x3\x2\x2\x2\xAE9\xAEA\bj\x1\x2\xAEA\xAEB\t\x37\x2\x2\xAEB\xAF1\x5\xF4"+
		"{\x2\xAEC\xAED\a\x124\x2\x2\xAED\xAEE\x5\xE4s\x2\xAEE\xAEF\a\x125\x2\x2"+
		"\xAEF\xAF1\x3\x2\x2\x2\xAF0\xAE9\x3\x2\x2\x2\xAF0\xAEC\x3\x2\x2\x2\xAF1"+
		"\xB04\x3\x2\x2\x2\xAF2\xAF3\f\x5\x2\x2\xAF3\xAF4\a\x103\x2\x2\xAF4\xB03"+
		"\x5\xD2j\x5\xAF5\xAF6\f\b\x2\x2\xAF6\xAF7\t\x37\x2\x2\xAF7\xB03\x5\xF4"+
		"{\x2\xAF8\xAF9\f\a\x2\x2\xAF9\xAFA\a\x120\x2\x2\xAFA\xAFB\x5\xE8u\x2\xAFB"+
		"\xAFC\a\x121\x2\x2\xAFC\xB03\x3\x2\x2\x2\xAFD\xAFE\f\x6\x2\x2\xAFE\xAFF"+
		"\a\x124\x2\x2\xAFF\xB00\x5\xE4s\x2\xB00\xB01\a\x125\x2\x2\xB01\xB03\x3"+
		"\x2\x2\x2\xB02\xAF2\x3\x2\x2\x2\xB02\xAF5\x3\x2\x2\x2\xB02\xAF8\x3\x2"+
		"\x2\x2\xB02\xAFD\x3\x2\x2\x2\xB03\xB06\x3\x2\x2\x2\xB04\xB02\x3\x2\x2"+
		"\x2\xB04\xB05\x3\x2\x2\x2\xB05\xD3\x3\x2\x2\x2\xB06\xB04\x3\x2\x2\x2\xB07"+
		"\xB08\x6k<\x2\xB08\xB09\a\x31\x2\x2\xB09\xB0A\a\x12B\x2\x2\xB0A\xB44\x5"+
		"\x13C\x9F\x2\xB0B\xB0C\a \x2\x2\xB0C\xB10\a\x12B\x2\x2\xB0D\xB0E\x5\x13C"+
		"\x9F\x2\xB0E\xB0F\a\x12B\x2\x2\xB0F\xB11\x3\x2\x2\x2\xB10\xB0D\x3\x2\x2"+
		"\x2\xB10\xB11\x3\x2\x2\x2\xB11\xB12\x3\x2\x2\x2\xB12\xB44\x5\x13C\x9F"+
		"\x2\xB13\xB14\x6k=\x2\xB14\xB15\x5\x13C\x9F\x2\xB15\xB16\a\x12B\x2\x2"+
		"\xB16\xB17\x5\x13C\x9F\x2\xB17\xB44\x3\x2\x2\x2\xB18\xB19\x6k>\x2\xB19"+
		"\xB1A\a\x120\x2\x2\xB1A\xB1B\x5\x13C\x9F\x2\xB1B\xB1C\a\x121\x2\x2\xB1C"+
		"\xB1D\a\x12B\x2\x2\xB1D\xB1E\x5\x13C\x9F\x2\xB1E\xB44\x3\x2\x2\x2\xB1F"+
		"\xB20\x5\x13C\x9F\x2\xB20\xB21\a\x12B\x2\x2\xB21\xB22\a\x129\x2\x2\xB22"+
		"\xB23\x5\xCEh\x2\xB23\xB44\x3\x2\x2\x2\xB24\xB25\a \x2\x2\xB25\xB29\a"+
		"\x12B\x2\x2\xB26\xB27\x5\x13C\x9F\x2\xB27\xB28\a\x12B\x2\x2\xB28\xB2A"+
		"\x3\x2\x2\x2\xB29\xB26\x3\x2\x2\x2\xB29\xB2A\x3\x2\x2\x2\xB2A\xB2B\x3"+
		"\x2\x2\x2\xB2B\xB2C\a\x129\x2\x2\xB2C\xB44\x5\xCEh\x2\xB2D\xB2E\a\x120"+
		"\x2\x2\xB2E\xB2F\x5\x13C\x9F\x2\xB2F\xB30\a\x121\x2\x2\xB30\xB31\a\x12B"+
		"\x2\x2\xB31\xB32\a\x129\x2\x2\xB32\xB33\x5\xCEh\x2\xB33\xB44\x3\x2\x2"+
		"\x2\xB34\xB3A\x5\x13C\x9F\x2\xB35\xB36\a\x120\x2\x2\xB36\xB37\x5\xCEh"+
		"\x2\xB37\xB38\a\x121\x2\x2\xB38\xB3A\x3\x2\x2\x2\xB39\xB34\x3\x2\x2\x2"+
		"\xB39\xB35\x3\x2\x2\x2\xB3A\xB3B\x3\x2\x2\x2\xB3B\xB41\a\x12B\x2\x2\xB3C"+
		"\xB3D\a\x120\x2\x2\xB3D\xB3E\x5\xCEh\x2\xB3E\xB3F\a\x121\x2\x2\xB3F\xB42"+
		"\x3\x2\x2\x2\xB40\xB42\x5\xCEh\x2\xB41\xB3C\x3\x2\x2\x2\xB41\xB40\x3\x2"+
		"\x2\x2\xB42\xB44\x3\x2\x2\x2\xB43\xB07\x3\x2\x2\x2\xB43\xB0B\x3\x2\x2"+
		"\x2\xB43\xB13\x3\x2\x2\x2\xB43\xB18\x3\x2\x2\x2\xB43\xB1F\x3\x2\x2\x2"+
		"\xB43\xB24\x3\x2\x2\x2\xB43\xB2D\x3\x2\x2\x2\xB43\xB39\x3\x2\x2\x2\xB44"+
		"\xD5\x3\x2\x2\x2\xB45\xB48\x5\xD8m\x2\xB46\xB48\x5\xE2r\x2\xB47\xB45\x3"+
		"\x2\x2\x2\xB47\xB46\x3\x2\x2\x2\xB48\xD7\x3\x2\x2\x2\xB49\xB52\a\x122"+
		"\x2\x2\xB4A\xB4F\x5\xDAn\x2\xB4B\xB4C\a\x127\x2\x2\xB4C\xB4E\x5\xDAn\x2"+
		"\xB4D\xB4B\x3\x2\x2\x2\xB4E\xB51\x3\x2\x2\x2\xB4F\xB4D\x3\x2\x2\x2\xB4F"+
		"\xB50\x3\x2\x2\x2\xB50\xB53\x3\x2\x2\x2\xB51\xB4F\x3\x2\x2\x2\xB52\xB4A"+
		"\x3\x2\x2\x2\xB52\xB53\x3\x2\x2\x2\xB53\xB54\x3\x2\x2\x2\xB54\xB55\a\x123"+
		"\x2\x2\xB55\xD9\x3\x2\x2\x2\xB56\xB57\x5\xF8}\x2\xB57\xB58\x5\xCCg\x2"+
		"\xB58\xB59\x5\xDCo\x2\xB59\xDB\x3\x2\x2\x2\xB5A\xB5D\x5\xD6l\x2\xB5B\xB5D"+
		"\x5\xCEh\x2\xB5C\xB5A\x3\x2\x2\x2\xB5C\xB5B\x3\x2\x2\x2\xB5D\xDD\x3\x2"+
		"\x2\x2\xB5E\xB5F\a\x122\x2\x2\xB5F\xB64\x5\xE0q\x2\xB60\xB61\a\x127\x2"+
		"\x2\xB61\xB63\x5\xE0q\x2\xB62\xB60\x3\x2\x2\x2\xB63\xB66\x3\x2\x2\x2\xB64"+
		"\xB62\x3\x2\x2\x2\xB64\xB65\x3\x2\x2\x2\xB65\xB67\x3\x2\x2\x2\xB66\xB64"+
		"\x3\x2\x2\x2\xB67\xB68\a\x123\x2\x2\xB68\xDF\x3\x2\x2\x2\xB69\xB6C\x5"+
		"\xDEp\x2\xB6A\xB6C\x5\xCEh\x2\xB6B\xB69\x3\x2\x2\x2\xB6B\xB6A\x3\x2\x2"+
		"\x2\xB6C\xE1\x3\x2\x2\x2\xB6D\xB6E\a\x122\x2\x2\xB6E\xB73\x5\xE0q\x2\xB6F"+
		"\xB70\a\x127\x2\x2\xB70\xB72\x5\xE0q\x2\xB71\xB6F\x3\x2\x2\x2\xB72\xB75"+
		"\x3\x2\x2\x2\xB73\xB71\x3\x2\x2\x2\xB73\xB74\x3\x2\x2\x2\xB74\xB76\x3"+
		"\x2\x2\x2\xB75\xB73\x3\x2\x2\x2\xB76\xB77\a\x123\x2\x2\xB77\xE3\x3\x2"+
		"\x2\x2\xB78\xB7D\x5\xE6t\x2\xB79\xB7A\a\x127\x2\x2\xB7A\xB7C\x5\xE6t\x2"+
		"\xB7B\xB79\x3\x2\x2\x2\xB7C\xB7F\x3\x2\x2\x2\xB7D\xB7B\x3\x2\x2\x2\xB7D"+
		"\xB7E\x3\x2\x2\x2\xB7E\xE5\x3\x2\x2\x2\xB7F\xB7D\x3\x2\x2\x2\xB80\xB81"+
		"\x5\xCEh\x2\xB81\xE7\x3\x2\x2\x2\xB82\xB87\x5\xEAv\x2\xB83\xB84\a\x127"+
		"\x2\x2\xB84\xB86\x5\xEAv\x2\xB85\xB83\x3\x2\x2\x2\xB86\xB89\x3\x2\x2\x2"+
		"\xB87\xB85\x3\x2\x2\x2\xB87\xB88\x3\x2\x2\x2\xB88\xE9\x3\x2\x2\x2\xB89"+
		"\xB87\x3\x2\x2\x2\xB8A\xB8B\x6v?\x2\xB8B\xB8C\x5\xF8}\x2\xB8C\xB8E\a\x10B"+
		"\x2\x2\xB8D\xB8F\t;\x2\x2\xB8E\xB8D\x3\x2\x2\x2\xB8E\xB8F\x3\x2\x2\x2"+
		"\xB8F\xB90\x3\x2\x2\x2\xB90\xB91\x5\xCEh\x2\xB91\xBA3\x3\x2\x2\x2\xB92"+
		"\xB93\ah\x2\x2\xB93\xB94\a\x94\x2\x2\xB94\xBA3\x5\xFA~\x2\xB95\xB96\a"+
		"h\x2\x2\xB96\xB97\x5\xFA~\x2\xB97\xB98\a\x6\x2\x2\xB98\xB99\x5\xFE\x80"+
		"\x2\xB99\xBA3\x3\x2\x2\x2\xB9A\xB9B\ah\x2\x2\xB9B\xBA3\a\xE2\x2\x2\xB9C"+
		"\xB9E\t;\x2\x2\xB9D\xB9C\x3\x2\x2\x2\xB9D\xB9E\x3\x2\x2\x2\xB9E\xBA0\x3"+
		"\x2\x2\x2\xB9F\xBA1\x5\xCEh\x2\xBA0\xB9F\x3\x2\x2\x2\xBA0\xBA1\x3\x2\x2"+
		"\x2\xBA1\xBA3\x3\x2\x2\x2\xBA2\xB8A\x3\x2\x2\x2\xBA2\xB92\x3\x2\x2\x2"+
		"\xBA2\xB95\x3\x2\x2\x2\xBA2\xB9A\x3\x2\x2\x2\xBA2\xB9D\x3\x2\x2\x2\xBA3"+
		"\xEB\x3\x2\x2\x2\xBA4\xBA5\t<\x2\x2\xBA5\xBA6\a\x120\x2\x2\xBA6\xBA7\x5"+
		"\xCEh\x2\xBA7\xBA9\a\x127\x2\x2\xBA8\xBAA\x5\xCEh\x2\xBA9\xBA8\x3\x2\x2"+
		"\x2\xBA9\xBAA\x3\x2\x2\x2\xBAA\xBAB\x3\x2\x2\x2\xBAB\xBAD\a\x127\x2\x2"+
		"\xBAC\xBAE\x5\xCEh\x2\xBAD\xBAC\x3\x2\x2\x2\xBAD\xBAE\x3\x2\x2\x2\xBAE"+
		"\xBAF\x3\x2\x2\x2\xBAF\xBB0\a\x121\x2\x2\xBB0\xED\x3\x2\x2\x2\xBB1\xBB2"+
		"\bx\x1\x2\xBB2\xBB3\x5\xF2z\x2\xBB3\xBB4\a\x12C\x2\x2\xBB4\xBBB\x3\x2"+
		"\x2\x2\xBB5\xBB6\f\x4\x2\x2\xBB6\xBB7\x5\xF4{\x2\xBB7\xBB8\a\x12C\x2\x2"+
		"\xBB8\xBBA\x3\x2\x2\x2\xBB9\xBB5\x3\x2\x2\x2\xBBA\xBBD\x3\x2\x2\x2\xBBB"+
		"\xBB9\x3\x2\x2\x2\xBBB\xBBC\x3\x2\x2\x2\xBBC\xEF\x3\x2\x2\x2\xBBD\xBBB"+
		"\x3\x2\x2\x2\xBBE\xBBF\by\x1\x2\xBBF\xBC0\x5\xF2z\x2\xBC0\xBC6\x3\x2\x2"+
		"\x2\xBC1\xBC2\f\x4\x2\x2\xBC2\xBC3\a\x12C\x2\x2\xBC3\xBC5\x5\xF4{\x2\xBC4"+
		"\xBC1\x3\x2\x2\x2\xBC5\xBC8\x3\x2\x2\x2\xBC6\xBC4\x3\x2\x2\x2\xBC6\xBC7"+
		"\x3\x2\x2\x2\xBC7\xF1\x3\x2\x2\x2\xBC8\xBC6\x3\x2\x2\x2\xBC9\xBCA\a#\x2"+
		"\x2\xBCA\xBCB\a\x12D\x2\x2\xBCB\xBD2\x5\xF4{\x2\xBCC\xBCD\x5\xF8}\x2\xBCD"+
		"\xBCE\a\x12D\x2\x2\xBCE\xBCF\x5\xF4{\x2\xBCF\xBD2\x3\x2\x2\x2\xBD0\xBD2"+
		"\x5\xF4{\x2\xBD1\xBC9\x3\x2\x2\x2\xBD1\xBCC\x3\x2\x2\x2\xBD1\xBD0\x3\x2"+
		"\x2\x2\xBD2\xF3\x3\x2\x2\x2\xBD3\xBD5\x5\x13C\x9F\x2\xBD4\xBD6\x5\xF6"+
		"|\x2\xBD5\xBD4\x3\x2\x2\x2\xBD5\xBD6\x3\x2\x2\x2\xBD6\xF5\x3\x2\x2\x2"+
		"\xBD7\xBD8\a\xEE\x2\x2\xBD8\xBDD\x5\xFE\x80\x2\xBD9\xBDA\a\x127\x2\x2"+
		"\xBDA\xBDC\x5\xFE\x80\x2\xBDB\xBD9\x3\x2\x2\x2\xBDC\xBDF\x3\x2\x2\x2\xBDD"+
		"\xBDB\x3\x2\x2\x2\xBDD\xBDE\x3\x2\x2\x2\xBDE\xBE0\x3\x2\x2\x2\xBDF\xBDD"+
		"\x3\x2\x2\x2\xBE0\xBE1\a\xF0\x2\x2\xBE1\xF7\x3\x2\x2\x2\xBE2\xBE3\x5\x13C"+
		"\x9F\x2\xBE3\xF9\x3\x2\x2\x2\xBE4\xBE5\a\xD6\x2\x2\xBE5\xBE7\a\x12C\x2"+
		"\x2\xBE6\xBE4\x3\x2\x2\x2\xBE6\xBE7\x3\x2\x2\x2\xBE7\xBE8\x3\x2\x2\x2"+
		"\xBE8\xBE9\x5\x13C\x9F\x2\xBE9\xFB\x3\x2\x2\x2\xBEA\xBEB\a\xD6\x2\x2\xBEB"+
		"\xBED\a\x12C\x2\x2\xBEC\xBEA\x3\x2\x2\x2\xBEC\xBED\x3\x2\x2\x2\xBED\xBEE"+
		"\x3\x2\x2\x2\xBEE\xBEF\x5\xF8}\x2\xBEF\xFD\x3\x2\x2\x2\xBF0\xBF1\a\x9C"+
		"\x2\x2\xBF1\xBF2\a\x89\x2\x2\xBF2\xC02\x5\x102\x82\x2\xBF3\xBF4\x5\x102"+
		"\x82\x2\xBF4\xBF5\a\xA7\x2\x2\xBF5\xC02\x3\x2\x2\x2\xBF6\xBF8\x5\x102"+
		"\x82\x2\xBF7\xBF9\x5\x100\x81\x2\xBF8\xBF7\x3\x2\x2\x2\xBF9\xBFA\x3\x2"+
		"\x2\x2\xBFA\xBF8\x3\x2\x2\x2\xBFA\xBFB\x3\x2\x2\x2\xBFB\xC02\x3\x2\x2"+
		"\x2\xBFC\xC02\x5\x102\x82\x2\xBFD\xBFE\x5\x102\x82\x2\xBFE\xBFF\a\x103"+
		"\x2\x2\xBFF\xC02\x3\x2\x2\x2\xC00\xC02\x5\x10E\x88\x2\xC01\xBF0\x3\x2"+
		"\x2\x2\xC01\xBF3\x3\x2\x2\x2\xC01\xBF6\x3\x2\x2\x2\xC01\xBFC\x3\x2\x2"+
		"\x2\xC01\xBFD\x3\x2\x2\x2\xC01\xC00\x3\x2\x2\x2\xC02\xFF\x3\x2\x2\x2\xC03"+
		"\xC07\a\x124\x2\x2\xC04\xC06\a\x127\x2\x2\xC05\xC04\x3\x2\x2\x2\xC06\xC09"+
		"\x3\x2\x2\x2\xC07\xC05\x3\x2\x2\x2\xC07\xC08\x3\x2\x2\x2\xC08\xC0A\x3"+
		"\x2\x2\x2\xC09\xC07\x3\x2\x2\x2\xC0A\xC0D\a\x125\x2\x2\xC0B\xC0D\a\x144"+
		"\x2\x2\xC0C\xC03\x3\x2\x2\x2\xC0C\xC0B\x3\x2\x2\x2\xC0D\x101\x3\x2\x2"+
		"\x2\xC0E\xC12\x5\x144\xA3\x2\xC0F\xC12\x5\x142\xA2\x2\xC10\xC12\x5\xF0"+
		"y\x2\xC11\xC0E\x3\x2\x2\x2\xC11\xC0F\x3\x2\x2\x2\xC11\xC10\x3\x2\x2\x2"+
		"\xC12\x103\x3\x2\x2\x2\xC13\xC16\x5\x144\xA3\x2\xC14\xC16\x5\x142\xA2"+
		"\x2\xC15\xC13\x3\x2\x2\x2\xC15\xC14\x3\x2\x2\x2\xC16\x105\x3\x2\x2\x2"+
		"\xC17\xC18\a\xEE\x2\x2\xC18\xC19\x5\xFE\x80\x2\xC19\xC1A\a\xF0\x2\x2\xC1A"+
		"\xC1C\x3\x2\x2\x2\xC1B\xC17\x3\x2\x2\x2\xC1B\xC1C\x3\x2\x2\x2\xC1C\xC1D"+
		"\x3\x2\x2\x2\xC1D\xC1E\a\x122\x2\x2\xC1E\xC31\a\x123\x2\x2\xC1F\xC20\a"+
		"\xEE\x2\x2\xC20\xC21\x5\xFE\x80\x2\xC21\xC22\a\xF0\x2\x2\xC22\xC24\x3"+
		"\x2\x2\x2\xC23\xC1F\x3\x2\x2\x2\xC23\xC24\x3\x2\x2\x2\xC24\xC25\x3\x2"+
		"\x2\x2\xC25\xC26\a\x122\x2\x2\xC26\xC2B\x5\x108\x85\x2\xC27\xC28\a\x127"+
		"\x2\x2\xC28\xC2A\x5\x108\x85\x2\xC29\xC27\x3\x2\x2\x2\xC2A\xC2D\x3\x2"+
		"\x2\x2\xC2B\xC29\x3\x2\x2\x2\xC2B\xC2C\x3\x2\x2\x2\xC2C\xC2E\x3\x2\x2"+
		"\x2\xC2D\xC2B\x3\x2\x2\x2\xC2E\xC2F\a\x123\x2\x2\xC2F\xC31\x3\x2\x2\x2"+
		"\xC30\xC1B\x3\x2\x2\x2\xC30\xC23\x3\x2\x2\x2\xC31\x107\x3\x2\x2\x2\xC32"+
		"\xC34\x5\xCEh\x2\xC33\xC32\x3\x2\x2\x2\xC33\xC34\x3\x2\x2\x2\xC34\x109"+
		"\x3\x2\x2\x2\xC35\xC36\a\xE\x2\x2\xC36\xC3F\a\x122\x2\x2\xC37\xC3C\x5"+
		"\x10C\x87\x2\xC38\xC39\a\x127\x2\x2\xC39\xC3B\x5\x10C\x87\x2\xC3A\xC38"+
		"\x3\x2\x2\x2\xC3B\xC3E\x3\x2\x2\x2\xC3C\xC3A\x3\x2\x2\x2\xC3C\xC3D\x3"+
		"\x2\x2\x2\xC3D\xC40\x3\x2\x2\x2\xC3E\xC3C\x3\x2\x2\x2\xC3F\xC37\x3\x2"+
		"\x2\x2\xC3F\xC40\x3\x2\x2\x2\xC40\xC41\x3\x2\x2\x2\xC41\xC42\a\x123\x2"+
		"\x2\xC42\x10B\x3\x2\x2\x2\xC43\xC44\x5\xF8}\x2\xC44\xC45\x5\xCCg\x2\xC45"+
		"\xC46\x5\xCEh\x2\xC46\xC49\x3\x2\x2\x2\xC47\xC49\x5\xCEh\x2\xC48\xC43"+
		"\x3\x2\x2\x2\xC48\xC47\x3\x2\x2\x2\xC49\x10D\x3\x2\x2\x2\xC4A\xC4C\aq"+
		"\x2\x2\xC4B\xC4A\x3\x2\x2\x2\xC4B\xC4C\x3\x2\x2\x2\xC4C\xC4D\x3\x2\x2"+
		"\x2\xC4D\xC56\a\x120\x2\x2\xC4E\xC53\x5\x110\x89\x2\xC4F\xC50\a\x127\x2"+
		"\x2\xC50\xC52\x5\x110\x89\x2\xC51\xC4F\x3\x2\x2\x2\xC52\xC55\x3\x2\x2"+
		"\x2\xC53\xC51\x3\x2\x2\x2\xC53\xC54\x3\x2\x2\x2\xC54\xC57\x3\x2\x2\x2"+
		"\xC55\xC53\x3\x2\x2\x2\xC56\xC4E\x3\x2\x2\x2\xC56\xC57\x3\x2\x2\x2\xC57"+
		"\xC58\x3\x2\x2\x2\xC58\xC59\a\x121\x2\x2\xC59\x10F\x3\x2\x2\x2\xC5A\xC5B"+
		"\x5\xF8}\x2\xC5B\xC5C\a\x6\x2\x2\xC5C\xC5E\x3\x2\x2\x2\xC5D\xC5A\x3\x2"+
		"\x2\x2\xC5D\xC5E\x3\x2\x2\x2\xC5E\xC5F\x3\x2\x2\x2\xC5F\xC60\x5\xFE\x80"+
		"\x2\xC60\x111\x3\x2\x2\x2\xC61\xC62\aq\x2\x2\xC62\xC6B\a\x122\x2\x2\xC63"+
		"\xC68\x5\x114\x8B\x2\xC64\xC65\a\x127\x2\x2\xC65\xC67\x5\x114\x8B\x2\xC66"+
		"\xC64\x3\x2\x2\x2\xC67\xC6A\x3\x2\x2\x2\xC68\xC66\x3\x2\x2\x2\xC68\xC69"+
		"\x3\x2\x2\x2\xC69\xC6C\x3\x2\x2\x2\xC6A\xC68\x3\x2\x2\x2\xC6B\xC63\x3"+
		"\x2\x2\x2\xC6B\xC6C\x3\x2\x2\x2\xC6C\xC6D\x3\x2\x2\x2\xC6D\xC6E\a\x123"+
		"\x2\x2\xC6E\x113\x3\x2\x2\x2\xC6F\xC70\x5\xF8}\x2\xC70\xC71\x5\xCCg\x2"+
		"\xC71\xC72\x5\xCEh\x2\xC72\xC75\x3\x2\x2\x2\xC73\xC75\x5\xCEh\x2\xC74"+
		"\xC6F\x3\x2\x2\x2\xC74\xC73\x3\x2\x2\x2\xC75\x115\x3\x2\x2\x2\xC76\xC77"+
		"\a\x120\x2\x2\xC77\xC7C\x5\xFA~\x2\xC78\xC79\a\x127\x2\x2\xC79\xC7B\x5"+
		"\xFA~\x2\xC7A\xC78\x3\x2\x2\x2\xC7B\xC7E\x3\x2\x2\x2\xC7C\xC7A\x3\x2\x2"+
		"\x2\xC7C\xC7D\x3\x2\x2\x2\xC7D\xC7F\x3\x2\x2\x2\xC7E\xC7C\x3\x2\x2\x2"+
		"\xC7F\xC80\a\x121\x2\x2\xC80\x117\x3\x2\x2\x2\xC81\xC82\a\x120\x2\x2\xC82"+
		"\xC87\x5\x11A\x8E\x2\xC83\xC84\a\x127\x2\x2\xC84\xC86\x5\x11A\x8E\x2\xC85"+
		"\xC83\x3\x2\x2\x2\xC86\xC89\x3\x2\x2\x2\xC87\xC85\x3\x2\x2\x2\xC87\xC88"+
		"\x3\x2\x2\x2\xC88\xC8A\x3\x2\x2\x2\xC89\xC87\x3\x2\x2\x2\xC8A\xC8B\a\x121"+
		"\x2\x2\xC8B\x119\x3\x2\x2\x2\xC8C\xC8D\x5\xFA~\x2\xC8D\xC8E\a\x6\x2\x2"+
		"\xC8E\xC8F\x5\xFE\x80\x2\xC8F\x11B\x3\x2\x2\x2\xC90\xC91\a\x122\x2\x2"+
		"\xC91\xC93\a\x105\x2\x2\xC92\xC94\a\x15D\x2\x2\xC93\xC92\x3\x2\x2\x2\xC93"+
		"\xC94\x3\x2\x2\x2\xC94\xC95\x3\x2\x2\x2\xC95\xC96\x5\x11E\x90\x2\xC96"+
		"\xC97\a\x123\x2\x2\xC97\xCAD\x3\x2\x2\x2\xC98\xC99\a\x122\x2\x2\xC99\xC9B"+
		"\a\x128\x2\x2\xC9A\xC9C\x5\x120\x91\x2\xC9B\xC9A\x3\x2\x2\x2\xC9B\xC9C"+
		"\x3\x2\x2\x2\xC9C\xC9D\x3\x2\x2\x2\xC9D\xC9F\a\x128\x2\x2\xC9E\xCA0\a"+
		"\x15D\x2\x2\xC9F\xC9E\x3\x2\x2\x2\xC9F\xCA0\x3\x2\x2\x2\xCA0\xCA1\x3\x2"+
		"\x2\x2\xCA1\xCA2\x5\x11E\x90\x2\xCA2\xCA3\a\x123\x2\x2\xCA3\xCAD\x3\x2"+
		"\x2\x2\xCA4\xCA6\a\x122\x2\x2\xCA5\xCA7\x5\x120\x91\x2\xCA6\xCA5\x3\x2"+
		"\x2\x2\xCA6\xCA7\x3\x2\x2\x2\xCA7\xCA8\x3\x2\x2\x2\xCA8\xCA9\a\x15D\x2"+
		"\x2\xCA9\xCAA\x5\x11E\x90\x2\xCAA\xCAB\a\x123\x2\x2\xCAB\xCAD\x3\x2\x2"+
		"\x2\xCAC\xC90\x3\x2\x2\x2\xCAC\xC98\x3\x2\x2\x2\xCAC\xCA4\x3\x2\x2\x2"+
		"\xCAD\x11D\x3\x2\x2\x2\xCAE\xCB0\x5\xCEh\x2\xCAF\xCAE\x3\x2\x2\x2\xCAF"+
		"\xCB0\x3\x2\x2\x2\xCB0\xCB6\x3\x2\x2\x2\xCB1\xCB2\x5\xE\b\x2\xCB2\xCB3"+
		"\x5*\x16\x2\xCB3\xCB6\x3\x2\x2\x2\xCB4\xCB6\x5\x124\x93\x2\xCB5\xCAF\x3"+
		"\x2\x2\x2\xCB5\xCB1\x3\x2\x2\x2\xCB5\xCB4\x3\x2\x2\x2\xCB6\x11F\x3\x2"+
		"\x2\x2\xCB7\xCBA\x5\x122\x92\x2\xCB8\xCBA\x5\x128\x95\x2\xCB9\xCB7\x3"+
		"\x2\x2\x2\xCB9\xCB8\x3\x2\x2\x2\xCBA\x121\x3\x2\x2\x2\xCBB\xCC0\x5\x13C"+
		"\x9F\x2\xCBC\xCBD\a\x127\x2\x2\xCBD\xCBF\x5\x13C\x9F\x2\xCBE\xCBC\x3\x2"+
		"\x2\x2\xCBF\xCC2\x3\x2\x2\x2\xCC0\xCBE\x3\x2\x2\x2\xCC0\xCC1\x3\x2\x2"+
		"\x2\xCC1\x123\x3\x2\x2\x2\xCC2\xCC0\x3\x2\x2\x2\xCC3\xCC5\x5\xCEh\x2\xCC4"+
		"\xCC3\x3\x2\x2\x2\xCC4\xCC5\x3\x2\x2\x2\xCC5\xCC6\x3\x2\x2\x2\xCC6\xCC8"+
		"\a\x127\x2\x2\xCC7\xCC4\x3\x2\x2\x2\xCC8\xCC9\x3\x2\x2\x2\xCC9\xCC7\x3"+
		"\x2\x2\x2\xCC9\xCCA\x3\x2\x2\x2\xCCA\xCCB\x3\x2\x2\x2\xCCB\xCCC\x5\xCE"+
		"h\x2\xCCC\x125\x3\x2\x2\x2\xCCD\xCCF\ay\x2\x2\xCCE\xCCD\x3\x2\x2\x2\xCCE"+
		"\xCCF\x3\x2\x2\x2\xCCF\xCD0\x3\x2\x2\x2\xCD0\xCD6\aW\x2\x2\xCD1\xCD3\a"+
		"\x120\x2\x2\xCD2\xCD4\x5\x128\x95\x2\xCD3\xCD2\x3\x2\x2\x2\xCD3\xCD4\x3"+
		"\x2\x2\x2\xCD4\xCD5\x3\x2\x2\x2\xCD5\xCD7\a\x121\x2\x2\xCD6\xCD1\x3\x2"+
		"\x2\x2\xCD6\xCD7\x3\x2\x2\x2\xCD7\xCD8\x3\x2\x2\x2\xCD8\xCD9\a\x122\x2"+
		"\x2\xCD9\xCDA\x5\x11E\x90\x2\xCDA\xCDB\a\x123\x2\x2\xCDB\x127\x3\x2\x2"+
		"\x2\xCDC\xCE1\x5\x12A\x96\x2\xCDD\xCDE\a\x127\x2\x2\xCDE\xCE0\x5\x12A"+
		"\x96\x2\xCDF\xCDD\x3\x2\x2\x2\xCE0\xCE3\x3\x2\x2\x2\xCE1\xCDF\x3\x2\x2"+
		"\x2\xCE1\xCE2\x3\x2\x2\x2\xCE2\x129\x3\x2\x2\x2\xCE3\xCE1\x3\x2\x2\x2"+
		"\xCE4\xCE5\x5\x13C\x9F\x2\xCE5\xCE6\x5(\x15\x2\xCE6\xCE7\x5\xFE\x80\x2"+
		"\xCE7\x12B\x3\x2\x2\x2\xCE8\xCE9\x5\x12E\x98\x2\xCE9\xCEA\x5\x130\x99"+
		"\x2\xCEA\x12D\x3\x2\x2\x2\xCEB\xCEC\a\x82\x2\x2\xCEC\xCEF\x5\x13C\x9F"+
		"\x2\xCED\xCEE\a\x6\x2\x2\xCEE\xCF0\x5\x102\x82\x2\xCEF\xCED\x3\x2\x2\x2"+
		"\xCEF\xCF0\x3\x2\x2\x2\xCF0\xCF1\x3\x2\x2\x2\xCF1\xCF2\a-\x2\x2\xCF2\xCF3"+
		"\x5\xCEh\x2\xCF3\x12F\x3\x2\x2\x2\xCF4\xCF6\x5\x132\x9A\x2\xCF5\xCF4\x3"+
		"\x2\x2\x2\xCF6\xCF9\x3\x2\x2\x2\xCF7\xCF5\x3\x2\x2\x2\xCF7\xCF8\x3\x2"+
		"\x2\x2\xCF8\xCFA\x3\x2\x2\x2\xCF9\xCF7\x3\x2\x2\x2\xCFA\xCFC\x5\x138\x9D"+
		"\x2\xCFB\xCFD\x5\x13A\x9E\x2\xCFC\xCFB\x3\x2\x2\x2\xCFC\xCFD\x3\x2\x2"+
		"\x2\xCFD\x131\x3\x2\x2\x2\xCFE\xD1F\x5\x12E\x98\x2\xCFF\xD00\a\x87\x2"+
		"\x2\xD00\xD01\x5\x13C\x9F\x2\xD01\xD02\x5\xCCg\x2\xD02\xD03\x5\xCEh\x2"+
		"\xD03\xD1F\x3\x2\x2\x2\xD04\xD05\a\x97\x2\x2\xD05\xD1F\x5\xCEh\x2\xD06"+
		"\xD07\a\x86\x2\x2\xD07\xD0A\x5\x13C\x9F\x2\xD08\xD09\a\x6\x2\x2\xD09\xD0B"+
		"\x5\x102\x82\x2\xD0A\xD08\x3\x2\x2\x2\xD0A\xD0B\x3\x2\x2\x2\xD0B\xD0C"+
		"\x3\x2\x2\x2\xD0C\xD0D\a-\x2\x2\xD0D\xD0E\x5\xCEh\x2\xD0E\xD0F\a\x8A\x2"+
		"\x2\xD0F\xD10\x5\xCEh\x2\xD10\xD11\a\x7F\x2\x2\xD11\xD13\x5\xCEh\x2\xD12"+
		"\xD14\x5\x134\x9B\x2\xD13\xD12\x3\x2\x2\x2\xD13\xD14\x3\x2\x2\x2\xD14"+
		"\xD1F\x3\x2\x2\x2\xD15\xD16\a\x8B\x2\x2\xD16\xD1B\x5\x136\x9C\x2\xD17"+
		"\xD18\a\x127\x2\x2\xD18\xD1A\x5\x136\x9C\x2\xD19\xD17\x3\x2\x2\x2\xD1A"+
		"\xD1D\x3\x2\x2\x2\xD1B\xD19\x3\x2\x2\x2\xD1B\xD1C\x3\x2\x2\x2\xD1C\xD1F"+
		"\x3\x2\x2\x2\xD1D\xD1B\x3\x2\x2\x2\xD1E\xCFE\x3\x2\x2\x2\xD1E\xCFF\x3"+
		"\x2\x2\x2\xD1E\xD04\x3\x2\x2\x2\xD1E\xD06\x3\x2\x2\x2\xD1E\xD15\x3\x2"+
		"\x2\x2\xD1F\x133\x3\x2\x2\x2\xD20\xD21\a\x85\x2\x2\xD21\xD22\x5\x13C\x9F"+
		"\x2\xD22\x135\x3\x2\x2\x2\xD23\xD25\x5\xCEh\x2\xD24\xD26\t=\x2\x2\xD25"+
		"\xD24\x3\x2\x2\x2\xD25\xD26\x3\x2\x2\x2\xD26\x137\x3\x2\x2\x2\xD27\xD28"+
		"\a\x8F\x2\x2\xD28\xD2F\x5\xCEh\x2\xD29\xD2A\a\x83\x2\x2\xD2A\xD2B\x5\xCE"+
		"h\x2\xD2B\xD2C\a|\x2\x2\xD2C\xD2D\x5\xCEh\x2\xD2D\xD2F\x3\x2\x2\x2\xD2E"+
		"\xD27\x3\x2\x2\x2\xD2E\xD29\x3\x2\x2\x2\xD2F\x139\x3\x2\x2\x2\xD30\xD31"+
		"\a\x85\x2\x2\xD31\xD32\x5\x13C\x9F\x2\xD32\xD33\x5\x130\x99\x2\xD33\x13B"+
		"\x3\x2\x2\x2\xD34\xD3D\a\x15E\x2\x2\xD35\xD3D\x5\x14C\xA7\x2\xD36\xD3D"+
		"\x5\x14E\xA8\x2\xD37\xD3D\x5\x16E\xB8\x2\xD38\xD39\x6\x9F\x42\x2\xD39"+
		"\xD3D\x5\x142\xA2\x2\xD3A\xD3B\x6\x9F\x43\x2\xD3B\xD3D\x5\x144\xA3\x2"+
		"\xD3C\xD34\x3\x2\x2\x2\xD3C\xD35\x3\x2\x2\x2\xD3C\xD36\x3\x2\x2\x2\xD3C"+
		"\xD37\x3\x2\x2\x2\xD3C\xD38\x3\x2\x2\x2\xD3C\xD3A\x3\x2\x2\x2\xD3D\x13D"+
		"\x3\x2\x2\x2\xD3E\xD46\a\x15E\x2\x2\xD3F\xD46\a\x13F\x2\x2\xD40\xD46\x5"+
		"\x14C\xA7\x2\xD41\xD46\x5\x14E\xA8\x2\xD42\xD46\x5\x16E\xB8\x2\xD43\xD46"+
		"\x5\x142\xA2\x2\xD44\xD46\x5\x144\xA3\x2\xD45\xD3E\x3\x2\x2\x2\xD45\xD3F"+
		"\x3\x2\x2\x2\xD45\xD40\x3\x2\x2\x2\xD45\xD41\x3\x2\x2\x2\xD45\xD42\x3"+
		"\x2\x2\x2\xD45\xD43\x3\x2\x2\x2\xD45\xD44\x3\x2\x2\x2\xD46\x13F\x3\x2"+
		"\x2\x2\xD47\xD48\t>\x2\x2\xD48\x141\x3\x2\x2\x2\xD49\xD4A\t?\x2\x2\xD4A"+
		"\x143\x3\x2\x2\x2\xD4B\xD4C\t@\x2\x2\xD4C\x145\x3\x2\x2\x2\xD4D\xD4E\t"+
		"\x41\x2\x2\xD4E\x147\x3\x2\x2\x2\xD4F\xD50\a\x138\x2\x2\xD50\xD51\a\x12C"+
		"\x2\x2\xD51\xD52\a\x138\x2\x2\xD52\xD53\a\x12C\x2\x2\xD53\xD6E\a\x138"+
		"\x2\x2\xD54\xD55\a\x122\x2\x2\xD55\xD56\a\xFD\x2\x2\xD56\xD57\a\x138\x2"+
		"\x2\xD57\xD58\a\xFA\x2\x2\xD58\xD59\a\x138\x2\x2\xD59\xD5A\a\xFA\x2\x2"+
		"\xD5A\xD64\a\x138\x2\x2\xD5B\xD62\a\x138\x2\x2\xD5C\xD5D\a\x126\x2\x2"+
		"\xD5D\xD60\a\x138\x2\x2\xD5E\xD5F\a\x126\x2\x2\xD5F\xD61\a\x138\x2\x2"+
		"\xD60\xD5E\x3\x2\x2\x2\xD60\xD61\x3\x2\x2\x2\xD61\xD63\x3\x2\x2\x2\xD62"+
		"\xD5C\x3\x2\x2\x2\xD62\xD63\x3\x2\x2\x2\xD63\xD65\x3\x2\x2\x2\xD64\xD5B"+
		"\x3\x2\x2\x2\xD64\xD65\x3\x2\x2\x2\xD65\xD69\x3\x2\x2\x2\xD66\xD68\v\x2"+
		"\x2\x2\xD67\xD66\x3\x2\x2\x2\xD68\xD6B\x3\x2\x2\x2\xD69\xD6A\x3\x2\x2"+
		"\x2\xD69\xD67\x3\x2\x2\x2\xD6A\xD6C\x3\x2\x2\x2\xD6B\xD69\x3\x2\x2\x2"+
		"\xD6C\xD6E\a\x123\x2\x2\xD6D\xD4F\x3\x2\x2\x2\xD6D\xD54\x3\x2\x2\x2\xD6E"+
		"\x149\x3\x2\x2\x2\xD6F\xD70\t\x42\x2\x2\xD70\x14B\x3\x2\x2\x2\xD71\xD72"+
		"\t\x43\x2\x2\xD72\x14D\x3\x2\x2\x2\xD73\xD74\t\x44\x2\x2\xD74\x14F\x3"+
		"\x2\x2\x2\xD75\xD77\x5\x8CG\x2\xD76\xD75\x3\x2\x2\x2\xD76\xD77\x3\x2\x2"+
		"\x2\xD77\xD79\x3\x2\x2\x2\xD78\xD7A\x5\x152\xAA\x2\xD79\xD78\x3\x2\x2"+
		"\x2\xD79\xD7A\x3\x2\x2\x2\xD7A\xD7B\x3\x2\x2\x2\xD7B\xD7D\a\xE\x2\x2\xD7C"+
		"\xD7E\x5\xEEx\x2\xD7D\xD7C\x3\x2\x2\x2\xD7D\xD7E\x3\x2\x2\x2\xD7E\xD7F"+
		"\x3\x2\x2\x2\xD7F\xD81\x5\x13C\x9F\x2\xD80\xD82\x5H%\x2\xD81\xD80\x3\x2"+
		"\x2\x2\xD81\xD82\x3\x2\x2\x2\xD82\xD8C\x3\x2\x2\x2\xD83\xD84\t\x45\x2"+
		"\x2\xD84\xD89\x5\xFE\x80\x2\xD85\xD86\a\x127\x2\x2\xD86\xD88\x5\xFE\x80"+
		"\x2\xD87\xD85\x3\x2\x2\x2\xD88\xD8B\x3\x2\x2\x2\xD89\xD87\x3\x2\x2\x2"+
		"\xD89\xD8A\x3\x2\x2\x2\xD8A\xD8D\x3\x2\x2\x2\xD8B\xD89\x3\x2\x2\x2\xD8C"+
		"\xD83\x3\x2\x2\x2\xD8C\xD8D\x3\x2\x2\x2\xD8D\xD97\x3\x2\x2\x2\xD8E\xD8F"+
		"\a^\x2\x2\xD8F\xD94\x5\xFE\x80\x2\xD90\xD91\a\x127\x2\x2\xD91\xD93\x5"+
		"\xFE\x80\x2\xD92\xD90\x3\x2\x2\x2\xD93\xD96\x3\x2\x2\x2\xD94\xD92\x3\x2"+
		"\x2\x2\xD94\xD95\x3\x2\x2\x2\xD95\xD98\x3\x2\x2\x2\xD96\xD94\x3\x2\x2"+
		"\x2\xD97\xD8E\x3\x2\x2\x2\xD97\xD98\x3\x2\x2\x2\xD98\xD9C\x3\x2\x2\x2"+
		"\xD99\xD9B\x5L\'\x2\xD9A\xD99\x3\x2\x2\x2\xD9B\xD9E\x3\x2\x2\x2\xD9C\xD9A"+
		"\x3\x2\x2\x2\xD9C\xD9D\x3\x2\x2\x2\xD9D\xD9F\x3\x2\x2\x2\xD9E\xD9C\x3"+
		"\x2\x2\x2\xD9F\xDA3\x5\xE\b\x2\xDA0\xDA2\x5\x154\xAB\x2\xDA1\xDA0\x3\x2"+
		"\x2\x2\xDA2\xDA5\x3\x2\x2\x2\xDA3\xDA1\x3\x2\x2\x2\xDA3\xDA4\x3\x2\x2"+
		"\x2\xDA4\xDA6\x3\x2\x2\x2\xDA5\xDA3\x3\x2\x2\x2\xDA6\xDA7\a\xC1\x2\x2"+
		"\xDA7\xDA8\x5\xE\b\x2\xDA8\x151\x3\x2\x2\x2\xDA9\xDAB\t\x46\x2\x2\xDAA"+
		"\xDA9\x3\x2\x2\x2\xDAB\xDAC\x3\x2\x2\x2\xDAC\xDAA\x3\x2\x2\x2\xDAC\xDAD"+
		"\x3\x2\x2\x2\xDAD\x153\x3\x2\x2\x2\xDAE\xDB4\x5\x156\xAC\x2\xDAF\xDB4"+
		"\x5\x162\xB2\x2\xDB0\xDB4\x5\x16C\xB7\x2\xDB1\xDB4\x5\x15A\xAE\x2\xDB2"+
		"\xDB4\x5\x166\xB4\x2\xDB3\xDAE\x3\x2\x2\x2\xDB3\xDAF\x3\x2\x2\x2\xDB3"+
		"\xDB0\x3\x2\x2\x2\xDB3\xDB1\x3\x2\x2\x2\xDB3\xDB2\x3\x2\x2\x2\xDB4\x155"+
		"\x3\x2\x2\x2\xDB5\xDB6\x5\x158\xAD\x2\xDB6\xDB7\a\x126\x2\x2\xDB7\xDB8"+
		"\x5\xE\b\x2\xDB8\x157\x3\x2\x2\x2\xDB9\xDBA\tG\x2\x2\xDBA\x159\x3\x2\x2"+
		"\x2\xDBB\xDBD\x5\x8CG\x2\xDBC\xDBB\x3\x2\x2\x2\xDBC\xDBD\x3\x2\x2\x2\xDBD"+
		"\xDBF\x3\x2\x2\x2\xDBE\xDC0\x5\x160\xB1\x2\xDBF\xDBE\x3\x2\x2\x2\xDBF"+
		"\xDC0\x3\x2\x2\x2\xDC0\xDC1\x3\x2\x2\x2\xDC1\xDC2\a\x32\x2\x2\xDC2\xDC4"+
		"\x5\x13C\x9F\x2\xDC3\xDC5\x5\x15C\xAF\x2\xDC4\xDC3\x3\x2\x2\x2\xDC4\xDC5"+
		"\x3\x2\x2\x2\xDC5\xDD1\x3\x2\x2\x2\xDC6\xDD2\x5\x15E\xB0\x2\xDC7\xDC8"+
		"\a\x127\x2\x2\xDC8\xDCA\x5\x13C\x9F\x2\xDC9\xDCB\x5\x15C\xAF\x2\xDCA\xDC9"+
		"\x3\x2\x2\x2\xDCA\xDCB\x3\x2\x2\x2\xDCB\xDCD\x3\x2\x2\x2\xDCC\xDC7\x3"+
		"\x2\x2\x2\xDCD\xDD0\x3\x2\x2\x2\xDCE\xDCC\x3\x2\x2\x2\xDCE\xDCF\x3\x2"+
		"\x2\x2\xDCF\xDD2\x3\x2\x2\x2\xDD0\xDCE\x3\x2\x2\x2\xDD1\xDC6\x3\x2\x2"+
		"\x2\xDD1\xDCE\x3\x2\x2\x2\xDD2\xDD3\x3\x2\x2\x2\xDD3\xDD4\x5\xE\b\x2\xDD4"+
		"\x15B\x3\x2\x2\x2\xDD5\xDDE\a\x120\x2\x2\xDD6\xDDB\x5\x13C\x9F\x2\xDD7"+
		"\xDD8\a\x127\x2\x2\xDD8\xDDA\x5\x13C\x9F\x2\xDD9\xDD7\x3\x2\x2\x2\xDDA"+
		"\xDDD\x3\x2\x2\x2\xDDB\xDD9\x3\x2\x2\x2\xDDB\xDDC\x3\x2\x2\x2\xDDC\xDDF"+
		"\x3\x2\x2\x2\xDDD\xDDB\x3\x2\x2\x2\xDDE\xDD6\x3\x2\x2\x2\xDDE\xDDF\x3"+
		"\x2\x2\x2\xDDF\xDE0\x3\x2\x2\x2\xDE0\xDE1\a\x121\x2\x2\xDE1\x15D\x3\x2"+
		"\x2\x2\xDE2\xDE3\a,\x2\x2\xDE3\xDE5\x5\x13C\x9F\x2\xDE4\xDE2\x3\x2\x2"+
		"\x2\xDE4\xDE5\x3\x2\x2\x2\xDE5\xDE8\x3\x2\x2\x2\xDE6\xDE7\a-\x2\x2\xDE7"+
		"\xDE9\x5\x13C\x9F\x2\xDE8\xDE6\x3\x2\x2\x2\xDE8\xDE9\x3\x2\x2\x2\xDE9"+
		"\x15F\x3\x2\x2\x2\xDEA\xDEC\tH\x2\x2\xDEB\xDEA\x3\x2\x2\x2\xDEC\xDED\x3"+
		"\x2\x2\x2\xDED\xDEB\x3\x2\x2\x2\xDED\xDEE\x3\x2\x2\x2\xDEE\x161\x3\x2"+
		"\x2\x2\xDEF\xDF1\x5\x160\xB1\x2\xDF0\xDEF\x3\x2\x2\x2\xDF0\xDF1\x3\x2"+
		"\x2\x2\xDF1\xDF2\x3\x2\x2\x2\xDF2\xDF3\a\x94\x2\x2\xDF3\xE00\x5\x13C\x9F"+
		"\x2\xDF4\xE01\x5\x15E\xB0\x2\xDF5\xDF6\a\x127\x2\x2\xDF6\xDF8\x5\x13C"+
		"\x9F\x2\xDF7\xDF5\x3\x2\x2\x2\xDF8\xDFB\x3\x2\x2\x2\xDF9\xDF7\x3\x2\x2"+
		"\x2\xDF9\xDFA\x3\x2\x2\x2\xDFA\xDFE\x3\x2\x2\x2\xDFB\xDF9\x3\x2\x2\x2"+
		"\xDFC\xDFD\a\x6\x2\x2\xDFD\xDFF\x5\xFE\x80\x2\xDFE\xDFC\x3\x2\x2\x2\xDFE"+
		"\xDFF\x3\x2\x2\x2\xDFF\xE01\x3\x2\x2\x2\xE00\xDF4\x3\x2\x2\x2\xE00\xDF9"+
		"\x3\x2\x2\x2\xE01\xE03\x3\x2\x2\x2\xE02\xE04\a\xCB\x2\x2\xE03\xE02\x3"+
		"\x2\x2\x2\xE03\xE04\x3\x2\x2\x2\xE04\xE06\x3\x2\x2\x2\xE05\xE07\a\xC9"+
		"\x2\x2\xE06\xE05\x3\x2\x2\x2\xE06\xE07\x3\x2\x2\x2\xE07\xE09\x3\x2\x2"+
		"\x2\xE08\xE0A\x5\x164\xB3\x2\xE09\xE08\x3\x2\x2\x2\xE09\xE0A\x3\x2\x2"+
		"\x2\xE0A\xE0C\x3\x2\x2\x2\xE0B\xE0D\a\xC8\x2\x2\xE0C\xE0B\x3\x2\x2\x2"+
		"\xE0C\xE0D\x3\x2\x2\x2\xE0D\xE0E\x3\x2\x2\x2\xE0E\xE0F\x5\xE\b\x2\xE0F"+
		"\x163\x3\x2\x2\x2\xE10\xE11\a\xBF\x2\x2\xE11\xE12\x5\x158\xAD\x2\xE12"+
		"\x165\x3\x2\x2\x2\xE13\xE15\x5\x8CG\x2\xE14\xE13\x3\x2\x2\x2\xE14\xE15"+
		"\x3\x2\x2\x2\xE15\xE16\x3\x2\x2\x2\xE16\xE18\x5\x168\xB5\x2\xE17\xE19"+
		"\x5\x160\xB1\x2\xE18\xE17\x3\x2\x2\x2\xE18\xE19\x3\x2\x2\x2\xE19\xE1A"+
		"\x3\x2\x2\x2\xE1A\xE1B\a\x32\x2\x2\xE1B\xE1E\x5\x13C\x9F\x2\xE1C\xE1D"+
		"\a\x94\x2\x2\xE1D\xE1F\x5\x13C\x9F\x2\xE1E\xE1C\x3\x2\x2\x2\xE1E\xE1F"+
		"\x3\x2\x2\x2\xE1F\xE22\x3\x2\x2\x2\xE20\xE21\a\x6\x2\x2\xE21\xE23\x5\xFE"+
		"\x80\x2\xE22\xE20\x3\x2\x2\x2\xE22\xE23\x3\x2\x2\x2\xE23\xE24\x3\x2\x2"+
		"\x2\xE24\xE25\x5\xE\b\x2\xE25\x167\x3\x2\x2\x2\xE26\xE28\tI\x2\x2\xE27"+
		"\xE26\x3\x2\x2\x2\xE28\xE29\x3\x2\x2\x2\xE29\xE27\x3\x2\x2\x2\xE29\xE2A"+
		"\x3\x2\x2\x2\xE2A\x169\x3\x2\x2\x2\xE2B\xE2D\x5\x8CG\x2\xE2C\xE2B\x3\x2"+
		"\x2\x2\xE2C\xE2D\x3\x2\x2\x2\xE2D\xE2F\x3\x2\x2\x2\xE2E\xE30\x5\x168\xB5"+
		"\x2\xE2F\xE2E\x3\x2\x2\x2\xE2F\xE30\x3\x2\x2\x2\xE30\xE32\x3\x2\x2\x2"+
		"\xE31\xE33\x5\x160\xB1\x2\xE32\xE31\x3\x2\x2\x2\xE32\xE33\x3\x2\x2\x2"+
		"\xE33\xE34\x3\x2\x2\x2\xE34\xE38\a\x32\x2\x2\xE35\xE36\x5\x13C\x9F\x2"+
		"\xE36\xE37\a\x126\x2\x2\xE37\xE39\x3\x2\x2\x2\xE38\xE35\x3\x2\x2\x2\xE38"+
		"\xE39\x3\x2\x2\x2\xE39\xE3A\x3\x2\x2\x2\xE3A\xE3B\x5\x14\v\x2\xE3B\xE3C"+
		"\x5\xE\b\x2\xE3C\xE40\x5*\x16\x2\xE3D\xE3E\a\x19\x2\x2\xE3E\xE3F\a\x32"+
		"\x2\x2\xE3F\xE41\x5\xE\b\x2\xE40\xE3D\x3\x2\x2\x2\xE40\xE41\x3\x2\x2\x2"+
		"\xE41\x16B\x3\x2\x2\x2\xE42\xE44\x5\x8CG\x2\xE43\xE42\x3\x2\x2\x2\xE43"+
		"\xE44\x3\x2\x2\x2\xE44\xE45\x3\x2\x2\x2\xE45\xE47\a\xC6\x2\x2\xE46\xE48"+
		"\x5\x168\xB5\x2\xE47\xE46\x3\x2\x2\x2\xE47\xE48\x3\x2\x2\x2\xE48\xE4A"+
		"\x3\x2\x2\x2\xE49\xE4B\x5\x160\xB1\x2\xE4A\xE49\x3\x2\x2\x2\xE4A\xE4B"+
		"\x3\x2\x2\x2\xE4B\xE4C\x3\x2\x2\x2\xE4C\xE4D\a\x32\x2\x2\xE4D\xE4E\x5"+
		"\x14\v\x2\xE4E\xE4F\x5\xE\b\x2\xE4F\xE53\x5*\x16\x2\xE50\xE51\a\x19\x2"+
		"\x2\xE51\xE52\a\x32\x2\x2\xE52\xE54\x5\xE\b\x2\xE53\xE50\x3\x2\x2\x2\xE53"+
		"\xE54\x3\x2\x2\x2\xE54\x16D\x3\x2\x2\x2\xE55\xE56\tJ\x2\x2\xE56\x16F\x3"+
		"\x2\x2\x2\xE57\xE59\x5\x8CG\x2\xE58\xE57\x3\x2\x2\x2\xE58\xE59\x3\x2\x2"+
		"\x2\xE59\xE5A\x3\x2\x2\x2\xE5A\xE5C\a\x11\x2\x2\xE5B\xE5D\x5\x46$\x2\xE5C"+
		"\xE5B\x3\x2\x2\x2\xE5C\xE5D\x3\x2\x2\x2\xE5D\xE5E\x3\x2\x2\x2\xE5E\xE60"+
		"\a\xE\x2\x2\xE5F\xE61\x5\xEEx\x2\xE60\xE5F\x3\x2\x2\x2\xE60\xE61\x3\x2"+
		"\x2\x2\xE61\xE62\x3\x2\x2\x2\xE62\xE64\x5\x13C\x9F\x2\xE63\xE65\x5H%\x2"+
		"\xE64\xE63\x3\x2\x2\x2\xE64\xE65\x3\x2\x2\x2\xE65\xE68\x3\x2\x2\x2\xE66"+
		"\xE67\a\x6\x2\x2\xE67\xE69\x5\xFE\x80\x2\xE68\xE66\x3\x2\x2\x2\xE68\xE69"+
		"\x3\x2\x2\x2\xE69\xE6B\x3\x2\x2\x2\xE6A\xE6C\x5\xC0\x61\x2\xE6B\xE6A\x3"+
		"\x2\x2\x2\xE6B\xE6C\x3\x2\x2\x2\xE6C\xE70\x3\x2\x2\x2\xE6D\xE6F\x5L\'"+
		"\x2\xE6E\xE6D\x3\x2\x2\x2\xE6F\xE72\x3\x2\x2\x2\xE70\xE6E\x3\x2\x2\x2"+
		"\xE70\xE71\x3\x2\x2\x2\xE71\xE74\x3\x2\x2\x2\xE72\xE70\x3\x2\x2\x2\xE73"+
		"\xE75\a\xCF\x2\x2\xE74\xE73\x3\x2\x2\x2\xE74\xE75\x3\x2\x2\x2\xE75\xE76"+
		"\x3\x2\x2\x2\xE76\xE7A\x5\xE\b\x2\xE77\xE79\x5\x172\xBA\x2\xE78\xE77\x3"+
		"\x2\x2\x2\xE79\xE7C\x3\x2\x2\x2\xE7A\xE78\x3\x2\x2\x2\xE7A\xE7B\x3\x2"+
		"\x2\x2\xE7B\xE80\x3\x2\x2\x2\xE7C\xE7A\x3\x2\x2\x2\xE7D\xE81\a\xCD\x2"+
		"\x2\xE7E\xE7F\a\x19\x2\x2\xE7F\xE81\a\x11\x2\x2\xE80\xE7D\x3\x2\x2\x2"+
		"\xE80\xE7E\x3\x2\x2\x2\xE81\xE82\x3\x2\x2\x2\xE82\xE83\x5\xE\b\x2\xE83"+
		"\x171\x3\x2\x2\x2\xE84\xE8D\x5\x176\xBC\x2\xE85\xE8D\x5\x178\xBD\x2\xE86"+
		"\xE8D\x5\x174\xBB\x2\xE87\xE8D\x5\x17C\xBF\x2\xE88\xE8D\x5\x17E\xC0\x2"+
		"\xE89\xE8D\x5\x180\xC1\x2\xE8A\xE8D\x5v<\x2\xE8B\xE8D\x5~@\x2\xE8C\xE84"+
		"\x3\x2\x2\x2\xE8C\xE85\x3\x2\x2\x2\xE8C\xE86\x3\x2\x2\x2\xE8C\xE87\x3"+
		"\x2\x2\x2\xE8C\xE88\x3\x2\x2\x2\xE8C\xE89\x3\x2\x2\x2\xE8C\xE8A\x3\x2"+
		"\x2\x2\xE8C\xE8B\x3\x2\x2\x2\xE8D\x173\x3\x2\x2\x2\xE8E\xE90\x5\x8CG\x2"+
		"\xE8F\xE8E\x3\x2\x2\x2\xE8F\xE90\x3\x2\x2\x2\xE90\xE92\x3\x2\x2\x2\xE91"+
		"\xE93\x5\x8A\x46\x2\xE92\xE91\x3\x2\x2\x2\xE92\xE93\x3\x2\x2\x2\xE93\xE94"+
		"\x3\x2\x2\x2\xE94\xE95\x5\x12\n\x2\xE95\xE98\x5\x14\v\x2\xE96\xE97\a\xD2"+
		"\x2\x2\xE97\xE99\x5\xCEh\x2\xE98\xE96\x3\x2\x2\x2\xE98\xE99\x3\x2\x2\x2"+
		"\xE99\xE9F\x3\x2\x2\x2\xE9A\xE9B\a\xD1\x2\x2\xE9B\xE9C\a\x120\x2\x2\xE9C"+
		"\xE9D\x5\x13C\x9F\x2\xE9D\xE9E\a\x121\x2\x2\xE9E\xEA0\x3\x2\x2\x2\xE9F"+
		"\xE9A\x3\x2\x2\x2\xE9F\xEA0\x3\x2\x2\x2\xEA0\xEA1\x3\x2\x2\x2\xEA1\xEA2"+
		"\x5\xE\b\x2\xEA2\xEA9\x5*\x16\x2\xEA3\xEA7\t\x4\x2\x2\xEA4\xEA5\a\x19"+
		"\x2\x2\xEA5\xEA7\x5\x12\n\x2\xEA6\xEA3\x3\x2\x2\x2\xEA6\xEA4\x3\x2\x2"+
		"\x2\xEA7\xEA8\x3\x2\x2\x2\xEA8\xEAA\a\x167\x2\x2\xEA9\xEA6\x3\x2\x2\x2"+
		"\xEA9\xEAA\x3\x2\x2\x2\xEAA\x175\x3\x2\x2\x2\xEAB\xEAD\x5\x8CG\x2\xEAC"+
		"\xEAB\x3\x2\x2\x2\xEAC\xEAD\x3\x2\x2\x2\xEAD\xEAF\x3\x2\x2\x2\xEAE\xEB0"+
		"\x5`\x31\x2\xEAF\xEAE\x3\x2\x2\x2\xEAF\xEB0\x3\x2\x2\x2\xEB0\xEB2\x3\x2"+
		"\x2\x2\xEB1\xEB3\a \x2\x2\xEB2\xEB1\x3\x2\x2\x2\xEB2\xEB3\x3\x2\x2\x2"+
		"\xEB3\xEB4\x3\x2\x2\x2\xEB4\xEB9\x5\x13C\x9F\x2\xEB5\xEB6\a\x127\x2\x2"+
		"\xEB6\xEB8\x5\x13C\x9F\x2\xEB7\xEB5\x3\x2\x2\x2\xEB8\xEBB\x3\x2\x2\x2"+
		"\xEB9\xEB7\x3\x2\x2\x2\xEB9\xEBA\x3\x2\x2\x2\xEBA\xEBE\x3\x2\x2\x2\xEBB"+
		"\xEB9\x3\x2\x2\x2\xEBC\xEBD\a\x6\x2\x2\xEBD\xEBF\x5\xFE\x80\x2\xEBE\xEBC"+
		"\x3\x2\x2\x2\xEBE\xEBF\x3\x2\x2\x2\xEBF\xEC0\x3\x2\x2\x2\xEC0\xEC1\x5"+
		"\xE\b\x2\xEC1\x177\x3\x2\x2\x2\xEC2\xEC4\x5`\x31\x2\xEC3\xEC2\x3\x2\x2"+
		"\x2\xEC3\xEC4\x3\x2\x2\x2\xEC4\xEC6\x3\x2\x2\x2\xEC5\xEC7\a \x2\x2\xEC6"+
		"\xEC5\x3\x2\x2\x2\xEC6\xEC7\x3\x2\x2\x2\xEC7\xEC8\x3\x2\x2\x2\xEC8\xEC9"+
		"\x5\x17A\xBE\x2\xEC9\xECA\x5\xE\b\x2\xECA\x179\x3\x2\x2\x2\xECB\xECC\x5"+
		"\xF0y\x2\xECC\xECD\x5\xCCg\x2\xECD\xECE\x5\xCEh\x2\xECE\x17B\x3\x2\x2"+
		"\x2\xECF\xED0\a^\x2\x2\xED0\xED2\x5\xFE\x80\x2\xED1\xED3\a\xD0\x2\x2\xED2"+
		"\xED1\x3\x2\x2\x2\xED2\xED3\x3\x2\x2\x2\xED3\xED6\x3\x2\x2\x2\xED4\xED5"+
		"\a-\x2\x2\xED5\xED7\x5\xCEh\x2\xED6\xED4\x3\x2\x2\x2\xED6\xED7\x3\x2\x2"+
		"\x2\xED7\xED8\x3\x2\x2\x2\xED8\xED9\x5\xE\b\x2\xED9\x17D\x3\x2\x2\x2\xEDA"+
		"\xEDC\x5\x8CG\x2\xEDB\xEDA\x3\x2\x2\x2\xEDB\xEDC\x3\x2\x2\x2\xEDC\xEDD"+
		"\x3\x2\x2\x2\xEDD\xEDE\av\x2\x2\xEDE\xEE0\a\xA5\x2\x2\xEDF\xEE1\x5`\x31"+
		"\x2\xEE0\xEDF\x3\x2\x2\x2\xEE0\xEE1\x3\x2\x2\x2\xEE1\xEE2\x3\x2\x2\x2"+
		"\xEE2\xEE3\x5\x13C\x9F\x2\xEE3\xEE4\a\x6\x2\x2\xEE4\xEE6\x5\xFE\x80\x2"+
		"\xEE5\xEE7\a\xD4\x2\x2\xEE6\xEE5\x3\x2\x2\x2\xEE6\xEE7\x3\x2\x2\x2\xEE7"+
		"\xEF1\x3\x2\x2\x2\xEE8\xEE9\a\x99\x2\x2\xEE9\xEEE\x5\x17A\xBE\x2\xEEA"+
		"\xEEB\a\x127\x2\x2\xEEB\xEED\x5\x17A\xBE\x2\xEEC\xEEA\x3\x2\x2\x2\xEED"+
		"\xEF0\x3\x2\x2\x2\xEEE\xEEC\x3\x2\x2\x2\xEEE\xEEF\x3\x2\x2\x2\xEEF\xEF2"+
		"\x3\x2\x2\x2\xEF0\xEEE\x3\x2\x2\x2\xEF1\xEE8\x3\x2\x2\x2\xEF1\xEF2\x3"+
		"\x2\x2\x2\xEF2\xEF3\x3\x2\x2\x2\xEF3\xEF4\x5\xE\b\x2\xEF4\x17F\x3\x2\x2"+
		"\x2\xEF5\xEF6\a\xD3\x2\x2\xEF6\xEF7\x5\x13C\x9F\x2\xEF7\xEF8\a\x124\x2"+
		"\x2\xEF8\xEFB\x5\xCEh\x2\xEF9\xEFA\a\x127\x2\x2\xEFA\xEFC\x5\xCEh\x2\xEFB"+
		"\xEF9\x3\x2\x2\x2\xEFB\xEFC\x3\x2\x2\x2\xEFC\xEFD\x3\x2\x2\x2\xEFD\xEFE"+
		"\a\x125\x2\x2\xEFE\xEFF\x5\xE\b\x2\xEFF\xF14\x3\x2\x2\x2\xF00\xF01\a\xD3"+
		"\x2\x2\xF01\xF02\x5\x13C\x9F\x2\xF02\xF03\a\x120\x2\x2\xF03\xF06\x5\xCE"+
		"h\x2\xF04\xF05\a\x127\x2\x2\xF05\xF07\x5\xCEh\x2\xF06\xF04\x3\x2\x2\x2"+
		"\xF06\xF07\x3\x2\x2\x2\xF07\xF08\x3\x2\x2\x2\xF08\xF09\a\x121\x2\x2\xF09"+
		"\xF0A\x5\xE\b\x2\xF0A\xF14\x3\x2\x2\x2\xF0B\xF0C\x5\x13C\x9F\x2\xF0C\xF0D"+
		"\a\x124\x2\x2\xF0D\xF0E\x5\xCEh\x2\xF0E\xF0F\a\x125\x2\x2\xF0F\xF10\x5"+
		"\xCCg\x2\xF10\xF11\x5\xCEh\x2\xF11\xF12\x5\xE\b\x2\xF12\xF14\x3\x2\x2"+
		"\x2\xF13\xEF5\x3\x2\x2\x2\xF13\xF00\x3\x2\x2\x2\xF13\xF0B\x3\x2\x2\x2"+
		"\xF14\x181\x3\x2\x2\x2\x225\x188\x18A\x190\x198\x19C\x1A4\x1AC\x1B3\x1D7"+
		"\x1DC\x1DF\x1E2\x1E5\x1EA\x1F2\x1F5\x1FB\x1FE\x202\x207\x20B\x20F\x213"+
		"\x217\x21C\x21F\x225\x229\x22C\x232\x238\x23B\x23F\x241\x244\x24B\x24E"+
		"\x252\x259\x25D\x264\x267\x26C\x270\x273\x278\x282\x285\x28A\x28D\x293"+
		"\x298\x29B\x29F\x2A4\x2AA\x2AE\x2B3\x2B9\x2BC\x2C0\x2C7\x2CD\x2D1\x2D8"+
		"\x2DD\x2E0\x2E3\x2E7\x2EC\x2F5\x2FA\x302\x307\x30B\x310\x316\x31B\x325"+
		"\x32D\x331\x334\x338\x33F\x344\x349\x352\x358\x35B\x35E\x362\x366\x36A"+
		"\x370\x376\x37D\x385\x388\x38C\x390\x394\x39C\x39F\x3A4\x3AB\x3B5\x3BB"+
		"\x3C0\x3C6\x3C9\x3D5\x3DD\x3E0\x3E3\x3E7\x3EB\x3F3\x3F6\x3FB\x402\x40A"+
		"\x40D\x411\x415\x418\x41C\x421\x425\x42A\x42D\x431\x436\x43C\x440\x445"+
		"\x448\x44E\x453\x456\x45A\x45F\x465\x46D\x471\x475\x478\x47B\x480\x485"+
		"\x488\x48B\x48E\x495\x49F\x4A4\x4A9\x4B1\x4B9\x4BC\x4C3\x4C8\x4CC\x4D4"+
		"\x4DB\x4DE\x4E1\x4E4\x4E8\x4EC\x4EF\x4F3\x4F9\x4FF\x505\x50D\x511\x515"+
		"\x51D\x520\x529\x52C\x52F\x532\x535\x53A\x53D\x542\x547\x54A\x54F\x556"+
		"\x55A\x55D\x564\x56E\x573\x587\x58A\x58D\x591\x595\x598\x59C\x5A0\x5A4"+
		"\x5AA\x5B5\x5BC\x5C1\x5C4\x5C9\x5CD\x5D1\x5D8\x5DD\x5E4\x5E7\x5EC\x5EF"+
		"\x5F4\x5F8\x5FF\x604\x609\x60E\x612\x619\x61F\x62B\x62E\x631\x638\x641"+
		"\x650\x65B\x660\x66B\x677\x67C\x689\x691\x694\x69B\x6A1\x6A5\x6B1\x6B3"+
		"\x6B9\x6BF\x6C9\x6D0\x6D4\x6D7\x6E2\x6E9\x6ED\x6F0\x6FA\x700\x709\x70C"+
		"\x715\x71B\x71F\x722\x730\x733\x73A\x73E\x746\x74C\x754\x758\x75F\x763"+
		"\x766\x771\x779\x780\x788\x78C\x794\x79A\x7A5\x7AE\x7B0\x7B6\x7B9\x7C3"+
		"\x7D0\x7D5\x7DF\x7E4\x7EA\x7F3\x7FB\x7FE\x804\x807\x80B\x80F\x816\x81C"+
		"\x820\x827\x830\x835\x837\x83F\x846\x852\x85E\x864\x86C\x873\x87B\x882"+
		"\x88A\x891\x899\x8A0\x8A3\x8AB\x8B2\x8B5\x8C2\x8C5\x8C8\x8CF\x8D4\x8D9"+
		"\x8DB\x8E5\x8EA\x8EC\x8EE\x8F1\x8FD\x902\x90C\x912\x919\x91E\x926\x931"+
		"\x938\x93F\x94B\x950\x958\x95E\x967\x972\x977\x97A\x983\x98E\x993\x996"+
		"\x998\x99F\x9A4\x9A7\x9AD\x9B0\x9B3\x9BD\x9C4\x9D2\x9EA\x9ED\xA2B\xA3F"+
		"\xA45\xA4A\xA52\xA54\xA56\xA5E\xA7A\xA8E\xACD\xAE1\xAE7\xAF0\xB02\xB04"+
		"\xB10\xB29\xB39\xB41\xB43\xB47\xB4F\xB52\xB5C\xB64\xB6B\xB73\xB7D\xB87"+
		"\xB8E\xB9D\xBA0\xBA2\xBA9\xBAD\xBBB\xBC6\xBD1\xBD5\xBDD\xBE6\xBEC\xBFA"+
		"\xC01\xC07\xC0C\xC11\xC15\xC1B\xC23\xC2B\xC30\xC33\xC3C\xC3F\xC48\xC4B"+
		"\xC53\xC56\xC5D\xC68\xC6B\xC74\xC7C\xC87\xC93\xC9B\xC9F\xCA6\xCAC\xCAF"+
		"\xCB5\xCB9\xCC0\xCC4\xCC9\xCCE\xCD3\xCD6\xCE1\xCEF\xCF7\xCFC\xD0A\xD13"+
		"\xD1B\xD1E\xD25\xD2E\xD3C\xD45\xD60\xD62\xD64\xD69\xD6D\xD76\xD79\xD7D"+
		"\xD81\xD89\xD8C\xD94\xD97\xD9C\xDA3\xDAC\xDB3\xDBC\xDBF\xDC4\xDCA\xDCE"+
		"\xDD1\xDDB\xDDE\xDE4\xDE8\xDED\xDF0\xDF9\xDFE\xE00\xE03\xE06\xE09\xE0C"+
		"\xE14\xE18\xE1E\xE22\xE29\xE2C\xE2F\xE32\xE38\xE40\xE43\xE47\xE4A\xE53"+
		"\xE58\xE5C\xE60\xE64\xE68\xE6B\xE70\xE74\xE7A\xE80\xE8C\xE8F\xE92\xE98"+
		"\xE9F\xEA6\xEA9\xEAC\xEAF\xEB2\xEB9\xEBE\xEC3\xEC6\xED2\xED6\xEDB\xEE0"+
		"\xEE6\xEEE\xEF1\xEFB\xF06\xF13";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace LanguageService.CodeAnalysis.XSharp.SyntaxParser
