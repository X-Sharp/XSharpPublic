<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-07-04T23:01:46.774+08:00" lasteditedby="niuji" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>-vo7</title>
  <keywords>
    <keyword>-vo7</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">-vo7<tab /><tab />Implicit casts and conversions </para>
    </header>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">-vo7 选项指示编译器允许 Visual Objects 中允许、但在 X# 中通常是非法或需要显式转换的隐式转换。</para>
    <para styleclass="Heading2">语法</para>
    <para styleclass="Code with box">-vo7[+|-]</para>
    <para styleclass="Heading2">参数</para>
    <para styleclass="List">+ | - <tab />指定 + 或 -vo7，可指示编译器允许 Visual Objects 中允许的某些隐式转换。</para>
    <para styleclass="Heading2">备注</para>
    <para styleclass="Normal">Visual Objects允许在具有不同语义的类型之间进行隐式转换，而X#通常在这种情况下需要显式转换。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">例如，Visual Objects允许在整数类型和指针类型之间进行隐式转换。虽然指针是整数，但它们具有不同的语义。整数是数值，指针是表示内存位置的地址。除了语义上的差异外，指针的大小取决于底层平台，而整数的大小不会因平台而异（System.IntPtr除外）。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">虽然可能（通常是必要的）在具有不同语义的类型之间进行转换，但应始终通过显式转换来完成。这不仅确保生成正确的转换代码（如果需要），还自我记录了您正在将一个类型转换为具有不同含义的另一个类型的事实。</para>
    <para styleclass="Normal"><table styleclass="Default" rowcount="6" colcount="3">
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">From</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">To</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">已执行的操作</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">PTR</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR)</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">无，这些类型是二进制兼容的。但是，如果指针指向的数据类型不正确，代码运行时可能会失败。</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">INT or DWORD </para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR) </para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">无，这些类型是二进制兼容的。不过，如果指针指向的数据类型不正确，代码运行时可能会失败。请注意，只有当目标平台设置为 x86 时，才允许进行这种转换。</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">INT64 or UINT64</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">strongly typed PTR (e.g. INT PTR)</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">无，这些类型是二进制兼容的。不过，如果指针指向的数据类型不正确，代码运行时可能会失败。请注意，只有当目标平台设置为 x64 或 Itanium 时，才允许进行这种转换。</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">OBJECT</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">any other reference type</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">编译器插入了一个显式的目标类型转换，运行时可能会失败。</para>
        </td>
      </tr>
      <tr style="vertical-align:top">
        <td style="width:177px;">
          <para styleclass="Normal">type PTR</para>
        </td>
        <td style="width:265px;">
          <para styleclass="Normal">REF type</para>
        </td>
        <td style="width:750px;">
          <para styleclass="Normal">编译器会将指针转换为引用。请注意，即使使用 -vo7，也不能将所有指针转换为引用，否则会影响垃圾回收器的完整性。</para>
        </td>
      </tr>
    </table></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text styleclass="Heading3">要在 Visual Studio 开发环境中设置该编译器选项，请执行以下操作</text></para>
    <para styleclass="Normal"></para>
    <list id="0" type="ol" listtype="decimal" formatstring="&#37;&#48;&#58;&#115;&#46;" format-charset="DEFAULT_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="Normal" style="margin-left:13px; font-family:Arial; font-size:11pt; color:#000000;">
      <li styleclass="Normal" style="margin-left:13px;">打开项目的 &quot;属性&quot;页面</li>
      <li styleclass="Normal" style="margin-left:13px;">点击 Dialect 选项卡 </li>
      <li styleclass="Normal" style="margin-left:13px;">更改值</li>
      <li styleclass="Normal" style="margin-left:13px;"><link displaytype="text" defaultstyle="true" type="topiclink" href="PropPage-Dialect">查看属性页</link></li>
    </list>
    <para styleclass="Heading3"><text styleclass="Heading2">示例</text></para>
    <para styleclass="Normal">下面的代码在 Visual Objects 中是有效的，但在 X# 中却无法编译，除非使用 -vo7，因为 CreateObject()返回 OBJECT，而且没有从 OBJECT 到更派生类型的隐式转换（这种转换不能保证安全，隐式转换总是安全的）。</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">END</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CLASS</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> f </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;"> foo</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> s </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">SYMBOL</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">s := #foo</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">f := CreateObject( s ) </text><text style="font-weight:bold; font-style:italic; color:#339966;">// 没有从 &quot;OBJECT &quot;到 &quot;foo &quot;的隐式转换</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">使用 -vo7 的效果与将赋值改写为 f 的效果相同：</para>
    <para styleclass="Code Example"><text style="font-weight:normal; font-style:normal; color:#000000;">f := (foo) CreateObject( s )</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">无论哪种情况，生成的代码都是完全相同的，而且在运行时，向 foo 的投递可能会失败。但是，显式转置自我证明了您期望 CreateObject() 的返回值包含 foo 的实例。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">下面的示例在 Visual Objects 中也有效，但除非使用 -vo7，否则无法在 X# 中编译，因为 @ 操作符返回其操作数（类型化指针）的地址，而指针在 X# 中与引用不同：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> x </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">ByRef( @x )</text><br/><br/><text style="font-weight:normal; font-style:normal; color:#000000;">...</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ByRef( i </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">REF</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">INT</text><text style="font-weight:normal; font-style:normal; color:#000000;"> ) </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">i := 5</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">选项 -vo7 会自动将解析为 INT PTR 类型的 @x 转换为与函数参数兼容的 REF INT。不过，我们建议您删除 @ 操作符，而不是使用 -vo7 来实现这一目的。</para>
  </body>
</topic>
