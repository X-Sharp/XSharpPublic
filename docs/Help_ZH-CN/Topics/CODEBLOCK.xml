<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../helpproject.xsl" ?>
<topic template="Default" modified="2024-06-04T23:25:14.598+08:00" lasteditedby="Design" version="2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../helpproject.xsd">
  <title>CODEBLOCK</title>
  <keywords>
    <keyword>CODEBLOCK</keyword>
  </keywords>
  <body>
    <header>
      <para styleclass="Heading1">CODEBLOCK</para>
    </header>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"><text style="font-weight:bold;">CODEBLOCK</text>(代码块)类型是在 Clipper 时代的 XBase 语言中引入的。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">它们可以被看作是无名函数。它们可以有 0 个或多个参数，并返回一个值。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">最简单的返回字符串字面值的代码块如下所示：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|| &quot;Hello World&quot;}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><br/><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Body Text">要使用 CODEBLOCK(代码块)，您需要调用 Eval() 运行时函数。</para>
    <para styleclass="Body Text"></para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">CODEBLOCK(代码块)不限于固定表达式，因为它们可以使用参数。</text></para>
    <para styleclass="Body Text"><br/><text style="font-weight:normal; font-style:normal; color:#000000;">以下CODEBLOCK(代码块)添加了 2 个参数：</text></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b| a + b}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, 1,2)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, &quot;Helllo &quot;, &quot;World&quot;)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text></para>
    <para styleclass="Body Text"><text style="font-weight:normal; font-style:normal; color:#000000;">正如您在示例中所看到的，我们既可以在这里使用数字参数，也可以使用字符串参数。两者都可以。这是因为代码块的参数属于所谓的 USUAL 类型。它们可以包含任何值。当然，以下操作将失败，因为 USUAL 类型不支持字符串相乘：</text></para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b| a * b}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, 1,2)</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb, &quot;Helllo &quot;, &quot;World&quot;)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Heading2">更复杂的 codeblock</para>
    <para styleclass="Normal">代码块不仅限于单个表达式。</para>
    <para styleclass="Normal"><br/>它们也可以包含一个(逗号分隔的)<text style="font-weight:bold;">表达式列表</text>。最后一个表达式的值是代码块的返回值。</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {|a,b,c| QOut(&quot;value 1&quot;, a) , QOut(&quot;value 2&quot;, b), QOut(&quot;value 3&quot;, c), a*b*c}</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb,10,20,30)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Body Text">XSharp 还引入了包含<text style="font-weight:bold;">语句列表</text>的代码块：</para>
    <para styleclass="Code Example"><text style="font-weight:bold; font-style:normal; color:#ff0000;">FUNCTION</text><text style="font-weight:normal; font-style:normal; color:#000000;"> Start() </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">VOID</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">LOCAL</text><text style="font-weight:normal; font-style:normal; color:#000000;"> cb </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">AS</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text><text style="font-weight:bold; font-style:normal; color:#ff0000;">CODEBLOCK</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">cb := {| a,b,c| &#160;</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? &quot;value 1&quot; ,a </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? &quot;value 2&quot; ,b</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; ? &quot;value 3&quot; ,c </text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; </text><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;"> a*b*c</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;"> &#160; }</text><br/><text style="font-weight:normal; font-style:normal; color:#000000;">? Eval(cb,10,20,30)</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">WAIT</text><br/><text style="font-weight:bold; font-style:normal; color:#ff0000;">RETURN</text><text style="font-weight:normal; font-style:normal; color:#000000;">&#32;</text></para>
    <para styleclass="Heading3">注意</para>
    <list id="0" type="ul" listtype="bullet" formatstring="&#183;" format-charset="SYMBOL_CHARSET" levelreset="true" legalstyle="false" startfrom="1" styleclass="List" style="font-family:Symbol; font-size:11pt; color:#000000;">
      <li styleclass="List">第一条语句应从参数列表后的新行开始。</li>
      <li styleclass="List">参数列表后不应有分号。</li>
      <li styleclass="List">语句列表应以 RETURN 语句结束。</li>
    </list>
    <para styleclass="List"></para>
    <para styleclass="List"></para>
    <para styleclass="Heading3">实现</para>
    <para styleclass="Normal">CODEBLOCK 类型在抽象类 XSharp.Codeblock 中实现。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">CODEBLOCK 的 Usualtype 值为 9。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">在你的代码中，永远不会有 XSharp.Codeblock 类型的对象。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Normal">编译时代码块被转化为 XSharp.Codeblock 的子类。</para>
    <para styleclass="Normal"></para>
    <para styleclass="Body Text">运行时(宏编译)代码块被转换为 XSharp._Codeblock 类的子类，该类继承于 Codeblock。</para>
    <para styleclass="Body Text"><br/>根据运行时代码块的类型，它要么是宏代码块(MacroCodeblock)类的实例，要么是宏内存变量代码块(MacroMemVarCodeblock)类的实例(当宏创建动态内存变量时)。</para>
  </body>
</topic>
