<?xml version="1.0" encoding="utf-8"?>
<!-- This file was generated  on 17/11/2022 21:48:28 -->
<topic id="cat-Programming_Functions" revisionNumber="1" title="Programming Functions">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="Section1">
      <title>Programming Functions</title>
      <content>
        <table>
          <tableHeader>
            <row>
              <entry>
                <para>Assembly</para>
              </entry>
              <entry>
                <para>Function</para>
              </entry>
              <entry>
                <para>Description</para>
              </entry>
            </row>
          </tableHeader>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._ArrayToObjectArray(XSharp.__Array)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Helper function to convert ARRAY to OBJECT[]</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._ArrayToUsualArray(XSharp.__Array)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Helper function to convert ARRAY to USUAL[]</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._Break(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Branch out of a BEGIN SEQUENCE...END construct.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._CallClipFunc(System.String,XSharp.__Array)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Call a clipper function by name</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions._cmdDirMake(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions._cmdDirRemove(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._CreateInstance(System.String,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Create an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions._GetCmdLine</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return a pointer to the command line used to invoke the application.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions._GetInst</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the instance handle of an application or DLL.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._HasClipFunc(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._ObjectArrayToUsualArray(System.Object[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Helper function to convert OBJECT[] to USUAL[]</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions._Quit</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Terminate application processing, close all open files, and return control to the operating system.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions._Run(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Execute a Windows or DOS application, a batch file, or a DOS command.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._Send(System.Object,System.Reflection.MethodInfo,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._SequenceError(System.Exception)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            This function is automatically inserted by the compiler in a RECOVER USING block and gets called when the
            RECOVER USING block is reached because of an exception.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._SequenceRecover(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            This function is automatically inserted by the compiler in a compiler generated
            RECOVER USING block when you have a BEGIN SEQUENCE .. END SEQUENCE in your code
            without RECOVER USING clause
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions._UsualArrayToObjectArray(XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Helper function to convert USUAL[] to OBJECT[]</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AClass(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ADBObjects(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AddProperty(System.Object,System.String,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Adds a new property to an object at run time.
            You can use AddProperty( ) to add properties and their values to valid X# objects,
            including those created from X# classes, COM classes, and the SCATTER...NAME command.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AGetFileVersion(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AMembers(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ANetResources(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ASend(XSharp.__Array,System.String,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Invoke a method for every element in an array of objects.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AStackInfo(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.AUsed(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Between(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is between two other values.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.CanBreak</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check if a BEGIN SEQUENCE...END construct is active.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.CapsLock</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the current mode of the CAPS Lock key or sets the CAPS Lock key mode on or off.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.CheckInstanceOf(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if an object is an instance of a particular class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ClassCount</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the number of classes available to your application.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.XPP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.XPP.Functions.ClassCreate(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Create a class dynamically.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.XPP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.XPP.Functions.ClassDestroy(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Remove the class object of class. </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ClassList</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return an array of symbols corresponding to the classes available to your application.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ClassName(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get the class name of an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.XPP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.XPP.Functions.ClassObject(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Retrieves the class object of class. </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ClassTree(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get the class hierarchy of an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ClassTreeClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get the class hierarchy of a class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.CompObj(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.CParamCount(XSharp.Codeblock)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the number of arguments that a code block is expecting.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.CreateInstance(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Create an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.CreateObject(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Creates an object from a class definition or an Automation-enabled application.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.CreateObjectEx(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Creates an instance of a registered COM object (such as a X# Automation server) on a remote computer.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.CSend(System.Object,System.String,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Invoke a method.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Default(XSharp.__Usual@,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Assign a default value to a NIL argument.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Difference(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.DoSendMail(System.IntPtr,System.String,System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Empty(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the result of an expression is empty.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EmptyField(System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if field number n in the current workarea is empty.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EmptyPSZ(XSharp.__Psz)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EmptyRecord</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the current record in the current workarea is empty.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EmptyString(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EmptyUsual(System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the empty value of a specified data type.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EnableArrayIndexCheck(System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Suppress Array Index check to be compatible with Visual Objects</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EnableLBOptimizations(System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EnforceNumeric(XSharp.__Usual@)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Make sure a variable is a numeric.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.EnforceType(XSharp.__Usual@,System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Make sure a variable is of a certain type.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Eval(XSharp.ICodeblock,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Evaluate a code block
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Evaluate(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Evaluate an expression contained in a string.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.EVL(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a non-empty value from two expressions.
            You can use the EVL( ) function to return an appropriate substitute value instead of an empty value, such as False (.F.) or 0, from two expressions.
            You can also use this functionality to remove empty values from calculations or operations where empty values are not supported or relevant.
            The X# Logical value, False (.F.), and the Numeric value of 0 also evaluate to empty.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.ExecName(System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ExecScript(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Enables you to run multiple lines of code from variables, tables, and other text at runtime.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ExecScriptFast(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Enables you to run multiple lines of code from variables, tables, and other text at runtime.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.FindClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Find a class in the referenced assemblies
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.FontMetric(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ForceExt(System.String,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a string with the old file name extension replaced by a new extension.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ForcePath(System.String,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a file name with a new path name substituted for the old one.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.FParamCount(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Return the number of local arguments that a function is expecting.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.GetObject(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.GetWordCount(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Counts the words in a string.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.GetWordNum(System.String,System.Int32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a specified word from a string.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ICase(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Evaluates the results from a list of conditions (upto 100 pairs are supported).
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.ImeStatus(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.InList(XSharp.__Usual,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Indicate whether the first expression in a series is repeated later in the series.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.InListExact(XSharp.__Usual,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Indicate whether the first expression in a series is repeated later in the series.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.InputBox(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.InsMode</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the current insert mode, or sets the insert mode on or off.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsAccess(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check whether a particular access method can be sent to an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsAlNum(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is alphanumeric.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsAlpha(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is alphabetic.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsAlphaNum(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Determine if the leftmost character in a string is alphanumeric..</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsArray(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is an array.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsAssign(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check whether a particular assign method can be sent to an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsBDigit(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is a binary digit (0 or 1).
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsBinary(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a Binary.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsByRef(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is passed by reference
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a class exists.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsClassOf(System.String,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if one class is a subclass of another class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsCodeBlock(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a code block.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsColor</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determines whether a computer can display color.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsCurrency(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a Currency.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsDate(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a DATE.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsDateTime(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a DateTime.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsDecimal(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a Decimal.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsDigit(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is a digit (that is, a numeric digit between 0 and 9).
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsExclusive(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsFloat(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a FLOAT.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsFlocked(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the table lock status.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsFractional(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a Decimal or a Float
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsInstanceOf(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if an object is an instance of a class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsInstanceOfUsual(XSharp.__Usual,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if an object inside a USUAL is an instance of a class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsInt64(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a INT64.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsInteger(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is an integer (LONG or INT64).
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsLogic(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a logical.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsLong(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a LONGINT.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsLower(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is a lowercase letter.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.XPP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.XPP.Functions.IsMemberVar(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsMemoFetched(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsMethod(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check whether a particular method can be sent to an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsMethodClass(System.String,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check whether a particular method can be sent to a class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsMethodUsual(XSharp.__Usual,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Check whether a particular method can be sent to an object inside a USUAL.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsMouse</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns true (.T.) if mouse hardware is present.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsNil(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is NIL.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsNull(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsNumeric(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a numeric.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsObject(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsPen</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsPtr(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a pointer.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsReadOnly(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determines whether a table or database is opened read-only.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsRlocked(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the record lock status.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsRunningOnWindows</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsSpace(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is a blank (that is, Chr(9) through Chr(13) or Chr(32)).
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsString(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a string.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IsSymbol(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if a value is a symbol.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.IsTransactable(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsUpper(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is uppercase.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.IsXDigit(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine if the leftmost character in a string is a hex character (that is, digits from 1 through 9 and letters from A through F).
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarGet(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the contents of an exported instance variable.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarGetInfo(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get information about how a particular instance variable (or access method) was declared.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarGetSelf(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the contents of an instance variable.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IvarList(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Store all instance variables of an object into an array.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IvarListClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Store all instance variables of a class into an array.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarPut(System.Object,System.String,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Assign a value to an exported instance variable.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarPutInfo(System.Object,XSharp.__Symbol)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get information about how a particular instance variable (or assign method) was declared.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.IVarPutSelf(System.Object,System.String,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Assign a value to an instance variable.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.JCDOW(XSharp.__Date)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.JCMONTH(XSharp.__Date)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.JCYEAR(XSharp.__Date)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.LineNo(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.LoadResString(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Look up an identifier in a string table and returns its corresponding string.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Lookup(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Max(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the larger of 2 values.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.MessageBox(XSharp.__Usual,System.Int32,System.String,System.Int32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Displays a user-defined dialog box.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.MethodList(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Create a class list in the form of an array for the specified object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.MethodListClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Create a class list in the form of an array for the specified class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.ModuleName(System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.MParamCount(System.String,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the number of arguments that a method is expecting.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.NetErr</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Detect a concurrency conflict.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.NewObject(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.NoMethod</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Identify an invalid method call.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Normalize(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.NumLock</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the current mode of the Num Lock key or sets the mode of the Num Lock key on or off.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.NVersion</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Identify a character set by its nation driver.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.NVL(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a non-null value from two expressions.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Object2Array(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Convert the values of an object's instance variables to an array.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Object2Float(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Convert an object containing a numeric value to a FLOAT
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.OClone(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Duplicate an object`.</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.OleDateTimeAsDate(System.Boolean)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Set and Retrieve the setting that determines if OLE date values should be returned as VO date values or as DateTime values</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.OOPTree(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return a multidimensional array of all object-oriented programming symbols that constitute the class.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.OOPTreeClass(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return a multidimensional array of all object-oriented programming symbols that constitute the class of an object.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.OS</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the operating system name.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Pause</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Display a system modal dialog box to pause the current application.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.ProcFile(System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the name of the activated module.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.ProcLine(System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the source line number of the last line executed in an activated entity.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.ProcName</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Return the name of an activated entity.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Program(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the name of the program at a specified program level, the name of the currently executing program, the current program level,
            or the name of the program executing when an error occurred.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.PtrLen(System.IntPtr)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine the number of bytes that can be read at a given pointer.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.PtrLenWrite(System.IntPtr)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine the number of bytes that can be written at a given pointer.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.RaiseEvent(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.RegisterFileSearch(XSharp.FileSearcher)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Register Worker function for File Search API.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.RegisterFoxMemVarSupport</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.RemoveProperty(System.Object,System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Removes a property from an object at run time.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.RGB(System.Byte,System.Byte,System.Byte)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Get a particular Windows color.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.RgbScheme(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Scheme(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Send(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual[])</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Invoke a method.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Sign(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns a numeric value of 1, –1, or 0 if the specified numeric expression evaluates to a positive, negative, or 0 value.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.Sys(XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.SysMetric(System.Int32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>-- todo --</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VO</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VO.Functions.SysObject(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Install a system-wide object. Please not that this works a bit different from Visual Objects.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.SystemTypeToUsualType(System.Type)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Calculate the Usual Type for a System Type
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.TextMerge(XSharp.__Usual,XSharp.__Usual,XSharp.__Usual,XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Provides evaluation of a character expression.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.TruePath(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
              </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Type(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine the data type of an expression represented as a string.
        </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.Core</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.Core.Functions.TypeString(System.UInt32)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Return a descriptive name (in upper case) for a X# (Usual) Type</para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.UnRegisterAxit(System.Object)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Terminate the registration of an object that has been registered with RegisterAxit().
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.UsualType(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine the data type of an expression.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.UsualVal(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Access contents of an address, whether it is passed by reference or not.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.ValType(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Determine the data type of an expression.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.VFP</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.VFP.Functions.VarType(XSharp.__Usual)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the data type of an expression.
            VARTYPE( ) is similar to the TYPE( ) function, but VARTYPE( ) is faster and does not require quotation
                marks to enclose the expression for which the data type is returned.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.Version</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>
            Returns the version of X# you are using.
            </para>
            </entry>
          </row>
          <row>
            <entry>
              <para>XSharp.RT</para>
            </entry>
            <entry>
              <para>
                <codeEntityReference qualifyHint="false" autoUpgrade="true">M:XSharp.RT.Functions.XSharpLoadLibrary(System.String)</codeEntityReference>
              </para>
            </entry>
            <entry>
              <para>Dynamically loads a library (dll) compiled with X#, running any _INIT procedures it may contain.</para>
            </entry>
          </row>
        </table>
      </content>
    </section>
  </developerConceptualDocument>
</topic>